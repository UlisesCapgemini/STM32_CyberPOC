
TFM_Appli_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .TFM_VECTORS  00000420  0c017400  0c017400  00007400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .copy.table   00000048  0c017820  0c017820  00007820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .TFM_DATA     00000230  30035b00  0c0372c4  00035b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .TFM_UNPRIV_DATA 00000000  30031000  30031000  00038ce0  2**5
                  CONTENTS
  4 .TFM_SP_STORAGE_DATA 00000000  30031020  30031020  00038ce0  2**5
                  CONTENTS
  5 .TFM_SP_ITS_DATA 00000000  30031a80  30031a80  00038ce0  2**5
                  CONTENTS
  6 .TFM_SP_CRYPTO_DATA 00000000  30032000  30032000  00038ce0  2**5
                  CONTENTS
  7 .TFM_SP_INITIAL_ATTESTATION_DATA 00000000  30034080  30034080  00038ce0  2**5
                  CONTENTS
  8 .zero.table   00000048  0c017868  0c017868  00007868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TFM_BSS      00006c4c  30035d30  30035d30  00040000  2**3
                  ALLOC
 10 .TFM_SP_STORAGE_BSS 00000020  30031020  30031020  00040000  2**5
                  ALLOC
 11 .TFM_SP_STORAGE_STACK 00000a00  30031080  30031080  00040000  2**7
                  ALLOC
 12 .TFM_SP_ITS_BSS 00000020  30031a80  30031a80  00040000  2**5
                  ALLOC
 13 .TFM_SP_ITS_STACK 00000500  30031b00  30031b00  00040000  2**7
                  ALLOC
 14 .TFM_SP_CRYPTO_BSS 00000020  30032000  30032000  00040000  2**5
                  ALLOC
 15 .TFM_SP_CRYPTO_STACK 00002000  30032080  30032080  00040000  2**7
                  ALLOC
 16 .TFM_SP_INITIAL_ATTESTATION_BSS 00000020  30034080  30034080  00040000  2**5
                  ALLOC
 17 .TFM_SP_INITIAL_ATTESTATION_STACK 00000a00  30034100  30034100  00040000  2**7
                  ALLOC
 18 .TFM_UNPRIV_CODE 00004ca0  0c0178c0  0c0178c0  000078c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .TFM_SP_STORAGE 00000000  0c01c560  0c01c560  00038ce0  2**5
                  CONTENTS
 20 .TFM_SP_ITS   00000000  0c01c560  0c01c560  00038ce0  2**5
                  CONTENTS
 21 .TFM_SP_CRYPTO 00000000  0c01c560  0c01c560  00038ce0  2**5
                  CONTENTS
 22 .TFM_SP_INITIAL_ATTESTATION 00000000  0c01c560  0c01c560  00038ce0  2**5
                  CONTENTS
 23 .ARM.exidx    00000008  0c01c560  0c01c560  0000c560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 24 .ER_TFM_CODE  0001ad5c  0c01c568  0c01c568  0000c568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .tfm_bl2_shared_data 00000400  30030000  30030000  00040000  2**5
                  ALLOC
 26 .msp_stack    00000400  30030400  30030400  00040000  2**5
                  ALLOC
 27 .psp_stack    00000800  30030800  30030800  00040000  2**5
                  ALLOC
 28 .TFM_UNPRIV_BSS 00000020  30031000  30031000  00040000  2**5
                  ALLOC
 29 .heap         00001000  30034b00  30034b00  00040000  2**3
                  ALLOC
 30 .gnu.sgstubs  00000060  0c038c80  0c038c80  00038c80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .ARM.attributes 00000030  00000000  00000000  00038ce0  2**0
                  CONTENTS, READONLY
 32 .comment      0000007b  00000000  00000000  00038d10  2**0
                  CONTENTS, READONLY
 33 .debug_info   000b1a0b  00000000  00000000  00038d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 34 .debug_abbrev 000173b6  00000000  00000000  000ea796  2**0
                  CONTENTS, READONLY, DEBUGGING
 35 .debug_loc    0004c5c8  00000000  00000000  00101b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 36 .debug_aranges 00003838  00000000  00000000  0014e114  2**0
                  CONTENTS, READONLY, DEBUGGING
 37 .debug_ranges 000054a8  00000000  00000000  0015194c  2**0
                  CONTENTS, READONLY, DEBUGGING
 38 .debug_macro  00048723  00000000  00000000  00156df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 39 .debug_line   00062eba  00000000  00000000  0019f517  2**0
                  CONTENTS, READONLY, DEBUGGING
 40 .debug_str    00137056  00000000  00000000  002023d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 41 .debug_frame  0000bb5c  00000000  00000000  00339428  2**2
                  CONTENTS, READONLY, DEBUGGING
 42 .stab         00000084  00000000  00000000  00344f84  2**2
                  CONTENTS, READONLY, DEBUGGING
 43 .stabstr      00000117  00000000  00000000  00345008  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .TFM_VECTORS:

0c017400 <__Vectors>:
 c017400:	30030800 	.word	0x30030800
 c017404:	0c0175f5 	.word	0x0c0175f5
 c017408:	0c017659 	.word	0x0c017659
 c01740c:	0c01765d 	.word	0x0c01765d
 c017410:	0c032b7d 	.word	0x0c032b7d
 c017414:	0c032b7f 	.word	0x0c032b7f
 c017418:	0c032b81 	.word	0x0c032b81
 c01741c:	0c032acd 	.word	0x0c032acd
	...
 c01742c:	0c032b65 	.word	0x0c032b65
 c017430:	0c017675 	.word	0x0c017675
 c017434:	00000000 	.word	0x00000000
 c017438:	0c032a99 	.word	0x0c032a99
 c01743c:	0c01767d 	.word	0x0c01767d
 c017440:	0c017681 	.word	0x0c017681
 c017444:	0c017685 	.word	0x0c017685
 c017448:	0c017689 	.word	0x0c017689
 c01744c:	0c01768d 	.word	0x0c01768d
 c017450:	0c017691 	.word	0x0c017691
 c017454:	0c017695 	.word	0x0c017695
 c017458:	0c017699 	.word	0x0c017699
 c01745c:	0c01769d 	.word	0x0c01769d
 c017460:	0c0176a1 	.word	0x0c0176a1
 c017464:	0c0176a5 	.word	0x0c0176a5
 c017468:	0c0176a9 	.word	0x0c0176a9
 c01746c:	0c0176ad 	.word	0x0c0176ad
 c017470:	0c0176b1 	.word	0x0c0176b1
 c017474:	0c0176b5 	.word	0x0c0176b5
 c017478:	0c0176b9 	.word	0x0c0176b9
 c01747c:	0c0176bd 	.word	0x0c0176bd
 c017480:	0c0176c1 	.word	0x0c0176c1
 c017484:	0c0176c5 	.word	0x0c0176c5
 c017488:	0c0176c9 	.word	0x0c0176c9
 c01748c:	0c0176cd 	.word	0x0c0176cd
 c017490:	0c0176d1 	.word	0x0c0176d1
 c017494:	0c0176d5 	.word	0x0c0176d5
 c017498:	0c0176d9 	.word	0x0c0176d9
 c01749c:	0c0176dd 	.word	0x0c0176dd
 c0174a0:	0c0176e1 	.word	0x0c0176e1
 c0174a4:	0c0176e5 	.word	0x0c0176e5
 c0174a8:	0c0176e9 	.word	0x0c0176e9
 c0174ac:	0c0176ed 	.word	0x0c0176ed
 c0174b0:	0c0176f1 	.word	0x0c0176f1
 c0174b4:	0c0176f5 	.word	0x0c0176f5
 c0174b8:	0c0176f9 	.word	0x0c0176f9
 c0174bc:	0c0176fd 	.word	0x0c0176fd
 c0174c0:	0c017701 	.word	0x0c017701
 c0174c4:	0c017705 	.word	0x0c017705
 c0174c8:	0c017709 	.word	0x0c017709
 c0174cc:	0c01770d 	.word	0x0c01770d
 c0174d0:	0c017711 	.word	0x0c017711
 c0174d4:	0c017715 	.word	0x0c017715
 c0174d8:	0c017719 	.word	0x0c017719
 c0174dc:	0c01771d 	.word	0x0c01771d
 c0174e0:	0c017721 	.word	0x0c017721
 c0174e4:	0c017725 	.word	0x0c017725
 c0174e8:	0c017729 	.word	0x0c017729
 c0174ec:	0c01772d 	.word	0x0c01772d
 c0174f0:	0c017731 	.word	0x0c017731
 c0174f4:	0c017735 	.word	0x0c017735
 c0174f8:	0c017739 	.word	0x0c017739
 c0174fc:	0c01773d 	.word	0x0c01773d
 c017500:	0c017741 	.word	0x0c017741
 c017504:	0c017745 	.word	0x0c017745
 c017508:	0c017749 	.word	0x0c017749
 c01750c:	0c01774d 	.word	0x0c01774d
 c017510:	0c017751 	.word	0x0c017751
 c017514:	0c017755 	.word	0x0c017755
 c017518:	0c017759 	.word	0x0c017759
 c01751c:	0c01775d 	.word	0x0c01775d
 c017520:	0c017761 	.word	0x0c017761
 c017524:	0c017765 	.word	0x0c017765
 c017528:	0c017769 	.word	0x0c017769
 c01752c:	0c01776d 	.word	0x0c01776d
 c017530:	0c017771 	.word	0x0c017771
 c017534:	0c017775 	.word	0x0c017775
 c017538:	0c017779 	.word	0x0c017779
 c01753c:	0c01777d 	.word	0x0c01777d
 c017540:	0c017781 	.word	0x0c017781
 c017544:	0c017785 	.word	0x0c017785
 c017548:	0c017789 	.word	0x0c017789
 c01754c:	0c01778d 	.word	0x0c01778d
 c017550:	0c017791 	.word	0x0c017791
 c017554:	0c017795 	.word	0x0c017795
 c017558:	0c017799 	.word	0x0c017799
 c01755c:	0c01779d 	.word	0x0c01779d
 c017560:	0c0177a1 	.word	0x0c0177a1
 c017564:	0c0177a5 	.word	0x0c0177a5
 c017568:	0c0177a9 	.word	0x0c0177a9
 c01756c:	0c0177ad 	.word	0x0c0177ad
 c017570:	0c0177b1 	.word	0x0c0177b1
 c017574:	00000000 	.word	0x00000000
 c017578:	0c0177b5 	.word	0x0c0177b5
 c01757c:	00000000 	.word	0x00000000
 c017580:	0c0177b9 	.word	0x0c0177b9
 c017584:	0c0177bd 	.word	0x0c0177bd
 c017588:	0c0177c1 	.word	0x0c0177c1
 c01758c:	0c0177c5 	.word	0x0c0177c5
 c017590:	0c0177c9 	.word	0x0c0177c9
 c017594:	0c0177cd 	.word	0x0c0177cd
 c017598:	0c0177d1 	.word	0x0c0177d1
 c01759c:	0c0177d5 	.word	0x0c0177d5
 c0175a0:	0c0177d9 	.word	0x0c0177d9
 c0175a4:	0c0177dd 	.word	0x0c0177dd
 c0175a8:	0c0177e1 	.word	0x0c0177e1
 c0175ac:	0c0177e5 	.word	0x0c0177e5
 c0175b0:	0c0177e9 	.word	0x0c0177e9
 c0175b4:	00000000 	.word	0x00000000
 c0175b8:	0c0177ed 	.word	0x0c0177ed
 c0175bc:	0c0177f1 	.word	0x0c0177f1
	...
 c0175c8:	0c0177f5 	.word	0x0c0177f5
 c0175cc:	0c0177f9 	.word	0x0c0177f9
 c0175d0:	0c0177fd 	.word	0x0c0177fd
 c0175d4:	0c017801 	.word	0x0c017801
 c0175d8:	0c017805 	.word	0x0c017805
 c0175dc:	0c017809 	.word	0x0c017809
 c0175e0:	0c01780d 	.word	0x0c01780d
 c0175e4:	0c017811 	.word	0x0c017811
 c0175e8:	0c017815 	.word	0x0c017815
 c0175ec:	0c017819 	.word	0x0c017819
 c0175f0:	0c01781d 	.word	0x0c01781d

0c0175f4 <Reset_Handler>:
 c0175f4:	4c13      	ldr	r4, [pc, #76]	; (c017644 <Reset_Handler+0x50>)
 c0175f6:	4d14      	ldr	r5, [pc, #80]	; (c017648 <Reset_Handler+0x54>)
 c0175f8:	42ac      	cmp	r4, r5
 c0175fa:	da09      	bge.n	c017610 <Reset_Handler+0x1c>
 c0175fc:	6821      	ldr	r1, [r4, #0]
 c0175fe:	6862      	ldr	r2, [r4, #4]
 c017600:	68a3      	ldr	r3, [r4, #8]
 c017602:	3b04      	subs	r3, #4
 c017604:	bfa2      	ittt	ge
 c017606:	58c8      	ldrge	r0, [r1, r3]
 c017608:	50d0      	strge	r0, [r2, r3]
 c01760a:	e7fa      	bge.n	c017602 <Reset_Handler+0xe>
 c01760c:	340c      	adds	r4, #12
 c01760e:	e7f3      	b.n	c0175f8 <Reset_Handler+0x4>
 c017610:	4b0e      	ldr	r3, [pc, #56]	; (c01764c <Reset_Handler+0x58>)
 c017612:	4c0f      	ldr	r4, [pc, #60]	; (c017650 <Reset_Handler+0x5c>)
 c017614:	42a3      	cmp	r3, r4
 c017616:	da08      	bge.n	c01762a <Reset_Handler+0x36>
 c017618:	6819      	ldr	r1, [r3, #0]
 c01761a:	685a      	ldr	r2, [r3, #4]
 c01761c:	2000      	movs	r0, #0
 c01761e:	3a04      	subs	r2, #4
 c017620:	bfa4      	itt	ge
 c017622:	5088      	strge	r0, [r1, r2]
 c017624:	e7fb      	bge.n	c01761e <Reset_Handler+0x2a>
 c017626:	3308      	adds	r3, #8
 c017628:	e7f4      	b.n	c017614 <Reset_Handler+0x20>
 c01762a:	f009 fc9f 	bl	c020f6c <SystemInit>
 c01762e:	f3ef 8014 	mrs	r0, CONTROL
 c017632:	f040 0002 	orr.w	r0, r0, #2
 c017636:	f380 8814 	msr	CONTROL, r0
 c01763a:	4806      	ldr	r0, [pc, #24]	; (c017654 <Reset_Handler+0x60>)
 c01763c:	f380 8809 	msr	PSP, r0
 c017640:	f004 ffb2 	bl	c01c5a8 <_mainCRTStartup>
 c017644:	0c017820 	.word	0x0c017820
 c017648:	0c017868 	.word	0x0c017868
 c01764c:	0c017868 	.word	0x0c017868
 c017650:	0c0178b0 	.word	0x0c0178b0
 c017654:	30031000 	.word	0x30031000

0c017658 <NMI_Handler>:
 c017658:	f7ff bffe 	b.w	c017658 <NMI_Handler>

0c01765c <HardFault_Handler>:
 c01765c:	f7ff bffe 	b.w	c01765c <HardFault_Handler>
 c017660:	f01b ba8c 	b.w	c032b7c <MemManage_Handler>
 c017664:	f01b ba8b 	b.w	c032b7e <BusFault_Handler>
 c017668:	f01b ba8a 	b.w	c032b80 <UsageFault_Handler>
 c01766c:	f01b ba2e 	b.w	c032acc <SecureFault_Handler>
 c017670:	f01b ba78 	b.w	c032b64 <SVC_Handler>

0c017674 <DebugMon_Handler>:
 c017674:	f7ff bffe 	b.w	c017674 <DebugMon_Handler>
 c017678:	f01b ba0e 	b.w	c032a98 <PendSV_Handler>

0c01767c <SysTick_Handler>:
 c01767c:	f7ff bffe 	b.w	c01767c <SysTick_Handler>

0c017680 <WWDG_IRQHandler>:
 c017680:	f7ff bffe 	b.w	c017680 <WWDG_IRQHandler>

0c017684 <PVD_PVM_IRQHandler>:
 c017684:	f7ff bffe 	b.w	c017684 <PVD_PVM_IRQHandler>

0c017688 <RTC_IRQHandler>:
 c017688:	f7ff bffe 	b.w	c017688 <RTC_IRQHandler>

0c01768c <RTC_IRQHandler_S>:
 c01768c:	f7ff bffe 	b.w	c01768c <RTC_IRQHandler_S>

0c017690 <TAMP_IRQHandler>:
 c017690:	f7ff bffe 	b.w	c017690 <TAMP_IRQHandler>

0c017694 <TAMP_IRQHandler_S>:
 c017694:	f7ff bffe 	b.w	c017694 <TAMP_IRQHandler_S>

0c017698 <FLASH_IRQHandler>:
 c017698:	f7ff bffe 	b.w	c017698 <FLASH_IRQHandler>

0c01769c <FLASH_IRQHandler_S>:
 c01769c:	f7ff bffe 	b.w	c01769c <FLASH_IRQHandler_S>

0c0176a0 <SERR_IRQHandler>:
 c0176a0:	f7ff bffe 	b.w	c0176a0 <SERR_IRQHandler>

0c0176a4 <RCC_IRQHandler>:
 c0176a4:	f7ff bffe 	b.w	c0176a4 <RCC_IRQHandler>

0c0176a8 <RCC_IRQHandler_S>:
 c0176a8:	f7ff bffe 	b.w	c0176a8 <RCC_IRQHandler_S>

0c0176ac <EXTI0_IRQHandler>:
 c0176ac:	f7ff bffe 	b.w	c0176ac <EXTI0_IRQHandler>

0c0176b0 <EXTI1_IRQHandler>:
 c0176b0:	f7ff bffe 	b.w	c0176b0 <EXTI1_IRQHandler>

0c0176b4 <EXTI2_IRQHandler>:
 c0176b4:	f7ff bffe 	b.w	c0176b4 <EXTI2_IRQHandler>

0c0176b8 <EXTI3_IRQHandler>:
 c0176b8:	f7ff bffe 	b.w	c0176b8 <EXTI3_IRQHandler>

0c0176bc <EXTI4_IRQHandler>:
 c0176bc:	f7ff bffe 	b.w	c0176bc <EXTI4_IRQHandler>

0c0176c0 <EXTI5_IRQHandler>:
 c0176c0:	f7ff bffe 	b.w	c0176c0 <EXTI5_IRQHandler>

0c0176c4 <EXTI6_IRQHandler>:
 c0176c4:	f7ff bffe 	b.w	c0176c4 <EXTI6_IRQHandler>

0c0176c8 <EXTI7_IRQHandler>:
 c0176c8:	f7ff bffe 	b.w	c0176c8 <EXTI7_IRQHandler>

0c0176cc <EXTI8_IRQHandler>:
 c0176cc:	f7ff bffe 	b.w	c0176cc <EXTI8_IRQHandler>

0c0176d0 <EXTI9_IRQHandler>:
 c0176d0:	f7ff bffe 	b.w	c0176d0 <EXTI9_IRQHandler>

0c0176d4 <EXTI10_IRQHandler>:
 c0176d4:	f7ff bffe 	b.w	c0176d4 <EXTI10_IRQHandler>

0c0176d8 <EXTI11_IRQHandler>:
 c0176d8:	f7ff bffe 	b.w	c0176d8 <EXTI11_IRQHandler>

0c0176dc <EXTI12_IRQHandler>:
 c0176dc:	f7ff bffe 	b.w	c0176dc <EXTI12_IRQHandler>

0c0176e0 <EXTI13_IRQHandler>:
 c0176e0:	f7ff bffe 	b.w	c0176e0 <EXTI13_IRQHandler>

0c0176e4 <EXTI14_IRQHandler>:
 c0176e4:	f7ff bffe 	b.w	c0176e4 <EXTI14_IRQHandler>

0c0176e8 <EXTI15_IRQHandler>:
 c0176e8:	f7ff bffe 	b.w	c0176e8 <EXTI15_IRQHandler>

0c0176ec <DMAMUX1_IRQHandler>:
 c0176ec:	f7ff bffe 	b.w	c0176ec <DMAMUX1_IRQHandler>

0c0176f0 <DMAMUX1_IRQHandler_S>:
 c0176f0:	f7ff bffe 	b.w	c0176f0 <DMAMUX1_IRQHandler_S>

0c0176f4 <DMA1_Channel1_IRQHandler>:
 c0176f4:	f7ff bffe 	b.w	c0176f4 <DMA1_Channel1_IRQHandler>

0c0176f8 <DMA1_Channel2_IRQHandler>:
 c0176f8:	f7ff bffe 	b.w	c0176f8 <DMA1_Channel2_IRQHandler>

0c0176fc <DMA1_Channel3_IRQHandler>:
 c0176fc:	f7ff bffe 	b.w	c0176fc <DMA1_Channel3_IRQHandler>

0c017700 <DMA1_Channel4_IRQHandler>:
 c017700:	f7ff bffe 	b.w	c017700 <DMA1_Channel4_IRQHandler>

0c017704 <DMA1_Channel5_IRQHandler>:
 c017704:	f7ff bffe 	b.w	c017704 <DMA1_Channel5_IRQHandler>

0c017708 <DMA1_Channel6_IRQHandler>:
 c017708:	f7ff bffe 	b.w	c017708 <DMA1_Channel6_IRQHandler>

0c01770c <DMA1_Channel7_IRQHandler>:
 c01770c:	f7ff bffe 	b.w	c01770c <DMA1_Channel7_IRQHandler>

0c017710 <DMA1_Channel8_IRQHandler>:
 c017710:	f7ff bffe 	b.w	c017710 <DMA1_Channel8_IRQHandler>

0c017714 <ADC1_2_IRQHandler>:
 c017714:	f7ff bffe 	b.w	c017714 <ADC1_2_IRQHandler>

0c017718 <DAC_IRQHandler>:
 c017718:	f7ff bffe 	b.w	c017718 <DAC_IRQHandler>

0c01771c <FDCAN1_IT0_IRQHandler>:
 c01771c:	f7ff bffe 	b.w	c01771c <FDCAN1_IT0_IRQHandler>

0c017720 <FDCAN1_IT1_IRQHandler>:
 c017720:	f7ff bffe 	b.w	c017720 <FDCAN1_IT1_IRQHandler>

0c017724 <TIM1_BRK_IRQHandler>:
 c017724:	f7ff bffe 	b.w	c017724 <TIM1_BRK_IRQHandler>

0c017728 <TIM1_UP_IRQHandler>:
 c017728:	f7ff bffe 	b.w	c017728 <TIM1_UP_IRQHandler>

0c01772c <TIM1_TRG_COM_IRQHandler>:
 c01772c:	f7ff bffe 	b.w	c01772c <TIM1_TRG_COM_IRQHandler>

0c017730 <TIM1_CC_IRQHandler>:
 c017730:	f7ff bffe 	b.w	c017730 <TIM1_CC_IRQHandler>

0c017734 <TIM2_IRQHandler>:
 c017734:	f7ff bffe 	b.w	c017734 <TIM2_IRQHandler>

0c017738 <TIM3_IRQHandler>:
 c017738:	f7ff bffe 	b.w	c017738 <TIM3_IRQHandler>

0c01773c <TIM4_IRQHandler>:
 c01773c:	f7ff bffe 	b.w	c01773c <TIM4_IRQHandler>

0c017740 <TIM5_IRQHandler>:
 c017740:	f7ff bffe 	b.w	c017740 <TIM5_IRQHandler>

0c017744 <TIM6_IRQHandler>:
 c017744:	f7ff bffe 	b.w	c017744 <TIM6_IRQHandler>

0c017748 <TIM7_IRQHandler>:
 c017748:	f7ff bffe 	b.w	c017748 <TIM7_IRQHandler>

0c01774c <TIM8_BRK_IRQHandler>:
 c01774c:	f7ff bffe 	b.w	c01774c <TIM8_BRK_IRQHandler>

0c017750 <TIM8_UP_IRQHandler>:
 c017750:	f7ff bffe 	b.w	c017750 <TIM8_UP_IRQHandler>

0c017754 <TIM8_TRG_COM_IRQHandler>:
 c017754:	f7ff bffe 	b.w	c017754 <TIM8_TRG_COM_IRQHandler>

0c017758 <TIM8_CC_IRQHandler>:
 c017758:	f7ff bffe 	b.w	c017758 <TIM8_CC_IRQHandler>

0c01775c <I2C1_EV_IRQHandler>:
 c01775c:	f7ff bffe 	b.w	c01775c <I2C1_EV_IRQHandler>

0c017760 <I2C1_ER_IRQHandler>:
 c017760:	f7ff bffe 	b.w	c017760 <I2C1_ER_IRQHandler>

0c017764 <I2C2_EV_IRQHandler>:
 c017764:	f7ff bffe 	b.w	c017764 <I2C2_EV_IRQHandler>

0c017768 <I2C2_ER_IRQHandler>:
 c017768:	f7ff bffe 	b.w	c017768 <I2C2_ER_IRQHandler>

0c01776c <SPI1_IRQHandler>:
 c01776c:	f7ff bffe 	b.w	c01776c <SPI1_IRQHandler>

0c017770 <SPI2_IRQHandler>:
 c017770:	f7ff bffe 	b.w	c017770 <SPI2_IRQHandler>

0c017774 <USART1_IRQHandler>:
 c017774:	f7ff bffe 	b.w	c017774 <USART1_IRQHandler>

0c017778 <USART2_IRQHandler>:
 c017778:	f7ff bffe 	b.w	c017778 <USART2_IRQHandler>

0c01777c <USART3_IRQHandler>:
 c01777c:	f7ff bffe 	b.w	c01777c <USART3_IRQHandler>

0c017780 <UART4_IRQHandler>:
 c017780:	f7ff bffe 	b.w	c017780 <UART4_IRQHandler>

0c017784 <UART5_IRQHandler>:
 c017784:	f7ff bffe 	b.w	c017784 <UART5_IRQHandler>

0c017788 <LPUART1_IRQHandler>:
 c017788:	f7ff bffe 	b.w	c017788 <LPUART1_IRQHandler>

0c01778c <LPTIM1_IRQHandler>:
 c01778c:	f7ff bffe 	b.w	c01778c <LPTIM1_IRQHandler>

0c017790 <LPTIM2_IRQHandler>:
 c017790:	f7ff bffe 	b.w	c017790 <LPTIM2_IRQHandler>

0c017794 <TIM15_IRQHandler>:
 c017794:	f7ff bffe 	b.w	c017794 <TIM15_IRQHandler>

0c017798 <TIM16_IRQHandler>:
 c017798:	f7ff bffe 	b.w	c017798 <TIM16_IRQHandler>

0c01779c <TIM17_IRQHandler>:
 c01779c:	f7ff bffe 	b.w	c01779c <TIM17_IRQHandler>

0c0177a0 <COMP_IRQHandler>:
 c0177a0:	f7ff bffe 	b.w	c0177a0 <COMP_IRQHandler>

0c0177a4 <USB_FS_IRQHandler>:
 c0177a4:	f7ff bffe 	b.w	c0177a4 <USB_FS_IRQHandler>

0c0177a8 <CRS_IRQHandler>:
 c0177a8:	f7ff bffe 	b.w	c0177a8 <CRS_IRQHandler>

0c0177ac <FMC_IRQHandler>:
 c0177ac:	f7ff bffe 	b.w	c0177ac <FMC_IRQHandler>

0c0177b0 <OCTOSPI1_IRQHandler>:
 c0177b0:	f7ff bffe 	b.w	c0177b0 <OCTOSPI1_IRQHandler>

0c0177b4 <SDMMC1_IRQHandler>:
 c0177b4:	f7ff bffe 	b.w	c0177b4 <SDMMC1_IRQHandler>

0c0177b8 <DMA2_Channel1_IRQHandler>:
 c0177b8:	f7ff bffe 	b.w	c0177b8 <DMA2_Channel1_IRQHandler>

0c0177bc <DMA2_Channel2_IRQHandler>:
 c0177bc:	f7ff bffe 	b.w	c0177bc <DMA2_Channel2_IRQHandler>

0c0177c0 <DMA2_Channel3_IRQHandler>:
 c0177c0:	f7ff bffe 	b.w	c0177c0 <DMA2_Channel3_IRQHandler>

0c0177c4 <DMA2_Channel4_IRQHandler>:
 c0177c4:	f7ff bffe 	b.w	c0177c4 <DMA2_Channel4_IRQHandler>

0c0177c8 <DMA2_Channel5_IRQHandler>:
 c0177c8:	f7ff bffe 	b.w	c0177c8 <DMA2_Channel5_IRQHandler>

0c0177cc <DMA2_Channel6_IRQHandler>:
 c0177cc:	f7ff bffe 	b.w	c0177cc <DMA2_Channel6_IRQHandler>

0c0177d0 <DMA2_Channel7_IRQHandler>:
 c0177d0:	f7ff bffe 	b.w	c0177d0 <DMA2_Channel7_IRQHandler>

0c0177d4 <DMA2_Channel8_IRQHandler>:
 c0177d4:	f7ff bffe 	b.w	c0177d4 <DMA2_Channel8_IRQHandler>

0c0177d8 <I2C3_EV_IRQHandler>:
 c0177d8:	f7ff bffe 	b.w	c0177d8 <I2C3_EV_IRQHandler>

0c0177dc <I2C3_ER_IRQHandler>:
 c0177dc:	f7ff bffe 	b.w	c0177dc <I2C3_ER_IRQHandler>

0c0177e0 <SAI1_IRQHandler>:
 c0177e0:	f7ff bffe 	b.w	c0177e0 <SAI1_IRQHandler>

0c0177e4 <SAI2_IRQHandler>:
 c0177e4:	f7ff bffe 	b.w	c0177e4 <SAI2_IRQHandler>

0c0177e8 <TSC_IRQHandler>:
 c0177e8:	f7ff bffe 	b.w	c0177e8 <TSC_IRQHandler>

0c0177ec <RNG_IRQHandler>:
 c0177ec:	f7ff bffe 	b.w	c0177ec <RNG_IRQHandler>

0c0177f0 <FPU_IRQHandler>:
 c0177f0:	f7ff bffe 	b.w	c0177f0 <FPU_IRQHandler>

0c0177f4 <LPTIM3_IRQHandler>:
 c0177f4:	f7ff bffe 	b.w	c0177f4 <LPTIM3_IRQHandler>

0c0177f8 <SPI3_IRQHandler>:
 c0177f8:	f7ff bffe 	b.w	c0177f8 <SPI3_IRQHandler>

0c0177fc <I2C4_ER_IRQHandler>:
 c0177fc:	f7ff bffe 	b.w	c0177fc <I2C4_ER_IRQHandler>

0c017800 <I2C4_EV_IRQHandler>:
 c017800:	f7ff bffe 	b.w	c017800 <I2C4_EV_IRQHandler>

0c017804 <DFSDM1_FLT0_IRQHandler>:
 c017804:	f7ff bffe 	b.w	c017804 <DFSDM1_FLT0_IRQHandler>

0c017808 <DFSDM1_FLT1_IRQHandler>:
 c017808:	f7ff bffe 	b.w	c017808 <DFSDM1_FLT1_IRQHandler>

0c01780c <DFSDM1_FLT2_IRQHandler>:
 c01780c:	f7ff bffe 	b.w	c01780c <DFSDM1_FLT2_IRQHandler>

0c017810 <DFSDM1_FLT3_IRQHandler>:
 c017810:	f7ff bffe 	b.w	c017810 <DFSDM1_FLT3_IRQHandler>

0c017814 <UCPD1_IRQHandler>:
 c017814:	f7ff bffe 	b.w	c017814 <UCPD1_IRQHandler>

0c017818 <ICACHE_IRQHandler>:
 c017818:	f7ff bffe 	b.w	c017818 <ICACHE_IRQHandler>

0c01781c <OTFDEC1_IRQHandler>:
 c01781c:	f7ff bffe 	b.w	c01781c <OTFDEC1_IRQHandler>

Disassembly of section .TFM_UNPRIV_CODE:

0c0178c0 <calloc>:
 c0178c0:	4b02      	ldr	r3, [pc, #8]	; (c0178cc <calloc+0xc>)
 c0178c2:	460a      	mov	r2, r1
 c0178c4:	4601      	mov	r1, r0
 c0178c6:	6818      	ldr	r0, [r3, #0]
 c0178c8:	f000 b885 	b.w	c0179d6 <_calloc_r>
 c0178cc:	30035b58 	.word	0x30035b58

0c0178d0 <exit>:
 c0178d0:	b508      	push	{r3, lr}
 c0178d2:	4b07      	ldr	r3, [pc, #28]	; (c0178f0 <exit+0x20>)
 c0178d4:	4604      	mov	r4, r0
 c0178d6:	b113      	cbz	r3, c0178de <exit+0xe>
 c0178d8:	2100      	movs	r1, #0
 c0178da:	e000      	b.n	c0178de <exit+0xe>
 c0178dc:	bf00      	nop
 c0178de:	4b05      	ldr	r3, [pc, #20]	; (c0178f4 <exit+0x24>)
 c0178e0:	6818      	ldr	r0, [r3, #0]
 c0178e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 c0178e4:	b103      	cbz	r3, c0178e8 <exit+0x18>
 c0178e6:	4798      	blx	r3
 c0178e8:	4620      	mov	r0, r4
 c0178ea:	f01c fe05 	bl	c0344f8 <_exit>
 c0178ee:	bf00      	nop
 c0178f0:	00000000 	.word	0x00000000
 c0178f4:	0c01a03c 	.word	0x0c01a03c

0c0178f8 <__libc_init_array>:
 c0178f8:	b570      	push	{r4, r5, r6, lr}
 c0178fa:	4e0d      	ldr	r6, [pc, #52]	; (c017930 <__libc_init_array+0x38>)
 c0178fc:	2500      	movs	r5, #0
 c0178fe:	4c0d      	ldr	r4, [pc, #52]	; (c017934 <__libc_init_array+0x3c>)
 c017900:	1ba4      	subs	r4, r4, r6
 c017902:	10a4      	asrs	r4, r4, #2
 c017904:	42a5      	cmp	r5, r4
 c017906:	d109      	bne.n	c01791c <__libc_init_array+0x24>
 c017908:	4e0b      	ldr	r6, [pc, #44]	; (c017938 <__libc_init_array+0x40>)
 c01790a:	2500      	movs	r5, #0
 c01790c:	4c0b      	ldr	r4, [pc, #44]	; (c01793c <__libc_init_array+0x44>)
 c01790e:	f01c fdf5 	bl	c0344fc <_init>
 c017912:	1ba4      	subs	r4, r4, r6
 c017914:	10a4      	asrs	r4, r4, #2
 c017916:	42a5      	cmp	r5, r4
 c017918:	d105      	bne.n	c017926 <__libc_init_array+0x2e>
 c01791a:	bd70      	pop	{r4, r5, r6, pc}
 c01791c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 c017920:	3501      	adds	r5, #1
 c017922:	4798      	blx	r3
 c017924:	e7ee      	b.n	c017904 <__libc_init_array+0xc>
 c017926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 c01792a:	3501      	adds	r5, #1
 c01792c:	4798      	blx	r3
 c01792e:	e7f2      	b.n	c017916 <__libc_init_array+0x1e>
 c017930:	30035d28 	.word	0x30035d28
 c017934:	30035d28 	.word	0x30035d28
 c017938:	30035d28 	.word	0x30035d28
 c01793c:	30035d2c 	.word	0x30035d2c

0c017940 <malloc>:
 c017940:	4b02      	ldr	r3, [pc, #8]	; (c01794c <malloc+0xc>)
 c017942:	4601      	mov	r1, r0
 c017944:	6818      	ldr	r0, [r3, #0]
 c017946:	f000 b8a3 	b.w	c017a90 <_malloc_r>
 c01794a:	bf00      	nop
 c01794c:	30035b58 	.word	0x30035b58

0c017950 <free>:
 c017950:	4b02      	ldr	r3, [pc, #8]	; (c01795c <free+0xc>)
 c017952:	4601      	mov	r1, r0
 c017954:	6818      	ldr	r0, [r3, #0]
 c017956:	f000 b84d 	b.w	c0179f4 <_free_r>
 c01795a:	bf00      	nop
 c01795c:	30035b58 	.word	0x30035b58

0c017960 <memcmp>:
 c017960:	b530      	push	{r4, r5, lr}
 c017962:	2400      	movs	r4, #0
 c017964:	42a2      	cmp	r2, r4
 c017966:	d101      	bne.n	c01796c <memcmp+0xc>
 c017968:	2000      	movs	r0, #0
 c01796a:	e007      	b.n	c01797c <memcmp+0x1c>
 c01796c:	5d03      	ldrb	r3, [r0, r4]
 c01796e:	3401      	adds	r4, #1
 c017970:	190d      	adds	r5, r1, r4
 c017972:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 c017976:	42ab      	cmp	r3, r5
 c017978:	d0f4      	beq.n	c017964 <memcmp+0x4>
 c01797a:	1b58      	subs	r0, r3, r5
 c01797c:	bd30      	pop	{r4, r5, pc}

0c01797e <memcpy>:
 c01797e:	1e43      	subs	r3, r0, #1
 c017980:	440a      	add	r2, r1
 c017982:	b510      	push	{r4, lr}
 c017984:	4291      	cmp	r1, r2
 c017986:	d100      	bne.n	c01798a <memcpy+0xc>
 c017988:	bd10      	pop	{r4, pc}
 c01798a:	f811 4b01 	ldrb.w	r4, [r1], #1
 c01798e:	f803 4f01 	strb.w	r4, [r3, #1]!
 c017992:	e7f7      	b.n	c017984 <memcpy+0x6>

0c017994 <memmove>:
 c017994:	4288      	cmp	r0, r1
 c017996:	eb01 0302 	add.w	r3, r1, r2
 c01799a:	b510      	push	{r4, lr}
 c01799c:	d807      	bhi.n	c0179ae <memmove+0x1a>
 c01799e:	1e42      	subs	r2, r0, #1
 c0179a0:	4299      	cmp	r1, r3
 c0179a2:	d00a      	beq.n	c0179ba <memmove+0x26>
 c0179a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 c0179a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 c0179ac:	e7f8      	b.n	c0179a0 <memmove+0xc>
 c0179ae:	4283      	cmp	r3, r0
 c0179b0:	d9f5      	bls.n	c01799e <memmove+0xa>
 c0179b2:	1881      	adds	r1, r0, r2
 c0179b4:	1ad2      	subs	r2, r2, r3
 c0179b6:	42d3      	cmn	r3, r2
 c0179b8:	d100      	bne.n	c0179bc <memmove+0x28>
 c0179ba:	bd10      	pop	{r4, pc}
 c0179bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 c0179c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 c0179c4:	e7f7      	b.n	c0179b6 <memmove+0x22>

0c0179c6 <memset>:
 c0179c6:	4402      	add	r2, r0
 c0179c8:	4603      	mov	r3, r0
 c0179ca:	4293      	cmp	r3, r2
 c0179cc:	d100      	bne.n	c0179d0 <memset+0xa>
 c0179ce:	4770      	bx	lr
 c0179d0:	f803 1b01 	strb.w	r1, [r3], #1
 c0179d4:	e7f9      	b.n	c0179ca <memset+0x4>

0c0179d6 <_calloc_r>:
 c0179d6:	b538      	push	{r3, r4, r5, lr}
 c0179d8:	fb02 f401 	mul.w	r4, r2, r1
 c0179dc:	4621      	mov	r1, r4
 c0179de:	f000 f857 	bl	c017a90 <_malloc_r>
 c0179e2:	4605      	mov	r5, r0
 c0179e4:	b118      	cbz	r0, c0179ee <_calloc_r+0x18>
 c0179e6:	4622      	mov	r2, r4
 c0179e8:	2100      	movs	r1, #0
 c0179ea:	f7ff ffec 	bl	c0179c6 <memset>
 c0179ee:	4628      	mov	r0, r5
 c0179f0:	bd38      	pop	{r3, r4, r5, pc}
	...

0c0179f4 <_free_r>:
 c0179f4:	b538      	push	{r3, r4, r5, lr}
 c0179f6:	4605      	mov	r5, r0
 c0179f8:	2900      	cmp	r1, #0
 c0179fa:	d045      	beq.n	c017a88 <_free_r+0x94>
 c0179fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c017a00:	1f0c      	subs	r4, r1, #4
 c017a02:	2b00      	cmp	r3, #0
 c017a04:	bfb8      	it	lt
 c017a06:	18e4      	addlt	r4, r4, r3
 c017a08:	f001 fc5c 	bl	c0192c4 <__malloc_lock>
 c017a0c:	4a1f      	ldr	r2, [pc, #124]	; (c017a8c <_free_r+0x98>)
 c017a0e:	6813      	ldr	r3, [r2, #0]
 c017a10:	4610      	mov	r0, r2
 c017a12:	b933      	cbnz	r3, c017a22 <_free_r+0x2e>
 c017a14:	6063      	str	r3, [r4, #4]
 c017a16:	6014      	str	r4, [r2, #0]
 c017a18:	4628      	mov	r0, r5
 c017a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 c017a1e:	f001 bc52 	b.w	c0192c6 <__malloc_unlock>
 c017a22:	42a3      	cmp	r3, r4
 c017a24:	d90c      	bls.n	c017a40 <_free_r+0x4c>
 c017a26:	6821      	ldr	r1, [r4, #0]
 c017a28:	1862      	adds	r2, r4, r1
 c017a2a:	4293      	cmp	r3, r2
 c017a2c:	bf02      	ittt	eq
 c017a2e:	681a      	ldreq	r2, [r3, #0]
 c017a30:	685b      	ldreq	r3, [r3, #4]
 c017a32:	1852      	addeq	r2, r2, r1
 c017a34:	6063      	str	r3, [r4, #4]
 c017a36:	bf08      	it	eq
 c017a38:	6022      	streq	r2, [r4, #0]
 c017a3a:	6004      	str	r4, [r0, #0]
 c017a3c:	e7ec      	b.n	c017a18 <_free_r+0x24>
 c017a3e:	4613      	mov	r3, r2
 c017a40:	685a      	ldr	r2, [r3, #4]
 c017a42:	b10a      	cbz	r2, c017a48 <_free_r+0x54>
 c017a44:	42a2      	cmp	r2, r4
 c017a46:	d9fa      	bls.n	c017a3e <_free_r+0x4a>
 c017a48:	6819      	ldr	r1, [r3, #0]
 c017a4a:	1858      	adds	r0, r3, r1
 c017a4c:	42a0      	cmp	r0, r4
 c017a4e:	d10b      	bne.n	c017a68 <_free_r+0x74>
 c017a50:	6820      	ldr	r0, [r4, #0]
 c017a52:	4401      	add	r1, r0
 c017a54:	1858      	adds	r0, r3, r1
 c017a56:	6019      	str	r1, [r3, #0]
 c017a58:	4282      	cmp	r2, r0
 c017a5a:	d1dd      	bne.n	c017a18 <_free_r+0x24>
 c017a5c:	6810      	ldr	r0, [r2, #0]
 c017a5e:	6852      	ldr	r2, [r2, #4]
 c017a60:	4401      	add	r1, r0
 c017a62:	605a      	str	r2, [r3, #4]
 c017a64:	6019      	str	r1, [r3, #0]
 c017a66:	e7d7      	b.n	c017a18 <_free_r+0x24>
 c017a68:	d902      	bls.n	c017a70 <_free_r+0x7c>
 c017a6a:	230c      	movs	r3, #12
 c017a6c:	602b      	str	r3, [r5, #0]
 c017a6e:	e7d3      	b.n	c017a18 <_free_r+0x24>
 c017a70:	6820      	ldr	r0, [r4, #0]
 c017a72:	1821      	adds	r1, r4, r0
 c017a74:	428a      	cmp	r2, r1
 c017a76:	bf02      	ittt	eq
 c017a78:	6811      	ldreq	r1, [r2, #0]
 c017a7a:	6852      	ldreq	r2, [r2, #4]
 c017a7c:	1809      	addeq	r1, r1, r0
 c017a7e:	6062      	str	r2, [r4, #4]
 c017a80:	bf08      	it	eq
 c017a82:	6021      	streq	r1, [r4, #0]
 c017a84:	605c      	str	r4, [r3, #4]
 c017a86:	e7c7      	b.n	c017a18 <_free_r+0x24>
 c017a88:	bd38      	pop	{r3, r4, r5, pc}
 c017a8a:	bf00      	nop
 c017a8c:	3003c940 	.word	0x3003c940

0c017a90 <_malloc_r>:
 c017a90:	b570      	push	{r4, r5, r6, lr}
 c017a92:	1ccd      	adds	r5, r1, #3
 c017a94:	4606      	mov	r6, r0
 c017a96:	f025 0503 	bic.w	r5, r5, #3
 c017a9a:	3508      	adds	r5, #8
 c017a9c:	2d0c      	cmp	r5, #12
 c017a9e:	bf38      	it	cc
 c017aa0:	250c      	movcc	r5, #12
 c017aa2:	2d00      	cmp	r5, #0
 c017aa4:	db01      	blt.n	c017aaa <_malloc_r+0x1a>
 c017aa6:	42a9      	cmp	r1, r5
 c017aa8:	d903      	bls.n	c017ab2 <_malloc_r+0x22>
 c017aaa:	230c      	movs	r3, #12
 c017aac:	6033      	str	r3, [r6, #0]
 c017aae:	2000      	movs	r0, #0
 c017ab0:	bd70      	pop	{r4, r5, r6, pc}
 c017ab2:	f001 fc07 	bl	c0192c4 <__malloc_lock>
 c017ab6:	4a21      	ldr	r2, [pc, #132]	; (c017b3c <_malloc_r+0xac>)
 c017ab8:	6814      	ldr	r4, [r2, #0]
 c017aba:	4621      	mov	r1, r4
 c017abc:	b991      	cbnz	r1, c017ae4 <_malloc_r+0x54>
 c017abe:	4c20      	ldr	r4, [pc, #128]	; (c017b40 <_malloc_r+0xb0>)
 c017ac0:	6823      	ldr	r3, [r4, #0]
 c017ac2:	b91b      	cbnz	r3, c017acc <_malloc_r+0x3c>
 c017ac4:	4630      	mov	r0, r6
 c017ac6:	f000 fca5 	bl	c018414 <_sbrk_r>
 c017aca:	6020      	str	r0, [r4, #0]
 c017acc:	4629      	mov	r1, r5
 c017ace:	4630      	mov	r0, r6
 c017ad0:	f000 fca0 	bl	c018414 <_sbrk_r>
 c017ad4:	1c43      	adds	r3, r0, #1
 c017ad6:	d124      	bne.n	c017b22 <_malloc_r+0x92>
 c017ad8:	230c      	movs	r3, #12
 c017ada:	4630      	mov	r0, r6
 c017adc:	6033      	str	r3, [r6, #0]
 c017ade:	f001 fbf2 	bl	c0192c6 <__malloc_unlock>
 c017ae2:	e7e4      	b.n	c017aae <_malloc_r+0x1e>
 c017ae4:	680b      	ldr	r3, [r1, #0]
 c017ae6:	1b5b      	subs	r3, r3, r5
 c017ae8:	d418      	bmi.n	c017b1c <_malloc_r+0x8c>
 c017aea:	2b0b      	cmp	r3, #11
 c017aec:	d90f      	bls.n	c017b0e <_malloc_r+0x7e>
 c017aee:	18cc      	adds	r4, r1, r3
 c017af0:	600b      	str	r3, [r1, #0]
 c017af2:	50cd      	str	r5, [r1, r3]
 c017af4:	4630      	mov	r0, r6
 c017af6:	f001 fbe6 	bl	c0192c6 <__malloc_unlock>
 c017afa:	f104 000b 	add.w	r0, r4, #11
 c017afe:	1d23      	adds	r3, r4, #4
 c017b00:	f020 0007 	bic.w	r0, r0, #7
 c017b04:	1ac3      	subs	r3, r0, r3
 c017b06:	d0d3      	beq.n	c017ab0 <_malloc_r+0x20>
 c017b08:	425a      	negs	r2, r3
 c017b0a:	50e2      	str	r2, [r4, r3]
 c017b0c:	e7d0      	b.n	c017ab0 <_malloc_r+0x20>
 c017b0e:	428c      	cmp	r4, r1
 c017b10:	684b      	ldr	r3, [r1, #4]
 c017b12:	bf1a      	itte	ne
 c017b14:	6063      	strne	r3, [r4, #4]
 c017b16:	460c      	movne	r4, r1
 c017b18:	6013      	streq	r3, [r2, #0]
 c017b1a:	e7eb      	b.n	c017af4 <_malloc_r+0x64>
 c017b1c:	460c      	mov	r4, r1
 c017b1e:	6849      	ldr	r1, [r1, #4]
 c017b20:	e7cc      	b.n	c017abc <_malloc_r+0x2c>
 c017b22:	1cc4      	adds	r4, r0, #3
 c017b24:	f024 0403 	bic.w	r4, r4, #3
 c017b28:	42a0      	cmp	r0, r4
 c017b2a:	d005      	beq.n	c017b38 <_malloc_r+0xa8>
 c017b2c:	1a21      	subs	r1, r4, r0
 c017b2e:	4630      	mov	r0, r6
 c017b30:	f000 fc70 	bl	c018414 <_sbrk_r>
 c017b34:	3001      	adds	r0, #1
 c017b36:	d0cf      	beq.n	c017ad8 <_malloc_r+0x48>
 c017b38:	6025      	str	r5, [r4, #0]
 c017b3a:	e7db      	b.n	c017af4 <_malloc_r+0x64>
 c017b3c:	3003c940 	.word	0x3003c940
 c017b40:	3003c944 	.word	0x3003c944

0c017b44 <__cvt>:
 c017b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c017b48:	b088      	sub	sp, #32
 c017b4a:	2b00      	cmp	r3, #0
 c017b4c:	461e      	mov	r6, r3
 c017b4e:	4614      	mov	r4, r2
 c017b50:	9f14      	ldr	r7, [sp, #80]	; 0x50
 c017b52:	bfb4      	ite	lt
 c017b54:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 c017b58:	2300      	movge	r3, #0
 c017b5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 c017b5c:	f027 0720 	bic.w	r7, r7, #32
 c017b60:	bfbc      	itt	lt
 c017b62:	461e      	movlt	r6, r3
 c017b64:	232d      	movlt	r3, #45	; 0x2d
 c017b66:	2f46      	cmp	r7, #70	; 0x46
 c017b68:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 c017b6c:	700b      	strb	r3, [r1, #0]
 c017b6e:	d004      	beq.n	c017b7a <__cvt+0x36>
 c017b70:	2f45      	cmp	r7, #69	; 0x45
 c017b72:	d100      	bne.n	c017b76 <__cvt+0x32>
 c017b74:	3501      	adds	r5, #1
 c017b76:	2302      	movs	r3, #2
 c017b78:	e000      	b.n	c017b7c <__cvt+0x38>
 c017b7a:	2303      	movs	r3, #3
 c017b7c:	aa07      	add	r2, sp, #28
 c017b7e:	9204      	str	r2, [sp, #16]
 c017b80:	aa06      	add	r2, sp, #24
 c017b82:	e9cd 3500 	strd	r3, r5, [sp]
 c017b86:	e9cd a202 	strd	sl, r2, [sp, #8]
 c017b8a:	4633      	mov	r3, r6
 c017b8c:	4622      	mov	r2, r4
 c017b8e:	f000 fd03 	bl	c018598 <_dtoa_r>
 c017b92:	2f47      	cmp	r7, #71	; 0x47
 c017b94:	4680      	mov	r8, r0
 c017b96:	d102      	bne.n	c017b9e <__cvt+0x5a>
 c017b98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 c017b9a:	07db      	lsls	r3, r3, #31
 c017b9c:	d526      	bpl.n	c017bec <__cvt+0xa8>
 c017b9e:	2f46      	cmp	r7, #70	; 0x46
 c017ba0:	eb08 0905 	add.w	r9, r8, r5
 c017ba4:	d111      	bne.n	c017bca <__cvt+0x86>
 c017ba6:	f898 3000 	ldrb.w	r3, [r8]
 c017baa:	2b30      	cmp	r3, #48	; 0x30
 c017bac:	d10a      	bne.n	c017bc4 <__cvt+0x80>
 c017bae:	2200      	movs	r2, #0
 c017bb0:	2300      	movs	r3, #0
 c017bb2:	4620      	mov	r0, r4
 c017bb4:	4631      	mov	r1, r6
 c017bb6:	f004 facf 	bl	c01c158 <__aeabi_dcmpeq>
 c017bba:	b918      	cbnz	r0, c017bc4 <__cvt+0x80>
 c017bbc:	f1c5 0501 	rsb	r5, r5, #1
 c017bc0:	f8ca 5000 	str.w	r5, [sl]
 c017bc4:	f8da 3000 	ldr.w	r3, [sl]
 c017bc8:	4499      	add	r9, r3
 c017bca:	2200      	movs	r2, #0
 c017bcc:	2300      	movs	r3, #0
 c017bce:	4620      	mov	r0, r4
 c017bd0:	4631      	mov	r1, r6
 c017bd2:	f004 fac1 	bl	c01c158 <__aeabi_dcmpeq>
 c017bd6:	b938      	cbnz	r0, c017be8 <__cvt+0xa4>
 c017bd8:	2230      	movs	r2, #48	; 0x30
 c017bda:	9b07      	ldr	r3, [sp, #28]
 c017bdc:	454b      	cmp	r3, r9
 c017bde:	d205      	bcs.n	c017bec <__cvt+0xa8>
 c017be0:	1c59      	adds	r1, r3, #1
 c017be2:	9107      	str	r1, [sp, #28]
 c017be4:	701a      	strb	r2, [r3, #0]
 c017be6:	e7f8      	b.n	c017bda <__cvt+0x96>
 c017be8:	f8cd 901c 	str.w	r9, [sp, #28]
 c017bec:	9b07      	ldr	r3, [sp, #28]
 c017bee:	4640      	mov	r0, r8
 c017bf0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 c017bf2:	eba3 0308 	sub.w	r3, r3, r8
 c017bf6:	6013      	str	r3, [r2, #0]
 c017bf8:	b008      	add	sp, #32
 c017bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0c017bfe <__exponent>:
 c017bfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c017c00:	2900      	cmp	r1, #0
 c017c02:	4604      	mov	r4, r0
 c017c04:	bfba      	itte	lt
 c017c06:	4249      	neglt	r1, r1
 c017c08:	232d      	movlt	r3, #45	; 0x2d
 c017c0a:	232b      	movge	r3, #43	; 0x2b
 c017c0c:	f804 2b02 	strb.w	r2, [r4], #2
 c017c10:	2909      	cmp	r1, #9
 c017c12:	7043      	strb	r3, [r0, #1]
 c017c14:	dd20      	ble.n	c017c58 <__exponent+0x5a>
 c017c16:	f10d 0307 	add.w	r3, sp, #7
 c017c1a:	260a      	movs	r6, #10
 c017c1c:	461f      	mov	r7, r3
 c017c1e:	1e5a      	subs	r2, r3, #1
 c017c20:	fb91 f5f6 	sdiv	r5, r1, r6
 c017c24:	fb06 1115 	mls	r1, r6, r5, r1
 c017c28:	2d09      	cmp	r5, #9
 c017c2a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 c017c2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 c017c32:	4629      	mov	r1, r5
 c017c34:	dc09      	bgt.n	c017c4a <__exponent+0x4c>
 c017c36:	3130      	adds	r1, #48	; 0x30
 c017c38:	3b02      	subs	r3, #2
 c017c3a:	f802 1c01 	strb.w	r1, [r2, #-1]
 c017c3e:	42bb      	cmp	r3, r7
 c017c40:	4622      	mov	r2, r4
 c017c42:	d304      	bcc.n	c017c4e <__exponent+0x50>
 c017c44:	1a10      	subs	r0, r2, r0
 c017c46:	b003      	add	sp, #12
 c017c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c017c4a:	4613      	mov	r3, r2
 c017c4c:	e7e7      	b.n	c017c1e <__exponent+0x20>
 c017c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 c017c52:	f804 2b01 	strb.w	r2, [r4], #1
 c017c56:	e7f2      	b.n	c017c3e <__exponent+0x40>
 c017c58:	2330      	movs	r3, #48	; 0x30
 c017c5a:	1d02      	adds	r2, r0, #4
 c017c5c:	4419      	add	r1, r3
 c017c5e:	7083      	strb	r3, [r0, #2]
 c017c60:	70c1      	strb	r1, [r0, #3]
 c017c62:	e7ef      	b.n	c017c44 <__exponent+0x46>

0c017c64 <_printf_float>:
 c017c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c017c68:	b091      	sub	sp, #68	; 0x44
 c017c6a:	460c      	mov	r4, r1
 c017c6c:	4693      	mov	fp, r2
 c017c6e:	461e      	mov	r6, r3
 c017c70:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 c017c72:	4605      	mov	r5, r0
 c017c74:	f001 fb0a 	bl	c01928c <_localeconv_r>
 c017c78:	6803      	ldr	r3, [r0, #0]
 c017c7a:	4618      	mov	r0, r3
 c017c7c:	9309      	str	r3, [sp, #36]	; 0x24
 c017c7e:	f000 fbd9 	bl	c018434 <strlen>
 c017c82:	2300      	movs	r3, #0
 c017c84:	900a      	str	r0, [sp, #40]	; 0x28
 c017c86:	930e      	str	r3, [sp, #56]	; 0x38
 c017c88:	683b      	ldr	r3, [r7, #0]
 c017c8a:	f894 8018 	ldrb.w	r8, [r4, #24]
 c017c8e:	3307      	adds	r3, #7
 c017c90:	f8d4 a000 	ldr.w	sl, [r4]
 c017c94:	f023 0307 	bic.w	r3, r3, #7
 c017c98:	f103 0208 	add.w	r2, r3, #8
 c017c9c:	603a      	str	r2, [r7, #0]
 c017c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c017ca2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 c017ca6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 c017caa:	f04f 32ff 	mov.w	r2, #4294967295
 c017cae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 c017cb2:	4638      	mov	r0, r7
 c017cb4:	930b      	str	r3, [sp, #44]	; 0x2c
 c017cb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 c017cb8:	4ba5      	ldr	r3, [pc, #660]	; (c017f50 <_printf_float+0x2ec>)
 c017cba:	f004 fa7f 	bl	c01c1bc <__aeabi_dcmpun>
 c017cbe:	bb68      	cbnz	r0, c017d1c <_printf_float+0xb8>
 c017cc0:	f04f 32ff 	mov.w	r2, #4294967295
 c017cc4:	4ba2      	ldr	r3, [pc, #648]	; (c017f50 <_printf_float+0x2ec>)
 c017cc6:	4638      	mov	r0, r7
 c017cc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 c017cca:	f004 fa59 	bl	c01c180 <__aeabi_dcmple>
 c017cce:	bb28      	cbnz	r0, c017d1c <_printf_float+0xb8>
 c017cd0:	2200      	movs	r2, #0
 c017cd2:	2300      	movs	r3, #0
 c017cd4:	4638      	mov	r0, r7
 c017cd6:	4649      	mov	r1, r9
 c017cd8:	f004 fa48 	bl	c01c16c <__aeabi_dcmplt>
 c017cdc:	b110      	cbz	r0, c017ce4 <_printf_float+0x80>
 c017cde:	232d      	movs	r3, #45	; 0x2d
 c017ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c017ce4:	4f9b      	ldr	r7, [pc, #620]	; (c017f54 <_printf_float+0x2f0>)
 c017ce6:	4b9c      	ldr	r3, [pc, #624]	; (c017f58 <_printf_float+0x2f4>)
 c017ce8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 c017cec:	bf98      	it	ls
 c017cee:	461f      	movls	r7, r3
 c017cf0:	2303      	movs	r3, #3
 c017cf2:	f04f 0900 	mov.w	r9, #0
 c017cf6:	6123      	str	r3, [r4, #16]
 c017cf8:	f02a 0304 	bic.w	r3, sl, #4
 c017cfc:	6023      	str	r3, [r4, #0]
 c017cfe:	9600      	str	r6, [sp, #0]
 c017d00:	465b      	mov	r3, fp
 c017d02:	aa0f      	add	r2, sp, #60	; 0x3c
 c017d04:	4621      	mov	r1, r4
 c017d06:	4628      	mov	r0, r5
 c017d08:	f000 f9e2 	bl	c0180d0 <_printf_common>
 c017d0c:	3001      	adds	r0, #1
 c017d0e:	f040 8090 	bne.w	c017e32 <_printf_float+0x1ce>
 c017d12:	f04f 30ff 	mov.w	r0, #4294967295
 c017d16:	b011      	add	sp, #68	; 0x44
 c017d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c017d1c:	463a      	mov	r2, r7
 c017d1e:	464b      	mov	r3, r9
 c017d20:	4638      	mov	r0, r7
 c017d22:	4649      	mov	r1, r9
 c017d24:	f004 fa4a 	bl	c01c1bc <__aeabi_dcmpun>
 c017d28:	b110      	cbz	r0, c017d30 <_printf_float+0xcc>
 c017d2a:	4f8c      	ldr	r7, [pc, #560]	; (c017f5c <_printf_float+0x2f8>)
 c017d2c:	4b8c      	ldr	r3, [pc, #560]	; (c017f60 <_printf_float+0x2fc>)
 c017d2e:	e7db      	b.n	c017ce8 <_printf_float+0x84>
 c017d30:	6863      	ldr	r3, [r4, #4]
 c017d32:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 c017d36:	a80d      	add	r0, sp, #52	; 0x34
 c017d38:	1c59      	adds	r1, r3, #1
 c017d3a:	a90e      	add	r1, sp, #56	; 0x38
 c017d3c:	d140      	bne.n	c017dc0 <_printf_float+0x15c>
 c017d3e:	2306      	movs	r3, #6
 c017d40:	6063      	str	r3, [r4, #4]
 c017d42:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 c017d46:	f04f 0c00 	mov.w	ip, #0
 c017d4a:	6022      	str	r2, [r4, #0]
 c017d4c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 c017d50:	6863      	ldr	r3, [r4, #4]
 c017d52:	463a      	mov	r2, r7
 c017d54:	e9cd 0803 	strd	r0, r8, [sp, #12]
 c017d58:	9300      	str	r3, [sp, #0]
 c017d5a:	4628      	mov	r0, r5
 c017d5c:	464b      	mov	r3, r9
 c017d5e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 c017d62:	f7ff feef 	bl	c017b44 <__cvt>
 c017d66:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 c017d6a:	4607      	mov	r7, r0
 c017d6c:	2b47      	cmp	r3, #71	; 0x47
 c017d6e:	d109      	bne.n	c017d84 <_printf_float+0x120>
 c017d70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c017d72:	1cd8      	adds	r0, r3, #3
 c017d74:	db02      	blt.n	c017d7c <_printf_float+0x118>
 c017d76:	6862      	ldr	r2, [r4, #4]
 c017d78:	4293      	cmp	r3, r2
 c017d7a:	dd47      	ble.n	c017e0c <_printf_float+0x1a8>
 c017d7c:	f1a8 0802 	sub.w	r8, r8, #2
 c017d80:	fa5f f888 	uxtb.w	r8, r8
 c017d84:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 c017d88:	990d      	ldr	r1, [sp, #52]	; 0x34
 c017d8a:	d824      	bhi.n	c017dd6 <_printf_float+0x172>
 c017d8c:	3901      	subs	r1, #1
 c017d8e:	4642      	mov	r2, r8
 c017d90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 c017d94:	910d      	str	r1, [sp, #52]	; 0x34
 c017d96:	f7ff ff32 	bl	c017bfe <__exponent>
 c017d9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c017d9c:	4681      	mov	r9, r0
 c017d9e:	1813      	adds	r3, r2, r0
 c017da0:	2a01      	cmp	r2, #1
 c017da2:	6123      	str	r3, [r4, #16]
 c017da4:	dc02      	bgt.n	c017dac <_printf_float+0x148>
 c017da6:	6822      	ldr	r2, [r4, #0]
 c017da8:	07d1      	lsls	r1, r2, #31
 c017daa:	d501      	bpl.n	c017db0 <_printf_float+0x14c>
 c017dac:	3301      	adds	r3, #1
 c017dae:	6123      	str	r3, [r4, #16]
 c017db0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 c017db4:	2b00      	cmp	r3, #0
 c017db6:	d0a2      	beq.n	c017cfe <_printf_float+0x9a>
 c017db8:	232d      	movs	r3, #45	; 0x2d
 c017dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c017dbe:	e79e      	b.n	c017cfe <_printf_float+0x9a>
 c017dc0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 c017dc4:	f000 816d 	beq.w	c0180a2 <_printf_float+0x43e>
 c017dc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 c017dcc:	d1b9      	bne.n	c017d42 <_printf_float+0xde>
 c017dce:	2b00      	cmp	r3, #0
 c017dd0:	d1b7      	bne.n	c017d42 <_printf_float+0xde>
 c017dd2:	2301      	movs	r3, #1
 c017dd4:	e7b4      	b.n	c017d40 <_printf_float+0xdc>
 c017dd6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 c017dda:	d119      	bne.n	c017e10 <_printf_float+0x1ac>
 c017ddc:	2900      	cmp	r1, #0
 c017dde:	6863      	ldr	r3, [r4, #4]
 c017de0:	dd0c      	ble.n	c017dfc <_printf_float+0x198>
 c017de2:	6121      	str	r1, [r4, #16]
 c017de4:	b913      	cbnz	r3, c017dec <_printf_float+0x188>
 c017de6:	6822      	ldr	r2, [r4, #0]
 c017de8:	07d2      	lsls	r2, r2, #31
 c017dea:	d502      	bpl.n	c017df2 <_printf_float+0x18e>
 c017dec:	3301      	adds	r3, #1
 c017dee:	440b      	add	r3, r1
 c017df0:	6123      	str	r3, [r4, #16]
 c017df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c017df4:	f04f 0900 	mov.w	r9, #0
 c017df8:	65a3      	str	r3, [r4, #88]	; 0x58
 c017dfa:	e7d9      	b.n	c017db0 <_printf_float+0x14c>
 c017dfc:	b913      	cbnz	r3, c017e04 <_printf_float+0x1a0>
 c017dfe:	6822      	ldr	r2, [r4, #0]
 c017e00:	07d0      	lsls	r0, r2, #31
 c017e02:	d501      	bpl.n	c017e08 <_printf_float+0x1a4>
 c017e04:	3302      	adds	r3, #2
 c017e06:	e7f3      	b.n	c017df0 <_printf_float+0x18c>
 c017e08:	2301      	movs	r3, #1
 c017e0a:	e7f1      	b.n	c017df0 <_printf_float+0x18c>
 c017e0c:	f04f 0867 	mov.w	r8, #103	; 0x67
 c017e10:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 c017e14:	4293      	cmp	r3, r2
 c017e16:	db05      	blt.n	c017e24 <_printf_float+0x1c0>
 c017e18:	6822      	ldr	r2, [r4, #0]
 c017e1a:	6123      	str	r3, [r4, #16]
 c017e1c:	07d1      	lsls	r1, r2, #31
 c017e1e:	d5e8      	bpl.n	c017df2 <_printf_float+0x18e>
 c017e20:	3301      	adds	r3, #1
 c017e22:	e7e5      	b.n	c017df0 <_printf_float+0x18c>
 c017e24:	2b00      	cmp	r3, #0
 c017e26:	bfd4      	ite	le
 c017e28:	f1c3 0302 	rsble	r3, r3, #2
 c017e2c:	2301      	movgt	r3, #1
 c017e2e:	4413      	add	r3, r2
 c017e30:	e7de      	b.n	c017df0 <_printf_float+0x18c>
 c017e32:	6823      	ldr	r3, [r4, #0]
 c017e34:	055a      	lsls	r2, r3, #21
 c017e36:	d407      	bmi.n	c017e48 <_printf_float+0x1e4>
 c017e38:	6923      	ldr	r3, [r4, #16]
 c017e3a:	463a      	mov	r2, r7
 c017e3c:	4659      	mov	r1, fp
 c017e3e:	4628      	mov	r0, r5
 c017e40:	47b0      	blx	r6
 c017e42:	3001      	adds	r0, #1
 c017e44:	d129      	bne.n	c017e9a <_printf_float+0x236>
 c017e46:	e764      	b.n	c017d12 <_printf_float+0xae>
 c017e48:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 c017e4c:	f240 80d7 	bls.w	c017ffe <_printf_float+0x39a>
 c017e50:	2200      	movs	r2, #0
 c017e52:	2300      	movs	r3, #0
 c017e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 c017e58:	f004 f97e 	bl	c01c158 <__aeabi_dcmpeq>
 c017e5c:	b388      	cbz	r0, c017ec2 <_printf_float+0x25e>
 c017e5e:	2301      	movs	r3, #1
 c017e60:	4a40      	ldr	r2, [pc, #256]	; (c017f64 <_printf_float+0x300>)
 c017e62:	4659      	mov	r1, fp
 c017e64:	4628      	mov	r0, r5
 c017e66:	47b0      	blx	r6
 c017e68:	3001      	adds	r0, #1
 c017e6a:	f43f af52 	beq.w	c017d12 <_printf_float+0xae>
 c017e6e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 c017e72:	429a      	cmp	r2, r3
 c017e74:	db02      	blt.n	c017e7c <_printf_float+0x218>
 c017e76:	6823      	ldr	r3, [r4, #0]
 c017e78:	07d8      	lsls	r0, r3, #31
 c017e7a:	d50e      	bpl.n	c017e9a <_printf_float+0x236>
 c017e7c:	4659      	mov	r1, fp
 c017e7e:	4628      	mov	r0, r5
 c017e80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c017e84:	47b0      	blx	r6
 c017e86:	3001      	adds	r0, #1
 c017e88:	f43f af43 	beq.w	c017d12 <_printf_float+0xae>
 c017e8c:	2700      	movs	r7, #0
 c017e8e:	f104 081a 	add.w	r8, r4, #26
 c017e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c017e94:	3b01      	subs	r3, #1
 c017e96:	42bb      	cmp	r3, r7
 c017e98:	dc09      	bgt.n	c017eae <_printf_float+0x24a>
 c017e9a:	6823      	ldr	r3, [r4, #0]
 c017e9c:	079f      	lsls	r7, r3, #30
 c017e9e:	f100 80fc 	bmi.w	c01809a <_printf_float+0x436>
 c017ea2:	68e0      	ldr	r0, [r4, #12]
 c017ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 c017ea6:	4298      	cmp	r0, r3
 c017ea8:	bfb8      	it	lt
 c017eaa:	4618      	movlt	r0, r3
 c017eac:	e733      	b.n	c017d16 <_printf_float+0xb2>
 c017eae:	2301      	movs	r3, #1
 c017eb0:	4642      	mov	r2, r8
 c017eb2:	4659      	mov	r1, fp
 c017eb4:	4628      	mov	r0, r5
 c017eb6:	47b0      	blx	r6
 c017eb8:	3001      	adds	r0, #1
 c017eba:	f43f af2a 	beq.w	c017d12 <_printf_float+0xae>
 c017ebe:	3701      	adds	r7, #1
 c017ec0:	e7e7      	b.n	c017e92 <_printf_float+0x22e>
 c017ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c017ec4:	2b00      	cmp	r3, #0
 c017ec6:	dc2b      	bgt.n	c017f20 <_printf_float+0x2bc>
 c017ec8:	2301      	movs	r3, #1
 c017eca:	4a26      	ldr	r2, [pc, #152]	; (c017f64 <_printf_float+0x300>)
 c017ecc:	4659      	mov	r1, fp
 c017ece:	4628      	mov	r0, r5
 c017ed0:	47b0      	blx	r6
 c017ed2:	3001      	adds	r0, #1
 c017ed4:	f43f af1d 	beq.w	c017d12 <_printf_float+0xae>
 c017ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c017eda:	b923      	cbnz	r3, c017ee6 <_printf_float+0x282>
 c017edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c017ede:	b913      	cbnz	r3, c017ee6 <_printf_float+0x282>
 c017ee0:	6823      	ldr	r3, [r4, #0]
 c017ee2:	07d9      	lsls	r1, r3, #31
 c017ee4:	d5d9      	bpl.n	c017e9a <_printf_float+0x236>
 c017ee6:	4659      	mov	r1, fp
 c017ee8:	4628      	mov	r0, r5
 c017eea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c017eee:	47b0      	blx	r6
 c017ef0:	3001      	adds	r0, #1
 c017ef2:	f43f af0e 	beq.w	c017d12 <_printf_float+0xae>
 c017ef6:	f04f 0800 	mov.w	r8, #0
 c017efa:	f104 091a 	add.w	r9, r4, #26
 c017efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c017f00:	425b      	negs	r3, r3
 c017f02:	4543      	cmp	r3, r8
 c017f04:	dc01      	bgt.n	c017f0a <_printf_float+0x2a6>
 c017f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c017f08:	e797      	b.n	c017e3a <_printf_float+0x1d6>
 c017f0a:	2301      	movs	r3, #1
 c017f0c:	464a      	mov	r2, r9
 c017f0e:	4659      	mov	r1, fp
 c017f10:	4628      	mov	r0, r5
 c017f12:	47b0      	blx	r6
 c017f14:	3001      	adds	r0, #1
 c017f16:	f43f aefc 	beq.w	c017d12 <_printf_float+0xae>
 c017f1a:	f108 0801 	add.w	r8, r8, #1
 c017f1e:	e7ee      	b.n	c017efe <_printf_float+0x29a>
 c017f20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c017f22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 c017f24:	429a      	cmp	r2, r3
 c017f26:	bfa8      	it	ge
 c017f28:	461a      	movge	r2, r3
 c017f2a:	2a00      	cmp	r2, #0
 c017f2c:	4690      	mov	r8, r2
 c017f2e:	dd07      	ble.n	c017f40 <_printf_float+0x2dc>
 c017f30:	4613      	mov	r3, r2
 c017f32:	4659      	mov	r1, fp
 c017f34:	463a      	mov	r2, r7
 c017f36:	4628      	mov	r0, r5
 c017f38:	47b0      	blx	r6
 c017f3a:	3001      	adds	r0, #1
 c017f3c:	f43f aee9 	beq.w	c017d12 <_printf_float+0xae>
 c017f40:	f104 031a 	add.w	r3, r4, #26
 c017f44:	f04f 0a00 	mov.w	sl, #0
 c017f48:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 c017f4c:	930b      	str	r3, [sp, #44]	; 0x2c
 c017f4e:	e015      	b.n	c017f7c <_printf_float+0x318>
 c017f50:	7fefffff 	.word	0x7fefffff
 c017f54:	0c01a044 	.word	0x0c01a044
 c017f58:	0c01a040 	.word	0x0c01a040
 c017f5c:	0c01a04c 	.word	0x0c01a04c
 c017f60:	0c01a048 	.word	0x0c01a048
 c017f64:	0c01a050 	.word	0x0c01a050
 c017f68:	2301      	movs	r3, #1
 c017f6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 c017f6c:	4659      	mov	r1, fp
 c017f6e:	4628      	mov	r0, r5
 c017f70:	47b0      	blx	r6
 c017f72:	3001      	adds	r0, #1
 c017f74:	f43f aecd 	beq.w	c017d12 <_printf_float+0xae>
 c017f78:	f10a 0a01 	add.w	sl, sl, #1
 c017f7c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 c017f80:	eba9 0308 	sub.w	r3, r9, r8
 c017f84:	4553      	cmp	r3, sl
 c017f86:	dcef      	bgt.n	c017f68 <_printf_float+0x304>
 c017f88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 c017f8c:	444f      	add	r7, r9
 c017f8e:	429a      	cmp	r2, r3
 c017f90:	db14      	blt.n	c017fbc <_printf_float+0x358>
 c017f92:	6823      	ldr	r3, [r4, #0]
 c017f94:	07da      	lsls	r2, r3, #31
 c017f96:	d411      	bmi.n	c017fbc <_printf_float+0x358>
 c017f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c017f9a:	990d      	ldr	r1, [sp, #52]	; 0x34
 c017f9c:	eba3 0209 	sub.w	r2, r3, r9
 c017fa0:	eba3 0901 	sub.w	r9, r3, r1
 c017fa4:	4591      	cmp	r9, r2
 c017fa6:	bfa8      	it	ge
 c017fa8:	4691      	movge	r9, r2
 c017faa:	f1b9 0f00 	cmp.w	r9, #0
 c017fae:	dc0d      	bgt.n	c017fcc <_printf_float+0x368>
 c017fb0:	2700      	movs	r7, #0
 c017fb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 c017fb6:	f104 081a 	add.w	r8, r4, #26
 c017fba:	e018      	b.n	c017fee <_printf_float+0x38a>
 c017fbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c017fc0:	4659      	mov	r1, fp
 c017fc2:	4628      	mov	r0, r5
 c017fc4:	47b0      	blx	r6
 c017fc6:	3001      	adds	r0, #1
 c017fc8:	d1e6      	bne.n	c017f98 <_printf_float+0x334>
 c017fca:	e6a2      	b.n	c017d12 <_printf_float+0xae>
 c017fcc:	464b      	mov	r3, r9
 c017fce:	463a      	mov	r2, r7
 c017fd0:	4659      	mov	r1, fp
 c017fd2:	4628      	mov	r0, r5
 c017fd4:	47b0      	blx	r6
 c017fd6:	3001      	adds	r0, #1
 c017fd8:	d1ea      	bne.n	c017fb0 <_printf_float+0x34c>
 c017fda:	e69a      	b.n	c017d12 <_printf_float+0xae>
 c017fdc:	2301      	movs	r3, #1
 c017fde:	4642      	mov	r2, r8
 c017fe0:	4659      	mov	r1, fp
 c017fe2:	4628      	mov	r0, r5
 c017fe4:	47b0      	blx	r6
 c017fe6:	3001      	adds	r0, #1
 c017fe8:	f43f ae93 	beq.w	c017d12 <_printf_float+0xae>
 c017fec:	3701      	adds	r7, #1
 c017fee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 c017ff2:	1a9b      	subs	r3, r3, r2
 c017ff4:	eba3 0309 	sub.w	r3, r3, r9
 c017ff8:	42bb      	cmp	r3, r7
 c017ffa:	dcef      	bgt.n	c017fdc <_printf_float+0x378>
 c017ffc:	e74d      	b.n	c017e9a <_printf_float+0x236>
 c017ffe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c018000:	2a01      	cmp	r2, #1
 c018002:	dc01      	bgt.n	c018008 <_printf_float+0x3a4>
 c018004:	07db      	lsls	r3, r3, #31
 c018006:	d537      	bpl.n	c018078 <_printf_float+0x414>
 c018008:	2301      	movs	r3, #1
 c01800a:	463a      	mov	r2, r7
 c01800c:	4659      	mov	r1, fp
 c01800e:	4628      	mov	r0, r5
 c018010:	47b0      	blx	r6
 c018012:	3001      	adds	r0, #1
 c018014:	f43f ae7d 	beq.w	c017d12 <_printf_float+0xae>
 c018018:	4659      	mov	r1, fp
 c01801a:	4628      	mov	r0, r5
 c01801c:	3701      	adds	r7, #1
 c01801e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c018022:	47b0      	blx	r6
 c018024:	3001      	adds	r0, #1
 c018026:	f43f ae74 	beq.w	c017d12 <_printf_float+0xae>
 c01802a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c01802c:	2200      	movs	r2, #0
 c01802e:	f103 38ff 	add.w	r8, r3, #4294967295
 c018032:	2300      	movs	r3, #0
 c018034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 c018038:	f004 f88e 	bl	c01c158 <__aeabi_dcmpeq>
 c01803c:	b9c0      	cbnz	r0, c018070 <_printf_float+0x40c>
 c01803e:	4643      	mov	r3, r8
 c018040:	463a      	mov	r2, r7
 c018042:	4659      	mov	r1, fp
 c018044:	4628      	mov	r0, r5
 c018046:	47b0      	blx	r6
 c018048:	3001      	adds	r0, #1
 c01804a:	d10d      	bne.n	c018068 <_printf_float+0x404>
 c01804c:	e661      	b.n	c017d12 <_printf_float+0xae>
 c01804e:	2301      	movs	r3, #1
 c018050:	4642      	mov	r2, r8
 c018052:	4659      	mov	r1, fp
 c018054:	4628      	mov	r0, r5
 c018056:	47b0      	blx	r6
 c018058:	3001      	adds	r0, #1
 c01805a:	f43f ae5a 	beq.w	c017d12 <_printf_float+0xae>
 c01805e:	3701      	adds	r7, #1
 c018060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c018062:	3b01      	subs	r3, #1
 c018064:	42bb      	cmp	r3, r7
 c018066:	dcf2      	bgt.n	c01804e <_printf_float+0x3ea>
 c018068:	464b      	mov	r3, r9
 c01806a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 c01806e:	e6e5      	b.n	c017e3c <_printf_float+0x1d8>
 c018070:	2700      	movs	r7, #0
 c018072:	f104 081a 	add.w	r8, r4, #26
 c018076:	e7f3      	b.n	c018060 <_printf_float+0x3fc>
 c018078:	2301      	movs	r3, #1
 c01807a:	e7e1      	b.n	c018040 <_printf_float+0x3dc>
 c01807c:	2301      	movs	r3, #1
 c01807e:	4642      	mov	r2, r8
 c018080:	4659      	mov	r1, fp
 c018082:	4628      	mov	r0, r5
 c018084:	47b0      	blx	r6
 c018086:	3001      	adds	r0, #1
 c018088:	f43f ae43 	beq.w	c017d12 <_printf_float+0xae>
 c01808c:	3701      	adds	r7, #1
 c01808e:	68e3      	ldr	r3, [r4, #12]
 c018090:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 c018092:	1a9b      	subs	r3, r3, r2
 c018094:	42bb      	cmp	r3, r7
 c018096:	dcf1      	bgt.n	c01807c <_printf_float+0x418>
 c018098:	e703      	b.n	c017ea2 <_printf_float+0x23e>
 c01809a:	2700      	movs	r7, #0
 c01809c:	f104 0819 	add.w	r8, r4, #25
 c0180a0:	e7f5      	b.n	c01808e <_printf_float+0x42a>
 c0180a2:	2b00      	cmp	r3, #0
 c0180a4:	f43f ae95 	beq.w	c017dd2 <_printf_float+0x16e>
 c0180a8:	f04f 0c00 	mov.w	ip, #0
 c0180ac:	6022      	str	r2, [r4, #0]
 c0180ae:	9300      	str	r3, [sp, #0]
 c0180b0:	464b      	mov	r3, r9
 c0180b2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 c0180b6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 c0180ba:	e9cd 0803 	strd	r0, r8, [sp, #12]
 c0180be:	e9cd 2101 	strd	r2, r1, [sp, #4]
 c0180c2:	4628      	mov	r0, r5
 c0180c4:	463a      	mov	r2, r7
 c0180c6:	f7ff fd3d 	bl	c017b44 <__cvt>
 c0180ca:	4607      	mov	r7, r0
 c0180cc:	e650      	b.n	c017d70 <_printf_float+0x10c>
 c0180ce:	bf00      	nop

0c0180d0 <_printf_common>:
 c0180d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c0180d4:	4691      	mov	r9, r2
 c0180d6:	461f      	mov	r7, r3
 c0180d8:	688a      	ldr	r2, [r1, #8]
 c0180da:	4606      	mov	r6, r0
 c0180dc:	690b      	ldr	r3, [r1, #16]
 c0180de:	460c      	mov	r4, r1
 c0180e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c0180e4:	4293      	cmp	r3, r2
 c0180e6:	bfb8      	it	lt
 c0180e8:	4613      	movlt	r3, r2
 c0180ea:	f8c9 3000 	str.w	r3, [r9]
 c0180ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 c0180f2:	b112      	cbz	r2, c0180fa <_printf_common+0x2a>
 c0180f4:	3301      	adds	r3, #1
 c0180f6:	f8c9 3000 	str.w	r3, [r9]
 c0180fa:	6823      	ldr	r3, [r4, #0]
 c0180fc:	0699      	lsls	r1, r3, #26
 c0180fe:	bf42      	ittt	mi
 c018100:	f8d9 3000 	ldrmi.w	r3, [r9]
 c018104:	3302      	addmi	r3, #2
 c018106:	f8c9 3000 	strmi.w	r3, [r9]
 c01810a:	6825      	ldr	r5, [r4, #0]
 c01810c:	f015 0506 	ands.w	r5, r5, #6
 c018110:	d107      	bne.n	c018122 <_printf_common+0x52>
 c018112:	f104 0a19 	add.w	sl, r4, #25
 c018116:	68e3      	ldr	r3, [r4, #12]
 c018118:	f8d9 2000 	ldr.w	r2, [r9]
 c01811c:	1a9b      	subs	r3, r3, r2
 c01811e:	42ab      	cmp	r3, r5
 c018120:	dc2b      	bgt.n	c01817a <_printf_common+0xaa>
 c018122:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 c018126:	6822      	ldr	r2, [r4, #0]
 c018128:	3300      	adds	r3, #0
 c01812a:	bf18      	it	ne
 c01812c:	2301      	movne	r3, #1
 c01812e:	0692      	lsls	r2, r2, #26
 c018130:	d430      	bmi.n	c018194 <_printf_common+0xc4>
 c018132:	f104 0243 	add.w	r2, r4, #67	; 0x43
 c018136:	4639      	mov	r1, r7
 c018138:	4630      	mov	r0, r6
 c01813a:	47c0      	blx	r8
 c01813c:	3001      	adds	r0, #1
 c01813e:	d023      	beq.n	c018188 <_printf_common+0xb8>
 c018140:	6823      	ldr	r3, [r4, #0]
 c018142:	341a      	adds	r4, #26
 c018144:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 c018148:	f003 0306 	and.w	r3, r3, #6
 c01814c:	f8d9 2000 	ldr.w	r2, [r9]
 c018150:	f04f 0900 	mov.w	r9, #0
 c018154:	2b04      	cmp	r3, #4
 c018156:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c01815a:	bf08      	it	eq
 c01815c:	1aad      	subeq	r5, r5, r2
 c01815e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c018162:	bf14      	ite	ne
 c018164:	2500      	movne	r5, #0
 c018166:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c01816a:	4293      	cmp	r3, r2
 c01816c:	bfc4      	itt	gt
 c01816e:	1a9b      	subgt	r3, r3, r2
 c018170:	18ed      	addgt	r5, r5, r3
 c018172:	454d      	cmp	r5, r9
 c018174:	d11a      	bne.n	c0181ac <_printf_common+0xdc>
 c018176:	2000      	movs	r0, #0
 c018178:	e008      	b.n	c01818c <_printf_common+0xbc>
 c01817a:	2301      	movs	r3, #1
 c01817c:	4652      	mov	r2, sl
 c01817e:	4639      	mov	r1, r7
 c018180:	4630      	mov	r0, r6
 c018182:	47c0      	blx	r8
 c018184:	3001      	adds	r0, #1
 c018186:	d103      	bne.n	c018190 <_printf_common+0xc0>
 c018188:	f04f 30ff 	mov.w	r0, #4294967295
 c01818c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c018190:	3501      	adds	r5, #1
 c018192:	e7c0      	b.n	c018116 <_printf_common+0x46>
 c018194:	18e1      	adds	r1, r4, r3
 c018196:	1c5a      	adds	r2, r3, #1
 c018198:	2030      	movs	r0, #48	; 0x30
 c01819a:	3302      	adds	r3, #2
 c01819c:	4422      	add	r2, r4
 c01819e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 c0181a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 c0181a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 c0181aa:	e7c2      	b.n	c018132 <_printf_common+0x62>
 c0181ac:	2301      	movs	r3, #1
 c0181ae:	4622      	mov	r2, r4
 c0181b0:	4639      	mov	r1, r7
 c0181b2:	4630      	mov	r0, r6
 c0181b4:	47c0      	blx	r8
 c0181b6:	3001      	adds	r0, #1
 c0181b8:	d0e6      	beq.n	c018188 <_printf_common+0xb8>
 c0181ba:	f109 0901 	add.w	r9, r9, #1
 c0181be:	e7d8      	b.n	c018172 <_printf_common+0xa2>

0c0181c0 <_printf_i>:
 c0181c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c0181c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 c0181c8:	460c      	mov	r4, r1
 c0181ca:	7e09      	ldrb	r1, [r1, #24]
 c0181cc:	b085      	sub	sp, #20
 c0181ce:	4617      	mov	r7, r2
 c0181d0:	4606      	mov	r6, r0
 c0181d2:	296e      	cmp	r1, #110	; 0x6e
 c0181d4:	4698      	mov	r8, r3
 c0181d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 c0181d8:	f000 80b3 	beq.w	c018342 <_printf_i+0x182>
 c0181dc:	d822      	bhi.n	c018224 <_printf_i+0x64>
 c0181de:	2963      	cmp	r1, #99	; 0x63
 c0181e0:	d036      	beq.n	c018250 <_printf_i+0x90>
 c0181e2:	d80a      	bhi.n	c0181fa <_printf_i+0x3a>
 c0181e4:	2900      	cmp	r1, #0
 c0181e6:	f000 80b9 	beq.w	c01835c <_printf_i+0x19c>
 c0181ea:	2958      	cmp	r1, #88	; 0x58
 c0181ec:	f000 8083 	beq.w	c0182f6 <_printf_i+0x136>
 c0181f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c0181f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 c0181f8:	e032      	b.n	c018260 <_printf_i+0xa0>
 c0181fa:	2964      	cmp	r1, #100	; 0x64
 c0181fc:	d001      	beq.n	c018202 <_printf_i+0x42>
 c0181fe:	2969      	cmp	r1, #105	; 0x69
 c018200:	d1f6      	bne.n	c0181f0 <_printf_i+0x30>
 c018202:	6820      	ldr	r0, [r4, #0]
 c018204:	6813      	ldr	r3, [r2, #0]
 c018206:	0605      	lsls	r5, r0, #24
 c018208:	f103 0104 	add.w	r1, r3, #4
 c01820c:	d52a      	bpl.n	c018264 <_printf_i+0xa4>
 c01820e:	681b      	ldr	r3, [r3, #0]
 c018210:	6011      	str	r1, [r2, #0]
 c018212:	2b00      	cmp	r3, #0
 c018214:	da03      	bge.n	c01821e <_printf_i+0x5e>
 c018216:	222d      	movs	r2, #45	; 0x2d
 c018218:	425b      	negs	r3, r3
 c01821a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 c01821e:	486f      	ldr	r0, [pc, #444]	; (c0183dc <_printf_i+0x21c>)
 c018220:	220a      	movs	r2, #10
 c018222:	e039      	b.n	c018298 <_printf_i+0xd8>
 c018224:	2973      	cmp	r1, #115	; 0x73
 c018226:	f000 809d 	beq.w	c018364 <_printf_i+0x1a4>
 c01822a:	d808      	bhi.n	c01823e <_printf_i+0x7e>
 c01822c:	296f      	cmp	r1, #111	; 0x6f
 c01822e:	d020      	beq.n	c018272 <_printf_i+0xb2>
 c018230:	2970      	cmp	r1, #112	; 0x70
 c018232:	d1dd      	bne.n	c0181f0 <_printf_i+0x30>
 c018234:	6823      	ldr	r3, [r4, #0]
 c018236:	f043 0320 	orr.w	r3, r3, #32
 c01823a:	6023      	str	r3, [r4, #0]
 c01823c:	e003      	b.n	c018246 <_printf_i+0x86>
 c01823e:	2975      	cmp	r1, #117	; 0x75
 c018240:	d017      	beq.n	c018272 <_printf_i+0xb2>
 c018242:	2978      	cmp	r1, #120	; 0x78
 c018244:	d1d4      	bne.n	c0181f0 <_printf_i+0x30>
 c018246:	2378      	movs	r3, #120	; 0x78
 c018248:	4865      	ldr	r0, [pc, #404]	; (c0183e0 <_printf_i+0x220>)
 c01824a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 c01824e:	e055      	b.n	c0182fc <_printf_i+0x13c>
 c018250:	6813      	ldr	r3, [r2, #0]
 c018252:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c018256:	1d19      	adds	r1, r3, #4
 c018258:	681b      	ldr	r3, [r3, #0]
 c01825a:	6011      	str	r1, [r2, #0]
 c01825c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c018260:	2301      	movs	r3, #1
 c018262:	e08c      	b.n	c01837e <_printf_i+0x1be>
 c018264:	681b      	ldr	r3, [r3, #0]
 c018266:	f010 0f40 	tst.w	r0, #64	; 0x40
 c01826a:	6011      	str	r1, [r2, #0]
 c01826c:	bf18      	it	ne
 c01826e:	b21b      	sxthne	r3, r3
 c018270:	e7cf      	b.n	c018212 <_printf_i+0x52>
 c018272:	6813      	ldr	r3, [r2, #0]
 c018274:	6825      	ldr	r5, [r4, #0]
 c018276:	1d18      	adds	r0, r3, #4
 c018278:	6010      	str	r0, [r2, #0]
 c01827a:	0628      	lsls	r0, r5, #24
 c01827c:	d501      	bpl.n	c018282 <_printf_i+0xc2>
 c01827e:	681b      	ldr	r3, [r3, #0]
 c018280:	e002      	b.n	c018288 <_printf_i+0xc8>
 c018282:	0668      	lsls	r0, r5, #25
 c018284:	d5fb      	bpl.n	c01827e <_printf_i+0xbe>
 c018286:	881b      	ldrh	r3, [r3, #0]
 c018288:	296f      	cmp	r1, #111	; 0x6f
 c01828a:	4854      	ldr	r0, [pc, #336]	; (c0183dc <_printf_i+0x21c>)
 c01828c:	bf14      	ite	ne
 c01828e:	220a      	movne	r2, #10
 c018290:	2208      	moveq	r2, #8
 c018292:	2100      	movs	r1, #0
 c018294:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 c018298:	6865      	ldr	r5, [r4, #4]
 c01829a:	2d00      	cmp	r5, #0
 c01829c:	60a5      	str	r5, [r4, #8]
 c01829e:	f2c0 8095 	blt.w	c0183cc <_printf_i+0x20c>
 c0182a2:	6821      	ldr	r1, [r4, #0]
 c0182a4:	f021 0104 	bic.w	r1, r1, #4
 c0182a8:	6021      	str	r1, [r4, #0]
 c0182aa:	2b00      	cmp	r3, #0
 c0182ac:	d13d      	bne.n	c01832a <_printf_i+0x16a>
 c0182ae:	2d00      	cmp	r5, #0
 c0182b0:	f040 808e 	bne.w	c0183d0 <_printf_i+0x210>
 c0182b4:	4665      	mov	r5, ip
 c0182b6:	2a08      	cmp	r2, #8
 c0182b8:	d10b      	bne.n	c0182d2 <_printf_i+0x112>
 c0182ba:	6823      	ldr	r3, [r4, #0]
 c0182bc:	07db      	lsls	r3, r3, #31
 c0182be:	d508      	bpl.n	c0182d2 <_printf_i+0x112>
 c0182c0:	6923      	ldr	r3, [r4, #16]
 c0182c2:	6862      	ldr	r2, [r4, #4]
 c0182c4:	429a      	cmp	r2, r3
 c0182c6:	bfde      	ittt	le
 c0182c8:	2330      	movle	r3, #48	; 0x30
 c0182ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 c0182ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 c0182d2:	ebac 0305 	sub.w	r3, ip, r5
 c0182d6:	6123      	str	r3, [r4, #16]
 c0182d8:	f8cd 8000 	str.w	r8, [sp]
 c0182dc:	463b      	mov	r3, r7
 c0182de:	aa03      	add	r2, sp, #12
 c0182e0:	4621      	mov	r1, r4
 c0182e2:	4630      	mov	r0, r6
 c0182e4:	f7ff fef4 	bl	c0180d0 <_printf_common>
 c0182e8:	3001      	adds	r0, #1
 c0182ea:	d14d      	bne.n	c018388 <_printf_i+0x1c8>
 c0182ec:	f04f 30ff 	mov.w	r0, #4294967295
 c0182f0:	b005      	add	sp, #20
 c0182f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c0182f6:	4839      	ldr	r0, [pc, #228]	; (c0183dc <_printf_i+0x21c>)
 c0182f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 c0182fc:	6813      	ldr	r3, [r2, #0]
 c0182fe:	6821      	ldr	r1, [r4, #0]
 c018300:	1d1d      	adds	r5, r3, #4
 c018302:	681b      	ldr	r3, [r3, #0]
 c018304:	6015      	str	r5, [r2, #0]
 c018306:	060a      	lsls	r2, r1, #24
 c018308:	d50b      	bpl.n	c018322 <_printf_i+0x162>
 c01830a:	07ca      	lsls	r2, r1, #31
 c01830c:	bf44      	itt	mi
 c01830e:	f041 0120 	orrmi.w	r1, r1, #32
 c018312:	6021      	strmi	r1, [r4, #0]
 c018314:	b91b      	cbnz	r3, c01831e <_printf_i+0x15e>
 c018316:	6822      	ldr	r2, [r4, #0]
 c018318:	f022 0220 	bic.w	r2, r2, #32
 c01831c:	6022      	str	r2, [r4, #0]
 c01831e:	2210      	movs	r2, #16
 c018320:	e7b7      	b.n	c018292 <_printf_i+0xd2>
 c018322:	064d      	lsls	r5, r1, #25
 c018324:	bf48      	it	mi
 c018326:	b29b      	uxthmi	r3, r3
 c018328:	e7ef      	b.n	c01830a <_printf_i+0x14a>
 c01832a:	4665      	mov	r5, ip
 c01832c:	fbb3 f1f2 	udiv	r1, r3, r2
 c018330:	fb02 3311 	mls	r3, r2, r1, r3
 c018334:	5cc3      	ldrb	r3, [r0, r3]
 c018336:	f805 3d01 	strb.w	r3, [r5, #-1]!
 c01833a:	460b      	mov	r3, r1
 c01833c:	2900      	cmp	r1, #0
 c01833e:	d1f5      	bne.n	c01832c <_printf_i+0x16c>
 c018340:	e7b9      	b.n	c0182b6 <_printf_i+0xf6>
 c018342:	6813      	ldr	r3, [r2, #0]
 c018344:	6825      	ldr	r5, [r4, #0]
 c018346:	1d18      	adds	r0, r3, #4
 c018348:	6961      	ldr	r1, [r4, #20]
 c01834a:	6010      	str	r0, [r2, #0]
 c01834c:	0628      	lsls	r0, r5, #24
 c01834e:	681b      	ldr	r3, [r3, #0]
 c018350:	d501      	bpl.n	c018356 <_printf_i+0x196>
 c018352:	6019      	str	r1, [r3, #0]
 c018354:	e002      	b.n	c01835c <_printf_i+0x19c>
 c018356:	066a      	lsls	r2, r5, #25
 c018358:	d5fb      	bpl.n	c018352 <_printf_i+0x192>
 c01835a:	8019      	strh	r1, [r3, #0]
 c01835c:	2300      	movs	r3, #0
 c01835e:	4665      	mov	r5, ip
 c018360:	6123      	str	r3, [r4, #16]
 c018362:	e7b9      	b.n	c0182d8 <_printf_i+0x118>
 c018364:	6813      	ldr	r3, [r2, #0]
 c018366:	1d19      	adds	r1, r3, #4
 c018368:	6011      	str	r1, [r2, #0]
 c01836a:	2100      	movs	r1, #0
 c01836c:	681d      	ldr	r5, [r3, #0]
 c01836e:	6862      	ldr	r2, [r4, #4]
 c018370:	4628      	mov	r0, r5
 c018372:	f000 ff99 	bl	c0192a8 <memchr>
 c018376:	b108      	cbz	r0, c01837c <_printf_i+0x1bc>
 c018378:	1b40      	subs	r0, r0, r5
 c01837a:	6060      	str	r0, [r4, #4]
 c01837c:	6863      	ldr	r3, [r4, #4]
 c01837e:	6123      	str	r3, [r4, #16]
 c018380:	2300      	movs	r3, #0
 c018382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c018386:	e7a7      	b.n	c0182d8 <_printf_i+0x118>
 c018388:	6923      	ldr	r3, [r4, #16]
 c01838a:	462a      	mov	r2, r5
 c01838c:	4639      	mov	r1, r7
 c01838e:	4630      	mov	r0, r6
 c018390:	47c0      	blx	r8
 c018392:	3001      	adds	r0, #1
 c018394:	d0aa      	beq.n	c0182ec <_printf_i+0x12c>
 c018396:	6823      	ldr	r3, [r4, #0]
 c018398:	079b      	lsls	r3, r3, #30
 c01839a:	d413      	bmi.n	c0183c4 <_printf_i+0x204>
 c01839c:	68e0      	ldr	r0, [r4, #12]
 c01839e:	9b03      	ldr	r3, [sp, #12]
 c0183a0:	4298      	cmp	r0, r3
 c0183a2:	bfb8      	it	lt
 c0183a4:	4618      	movlt	r0, r3
 c0183a6:	e7a3      	b.n	c0182f0 <_printf_i+0x130>
 c0183a8:	2301      	movs	r3, #1
 c0183aa:	464a      	mov	r2, r9
 c0183ac:	4639      	mov	r1, r7
 c0183ae:	4630      	mov	r0, r6
 c0183b0:	47c0      	blx	r8
 c0183b2:	3001      	adds	r0, #1
 c0183b4:	d09a      	beq.n	c0182ec <_printf_i+0x12c>
 c0183b6:	3501      	adds	r5, #1
 c0183b8:	68e3      	ldr	r3, [r4, #12]
 c0183ba:	9a03      	ldr	r2, [sp, #12]
 c0183bc:	1a9b      	subs	r3, r3, r2
 c0183be:	42ab      	cmp	r3, r5
 c0183c0:	dcf2      	bgt.n	c0183a8 <_printf_i+0x1e8>
 c0183c2:	e7eb      	b.n	c01839c <_printf_i+0x1dc>
 c0183c4:	2500      	movs	r5, #0
 c0183c6:	f104 0919 	add.w	r9, r4, #25
 c0183ca:	e7f5      	b.n	c0183b8 <_printf_i+0x1f8>
 c0183cc:	2b00      	cmp	r3, #0
 c0183ce:	d1ac      	bne.n	c01832a <_printf_i+0x16a>
 c0183d0:	7803      	ldrb	r3, [r0, #0]
 c0183d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c0183d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c0183da:	e76c      	b.n	c0182b6 <_printf_i+0xf6>
 c0183dc:	0c01a052 	.word	0x0c01a052
 c0183e0:	0c01a063 	.word	0x0c01a063

0c0183e4 <iprintf>:
 c0183e4:	b40f      	push	{r0, r1, r2, r3}
 c0183e6:	4b0a      	ldr	r3, [pc, #40]	; (c018410 <iprintf+0x2c>)
 c0183e8:	b513      	push	{r0, r1, r4, lr}
 c0183ea:	681c      	ldr	r4, [r3, #0]
 c0183ec:	b124      	cbz	r4, c0183f8 <iprintf+0x14>
 c0183ee:	69a3      	ldr	r3, [r4, #24]
 c0183f0:	b913      	cbnz	r3, c0183f8 <iprintf+0x14>
 c0183f2:	4620      	mov	r0, r4
 c0183f4:	f000 fec0 	bl	c019178 <__sinit>
 c0183f8:	ab05      	add	r3, sp, #20
 c0183fa:	9a04      	ldr	r2, [sp, #16]
 c0183fc:	68a1      	ldr	r1, [r4, #8]
 c0183fe:	4620      	mov	r0, r4
 c018400:	9301      	str	r3, [sp, #4]
 c018402:	f001 fa67 	bl	c0198d4 <_vfiprintf_r>
 c018406:	b002      	add	sp, #8
 c018408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c01840c:	b004      	add	sp, #16
 c01840e:	4770      	bx	lr
 c018410:	30035b58 	.word	0x30035b58

0c018414 <_sbrk_r>:
 c018414:	b538      	push	{r3, r4, r5, lr}
 c018416:	2300      	movs	r3, #0
 c018418:	4c05      	ldr	r4, [pc, #20]	; (c018430 <_sbrk_r+0x1c>)
 c01841a:	4605      	mov	r5, r0
 c01841c:	4608      	mov	r0, r1
 c01841e:	6023      	str	r3, [r4, #0]
 c018420:	f01c f85c 	bl	c0344dc <_sbrk>
 c018424:	1c43      	adds	r3, r0, #1
 c018426:	d102      	bne.n	c01842e <_sbrk_r+0x1a>
 c018428:	6823      	ldr	r3, [r4, #0]
 c01842a:	b103      	cbz	r3, c01842e <_sbrk_r+0x1a>
 c01842c:	602b      	str	r3, [r5, #0]
 c01842e:	bd38      	pop	{r3, r4, r5, pc}
 c018430:	3003c978 	.word	0x3003c978

0c018434 <strlen>:
 c018434:	4603      	mov	r3, r0
 c018436:	f813 2b01 	ldrb.w	r2, [r3], #1
 c01843a:	2a00      	cmp	r2, #0
 c01843c:	d1fb      	bne.n	c018436 <strlen+0x2>
 c01843e:	1a18      	subs	r0, r3, r0
 c018440:	3801      	subs	r0, #1
 c018442:	4770      	bx	lr

0c018444 <strstr>:
 c018444:	b5f0      	push	{r4, r5, r6, r7, lr}
 c018446:	7803      	ldrb	r3, [r0, #0]
 c018448:	b17b      	cbz	r3, c01846a <strstr+0x26>
 c01844a:	4604      	mov	r4, r0
 c01844c:	7823      	ldrb	r3, [r4, #0]
 c01844e:	4620      	mov	r0, r4
 c018450:	1c66      	adds	r6, r4, #1
 c018452:	b17b      	cbz	r3, c018474 <strstr+0x30>
 c018454:	1e4a      	subs	r2, r1, #1
 c018456:	1e63      	subs	r3, r4, #1
 c018458:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 c01845c:	b14d      	cbz	r5, c018472 <strstr+0x2e>
 c01845e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 c018462:	4634      	mov	r4, r6
 c018464:	42af      	cmp	r7, r5
 c018466:	d0f7      	beq.n	c018458 <strstr+0x14>
 c018468:	e7f0      	b.n	c01844c <strstr+0x8>
 c01846a:	780b      	ldrb	r3, [r1, #0]
 c01846c:	2b00      	cmp	r3, #0
 c01846e:	bf18      	it	ne
 c018470:	2000      	movne	r0, #0
 c018472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c018474:	4618      	mov	r0, r3
 c018476:	e7fc      	b.n	c018472 <strstr+0x2e>

0c018478 <quorem>:
 c018478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01847c:	6903      	ldr	r3, [r0, #16]
 c01847e:	4680      	mov	r8, r0
 c018480:	690c      	ldr	r4, [r1, #16]
 c018482:	42a3      	cmp	r3, r4
 c018484:	f2c0 8086 	blt.w	c018594 <quorem+0x11c>
 c018488:	3c01      	subs	r4, #1
 c01848a:	f101 0714 	add.w	r7, r1, #20
 c01848e:	f100 0614 	add.w	r6, r0, #20
 c018492:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 c018496:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 c01849a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 c01849e:	3501      	adds	r5, #1
 c0184a0:	eb06 030c 	add.w	r3, r6, ip
 c0184a4:	eb07 090c 	add.w	r9, r7, ip
 c0184a8:	9301      	str	r3, [sp, #4]
 c0184aa:	fbb0 f5f5 	udiv	r5, r0, r5
 c0184ae:	b3a5      	cbz	r5, c01851a <quorem+0xa2>
 c0184b0:	f04f 0a00 	mov.w	sl, #0
 c0184b4:	4638      	mov	r0, r7
 c0184b6:	46b6      	mov	lr, r6
 c0184b8:	46d3      	mov	fp, sl
 c0184ba:	f850 2b04 	ldr.w	r2, [r0], #4
 c0184be:	b293      	uxth	r3, r2
 c0184c0:	4581      	cmp	r9, r0
 c0184c2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 c0184c6:	fb05 a303 	mla	r3, r5, r3, sl
 c0184ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 c0184ce:	b29b      	uxth	r3, r3
 c0184d0:	fb05 a202 	mla	r2, r5, r2, sl
 c0184d4:	ebab 0303 	sub.w	r3, fp, r3
 c0184d8:	f8de b000 	ldr.w	fp, [lr]
 c0184dc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 c0184e0:	fa1f fb8b 	uxth.w	fp, fp
 c0184e4:	445b      	add	r3, fp
 c0184e6:	fa1f fb82 	uxth.w	fp, r2
 c0184ea:	f8de 2000 	ldr.w	r2, [lr]
 c0184ee:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 c0184f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 c0184f6:	b29b      	uxth	r3, r3
 c0184f8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 c0184fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 c018500:	f84e 3b04 	str.w	r3, [lr], #4
 c018504:	d2d9      	bcs.n	c0184ba <quorem+0x42>
 c018506:	f856 300c 	ldr.w	r3, [r6, ip]
 c01850a:	b933      	cbnz	r3, c01851a <quorem+0xa2>
 c01850c:	9b01      	ldr	r3, [sp, #4]
 c01850e:	3b04      	subs	r3, #4
 c018510:	429e      	cmp	r6, r3
 c018512:	461a      	mov	r2, r3
 c018514:	d332      	bcc.n	c01857c <quorem+0x104>
 c018516:	f8c8 4010 	str.w	r4, [r8, #16]
 c01851a:	4640      	mov	r0, r8
 c01851c:	f001 f8ea 	bl	c0196f4 <__mcmp>
 c018520:	2800      	cmp	r0, #0
 c018522:	db27      	blt.n	c018574 <quorem+0xfc>
 c018524:	3501      	adds	r5, #1
 c018526:	4630      	mov	r0, r6
 c018528:	f04f 0c00 	mov.w	ip, #0
 c01852c:	f857 1b04 	ldr.w	r1, [r7], #4
 c018530:	f8d0 e000 	ldr.w	lr, [r0]
 c018534:	b28b      	uxth	r3, r1
 c018536:	45b9      	cmp	r9, r7
 c018538:	fa1f f28e 	uxth.w	r2, lr
 c01853c:	ebac 0303 	sub.w	r3, ip, r3
 c018540:	4413      	add	r3, r2
 c018542:	ea4f 4211 	mov.w	r2, r1, lsr #16
 c018546:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 c01854a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 c01854e:	b29b      	uxth	r3, r3
 c018550:	ea4f 4c22 	mov.w	ip, r2, asr #16
 c018554:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 c018558:	f840 3b04 	str.w	r3, [r0], #4
 c01855c:	d2e6      	bcs.n	c01852c <quorem+0xb4>
 c01855e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 c018562:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 c018566:	b92a      	cbnz	r2, c018574 <quorem+0xfc>
 c018568:	3b04      	subs	r3, #4
 c01856a:	429e      	cmp	r6, r3
 c01856c:	461a      	mov	r2, r3
 c01856e:	d30b      	bcc.n	c018588 <quorem+0x110>
 c018570:	f8c8 4010 	str.w	r4, [r8, #16]
 c018574:	4628      	mov	r0, r5
 c018576:	b003      	add	sp, #12
 c018578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c01857c:	6812      	ldr	r2, [r2, #0]
 c01857e:	3b04      	subs	r3, #4
 c018580:	2a00      	cmp	r2, #0
 c018582:	d1c8      	bne.n	c018516 <quorem+0x9e>
 c018584:	3c01      	subs	r4, #1
 c018586:	e7c3      	b.n	c018510 <quorem+0x98>
 c018588:	6812      	ldr	r2, [r2, #0]
 c01858a:	3b04      	subs	r3, #4
 c01858c:	2a00      	cmp	r2, #0
 c01858e:	d1ef      	bne.n	c018570 <quorem+0xf8>
 c018590:	3c01      	subs	r4, #1
 c018592:	e7ea      	b.n	c01856a <quorem+0xf2>
 c018594:	2000      	movs	r0, #0
 c018596:	e7ee      	b.n	c018576 <quorem+0xfe>

0c018598 <_dtoa_r>:
 c018598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01859c:	4616      	mov	r6, r2
 c01859e:	b095      	sub	sp, #84	; 0x54
 c0185a0:	461f      	mov	r7, r3
 c0185a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 c0185a4:	4604      	mov	r4, r0
 c0185a6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 c0185aa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 c0185ae:	b93d      	cbnz	r5, c0185c0 <_dtoa_r+0x28>
 c0185b0:	2010      	movs	r0, #16
 c0185b2:	f7ff f9c5 	bl	c017940 <malloc>
 c0185b6:	6260      	str	r0, [r4, #36]	; 0x24
 c0185b8:	6005      	str	r5, [r0, #0]
 c0185ba:	60c5      	str	r5, [r0, #12]
 c0185bc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 c0185c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c0185c2:	6819      	ldr	r1, [r3, #0]
 c0185c4:	b151      	cbz	r1, c0185dc <_dtoa_r+0x44>
 c0185c6:	685a      	ldr	r2, [r3, #4]
 c0185c8:	2301      	movs	r3, #1
 c0185ca:	4620      	mov	r0, r4
 c0185cc:	4093      	lsls	r3, r2
 c0185ce:	604a      	str	r2, [r1, #4]
 c0185d0:	608b      	str	r3, [r1, #8]
 c0185d2:	f000 fead 	bl	c019330 <_Bfree>
 c0185d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c0185d8:	2200      	movs	r2, #0
 c0185da:	601a      	str	r2, [r3, #0]
 c0185dc:	1e3b      	subs	r3, r7, #0
 c0185de:	bfb7      	itett	lt
 c0185e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 c0185e4:	2300      	movge	r3, #0
 c0185e6:	2201      	movlt	r2, #1
 c0185e8:	9303      	strlt	r3, [sp, #12]
 c0185ea:	bfac      	ite	ge
 c0185ec:	f8c8 3000 	strge.w	r3, [r8]
 c0185f0:	f8c8 2000 	strlt.w	r2, [r8]
 c0185f4:	4bac      	ldr	r3, [pc, #688]	; (c0188a8 <_dtoa_r+0x310>)
 c0185f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 c0185fa:	ea33 0308 	bics.w	r3, r3, r8
 c0185fe:	d11b      	bne.n	c018638 <_dtoa_r+0xa0>
 c018600:	f242 730f 	movw	r3, #9999	; 0x270f
 c018604:	9a20      	ldr	r2, [sp, #128]	; 0x80
 c018606:	6013      	str	r3, [r2, #0]
 c018608:	9b02      	ldr	r3, [sp, #8]
 c01860a:	b923      	cbnz	r3, c018616 <_dtoa_r+0x7e>
 c01860c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 c018610:	2800      	cmp	r0, #0
 c018612:	f000 8541 	beq.w	c019098 <_dtoa_r+0xb00>
 c018616:	9b22      	ldr	r3, [sp, #136]	; 0x88
 c018618:	b953      	cbnz	r3, c018630 <_dtoa_r+0x98>
 c01861a:	4ba4      	ldr	r3, [pc, #656]	; (c0188ac <_dtoa_r+0x314>)
 c01861c:	e021      	b.n	c018662 <_dtoa_r+0xca>
 c01861e:	4ba4      	ldr	r3, [pc, #656]	; (c0188b0 <_dtoa_r+0x318>)
 c018620:	9306      	str	r3, [sp, #24]
 c018622:	3308      	adds	r3, #8
 c018624:	9a22      	ldr	r2, [sp, #136]	; 0x88
 c018626:	6013      	str	r3, [r2, #0]
 c018628:	9806      	ldr	r0, [sp, #24]
 c01862a:	b015      	add	sp, #84	; 0x54
 c01862c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c018630:	4b9e      	ldr	r3, [pc, #632]	; (c0188ac <_dtoa_r+0x314>)
 c018632:	9306      	str	r3, [sp, #24]
 c018634:	3303      	adds	r3, #3
 c018636:	e7f5      	b.n	c018624 <_dtoa_r+0x8c>
 c018638:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 c01863c:	2200      	movs	r2, #0
 c01863e:	2300      	movs	r3, #0
 c018640:	4630      	mov	r0, r6
 c018642:	4639      	mov	r1, r7
 c018644:	f003 fd88 	bl	c01c158 <__aeabi_dcmpeq>
 c018648:	4682      	mov	sl, r0
 c01864a:	b160      	cbz	r0, c018666 <_dtoa_r+0xce>
 c01864c:	2301      	movs	r3, #1
 c01864e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 c018650:	6013      	str	r3, [r2, #0]
 c018652:	9b22      	ldr	r3, [sp, #136]	; 0x88
 c018654:	2b00      	cmp	r3, #0
 c018656:	f000 851c 	beq.w	c019092 <_dtoa_r+0xafa>
 c01865a:	4b96      	ldr	r3, [pc, #600]	; (c0188b4 <_dtoa_r+0x31c>)
 c01865c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 c01865e:	6013      	str	r3, [r2, #0]
 c018660:	3b01      	subs	r3, #1
 c018662:	9306      	str	r3, [sp, #24]
 c018664:	e7e0      	b.n	c018628 <_dtoa_r+0x90>
 c018666:	ab12      	add	r3, sp, #72	; 0x48
 c018668:	f3c8 550a 	ubfx	r5, r8, #20, #11
 c01866c:	4632      	mov	r2, r6
 c01866e:	4620      	mov	r0, r4
 c018670:	9301      	str	r3, [sp, #4]
 c018672:	ab13      	add	r3, sp, #76	; 0x4c
 c018674:	9300      	str	r3, [sp, #0]
 c018676:	463b      	mov	r3, r7
 c018678:	f001 f8b6 	bl	c0197e8 <__d2b>
 c01867c:	4683      	mov	fp, r0
 c01867e:	2d00      	cmp	r5, #0
 c018680:	d07a      	beq.n	c018778 <_dtoa_r+0x1e0>
 c018682:	f3c7 0313 	ubfx	r3, r7, #0, #20
 c018686:	46b0      	mov	r8, r6
 c018688:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 c01868c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 c018690:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 c018694:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 c018698:	2200      	movs	r2, #0
 c01869a:	4b87      	ldr	r3, [pc, #540]	; (c0188b8 <_dtoa_r+0x320>)
 c01869c:	4640      	mov	r0, r8
 c01869e:	4649      	mov	r1, r9
 c0186a0:	f003 f93a 	bl	c01b918 <__aeabi_dsub>
 c0186a4:	a37a      	add	r3, pc, #488	; (adr r3, c018890 <_dtoa_r+0x2f8>)
 c0186a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0186aa:	f003 faed 	bl	c01bc88 <__aeabi_dmul>
 c0186ae:	a37a      	add	r3, pc, #488	; (adr r3, c018898 <_dtoa_r+0x300>)
 c0186b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0186b4:	f003 f932 	bl	c01b91c <__adddf3>
 c0186b8:	4606      	mov	r6, r0
 c0186ba:	460f      	mov	r7, r1
 c0186bc:	4628      	mov	r0, r5
 c0186be:	f003 fa79 	bl	c01bbb4 <__aeabi_i2d>
 c0186c2:	a377      	add	r3, pc, #476	; (adr r3, c0188a0 <_dtoa_r+0x308>)
 c0186c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0186c8:	f003 fade 	bl	c01bc88 <__aeabi_dmul>
 c0186cc:	4602      	mov	r2, r0
 c0186ce:	460b      	mov	r3, r1
 c0186d0:	4630      	mov	r0, r6
 c0186d2:	4639      	mov	r1, r7
 c0186d4:	f003 f922 	bl	c01b91c <__adddf3>
 c0186d8:	4606      	mov	r6, r0
 c0186da:	460f      	mov	r7, r1
 c0186dc:	f003 fd84 	bl	c01c1e8 <__aeabi_d2iz>
 c0186e0:	2200      	movs	r2, #0
 c0186e2:	4682      	mov	sl, r0
 c0186e4:	2300      	movs	r3, #0
 c0186e6:	4630      	mov	r0, r6
 c0186e8:	4639      	mov	r1, r7
 c0186ea:	f003 fd3f 	bl	c01c16c <__aeabi_dcmplt>
 c0186ee:	b148      	cbz	r0, c018704 <_dtoa_r+0x16c>
 c0186f0:	4650      	mov	r0, sl
 c0186f2:	f003 fa5f 	bl	c01bbb4 <__aeabi_i2d>
 c0186f6:	4632      	mov	r2, r6
 c0186f8:	463b      	mov	r3, r7
 c0186fa:	f003 fd2d 	bl	c01c158 <__aeabi_dcmpeq>
 c0186fe:	b908      	cbnz	r0, c018704 <_dtoa_r+0x16c>
 c018700:	f10a 3aff 	add.w	sl, sl, #4294967295
 c018704:	f1ba 0f16 	cmp.w	sl, #22
 c018708:	d857      	bhi.n	c0187ba <_dtoa_r+0x222>
 c01870a:	496c      	ldr	r1, [pc, #432]	; (c0188bc <_dtoa_r+0x324>)
 c01870c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 c018710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c018714:	e9d1 0100 	ldrd	r0, r1, [r1]
 c018718:	f003 fd46 	bl	c01c1a8 <__aeabi_dcmpgt>
 c01871c:	2800      	cmp	r0, #0
 c01871e:	d04e      	beq.n	c0187be <_dtoa_r+0x226>
 c018720:	f10a 3aff 	add.w	sl, sl, #4294967295
 c018724:	2300      	movs	r3, #0
 c018726:	930d      	str	r3, [sp, #52]	; 0x34
 c018728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 c01872a:	1b5d      	subs	r5, r3, r5
 c01872c:	1e6b      	subs	r3, r5, #1
 c01872e:	9307      	str	r3, [sp, #28]
 c018730:	bf45      	ittet	mi
 c018732:	2300      	movmi	r3, #0
 c018734:	f1c5 0901 	rsbmi	r9, r5, #1
 c018738:	f04f 0900 	movpl.w	r9, #0
 c01873c:	9307      	strmi	r3, [sp, #28]
 c01873e:	f1ba 0f00 	cmp.w	sl, #0
 c018742:	db3e      	blt.n	c0187c2 <_dtoa_r+0x22a>
 c018744:	9b07      	ldr	r3, [sp, #28]
 c018746:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 c01874a:	4453      	add	r3, sl
 c01874c:	9307      	str	r3, [sp, #28]
 c01874e:	2300      	movs	r3, #0
 c018750:	9308      	str	r3, [sp, #32]
 c018752:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 c018754:	2b09      	cmp	r3, #9
 c018756:	f200 808c 	bhi.w	c018872 <_dtoa_r+0x2da>
 c01875a:	2b05      	cmp	r3, #5
 c01875c:	bfc5      	ittet	gt
 c01875e:	3b04      	subgt	r3, #4
 c018760:	2500      	movgt	r5, #0
 c018762:	2501      	movle	r5, #1
 c018764:	931e      	strgt	r3, [sp, #120]	; 0x78
 c018766:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 c018768:	3b02      	subs	r3, #2
 c01876a:	2b03      	cmp	r3, #3
 c01876c:	f200 808d 	bhi.w	c01888a <_dtoa_r+0x2f2>
 c018770:	e8df f003 	tbb	[pc, r3]
 c018774:	6f2f7d7b 	.word	0x6f2f7d7b
 c018778:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 c01877c:	441d      	add	r5, r3
 c01877e:	f205 4032 	addw	r0, r5, #1074	; 0x432
 c018782:	2820      	cmp	r0, #32
 c018784:	dd13      	ble.n	c0187ae <_dtoa_r+0x216>
 c018786:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 c01878a:	9b02      	ldr	r3, [sp, #8]
 c01878c:	fa08 f800 	lsl.w	r8, r8, r0
 c018790:	f205 4012 	addw	r0, r5, #1042	; 0x412
 c018794:	fa23 f000 	lsr.w	r0, r3, r0
 c018798:	ea48 0000 	orr.w	r0, r8, r0
 c01879c:	f003 f9fa 	bl	c01bb94 <__aeabi_ui2d>
 c0187a0:	2301      	movs	r3, #1
 c0187a2:	4680      	mov	r8, r0
 c0187a4:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 c0187a8:	3d01      	subs	r5, #1
 c0187aa:	9310      	str	r3, [sp, #64]	; 0x40
 c0187ac:	e774      	b.n	c018698 <_dtoa_r+0x100>
 c0187ae:	f1c0 0020 	rsb	r0, r0, #32
 c0187b2:	9b02      	ldr	r3, [sp, #8]
 c0187b4:	fa03 f000 	lsl.w	r0, r3, r0
 c0187b8:	e7f0      	b.n	c01879c <_dtoa_r+0x204>
 c0187ba:	2301      	movs	r3, #1
 c0187bc:	e7b3      	b.n	c018726 <_dtoa_r+0x18e>
 c0187be:	900d      	str	r0, [sp, #52]	; 0x34
 c0187c0:	e7b2      	b.n	c018728 <_dtoa_r+0x190>
 c0187c2:	f1ca 0300 	rsb	r3, sl, #0
 c0187c6:	eba9 090a 	sub.w	r9, r9, sl
 c0187ca:	9308      	str	r3, [sp, #32]
 c0187cc:	2300      	movs	r3, #0
 c0187ce:	930c      	str	r3, [sp, #48]	; 0x30
 c0187d0:	e7bf      	b.n	c018752 <_dtoa_r+0x1ba>
 c0187d2:	2301      	movs	r3, #1
 c0187d4:	9309      	str	r3, [sp, #36]	; 0x24
 c0187d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 c0187d8:	2b00      	cmp	r3, #0
 c0187da:	dd73      	ble.n	c0188c4 <_dtoa_r+0x32c>
 c0187dc:	4698      	mov	r8, r3
 c0187de:	9304      	str	r3, [sp, #16]
 c0187e0:	2200      	movs	r2, #0
 c0187e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 c0187e4:	6072      	str	r2, [r6, #4]
 c0187e6:	2204      	movs	r2, #4
 c0187e8:	f102 0014 	add.w	r0, r2, #20
 c0187ec:	6871      	ldr	r1, [r6, #4]
 c0187ee:	4298      	cmp	r0, r3
 c0187f0:	d96d      	bls.n	c0188ce <_dtoa_r+0x336>
 c0187f2:	4620      	mov	r0, r4
 c0187f4:	f000 fd68 	bl	c0192c8 <_Balloc>
 c0187f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c0187fa:	6030      	str	r0, [r6, #0]
 c0187fc:	f1b8 0f0e 	cmp.w	r8, #14
 c018800:	681b      	ldr	r3, [r3, #0]
 c018802:	9306      	str	r3, [sp, #24]
 c018804:	f200 80ec 	bhi.w	c0189e0 <_dtoa_r+0x448>
 c018808:	2d00      	cmp	r5, #0
 c01880a:	f000 80e9 	beq.w	c0189e0 <_dtoa_r+0x448>
 c01880e:	f1ba 0f00 	cmp.w	sl, #0
 c018812:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c018816:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 c01881a:	dd76      	ble.n	c01890a <_dtoa_r+0x372>
 c01881c:	4a27      	ldr	r2, [pc, #156]	; (c0188bc <_dtoa_r+0x324>)
 c01881e:	f00a 030f 	and.w	r3, sl, #15
 c018822:	ea4f 162a 	mov.w	r6, sl, asr #4
 c018826:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 c01882a:	06f0      	lsls	r0, r6, #27
 c01882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 c018830:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 c018834:	d567      	bpl.n	c018906 <_dtoa_r+0x36e>
 c018836:	4b22      	ldr	r3, [pc, #136]	; (c0188c0 <_dtoa_r+0x328>)
 c018838:	f006 060f 	and.w	r6, r6, #15
 c01883c:	2503      	movs	r5, #3
 c01883e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 c018842:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 c018846:	f003 fb49 	bl	c01bedc <__aeabi_ddiv>
 c01884a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c01884e:	4f1c      	ldr	r7, [pc, #112]	; (c0188c0 <_dtoa_r+0x328>)
 c018850:	e04e      	b.n	c0188f0 <_dtoa_r+0x358>
 c018852:	2301      	movs	r3, #1
 c018854:	9309      	str	r3, [sp, #36]	; 0x24
 c018856:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 c018858:	4453      	add	r3, sl
 c01885a:	f103 0801 	add.w	r8, r3, #1
 c01885e:	9304      	str	r3, [sp, #16]
 c018860:	4643      	mov	r3, r8
 c018862:	2b01      	cmp	r3, #1
 c018864:	bfb8      	it	lt
 c018866:	2301      	movlt	r3, #1
 c018868:	e7ba      	b.n	c0187e0 <_dtoa_r+0x248>
 c01886a:	2300      	movs	r3, #0
 c01886c:	e7b2      	b.n	c0187d4 <_dtoa_r+0x23c>
 c01886e:	2300      	movs	r3, #0
 c018870:	e7f0      	b.n	c018854 <_dtoa_r+0x2bc>
 c018872:	2501      	movs	r5, #1
 c018874:	2300      	movs	r3, #0
 c018876:	9509      	str	r5, [sp, #36]	; 0x24
 c018878:	931e      	str	r3, [sp, #120]	; 0x78
 c01887a:	f04f 33ff 	mov.w	r3, #4294967295
 c01887e:	2200      	movs	r2, #0
 c018880:	9304      	str	r3, [sp, #16]
 c018882:	4698      	mov	r8, r3
 c018884:	2312      	movs	r3, #18
 c018886:	921f      	str	r2, [sp, #124]	; 0x7c
 c018888:	e7aa      	b.n	c0187e0 <_dtoa_r+0x248>
 c01888a:	2301      	movs	r3, #1
 c01888c:	9309      	str	r3, [sp, #36]	; 0x24
 c01888e:	e7f4      	b.n	c01887a <_dtoa_r+0x2e2>
 c018890:	636f4361 	.word	0x636f4361
 c018894:	3fd287a7 	.word	0x3fd287a7
 c018898:	8b60c8b3 	.word	0x8b60c8b3
 c01889c:	3fc68a28 	.word	0x3fc68a28
 c0188a0:	509f79fb 	.word	0x509f79fb
 c0188a4:	3fd34413 	.word	0x3fd34413
 c0188a8:	7ff00000 	.word	0x7ff00000
 c0188ac:	0c01a07d 	.word	0x0c01a07d
 c0188b0:	0c01a074 	.word	0x0c01a074
 c0188b4:	0c01a051 	.word	0x0c01a051
 c0188b8:	3ff80000 	.word	0x3ff80000
 c0188bc:	0c01a110 	.word	0x0c01a110
 c0188c0:	0c01a0e8 	.word	0x0c01a0e8
 c0188c4:	2301      	movs	r3, #1
 c0188c6:	9304      	str	r3, [sp, #16]
 c0188c8:	4698      	mov	r8, r3
 c0188ca:	461a      	mov	r2, r3
 c0188cc:	e7db      	b.n	c018886 <_dtoa_r+0x2ee>
 c0188ce:	3101      	adds	r1, #1
 c0188d0:	0052      	lsls	r2, r2, #1
 c0188d2:	6071      	str	r1, [r6, #4]
 c0188d4:	e788      	b.n	c0187e8 <_dtoa_r+0x250>
 c0188d6:	07f1      	lsls	r1, r6, #31
 c0188d8:	d508      	bpl.n	c0188ec <_dtoa_r+0x354>
 c0188da:	3501      	adds	r5, #1
 c0188dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 c0188e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 c0188e4:	f003 f9d0 	bl	c01bc88 <__aeabi_dmul>
 c0188e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 c0188ec:	1076      	asrs	r6, r6, #1
 c0188ee:	3708      	adds	r7, #8
 c0188f0:	2e00      	cmp	r6, #0
 c0188f2:	d1f0      	bne.n	c0188d6 <_dtoa_r+0x33e>
 c0188f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 c0188f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c0188fc:	f003 faee 	bl	c01bedc <__aeabi_ddiv>
 c018900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c018904:	e01b      	b.n	c01893e <_dtoa_r+0x3a6>
 c018906:	2502      	movs	r5, #2
 c018908:	e7a1      	b.n	c01884e <_dtoa_r+0x2b6>
 c01890a:	f000 80a4 	beq.w	c018a56 <_dtoa_r+0x4be>
 c01890e:	f1ca 0600 	rsb	r6, sl, #0
 c018912:	4ba1      	ldr	r3, [pc, #644]	; (c018b98 <_dtoa_r+0x600>)
 c018914:	4fa1      	ldr	r7, [pc, #644]	; (c018b9c <_dtoa_r+0x604>)
 c018916:	2502      	movs	r5, #2
 c018918:	f006 020f 	and.w	r2, r6, #15
 c01891c:	1136      	asrs	r6, r6, #4
 c01891e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 c018922:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 c018926:	e9d3 2300 	ldrd	r2, r3, [r3]
 c01892a:	f003 f9ad 	bl	c01bc88 <__aeabi_dmul>
 c01892e:	2300      	movs	r3, #0
 c018930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c018934:	2e00      	cmp	r6, #0
 c018936:	f040 8083 	bne.w	c018a40 <_dtoa_r+0x4a8>
 c01893a:	2b00      	cmp	r3, #0
 c01893c:	d1e0      	bne.n	c018900 <_dtoa_r+0x368>
 c01893e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c018940:	2b00      	cmp	r3, #0
 c018942:	f000 808a 	beq.w	c018a5a <_dtoa_r+0x4c2>
 c018946:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c01894a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 c01894e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 c018952:	2200      	movs	r2, #0
 c018954:	4b92      	ldr	r3, [pc, #584]	; (c018ba0 <_dtoa_r+0x608>)
 c018956:	f003 fc09 	bl	c01c16c <__aeabi_dcmplt>
 c01895a:	2800      	cmp	r0, #0
 c01895c:	d07d      	beq.n	c018a5a <_dtoa_r+0x4c2>
 c01895e:	f1b8 0f00 	cmp.w	r8, #0
 c018962:	d07a      	beq.n	c018a5a <_dtoa_r+0x4c2>
 c018964:	9b04      	ldr	r3, [sp, #16]
 c018966:	2b00      	cmp	r3, #0
 c018968:	dd36      	ble.n	c0189d8 <_dtoa_r+0x440>
 c01896a:	2200      	movs	r2, #0
 c01896c:	4b8d      	ldr	r3, [pc, #564]	; (c018ba4 <_dtoa_r+0x60c>)
 c01896e:	f10a 37ff 	add.w	r7, sl, #4294967295
 c018972:	3501      	adds	r5, #1
 c018974:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 c018978:	f003 f986 	bl	c01bc88 <__aeabi_dmul>
 c01897c:	9e04      	ldr	r6, [sp, #16]
 c01897e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c018982:	4628      	mov	r0, r5
 c018984:	f003 f916 	bl	c01bbb4 <__aeabi_i2d>
 c018988:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c01898c:	f003 f97c 	bl	c01bc88 <__aeabi_dmul>
 c018990:	2200      	movs	r2, #0
 c018992:	4b85      	ldr	r3, [pc, #532]	; (c018ba8 <_dtoa_r+0x610>)
 c018994:	f002 ffc2 	bl	c01b91c <__adddf3>
 c018998:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 c01899c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 c0189a0:	950b      	str	r5, [sp, #44]	; 0x2c
 c0189a2:	2e00      	cmp	r6, #0
 c0189a4:	d15c      	bne.n	c018a60 <_dtoa_r+0x4c8>
 c0189a6:	2200      	movs	r2, #0
 c0189a8:	4b80      	ldr	r3, [pc, #512]	; (c018bac <_dtoa_r+0x614>)
 c0189aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c0189ae:	f002 ffb3 	bl	c01b918 <__aeabi_dsub>
 c0189b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c0189b4:	462b      	mov	r3, r5
 c0189b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c0189ba:	f003 fbf5 	bl	c01c1a8 <__aeabi_dcmpgt>
 c0189be:	2800      	cmp	r0, #0
 c0189c0:	f040 8281 	bne.w	c018ec6 <_dtoa_r+0x92e>
 c0189c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c0189c6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 c0189ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c0189ce:	f003 fbcd 	bl	c01c16c <__aeabi_dcmplt>
 c0189d2:	2800      	cmp	r0, #0
 c0189d4:	f040 8275 	bne.w	c018ec2 <_dtoa_r+0x92a>
 c0189d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 c0189dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 c0189e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 c0189e2:	2b00      	cmp	r3, #0
 c0189e4:	f2c0 814b 	blt.w	c018c7e <_dtoa_r+0x6e6>
 c0189e8:	f1ba 0f0e 	cmp.w	sl, #14
 c0189ec:	f300 8147 	bgt.w	c018c7e <_dtoa_r+0x6e6>
 c0189f0:	4b69      	ldr	r3, [pc, #420]	; (c018b98 <_dtoa_r+0x600>)
 c0189f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 c0189f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0189fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 c0189fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 c018a00:	2b00      	cmp	r3, #0
 c018a02:	f280 80d7 	bge.w	c018bb4 <_dtoa_r+0x61c>
 c018a06:	f1b8 0f00 	cmp.w	r8, #0
 c018a0a:	f300 80d3 	bgt.w	c018bb4 <_dtoa_r+0x61c>
 c018a0e:	f040 8257 	bne.w	c018ec0 <_dtoa_r+0x928>
 c018a12:	2200      	movs	r2, #0
 c018a14:	4b65      	ldr	r3, [pc, #404]	; (c018bac <_dtoa_r+0x614>)
 c018a16:	4646      	mov	r6, r8
 c018a18:	4647      	mov	r7, r8
 c018a1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 c018a1e:	f003 f933 	bl	c01bc88 <__aeabi_dmul>
 c018a22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c018a26:	f003 fbb5 	bl	c01c194 <__aeabi_dcmpge>
 c018a2a:	2800      	cmp	r0, #0
 c018a2c:	f040 822d 	bne.w	c018e8a <_dtoa_r+0x8f2>
 c018a30:	9b06      	ldr	r3, [sp, #24]
 c018a32:	f10a 0a01 	add.w	sl, sl, #1
 c018a36:	9a06      	ldr	r2, [sp, #24]
 c018a38:	1c5d      	adds	r5, r3, #1
 c018a3a:	2331      	movs	r3, #49	; 0x31
 c018a3c:	7013      	strb	r3, [r2, #0]
 c018a3e:	e228      	b.n	c018e92 <_dtoa_r+0x8fa>
 c018a40:	07f2      	lsls	r2, r6, #31
 c018a42:	d505      	bpl.n	c018a50 <_dtoa_r+0x4b8>
 c018a44:	3501      	adds	r5, #1
 c018a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 c018a4a:	f003 f91d 	bl	c01bc88 <__aeabi_dmul>
 c018a4e:	2301      	movs	r3, #1
 c018a50:	1076      	asrs	r6, r6, #1
 c018a52:	3708      	adds	r7, #8
 c018a54:	e76e      	b.n	c018934 <_dtoa_r+0x39c>
 c018a56:	2502      	movs	r5, #2
 c018a58:	e771      	b.n	c01893e <_dtoa_r+0x3a6>
 c018a5a:	4657      	mov	r7, sl
 c018a5c:	4646      	mov	r6, r8
 c018a5e:	e790      	b.n	c018982 <_dtoa_r+0x3ea>
 c018a60:	4b4d      	ldr	r3, [pc, #308]	; (c018b98 <_dtoa_r+0x600>)
 c018a62:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 c018a66:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 c018a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c018a6c:	2b00      	cmp	r3, #0
 c018a6e:	d048      	beq.n	c018b02 <_dtoa_r+0x56a>
 c018a70:	4602      	mov	r2, r0
 c018a72:	460b      	mov	r3, r1
 c018a74:	2000      	movs	r0, #0
 c018a76:	494e      	ldr	r1, [pc, #312]	; (c018bb0 <_dtoa_r+0x618>)
 c018a78:	f003 fa30 	bl	c01bedc <__aeabi_ddiv>
 c018a7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 c018a80:	f002 ff4a 	bl	c01b918 <__aeabi_dsub>
 c018a84:	9d06      	ldr	r5, [sp, #24]
 c018a86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 c018a8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c018a8e:	f003 fbab 	bl	c01c1e8 <__aeabi_d2iz>
 c018a92:	9011      	str	r0, [sp, #68]	; 0x44
 c018a94:	f003 f88e 	bl	c01bbb4 <__aeabi_i2d>
 c018a98:	4602      	mov	r2, r0
 c018a9a:	460b      	mov	r3, r1
 c018a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c018aa0:	f002 ff3a 	bl	c01b918 <__aeabi_dsub>
 c018aa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 c018aa6:	3330      	adds	r3, #48	; 0x30
 c018aa8:	f805 3b01 	strb.w	r3, [r5], #1
 c018aac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 c018ab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c018ab4:	f003 fb5a 	bl	c01c16c <__aeabi_dcmplt>
 c018ab8:	2800      	cmp	r0, #0
 c018aba:	d162      	bne.n	c018b82 <_dtoa_r+0x5ea>
 c018abc:	2000      	movs	r0, #0
 c018abe:	4938      	ldr	r1, [pc, #224]	; (c018ba0 <_dtoa_r+0x608>)
 c018ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c018ac4:	f002 ff28 	bl	c01b918 <__aeabi_dsub>
 c018ac8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 c018acc:	f003 fb4e 	bl	c01c16c <__aeabi_dcmplt>
 c018ad0:	2800      	cmp	r0, #0
 c018ad2:	f040 80b5 	bne.w	c018c40 <_dtoa_r+0x6a8>
 c018ad6:	9b06      	ldr	r3, [sp, #24]
 c018ad8:	1aeb      	subs	r3, r5, r3
 c018ada:	429e      	cmp	r6, r3
 c018adc:	f77f af7c 	ble.w	c0189d8 <_dtoa_r+0x440>
 c018ae0:	2200      	movs	r2, #0
 c018ae2:	4b30      	ldr	r3, [pc, #192]	; (c018ba4 <_dtoa_r+0x60c>)
 c018ae4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 c018ae8:	f003 f8ce 	bl	c01bc88 <__aeabi_dmul>
 c018aec:	2200      	movs	r2, #0
 c018aee:	4b2d      	ldr	r3, [pc, #180]	; (c018ba4 <_dtoa_r+0x60c>)
 c018af0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 c018af4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c018af8:	f003 f8c6 	bl	c01bc88 <__aeabi_dmul>
 c018afc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c018b00:	e7c3      	b.n	c018a8a <_dtoa_r+0x4f2>
 c018b02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 c018b06:	f003 f8bf 	bl	c01bc88 <__aeabi_dmul>
 c018b0a:	9b06      	ldr	r3, [sp, #24]
 c018b0c:	199d      	adds	r5, r3, r6
 c018b0e:	461e      	mov	r6, r3
 c018b10:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 c018b14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c018b18:	f003 fb66 	bl	c01c1e8 <__aeabi_d2iz>
 c018b1c:	9011      	str	r0, [sp, #68]	; 0x44
 c018b1e:	f003 f849 	bl	c01bbb4 <__aeabi_i2d>
 c018b22:	4602      	mov	r2, r0
 c018b24:	460b      	mov	r3, r1
 c018b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c018b2a:	f002 fef5 	bl	c01b918 <__aeabi_dsub>
 c018b2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 c018b30:	2200      	movs	r2, #0
 c018b32:	3330      	adds	r3, #48	; 0x30
 c018b34:	f806 3b01 	strb.w	r3, [r6], #1
 c018b38:	42ae      	cmp	r6, r5
 c018b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c018b3e:	d124      	bne.n	c018b8a <_dtoa_r+0x5f2>
 c018b40:	4b1b      	ldr	r3, [pc, #108]	; (c018bb0 <_dtoa_r+0x618>)
 c018b42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 c018b46:	f002 fee9 	bl	c01b91c <__adddf3>
 c018b4a:	4602      	mov	r2, r0
 c018b4c:	460b      	mov	r3, r1
 c018b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c018b52:	f003 fb29 	bl	c01c1a8 <__aeabi_dcmpgt>
 c018b56:	2800      	cmp	r0, #0
 c018b58:	d172      	bne.n	c018c40 <_dtoa_r+0x6a8>
 c018b5a:	2000      	movs	r0, #0
 c018b5c:	4914      	ldr	r1, [pc, #80]	; (c018bb0 <_dtoa_r+0x618>)
 c018b5e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 c018b62:	f002 fed9 	bl	c01b918 <__aeabi_dsub>
 c018b66:	4602      	mov	r2, r0
 c018b68:	460b      	mov	r3, r1
 c018b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c018b6e:	f003 fafd 	bl	c01c16c <__aeabi_dcmplt>
 c018b72:	2800      	cmp	r0, #0
 c018b74:	f43f af30 	beq.w	c0189d8 <_dtoa_r+0x440>
 c018b78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 c018b7c:	1e6a      	subs	r2, r5, #1
 c018b7e:	2b30      	cmp	r3, #48	; 0x30
 c018b80:	d001      	beq.n	c018b86 <_dtoa_r+0x5ee>
 c018b82:	46ba      	mov	sl, r7
 c018b84:	e04b      	b.n	c018c1e <_dtoa_r+0x686>
 c018b86:	4615      	mov	r5, r2
 c018b88:	e7f6      	b.n	c018b78 <_dtoa_r+0x5e0>
 c018b8a:	4b06      	ldr	r3, [pc, #24]	; (c018ba4 <_dtoa_r+0x60c>)
 c018b8c:	f003 f87c 	bl	c01bc88 <__aeabi_dmul>
 c018b90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c018b94:	e7be      	b.n	c018b14 <_dtoa_r+0x57c>
 c018b96:	bf00      	nop
 c018b98:	0c01a110 	.word	0x0c01a110
 c018b9c:	0c01a0e8 	.word	0x0c01a0e8
 c018ba0:	3ff00000 	.word	0x3ff00000
 c018ba4:	40240000 	.word	0x40240000
 c018ba8:	401c0000 	.word	0x401c0000
 c018bac:	40140000 	.word	0x40140000
 c018bb0:	3fe00000 	.word	0x3fe00000
 c018bb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 c018bb8:	9d06      	ldr	r5, [sp, #24]
 c018bba:	4630      	mov	r0, r6
 c018bbc:	4639      	mov	r1, r7
 c018bbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c018bc2:	f003 f98b 	bl	c01bedc <__aeabi_ddiv>
 c018bc6:	f003 fb0f 	bl	c01c1e8 <__aeabi_d2iz>
 c018bca:	4681      	mov	r9, r0
 c018bcc:	f002 fff2 	bl	c01bbb4 <__aeabi_i2d>
 c018bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c018bd4:	f003 f858 	bl	c01bc88 <__aeabi_dmul>
 c018bd8:	4602      	mov	r2, r0
 c018bda:	4630      	mov	r0, r6
 c018bdc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 c018be0:	460b      	mov	r3, r1
 c018be2:	4639      	mov	r1, r7
 c018be4:	f002 fe98 	bl	c01b918 <__aeabi_dsub>
 c018be8:	f805 6b01 	strb.w	r6, [r5], #1
 c018bec:	9e06      	ldr	r6, [sp, #24]
 c018bee:	4602      	mov	r2, r0
 c018bf0:	460b      	mov	r3, r1
 c018bf2:	1bae      	subs	r6, r5, r6
 c018bf4:	45b0      	cmp	r8, r6
 c018bf6:	d135      	bne.n	c018c64 <_dtoa_r+0x6cc>
 c018bf8:	f002 fe90 	bl	c01b91c <__adddf3>
 c018bfc:	4606      	mov	r6, r0
 c018bfe:	460f      	mov	r7, r1
 c018c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c018c04:	f003 fad0 	bl	c01c1a8 <__aeabi_dcmpgt>
 c018c08:	b9c8      	cbnz	r0, c018c3e <_dtoa_r+0x6a6>
 c018c0a:	4630      	mov	r0, r6
 c018c0c:	4639      	mov	r1, r7
 c018c0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c018c12:	f003 faa1 	bl	c01c158 <__aeabi_dcmpeq>
 c018c16:	b110      	cbz	r0, c018c1e <_dtoa_r+0x686>
 c018c18:	f019 0f01 	tst.w	r9, #1
 c018c1c:	d10f      	bne.n	c018c3e <_dtoa_r+0x6a6>
 c018c1e:	4659      	mov	r1, fp
 c018c20:	4620      	mov	r0, r4
 c018c22:	f000 fb85 	bl	c019330 <_Bfree>
 c018c26:	2300      	movs	r3, #0
 c018c28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 c018c2a:	702b      	strb	r3, [r5, #0]
 c018c2c:	f10a 0301 	add.w	r3, sl, #1
 c018c30:	6013      	str	r3, [r2, #0]
 c018c32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 c018c34:	2b00      	cmp	r3, #0
 c018c36:	f43f acf7 	beq.w	c018628 <_dtoa_r+0x90>
 c018c3a:	601d      	str	r5, [r3, #0]
 c018c3c:	e4f4      	b.n	c018628 <_dtoa_r+0x90>
 c018c3e:	4657      	mov	r7, sl
 c018c40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 c018c44:	1e6b      	subs	r3, r5, #1
 c018c46:	2a39      	cmp	r2, #57	; 0x39
 c018c48:	d106      	bne.n	c018c58 <_dtoa_r+0x6c0>
 c018c4a:	9a06      	ldr	r2, [sp, #24]
 c018c4c:	429a      	cmp	r2, r3
 c018c4e:	d107      	bne.n	c018c60 <_dtoa_r+0x6c8>
 c018c50:	2330      	movs	r3, #48	; 0x30
 c018c52:	3701      	adds	r7, #1
 c018c54:	7013      	strb	r3, [r2, #0]
 c018c56:	4613      	mov	r3, r2
 c018c58:	781a      	ldrb	r2, [r3, #0]
 c018c5a:	3201      	adds	r2, #1
 c018c5c:	701a      	strb	r2, [r3, #0]
 c018c5e:	e790      	b.n	c018b82 <_dtoa_r+0x5ea>
 c018c60:	461d      	mov	r5, r3
 c018c62:	e7ed      	b.n	c018c40 <_dtoa_r+0x6a8>
 c018c64:	2200      	movs	r2, #0
 c018c66:	4b99      	ldr	r3, [pc, #612]	; (c018ecc <_dtoa_r+0x934>)
 c018c68:	f003 f80e 	bl	c01bc88 <__aeabi_dmul>
 c018c6c:	2200      	movs	r2, #0
 c018c6e:	2300      	movs	r3, #0
 c018c70:	4606      	mov	r6, r0
 c018c72:	460f      	mov	r7, r1
 c018c74:	f003 fa70 	bl	c01c158 <__aeabi_dcmpeq>
 c018c78:	2800      	cmp	r0, #0
 c018c7a:	d09e      	beq.n	c018bba <_dtoa_r+0x622>
 c018c7c:	e7cf      	b.n	c018c1e <_dtoa_r+0x686>
 c018c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c018c80:	2a00      	cmp	r2, #0
 c018c82:	f000 8088 	beq.w	c018d96 <_dtoa_r+0x7fe>
 c018c86:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 c018c88:	2a01      	cmp	r2, #1
 c018c8a:	dc6d      	bgt.n	c018d68 <_dtoa_r+0x7d0>
 c018c8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 c018c8e:	2a00      	cmp	r2, #0
 c018c90:	d066      	beq.n	c018d60 <_dtoa_r+0x7c8>
 c018c92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 c018c96:	9e08      	ldr	r6, [sp, #32]
 c018c98:	464d      	mov	r5, r9
 c018c9a:	9a07      	ldr	r2, [sp, #28]
 c018c9c:	2101      	movs	r1, #1
 c018c9e:	4620      	mov	r0, r4
 c018ca0:	4499      	add	r9, r3
 c018ca2:	441a      	add	r2, r3
 c018ca4:	9207      	str	r2, [sp, #28]
 c018ca6:	f000 fbe5 	bl	c019474 <__i2b>
 c018caa:	4607      	mov	r7, r0
 c018cac:	2d00      	cmp	r5, #0
 c018cae:	dd0b      	ble.n	c018cc8 <_dtoa_r+0x730>
 c018cb0:	9b07      	ldr	r3, [sp, #28]
 c018cb2:	2b00      	cmp	r3, #0
 c018cb4:	dd08      	ble.n	c018cc8 <_dtoa_r+0x730>
 c018cb6:	42ab      	cmp	r3, r5
 c018cb8:	9a07      	ldr	r2, [sp, #28]
 c018cba:	bfa8      	it	ge
 c018cbc:	462b      	movge	r3, r5
 c018cbe:	eba9 0903 	sub.w	r9, r9, r3
 c018cc2:	1aed      	subs	r5, r5, r3
 c018cc4:	1ad3      	subs	r3, r2, r3
 c018cc6:	9307      	str	r3, [sp, #28]
 c018cc8:	9b08      	ldr	r3, [sp, #32]
 c018cca:	b1eb      	cbz	r3, c018d08 <_dtoa_r+0x770>
 c018ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c018cce:	2b00      	cmp	r3, #0
 c018cd0:	d065      	beq.n	c018d9e <_dtoa_r+0x806>
 c018cd2:	b18e      	cbz	r6, c018cf8 <_dtoa_r+0x760>
 c018cd4:	4639      	mov	r1, r7
 c018cd6:	4632      	mov	r2, r6
 c018cd8:	4620      	mov	r0, r4
 c018cda:	f000 fc69 	bl	c0195b0 <__pow5mult>
 c018cde:	465a      	mov	r2, fp
 c018ce0:	4601      	mov	r1, r0
 c018ce2:	4607      	mov	r7, r0
 c018ce4:	4620      	mov	r0, r4
 c018ce6:	f000 fbce 	bl	c019486 <__multiply>
 c018cea:	4659      	mov	r1, fp
 c018cec:	900a      	str	r0, [sp, #40]	; 0x28
 c018cee:	4620      	mov	r0, r4
 c018cf0:	f000 fb1e 	bl	c019330 <_Bfree>
 c018cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c018cf6:	469b      	mov	fp, r3
 c018cf8:	9b08      	ldr	r3, [sp, #32]
 c018cfa:	1b9a      	subs	r2, r3, r6
 c018cfc:	d004      	beq.n	c018d08 <_dtoa_r+0x770>
 c018cfe:	4659      	mov	r1, fp
 c018d00:	4620      	mov	r0, r4
 c018d02:	f000 fc55 	bl	c0195b0 <__pow5mult>
 c018d06:	4683      	mov	fp, r0
 c018d08:	2101      	movs	r1, #1
 c018d0a:	4620      	mov	r0, r4
 c018d0c:	f000 fbb2 	bl	c019474 <__i2b>
 c018d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 c018d12:	4606      	mov	r6, r0
 c018d14:	2b00      	cmp	r3, #0
 c018d16:	f000 81c6 	beq.w	c0190a6 <_dtoa_r+0xb0e>
 c018d1a:	461a      	mov	r2, r3
 c018d1c:	4601      	mov	r1, r0
 c018d1e:	4620      	mov	r0, r4
 c018d20:	f000 fc46 	bl	c0195b0 <__pow5mult>
 c018d24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 c018d26:	4606      	mov	r6, r0
 c018d28:	2b01      	cmp	r3, #1
 c018d2a:	dc3e      	bgt.n	c018daa <_dtoa_r+0x812>
 c018d2c:	9b02      	ldr	r3, [sp, #8]
 c018d2e:	2b00      	cmp	r3, #0
 c018d30:	d137      	bne.n	c018da2 <_dtoa_r+0x80a>
 c018d32:	9b03      	ldr	r3, [sp, #12]
 c018d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 c018d38:	2b00      	cmp	r3, #0
 c018d3a:	d134      	bne.n	c018da6 <_dtoa_r+0x80e>
 c018d3c:	9b03      	ldr	r3, [sp, #12]
 c018d3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 c018d42:	0d1b      	lsrs	r3, r3, #20
 c018d44:	051b      	lsls	r3, r3, #20
 c018d46:	b12b      	cbz	r3, c018d54 <_dtoa_r+0x7bc>
 c018d48:	9b07      	ldr	r3, [sp, #28]
 c018d4a:	f109 0901 	add.w	r9, r9, #1
 c018d4e:	3301      	adds	r3, #1
 c018d50:	9307      	str	r3, [sp, #28]
 c018d52:	2301      	movs	r3, #1
 c018d54:	9308      	str	r3, [sp, #32]
 c018d56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 c018d58:	2b00      	cmp	r3, #0
 c018d5a:	d128      	bne.n	c018dae <_dtoa_r+0x816>
 c018d5c:	2001      	movs	r0, #1
 c018d5e:	e02e      	b.n	c018dbe <_dtoa_r+0x826>
 c018d60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 c018d62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 c018d66:	e796      	b.n	c018c96 <_dtoa_r+0x6fe>
 c018d68:	9b08      	ldr	r3, [sp, #32]
 c018d6a:	f108 36ff 	add.w	r6, r8, #4294967295
 c018d6e:	42b3      	cmp	r3, r6
 c018d70:	bfb7      	itett	lt
 c018d72:	9b08      	ldrlt	r3, [sp, #32]
 c018d74:	1b9e      	subge	r6, r3, r6
 c018d76:	9608      	strlt	r6, [sp, #32]
 c018d78:	1af2      	sublt	r2, r6, r3
 c018d7a:	bfbf      	itttt	lt
 c018d7c:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 c018d7e:	2600      	movlt	r6, #0
 c018d80:	189b      	addlt	r3, r3, r2
 c018d82:	930c      	strlt	r3, [sp, #48]	; 0x30
 c018d84:	f1b8 0f00 	cmp.w	r8, #0
 c018d88:	bfb9      	ittee	lt
 c018d8a:	eba9 0508 	sublt.w	r5, r9, r8
 c018d8e:	2300      	movlt	r3, #0
 c018d90:	464d      	movge	r5, r9
 c018d92:	4643      	movge	r3, r8
 c018d94:	e781      	b.n	c018c9a <_dtoa_r+0x702>
 c018d96:	9e08      	ldr	r6, [sp, #32]
 c018d98:	464d      	mov	r5, r9
 c018d9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 c018d9c:	e786      	b.n	c018cac <_dtoa_r+0x714>
 c018d9e:	9a08      	ldr	r2, [sp, #32]
 c018da0:	e7ad      	b.n	c018cfe <_dtoa_r+0x766>
 c018da2:	2300      	movs	r3, #0
 c018da4:	e7d6      	b.n	c018d54 <_dtoa_r+0x7bc>
 c018da6:	9b02      	ldr	r3, [sp, #8]
 c018da8:	e7d4      	b.n	c018d54 <_dtoa_r+0x7bc>
 c018daa:	2300      	movs	r3, #0
 c018dac:	9308      	str	r3, [sp, #32]
 c018dae:	6933      	ldr	r3, [r6, #16]
 c018db0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 c018db4:	6918      	ldr	r0, [r3, #16]
 c018db6:	f000 fb0f 	bl	c0193d8 <__hi0bits>
 c018dba:	f1c0 0020 	rsb	r0, r0, #32
 c018dbe:	9b07      	ldr	r3, [sp, #28]
 c018dc0:	4418      	add	r0, r3
 c018dc2:	f010 001f 	ands.w	r0, r0, #31
 c018dc6:	d047      	beq.n	c018e58 <_dtoa_r+0x8c0>
 c018dc8:	f1c0 0320 	rsb	r3, r0, #32
 c018dcc:	2b04      	cmp	r3, #4
 c018dce:	dd3b      	ble.n	c018e48 <_dtoa_r+0x8b0>
 c018dd0:	f1c0 001c 	rsb	r0, r0, #28
 c018dd4:	9b07      	ldr	r3, [sp, #28]
 c018dd6:	4481      	add	r9, r0
 c018dd8:	4405      	add	r5, r0
 c018dda:	4403      	add	r3, r0
 c018ddc:	9307      	str	r3, [sp, #28]
 c018dde:	f1b9 0f00 	cmp.w	r9, #0
 c018de2:	dd05      	ble.n	c018df0 <_dtoa_r+0x858>
 c018de4:	4659      	mov	r1, fp
 c018de6:	464a      	mov	r2, r9
 c018de8:	4620      	mov	r0, r4
 c018dea:	f000 fc2f 	bl	c01964c <__lshift>
 c018dee:	4683      	mov	fp, r0
 c018df0:	9b07      	ldr	r3, [sp, #28]
 c018df2:	2b00      	cmp	r3, #0
 c018df4:	dd05      	ble.n	c018e02 <_dtoa_r+0x86a>
 c018df6:	4631      	mov	r1, r6
 c018df8:	461a      	mov	r2, r3
 c018dfa:	4620      	mov	r0, r4
 c018dfc:	f000 fc26 	bl	c01964c <__lshift>
 c018e00:	4606      	mov	r6, r0
 c018e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c018e04:	b353      	cbz	r3, c018e5c <_dtoa_r+0x8c4>
 c018e06:	4631      	mov	r1, r6
 c018e08:	4658      	mov	r0, fp
 c018e0a:	f000 fc73 	bl	c0196f4 <__mcmp>
 c018e0e:	2800      	cmp	r0, #0
 c018e10:	da24      	bge.n	c018e5c <_dtoa_r+0x8c4>
 c018e12:	2300      	movs	r3, #0
 c018e14:	4659      	mov	r1, fp
 c018e16:	220a      	movs	r2, #10
 c018e18:	4620      	mov	r0, r4
 c018e1a:	f000 faa0 	bl	c01935e <__multadd>
 c018e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c018e20:	f10a 3aff 	add.w	sl, sl, #4294967295
 c018e24:	4683      	mov	fp, r0
 c018e26:	2b00      	cmp	r3, #0
 c018e28:	f000 8144 	beq.w	c0190b4 <_dtoa_r+0xb1c>
 c018e2c:	2300      	movs	r3, #0
 c018e2e:	4639      	mov	r1, r7
 c018e30:	220a      	movs	r2, #10
 c018e32:	4620      	mov	r0, r4
 c018e34:	f000 fa93 	bl	c01935e <__multadd>
 c018e38:	9b04      	ldr	r3, [sp, #16]
 c018e3a:	4607      	mov	r7, r0
 c018e3c:	2b00      	cmp	r3, #0
 c018e3e:	dc4d      	bgt.n	c018edc <_dtoa_r+0x944>
 c018e40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 c018e42:	2b02      	cmp	r3, #2
 c018e44:	dd4a      	ble.n	c018edc <_dtoa_r+0x944>
 c018e46:	e011      	b.n	c018e6c <_dtoa_r+0x8d4>
 c018e48:	d0c9      	beq.n	c018dde <_dtoa_r+0x846>
 c018e4a:	331c      	adds	r3, #28
 c018e4c:	9a07      	ldr	r2, [sp, #28]
 c018e4e:	441a      	add	r2, r3
 c018e50:	4499      	add	r9, r3
 c018e52:	441d      	add	r5, r3
 c018e54:	4613      	mov	r3, r2
 c018e56:	e7c1      	b.n	c018ddc <_dtoa_r+0x844>
 c018e58:	4603      	mov	r3, r0
 c018e5a:	e7f6      	b.n	c018e4a <_dtoa_r+0x8b2>
 c018e5c:	f1b8 0f00 	cmp.w	r8, #0
 c018e60:	dc36      	bgt.n	c018ed0 <_dtoa_r+0x938>
 c018e62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 c018e64:	2b02      	cmp	r3, #2
 c018e66:	dd33      	ble.n	c018ed0 <_dtoa_r+0x938>
 c018e68:	f8cd 8010 	str.w	r8, [sp, #16]
 c018e6c:	9b04      	ldr	r3, [sp, #16]
 c018e6e:	b963      	cbnz	r3, c018e8a <_dtoa_r+0x8f2>
 c018e70:	4631      	mov	r1, r6
 c018e72:	2205      	movs	r2, #5
 c018e74:	4620      	mov	r0, r4
 c018e76:	f000 fa72 	bl	c01935e <__multadd>
 c018e7a:	4601      	mov	r1, r0
 c018e7c:	4606      	mov	r6, r0
 c018e7e:	4658      	mov	r0, fp
 c018e80:	f000 fc38 	bl	c0196f4 <__mcmp>
 c018e84:	2800      	cmp	r0, #0
 c018e86:	f73f add3 	bgt.w	c018a30 <_dtoa_r+0x498>
 c018e8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 c018e8c:	9d06      	ldr	r5, [sp, #24]
 c018e8e:	ea6f 0a03 	mvn.w	sl, r3
 c018e92:	f04f 0900 	mov.w	r9, #0
 c018e96:	4631      	mov	r1, r6
 c018e98:	4620      	mov	r0, r4
 c018e9a:	f000 fa49 	bl	c019330 <_Bfree>
 c018e9e:	2f00      	cmp	r7, #0
 c018ea0:	f43f aebd 	beq.w	c018c1e <_dtoa_r+0x686>
 c018ea4:	f1b9 0f00 	cmp.w	r9, #0
 c018ea8:	d005      	beq.n	c018eb6 <_dtoa_r+0x91e>
 c018eaa:	45b9      	cmp	r9, r7
 c018eac:	d003      	beq.n	c018eb6 <_dtoa_r+0x91e>
 c018eae:	4649      	mov	r1, r9
 c018eb0:	4620      	mov	r0, r4
 c018eb2:	f000 fa3d 	bl	c019330 <_Bfree>
 c018eb6:	4639      	mov	r1, r7
 c018eb8:	4620      	mov	r0, r4
 c018eba:	f000 fa39 	bl	c019330 <_Bfree>
 c018ebe:	e6ae      	b.n	c018c1e <_dtoa_r+0x686>
 c018ec0:	2600      	movs	r6, #0
 c018ec2:	4637      	mov	r7, r6
 c018ec4:	e7e1      	b.n	c018e8a <_dtoa_r+0x8f2>
 c018ec6:	46ba      	mov	sl, r7
 c018ec8:	4637      	mov	r7, r6
 c018eca:	e5b1      	b.n	c018a30 <_dtoa_r+0x498>
 c018ecc:	40240000 	.word	0x40240000
 c018ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c018ed2:	f8cd 8010 	str.w	r8, [sp, #16]
 c018ed6:	2b00      	cmp	r3, #0
 c018ed8:	f000 80f3 	beq.w	c0190c2 <_dtoa_r+0xb2a>
 c018edc:	2d00      	cmp	r5, #0
 c018ede:	dd05      	ble.n	c018eec <_dtoa_r+0x954>
 c018ee0:	4639      	mov	r1, r7
 c018ee2:	462a      	mov	r2, r5
 c018ee4:	4620      	mov	r0, r4
 c018ee6:	f000 fbb1 	bl	c01964c <__lshift>
 c018eea:	4607      	mov	r7, r0
 c018eec:	9b08      	ldr	r3, [sp, #32]
 c018eee:	2b00      	cmp	r3, #0
 c018ef0:	d04c      	beq.n	c018f8c <_dtoa_r+0x9f4>
 c018ef2:	6879      	ldr	r1, [r7, #4]
 c018ef4:	4620      	mov	r0, r4
 c018ef6:	f000 f9e7 	bl	c0192c8 <_Balloc>
 c018efa:	693a      	ldr	r2, [r7, #16]
 c018efc:	4605      	mov	r5, r0
 c018efe:	f107 010c 	add.w	r1, r7, #12
 c018f02:	3202      	adds	r2, #2
 c018f04:	300c      	adds	r0, #12
 c018f06:	0092      	lsls	r2, r2, #2
 c018f08:	f7fe fd39 	bl	c01797e <memcpy>
 c018f0c:	2201      	movs	r2, #1
 c018f0e:	4629      	mov	r1, r5
 c018f10:	4620      	mov	r0, r4
 c018f12:	f000 fb9b 	bl	c01964c <__lshift>
 c018f16:	9b06      	ldr	r3, [sp, #24]
 c018f18:	46b9      	mov	r9, r7
 c018f1a:	4607      	mov	r7, r0
 c018f1c:	9307      	str	r3, [sp, #28]
 c018f1e:	9b02      	ldr	r3, [sp, #8]
 c018f20:	f003 0301 	and.w	r3, r3, #1
 c018f24:	9308      	str	r3, [sp, #32]
 c018f26:	4631      	mov	r1, r6
 c018f28:	4658      	mov	r0, fp
 c018f2a:	f7ff faa5 	bl	c018478 <quorem>
 c018f2e:	4649      	mov	r1, r9
 c018f30:	4605      	mov	r5, r0
 c018f32:	f100 0830 	add.w	r8, r0, #48	; 0x30
 c018f36:	4658      	mov	r0, fp
 c018f38:	f000 fbdc 	bl	c0196f4 <__mcmp>
 c018f3c:	463a      	mov	r2, r7
 c018f3e:	9002      	str	r0, [sp, #8]
 c018f40:	4631      	mov	r1, r6
 c018f42:	4620      	mov	r0, r4
 c018f44:	f000 fbf0 	bl	c019728 <__mdiff>
 c018f48:	68c3      	ldr	r3, [r0, #12]
 c018f4a:	4602      	mov	r2, r0
 c018f4c:	bb03      	cbnz	r3, c018f90 <_dtoa_r+0x9f8>
 c018f4e:	4601      	mov	r1, r0
 c018f50:	9009      	str	r0, [sp, #36]	; 0x24
 c018f52:	4658      	mov	r0, fp
 c018f54:	f000 fbce 	bl	c0196f4 <__mcmp>
 c018f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c018f5a:	4603      	mov	r3, r0
 c018f5c:	4611      	mov	r1, r2
 c018f5e:	4620      	mov	r0, r4
 c018f60:	9309      	str	r3, [sp, #36]	; 0x24
 c018f62:	f000 f9e5 	bl	c019330 <_Bfree>
 c018f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c018f68:	b9a3      	cbnz	r3, c018f94 <_dtoa_r+0x9fc>
 c018f6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 c018f6c:	b992      	cbnz	r2, c018f94 <_dtoa_r+0x9fc>
 c018f6e:	9a08      	ldr	r2, [sp, #32]
 c018f70:	b982      	cbnz	r2, c018f94 <_dtoa_r+0x9fc>
 c018f72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 c018f76:	d029      	beq.n	c018fcc <_dtoa_r+0xa34>
 c018f78:	9b02      	ldr	r3, [sp, #8]
 c018f7a:	2b00      	cmp	r3, #0
 c018f7c:	dd01      	ble.n	c018f82 <_dtoa_r+0x9ea>
 c018f7e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 c018f82:	9b07      	ldr	r3, [sp, #28]
 c018f84:	1c5d      	adds	r5, r3, #1
 c018f86:	f883 8000 	strb.w	r8, [r3]
 c018f8a:	e784      	b.n	c018e96 <_dtoa_r+0x8fe>
 c018f8c:	4638      	mov	r0, r7
 c018f8e:	e7c2      	b.n	c018f16 <_dtoa_r+0x97e>
 c018f90:	2301      	movs	r3, #1
 c018f92:	e7e3      	b.n	c018f5c <_dtoa_r+0x9c4>
 c018f94:	9a02      	ldr	r2, [sp, #8]
 c018f96:	2a00      	cmp	r2, #0
 c018f98:	db04      	blt.n	c018fa4 <_dtoa_r+0xa0c>
 c018f9a:	d123      	bne.n	c018fe4 <_dtoa_r+0xa4c>
 c018f9c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 c018f9e:	bb0a      	cbnz	r2, c018fe4 <_dtoa_r+0xa4c>
 c018fa0:	9a08      	ldr	r2, [sp, #32]
 c018fa2:	b9fa      	cbnz	r2, c018fe4 <_dtoa_r+0xa4c>
 c018fa4:	2b00      	cmp	r3, #0
 c018fa6:	ddec      	ble.n	c018f82 <_dtoa_r+0x9ea>
 c018fa8:	4659      	mov	r1, fp
 c018faa:	2201      	movs	r2, #1
 c018fac:	4620      	mov	r0, r4
 c018fae:	f000 fb4d 	bl	c01964c <__lshift>
 c018fb2:	4631      	mov	r1, r6
 c018fb4:	4683      	mov	fp, r0
 c018fb6:	f000 fb9d 	bl	c0196f4 <__mcmp>
 c018fba:	2800      	cmp	r0, #0
 c018fbc:	dc03      	bgt.n	c018fc6 <_dtoa_r+0xa2e>
 c018fbe:	d1e0      	bne.n	c018f82 <_dtoa_r+0x9ea>
 c018fc0:	f018 0f01 	tst.w	r8, #1
 c018fc4:	d0dd      	beq.n	c018f82 <_dtoa_r+0x9ea>
 c018fc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 c018fca:	d1d8      	bne.n	c018f7e <_dtoa_r+0x9e6>
 c018fcc:	9b07      	ldr	r3, [sp, #28]
 c018fce:	9a07      	ldr	r2, [sp, #28]
 c018fd0:	1c5d      	adds	r5, r3, #1
 c018fd2:	2339      	movs	r3, #57	; 0x39
 c018fd4:	7013      	strb	r3, [r2, #0]
 c018fd6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 c018fda:	1e6a      	subs	r2, r5, #1
 c018fdc:	2b39      	cmp	r3, #57	; 0x39
 c018fde:	d04d      	beq.n	c01907c <_dtoa_r+0xae4>
 c018fe0:	3301      	adds	r3, #1
 c018fe2:	e052      	b.n	c01908a <_dtoa_r+0xaf2>
 c018fe4:	9a07      	ldr	r2, [sp, #28]
 c018fe6:	2b00      	cmp	r3, #0
 c018fe8:	f102 0501 	add.w	r5, r2, #1
 c018fec:	dd06      	ble.n	c018ffc <_dtoa_r+0xa64>
 c018fee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 c018ff2:	d0eb      	beq.n	c018fcc <_dtoa_r+0xa34>
 c018ff4:	f108 0801 	add.w	r8, r8, #1
 c018ff8:	9b07      	ldr	r3, [sp, #28]
 c018ffa:	e7c4      	b.n	c018f86 <_dtoa_r+0x9ee>
 c018ffc:	9b06      	ldr	r3, [sp, #24]
 c018ffe:	9a04      	ldr	r2, [sp, #16]
 c019000:	1aeb      	subs	r3, r5, r3
 c019002:	f805 8c01 	strb.w	r8, [r5, #-1]
 c019006:	4293      	cmp	r3, r2
 c019008:	d021      	beq.n	c01904e <_dtoa_r+0xab6>
 c01900a:	4659      	mov	r1, fp
 c01900c:	2300      	movs	r3, #0
 c01900e:	220a      	movs	r2, #10
 c019010:	4620      	mov	r0, r4
 c019012:	f000 f9a4 	bl	c01935e <__multadd>
 c019016:	45b9      	cmp	r9, r7
 c019018:	4683      	mov	fp, r0
 c01901a:	f04f 0300 	mov.w	r3, #0
 c01901e:	f04f 020a 	mov.w	r2, #10
 c019022:	4649      	mov	r1, r9
 c019024:	4620      	mov	r0, r4
 c019026:	d105      	bne.n	c019034 <_dtoa_r+0xa9c>
 c019028:	f000 f999 	bl	c01935e <__multadd>
 c01902c:	4681      	mov	r9, r0
 c01902e:	4607      	mov	r7, r0
 c019030:	9507      	str	r5, [sp, #28]
 c019032:	e778      	b.n	c018f26 <_dtoa_r+0x98e>
 c019034:	f000 f993 	bl	c01935e <__multadd>
 c019038:	4639      	mov	r1, r7
 c01903a:	4681      	mov	r9, r0
 c01903c:	2300      	movs	r3, #0
 c01903e:	220a      	movs	r2, #10
 c019040:	4620      	mov	r0, r4
 c019042:	f000 f98c 	bl	c01935e <__multadd>
 c019046:	4607      	mov	r7, r0
 c019048:	e7f2      	b.n	c019030 <_dtoa_r+0xa98>
 c01904a:	f04f 0900 	mov.w	r9, #0
 c01904e:	4659      	mov	r1, fp
 c019050:	2201      	movs	r2, #1
 c019052:	4620      	mov	r0, r4
 c019054:	f000 fafa 	bl	c01964c <__lshift>
 c019058:	4631      	mov	r1, r6
 c01905a:	4683      	mov	fp, r0
 c01905c:	f000 fb4a 	bl	c0196f4 <__mcmp>
 c019060:	2800      	cmp	r0, #0
 c019062:	dcb8      	bgt.n	c018fd6 <_dtoa_r+0xa3e>
 c019064:	d102      	bne.n	c01906c <_dtoa_r+0xad4>
 c019066:	f018 0f01 	tst.w	r8, #1
 c01906a:	d1b4      	bne.n	c018fd6 <_dtoa_r+0xa3e>
 c01906c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 c019070:	1e6a      	subs	r2, r5, #1
 c019072:	2b30      	cmp	r3, #48	; 0x30
 c019074:	f47f af0f 	bne.w	c018e96 <_dtoa_r+0x8fe>
 c019078:	4615      	mov	r5, r2
 c01907a:	e7f7      	b.n	c01906c <_dtoa_r+0xad4>
 c01907c:	9b06      	ldr	r3, [sp, #24]
 c01907e:	4293      	cmp	r3, r2
 c019080:	d105      	bne.n	c01908e <_dtoa_r+0xaf6>
 c019082:	f10a 0a01 	add.w	sl, sl, #1
 c019086:	2331      	movs	r3, #49	; 0x31
 c019088:	9a06      	ldr	r2, [sp, #24]
 c01908a:	7013      	strb	r3, [r2, #0]
 c01908c:	e703      	b.n	c018e96 <_dtoa_r+0x8fe>
 c01908e:	4615      	mov	r5, r2
 c019090:	e7a1      	b.n	c018fd6 <_dtoa_r+0xa3e>
 c019092:	4b17      	ldr	r3, [pc, #92]	; (c0190f0 <_dtoa_r+0xb58>)
 c019094:	f7ff bae5 	b.w	c018662 <_dtoa_r+0xca>
 c019098:	9b22      	ldr	r3, [sp, #136]	; 0x88
 c01909a:	2b00      	cmp	r3, #0
 c01909c:	f47f aabf 	bne.w	c01861e <_dtoa_r+0x86>
 c0190a0:	4b14      	ldr	r3, [pc, #80]	; (c0190f4 <_dtoa_r+0xb5c>)
 c0190a2:	f7ff bade 	b.w	c018662 <_dtoa_r+0xca>
 c0190a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 c0190a8:	2b01      	cmp	r3, #1
 c0190aa:	f77f ae3f 	ble.w	c018d2c <_dtoa_r+0x794>
 c0190ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 c0190b0:	9308      	str	r3, [sp, #32]
 c0190b2:	e653      	b.n	c018d5c <_dtoa_r+0x7c4>
 c0190b4:	9b04      	ldr	r3, [sp, #16]
 c0190b6:	2b00      	cmp	r3, #0
 c0190b8:	dc03      	bgt.n	c0190c2 <_dtoa_r+0xb2a>
 c0190ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 c0190bc:	2b02      	cmp	r3, #2
 c0190be:	f73f aed5 	bgt.w	c018e6c <_dtoa_r+0x8d4>
 c0190c2:	9d06      	ldr	r5, [sp, #24]
 c0190c4:	4631      	mov	r1, r6
 c0190c6:	4658      	mov	r0, fp
 c0190c8:	f7ff f9d6 	bl	c018478 <quorem>
 c0190cc:	9b06      	ldr	r3, [sp, #24]
 c0190ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 c0190d2:	9a04      	ldr	r2, [sp, #16]
 c0190d4:	f805 8b01 	strb.w	r8, [r5], #1
 c0190d8:	1aeb      	subs	r3, r5, r3
 c0190da:	429a      	cmp	r2, r3
 c0190dc:	ddb5      	ble.n	c01904a <_dtoa_r+0xab2>
 c0190de:	4659      	mov	r1, fp
 c0190e0:	2300      	movs	r3, #0
 c0190e2:	220a      	movs	r2, #10
 c0190e4:	4620      	mov	r0, r4
 c0190e6:	f000 f93a 	bl	c01935e <__multadd>
 c0190ea:	4683      	mov	fp, r0
 c0190ec:	e7ea      	b.n	c0190c4 <_dtoa_r+0xb2c>
 c0190ee:	bf00      	nop
 c0190f0:	0c01a050 	.word	0x0c01a050
 c0190f4:	0c01a074 	.word	0x0c01a074

0c0190f8 <std>:
 c0190f8:	2300      	movs	r3, #0
 c0190fa:	b510      	push	{r4, lr}
 c0190fc:	4604      	mov	r4, r0
 c0190fe:	6083      	str	r3, [r0, #8]
 c019100:	8181      	strh	r1, [r0, #12]
 c019102:	4619      	mov	r1, r3
 c019104:	6643      	str	r3, [r0, #100]	; 0x64
 c019106:	81c2      	strh	r2, [r0, #14]
 c019108:	2208      	movs	r2, #8
 c01910a:	6183      	str	r3, [r0, #24]
 c01910c:	e9c0 3300 	strd	r3, r3, [r0]
 c019110:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c019114:	305c      	adds	r0, #92	; 0x5c
 c019116:	f7fe fc56 	bl	c0179c6 <memset>
 c01911a:	4b05      	ldr	r3, [pc, #20]	; (c019130 <std+0x38>)
 c01911c:	6224      	str	r4, [r4, #32]
 c01911e:	6263      	str	r3, [r4, #36]	; 0x24
 c019120:	4b04      	ldr	r3, [pc, #16]	; (c019134 <std+0x3c>)
 c019122:	62a3      	str	r3, [r4, #40]	; 0x28
 c019124:	4b04      	ldr	r3, [pc, #16]	; (c019138 <std+0x40>)
 c019126:	62e3      	str	r3, [r4, #44]	; 0x2c
 c019128:	4b04      	ldr	r3, [pc, #16]	; (c01913c <std+0x44>)
 c01912a:	6323      	str	r3, [r4, #48]	; 0x30
 c01912c:	bd10      	pop	{r4, pc}
 c01912e:	bf00      	nop
 c019130:	0c019b01 	.word	0x0c019b01
 c019134:	0c019b23 	.word	0x0c019b23
 c019138:	0c019b5b 	.word	0x0c019b5b
 c01913c:	0c019b7f 	.word	0x0c019b7f

0c019140 <_cleanup_r>:
 c019140:	4901      	ldr	r1, [pc, #4]	; (c019148 <_cleanup_r+0x8>)
 c019142:	f000 b885 	b.w	c019250 <_fwalk_reent>
 c019146:	bf00      	nop
 c019148:	0c019e55 	.word	0x0c019e55

0c01914c <__sfmoreglue>:
 c01914c:	b570      	push	{r4, r5, r6, lr}
 c01914e:	1e4a      	subs	r2, r1, #1
 c019150:	2568      	movs	r5, #104	; 0x68
 c019152:	460e      	mov	r6, r1
 c019154:	4355      	muls	r5, r2
 c019156:	f105 0174 	add.w	r1, r5, #116	; 0x74
 c01915a:	f7fe fc99 	bl	c017a90 <_malloc_r>
 c01915e:	4604      	mov	r4, r0
 c019160:	b140      	cbz	r0, c019174 <__sfmoreglue+0x28>
 c019162:	2100      	movs	r1, #0
 c019164:	f105 0268 	add.w	r2, r5, #104	; 0x68
 c019168:	e9c0 1600 	strd	r1, r6, [r0]
 c01916c:	300c      	adds	r0, #12
 c01916e:	60a0      	str	r0, [r4, #8]
 c019170:	f7fe fc29 	bl	c0179c6 <memset>
 c019174:	4620      	mov	r0, r4
 c019176:	bd70      	pop	{r4, r5, r6, pc}

0c019178 <__sinit>:
 c019178:	6983      	ldr	r3, [r0, #24]
 c01917a:	b510      	push	{r4, lr}
 c01917c:	4604      	mov	r4, r0
 c01917e:	bb33      	cbnz	r3, c0191ce <__sinit+0x56>
 c019180:	6503      	str	r3, [r0, #80]	; 0x50
 c019182:	4a13      	ldr	r2, [pc, #76]	; (c0191d0 <__sinit+0x58>)
 c019184:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 c019188:	4b12      	ldr	r3, [pc, #72]	; (c0191d4 <__sinit+0x5c>)
 c01918a:	6282      	str	r2, [r0, #40]	; 0x28
 c01918c:	681b      	ldr	r3, [r3, #0]
 c01918e:	4298      	cmp	r0, r3
 c019190:	bf04      	itt	eq
 c019192:	2301      	moveq	r3, #1
 c019194:	6183      	streq	r3, [r0, #24]
 c019196:	f000 f81f 	bl	c0191d8 <__sfp>
 c01919a:	6060      	str	r0, [r4, #4]
 c01919c:	4620      	mov	r0, r4
 c01919e:	f000 f81b 	bl	c0191d8 <__sfp>
 c0191a2:	60a0      	str	r0, [r4, #8]
 c0191a4:	4620      	mov	r0, r4
 c0191a6:	f000 f817 	bl	c0191d8 <__sfp>
 c0191aa:	2200      	movs	r2, #0
 c0191ac:	60e0      	str	r0, [r4, #12]
 c0191ae:	2104      	movs	r1, #4
 c0191b0:	6860      	ldr	r0, [r4, #4]
 c0191b2:	f7ff ffa1 	bl	c0190f8 <std>
 c0191b6:	2201      	movs	r2, #1
 c0191b8:	2109      	movs	r1, #9
 c0191ba:	68a0      	ldr	r0, [r4, #8]
 c0191bc:	f7ff ff9c 	bl	c0190f8 <std>
 c0191c0:	2202      	movs	r2, #2
 c0191c2:	2112      	movs	r1, #18
 c0191c4:	68e0      	ldr	r0, [r4, #12]
 c0191c6:	f7ff ff97 	bl	c0190f8 <std>
 c0191ca:	2301      	movs	r3, #1
 c0191cc:	61a3      	str	r3, [r4, #24]
 c0191ce:	bd10      	pop	{r4, pc}
 c0191d0:	0c019141 	.word	0x0c019141
 c0191d4:	0c01a03c 	.word	0x0c01a03c

0c0191d8 <__sfp>:
 c0191d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0191da:	4b1b      	ldr	r3, [pc, #108]	; (c019248 <__sfp+0x70>)
 c0191dc:	4607      	mov	r7, r0
 c0191de:	681e      	ldr	r6, [r3, #0]
 c0191e0:	69b3      	ldr	r3, [r6, #24]
 c0191e2:	b913      	cbnz	r3, c0191ea <__sfp+0x12>
 c0191e4:	4630      	mov	r0, r6
 c0191e6:	f7ff ffc7 	bl	c019178 <__sinit>
 c0191ea:	3648      	adds	r6, #72	; 0x48
 c0191ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 c0191f0:	3b01      	subs	r3, #1
 c0191f2:	d503      	bpl.n	c0191fc <__sfp+0x24>
 c0191f4:	6833      	ldr	r3, [r6, #0]
 c0191f6:	b133      	cbz	r3, c019206 <__sfp+0x2e>
 c0191f8:	6836      	ldr	r6, [r6, #0]
 c0191fa:	e7f7      	b.n	c0191ec <__sfp+0x14>
 c0191fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 c019200:	b16d      	cbz	r5, c01921e <__sfp+0x46>
 c019202:	3468      	adds	r4, #104	; 0x68
 c019204:	e7f4      	b.n	c0191f0 <__sfp+0x18>
 c019206:	2104      	movs	r1, #4
 c019208:	4638      	mov	r0, r7
 c01920a:	f7ff ff9f 	bl	c01914c <__sfmoreglue>
 c01920e:	6030      	str	r0, [r6, #0]
 c019210:	2800      	cmp	r0, #0
 c019212:	d1f1      	bne.n	c0191f8 <__sfp+0x20>
 c019214:	230c      	movs	r3, #12
 c019216:	4604      	mov	r4, r0
 c019218:	603b      	str	r3, [r7, #0]
 c01921a:	4620      	mov	r0, r4
 c01921c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c01921e:	4b0b      	ldr	r3, [pc, #44]	; (c01924c <__sfp+0x74>)
 c019220:	2208      	movs	r2, #8
 c019222:	6665      	str	r5, [r4, #100]	; 0x64
 c019224:	4629      	mov	r1, r5
 c019226:	60a5      	str	r5, [r4, #8]
 c019228:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c01922c:	e9c4 5500 	strd	r5, r5, [r4]
 c019230:	e9c4 3503 	strd	r3, r5, [r4, #12]
 c019234:	e9c4 5505 	strd	r5, r5, [r4, #20]
 c019238:	f7fe fbc5 	bl	c0179c6 <memset>
 c01923c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 c019240:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 c019244:	e7e9      	b.n	c01921a <__sfp+0x42>
 c019246:	bf00      	nop
 c019248:	0c01a03c 	.word	0x0c01a03c
 c01924c:	ffff0001 	.word	0xffff0001

0c019250 <_fwalk_reent>:
 c019250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c019254:	4680      	mov	r8, r0
 c019256:	4689      	mov	r9, r1
 c019258:	f100 0448 	add.w	r4, r0, #72	; 0x48
 c01925c:	2600      	movs	r6, #0
 c01925e:	b914      	cbnz	r4, c019266 <_fwalk_reent+0x16>
 c019260:	4630      	mov	r0, r6
 c019262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c019266:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 c01926a:	3f01      	subs	r7, #1
 c01926c:	d501      	bpl.n	c019272 <_fwalk_reent+0x22>
 c01926e:	6824      	ldr	r4, [r4, #0]
 c019270:	e7f5      	b.n	c01925e <_fwalk_reent+0xe>
 c019272:	89ab      	ldrh	r3, [r5, #12]
 c019274:	2b01      	cmp	r3, #1
 c019276:	d907      	bls.n	c019288 <_fwalk_reent+0x38>
 c019278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c01927c:	3301      	adds	r3, #1
 c01927e:	d003      	beq.n	c019288 <_fwalk_reent+0x38>
 c019280:	4629      	mov	r1, r5
 c019282:	4640      	mov	r0, r8
 c019284:	47c8      	blx	r9
 c019286:	4306      	orrs	r6, r0
 c019288:	3568      	adds	r5, #104	; 0x68
 c01928a:	e7ee      	b.n	c01926a <_fwalk_reent+0x1a>

0c01928c <_localeconv_r>:
 c01928c:	4b04      	ldr	r3, [pc, #16]	; (c0192a0 <_localeconv_r+0x14>)
 c01928e:	681b      	ldr	r3, [r3, #0]
 c019290:	6a18      	ldr	r0, [r3, #32]
 c019292:	4b04      	ldr	r3, [pc, #16]	; (c0192a4 <_localeconv_r+0x18>)
 c019294:	2800      	cmp	r0, #0
 c019296:	bf08      	it	eq
 c019298:	4618      	moveq	r0, r3
 c01929a:	30f0      	adds	r0, #240	; 0xf0
 c01929c:	4770      	bx	lr
 c01929e:	bf00      	nop
 c0192a0:	30035b58 	.word	0x30035b58
 c0192a4:	30035bbc 	.word	0x30035bbc

0c0192a8 <memchr>:
 c0192a8:	b2c9      	uxtb	r1, r1
 c0192aa:	4402      	add	r2, r0
 c0192ac:	b510      	push	{r4, lr}
 c0192ae:	4290      	cmp	r0, r2
 c0192b0:	4603      	mov	r3, r0
 c0192b2:	d101      	bne.n	c0192b8 <memchr+0x10>
 c0192b4:	2300      	movs	r3, #0
 c0192b6:	e003      	b.n	c0192c0 <memchr+0x18>
 c0192b8:	781c      	ldrb	r4, [r3, #0]
 c0192ba:	3001      	adds	r0, #1
 c0192bc:	428c      	cmp	r4, r1
 c0192be:	d1f6      	bne.n	c0192ae <memchr+0x6>
 c0192c0:	4618      	mov	r0, r3
 c0192c2:	bd10      	pop	{r4, pc}

0c0192c4 <__malloc_lock>:
 c0192c4:	4770      	bx	lr

0c0192c6 <__malloc_unlock>:
 c0192c6:	4770      	bx	lr

0c0192c8 <_Balloc>:
 c0192c8:	b570      	push	{r4, r5, r6, lr}
 c0192ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 c0192cc:	4604      	mov	r4, r0
 c0192ce:	460e      	mov	r6, r1
 c0192d0:	b93d      	cbnz	r5, c0192e2 <_Balloc+0x1a>
 c0192d2:	2010      	movs	r0, #16
 c0192d4:	f7fe fb34 	bl	c017940 <malloc>
 c0192d8:	6260      	str	r0, [r4, #36]	; 0x24
 c0192da:	6005      	str	r5, [r0, #0]
 c0192dc:	60c5      	str	r5, [r0, #12]
 c0192de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 c0192e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 c0192e4:	68eb      	ldr	r3, [r5, #12]
 c0192e6:	b183      	cbz	r3, c01930a <_Balloc+0x42>
 c0192e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c0192ea:	68db      	ldr	r3, [r3, #12]
 c0192ec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 c0192f0:	b9b8      	cbnz	r0, c019322 <_Balloc+0x5a>
 c0192f2:	2101      	movs	r1, #1
 c0192f4:	4620      	mov	r0, r4
 c0192f6:	fa01 f506 	lsl.w	r5, r1, r6
 c0192fa:	1d6a      	adds	r2, r5, #5
 c0192fc:	0092      	lsls	r2, r2, #2
 c0192fe:	f7fe fb6a 	bl	c0179d6 <_calloc_r>
 c019302:	b160      	cbz	r0, c01931e <_Balloc+0x56>
 c019304:	e9c0 6501 	strd	r6, r5, [r0, #4]
 c019308:	e00e      	b.n	c019328 <_Balloc+0x60>
 c01930a:	2221      	movs	r2, #33	; 0x21
 c01930c:	2104      	movs	r1, #4
 c01930e:	4620      	mov	r0, r4
 c019310:	f7fe fb61 	bl	c0179d6 <_calloc_r>
 c019314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c019316:	60e8      	str	r0, [r5, #12]
 c019318:	68db      	ldr	r3, [r3, #12]
 c01931a:	2b00      	cmp	r3, #0
 c01931c:	d1e4      	bne.n	c0192e8 <_Balloc+0x20>
 c01931e:	2000      	movs	r0, #0
 c019320:	bd70      	pop	{r4, r5, r6, pc}
 c019322:	6802      	ldr	r2, [r0, #0]
 c019324:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 c019328:	2300      	movs	r3, #0
 c01932a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 c01932e:	e7f7      	b.n	c019320 <_Balloc+0x58>

0c019330 <_Bfree>:
 c019330:	b570      	push	{r4, r5, r6, lr}
 c019332:	6a44      	ldr	r4, [r0, #36]	; 0x24
 c019334:	4606      	mov	r6, r0
 c019336:	460d      	mov	r5, r1
 c019338:	b93c      	cbnz	r4, c01934a <_Bfree+0x1a>
 c01933a:	2010      	movs	r0, #16
 c01933c:	f7fe fb00 	bl	c017940 <malloc>
 c019340:	6270      	str	r0, [r6, #36]	; 0x24
 c019342:	6004      	str	r4, [r0, #0]
 c019344:	60c4      	str	r4, [r0, #12]
 c019346:	e9c0 4401 	strd	r4, r4, [r0, #4]
 c01934a:	b13d      	cbz	r5, c01935c <_Bfree+0x2c>
 c01934c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 c01934e:	686a      	ldr	r2, [r5, #4]
 c019350:	68db      	ldr	r3, [r3, #12]
 c019352:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c019356:	6029      	str	r1, [r5, #0]
 c019358:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 c01935c:	bd70      	pop	{r4, r5, r6, pc}

0c01935e <__multadd>:
 c01935e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c019362:	f101 0c14 	add.w	ip, r1, #20
 c019366:	461f      	mov	r7, r3
 c019368:	4606      	mov	r6, r0
 c01936a:	460c      	mov	r4, r1
 c01936c:	690d      	ldr	r5, [r1, #16]
 c01936e:	2300      	movs	r3, #0
 c019370:	f8dc 0000 	ldr.w	r0, [ip]
 c019374:	3301      	adds	r3, #1
 c019376:	b281      	uxth	r1, r0
 c019378:	429d      	cmp	r5, r3
 c01937a:	ea4f 4010 	mov.w	r0, r0, lsr #16
 c01937e:	fb02 7101 	mla	r1, r2, r1, r7
 c019382:	ea4f 4711 	mov.w	r7, r1, lsr #16
 c019386:	b289      	uxth	r1, r1
 c019388:	fb02 7000 	mla	r0, r2, r0, r7
 c01938c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 c019390:	ea4f 4710 	mov.w	r7, r0, lsr #16
 c019394:	f84c 1b04 	str.w	r1, [ip], #4
 c019398:	dcea      	bgt.n	c019370 <__multadd+0x12>
 c01939a:	b1d7      	cbz	r7, c0193d2 <__multadd+0x74>
 c01939c:	68a3      	ldr	r3, [r4, #8]
 c01939e:	42ab      	cmp	r3, r5
 c0193a0:	dc12      	bgt.n	c0193c8 <__multadd+0x6a>
 c0193a2:	6861      	ldr	r1, [r4, #4]
 c0193a4:	4630      	mov	r0, r6
 c0193a6:	3101      	adds	r1, #1
 c0193a8:	f7ff ff8e 	bl	c0192c8 <_Balloc>
 c0193ac:	6922      	ldr	r2, [r4, #16]
 c0193ae:	4680      	mov	r8, r0
 c0193b0:	f104 010c 	add.w	r1, r4, #12
 c0193b4:	3202      	adds	r2, #2
 c0193b6:	300c      	adds	r0, #12
 c0193b8:	0092      	lsls	r2, r2, #2
 c0193ba:	f7fe fae0 	bl	c01797e <memcpy>
 c0193be:	4621      	mov	r1, r4
 c0193c0:	4644      	mov	r4, r8
 c0193c2:	4630      	mov	r0, r6
 c0193c4:	f7ff ffb4 	bl	c019330 <_Bfree>
 c0193c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 c0193cc:	3501      	adds	r5, #1
 c0193ce:	615f      	str	r7, [r3, #20]
 c0193d0:	6125      	str	r5, [r4, #16]
 c0193d2:	4620      	mov	r0, r4
 c0193d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0c0193d8 <__hi0bits>:
 c0193d8:	0c02      	lsrs	r2, r0, #16
 c0193da:	4603      	mov	r3, r0
 c0193dc:	0412      	lsls	r2, r2, #16
 c0193de:	b9b2      	cbnz	r2, c01940e <__hi0bits+0x36>
 c0193e0:	0403      	lsls	r3, r0, #16
 c0193e2:	2010      	movs	r0, #16
 c0193e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 c0193e8:	bf04      	itt	eq
 c0193ea:	021b      	lsleq	r3, r3, #8
 c0193ec:	3008      	addeq	r0, #8
 c0193ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 c0193f2:	bf04      	itt	eq
 c0193f4:	011b      	lsleq	r3, r3, #4
 c0193f6:	3004      	addeq	r0, #4
 c0193f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 c0193fc:	bf04      	itt	eq
 c0193fe:	009b      	lsleq	r3, r3, #2
 c019400:	3002      	addeq	r0, #2
 c019402:	2b00      	cmp	r3, #0
 c019404:	db06      	blt.n	c019414 <__hi0bits+0x3c>
 c019406:	005b      	lsls	r3, r3, #1
 c019408:	d503      	bpl.n	c019412 <__hi0bits+0x3a>
 c01940a:	3001      	adds	r0, #1
 c01940c:	4770      	bx	lr
 c01940e:	2000      	movs	r0, #0
 c019410:	e7e8      	b.n	c0193e4 <__hi0bits+0xc>
 c019412:	2020      	movs	r0, #32
 c019414:	4770      	bx	lr

0c019416 <__lo0bits>:
 c019416:	6803      	ldr	r3, [r0, #0]
 c019418:	4601      	mov	r1, r0
 c01941a:	f013 0207 	ands.w	r2, r3, #7
 c01941e:	d00b      	beq.n	c019438 <__lo0bits+0x22>
 c019420:	07da      	lsls	r2, r3, #31
 c019422:	d423      	bmi.n	c01946c <__lo0bits+0x56>
 c019424:	0798      	lsls	r0, r3, #30
 c019426:	bf47      	ittee	mi
 c019428:	085b      	lsrmi	r3, r3, #1
 c01942a:	2001      	movmi	r0, #1
 c01942c:	089b      	lsrpl	r3, r3, #2
 c01942e:	2002      	movpl	r0, #2
 c019430:	bf4c      	ite	mi
 c019432:	600b      	strmi	r3, [r1, #0]
 c019434:	600b      	strpl	r3, [r1, #0]
 c019436:	4770      	bx	lr
 c019438:	b298      	uxth	r0, r3
 c01943a:	b9a8      	cbnz	r0, c019468 <__lo0bits+0x52>
 c01943c:	0c1b      	lsrs	r3, r3, #16
 c01943e:	2010      	movs	r0, #16
 c019440:	f013 0fff 	tst.w	r3, #255	; 0xff
 c019444:	bf04      	itt	eq
 c019446:	0a1b      	lsreq	r3, r3, #8
 c019448:	3008      	addeq	r0, #8
 c01944a:	071a      	lsls	r2, r3, #28
 c01944c:	bf04      	itt	eq
 c01944e:	091b      	lsreq	r3, r3, #4
 c019450:	3004      	addeq	r0, #4
 c019452:	079a      	lsls	r2, r3, #30
 c019454:	bf04      	itt	eq
 c019456:	089b      	lsreq	r3, r3, #2
 c019458:	3002      	addeq	r0, #2
 c01945a:	07da      	lsls	r2, r3, #31
 c01945c:	d402      	bmi.n	c019464 <__lo0bits+0x4e>
 c01945e:	085b      	lsrs	r3, r3, #1
 c019460:	d006      	beq.n	c019470 <__lo0bits+0x5a>
 c019462:	3001      	adds	r0, #1
 c019464:	600b      	str	r3, [r1, #0]
 c019466:	4770      	bx	lr
 c019468:	4610      	mov	r0, r2
 c01946a:	e7e9      	b.n	c019440 <__lo0bits+0x2a>
 c01946c:	2000      	movs	r0, #0
 c01946e:	4770      	bx	lr
 c019470:	2020      	movs	r0, #32
 c019472:	4770      	bx	lr

0c019474 <__i2b>:
 c019474:	b510      	push	{r4, lr}
 c019476:	460c      	mov	r4, r1
 c019478:	2101      	movs	r1, #1
 c01947a:	f7ff ff25 	bl	c0192c8 <_Balloc>
 c01947e:	2201      	movs	r2, #1
 c019480:	6144      	str	r4, [r0, #20]
 c019482:	6102      	str	r2, [r0, #16]
 c019484:	bd10      	pop	{r4, pc}

0c019486 <__multiply>:
 c019486:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01948a:	4614      	mov	r4, r2
 c01948c:	690a      	ldr	r2, [r1, #16]
 c01948e:	4688      	mov	r8, r1
 c019490:	6923      	ldr	r3, [r4, #16]
 c019492:	429a      	cmp	r2, r3
 c019494:	bfbe      	ittt	lt
 c019496:	460b      	movlt	r3, r1
 c019498:	46a0      	movlt	r8, r4
 c01949a:	461c      	movlt	r4, r3
 c01949c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 c0194a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 c0194a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 c0194a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 c0194ac:	eb07 0609 	add.w	r6, r7, r9
 c0194b0:	42b3      	cmp	r3, r6
 c0194b2:	bfb8      	it	lt
 c0194b4:	3101      	addlt	r1, #1
 c0194b6:	f7ff ff07 	bl	c0192c8 <_Balloc>
 c0194ba:	f100 0514 	add.w	r5, r0, #20
 c0194be:	2200      	movs	r2, #0
 c0194c0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 c0194c4:	462b      	mov	r3, r5
 c0194c6:	4573      	cmp	r3, lr
 c0194c8:	d316      	bcc.n	c0194f8 <__multiply+0x72>
 c0194ca:	f108 0114 	add.w	r1, r8, #20
 c0194ce:	f104 0214 	add.w	r2, r4, #20
 c0194d2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 c0194d6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 c0194da:	9300      	str	r3, [sp, #0]
 c0194dc:	9b00      	ldr	r3, [sp, #0]
 c0194de:	9201      	str	r2, [sp, #4]
 c0194e0:	4293      	cmp	r3, r2
 c0194e2:	d80c      	bhi.n	c0194fe <__multiply+0x78>
 c0194e4:	2e00      	cmp	r6, #0
 c0194e6:	dd03      	ble.n	c0194f0 <__multiply+0x6a>
 c0194e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 c0194ec:	2b00      	cmp	r3, #0
 c0194ee:	d05d      	beq.n	c0195ac <__multiply+0x126>
 c0194f0:	6106      	str	r6, [r0, #16]
 c0194f2:	b003      	add	sp, #12
 c0194f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0194f8:	f843 2b04 	str.w	r2, [r3], #4
 c0194fc:	e7e3      	b.n	c0194c6 <__multiply+0x40>
 c0194fe:	f8b2 b000 	ldrh.w	fp, [r2]
 c019502:	f1bb 0f00 	cmp.w	fp, #0
 c019506:	d023      	beq.n	c019550 <__multiply+0xca>
 c019508:	4689      	mov	r9, r1
 c01950a:	46ac      	mov	ip, r5
 c01950c:	f04f 0800 	mov.w	r8, #0
 c019510:	f859 4b04 	ldr.w	r4, [r9], #4
 c019514:	f8dc a000 	ldr.w	sl, [ip]
 c019518:	b2a3      	uxth	r3, r4
 c01951a:	454f      	cmp	r7, r9
 c01951c:	fa1f fa8a 	uxth.w	sl, sl
 c019520:	fb0b a303 	mla	r3, fp, r3, sl
 c019524:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 c019528:	f8dc 4000 	ldr.w	r4, [ip]
 c01952c:	4443      	add	r3, r8
 c01952e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 c019532:	fb0b 840a 	mla	r4, fp, sl, r8
 c019536:	46e2      	mov	sl, ip
 c019538:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 c01953c:	b29b      	uxth	r3, r3
 c01953e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 c019542:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 c019546:	f84a 3b04 	str.w	r3, [sl], #4
 c01954a:	d82b      	bhi.n	c0195a4 <__multiply+0x11e>
 c01954c:	f8cc 8004 	str.w	r8, [ip, #4]
 c019550:	9b01      	ldr	r3, [sp, #4]
 c019552:	3204      	adds	r2, #4
 c019554:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 c019558:	f1ba 0f00 	cmp.w	sl, #0
 c01955c:	d020      	beq.n	c0195a0 <__multiply+0x11a>
 c01955e:	682b      	ldr	r3, [r5, #0]
 c019560:	4689      	mov	r9, r1
 c019562:	46a8      	mov	r8, r5
 c019564:	f04f 0b00 	mov.w	fp, #0
 c019568:	f8b9 c000 	ldrh.w	ip, [r9]
 c01956c:	b29b      	uxth	r3, r3
 c01956e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 c019572:	fb0a 440c 	mla	r4, sl, ip, r4
 c019576:	46c4      	mov	ip, r8
 c019578:	445c      	add	r4, fp
 c01957a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 c01957e:	f84c 3b04 	str.w	r3, [ip], #4
 c019582:	f859 3b04 	ldr.w	r3, [r9], #4
 c019586:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 c01958a:	0c1b      	lsrs	r3, r3, #16
 c01958c:	454f      	cmp	r7, r9
 c01958e:	fb0a b303 	mla	r3, sl, r3, fp
 c019592:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 c019596:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 c01959a:	d805      	bhi.n	c0195a8 <__multiply+0x122>
 c01959c:	f8c8 3004 	str.w	r3, [r8, #4]
 c0195a0:	3504      	adds	r5, #4
 c0195a2:	e79b      	b.n	c0194dc <__multiply+0x56>
 c0195a4:	46d4      	mov	ip, sl
 c0195a6:	e7b3      	b.n	c019510 <__multiply+0x8a>
 c0195a8:	46e0      	mov	r8, ip
 c0195aa:	e7dd      	b.n	c019568 <__multiply+0xe2>
 c0195ac:	3e01      	subs	r6, #1
 c0195ae:	e799      	b.n	c0194e4 <__multiply+0x5e>

0c0195b0 <__pow5mult>:
 c0195b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c0195b4:	4615      	mov	r5, r2
 c0195b6:	f012 0203 	ands.w	r2, r2, #3
 c0195ba:	4606      	mov	r6, r0
 c0195bc:	460f      	mov	r7, r1
 c0195be:	d007      	beq.n	c0195d0 <__pow5mult+0x20>
 c0195c0:	3a01      	subs	r2, #1
 c0195c2:	4c21      	ldr	r4, [pc, #132]	; (c019648 <__pow5mult+0x98>)
 c0195c4:	2300      	movs	r3, #0
 c0195c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 c0195ca:	f7ff fec8 	bl	c01935e <__multadd>
 c0195ce:	4607      	mov	r7, r0
 c0195d0:	10ad      	asrs	r5, r5, #2
 c0195d2:	d035      	beq.n	c019640 <__pow5mult+0x90>
 c0195d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 c0195d6:	b93c      	cbnz	r4, c0195e8 <__pow5mult+0x38>
 c0195d8:	2010      	movs	r0, #16
 c0195da:	f7fe f9b1 	bl	c017940 <malloc>
 c0195de:	6270      	str	r0, [r6, #36]	; 0x24
 c0195e0:	6004      	str	r4, [r0, #0]
 c0195e2:	60c4      	str	r4, [r0, #12]
 c0195e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 c0195e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 c0195ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 c0195f0:	b94c      	cbnz	r4, c019606 <__pow5mult+0x56>
 c0195f2:	f240 2171 	movw	r1, #625	; 0x271
 c0195f6:	4630      	mov	r0, r6
 c0195f8:	f7ff ff3c 	bl	c019474 <__i2b>
 c0195fc:	2300      	movs	r3, #0
 c0195fe:	4604      	mov	r4, r0
 c019600:	f8c8 0008 	str.w	r0, [r8, #8]
 c019604:	6003      	str	r3, [r0, #0]
 c019606:	f04f 0800 	mov.w	r8, #0
 c01960a:	07eb      	lsls	r3, r5, #31
 c01960c:	d50a      	bpl.n	c019624 <__pow5mult+0x74>
 c01960e:	4639      	mov	r1, r7
 c019610:	4622      	mov	r2, r4
 c019612:	4630      	mov	r0, r6
 c019614:	f7ff ff37 	bl	c019486 <__multiply>
 c019618:	4681      	mov	r9, r0
 c01961a:	4639      	mov	r1, r7
 c01961c:	4630      	mov	r0, r6
 c01961e:	464f      	mov	r7, r9
 c019620:	f7ff fe86 	bl	c019330 <_Bfree>
 c019624:	106d      	asrs	r5, r5, #1
 c019626:	d00b      	beq.n	c019640 <__pow5mult+0x90>
 c019628:	6820      	ldr	r0, [r4, #0]
 c01962a:	b938      	cbnz	r0, c01963c <__pow5mult+0x8c>
 c01962c:	4622      	mov	r2, r4
 c01962e:	4621      	mov	r1, r4
 c019630:	4630      	mov	r0, r6
 c019632:	f7ff ff28 	bl	c019486 <__multiply>
 c019636:	6020      	str	r0, [r4, #0]
 c019638:	f8c0 8000 	str.w	r8, [r0]
 c01963c:	4604      	mov	r4, r0
 c01963e:	e7e4      	b.n	c01960a <__pow5mult+0x5a>
 c019640:	4638      	mov	r0, r7
 c019642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c019646:	bf00      	nop
 c019648:	0c01a1d8 	.word	0x0c01a1d8

0c01964c <__lshift>:
 c01964c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c019650:	460c      	mov	r4, r1
 c019652:	ea4f 1a62 	mov.w	sl, r2, asr #5
 c019656:	4607      	mov	r7, r0
 c019658:	4616      	mov	r6, r2
 c01965a:	6923      	ldr	r3, [r4, #16]
 c01965c:	6849      	ldr	r1, [r1, #4]
 c01965e:	eb0a 0903 	add.w	r9, sl, r3
 c019662:	68a3      	ldr	r3, [r4, #8]
 c019664:	f109 0501 	add.w	r5, r9, #1
 c019668:	42ab      	cmp	r3, r5
 c01966a:	db32      	blt.n	c0196d2 <__lshift+0x86>
 c01966c:	4638      	mov	r0, r7
 c01966e:	f7ff fe2b 	bl	c0192c8 <_Balloc>
 c019672:	2300      	movs	r3, #0
 c019674:	4680      	mov	r8, r0
 c019676:	f100 0114 	add.w	r1, r0, #20
 c01967a:	461a      	mov	r2, r3
 c01967c:	4553      	cmp	r3, sl
 c01967e:	db2b      	blt.n	c0196d8 <__lshift+0x8c>
 c019680:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 c019684:	f104 0314 	add.w	r3, r4, #20
 c019688:	6920      	ldr	r0, [r4, #16]
 c01968a:	f016 021f 	ands.w	r2, r6, #31
 c01968e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 c019692:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 c019696:	d025      	beq.n	c0196e4 <__lshift+0x98>
 c019698:	f1c2 0e20 	rsb	lr, r2, #32
 c01969c:	2000      	movs	r0, #0
 c01969e:	681e      	ldr	r6, [r3, #0]
 c0196a0:	468a      	mov	sl, r1
 c0196a2:	4096      	lsls	r6, r2
 c0196a4:	4330      	orrs	r0, r6
 c0196a6:	f84a 0b04 	str.w	r0, [sl], #4
 c0196aa:	f853 0b04 	ldr.w	r0, [r3], #4
 c0196ae:	459c      	cmp	ip, r3
 c0196b0:	fa20 f00e 	lsr.w	r0, r0, lr
 c0196b4:	d814      	bhi.n	c0196e0 <__lshift+0x94>
 c0196b6:	6048      	str	r0, [r1, #4]
 c0196b8:	b108      	cbz	r0, c0196be <__lshift+0x72>
 c0196ba:	f109 0502 	add.w	r5, r9, #2
 c0196be:	3d01      	subs	r5, #1
 c0196c0:	4638      	mov	r0, r7
 c0196c2:	4621      	mov	r1, r4
 c0196c4:	f8c8 5010 	str.w	r5, [r8, #16]
 c0196c8:	f7ff fe32 	bl	c019330 <_Bfree>
 c0196cc:	4640      	mov	r0, r8
 c0196ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c0196d2:	3101      	adds	r1, #1
 c0196d4:	005b      	lsls	r3, r3, #1
 c0196d6:	e7c7      	b.n	c019668 <__lshift+0x1c>
 c0196d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 c0196dc:	3301      	adds	r3, #1
 c0196de:	e7cd      	b.n	c01967c <__lshift+0x30>
 c0196e0:	4651      	mov	r1, sl
 c0196e2:	e7dc      	b.n	c01969e <__lshift+0x52>
 c0196e4:	3904      	subs	r1, #4
 c0196e6:	f853 2b04 	ldr.w	r2, [r3], #4
 c0196ea:	459c      	cmp	ip, r3
 c0196ec:	f841 2f04 	str.w	r2, [r1, #4]!
 c0196f0:	d8f9      	bhi.n	c0196e6 <__lshift+0x9a>
 c0196f2:	e7e4      	b.n	c0196be <__lshift+0x72>

0c0196f4 <__mcmp>:
 c0196f4:	6903      	ldr	r3, [r0, #16]
 c0196f6:	690a      	ldr	r2, [r1, #16]
 c0196f8:	1a9b      	subs	r3, r3, r2
 c0196fa:	b530      	push	{r4, r5, lr}
 c0196fc:	d10c      	bne.n	c019718 <__mcmp+0x24>
 c0196fe:	0092      	lsls	r2, r2, #2
 c019700:	3014      	adds	r0, #20
 c019702:	3114      	adds	r1, #20
 c019704:	1884      	adds	r4, r0, r2
 c019706:	4411      	add	r1, r2
 c019708:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 c01970c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 c019710:	4295      	cmp	r5, r2
 c019712:	d003      	beq.n	c01971c <__mcmp+0x28>
 c019714:	d305      	bcc.n	c019722 <__mcmp+0x2e>
 c019716:	2301      	movs	r3, #1
 c019718:	4618      	mov	r0, r3
 c01971a:	bd30      	pop	{r4, r5, pc}
 c01971c:	42a0      	cmp	r0, r4
 c01971e:	d3f3      	bcc.n	c019708 <__mcmp+0x14>
 c019720:	e7fa      	b.n	c019718 <__mcmp+0x24>
 c019722:	f04f 33ff 	mov.w	r3, #4294967295
 c019726:	e7f7      	b.n	c019718 <__mcmp+0x24>

0c019728 <__mdiff>:
 c019728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c01972c:	460d      	mov	r5, r1
 c01972e:	4607      	mov	r7, r0
 c019730:	4611      	mov	r1, r2
 c019732:	4614      	mov	r4, r2
 c019734:	4628      	mov	r0, r5
 c019736:	f7ff ffdd 	bl	c0196f4 <__mcmp>
 c01973a:	1e06      	subs	r6, r0, #0
 c01973c:	d108      	bne.n	c019750 <__mdiff+0x28>
 c01973e:	4631      	mov	r1, r6
 c019740:	4638      	mov	r0, r7
 c019742:	f7ff fdc1 	bl	c0192c8 <_Balloc>
 c019746:	2301      	movs	r3, #1
 c019748:	e9c0 3604 	strd	r3, r6, [r0, #16]
 c01974c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c019750:	bfa3      	ittte	ge
 c019752:	4623      	movge	r3, r4
 c019754:	462c      	movge	r4, r5
 c019756:	2600      	movge	r6, #0
 c019758:	2601      	movlt	r6, #1
 c01975a:	bfa8      	it	ge
 c01975c:	461d      	movge	r5, r3
 c01975e:	6861      	ldr	r1, [r4, #4]
 c019760:	4638      	mov	r0, r7
 c019762:	f7ff fdb1 	bl	c0192c8 <_Balloc>
 c019766:	f105 0914 	add.w	r9, r5, #20
 c01976a:	60c6      	str	r6, [r0, #12]
 c01976c:	f104 0214 	add.w	r2, r4, #20
 c019770:	6926      	ldr	r6, [r4, #16]
 c019772:	f100 0114 	add.w	r1, r0, #20
 c019776:	692b      	ldr	r3, [r5, #16]
 c019778:	f04f 0e00 	mov.w	lr, #0
 c01977c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 c019780:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 c019784:	f852 ab04 	ldr.w	sl, [r2], #4
 c019788:	f859 5b04 	ldr.w	r5, [r9], #4
 c01978c:	fa1f f38a 	uxth.w	r3, sl
 c019790:	4694      	mov	ip, r2
 c019792:	b2ac      	uxth	r4, r5
 c019794:	45c8      	cmp	r8, r9
 c019796:	4473      	add	r3, lr
 c019798:	eba3 0304 	sub.w	r3, r3, r4
 c01979c:	ea4f 4415 	mov.w	r4, r5, lsr #16
 c0197a0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 c0197a4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 c0197a8:	b29b      	uxth	r3, r3
 c0197aa:	ea4f 4e24 	mov.w	lr, r4, asr #16
 c0197ae:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 c0197b2:	f841 4b04 	str.w	r4, [r1], #4
 c0197b6:	d8e5      	bhi.n	c019784 <__mdiff+0x5c>
 c0197b8:	45bc      	cmp	ip, r7
 c0197ba:	d304      	bcc.n	c0197c6 <__mdiff+0x9e>
 c0197bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 c0197c0:	b183      	cbz	r3, c0197e4 <__mdiff+0xbc>
 c0197c2:	6106      	str	r6, [r0, #16]
 c0197c4:	e7c2      	b.n	c01974c <__mdiff+0x24>
 c0197c6:	f85c 4b04 	ldr.w	r4, [ip], #4
 c0197ca:	b2a2      	uxth	r2, r4
 c0197cc:	4472      	add	r2, lr
 c0197ce:	1413      	asrs	r3, r2, #16
 c0197d0:	b292      	uxth	r2, r2
 c0197d2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 c0197d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 c0197da:	ea4f 4e23 	mov.w	lr, r3, asr #16
 c0197de:	f841 2b04 	str.w	r2, [r1], #4
 c0197e2:	e7e9      	b.n	c0197b8 <__mdiff+0x90>
 c0197e4:	3e01      	subs	r6, #1
 c0197e6:	e7e9      	b.n	c0197bc <__mdiff+0x94>

0c0197e8 <__d2b>:
 c0197e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 c0197ec:	461c      	mov	r4, r3
 c0197ee:	2101      	movs	r1, #1
 c0197f0:	4690      	mov	r8, r2
 c0197f2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 c0197f6:	f7ff fd67 	bl	c0192c8 <_Balloc>
 c0197fa:	f3c4 0213 	ubfx	r2, r4, #0, #20
 c0197fe:	f3c4 540a 	ubfx	r4, r4, #20, #11
 c019802:	4607      	mov	r7, r0
 c019804:	bb34      	cbnz	r4, c019854 <__d2b+0x6c>
 c019806:	9201      	str	r2, [sp, #4]
 c019808:	f1b8 0200 	subs.w	r2, r8, #0
 c01980c:	d027      	beq.n	c01985e <__d2b+0x76>
 c01980e:	a802      	add	r0, sp, #8
 c019810:	f840 2d08 	str.w	r2, [r0, #-8]!
 c019814:	f7ff fdff 	bl	c019416 <__lo0bits>
 c019818:	9900      	ldr	r1, [sp, #0]
 c01981a:	b1f0      	cbz	r0, c01985a <__d2b+0x72>
 c01981c:	9a01      	ldr	r2, [sp, #4]
 c01981e:	f1c0 0320 	rsb	r3, r0, #32
 c019822:	fa02 f303 	lsl.w	r3, r2, r3
 c019826:	40c2      	lsrs	r2, r0
 c019828:	430b      	orrs	r3, r1
 c01982a:	9201      	str	r2, [sp, #4]
 c01982c:	617b      	str	r3, [r7, #20]
 c01982e:	9b01      	ldr	r3, [sp, #4]
 c019830:	2b00      	cmp	r3, #0
 c019832:	61bb      	str	r3, [r7, #24]
 c019834:	bf14      	ite	ne
 c019836:	2102      	movne	r1, #2
 c019838:	2101      	moveq	r1, #1
 c01983a:	6139      	str	r1, [r7, #16]
 c01983c:	b1c4      	cbz	r4, c019870 <__d2b+0x88>
 c01983e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 c019842:	4404      	add	r4, r0
 c019844:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 c019848:	6034      	str	r4, [r6, #0]
 c01984a:	6028      	str	r0, [r5, #0]
 c01984c:	4638      	mov	r0, r7
 c01984e:	b002      	add	sp, #8
 c019850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c019854:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 c019858:	e7d5      	b.n	c019806 <__d2b+0x1e>
 c01985a:	6179      	str	r1, [r7, #20]
 c01985c:	e7e7      	b.n	c01982e <__d2b+0x46>
 c01985e:	a801      	add	r0, sp, #4
 c019860:	f7ff fdd9 	bl	c019416 <__lo0bits>
 c019864:	9b01      	ldr	r3, [sp, #4]
 c019866:	2101      	movs	r1, #1
 c019868:	3020      	adds	r0, #32
 c01986a:	617b      	str	r3, [r7, #20]
 c01986c:	6139      	str	r1, [r7, #16]
 c01986e:	e7e5      	b.n	c01983c <__d2b+0x54>
 c019870:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 c019874:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 c019878:	6030      	str	r0, [r6, #0]
 c01987a:	6918      	ldr	r0, [r3, #16]
 c01987c:	f7ff fdac 	bl	c0193d8 <__hi0bits>
 c019880:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 c019884:	e7e1      	b.n	c01984a <__d2b+0x62>

0c019886 <__sfputc_r>:
 c019886:	6893      	ldr	r3, [r2, #8]
 c019888:	3b01      	subs	r3, #1
 c01988a:	2b00      	cmp	r3, #0
 c01988c:	6093      	str	r3, [r2, #8]
 c01988e:	b410      	push	{r4}
 c019890:	da07      	bge.n	c0198a2 <__sfputc_r+0x1c>
 c019892:	6994      	ldr	r4, [r2, #24]
 c019894:	42a3      	cmp	r3, r4
 c019896:	db01      	blt.n	c01989c <__sfputc_r+0x16>
 c019898:	290a      	cmp	r1, #10
 c01989a:	d102      	bne.n	c0198a2 <__sfputc_r+0x1c>
 c01989c:	bc10      	pop	{r4}
 c01989e:	f000 b973 	b.w	c019b88 <__swbuf_r>
 c0198a2:	6813      	ldr	r3, [r2, #0]
 c0198a4:	1c58      	adds	r0, r3, #1
 c0198a6:	6010      	str	r0, [r2, #0]
 c0198a8:	4608      	mov	r0, r1
 c0198aa:	7019      	strb	r1, [r3, #0]
 c0198ac:	bc10      	pop	{r4}
 c0198ae:	4770      	bx	lr

0c0198b0 <__sfputs_r>:
 c0198b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0198b2:	4606      	mov	r6, r0
 c0198b4:	460f      	mov	r7, r1
 c0198b6:	4614      	mov	r4, r2
 c0198b8:	18d5      	adds	r5, r2, r3
 c0198ba:	42ac      	cmp	r4, r5
 c0198bc:	d101      	bne.n	c0198c2 <__sfputs_r+0x12>
 c0198be:	2000      	movs	r0, #0
 c0198c0:	e007      	b.n	c0198d2 <__sfputs_r+0x22>
 c0198c2:	463a      	mov	r2, r7
 c0198c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 c0198c8:	4630      	mov	r0, r6
 c0198ca:	f7ff ffdc 	bl	c019886 <__sfputc_r>
 c0198ce:	1c43      	adds	r3, r0, #1
 c0198d0:	d1f3      	bne.n	c0198ba <__sfputs_r+0xa>
 c0198d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0c0198d4 <_vfiprintf_r>:
 c0198d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0198d8:	460c      	mov	r4, r1
 c0198da:	b09d      	sub	sp, #116	; 0x74
 c0198dc:	4617      	mov	r7, r2
 c0198de:	461d      	mov	r5, r3
 c0198e0:	4606      	mov	r6, r0
 c0198e2:	b118      	cbz	r0, c0198ec <_vfiprintf_r+0x18>
 c0198e4:	6983      	ldr	r3, [r0, #24]
 c0198e6:	b90b      	cbnz	r3, c0198ec <_vfiprintf_r+0x18>
 c0198e8:	f7ff fc46 	bl	c019178 <__sinit>
 c0198ec:	4b7c      	ldr	r3, [pc, #496]	; (c019ae0 <_vfiprintf_r+0x20c>)
 c0198ee:	429c      	cmp	r4, r3
 c0198f0:	d158      	bne.n	c0199a4 <_vfiprintf_r+0xd0>
 c0198f2:	6874      	ldr	r4, [r6, #4]
 c0198f4:	89a3      	ldrh	r3, [r4, #12]
 c0198f6:	0718      	lsls	r0, r3, #28
 c0198f8:	d55e      	bpl.n	c0199b8 <_vfiprintf_r+0xe4>
 c0198fa:	6923      	ldr	r3, [r4, #16]
 c0198fc:	2b00      	cmp	r3, #0
 c0198fe:	d05b      	beq.n	c0199b8 <_vfiprintf_r+0xe4>
 c019900:	2300      	movs	r3, #0
 c019902:	f04f 0b01 	mov.w	fp, #1
 c019906:	9503      	str	r5, [sp, #12]
 c019908:	9309      	str	r3, [sp, #36]	; 0x24
 c01990a:	2320      	movs	r3, #32
 c01990c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c019910:	2330      	movs	r3, #48	; 0x30
 c019912:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c019916:	46b8      	mov	r8, r7
 c019918:	4645      	mov	r5, r8
 c01991a:	f815 3b01 	ldrb.w	r3, [r5], #1
 c01991e:	b10b      	cbz	r3, c019924 <_vfiprintf_r+0x50>
 c019920:	2b25      	cmp	r3, #37	; 0x25
 c019922:	d154      	bne.n	c0199ce <_vfiprintf_r+0xfa>
 c019924:	ebb8 0a07 	subs.w	sl, r8, r7
 c019928:	d00b      	beq.n	c019942 <_vfiprintf_r+0x6e>
 c01992a:	4653      	mov	r3, sl
 c01992c:	463a      	mov	r2, r7
 c01992e:	4621      	mov	r1, r4
 c019930:	4630      	mov	r0, r6
 c019932:	f7ff ffbd 	bl	c0198b0 <__sfputs_r>
 c019936:	3001      	adds	r0, #1
 c019938:	f000 80c2 	beq.w	c019ac0 <_vfiprintf_r+0x1ec>
 c01993c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c01993e:	4453      	add	r3, sl
 c019940:	9309      	str	r3, [sp, #36]	; 0x24
 c019942:	f898 3000 	ldrb.w	r3, [r8]
 c019946:	2b00      	cmp	r3, #0
 c019948:	f000 80ba 	beq.w	c019ac0 <_vfiprintf_r+0x1ec>
 c01994c:	2300      	movs	r3, #0
 c01994e:	f04f 32ff 	mov.w	r2, #4294967295
 c019952:	9304      	str	r3, [sp, #16]
 c019954:	9307      	str	r3, [sp, #28]
 c019956:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c01995a:	931a      	str	r3, [sp, #104]	; 0x68
 c01995c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c019960:	46a8      	mov	r8, r5
 c019962:	2205      	movs	r2, #5
 c019964:	485f      	ldr	r0, [pc, #380]	; (c019ae4 <_vfiprintf_r+0x210>)
 c019966:	f818 1b01 	ldrb.w	r1, [r8], #1
 c01996a:	f7ff fc9d 	bl	c0192a8 <memchr>
 c01996e:	9b04      	ldr	r3, [sp, #16]
 c019970:	bb78      	cbnz	r0, c0199d2 <_vfiprintf_r+0xfe>
 c019972:	06d9      	lsls	r1, r3, #27
 c019974:	bf44      	itt	mi
 c019976:	2220      	movmi	r2, #32
 c019978:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 c01997c:	071a      	lsls	r2, r3, #28
 c01997e:	bf44      	itt	mi
 c019980:	222b      	movmi	r2, #43	; 0x2b
 c019982:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 c019986:	782a      	ldrb	r2, [r5, #0]
 c019988:	2a2a      	cmp	r2, #42	; 0x2a
 c01998a:	d02a      	beq.n	c0199e2 <_vfiprintf_r+0x10e>
 c01998c:	46a8      	mov	r8, r5
 c01998e:	9a07      	ldr	r2, [sp, #28]
 c019990:	2000      	movs	r0, #0
 c019992:	250a      	movs	r5, #10
 c019994:	4641      	mov	r1, r8
 c019996:	f811 3b01 	ldrb.w	r3, [r1], #1
 c01999a:	3b30      	subs	r3, #48	; 0x30
 c01999c:	2b09      	cmp	r3, #9
 c01999e:	d969      	bls.n	c019a74 <_vfiprintf_r+0x1a0>
 c0199a0:	b360      	cbz	r0, c0199fc <_vfiprintf_r+0x128>
 c0199a2:	e024      	b.n	c0199ee <_vfiprintf_r+0x11a>
 c0199a4:	4b50      	ldr	r3, [pc, #320]	; (c019ae8 <_vfiprintf_r+0x214>)
 c0199a6:	429c      	cmp	r4, r3
 c0199a8:	d101      	bne.n	c0199ae <_vfiprintf_r+0xda>
 c0199aa:	68b4      	ldr	r4, [r6, #8]
 c0199ac:	e7a2      	b.n	c0198f4 <_vfiprintf_r+0x20>
 c0199ae:	4b4f      	ldr	r3, [pc, #316]	; (c019aec <_vfiprintf_r+0x218>)
 c0199b0:	429c      	cmp	r4, r3
 c0199b2:	bf08      	it	eq
 c0199b4:	68f4      	ldreq	r4, [r6, #12]
 c0199b6:	e79d      	b.n	c0198f4 <_vfiprintf_r+0x20>
 c0199b8:	4621      	mov	r1, r4
 c0199ba:	4630      	mov	r0, r6
 c0199bc:	f000 f948 	bl	c019c50 <__swsetup_r>
 c0199c0:	2800      	cmp	r0, #0
 c0199c2:	d09d      	beq.n	c019900 <_vfiprintf_r+0x2c>
 c0199c4:	f04f 30ff 	mov.w	r0, #4294967295
 c0199c8:	b01d      	add	sp, #116	; 0x74
 c0199ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0199ce:	46a8      	mov	r8, r5
 c0199d0:	e7a2      	b.n	c019918 <_vfiprintf_r+0x44>
 c0199d2:	4a44      	ldr	r2, [pc, #272]	; (c019ae4 <_vfiprintf_r+0x210>)
 c0199d4:	4645      	mov	r5, r8
 c0199d6:	1a80      	subs	r0, r0, r2
 c0199d8:	fa0b f000 	lsl.w	r0, fp, r0
 c0199dc:	4318      	orrs	r0, r3
 c0199de:	9004      	str	r0, [sp, #16]
 c0199e0:	e7be      	b.n	c019960 <_vfiprintf_r+0x8c>
 c0199e2:	9a03      	ldr	r2, [sp, #12]
 c0199e4:	1d11      	adds	r1, r2, #4
 c0199e6:	6812      	ldr	r2, [r2, #0]
 c0199e8:	2a00      	cmp	r2, #0
 c0199ea:	9103      	str	r1, [sp, #12]
 c0199ec:	db01      	blt.n	c0199f2 <_vfiprintf_r+0x11e>
 c0199ee:	9207      	str	r2, [sp, #28]
 c0199f0:	e004      	b.n	c0199fc <_vfiprintf_r+0x128>
 c0199f2:	4252      	negs	r2, r2
 c0199f4:	f043 0302 	orr.w	r3, r3, #2
 c0199f8:	9207      	str	r2, [sp, #28]
 c0199fa:	9304      	str	r3, [sp, #16]
 c0199fc:	f898 3000 	ldrb.w	r3, [r8]
 c019a00:	2b2e      	cmp	r3, #46	; 0x2e
 c019a02:	d10e      	bne.n	c019a22 <_vfiprintf_r+0x14e>
 c019a04:	f898 3001 	ldrb.w	r3, [r8, #1]
 c019a08:	2b2a      	cmp	r3, #42	; 0x2a
 c019a0a:	d138      	bne.n	c019a7e <_vfiprintf_r+0x1aa>
 c019a0c:	9b03      	ldr	r3, [sp, #12]
 c019a0e:	f108 0802 	add.w	r8, r8, #2
 c019a12:	1d1a      	adds	r2, r3, #4
 c019a14:	681b      	ldr	r3, [r3, #0]
 c019a16:	2b00      	cmp	r3, #0
 c019a18:	9203      	str	r2, [sp, #12]
 c019a1a:	bfb8      	it	lt
 c019a1c:	f04f 33ff 	movlt.w	r3, #4294967295
 c019a20:	9305      	str	r3, [sp, #20]
 c019a22:	4d33      	ldr	r5, [pc, #204]	; (c019af0 <_vfiprintf_r+0x21c>)
 c019a24:	2203      	movs	r2, #3
 c019a26:	f898 1000 	ldrb.w	r1, [r8]
 c019a2a:	4628      	mov	r0, r5
 c019a2c:	f7ff fc3c 	bl	c0192a8 <memchr>
 c019a30:	b140      	cbz	r0, c019a44 <_vfiprintf_r+0x170>
 c019a32:	2340      	movs	r3, #64	; 0x40
 c019a34:	1b40      	subs	r0, r0, r5
 c019a36:	f108 0801 	add.w	r8, r8, #1
 c019a3a:	fa03 f000 	lsl.w	r0, r3, r0
 c019a3e:	9b04      	ldr	r3, [sp, #16]
 c019a40:	4303      	orrs	r3, r0
 c019a42:	9304      	str	r3, [sp, #16]
 c019a44:	f898 1000 	ldrb.w	r1, [r8]
 c019a48:	2206      	movs	r2, #6
 c019a4a:	482a      	ldr	r0, [pc, #168]	; (c019af4 <_vfiprintf_r+0x220>)
 c019a4c:	f108 0701 	add.w	r7, r8, #1
 c019a50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c019a54:	f7ff fc28 	bl	c0192a8 <memchr>
 c019a58:	2800      	cmp	r0, #0
 c019a5a:	d037      	beq.n	c019acc <_vfiprintf_r+0x1f8>
 c019a5c:	4b26      	ldr	r3, [pc, #152]	; (c019af8 <_vfiprintf_r+0x224>)
 c019a5e:	bb1b      	cbnz	r3, c019aa8 <_vfiprintf_r+0x1d4>
 c019a60:	9b03      	ldr	r3, [sp, #12]
 c019a62:	3307      	adds	r3, #7
 c019a64:	f023 0307 	bic.w	r3, r3, #7
 c019a68:	3308      	adds	r3, #8
 c019a6a:	9303      	str	r3, [sp, #12]
 c019a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c019a6e:	444b      	add	r3, r9
 c019a70:	9309      	str	r3, [sp, #36]	; 0x24
 c019a72:	e750      	b.n	c019916 <_vfiprintf_r+0x42>
 c019a74:	fb05 3202 	mla	r2, r5, r2, r3
 c019a78:	2001      	movs	r0, #1
 c019a7a:	4688      	mov	r8, r1
 c019a7c:	e78a      	b.n	c019994 <_vfiprintf_r+0xc0>
 c019a7e:	2300      	movs	r3, #0
 c019a80:	f108 0801 	add.w	r8, r8, #1
 c019a84:	250a      	movs	r5, #10
 c019a86:	4619      	mov	r1, r3
 c019a88:	9305      	str	r3, [sp, #20]
 c019a8a:	4640      	mov	r0, r8
 c019a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 c019a90:	3a30      	subs	r2, #48	; 0x30
 c019a92:	2a09      	cmp	r2, #9
 c019a94:	d903      	bls.n	c019a9e <_vfiprintf_r+0x1ca>
 c019a96:	2b00      	cmp	r3, #0
 c019a98:	d0c3      	beq.n	c019a22 <_vfiprintf_r+0x14e>
 c019a9a:	9105      	str	r1, [sp, #20]
 c019a9c:	e7c1      	b.n	c019a22 <_vfiprintf_r+0x14e>
 c019a9e:	fb05 2101 	mla	r1, r5, r1, r2
 c019aa2:	2301      	movs	r3, #1
 c019aa4:	4680      	mov	r8, r0
 c019aa6:	e7f0      	b.n	c019a8a <_vfiprintf_r+0x1b6>
 c019aa8:	ab03      	add	r3, sp, #12
 c019aaa:	4622      	mov	r2, r4
 c019aac:	a904      	add	r1, sp, #16
 c019aae:	4630      	mov	r0, r6
 c019ab0:	9300      	str	r3, [sp, #0]
 c019ab2:	4b12      	ldr	r3, [pc, #72]	; (c019afc <_vfiprintf_r+0x228>)
 c019ab4:	f7fe f8d6 	bl	c017c64 <_printf_float>
 c019ab8:	f1b0 3fff 	cmp.w	r0, #4294967295
 c019abc:	4681      	mov	r9, r0
 c019abe:	d1d5      	bne.n	c019a6c <_vfiprintf_r+0x198>
 c019ac0:	89a3      	ldrh	r3, [r4, #12]
 c019ac2:	065b      	lsls	r3, r3, #25
 c019ac4:	f53f af7e 	bmi.w	c0199c4 <_vfiprintf_r+0xf0>
 c019ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 c019aca:	e77d      	b.n	c0199c8 <_vfiprintf_r+0xf4>
 c019acc:	ab03      	add	r3, sp, #12
 c019ace:	4622      	mov	r2, r4
 c019ad0:	a904      	add	r1, sp, #16
 c019ad2:	4630      	mov	r0, r6
 c019ad4:	9300      	str	r3, [sp, #0]
 c019ad6:	4b09      	ldr	r3, [pc, #36]	; (c019afc <_vfiprintf_r+0x228>)
 c019ad8:	f7fe fb72 	bl	c0181c0 <_printf_i>
 c019adc:	e7ec      	b.n	c019ab8 <_vfiprintf_r+0x1e4>
 c019ade:	bf00      	nop
 c019ae0:	0c01a0a4 	.word	0x0c01a0a4
 c019ae4:	0c01a1e4 	.word	0x0c01a1e4
 c019ae8:	0c01a0c4 	.word	0x0c01a0c4
 c019aec:	0c01a084 	.word	0x0c01a084
 c019af0:	0c01a1ea 	.word	0x0c01a1ea
 c019af4:	0c01a1ee 	.word	0x0c01a1ee
 c019af8:	0c017c65 	.word	0x0c017c65
 c019afc:	0c0198b1 	.word	0x0c0198b1

0c019b00 <__sread>:
 c019b00:	b510      	push	{r4, lr}
 c019b02:	460c      	mov	r4, r1
 c019b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c019b08:	f000 fa56 	bl	c019fb8 <_read_r>
 c019b0c:	2800      	cmp	r0, #0
 c019b0e:	bfab      	itete	ge
 c019b10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 c019b12:	89a3      	ldrhlt	r3, [r4, #12]
 c019b14:	181b      	addge	r3, r3, r0
 c019b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 c019b1a:	bfac      	ite	ge
 c019b1c:	6563      	strge	r3, [r4, #84]	; 0x54
 c019b1e:	81a3      	strhlt	r3, [r4, #12]
 c019b20:	bd10      	pop	{r4, pc}

0c019b22 <__swrite>:
 c019b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c019b26:	461f      	mov	r7, r3
 c019b28:	898b      	ldrh	r3, [r1, #12]
 c019b2a:	4605      	mov	r5, r0
 c019b2c:	460c      	mov	r4, r1
 c019b2e:	05db      	lsls	r3, r3, #23
 c019b30:	4616      	mov	r6, r2
 c019b32:	d505      	bpl.n	c019b40 <__swrite+0x1e>
 c019b34:	2302      	movs	r3, #2
 c019b36:	2200      	movs	r2, #0
 c019b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c019b3c:	f000 f9b4 	bl	c019ea8 <_lseek_r>
 c019b40:	89a3      	ldrh	r3, [r4, #12]
 c019b42:	4632      	mov	r2, r6
 c019b44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c019b48:	4628      	mov	r0, r5
 c019b4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c019b4e:	81a3      	strh	r3, [r4, #12]
 c019b50:	463b      	mov	r3, r7
 c019b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c019b56:	f000 b869 	b.w	c019c2c <_write_r>

0c019b5a <__sseek>:
 c019b5a:	b510      	push	{r4, lr}
 c019b5c:	460c      	mov	r4, r1
 c019b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c019b62:	f000 f9a1 	bl	c019ea8 <_lseek_r>
 c019b66:	1c43      	adds	r3, r0, #1
 c019b68:	89a3      	ldrh	r3, [r4, #12]
 c019b6a:	bf15      	itete	ne
 c019b6c:	6560      	strne	r0, [r4, #84]	; 0x54
 c019b6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 c019b72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 c019b76:	81a3      	strheq	r3, [r4, #12]
 c019b78:	bf18      	it	ne
 c019b7a:	81a3      	strhne	r3, [r4, #12]
 c019b7c:	bd10      	pop	{r4, pc}

0c019b7e <__sclose>:
 c019b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c019b82:	f000 b8d3 	b.w	c019d2c <_close_r>
	...

0c019b88 <__swbuf_r>:
 c019b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c019b8a:	460e      	mov	r6, r1
 c019b8c:	4614      	mov	r4, r2
 c019b8e:	4605      	mov	r5, r0
 c019b90:	b118      	cbz	r0, c019b9a <__swbuf_r+0x12>
 c019b92:	6983      	ldr	r3, [r0, #24]
 c019b94:	b90b      	cbnz	r3, c019b9a <__swbuf_r+0x12>
 c019b96:	f7ff faef 	bl	c019178 <__sinit>
 c019b9a:	4b21      	ldr	r3, [pc, #132]	; (c019c20 <__swbuf_r+0x98>)
 c019b9c:	429c      	cmp	r4, r3
 c019b9e:	d12a      	bne.n	c019bf6 <__swbuf_r+0x6e>
 c019ba0:	686c      	ldr	r4, [r5, #4]
 c019ba2:	69a3      	ldr	r3, [r4, #24]
 c019ba4:	60a3      	str	r3, [r4, #8]
 c019ba6:	89a3      	ldrh	r3, [r4, #12]
 c019ba8:	071a      	lsls	r2, r3, #28
 c019baa:	d52e      	bpl.n	c019c0a <__swbuf_r+0x82>
 c019bac:	6923      	ldr	r3, [r4, #16]
 c019bae:	b363      	cbz	r3, c019c0a <__swbuf_r+0x82>
 c019bb0:	6923      	ldr	r3, [r4, #16]
 c019bb2:	b2f6      	uxtb	r6, r6
 c019bb4:	6820      	ldr	r0, [r4, #0]
 c019bb6:	4637      	mov	r7, r6
 c019bb8:	1ac0      	subs	r0, r0, r3
 c019bba:	6963      	ldr	r3, [r4, #20]
 c019bbc:	4283      	cmp	r3, r0
 c019bbe:	dc04      	bgt.n	c019bca <__swbuf_r+0x42>
 c019bc0:	4621      	mov	r1, r4
 c019bc2:	4628      	mov	r0, r5
 c019bc4:	f000 f946 	bl	c019e54 <_fflush_r>
 c019bc8:	bb28      	cbnz	r0, c019c16 <__swbuf_r+0x8e>
 c019bca:	68a3      	ldr	r3, [r4, #8]
 c019bcc:	3001      	adds	r0, #1
 c019bce:	3b01      	subs	r3, #1
 c019bd0:	60a3      	str	r3, [r4, #8]
 c019bd2:	6823      	ldr	r3, [r4, #0]
 c019bd4:	1c5a      	adds	r2, r3, #1
 c019bd6:	6022      	str	r2, [r4, #0]
 c019bd8:	701e      	strb	r6, [r3, #0]
 c019bda:	6963      	ldr	r3, [r4, #20]
 c019bdc:	4283      	cmp	r3, r0
 c019bde:	d004      	beq.n	c019bea <__swbuf_r+0x62>
 c019be0:	89a3      	ldrh	r3, [r4, #12]
 c019be2:	07db      	lsls	r3, r3, #31
 c019be4:	d519      	bpl.n	c019c1a <__swbuf_r+0x92>
 c019be6:	2e0a      	cmp	r6, #10
 c019be8:	d117      	bne.n	c019c1a <__swbuf_r+0x92>
 c019bea:	4621      	mov	r1, r4
 c019bec:	4628      	mov	r0, r5
 c019bee:	f000 f931 	bl	c019e54 <_fflush_r>
 c019bf2:	b190      	cbz	r0, c019c1a <__swbuf_r+0x92>
 c019bf4:	e00f      	b.n	c019c16 <__swbuf_r+0x8e>
 c019bf6:	4b0b      	ldr	r3, [pc, #44]	; (c019c24 <__swbuf_r+0x9c>)
 c019bf8:	429c      	cmp	r4, r3
 c019bfa:	d101      	bne.n	c019c00 <__swbuf_r+0x78>
 c019bfc:	68ac      	ldr	r4, [r5, #8]
 c019bfe:	e7d0      	b.n	c019ba2 <__swbuf_r+0x1a>
 c019c00:	4b09      	ldr	r3, [pc, #36]	; (c019c28 <__swbuf_r+0xa0>)
 c019c02:	429c      	cmp	r4, r3
 c019c04:	bf08      	it	eq
 c019c06:	68ec      	ldreq	r4, [r5, #12]
 c019c08:	e7cb      	b.n	c019ba2 <__swbuf_r+0x1a>
 c019c0a:	4621      	mov	r1, r4
 c019c0c:	4628      	mov	r0, r5
 c019c0e:	f000 f81f 	bl	c019c50 <__swsetup_r>
 c019c12:	2800      	cmp	r0, #0
 c019c14:	d0cc      	beq.n	c019bb0 <__swbuf_r+0x28>
 c019c16:	f04f 37ff 	mov.w	r7, #4294967295
 c019c1a:	4638      	mov	r0, r7
 c019c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c019c1e:	bf00      	nop
 c019c20:	0c01a0a4 	.word	0x0c01a0a4
 c019c24:	0c01a0c4 	.word	0x0c01a0c4
 c019c28:	0c01a084 	.word	0x0c01a084

0c019c2c <_write_r>:
 c019c2c:	b538      	push	{r3, r4, r5, lr}
 c019c2e:	4605      	mov	r5, r0
 c019c30:	4c06      	ldr	r4, [pc, #24]	; (c019c4c <_write_r+0x20>)
 c019c32:	4608      	mov	r0, r1
 c019c34:	4611      	mov	r1, r2
 c019c36:	2200      	movs	r2, #0
 c019c38:	6022      	str	r2, [r4, #0]
 c019c3a:	461a      	mov	r2, r3
 c019c3c:	f01a fc00 	bl	c034440 <_write>
 c019c40:	1c43      	adds	r3, r0, #1
 c019c42:	d102      	bne.n	c019c4a <_write_r+0x1e>
 c019c44:	6823      	ldr	r3, [r4, #0]
 c019c46:	b103      	cbz	r3, c019c4a <_write_r+0x1e>
 c019c48:	602b      	str	r3, [r5, #0]
 c019c4a:	bd38      	pop	{r3, r4, r5, pc}
 c019c4c:	3003c978 	.word	0x3003c978

0c019c50 <__swsetup_r>:
 c019c50:	4b32      	ldr	r3, [pc, #200]	; (c019d1c <__swsetup_r+0xcc>)
 c019c52:	b570      	push	{r4, r5, r6, lr}
 c019c54:	681d      	ldr	r5, [r3, #0]
 c019c56:	4606      	mov	r6, r0
 c019c58:	460c      	mov	r4, r1
 c019c5a:	b125      	cbz	r5, c019c66 <__swsetup_r+0x16>
 c019c5c:	69ab      	ldr	r3, [r5, #24]
 c019c5e:	b913      	cbnz	r3, c019c66 <__swsetup_r+0x16>
 c019c60:	4628      	mov	r0, r5
 c019c62:	f7ff fa89 	bl	c019178 <__sinit>
 c019c66:	4b2e      	ldr	r3, [pc, #184]	; (c019d20 <__swsetup_r+0xd0>)
 c019c68:	429c      	cmp	r4, r3
 c019c6a:	d10f      	bne.n	c019c8c <__swsetup_r+0x3c>
 c019c6c:	686c      	ldr	r4, [r5, #4]
 c019c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c019c72:	b29a      	uxth	r2, r3
 c019c74:	0715      	lsls	r5, r2, #28
 c019c76:	d42c      	bmi.n	c019cd2 <__swsetup_r+0x82>
 c019c78:	06d0      	lsls	r0, r2, #27
 c019c7a:	d411      	bmi.n	c019ca0 <__swsetup_r+0x50>
 c019c7c:	2209      	movs	r2, #9
 c019c7e:	6032      	str	r2, [r6, #0]
 c019c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c019c84:	f04f 30ff 	mov.w	r0, #4294967295
 c019c88:	81a3      	strh	r3, [r4, #12]
 c019c8a:	e03e      	b.n	c019d0a <__swsetup_r+0xba>
 c019c8c:	4b25      	ldr	r3, [pc, #148]	; (c019d24 <__swsetup_r+0xd4>)
 c019c8e:	429c      	cmp	r4, r3
 c019c90:	d101      	bne.n	c019c96 <__swsetup_r+0x46>
 c019c92:	68ac      	ldr	r4, [r5, #8]
 c019c94:	e7eb      	b.n	c019c6e <__swsetup_r+0x1e>
 c019c96:	4b24      	ldr	r3, [pc, #144]	; (c019d28 <__swsetup_r+0xd8>)
 c019c98:	429c      	cmp	r4, r3
 c019c9a:	bf08      	it	eq
 c019c9c:	68ec      	ldreq	r4, [r5, #12]
 c019c9e:	e7e6      	b.n	c019c6e <__swsetup_r+0x1e>
 c019ca0:	0751      	lsls	r1, r2, #29
 c019ca2:	d512      	bpl.n	c019cca <__swsetup_r+0x7a>
 c019ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c019ca6:	b141      	cbz	r1, c019cba <__swsetup_r+0x6a>
 c019ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c019cac:	4299      	cmp	r1, r3
 c019cae:	d002      	beq.n	c019cb6 <__swsetup_r+0x66>
 c019cb0:	4630      	mov	r0, r6
 c019cb2:	f7fd fe9f 	bl	c0179f4 <_free_r>
 c019cb6:	2300      	movs	r3, #0
 c019cb8:	6363      	str	r3, [r4, #52]	; 0x34
 c019cba:	89a3      	ldrh	r3, [r4, #12]
 c019cbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 c019cc0:	81a3      	strh	r3, [r4, #12]
 c019cc2:	2300      	movs	r3, #0
 c019cc4:	6063      	str	r3, [r4, #4]
 c019cc6:	6923      	ldr	r3, [r4, #16]
 c019cc8:	6023      	str	r3, [r4, #0]
 c019cca:	89a3      	ldrh	r3, [r4, #12]
 c019ccc:	f043 0308 	orr.w	r3, r3, #8
 c019cd0:	81a3      	strh	r3, [r4, #12]
 c019cd2:	6923      	ldr	r3, [r4, #16]
 c019cd4:	b94b      	cbnz	r3, c019cea <__swsetup_r+0x9a>
 c019cd6:	89a3      	ldrh	r3, [r4, #12]
 c019cd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 c019cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c019ce0:	d003      	beq.n	c019cea <__swsetup_r+0x9a>
 c019ce2:	4621      	mov	r1, r4
 c019ce4:	4630      	mov	r0, r6
 c019ce6:	f000 f915 	bl	c019f14 <__smakebuf_r>
 c019cea:	89a2      	ldrh	r2, [r4, #12]
 c019cec:	f012 0301 	ands.w	r3, r2, #1
 c019cf0:	d00c      	beq.n	c019d0c <__swsetup_r+0xbc>
 c019cf2:	2300      	movs	r3, #0
 c019cf4:	60a3      	str	r3, [r4, #8]
 c019cf6:	6963      	ldr	r3, [r4, #20]
 c019cf8:	425b      	negs	r3, r3
 c019cfa:	61a3      	str	r3, [r4, #24]
 c019cfc:	6923      	ldr	r3, [r4, #16]
 c019cfe:	b953      	cbnz	r3, c019d16 <__swsetup_r+0xc6>
 c019d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c019d04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 c019d08:	d1ba      	bne.n	c019c80 <__swsetup_r+0x30>
 c019d0a:	bd70      	pop	{r4, r5, r6, pc}
 c019d0c:	0792      	lsls	r2, r2, #30
 c019d0e:	bf58      	it	pl
 c019d10:	6963      	ldrpl	r3, [r4, #20]
 c019d12:	60a3      	str	r3, [r4, #8]
 c019d14:	e7f2      	b.n	c019cfc <__swsetup_r+0xac>
 c019d16:	2000      	movs	r0, #0
 c019d18:	e7f7      	b.n	c019d0a <__swsetup_r+0xba>
 c019d1a:	bf00      	nop
 c019d1c:	30035b58 	.word	0x30035b58
 c019d20:	0c01a0a4 	.word	0x0c01a0a4
 c019d24:	0c01a0c4 	.word	0x0c01a0c4
 c019d28:	0c01a084 	.word	0x0c01a084

0c019d2c <_close_r>:
 c019d2c:	b538      	push	{r3, r4, r5, lr}
 c019d2e:	2300      	movs	r3, #0
 c019d30:	4c05      	ldr	r4, [pc, #20]	; (c019d48 <_close_r+0x1c>)
 c019d32:	4605      	mov	r5, r0
 c019d34:	4608      	mov	r0, r1
 c019d36:	6023      	str	r3, [r4, #0]
 c019d38:	f01a fba8 	bl	c03448c <_close>
 c019d3c:	1c43      	adds	r3, r0, #1
 c019d3e:	d102      	bne.n	c019d46 <_close_r+0x1a>
 c019d40:	6823      	ldr	r3, [r4, #0]
 c019d42:	b103      	cbz	r3, c019d46 <_close_r+0x1a>
 c019d44:	602b      	str	r3, [r5, #0]
 c019d46:	bd38      	pop	{r3, r4, r5, pc}
 c019d48:	3003c978 	.word	0x3003c978

0c019d4c <__sflush_r>:
 c019d4c:	898a      	ldrh	r2, [r1, #12]
 c019d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c019d52:	4605      	mov	r5, r0
 c019d54:	0710      	lsls	r0, r2, #28
 c019d56:	460c      	mov	r4, r1
 c019d58:	d458      	bmi.n	c019e0c <__sflush_r+0xc0>
 c019d5a:	684b      	ldr	r3, [r1, #4]
 c019d5c:	2b00      	cmp	r3, #0
 c019d5e:	dc05      	bgt.n	c019d6c <__sflush_r+0x20>
 c019d60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 c019d62:	2b00      	cmp	r3, #0
 c019d64:	dc02      	bgt.n	c019d6c <__sflush_r+0x20>
 c019d66:	2000      	movs	r0, #0
 c019d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c019d6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c019d6e:	2e00      	cmp	r6, #0
 c019d70:	d0f9      	beq.n	c019d66 <__sflush_r+0x1a>
 c019d72:	2300      	movs	r3, #0
 c019d74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 c019d78:	682f      	ldr	r7, [r5, #0]
 c019d7a:	6a21      	ldr	r1, [r4, #32]
 c019d7c:	602b      	str	r3, [r5, #0]
 c019d7e:	d032      	beq.n	c019de6 <__sflush_r+0x9a>
 c019d80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c019d82:	89a3      	ldrh	r3, [r4, #12]
 c019d84:	075a      	lsls	r2, r3, #29
 c019d86:	d505      	bpl.n	c019d94 <__sflush_r+0x48>
 c019d88:	6863      	ldr	r3, [r4, #4]
 c019d8a:	1ac0      	subs	r0, r0, r3
 c019d8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c019d8e:	b10b      	cbz	r3, c019d94 <__sflush_r+0x48>
 c019d90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c019d92:	1ac0      	subs	r0, r0, r3
 c019d94:	2300      	movs	r3, #0
 c019d96:	4602      	mov	r2, r0
 c019d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c019d9a:	4628      	mov	r0, r5
 c019d9c:	6a21      	ldr	r1, [r4, #32]
 c019d9e:	47b0      	blx	r6
 c019da0:	1c43      	adds	r3, r0, #1
 c019da2:	89a3      	ldrh	r3, [r4, #12]
 c019da4:	d106      	bne.n	c019db4 <__sflush_r+0x68>
 c019da6:	6829      	ldr	r1, [r5, #0]
 c019da8:	291d      	cmp	r1, #29
 c019daa:	d847      	bhi.n	c019e3c <__sflush_r+0xf0>
 c019dac:	4a28      	ldr	r2, [pc, #160]	; (c019e50 <__sflush_r+0x104>)
 c019dae:	40ca      	lsrs	r2, r1
 c019db0:	07d6      	lsls	r6, r2, #31
 c019db2:	d543      	bpl.n	c019e3c <__sflush_r+0xf0>
 c019db4:	2200      	movs	r2, #0
 c019db6:	04d9      	lsls	r1, r3, #19
 c019db8:	6062      	str	r2, [r4, #4]
 c019dba:	6922      	ldr	r2, [r4, #16]
 c019dbc:	6022      	str	r2, [r4, #0]
 c019dbe:	d504      	bpl.n	c019dca <__sflush_r+0x7e>
 c019dc0:	1c42      	adds	r2, r0, #1
 c019dc2:	d101      	bne.n	c019dc8 <__sflush_r+0x7c>
 c019dc4:	682b      	ldr	r3, [r5, #0]
 c019dc6:	b903      	cbnz	r3, c019dca <__sflush_r+0x7e>
 c019dc8:	6560      	str	r0, [r4, #84]	; 0x54
 c019dca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c019dcc:	602f      	str	r7, [r5, #0]
 c019dce:	2900      	cmp	r1, #0
 c019dd0:	d0c9      	beq.n	c019d66 <__sflush_r+0x1a>
 c019dd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c019dd6:	4299      	cmp	r1, r3
 c019dd8:	d002      	beq.n	c019de0 <__sflush_r+0x94>
 c019dda:	4628      	mov	r0, r5
 c019ddc:	f7fd fe0a 	bl	c0179f4 <_free_r>
 c019de0:	2000      	movs	r0, #0
 c019de2:	6360      	str	r0, [r4, #52]	; 0x34
 c019de4:	e7c0      	b.n	c019d68 <__sflush_r+0x1c>
 c019de6:	2301      	movs	r3, #1
 c019de8:	4628      	mov	r0, r5
 c019dea:	47b0      	blx	r6
 c019dec:	1c41      	adds	r1, r0, #1
 c019dee:	d1c8      	bne.n	c019d82 <__sflush_r+0x36>
 c019df0:	682b      	ldr	r3, [r5, #0]
 c019df2:	2b00      	cmp	r3, #0
 c019df4:	d0c5      	beq.n	c019d82 <__sflush_r+0x36>
 c019df6:	2b1d      	cmp	r3, #29
 c019df8:	d001      	beq.n	c019dfe <__sflush_r+0xb2>
 c019dfa:	2b16      	cmp	r3, #22
 c019dfc:	d101      	bne.n	c019e02 <__sflush_r+0xb6>
 c019dfe:	602f      	str	r7, [r5, #0]
 c019e00:	e7b1      	b.n	c019d66 <__sflush_r+0x1a>
 c019e02:	89a3      	ldrh	r3, [r4, #12]
 c019e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c019e08:	81a3      	strh	r3, [r4, #12]
 c019e0a:	e7ad      	b.n	c019d68 <__sflush_r+0x1c>
 c019e0c:	690f      	ldr	r7, [r1, #16]
 c019e0e:	2f00      	cmp	r7, #0
 c019e10:	d0a9      	beq.n	c019d66 <__sflush_r+0x1a>
 c019e12:	0793      	lsls	r3, r2, #30
 c019e14:	680e      	ldr	r6, [r1, #0]
 c019e16:	600f      	str	r7, [r1, #0]
 c019e18:	bf0c      	ite	eq
 c019e1a:	694b      	ldreq	r3, [r1, #20]
 c019e1c:	2300      	movne	r3, #0
 c019e1e:	eba6 0807 	sub.w	r8, r6, r7
 c019e22:	608b      	str	r3, [r1, #8]
 c019e24:	f1b8 0f00 	cmp.w	r8, #0
 c019e28:	dd9d      	ble.n	c019d66 <__sflush_r+0x1a>
 c019e2a:	4643      	mov	r3, r8
 c019e2c:	463a      	mov	r2, r7
 c019e2e:	6a21      	ldr	r1, [r4, #32]
 c019e30:	4628      	mov	r0, r5
 c019e32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 c019e34:	47b0      	blx	r6
 c019e36:	2800      	cmp	r0, #0
 c019e38:	dc06      	bgt.n	c019e48 <__sflush_r+0xfc>
 c019e3a:	89a3      	ldrh	r3, [r4, #12]
 c019e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c019e40:	f04f 30ff 	mov.w	r0, #4294967295
 c019e44:	81a3      	strh	r3, [r4, #12]
 c019e46:	e78f      	b.n	c019d68 <__sflush_r+0x1c>
 c019e48:	4407      	add	r7, r0
 c019e4a:	eba8 0800 	sub.w	r8, r8, r0
 c019e4e:	e7e9      	b.n	c019e24 <__sflush_r+0xd8>
 c019e50:	20400001 	.word	0x20400001

0c019e54 <_fflush_r>:
 c019e54:	b538      	push	{r3, r4, r5, lr}
 c019e56:	690b      	ldr	r3, [r1, #16]
 c019e58:	4605      	mov	r5, r0
 c019e5a:	460c      	mov	r4, r1
 c019e5c:	b1db      	cbz	r3, c019e96 <_fflush_r+0x42>
 c019e5e:	b118      	cbz	r0, c019e68 <_fflush_r+0x14>
 c019e60:	6983      	ldr	r3, [r0, #24]
 c019e62:	b90b      	cbnz	r3, c019e68 <_fflush_r+0x14>
 c019e64:	f7ff f988 	bl	c019178 <__sinit>
 c019e68:	4b0c      	ldr	r3, [pc, #48]	; (c019e9c <_fflush_r+0x48>)
 c019e6a:	429c      	cmp	r4, r3
 c019e6c:	d109      	bne.n	c019e82 <_fflush_r+0x2e>
 c019e6e:	686c      	ldr	r4, [r5, #4]
 c019e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c019e74:	b17b      	cbz	r3, c019e96 <_fflush_r+0x42>
 c019e76:	4621      	mov	r1, r4
 c019e78:	4628      	mov	r0, r5
 c019e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 c019e7e:	f7ff bf65 	b.w	c019d4c <__sflush_r>
 c019e82:	4b07      	ldr	r3, [pc, #28]	; (c019ea0 <_fflush_r+0x4c>)
 c019e84:	429c      	cmp	r4, r3
 c019e86:	d101      	bne.n	c019e8c <_fflush_r+0x38>
 c019e88:	68ac      	ldr	r4, [r5, #8]
 c019e8a:	e7f1      	b.n	c019e70 <_fflush_r+0x1c>
 c019e8c:	4b05      	ldr	r3, [pc, #20]	; (c019ea4 <_fflush_r+0x50>)
 c019e8e:	429c      	cmp	r4, r3
 c019e90:	bf08      	it	eq
 c019e92:	68ec      	ldreq	r4, [r5, #12]
 c019e94:	e7ec      	b.n	c019e70 <_fflush_r+0x1c>
 c019e96:	2000      	movs	r0, #0
 c019e98:	bd38      	pop	{r3, r4, r5, pc}
 c019e9a:	bf00      	nop
 c019e9c:	0c01a0a4 	.word	0x0c01a0a4
 c019ea0:	0c01a0c4 	.word	0x0c01a0c4
 c019ea4:	0c01a084 	.word	0x0c01a084

0c019ea8 <_lseek_r>:
 c019ea8:	b538      	push	{r3, r4, r5, lr}
 c019eaa:	4605      	mov	r5, r0
 c019eac:	4c06      	ldr	r4, [pc, #24]	; (c019ec8 <_lseek_r+0x20>)
 c019eae:	4608      	mov	r0, r1
 c019eb0:	4611      	mov	r1, r2
 c019eb2:	2200      	movs	r2, #0
 c019eb4:	6022      	str	r2, [r4, #0]
 c019eb6:	461a      	mov	r2, r3
 c019eb8:	f01a fb00 	bl	c0344bc <_lseek>
 c019ebc:	1c43      	adds	r3, r0, #1
 c019ebe:	d102      	bne.n	c019ec6 <_lseek_r+0x1e>
 c019ec0:	6823      	ldr	r3, [r4, #0]
 c019ec2:	b103      	cbz	r3, c019ec6 <_lseek_r+0x1e>
 c019ec4:	602b      	str	r3, [r5, #0]
 c019ec6:	bd38      	pop	{r3, r4, r5, pc}
 c019ec8:	3003c978 	.word	0x3003c978

0c019ecc <__swhatbuf_r>:
 c019ecc:	b570      	push	{r4, r5, r6, lr}
 c019ece:	460e      	mov	r6, r1
 c019ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c019ed4:	b096      	sub	sp, #88	; 0x58
 c019ed6:	4614      	mov	r4, r2
 c019ed8:	2900      	cmp	r1, #0
 c019eda:	461d      	mov	r5, r3
 c019edc:	da07      	bge.n	c019eee <__swhatbuf_r+0x22>
 c019ede:	2300      	movs	r3, #0
 c019ee0:	602b      	str	r3, [r5, #0]
 c019ee2:	89b3      	ldrh	r3, [r6, #12]
 c019ee4:	061a      	lsls	r2, r3, #24
 c019ee6:	d410      	bmi.n	c019f0a <__swhatbuf_r+0x3e>
 c019ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c019eec:	e00e      	b.n	c019f0c <__swhatbuf_r+0x40>
 c019eee:	466a      	mov	r2, sp
 c019ef0:	f000 f882 	bl	c019ff8 <_fstat_r>
 c019ef4:	2800      	cmp	r0, #0
 c019ef6:	dbf2      	blt.n	c019ede <__swhatbuf_r+0x12>
 c019ef8:	9a01      	ldr	r2, [sp, #4]
 c019efa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 c019efe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 c019f02:	425a      	negs	r2, r3
 c019f04:	415a      	adcs	r2, r3
 c019f06:	602a      	str	r2, [r5, #0]
 c019f08:	e7ee      	b.n	c019ee8 <__swhatbuf_r+0x1c>
 c019f0a:	2340      	movs	r3, #64	; 0x40
 c019f0c:	2000      	movs	r0, #0
 c019f0e:	6023      	str	r3, [r4, #0]
 c019f10:	b016      	add	sp, #88	; 0x58
 c019f12:	bd70      	pop	{r4, r5, r6, pc}

0c019f14 <__smakebuf_r>:
 c019f14:	898b      	ldrh	r3, [r1, #12]
 c019f16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c019f18:	079d      	lsls	r5, r3, #30
 c019f1a:	4606      	mov	r6, r0
 c019f1c:	460c      	mov	r4, r1
 c019f1e:	d507      	bpl.n	c019f30 <__smakebuf_r+0x1c>
 c019f20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 c019f24:	6023      	str	r3, [r4, #0]
 c019f26:	6123      	str	r3, [r4, #16]
 c019f28:	2301      	movs	r3, #1
 c019f2a:	6163      	str	r3, [r4, #20]
 c019f2c:	b002      	add	sp, #8
 c019f2e:	bd70      	pop	{r4, r5, r6, pc}
 c019f30:	ab01      	add	r3, sp, #4
 c019f32:	466a      	mov	r2, sp
 c019f34:	f7ff ffca 	bl	c019ecc <__swhatbuf_r>
 c019f38:	9900      	ldr	r1, [sp, #0]
 c019f3a:	4605      	mov	r5, r0
 c019f3c:	4630      	mov	r0, r6
 c019f3e:	f7fd fda7 	bl	c017a90 <_malloc_r>
 c019f42:	b948      	cbnz	r0, c019f58 <__smakebuf_r+0x44>
 c019f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c019f48:	059a      	lsls	r2, r3, #22
 c019f4a:	d4ef      	bmi.n	c019f2c <__smakebuf_r+0x18>
 c019f4c:	f023 0303 	bic.w	r3, r3, #3
 c019f50:	f043 0302 	orr.w	r3, r3, #2
 c019f54:	81a3      	strh	r3, [r4, #12]
 c019f56:	e7e3      	b.n	c019f20 <__smakebuf_r+0xc>
 c019f58:	4b0d      	ldr	r3, [pc, #52]	; (c019f90 <__smakebuf_r+0x7c>)
 c019f5a:	62b3      	str	r3, [r6, #40]	; 0x28
 c019f5c:	89a3      	ldrh	r3, [r4, #12]
 c019f5e:	6020      	str	r0, [r4, #0]
 c019f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c019f64:	6120      	str	r0, [r4, #16]
 c019f66:	81a3      	strh	r3, [r4, #12]
 c019f68:	9b00      	ldr	r3, [sp, #0]
 c019f6a:	6163      	str	r3, [r4, #20]
 c019f6c:	9b01      	ldr	r3, [sp, #4]
 c019f6e:	b15b      	cbz	r3, c019f88 <__smakebuf_r+0x74>
 c019f70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c019f74:	4630      	mov	r0, r6
 c019f76:	f000 f851 	bl	c01a01c <_isatty_r>
 c019f7a:	b128      	cbz	r0, c019f88 <__smakebuf_r+0x74>
 c019f7c:	89a3      	ldrh	r3, [r4, #12]
 c019f7e:	f023 0303 	bic.w	r3, r3, #3
 c019f82:	f043 0301 	orr.w	r3, r3, #1
 c019f86:	81a3      	strh	r3, [r4, #12]
 c019f88:	89a3      	ldrh	r3, [r4, #12]
 c019f8a:	431d      	orrs	r5, r3
 c019f8c:	81a5      	strh	r5, [r4, #12]
 c019f8e:	e7cd      	b.n	c019f2c <__smakebuf_r+0x18>
 c019f90:	0c019141 	.word	0x0c019141

0c019f94 <__ascii_mbtowc>:
 c019f94:	b082      	sub	sp, #8
 c019f96:	b901      	cbnz	r1, c019f9a <__ascii_mbtowc+0x6>
 c019f98:	a901      	add	r1, sp, #4
 c019f9a:	b142      	cbz	r2, c019fae <__ascii_mbtowc+0x1a>
 c019f9c:	b14b      	cbz	r3, c019fb2 <__ascii_mbtowc+0x1e>
 c019f9e:	7813      	ldrb	r3, [r2, #0]
 c019fa0:	600b      	str	r3, [r1, #0]
 c019fa2:	7812      	ldrb	r2, [r2, #0]
 c019fa4:	1c10      	adds	r0, r2, #0
 c019fa6:	bf18      	it	ne
 c019fa8:	2001      	movne	r0, #1
 c019faa:	b002      	add	sp, #8
 c019fac:	4770      	bx	lr
 c019fae:	4610      	mov	r0, r2
 c019fb0:	e7fb      	b.n	c019faa <__ascii_mbtowc+0x16>
 c019fb2:	f06f 0001 	mvn.w	r0, #1
 c019fb6:	e7f8      	b.n	c019faa <__ascii_mbtowc+0x16>

0c019fb8 <_read_r>:
 c019fb8:	b538      	push	{r3, r4, r5, lr}
 c019fba:	4605      	mov	r5, r0
 c019fbc:	4c06      	ldr	r4, [pc, #24]	; (c019fd8 <_read_r+0x20>)
 c019fbe:	4608      	mov	r0, r1
 c019fc0:	4611      	mov	r1, r2
 c019fc2:	2200      	movs	r2, #0
 c019fc4:	6022      	str	r2, [r4, #0]
 c019fc6:	461a      	mov	r2, r3
 c019fc8:	f01a fa80 	bl	c0344cc <_read>
 c019fcc:	1c43      	adds	r3, r0, #1
 c019fce:	d102      	bne.n	c019fd6 <_read_r+0x1e>
 c019fd0:	6823      	ldr	r3, [r4, #0]
 c019fd2:	b103      	cbz	r3, c019fd6 <_read_r+0x1e>
 c019fd4:	602b      	str	r3, [r5, #0]
 c019fd6:	bd38      	pop	{r3, r4, r5, pc}
 c019fd8:	3003c978 	.word	0x3003c978

0c019fdc <__ascii_wctomb>:
 c019fdc:	b149      	cbz	r1, c019ff2 <__ascii_wctomb+0x16>
 c019fde:	2aff      	cmp	r2, #255	; 0xff
 c019fe0:	bf8d      	iteet	hi
 c019fe2:	238a      	movhi	r3, #138	; 0x8a
 c019fe4:	700a      	strbls	r2, [r1, #0]
 c019fe6:	2001      	movls	r0, #1
 c019fe8:	6003      	strhi	r3, [r0, #0]
 c019fea:	bf88      	it	hi
 c019fec:	f04f 30ff 	movhi.w	r0, #4294967295
 c019ff0:	4770      	bx	lr
 c019ff2:	4608      	mov	r0, r1
 c019ff4:	4770      	bx	lr
	...

0c019ff8 <_fstat_r>:
 c019ff8:	b538      	push	{r3, r4, r5, lr}
 c019ffa:	2300      	movs	r3, #0
 c019ffc:	4c06      	ldr	r4, [pc, #24]	; (c01a018 <_fstat_r+0x20>)
 c019ffe:	4605      	mov	r5, r0
 c01a000:	4608      	mov	r0, r1
 c01a002:	4611      	mov	r1, r2
 c01a004:	6023      	str	r3, [r4, #0]
 c01a006:	f01a fa49 	bl	c03449c <_fstat>
 c01a00a:	1c43      	adds	r3, r0, #1
 c01a00c:	d102      	bne.n	c01a014 <_fstat_r+0x1c>
 c01a00e:	6823      	ldr	r3, [r4, #0]
 c01a010:	b103      	cbz	r3, c01a014 <_fstat_r+0x1c>
 c01a012:	602b      	str	r3, [r5, #0]
 c01a014:	bd38      	pop	{r3, r4, r5, pc}
 c01a016:	bf00      	nop
 c01a018:	3003c978 	.word	0x3003c978

0c01a01c <_isatty_r>:
 c01a01c:	b538      	push	{r3, r4, r5, lr}
 c01a01e:	2300      	movs	r3, #0
 c01a020:	4c05      	ldr	r4, [pc, #20]	; (c01a038 <_isatty_r+0x1c>)
 c01a022:	4605      	mov	r5, r0
 c01a024:	4608      	mov	r0, r1
 c01a026:	6023      	str	r3, [r4, #0]
 c01a028:	f01a fa40 	bl	c0344ac <_isatty>
 c01a02c:	1c43      	adds	r3, r0, #1
 c01a02e:	d102      	bne.n	c01a036 <_isatty_r+0x1a>
 c01a030:	6823      	ldr	r3, [r4, #0]
 c01a032:	b103      	cbz	r3, c01a036 <_isatty_r+0x1a>
 c01a034:	602b      	str	r3, [r5, #0]
 c01a036:	bd38      	pop	{r3, r4, r5, pc}
 c01a038:	3003c978 	.word	0x3003c978

0c01a03c <_global_impure_ptr>:
 c01a03c:	30035b5c 00464e49 00666e69 004e414e     \[.0INF.inf.NAN.
 c01a04c:	006e616e 31300030 35343332 39383736     nan.0.0123456789
 c01a05c:	44434241 30004645 34333231 38373635     ABCDEF.012345678
 c01a06c:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
 c01a07c:	4e614e00 00000000                       .NaN....

0c01a084 <__sf_fake_stderr>:
	...

0c01a0a4 <__sf_fake_stdin>:
	...

0c01a0c4 <__sf_fake_stdout>:
	...

0c01a0e8 <__mprec_bigtens>:
 c01a0e8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 c01a0f8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 c01a108:	7f73bf3c 75154fdd                       <.s..O.u

0c01a110 <__mprec_tens>:
 c01a110:	00000000 3ff00000 00000000 40240000     .......?......$@
 c01a120:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 c01a130:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 c01a140:	00000000 412e8480 00000000 416312d0     .......A......cA
 c01a150:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 c01a160:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 c01a170:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 c01a180:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 c01a190:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 c01a1a0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 c01a1b0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 c01a1c0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 c01a1d0:	79d99db4 44ea7843                       ...yCx.D

0c01a1d8 <p05.6084>:
 c01a1d8:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
 c01a1e8:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
 c01a1f8:	5849534f                                 OSIX...

0c01a1ff <_ctype_>:
 c01a1ff:	20202000 20202020 28282020 20282828     .         ((((( 
 c01a20f:	20202020 20202020 20202020 20202020                     
 c01a21f:	10108820 10101010 10101010 10101010      ...............
 c01a22f:	04040410 04040404 10040404 10101010     ................
 c01a23f:	41411010 41414141 01010101 01010101     ..AAAAAA........
 c01a24f:	01010101 01010101 01010101 10101010     ................
 c01a25f:	42421010 42424242 02020202 02020202     ..BBBBBB........
 c01a26f:	02020202 02020202 02020202 10101010     ................
 c01a27f:	00000020 00000000 00000000 00000000      ...............
	...

0c01a300 <jump_to_ns_code>:
#pragma diag_suppress=Pe940
#endif
nsfptr_t ns_entry;

void jump_to_ns_code(void)
{
 c01a300:	b510      	push	{r4, lr}
    /* Calls the non-secure Reset_Handler to jump to the non-secure binary */
    ns_entry();
 c01a302:	4b05      	ldr	r3, [pc, #20]	; (c01a318 <jump_to_ns_code+0x18>)
 c01a304:	681c      	ldr	r4, [r3, #0]
 c01a306:	0864      	lsrs	r4, r4, #1
 c01a308:	0064      	lsls	r4, r4, #1
 c01a30a:	4620      	mov	r0, r4
 c01a30c:	4621      	mov	r1, r4
 c01a30e:	4622      	mov	r2, r4
 c01a310:	4623      	mov	r3, r4
 c01a312:	f001 fae7 	bl	c01b8e4 <__gnu_cmse_nonsecure_call>
}
 c01a316:	bd10      	pop	{r4, pc}
 c01a318:	30031000 	.word	0x30031000

0c01a31c <tfm_core_get_boot_data>:
__attribute__((naked))
int32_t tfm_core_get_boot_data(uint8_t major_type,
                               struct tfm_boot_data *boot_status,
                               uint32_t len)
{
    __ASM volatile(
 c01a31c:	df07      	svc	7
 c01a31e:	4770      	bx	lr

0c01a320 <tfm_core_get_boot_value>:
__attribute__((naked))
int32_t tfm_core_get_boot_value(uint16_t tlv_value,
                               void *ptr,
                               uint32_t len)
{
    __ASM volatile(
 c01a320:	df1d      	svc	29
 c01a322:	4770      	bx	lr

0c01a324 <tfm_plat_get_crypto_huk>:
  * \param[in]   size   Length of the key
  *
  */

enum tfm_plat_err_t tfm_plat_get_crypto_huk(uint8_t *key, uint32_t size)
{
 c01a324:	b530      	push	{r4, r5, lr}
  enum tfm_status_e tfm_res;
  uint8_t full_huk[TFM_PROVISION_HUK_LEN_BYTES];
  uint32_t i;
  if (size > TFM_HUK_KEY_LEN_BYTES)
 c01a326:	2910      	cmp	r1, #16
{
 c01a328:	b089      	sub	sp, #36	; 0x24
 c01a32a:	4605      	mov	r5, r0
 c01a32c:	460c      	mov	r4, r1
  if (size > TFM_HUK_KEY_LEN_BYTES)
 c01a32e:	d902      	bls.n	c01a336 <tfm_plat_get_crypto_huk+0x12>
  {
    return TFM_PLAT_ERR_SYSTEM_ERR;
 c01a330:	2001      	movs	r0, #1
  {
      key[i]  = full_huk[i];
      full_huk[i]=0;
  }
  return TFM_PLAT_ERR_SUCCESS;
}
 c01a332:	b009      	add	sp, #36	; 0x24
 c01a334:	bd30      	pop	{r4, r5, pc}
  tfm_res = (enum tfm_status_e)tfm_core_get_boot_value(SET_TLV_TYPE(TLV_MAJOR_SST, TLV_MINOR_CORE_HUK),full_huk, sizeof(full_huk));
 c01a336:	2220      	movs	r2, #32
 c01a338:	4669      	mov	r1, sp
 c01a33a:	f642 0055 	movw	r0, #10325	; 0x2855
 c01a33e:	f7ff ffef 	bl	c01a320 <tfm_core_get_boot_value>
  if (tfm_res != TFM_SUCCESS)
 c01a342:	b2c0      	uxtb	r0, r0
 c01a344:	2800      	cmp	r0, #0
 c01a346:	d1f3      	bne.n	c01a330 <tfm_plat_get_crypto_huk+0xc>
 c01a348:	4603      	mov	r3, r0
  for (i = 0; i < size ; i++)
 c01a34a:	42a0      	cmp	r0, r4
 c01a34c:	d101      	bne.n	c01a352 <tfm_plat_get_crypto_huk+0x2e>
  return TFM_PLAT_ERR_SUCCESS;
 c01a34e:	2000      	movs	r0, #0
 c01a350:	e7ef      	b.n	c01a332 <tfm_plat_get_crypto_huk+0xe>
      key[i]  = full_huk[i];
 c01a352:	f81d 2000 	ldrb.w	r2, [sp, r0]
      full_huk[i]=0;
 c01a356:	f80d 3000 	strb.w	r3, [sp, r0]
      key[i]  = full_huk[i];
 c01a35a:	542a      	strb	r2, [r5, r0]
  for (i = 0; i < size ; i++)
 c01a35c:	3001      	adds	r0, #1
 c01a35e:	e7f4      	b.n	c01a34a <tfm_plat_get_crypto_huk+0x26>

0c01a360 <tfm_plat_get_initial_attest_key>:
  uint32_t i;
  uint32_t *priv_key_dst;
  uint8_t *key_dst;
  uint32_t key_size;
  uint32_t full_key_size = 3 * TFM_IAS_KEY_LEN_BYTES;
  if (size < full_key_size)
 c01a360:	295f      	cmp	r1, #95	; 0x5f
{
 c01a362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c01a364:	4604      	mov	r4, r0
 c01a366:	4615      	mov	r5, r2
  if (size < full_key_size)
 c01a368:	d801      	bhi.n	c01a36e <tfm_plat_get_initial_attest_key+0xe>
  {
    return TFM_PLAT_ERR_SYSTEM_ERR;
 c01a36a:	2001      	movs	r0, #1
  }
  ecc_key->puby_key = key_dst;
  ecc_key->puby_key_size = key_size;

  return TFM_PLAT_ERR_SUCCESS;
}
 c01a36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tfm_res = (enum tfm_status_e)tfm_core_get_boot_value(SET_TLV_TYPE(TLV_MAJOR_CORE, TLV_MINOR_CORE_IAS_KEY_TYPE),
 c01a36e:	2201      	movs	r2, #1
 c01a370:	4619      	mov	r1, r3
 c01a372:	f640 3054 	movw	r0, #2900	; 0xb54
 c01a376:	f7ff ffd3 	bl	c01a320 <tfm_core_get_boot_value>
  if (tfm_res != TFM_SUCCESS)
 c01a37a:	f010 0fff 	tst.w	r0, #255	; 0xff
 c01a37e:	d1f4      	bne.n	c01a36a <tfm_plat_get_initial_attest_key+0xa>
 c01a380:	4b12      	ldr	r3, [pc, #72]	; (c01a3cc <tfm_plat_get_initial_attest_key+0x6c>)
  for (i = 0; i < (key_size / 4) ; i++)
 c01a382:	4913      	ldr	r1, [pc, #76]	; (c01a3d0 <tfm_plat_get_initial_attest_key+0x70>)
 c01a384:	1f22      	subs	r2, r4, #4

  tmp = (uint32_t)(&(TAMP->BKP0R));
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 c01a386:	f853 0b04 	ldr.w	r0, [r3], #4
 c01a38a:	428b      	cmp	r3, r1
    priv_key_dst[i]  = LL_RTC_BKP_GetRegister(NULL, i);
 c01a38c:	f842 0f04 	str.w	r0, [r2, #4]!
  for (i = 0; i < (key_size / 4) ; i++)
 c01a390:	d1f9      	bne.n	c01a386 <tfm_plat_get_initial_attest_key+0x26>
  ecc_key->priv_key_size = key_size;
 c01a392:	2620      	movs	r6, #32
  key_dst  = key_dst + key_size;
 c01a394:	19a7      	adds	r7, r4, r6
  ecc_key->priv_key = key_dst;
 c01a396:	602c      	str	r4, [r5, #0]
  ecc_key->priv_key_size = key_size;
 c01a398:	606e      	str	r6, [r5, #4]
  tfm_res = (enum tfm_status_e)tfm_core_get_boot_value(SET_TLV_TYPE(TLV_MAJOR_CORE, TLV_MINOR_CORE_IAS_PUB_KEY_X), key_dst, key_size);
 c01a39a:	4632      	mov	r2, r6
 c01a39c:	4639      	mov	r1, r7
 c01a39e:	f640 3058 	movw	r0, #2904	; 0xb58
 c01a3a2:	f7ff ffbd 	bl	c01a320 <tfm_core_get_boot_value>
  if (tfm_res != TFM_SUCCESS)
 c01a3a6:	f010 0fff 	tst.w	r0, #255	; 0xff
 c01a3aa:	d1de      	bne.n	c01a36a <tfm_plat_get_initial_attest_key+0xa>
  key_dst  = key_dst + key_size;
 c01a3ac:	3440      	adds	r4, #64	; 0x40
  ecc_key->pubx_key_size = key_size;
 c01a3ae:	e9c5 7602 	strd	r7, r6, [r5, #8]
  tfm_res = (enum tfm_status_e)tfm_core_get_boot_value(SET_TLV_TYPE(TLV_MAJOR_CORE, TLV_MINOR_CORE_IAS_PUB_KEY_Y), key_dst, key_size);
 c01a3b2:	4632      	mov	r2, r6
 c01a3b4:	4621      	mov	r1, r4
 c01a3b6:	f640 3059 	movw	r0, #2905	; 0xb59
 c01a3ba:	f7ff ffb1 	bl	c01a320 <tfm_core_get_boot_value>
  if (tfm_res != TFM_SUCCESS)
 c01a3be:	b2c0      	uxtb	r0, r0
 c01a3c0:	2800      	cmp	r0, #0
 c01a3c2:	d1d2      	bne.n	c01a36a <tfm_plat_get_initial_attest_key+0xa>
  ecc_key->puby_key_size = key_size;
 c01a3c4:	e9c5 4604 	strd	r4, r6, [r5, #16]
  return TFM_PLAT_ERR_SUCCESS;
 c01a3c8:	e7d0      	b.n	c01a36c <tfm_plat_get_initial_attest_key+0xc>
 c01a3ca:	bf00      	nop
 c01a3cc:	50003500 	.word	0x50003500
 c01a3d0:	50003520 	.word	0x50003520

0c01a3d4 <tfm_plat_get_boot_seed>:
#include "tfm_secure_api.h"

enum tfm_plat_err_t tfm_plat_get_boot_seed(uint32_t size, uint8_t *buf)
{
    return  TFM_PLAT_ERR_SYSTEM_ERR;
}
 c01a3d4:	2001      	movs	r0, #1
 c01a3d6:	4770      	bx	lr

0c01a3d8 <tfm_plat_get_instance_id>:
  *  - byte 0:    0x01 indicates the type of UEID to be GUID
  *  - byte 1-32: Hash of attestation public key. Public key is hashed in raw
  *               format without any encoding.
  */
enum tfm_plat_err_t tfm_plat_get_instance_id(uint32_t *size, uint8_t *buf)
{
 c01a3d8:	b508      	push	{r3, lr}
  uint8_t *p_dst;
  int32_t tfm_res;

  if (*size < INSTANCE_ID_MAX_SIZE)
 c01a3da:	6803      	ldr	r3, [r0, #0]
 c01a3dc:	2b20      	cmp	r3, #32
 c01a3de:	f04f 0301 	mov.w	r3, #1
 c01a3e2:	d90d      	bls.n	c01a400 <tfm_plat_get_instance_id+0x28>
  {
    return TFM_PLAT_ERR_SYSTEM_ERR;
  }
  /*  platform support maximum size */
  *size = INSTANCE_ID_MAX_SIZE;
 c01a3e4:	2221      	movs	r2, #33	; 0x21
 c01a3e6:	6002      	str	r2, [r0, #0]

  buf[0] = 0x01; /* First byte is type byte:  0x01 indicates GUID */
 c01a3e8:	f801 3b01 	strb.w	r3, [r1], #1
  p_dst = &buf[1];
  tfm_res = tfm_core_get_boot_value(SET_TLV_TYPE(TLV_MAJOR_CORE, TLV_MINOR_CORE_IAS_PUB_KEY_HASH), p_dst, (*size) - 1);
 c01a3ec:	6802      	ldr	r2, [r0, #0]
 c01a3ee:	f640 3048 	movw	r0, #2888	; 0xb48
 c01a3f2:	3a01      	subs	r2, #1
 c01a3f4:	f7ff ff94 	bl	c01a320 <tfm_core_get_boot_value>
  if (tfm_res != TFM_SUCCESS)
 c01a3f8:	3000      	adds	r0, #0
 c01a3fa:	bf18      	it	ne
 c01a3fc:	2001      	movne	r0, #1
  {
    return  TFM_PLAT_ERR_SYSTEM_ERR;
  }
  return TFM_PLAT_ERR_SUCCESS;
}
 c01a3fe:	bd08      	pop	{r3, pc}
    return TFM_PLAT_ERR_SYSTEM_ERR;
 c01a400:	4618      	mov	r0, r3
 c01a402:	e7fc      	b.n	c01a3fe <tfm_plat_get_instance_id+0x26>

0c01a404 <tfm_plat_get_implementation_id>:

enum tfm_plat_err_t tfm_plat_get_implementation_id(uint32_t *size,
                                                   uint8_t  *buf)
{
 c01a404:	b508      	push	{r3, lr}
  uint8_t *p_dst;
  int32_t tfm_res;;
  p_dst = &buf[0];
  if (*size < IMPLEMENTATION_ID_MAX_SIZE)
 c01a406:	6803      	ldr	r3, [r0, #0]
 c01a408:	2b1f      	cmp	r3, #31
 c01a40a:	d909      	bls.n	c01a420 <tfm_plat_get_implementation_id+0x1c>
  {
    return TFM_PLAT_ERR_SYSTEM_ERR;
  }
  /*  platform support maximum size */
  *size = IMPLEMENTATION_ID_MAX_SIZE;
 c01a40c:	2220      	movs	r2, #32
 c01a40e:	6002      	str	r2, [r0, #0]

  tfm_res = tfm_core_get_boot_value(SET_TLV_TYPE(TLV_MAJOR_CORE, TLV_MINOR_CORE_IAS_IMPLEMENTATION_ID), p_dst, (*size));
 c01a410:	f640 10cd 	movw	r0, #2509	; 0x9cd
 c01a414:	f7ff ff84 	bl	c01a320 <tfm_core_get_boot_value>
  if (tfm_res != (int32_t)TFM_SUCCESS)
 c01a418:	3000      	adds	r0, #0
 c01a41a:	bf18      	it	ne
 c01a41c:	2001      	movne	r0, #1
  {
    return  TFM_PLAT_ERR_SYSTEM_ERR;
  }
  return TFM_PLAT_ERR_SUCCESS;
}
 c01a41e:	bd08      	pop	{r3, pc}
    return TFM_PLAT_ERR_SYSTEM_ERR;
 c01a420:	2001      	movs	r0, #1
 c01a422:	e7fc      	b.n	c01a41e <tfm_plat_get_implementation_id+0x1a>

0c01a424 <tfm_plat_get_hw_version>:
  uint32_t hw_version_size = 12;
#else
  const uint8_t *p_hw_version = (uint8_t *)&DBGMCU->IDCODE;
  uint32_t hw_version_size = 4;
#endif
  if (*size < hw_version_size)
 c01a424:	6803      	ldr	r3, [r0, #0]
 c01a426:	2b03      	cmp	r3, #3
 c01a428:	d90f      	bls.n	c01a44a <tfm_plat_get_hw_version+0x26>
    *p_dst = *p_src;
 c01a42a:	4b09      	ldr	r3, [pc, #36]	; (c01a450 <tfm_plat_get_hw_version+0x2c>)
 c01a42c:	781b      	ldrb	r3, [r3, #0]
 c01a42e:	700b      	strb	r3, [r1, #0]
 c01a430:	4b08      	ldr	r3, [pc, #32]	; (c01a454 <tfm_plat_get_hw_version+0x30>)
 c01a432:	781b      	ldrb	r3, [r3, #0]
 c01a434:	704b      	strb	r3, [r1, #1]
 c01a436:	4b08      	ldr	r3, [pc, #32]	; (c01a458 <tfm_plat_get_hw_version+0x34>)
 c01a438:	781b      	ldrb	r3, [r3, #0]
 c01a43a:	708b      	strb	r3, [r1, #2]
 c01a43c:	4b07      	ldr	r3, [pc, #28]	; (c01a45c <tfm_plat_get_hw_version+0x38>)
 c01a43e:	781b      	ldrb	r3, [r3, #0]
 c01a440:	70cb      	strb	r3, [r1, #3]
  {
    return TFM_PLAT_ERR_SYSTEM_ERR;
  }
  /*  recopy  */
  copy_id(buf, p_hw_version, hw_version_size);
  *size = hw_version_size;
 c01a442:	2304      	movs	r3, #4
 c01a444:	6003      	str	r3, [r0, #0]

  return TFM_PLAT_ERR_SUCCESS;
 c01a446:	2000      	movs	r0, #0
 c01a448:	4770      	bx	lr
    return TFM_PLAT_ERR_SYSTEM_ERR;
 c01a44a:	2001      	movs	r0, #1
}
 c01a44c:	4770      	bx	lr
 c01a44e:	bf00      	nop
 c01a450:	e0044000 	.word	0xe0044000
 c01a454:	e0044001 	.word	0xe0044001
 c01a458:	e0044002 	.word	0xe0044002
 c01a45c:	e0044003 	.word	0xe0044003

0c01a460 <psa_framework_version>:
#pragma diag_suppress=Pe940
#endif
__attribute__((naked, section("SFN")))
uint32_t psa_framework_version(void)
{
    __ASM volatile("SVC %0           \n"
 c01a460:	df10      	svc	16
 c01a462:	4770      	bx	lr

0c01a464 <psa_version>:
}

__attribute__((naked, section("SFN")))
uint32_t psa_version(uint32_t sid)
{
    __ASM volatile("SVC %0           \n"
 c01a464:	df11      	svc	17
 c01a466:	4770      	bx	lr

0c01a468 <psa_connect>:
}

__attribute__((naked, section("SFN")))
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    __ASM volatile("SVC %0           \n"
 c01a468:	df12      	svc	18
 c01a46a:	4770      	bx	lr

0c01a46c <psa_call>:
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
    __ASM volatile("SVC %0           \n"
 c01a46c:	df13      	svc	19
 c01a46e:	4770      	bx	lr

0c01a470 <psa_close>:
#endif

__attribute__((naked, section("SFN")))
void psa_close(psa_handle_t handle)
{
    __ASM volatile("SVC %0           \n"
 c01a470:	df14      	svc	20
 c01a472:	4770      	bx	lr

0c01a474 <psa_wait>:
#endif
__attribute__((naked, section("SFN")))
psa_signal_t psa_wait(psa_signal_t signal_mask, uint32_t timeout)

{
    __ASM volatile("SVC %0           \n"
 c01a474:	df0c      	svc	12
 c01a476:	4770      	bx	lr

0c01a478 <psa_get>:
}

__attribute__((naked, section("SFN")))
psa_status_t psa_get(psa_signal_t signal, psa_msg_t *msg)
{
    __ASM volatile("SVC %0           \n"
 c01a478:	df15      	svc	21
 c01a47a:	4770      	bx	lr

0c01a47c <psa_set_rhandle>:
}

__attribute__((naked, section("SFN")))
void psa_set_rhandle(psa_handle_t msg_handle, void *rhandle)
{
    __ASM volatile("SVC %0           \n"
 c01a47c:	df16      	svc	22
 c01a47e:	4770      	bx	lr

0c01a480 <psa_read>:
__attribute__((naked, section("SFN")))
size_t psa_read(psa_handle_t msg_handle, uint32_t invec_idx,
                void *buffer, size_t num_bytes)

{
    __ASM volatile("SVC %0           \n"
 c01a480:	df17      	svc	23
 c01a482:	4770      	bx	lr

0c01a484 <psa_skip>:
}

__attribute__((naked, section("SFN")))
size_t psa_skip(psa_handle_t msg_handle, uint32_t invec_idx, size_t num_bytes)
{
    __ASM volatile("SVC %0           \n"
 c01a484:	df18      	svc	24
 c01a486:	4770      	bx	lr

0c01a488 <psa_write>:

__attribute__((naked, section("SFN")))
void psa_write(psa_handle_t msg_handle, uint32_t outvec_idx,
               const void *buffer, size_t num_bytes)
{
    __ASM volatile("SVC %0           \n"
 c01a488:	df19      	svc	25
 c01a48a:	4770      	bx	lr

0c01a48c <psa_reply>:
}

__attribute__((naked, section("SFN")))
void psa_reply(psa_handle_t msg_handle, psa_status_t retval)
{
    __ASM volatile("SVC %0           \n"
 c01a48c:	df1a      	svc	26
 c01a48e:	4770      	bx	lr

0c01a490 <psa_notify>:
}

__attribute__((naked, section("SFN")))
void psa_notify(int32_t partition_id)
{
    __ASM volatile("SVC %0           \n"
 c01a490:	df1b      	svc	27
 c01a492:	4770      	bx	lr

0c01a494 <psa_clear>:
}

__attribute__((naked, section("SFN")))
void psa_clear(void)
{
    __ASM volatile("SVC %0           \n"
 c01a494:	df1c      	svc	28
 c01a496:	4770      	bx	lr

0c01a498 <psa_eoi>:
}

__attribute__((naked, section("SFN")))
void psa_eoi(psa_signal_t irq_signal)
{
    __ASM volatile("SVC %0           \n"
 c01a498:	df0d      	svc	13
 c01a49a:	4770      	bx	lr

0c01a49c <tfm_spm_partition_change_privilege>:
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 c01a49c:	f3ef 8314 	mrs	r3, CONTROL
{
    CONTROL_Type ctrl;

    ctrl.w = __get_CONTROL();

    if (privileged == TFM_PARTITION_PRIVILEGED_MODE) {
 c01a4a0:	2801      	cmp	r0, #1
        ctrl.b.nPRIV = 0;
 c01a4a2:	bf0c      	ite	eq
 c01a4a4:	f36f 0300 	bfceq	r3, #0, #1
    } else {
        ctrl.b.nPRIV = 1;
 c01a4a8:	f043 0301 	orrne.w	r3, r3, #1
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 c01a4ac:	f383 8814 	msr	CONTROL, r3
    }

    __set_CONTROL(ctrl.w);
}
 c01a4b0:	4770      	bx	lr

0c01a4b2 <psa_crypto_init>:
{
    /* Service init is performed during TFM boot up,
     * so application level initialisation is empty
     */
    return PSA_SUCCESS;
}
 c01a4b2:	2000      	movs	r0, #0
 c01a4b4:	4770      	bx	lr

0c01a4b6 <psa_allocate_key>:

__attribute__((section("SFN")))
psa_status_t psa_allocate_key(psa_key_handle_t *handle)
{
 c01a4b6:	b530      	push	{r4, r5, lr}
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    const struct tfm_crypto_pack_iovec iov = {
 c01a4b8:	2434      	movs	r4, #52	; 0x34
{
 c01a4ba:	b095      	sub	sp, #84	; 0x54
    const struct tfm_crypto_pack_iovec iov = {
 c01a4bc:	ab07      	add	r3, sp, #28
{
 c01a4be:	4605      	mov	r5, r0
    const struct tfm_crypto_pack_iovec iov = {
 c01a4c0:	4622      	mov	r2, r4
 c01a4c2:	2100      	movs	r1, #0
 c01a4c4:	4618      	mov	r0, r3
 c01a4c6:	f7fd fa7e 	bl	c0179c6 <memset>
        .sfn_id = TFM_CRYPTO_ALLOCATE_KEY_SID,
    };
    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };
    psa_outvec out_vec[] = {
 c01a4ca:	2302      	movs	r3, #2
    psa_invec in_vec[] = {
 c01a4cc:	e9cd 0403 	strd	r0, r4, [sp, #12]
        {.base = handle, .len = sizeof(psa_key_handle_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01a4d0:	2101      	movs	r1, #1
 c01a4d2:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01a4d4:	9505      	str	r5, [sp, #20]
 c01a4d6:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01a4d8:	f7ff ffc6 	bl	c01a468 <psa_connect>
 c01a4dc:	1e05      	subs	r5, r0, #0
 c01a4de:	dd0e      	ble.n	c01a4fe <psa_allocate_key+0x48>
#endif

    status = API_DISPATCH(tfm_crypto_allocate_key,
 c01a4e0:	2301      	movs	r3, #1
 c01a4e2:	aa05      	add	r2, sp, #20
 c01a4e4:	9200      	str	r2, [sp, #0]
 c01a4e6:	9301      	str	r3, [sp, #4]
 c01a4e8:	aa03      	add	r2, sp, #12
 c01a4ea:	2100      	movs	r1, #0
 c01a4ec:	f7ff ffbe 	bl	c01a46c <psa_call>
 c01a4f0:	4604      	mov	r4, r0
                          TFM_CRYPTO_ALLOCATE_KEY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01a4f2:	4628      	mov	r0, r5
 c01a4f4:	f7ff ffbc 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01a4f8:	4620      	mov	r0, r4
 c01a4fa:	b015      	add	sp, #84	; 0x54
 c01a4fc:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01a4fe:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01a502:	e7f9      	b.n	c01a4f8 <psa_allocate_key+0x42>

0c01a504 <psa_open_key>:
    (void)handle;

    /* TODO: Persistent key APIs are not supported yet */
    return PSA_ERROR_NOT_SUPPORTED;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01a504:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c01a508:	4770      	bx	lr

0c01a50a <psa_create_key>:
 c01a50a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c01a50e:	4770      	bx	lr

0c01a510 <psa_close_key>:
    (void)handle;

    /* TODO: Persistent key APIs are not supported yet */
    return PSA_ERROR_NOT_SUPPORTED;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01a510:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c01a514:	4770      	bx	lr

0c01a516 <psa_import_key>:
__attribute__((section("SFN")))
psa_status_t psa_import_key(psa_key_handle_t handle,
                            psa_key_type_t type,
                            const uint8_t *data,
                            size_t data_length)
{
 c01a516:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01a518:	b095      	sub	sp, #84	; 0x54
 c01a51a:	4615      	mov	r5, r2
 c01a51c:	4607      	mov	r7, r0
 c01a51e:	460e      	mov	r6, r1
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01a520:	222e      	movs	r2, #46	; 0x2e
 c01a522:	2100      	movs	r1, #0
 c01a524:	f10d 0022 	add.w	r0, sp, #34	; 0x22
{
 c01a528:	461c      	mov	r4, r3
    struct tfm_crypto_pack_iovec iov = {
 c01a52a:	f7fd fa4c 	bl	c0179c6 <memset>
        .sfn_id = TFM_CRYPTO_IMPORT_KEY_SID,
        .key_handle = handle,
        .type = type,
    };
    psa_invec in_vec[] = {
 c01a52e:	ab07      	add	r3, sp, #28
    struct tfm_crypto_pack_iovec iov = {
 c01a530:	2101      	movs	r1, #1
    psa_invec in_vec[] = {
 c01a532:	9303      	str	r3, [sp, #12]
 c01a534:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = data, .len = data_length}
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01a536:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c01a538:	e9cd 3504 	strd	r3, r5, [sp, #16]
    struct tfm_crypto_pack_iovec iov = {
 c01a53c:	9107      	str	r1, [sp, #28]
 c01a53e:	f8ad 7020 	strh.w	r7, [sp, #32]
 c01a542:	9609      	str	r6, [sp, #36]	; 0x24
    psa_invec in_vec[] = {
 c01a544:	9406      	str	r4, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01a546:	f7ff ff8f 	bl	c01a468 <psa_connect>
 c01a54a:	1e05      	subs	r5, r0, #0
 c01a54c:	dd0d      	ble.n	c01a56a <psa_import_key+0x54>
#endif

    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_import_key,
 c01a54e:	2100      	movs	r1, #0
 c01a550:	2302      	movs	r3, #2
 c01a552:	e9cd 1100 	strd	r1, r1, [sp]
 c01a556:	aa03      	add	r2, sp, #12
 c01a558:	f7ff ff88 	bl	c01a46c <psa_call>
 c01a55c:	4604      	mov	r4, r0
                                    TFM_CRYPTO_IMPORT_KEY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01a55e:	4628      	mov	r0, r5
 c01a560:	f7ff ff86 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01a564:	4620      	mov	r0, r4
 c01a566:	b015      	add	sp, #84	; 0x54
 c01a568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01a56a:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01a56e:	e7f9      	b.n	c01a564 <psa_import_key+0x4e>

0c01a570 <psa_destroy_key>:

__attribute__((section("SFN")))
psa_status_t psa_destroy_key(psa_key_handle_t handle)
{
 c01a570:	b530      	push	{r4, r5, lr}
 c01a572:	b093      	sub	sp, #76	; 0x4c
 c01a574:	4604      	mov	r4, r0
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01a576:	222e      	movs	r2, #46	; 0x2e
 c01a578:	2100      	movs	r1, #0
 c01a57a:	f10d 001a 	add.w	r0, sp, #26
 c01a57e:	f7fd fa22 	bl	c0179c6 <memset>
 c01a582:	2302      	movs	r3, #2
 c01a584:	9305      	str	r3, [sp, #20]
        .sfn_id = TFM_CRYPTO_DESTROY_KEY_SID,
        .key_handle = handle,
    };
    psa_invec in_vec[] = {
 c01a586:	ab05      	add	r3, sp, #20
 c01a588:	9303      	str	r3, [sp, #12]
 c01a58a:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01a58c:	2101      	movs	r1, #1
 c01a58e:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01a590:	f8ad 4018 	strh.w	r4, [sp, #24]
    psa_invec in_vec[] = {
 c01a594:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c01a596:	f7ff ff67 	bl	c01a468 <psa_connect>
 c01a59a:	1e05      	subs	r5, r0, #0
 c01a59c:	dd0d      	ble.n	c01a5ba <psa_destroy_key+0x4a>
#endif

    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_destroy_key,
 c01a59e:	2100      	movs	r1, #0
 c01a5a0:	2301      	movs	r3, #1
 c01a5a2:	e9cd 1100 	strd	r1, r1, [sp]
 c01a5a6:	aa03      	add	r2, sp, #12
 c01a5a8:	f7ff ff60 	bl	c01a46c <psa_call>
 c01a5ac:	4604      	mov	r4, r0
                                    TFM_CRYPTO_DESTROY_KEY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01a5ae:	4628      	mov	r0, r5
 c01a5b0:	f7ff ff5e 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01a5b4:	4620      	mov	r0, r4
 c01a5b6:	b013      	add	sp, #76	; 0x4c
 c01a5b8:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01a5ba:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01a5be:	e7f9      	b.n	c01a5b4 <psa_destroy_key+0x44>

0c01a5c0 <psa_get_key_information>:

__attribute__((section("SFN")))
psa_status_t psa_get_key_information(psa_key_handle_t handle,
                                     psa_key_type_t *type,
                                     size_t *bits)
{
 c01a5c0:	b570      	push	{r4, r5, r6, lr}
 c01a5c2:	b096      	sub	sp, #88	; 0x58
 c01a5c4:	460d      	mov	r5, r1
 c01a5c6:	4606      	mov	r6, r0
 c01a5c8:	4614      	mov	r4, r2
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01a5ca:	2100      	movs	r1, #0
 c01a5cc:	222e      	movs	r2, #46	; 0x2e
 c01a5ce:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 c01a5d2:	f7fd f9f8 	bl	c0179c6 <memset>
 c01a5d6:	2303      	movs	r3, #3
 c01a5d8:	9309      	str	r3, [sp, #36]	; 0x24
        .sfn_id = TFM_CRYPTO_GET_KEY_INFORMATION_SID,
        .key_handle = handle,
    };
    psa_invec in_vec[] = {
 c01a5da:	ab09      	add	r3, sp, #36	; 0x24
 c01a5dc:	9303      	str	r3, [sp, #12]
 c01a5de:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };
    psa_outvec out_vec[] = {
 c01a5e0:	e9cd 3504 	strd	r3, r5, [sp, #16]
 c01a5e4:	2304      	movs	r3, #4
        {.base = type, .len = sizeof(psa_key_type_t)},
        {.base = bits, .len = sizeof(size_t)}
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01a5e6:	2101      	movs	r1, #1
 c01a5e8:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01a5ea:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
    psa_outvec out_vec[] = {
 c01a5ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 c01a5f2:	9308      	str	r3, [sp, #32]
    PSA_CONNECT(TFM_CRYPTO);
 c01a5f4:	f7ff ff38 	bl	c01a468 <psa_connect>
 c01a5f8:	1e05      	subs	r5, r0, #0
 c01a5fa:	dd0f      	ble.n	c01a61c <psa_get_key_information+0x5c>
#endif

    status = API_DISPATCH(tfm_crypto_get_key_information,
 c01a5fc:	2302      	movs	r3, #2
 c01a5fe:	9301      	str	r3, [sp, #4]
 c01a600:	ab05      	add	r3, sp, #20
 c01a602:	9300      	str	r3, [sp, #0]
 c01a604:	aa03      	add	r2, sp, #12
 c01a606:	2301      	movs	r3, #1
 c01a608:	2100      	movs	r1, #0
 c01a60a:	f7ff ff2f 	bl	c01a46c <psa_call>
 c01a60e:	4604      	mov	r4, r0
                          TFM_CRYPTO_GET_KEY_INFORMATION);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01a610:	4628      	mov	r0, r5
 c01a612:	f7ff ff2d 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01a616:	4620      	mov	r0, r4
 c01a618:	b016      	add	sp, #88	; 0x58
 c01a61a:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01a61c:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01a620:	e7f9      	b.n	c01a616 <psa_get_key_information+0x56>

0c01a622 <psa_export_key>:
__attribute__((section("SFN")))
psa_status_t psa_export_key(psa_key_handle_t handle,
                            uint8_t *data,
                            size_t data_size,
                            size_t *data_length)
{
 c01a622:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01a624:	b095      	sub	sp, #84	; 0x54
 c01a626:	460d      	mov	r5, r1
 c01a628:	4607      	mov	r7, r0
 c01a62a:	4614      	mov	r4, r2
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01a62c:	2100      	movs	r1, #0
 c01a62e:	222e      	movs	r2, #46	; 0x2e
 c01a630:	f10d 0022 	add.w	r0, sp, #34	; 0x22
{
 c01a634:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c01a636:	f7fd f9c6 	bl	c0179c6 <memset>
 c01a63a:	2304      	movs	r3, #4
 c01a63c:	9307      	str	r3, [sp, #28]
        .sfn_id = TFM_CRYPTO_EXPORT_KEY_SID,
        .key_handle = handle,
    };
    psa_invec in_vec[] = {
 c01a63e:	ab07      	add	r3, sp, #28
 c01a640:	9303      	str	r3, [sp, #12]
 c01a642:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
        {.base = data, .len = data_size}
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01a644:	2101      	movs	r1, #1
 c01a646:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01a648:	e9cd 3504 	strd	r3, r5, [sp, #16]
    struct tfm_crypto_pack_iovec iov = {
 c01a64c:	f8ad 7020 	strh.w	r7, [sp, #32]
    psa_outvec out_vec[] = {
 c01a650:	9406      	str	r4, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01a652:	f7ff ff09 	bl	c01a468 <psa_connect>
 c01a656:	1e05      	subs	r5, r0, #0
 c01a658:	dd10      	ble.n	c01a67c <psa_export_key+0x5a>
#endif

    status = API_DISPATCH(tfm_crypto_export_key,
 c01a65a:	2301      	movs	r3, #1
 c01a65c:	aa05      	add	r2, sp, #20
 c01a65e:	9301      	str	r3, [sp, #4]
 c01a660:	9200      	str	r2, [sp, #0]
 c01a662:	2100      	movs	r1, #0
 c01a664:	aa03      	add	r2, sp, #12
 c01a666:	f7ff ff01 	bl	c01a46c <psa_call>
                          TFM_CRYPTO_EXPORT_KEY);

    *data_length = out_vec[0].len;
 c01a66a:	9b06      	ldr	r3, [sp, #24]
    status = API_DISPATCH(tfm_crypto_export_key,
 c01a66c:	4604      	mov	r4, r0
    *data_length = out_vec[0].len;
 c01a66e:	6033      	str	r3, [r6, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01a670:	4628      	mov	r0, r5
 c01a672:	f7ff fefd 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01a676:	4620      	mov	r0, r4
 c01a678:	b015      	add	sp, #84	; 0x54
 c01a67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01a67c:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01a680:	e7f9      	b.n	c01a676 <psa_export_key+0x54>

0c01a682 <psa_export_public_key>:
__attribute__((section("SFN")))
psa_status_t psa_export_public_key(psa_key_handle_t handle,
                                   uint8_t *data,
                                   size_t data_size,
                                   size_t *data_length)
{
 c01a682:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01a684:	b095      	sub	sp, #84	; 0x54
 c01a686:	460d      	mov	r5, r1
 c01a688:	4607      	mov	r7, r0
 c01a68a:	4614      	mov	r4, r2
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01a68c:	2100      	movs	r1, #0
 c01a68e:	222e      	movs	r2, #46	; 0x2e
 c01a690:	f10d 0022 	add.w	r0, sp, #34	; 0x22
{
 c01a694:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c01a696:	f7fd f996 	bl	c0179c6 <memset>
 c01a69a:	2305      	movs	r3, #5
 c01a69c:	9307      	str	r3, [sp, #28]
        .sfn_id = TFM_CRYPTO_EXPORT_PUBLIC_KEY_SID,
        .key_handle = handle,
    };

    psa_invec in_vec[] = {
 c01a69e:	ab07      	add	r3, sp, #28
 c01a6a0:	9303      	str	r3, [sp, #12]
 c01a6a2:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
        {.base = data, .len = data_size}
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01a6a4:	2101      	movs	r1, #1
 c01a6a6:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01a6a8:	e9cd 3504 	strd	r3, r5, [sp, #16]
    struct tfm_crypto_pack_iovec iov = {
 c01a6ac:	f8ad 7020 	strh.w	r7, [sp, #32]
    psa_outvec out_vec[] = {
 c01a6b0:	9406      	str	r4, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01a6b2:	f7ff fed9 	bl	c01a468 <psa_connect>
 c01a6b6:	1e05      	subs	r5, r0, #0
 c01a6b8:	dd10      	ble.n	c01a6dc <psa_export_public_key+0x5a>
#endif

    status = API_DISPATCH(tfm_crypto_export_public_key,
 c01a6ba:	2301      	movs	r3, #1
 c01a6bc:	aa05      	add	r2, sp, #20
 c01a6be:	9301      	str	r3, [sp, #4]
 c01a6c0:	9200      	str	r2, [sp, #0]
 c01a6c2:	2100      	movs	r1, #0
 c01a6c4:	aa03      	add	r2, sp, #12
 c01a6c6:	f7ff fed1 	bl	c01a46c <psa_call>
                          TFM_CRYPTO_EXPORT_PUBLIC_KEY);

    *data_length = out_vec[0].len;
 c01a6ca:	9b06      	ldr	r3, [sp, #24]
    status = API_DISPATCH(tfm_crypto_export_public_key,
 c01a6cc:	4604      	mov	r4, r0
    *data_length = out_vec[0].len;
 c01a6ce:	6033      	str	r3, [r6, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01a6d0:	4628      	mov	r0, r5
 c01a6d2:	f7ff fecd 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01a6d6:	4620      	mov	r0, r4
 c01a6d8:	b015      	add	sp, #84	; 0x54
 c01a6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01a6dc:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01a6e0:	e7f9      	b.n	c01a6d6 <psa_export_public_key+0x54>

0c01a6e2 <psa_copy_key>:

__attribute__((section("SFN")))
psa_status_t psa_copy_key(psa_key_handle_t source_handle,
                          psa_key_handle_t target_handle,
                          const psa_key_policy_t *constraint)
{
 c01a6e2:	b530      	push	{r4, r5, lr}
 c01a6e4:	b099      	sub	sp, #100	; 0x64
 c01a6e6:	4605      	mov	r5, r0
 c01a6e8:	4614      	mov	r4, r2
 c01a6ea:	f8ad 100e 	strh.w	r1, [sp, #14]
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01a6ee:	222e      	movs	r2, #46	; 0x2e
 c01a6f0:	2100      	movs	r1, #0
 c01a6f2:	f10d 0032 	add.w	r0, sp, #50	; 0x32
 c01a6f6:	f7fd f966 	bl	c0179c6 <memset>
 c01a6fa:	2306      	movs	r3, #6
 c01a6fc:	930b      	str	r3, [sp, #44]	; 0x2c
        .sfn_id = TFM_CRYPTO_COPY_KEY_SID,
        .key_handle = source_handle,
    };

    psa_invec in_vec[] = {
 c01a6fe:	ab0b      	add	r3, sp, #44	; 0x2c
 c01a700:	9305      	str	r3, [sp, #20]
 c01a702:	2334      	movs	r3, #52	; 0x34
 c01a704:	9306      	str	r3, [sp, #24]
 c01a706:	f10d 030e 	add.w	r3, sp, #14
 c01a70a:	9307      	str	r3, [sp, #28]
 c01a70c:	2302      	movs	r3, #2
 c01a70e:	e9cd 3408 	strd	r3, r4, [sp, #32]
 c01a712:	230c      	movs	r3, #12
        {.base = &target_handle, .len = sizeof(psa_key_handle_t)},
        {.base = constraint, .len = sizeof(psa_key_policy_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01a714:	2101      	movs	r1, #1
 c01a716:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01a718:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
    psa_invec in_vec[] = {
 c01a71c:	930a      	str	r3, [sp, #40]	; 0x28
    PSA_CONNECT(TFM_CRYPTO);
 c01a71e:	f7ff fea3 	bl	c01a468 <psa_connect>
 c01a722:	1e05      	subs	r5, r0, #0
 c01a724:	dd0d      	ble.n	c01a742 <psa_copy_key+0x60>
#endif

    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_copy_key,
 c01a726:	2100      	movs	r1, #0
 c01a728:	2303      	movs	r3, #3
 c01a72a:	e9cd 1100 	strd	r1, r1, [sp]
 c01a72e:	aa05      	add	r2, sp, #20
 c01a730:	f7ff fe9c 	bl	c01a46c <psa_call>
 c01a734:	4604      	mov	r4, r0
                                    TFM_CRYPTO_COPY_KEY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01a736:	4628      	mov	r0, r5
 c01a738:	f7ff fe9a 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01a73c:	4620      	mov	r0, r4
 c01a73e:	b019      	add	sp, #100	; 0x64
 c01a740:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01a742:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01a746:	e7f9      	b.n	c01a73c <psa_copy_key+0x5a>

0c01a748 <psa_key_policy_set_usage>:
void psa_key_policy_set_usage(psa_key_policy_t *policy,
                              psa_key_usage_t usage,
                              psa_algorithm_t alg)
{
    policy->usage = usage;
    policy->alg = alg;
 c01a748:	e9c0 1200 	strd	r1, r2, [r0]
}
 c01a74c:	4770      	bx	lr

0c01a74e <psa_key_policy_get_usage>:

__attribute__((section("SFN")))
psa_key_usage_t psa_key_policy_get_usage(const psa_key_policy_t *policy)
{
    return policy->usage;
}
 c01a74e:	6800      	ldr	r0, [r0, #0]
 c01a750:	4770      	bx	lr

0c01a752 <psa_key_policy_get_algorithm>:

__attribute__((section("SFN")))
psa_algorithm_t psa_key_policy_get_algorithm(const psa_key_policy_t *policy)
{
    return policy->alg;
}
 c01a752:	6840      	ldr	r0, [r0, #4]
 c01a754:	4770      	bx	lr

0c01a756 <psa_set_key_policy>:

__attribute__((section("SFN")))
psa_status_t psa_set_key_policy(psa_key_handle_t handle,
                                const psa_key_policy_t *policy)
{
 c01a756:	b530      	push	{r4, r5, lr}
 c01a758:	b095      	sub	sp, #84	; 0x54
 c01a75a:	4605      	mov	r5, r0
 c01a75c:	460c      	mov	r4, r1
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01a75e:	222e      	movs	r2, #46	; 0x2e
 c01a760:	2100      	movs	r1, #0
 c01a762:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 c01a766:	f7fd f92e 	bl	c0179c6 <memset>
 c01a76a:	2307      	movs	r3, #7
 c01a76c:	9307      	str	r3, [sp, #28]
        .sfn_id = TFM_CRYPTO_SET_KEY_POLICY_SID,
        .key_handle = handle,
    };

    psa_invec in_vec[] = {
 c01a76e:	ab07      	add	r3, sp, #28
 c01a770:	9303      	str	r3, [sp, #12]
 c01a772:	2334      	movs	r3, #52	; 0x34
 c01a774:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01a778:	230c      	movs	r3, #12
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = policy, .len = sizeof(psa_key_policy_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01a77a:	2101      	movs	r1, #1
 c01a77c:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01a77e:	f8ad 5020 	strh.w	r5, [sp, #32]
    psa_invec in_vec[] = {
 c01a782:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01a784:	f7ff fe70 	bl	c01a468 <psa_connect>
 c01a788:	1e05      	subs	r5, r0, #0
 c01a78a:	dd0d      	ble.n	c01a7a8 <psa_set_key_policy+0x52>
#endif

    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_set_key_policy,
 c01a78c:	2100      	movs	r1, #0
 c01a78e:	2302      	movs	r3, #2
 c01a790:	e9cd 1100 	strd	r1, r1, [sp]
 c01a794:	aa03      	add	r2, sp, #12
 c01a796:	f7ff fe69 	bl	c01a46c <psa_call>
 c01a79a:	4604      	mov	r4, r0
                                    TFM_CRYPTO_SET_KEY_POLICY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01a79c:	4628      	mov	r0, r5
 c01a79e:	f7ff fe67 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01a7a2:	4620      	mov	r0, r4
 c01a7a4:	b015      	add	sp, #84	; 0x54
 c01a7a6:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01a7a8:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01a7ac:	e7f9      	b.n	c01a7a2 <psa_set_key_policy+0x4c>

0c01a7ae <psa_get_key_policy>:

__attribute__((section("SFN")))
psa_status_t psa_get_key_policy(psa_key_handle_t handle,
                                psa_key_policy_t *policy)
{
 c01a7ae:	b530      	push	{r4, r5, lr}
 c01a7b0:	b095      	sub	sp, #84	; 0x54
 c01a7b2:	4605      	mov	r5, r0
 c01a7b4:	460c      	mov	r4, r1
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01a7b6:	222e      	movs	r2, #46	; 0x2e
 c01a7b8:	2100      	movs	r1, #0
 c01a7ba:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 c01a7be:	f7fd f902 	bl	c0179c6 <memset>
 c01a7c2:	2308      	movs	r3, #8
 c01a7c4:	9307      	str	r3, [sp, #28]
        .sfn_id = TFM_CRYPTO_GET_KEY_POLICY_SID,
        .key_handle = handle,
    };

    psa_invec in_vec[] = {
 c01a7c6:	ab07      	add	r3, sp, #28
 c01a7c8:	9303      	str	r3, [sp, #12]
 c01a7ca:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };
    psa_outvec out_vec[] = {
 c01a7cc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01a7d0:	230c      	movs	r3, #12
        {.base = policy, .len = sizeof(psa_key_policy_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01a7d2:	2101      	movs	r1, #1
 c01a7d4:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01a7d6:	f8ad 5020 	strh.w	r5, [sp, #32]
    psa_outvec out_vec[] = {
 c01a7da:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01a7dc:	f7ff fe44 	bl	c01a468 <psa_connect>
 c01a7e0:	1e05      	subs	r5, r0, #0
 c01a7e2:	dd0e      	ble.n	c01a802 <psa_get_key_policy+0x54>
#endif

    status = API_DISPATCH(tfm_crypto_get_key_policy,
 c01a7e4:	2301      	movs	r3, #1
 c01a7e6:	aa05      	add	r2, sp, #20
 c01a7e8:	9200      	str	r2, [sp, #0]
 c01a7ea:	9301      	str	r3, [sp, #4]
 c01a7ec:	aa03      	add	r2, sp, #12
 c01a7ee:	2100      	movs	r1, #0
 c01a7f0:	f7ff fe3c 	bl	c01a46c <psa_call>
 c01a7f4:	4604      	mov	r4, r0
                          TFM_CRYPTO_GET_KEY_POLICY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01a7f6:	4628      	mov	r0, r5
 c01a7f8:	f7ff fe3a 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01a7fc:	4620      	mov	r0, r4
 c01a7fe:	b015      	add	sp, #84	; 0x54
 c01a800:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01a802:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01a806:	e7f9      	b.n	c01a7fc <psa_get_key_policy+0x4e>

0c01a808 <psa_get_key_lifetime>:

__attribute__((section("SFN")))
psa_status_t psa_get_key_lifetime(psa_key_handle_t handle,
                                  psa_key_lifetime_t *lifetime)
{
 c01a808:	b530      	push	{r4, r5, lr}
 c01a80a:	b095      	sub	sp, #84	; 0x54
 c01a80c:	4605      	mov	r5, r0
 c01a80e:	460c      	mov	r4, r1
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01a810:	222e      	movs	r2, #46	; 0x2e
 c01a812:	2100      	movs	r1, #0
 c01a814:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 c01a818:	f7fd f8d5 	bl	c0179c6 <memset>
 c01a81c:	2309      	movs	r3, #9
 c01a81e:	9307      	str	r3, [sp, #28]
        .sfn_id = TFM_CRYPTO_GET_KEY_LIFETIME_SID,
        .key_handle = handle,
    };

    psa_invec in_vec[] = {
 c01a820:	ab07      	add	r3, sp, #28
 c01a822:	9303      	str	r3, [sp, #12]
 c01a824:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };
    psa_outvec out_vec[] = {
 c01a826:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01a82a:	2304      	movs	r3, #4
        {.base = lifetime, .len = sizeof(psa_key_lifetime_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01a82c:	2101      	movs	r1, #1
 c01a82e:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01a830:	f8ad 5020 	strh.w	r5, [sp, #32]
    psa_outvec out_vec[] = {
 c01a834:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01a836:	f7ff fe17 	bl	c01a468 <psa_connect>
 c01a83a:	1e05      	subs	r5, r0, #0
 c01a83c:	dd0e      	ble.n	c01a85c <psa_get_key_lifetime+0x54>
#endif

    status = API_DISPATCH(tfm_crypto_get_key_lifetime,
 c01a83e:	2301      	movs	r3, #1
 c01a840:	aa05      	add	r2, sp, #20
 c01a842:	9200      	str	r2, [sp, #0]
 c01a844:	9301      	str	r3, [sp, #4]
 c01a846:	aa03      	add	r2, sp, #12
 c01a848:	2100      	movs	r1, #0
 c01a84a:	f7ff fe0f 	bl	c01a46c <psa_call>
 c01a84e:	4604      	mov	r4, r0
                          TFM_CRYPTO_GET_KEY_LIFETIME);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01a850:	4628      	mov	r0, r5
 c01a852:	f7ff fe0d 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01a856:	4620      	mov	r0, r4
 c01a858:	b015      	add	sp, #84	; 0x54
 c01a85a:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01a85c:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01a860:	e7f9      	b.n	c01a856 <psa_get_key_lifetime+0x4e>

0c01a862 <psa_cipher_generate_iv>:
__attribute__((section("SFN")))
psa_status_t psa_cipher_generate_iv(psa_cipher_operation_t *operation,
                                    unsigned char *iv,
                                    size_t iv_size,
                                    size_t *iv_length)
{
 c01a862:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01a864:	b097      	sub	sp, #92	; 0x5c
 c01a866:	4604      	mov	r4, r0
 c01a868:	4615      	mov	r5, r2
 c01a86a:	460f      	mov	r7, r1
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01a86c:	2230      	movs	r2, #48	; 0x30
 c01a86e:	2100      	movs	r1, #0
 c01a870:	a80a      	add	r0, sp, #40	; 0x28
{
 c01a872:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c01a874:	f7fd f8a7 	bl	c0179c6 <memset>
 c01a878:	230a      	movs	r3, #10
 c01a87a:	9309      	str	r3, [sp, #36]	; 0x24
 c01a87c:	6823      	ldr	r3, [r4, #0]
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
        {.base = iv, .len = iv_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01a87e:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01a880:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c01a882:	ab09      	add	r3, sp, #36	; 0x24
 c01a884:	9303      	str	r3, [sp, #12]
 c01a886:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c01a888:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01a88c:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01a88e:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01a890:	9508      	str	r5, [sp, #32]
 c01a892:	e9cd 3706 	strd	r3, r7, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01a896:	f7ff fde7 	bl	c01a468 <psa_connect>
 c01a89a:	1e05      	subs	r5, r0, #0
 c01a89c:	dd11      	ble.n	c01a8c2 <psa_cipher_generate_iv+0x60>
#endif

    status = API_DISPATCH(tfm_crypto_cipher_generate_iv,
 c01a89e:	2302      	movs	r3, #2
 c01a8a0:	9301      	str	r3, [sp, #4]
 c01a8a2:	ab05      	add	r3, sp, #20
 c01a8a4:	9300      	str	r3, [sp, #0]
 c01a8a6:	aa03      	add	r2, sp, #12
 c01a8a8:	2301      	movs	r3, #1
 c01a8aa:	2100      	movs	r1, #0
 c01a8ac:	f7ff fdde 	bl	c01a46c <psa_call>
                          TFM_CRYPTO_CIPHER_GENERATE_IV);

    *iv_length = out_vec[1].len;
 c01a8b0:	9b08      	ldr	r3, [sp, #32]
    status = API_DISPATCH(tfm_crypto_cipher_generate_iv,
 c01a8b2:	4604      	mov	r4, r0
    *iv_length = out_vec[1].len;
 c01a8b4:	6033      	str	r3, [r6, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01a8b6:	4628      	mov	r0, r5
 c01a8b8:	f7ff fdda 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c01a8bc:	4620      	mov	r0, r4
 c01a8be:	b017      	add	sp, #92	; 0x5c
 c01a8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01a8c2:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01a8c6:	e7f9      	b.n	c01a8bc <psa_cipher_generate_iv+0x5a>

0c01a8c8 <psa_cipher_set_iv>:

__attribute__((section("SFN")))
psa_status_t psa_cipher_set_iv(psa_cipher_operation_t *operation,
                               const unsigned char *iv,
                               size_t iv_length)
{
 c01a8c8:	b570      	push	{r4, r5, r6, lr}
 c01a8ca:	b096      	sub	sp, #88	; 0x58
 c01a8cc:	4604      	mov	r4, r0
 c01a8ce:	4615      	mov	r5, r2
 c01a8d0:	460e      	mov	r6, r1
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01a8d2:	2230      	movs	r2, #48	; 0x30
 c01a8d4:	2100      	movs	r1, #0
 c01a8d6:	a80a      	add	r0, sp, #40	; 0x28
 c01a8d8:	f7fd f875 	bl	c0179c6 <memset>
 c01a8dc:	230b      	movs	r3, #11
 c01a8de:	9309      	str	r3, [sp, #36]	; 0x24
 c01a8e0:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01a8e2:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01a8e4:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c01a8e6:	ab09      	add	r3, sp, #36	; 0x24
 c01a8e8:	9305      	str	r3, [sp, #20]
 c01a8ea:	2334      	movs	r3, #52	; 0x34
 c01a8ec:	e9cd 3606 	strd	r3, r6, [sp, #24]
    psa_outvec out_vec[] = {
 c01a8f0:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01a8f2:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c01a8f4:	9508      	str	r5, [sp, #32]
    psa_outvec out_vec[] = {
 c01a8f6:	9403      	str	r4, [sp, #12]
 c01a8f8:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c01a8fa:	f7ff fdb5 	bl	c01a468 <psa_connect>
 c01a8fe:	1e05      	subs	r5, r0, #0
 c01a900:	dd0f      	ble.n	c01a922 <psa_cipher_set_iv+0x5a>
#endif

    status = API_DISPATCH(tfm_crypto_cipher_set_iv,
 c01a902:	2301      	movs	r3, #1
 c01a904:	9301      	str	r3, [sp, #4]
 c01a906:	ab03      	add	r3, sp, #12
 c01a908:	9300      	str	r3, [sp, #0]
 c01a90a:	aa05      	add	r2, sp, #20
 c01a90c:	2302      	movs	r3, #2
 c01a90e:	2100      	movs	r1, #0
 c01a910:	f7ff fdac 	bl	c01a46c <psa_call>
 c01a914:	4604      	mov	r4, r0
                          TFM_CRYPTO_CIPHER_SET_IV);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01a916:	4628      	mov	r0, r5
 c01a918:	f7ff fdaa 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c01a91c:	4620      	mov	r0, r4
 c01a91e:	b016      	add	sp, #88	; 0x58
 c01a920:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01a922:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01a926:	e7f9      	b.n	c01a91c <psa_cipher_set_iv+0x54>

0c01a928 <psa_cipher_encrypt_setup>:

__attribute__((section("SFN")))
psa_status_t psa_cipher_encrypt_setup(psa_cipher_operation_t *operation,
                                      psa_key_handle_t handle,
                                      psa_algorithm_t alg)
{
 c01a928:	b570      	push	{r4, r5, r6, lr}
 c01a92a:	b094      	sub	sp, #80	; 0x50
 c01a92c:	4604      	mov	r4, r0
 c01a92e:	4615      	mov	r5, r2
 c01a930:	460e      	mov	r6, r1
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01a932:	222e      	movs	r2, #46	; 0x2e
 c01a934:	2100      	movs	r1, #0
 c01a936:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 c01a93a:	f7fd f844 	bl	c0179c6 <memset>
 c01a93e:	230c      	movs	r3, #12
 c01a940:	9307      	str	r3, [sp, #28]
 c01a942:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01a944:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01a946:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01a948:	ab07      	add	r3, sp, #28
 c01a94a:	9303      	str	r3, [sp, #12]
 c01a94c:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c01a94e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01a952:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01a954:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01a956:	950b      	str	r5, [sp, #44]	; 0x2c
 c01a958:	f8ad 6020 	strh.w	r6, [sp, #32]
    psa_outvec out_vec[] = {
 c01a95c:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01a95e:	f7ff fd83 	bl	c01a468 <psa_connect>
 c01a962:	1e05      	subs	r5, r0, #0
 c01a964:	dd0e      	ble.n	c01a984 <psa_cipher_encrypt_setup+0x5c>
#endif

    status = API_DISPATCH(tfm_crypto_cipher_encrypt_setup,
 c01a966:	2301      	movs	r3, #1
 c01a968:	aa05      	add	r2, sp, #20
 c01a96a:	9200      	str	r2, [sp, #0]
 c01a96c:	9301      	str	r3, [sp, #4]
 c01a96e:	aa03      	add	r2, sp, #12
 c01a970:	2100      	movs	r1, #0
 c01a972:	f7ff fd7b 	bl	c01a46c <psa_call>
 c01a976:	4604      	mov	r4, r0
                          TFM_CRYPTO_CIPHER_ENCRYPT_SETUP);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01a978:	4628      	mov	r0, r5
 c01a97a:	f7ff fd79 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c01a97e:	4620      	mov	r0, r4
 c01a980:	b014      	add	sp, #80	; 0x50
 c01a982:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01a984:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01a988:	e7f9      	b.n	c01a97e <psa_cipher_encrypt_setup+0x56>

0c01a98a <psa_cipher_decrypt_setup>:

__attribute__((section("SFN")))
psa_status_t psa_cipher_decrypt_setup(psa_cipher_operation_t *operation,
                                      psa_key_handle_t handle,
                                      psa_algorithm_t alg)
{
 c01a98a:	b570      	push	{r4, r5, r6, lr}
 c01a98c:	b094      	sub	sp, #80	; 0x50
 c01a98e:	4604      	mov	r4, r0
 c01a990:	4615      	mov	r5, r2
 c01a992:	460e      	mov	r6, r1
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01a994:	222e      	movs	r2, #46	; 0x2e
 c01a996:	2100      	movs	r1, #0
 c01a998:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 c01a99c:	f7fd f813 	bl	c0179c6 <memset>
 c01a9a0:	230d      	movs	r3, #13
 c01a9a2:	9307      	str	r3, [sp, #28]
 c01a9a4:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01a9a6:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01a9a8:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01a9aa:	ab07      	add	r3, sp, #28
 c01a9ac:	9303      	str	r3, [sp, #12]
 c01a9ae:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c01a9b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01a9b4:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01a9b6:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01a9b8:	950b      	str	r5, [sp, #44]	; 0x2c
 c01a9ba:	f8ad 6020 	strh.w	r6, [sp, #32]
    psa_outvec out_vec[] = {
 c01a9be:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01a9c0:	f7ff fd52 	bl	c01a468 <psa_connect>
 c01a9c4:	1e05      	subs	r5, r0, #0
 c01a9c6:	dd0e      	ble.n	c01a9e6 <psa_cipher_decrypt_setup+0x5c>
#endif

    status = API_DISPATCH(tfm_crypto_cipher_decrypt_setup,
 c01a9c8:	2301      	movs	r3, #1
 c01a9ca:	aa05      	add	r2, sp, #20
 c01a9cc:	9200      	str	r2, [sp, #0]
 c01a9ce:	9301      	str	r3, [sp, #4]
 c01a9d0:	aa03      	add	r2, sp, #12
 c01a9d2:	2100      	movs	r1, #0
 c01a9d4:	f7ff fd4a 	bl	c01a46c <psa_call>
 c01a9d8:	4604      	mov	r4, r0
                          TFM_CRYPTO_CIPHER_DECRYPT_SETUP);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01a9da:	4628      	mov	r0, r5
 c01a9dc:	f7ff fd48 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c01a9e0:	4620      	mov	r0, r4
 c01a9e2:	b014      	add	sp, #80	; 0x50
 c01a9e4:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01a9e6:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01a9ea:	e7f9      	b.n	c01a9e0 <psa_cipher_decrypt_setup+0x56>

0c01a9ec <psa_cipher_update>:
                               const uint8_t *input,
                               size_t input_length,
                               unsigned char *output,
                               size_t output_size,
                               size_t *output_length)
{
 c01a9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01a9ee:	4616      	mov	r6, r2
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01a9f0:	2230      	movs	r2, #48	; 0x30
{
 c01a9f2:	b099      	sub	sp, #100	; 0x64
 c01a9f4:	4604      	mov	r4, r0
 c01a9f6:	460f      	mov	r7, r1
    struct tfm_crypto_pack_iovec iov = {
 c01a9f8:	eb0d 0002 	add.w	r0, sp, r2
 c01a9fc:	2100      	movs	r1, #0
{
 c01a9fe:	461d      	mov	r5, r3
    struct tfm_crypto_pack_iovec iov = {
 c01aa00:	f7fc ffe1 	bl	c0179c6 <memset>
 c01aa04:	230e      	movs	r3, #14
 c01aa06:	930b      	str	r3, [sp, #44]	; 0x2c
 c01aa08:	6823      	ldr	r3, [r4, #0]
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
        {.base = output, .len = output_size}
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01aa0a:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01aa0c:	9311      	str	r3, [sp, #68]	; 0x44
    psa_invec in_vec[] = {
 c01aa0e:	ab0b      	add	r3, sp, #44	; 0x2c
 c01aa10:	9303      	str	r3, [sp, #12]
 c01aa12:	2334      	movs	r3, #52	; 0x34
 c01aa14:	e9cd 3704 	strd	r3, r7, [sp, #16]
    psa_outvec out_vec[] = {
 c01aa18:	2304      	movs	r3, #4
 c01aa1a:	e9cd 3508 	strd	r3, r5, [sp, #32]
 c01aa1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    PSA_CONNECT(TFM_CRYPTO);
 c01aa20:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01aa22:	e9cd 6406 	strd	r6, r4, [sp, #24]
 c01aa26:	930a      	str	r3, [sp, #40]	; 0x28
    PSA_CONNECT(TFM_CRYPTO);
 c01aa28:	f7ff fd1e 	bl	c01a468 <psa_connect>
 c01aa2c:	1e05      	subs	r5, r0, #0
 c01aa2e:	dd11      	ble.n	c01aa54 <psa_cipher_update+0x68>
#endif

    status = API_DISPATCH(tfm_crypto_cipher_update,
 c01aa30:	2302      	movs	r3, #2
 c01aa32:	aa07      	add	r2, sp, #28
 c01aa34:	9301      	str	r3, [sp, #4]
 c01aa36:	9200      	str	r2, [sp, #0]
 c01aa38:	2100      	movs	r1, #0
 c01aa3a:	aa03      	add	r2, sp, #12
 c01aa3c:	f7ff fd16 	bl	c01a46c <psa_call>
                          TFM_CRYPTO_CIPHER_UPDATE);

    *output_length = out_vec[1].len;
 c01aa40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 c01aa42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    status = API_DISPATCH(tfm_crypto_cipher_update,
 c01aa44:	4604      	mov	r4, r0
    *output_length = out_vec[1].len;
 c01aa46:	601a      	str	r2, [r3, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01aa48:	4628      	mov	r0, r5
 c01aa4a:	f7ff fd11 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c01aa4e:	4620      	mov	r0, r4
 c01aa50:	b019      	add	sp, #100	; 0x64
 c01aa52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01aa54:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01aa58:	e7f9      	b.n	c01aa4e <psa_cipher_update+0x62>

0c01aa5a <psa_cipher_abort>:

__attribute__((section("SFN")))
psa_status_t psa_cipher_abort(psa_cipher_operation_t *operation)
{
 c01aa5a:	b530      	push	{r4, r5, lr}
 c01aa5c:	b095      	sub	sp, #84	; 0x54
 c01aa5e:	4604      	mov	r4, r0
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01aa60:	2230      	movs	r2, #48	; 0x30
 c01aa62:	2100      	movs	r1, #0
 c01aa64:	a808      	add	r0, sp, #32
 c01aa66:	f7fc ffae 	bl	c0179c6 <memset>
 c01aa6a:	230f      	movs	r3, #15
 c01aa6c:	9307      	str	r3, [sp, #28]
 c01aa6e:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01aa70:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01aa72:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01aa74:	ab07      	add	r3, sp, #28
 c01aa76:	9303      	str	r3, [sp, #12]
 c01aa78:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c01aa7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01aa7e:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01aa80:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01aa82:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01aa84:	f7ff fcf0 	bl	c01a468 <psa_connect>
 c01aa88:	1e05      	subs	r5, r0, #0
 c01aa8a:	dd0e      	ble.n	c01aaaa <psa_cipher_abort+0x50>
#endif

    status = API_DISPATCH(tfm_crypto_cipher_abort,
 c01aa8c:	2301      	movs	r3, #1
 c01aa8e:	aa05      	add	r2, sp, #20
 c01aa90:	9200      	str	r2, [sp, #0]
 c01aa92:	9301      	str	r3, [sp, #4]
 c01aa94:	aa03      	add	r2, sp, #12
 c01aa96:	2100      	movs	r1, #0
 c01aa98:	f7ff fce8 	bl	c01a46c <psa_call>
 c01aa9c:	4604      	mov	r4, r0
                          TFM_CRYPTO_CIPHER_ABORT);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01aa9e:	4628      	mov	r0, r5
 c01aaa0:	f7ff fce6 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c01aaa4:	4620      	mov	r0, r4
 c01aaa6:	b015      	add	sp, #84	; 0x54
 c01aaa8:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01aaaa:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01aaae:	e7f9      	b.n	c01aaa4 <psa_cipher_abort+0x4a>

0c01aab0 <psa_cipher_finish>:
__attribute__((section("SFN")))
psa_status_t psa_cipher_finish(psa_cipher_operation_t *operation,
                               uint8_t *output,
                               size_t output_size,
                               size_t *output_length)
{
 c01aab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01aab2:	b097      	sub	sp, #92	; 0x5c
 c01aab4:	4604      	mov	r4, r0
 c01aab6:	4615      	mov	r5, r2
 c01aab8:	460f      	mov	r7, r1
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01aaba:	2230      	movs	r2, #48	; 0x30
 c01aabc:	2100      	movs	r1, #0
 c01aabe:	a80a      	add	r0, sp, #40	; 0x28
{
 c01aac0:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c01aac2:	f7fc ff80 	bl	c0179c6 <memset>
 c01aac6:	2310      	movs	r3, #16
 c01aac8:	9309      	str	r3, [sp, #36]	; 0x24
 c01aaca:	6823      	ldr	r3, [r4, #0]
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
        {.base = output, .len = output_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01aacc:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01aace:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c01aad0:	ab09      	add	r3, sp, #36	; 0x24
 c01aad2:	9303      	str	r3, [sp, #12]
 c01aad4:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c01aad6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01aada:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01aadc:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01aade:	9508      	str	r5, [sp, #32]
 c01aae0:	e9cd 3706 	strd	r3, r7, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01aae4:	f7ff fcc0 	bl	c01a468 <psa_connect>
 c01aae8:	1e05      	subs	r5, r0, #0
 c01aaea:	dd11      	ble.n	c01ab10 <psa_cipher_finish+0x60>
#endif

    status = API_DISPATCH(tfm_crypto_cipher_finish,
 c01aaec:	2302      	movs	r3, #2
 c01aaee:	9301      	str	r3, [sp, #4]
 c01aaf0:	ab05      	add	r3, sp, #20
 c01aaf2:	9300      	str	r3, [sp, #0]
 c01aaf4:	aa03      	add	r2, sp, #12
 c01aaf6:	2301      	movs	r3, #1
 c01aaf8:	2100      	movs	r1, #0
 c01aafa:	f7ff fcb7 	bl	c01a46c <psa_call>
                          TFM_CRYPTO_CIPHER_FINISH);

    *output_length = out_vec[1].len;
 c01aafe:	9b08      	ldr	r3, [sp, #32]
    status = API_DISPATCH(tfm_crypto_cipher_finish,
 c01ab00:	4604      	mov	r4, r0
    *output_length = out_vec[1].len;
 c01ab02:	6033      	str	r3, [r6, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01ab04:	4628      	mov	r0, r5
 c01ab06:	f7ff fcb3 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c01ab0a:	4620      	mov	r0, r4
 c01ab0c:	b017      	add	sp, #92	; 0x5c
 c01ab0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01ab10:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01ab14:	e7f9      	b.n	c01ab0a <psa_cipher_finish+0x5a>

0c01ab16 <psa_hash_setup>:

__attribute__((section("SFN")))
psa_status_t psa_hash_setup(psa_hash_operation_t *operation,
                            psa_algorithm_t alg)
{
 c01ab16:	b530      	push	{r4, r5, lr}
 c01ab18:	b095      	sub	sp, #84	; 0x54
 c01ab1a:	4604      	mov	r4, r0
 c01ab1c:	460d      	mov	r5, r1
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01ab1e:	2230      	movs	r2, #48	; 0x30
 c01ab20:	2100      	movs	r1, #0
 c01ab22:	a808      	add	r0, sp, #32
 c01ab24:	f7fc ff4f 	bl	c0179c6 <memset>
 c01ab28:	2311      	movs	r3, #17
 c01ab2a:	9307      	str	r3, [sp, #28]
 c01ab2c:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01ab2e:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01ab30:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01ab32:	ab07      	add	r3, sp, #28
 c01ab34:	9303      	str	r3, [sp, #12]
 c01ab36:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c01ab38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01ab3c:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01ab3e:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01ab40:	950b      	str	r5, [sp, #44]	; 0x2c
    psa_outvec out_vec[] = {
 c01ab42:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01ab44:	f7ff fc90 	bl	c01a468 <psa_connect>
 c01ab48:	1e05      	subs	r5, r0, #0
 c01ab4a:	dd0e      	ble.n	c01ab6a <psa_hash_setup+0x54>
#endif

    status = API_DISPATCH(tfm_crypto_hash_setup,
 c01ab4c:	2301      	movs	r3, #1
 c01ab4e:	aa05      	add	r2, sp, #20
 c01ab50:	9200      	str	r2, [sp, #0]
 c01ab52:	9301      	str	r3, [sp, #4]
 c01ab54:	aa03      	add	r2, sp, #12
 c01ab56:	2100      	movs	r1, #0
 c01ab58:	f7ff fc88 	bl	c01a46c <psa_call>
 c01ab5c:	4604      	mov	r4, r0
                          TFM_CRYPTO_HASH_SETUP);

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01ab5e:	4628      	mov	r0, r5
 c01ab60:	f7ff fc86 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c01ab64:	4620      	mov	r0, r4
 c01ab66:	b015      	add	sp, #84	; 0x54
 c01ab68:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01ab6a:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01ab6e:	e7f9      	b.n	c01ab64 <psa_hash_setup+0x4e>

0c01ab70 <psa_hash_update>:

__attribute__((section("SFN")))
psa_status_t psa_hash_update(psa_hash_operation_t *operation,
                             const uint8_t *input,
                             size_t input_length)
{
 c01ab70:	b570      	push	{r4, r5, r6, lr}
 c01ab72:	b096      	sub	sp, #88	; 0x58
 c01ab74:	4604      	mov	r4, r0
 c01ab76:	4615      	mov	r5, r2
 c01ab78:	460e      	mov	r6, r1
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01ab7a:	2230      	movs	r2, #48	; 0x30
 c01ab7c:	2100      	movs	r1, #0
 c01ab7e:	a80a      	add	r0, sp, #40	; 0x28
 c01ab80:	f7fc ff21 	bl	c0179c6 <memset>
 c01ab84:	2312      	movs	r3, #18
 c01ab86:	9309      	str	r3, [sp, #36]	; 0x24
 c01ab88:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01ab8a:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01ab8c:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c01ab8e:	ab09      	add	r3, sp, #36	; 0x24
 c01ab90:	9305      	str	r3, [sp, #20]
 c01ab92:	2334      	movs	r3, #52	; 0x34
 c01ab94:	e9cd 3606 	strd	r3, r6, [sp, #24]
    psa_outvec out_vec[] = {
 c01ab98:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01ab9a:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c01ab9c:	9508      	str	r5, [sp, #32]
    psa_outvec out_vec[] = {
 c01ab9e:	9403      	str	r4, [sp, #12]
 c01aba0:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c01aba2:	f7ff fc61 	bl	c01a468 <psa_connect>
 c01aba6:	1e05      	subs	r5, r0, #0
 c01aba8:	dd0f      	ble.n	c01abca <psa_hash_update+0x5a>
#endif

    status = API_DISPATCH(tfm_crypto_hash_update,
 c01abaa:	2301      	movs	r3, #1
 c01abac:	9301      	str	r3, [sp, #4]
 c01abae:	ab03      	add	r3, sp, #12
 c01abb0:	9300      	str	r3, [sp, #0]
 c01abb2:	aa05      	add	r2, sp, #20
 c01abb4:	2302      	movs	r3, #2
 c01abb6:	2100      	movs	r1, #0
 c01abb8:	f7ff fc58 	bl	c01a46c <psa_call>
 c01abbc:	4604      	mov	r4, r0
                          TFM_CRYPTO_HASH_UPDATE);

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01abbe:	4628      	mov	r0, r5
 c01abc0:	f7ff fc56 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c01abc4:	4620      	mov	r0, r4
 c01abc6:	b016      	add	sp, #88	; 0x58
 c01abc8:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01abca:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01abce:	e7f9      	b.n	c01abc4 <psa_hash_update+0x54>

0c01abd0 <psa_hash_finish>:
__attribute__((section("SFN")))
psa_status_t psa_hash_finish(psa_hash_operation_t *operation,
                             uint8_t *hash,
                             size_t hash_size,
                             size_t *hash_length)
{
 c01abd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01abd2:	b097      	sub	sp, #92	; 0x5c
 c01abd4:	4604      	mov	r4, r0
 c01abd6:	4615      	mov	r5, r2
 c01abd8:	460f      	mov	r7, r1
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01abda:	2230      	movs	r2, #48	; 0x30
 c01abdc:	2100      	movs	r1, #0
 c01abde:	a80a      	add	r0, sp, #40	; 0x28
{
 c01abe0:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c01abe2:	f7fc fef0 	bl	c0179c6 <memset>
 c01abe6:	2313      	movs	r3, #19
 c01abe8:	9309      	str	r3, [sp, #36]	; 0x24
 c01abea:	6823      	ldr	r3, [r4, #0]
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
        {.base = hash, .len = hash_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01abec:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01abee:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c01abf0:	ab09      	add	r3, sp, #36	; 0x24
 c01abf2:	9303      	str	r3, [sp, #12]
 c01abf4:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c01abf6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01abfa:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01abfc:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01abfe:	9508      	str	r5, [sp, #32]
 c01ac00:	e9cd 3706 	strd	r3, r7, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01ac04:	f7ff fc30 	bl	c01a468 <psa_connect>
 c01ac08:	1e05      	subs	r5, r0, #0
 c01ac0a:	dd11      	ble.n	c01ac30 <psa_hash_finish+0x60>
#endif

    status = API_DISPATCH(tfm_crypto_hash_finish,
 c01ac0c:	2302      	movs	r3, #2
 c01ac0e:	9301      	str	r3, [sp, #4]
 c01ac10:	ab05      	add	r3, sp, #20
 c01ac12:	9300      	str	r3, [sp, #0]
 c01ac14:	aa03      	add	r2, sp, #12
 c01ac16:	2301      	movs	r3, #1
 c01ac18:	2100      	movs	r1, #0
 c01ac1a:	f7ff fc27 	bl	c01a46c <psa_call>
                          TFM_CRYPTO_HASH_FINISH);

    *hash_length = out_vec[1].len;
 c01ac1e:	9b08      	ldr	r3, [sp, #32]
    status = API_DISPATCH(tfm_crypto_hash_finish,
 c01ac20:	4604      	mov	r4, r0
    *hash_length = out_vec[1].len;
 c01ac22:	6033      	str	r3, [r6, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01ac24:	4628      	mov	r0, r5
 c01ac26:	f7ff fc23 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c01ac2a:	4620      	mov	r0, r4
 c01ac2c:	b017      	add	sp, #92	; 0x5c
 c01ac2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01ac30:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01ac34:	e7f9      	b.n	c01ac2a <psa_hash_finish+0x5a>

0c01ac36 <psa_hash_verify>:

__attribute__((section("SFN")))
psa_status_t psa_hash_verify(psa_hash_operation_t *operation,
                             const uint8_t *hash,
                             size_t hash_length)
{
 c01ac36:	b570      	push	{r4, r5, r6, lr}
 c01ac38:	b096      	sub	sp, #88	; 0x58
 c01ac3a:	4604      	mov	r4, r0
 c01ac3c:	4615      	mov	r5, r2
 c01ac3e:	460e      	mov	r6, r1
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01ac40:	2230      	movs	r2, #48	; 0x30
 c01ac42:	2100      	movs	r1, #0
 c01ac44:	a80a      	add	r0, sp, #40	; 0x28
 c01ac46:	f7fc febe 	bl	c0179c6 <memset>
 c01ac4a:	2314      	movs	r3, #20
 c01ac4c:	9309      	str	r3, [sp, #36]	; 0x24
 c01ac4e:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01ac50:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01ac52:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c01ac54:	ab09      	add	r3, sp, #36	; 0x24
 c01ac56:	9305      	str	r3, [sp, #20]
 c01ac58:	2334      	movs	r3, #52	; 0x34
 c01ac5a:	e9cd 3606 	strd	r3, r6, [sp, #24]
    psa_outvec out_vec[] = {
 c01ac5e:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01ac60:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c01ac62:	9508      	str	r5, [sp, #32]
    psa_outvec out_vec[] = {
 c01ac64:	9403      	str	r4, [sp, #12]
 c01ac66:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c01ac68:	f7ff fbfe 	bl	c01a468 <psa_connect>
 c01ac6c:	1e05      	subs	r5, r0, #0
 c01ac6e:	dd0f      	ble.n	c01ac90 <psa_hash_verify+0x5a>
#endif

    status = API_DISPATCH(tfm_crypto_hash_verify,
 c01ac70:	2301      	movs	r3, #1
 c01ac72:	9301      	str	r3, [sp, #4]
 c01ac74:	ab03      	add	r3, sp, #12
 c01ac76:	9300      	str	r3, [sp, #0]
 c01ac78:	aa05      	add	r2, sp, #20
 c01ac7a:	2302      	movs	r3, #2
 c01ac7c:	2100      	movs	r1, #0
 c01ac7e:	f7ff fbf5 	bl	c01a46c <psa_call>
 c01ac82:	4604      	mov	r4, r0
                          TFM_CRYPTO_HASH_VERIFY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01ac84:	4628      	mov	r0, r5
 c01ac86:	f7ff fbf3 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c01ac8a:	4620      	mov	r0, r4
 c01ac8c:	b016      	add	sp, #88	; 0x58
 c01ac8e:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01ac90:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01ac94:	e7f9      	b.n	c01ac8a <psa_hash_verify+0x54>

0c01ac96 <psa_hash_abort>:

__attribute__((section("SFN")))
psa_status_t psa_hash_abort(psa_hash_operation_t *operation)
{
 c01ac96:	b530      	push	{r4, r5, lr}
 c01ac98:	b095      	sub	sp, #84	; 0x54
 c01ac9a:	4604      	mov	r4, r0
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01ac9c:	2230      	movs	r2, #48	; 0x30
 c01ac9e:	2100      	movs	r1, #0
 c01aca0:	a808      	add	r0, sp, #32
 c01aca2:	f7fc fe90 	bl	c0179c6 <memset>
 c01aca6:	2315      	movs	r3, #21
 c01aca8:	9307      	str	r3, [sp, #28]
 c01acaa:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01acac:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01acae:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01acb0:	ab07      	add	r3, sp, #28
 c01acb2:	9303      	str	r3, [sp, #12]
 c01acb4:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c01acb6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01acba:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01acbc:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01acbe:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01acc0:	f7ff fbd2 	bl	c01a468 <psa_connect>
 c01acc4:	1e05      	subs	r5, r0, #0
 c01acc6:	dd0e      	ble.n	c01ace6 <psa_hash_abort+0x50>
#endif

    status = API_DISPATCH(tfm_crypto_hash_abort,
 c01acc8:	2301      	movs	r3, #1
 c01acca:	aa05      	add	r2, sp, #20
 c01accc:	9200      	str	r2, [sp, #0]
 c01acce:	9301      	str	r3, [sp, #4]
 c01acd0:	aa03      	add	r2, sp, #12
 c01acd2:	2100      	movs	r1, #0
 c01acd4:	f7ff fbca 	bl	c01a46c <psa_call>
 c01acd8:	4604      	mov	r4, r0
                          TFM_CRYPTO_HASH_ABORT);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01acda:	4628      	mov	r0, r5
 c01acdc:	f7ff fbc8 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c01ace0:	4620      	mov	r0, r4
 c01ace2:	b015      	add	sp, #84	; 0x54
 c01ace4:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01ace6:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01acea:	e7f9      	b.n	c01ace0 <psa_hash_abort+0x4a>

0c01acec <psa_hash_clone>:

__attribute__((section("SFN")))
psa_status_t psa_hash_clone(const psa_hash_operation_t *source_operation,
                            psa_hash_operation_t *target_operation)
{
 c01acec:	b530      	push	{r4, r5, lr}
 c01acee:	b095      	sub	sp, #84	; 0x54
 c01acf0:	4605      	mov	r5, r0
 c01acf2:	460c      	mov	r4, r1
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01acf4:	2230      	movs	r2, #48	; 0x30
 c01acf6:	2100      	movs	r1, #0
 c01acf8:	a808      	add	r0, sp, #32
 c01acfa:	f7fc fe64 	bl	c0179c6 <memset>
 c01acfe:	2316      	movs	r3, #22
 c01ad00:	9307      	str	r3, [sp, #28]
 c01ad02:	682b      	ldr	r3, [r5, #0]
    psa_outvec out_vec[] = {
        {.base = target_operation, .len = sizeof(psa_hash_operation_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01ad04:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01ad06:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01ad08:	ab07      	add	r3, sp, #28
 c01ad0a:	9303      	str	r3, [sp, #12]
 c01ad0c:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c01ad0e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01ad12:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01ad14:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01ad16:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01ad18:	f7ff fba6 	bl	c01a468 <psa_connect>
 c01ad1c:	1e05      	subs	r5, r0, #0
 c01ad1e:	dd0e      	ble.n	c01ad3e <psa_hash_clone+0x52>
#endif

    status = API_DISPATCH(tfm_crypto_hash_clone,
 c01ad20:	2301      	movs	r3, #1
 c01ad22:	aa05      	add	r2, sp, #20
 c01ad24:	9200      	str	r2, [sp, #0]
 c01ad26:	9301      	str	r3, [sp, #4]
 c01ad28:	aa03      	add	r2, sp, #12
 c01ad2a:	2100      	movs	r1, #0
 c01ad2c:	f7ff fb9e 	bl	c01a46c <psa_call>
 c01ad30:	4604      	mov	r4, r0
                          TFM_CRYPTO_HASH_CLONE);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01ad32:	4628      	mov	r0, r5
 c01ad34:	f7ff fb9c 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c01ad38:	4620      	mov	r0, r4
 c01ad3a:	b015      	add	sp, #84	; 0x54
 c01ad3c:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01ad3e:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01ad42:	e7f9      	b.n	c01ad38 <psa_hash_clone+0x4c>

0c01ad44 <psa_mac_sign_setup>:

__attribute__((section("SFN")))
psa_status_t psa_mac_sign_setup(psa_mac_operation_t *operation,
                                psa_key_handle_t handle,
                                psa_algorithm_t alg)
{
 c01ad44:	b570      	push	{r4, r5, r6, lr}
 c01ad46:	b094      	sub	sp, #80	; 0x50
 c01ad48:	4604      	mov	r4, r0
 c01ad4a:	4615      	mov	r5, r2
 c01ad4c:	460e      	mov	r6, r1
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01ad4e:	222e      	movs	r2, #46	; 0x2e
 c01ad50:	2100      	movs	r1, #0
 c01ad52:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 c01ad56:	f7fc fe36 	bl	c0179c6 <memset>
 c01ad5a:	2317      	movs	r3, #23
 c01ad5c:	9307      	str	r3, [sp, #28]
 c01ad5e:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01ad60:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01ad62:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01ad64:	ab07      	add	r3, sp, #28
 c01ad66:	9303      	str	r3, [sp, #12]
 c01ad68:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c01ad6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01ad6e:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01ad70:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01ad72:	950b      	str	r5, [sp, #44]	; 0x2c
 c01ad74:	f8ad 6020 	strh.w	r6, [sp, #32]
    psa_outvec out_vec[] = {
 c01ad78:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01ad7a:	f7ff fb75 	bl	c01a468 <psa_connect>
 c01ad7e:	1e05      	subs	r5, r0, #0
 c01ad80:	dd0e      	ble.n	c01ada0 <psa_mac_sign_setup+0x5c>
#endif

    status = API_DISPATCH(tfm_crypto_mac_sign_setup,
 c01ad82:	2301      	movs	r3, #1
 c01ad84:	aa05      	add	r2, sp, #20
 c01ad86:	9200      	str	r2, [sp, #0]
 c01ad88:	9301      	str	r3, [sp, #4]
 c01ad8a:	aa03      	add	r2, sp, #12
 c01ad8c:	2100      	movs	r1, #0
 c01ad8e:	f7ff fb6d 	bl	c01a46c <psa_call>
 c01ad92:	4604      	mov	r4, r0
                          TFM_CRYPTO_MAC_SIGN_SETUP);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01ad94:	4628      	mov	r0, r5
 c01ad96:	f7ff fb6b 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c01ad9a:	4620      	mov	r0, r4
 c01ad9c:	b014      	add	sp, #80	; 0x50
 c01ad9e:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01ada0:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01ada4:	e7f9      	b.n	c01ad9a <psa_mac_sign_setup+0x56>

0c01ada6 <psa_mac_verify_setup>:

__attribute__((section("SFN")))
psa_status_t psa_mac_verify_setup(psa_mac_operation_t *operation,
                                  psa_key_handle_t handle,
                                  psa_algorithm_t alg)
{
 c01ada6:	b570      	push	{r4, r5, r6, lr}
 c01ada8:	b094      	sub	sp, #80	; 0x50
 c01adaa:	4604      	mov	r4, r0
 c01adac:	4615      	mov	r5, r2
 c01adae:	460e      	mov	r6, r1
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01adb0:	222e      	movs	r2, #46	; 0x2e
 c01adb2:	2100      	movs	r1, #0
 c01adb4:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 c01adb8:	f7fc fe05 	bl	c0179c6 <memset>
 c01adbc:	2318      	movs	r3, #24
 c01adbe:	9307      	str	r3, [sp, #28]
 c01adc0:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01adc2:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01adc4:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01adc6:	ab07      	add	r3, sp, #28
 c01adc8:	9303      	str	r3, [sp, #12]
 c01adca:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c01adcc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01add0:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01add2:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01add4:	950b      	str	r5, [sp, #44]	; 0x2c
 c01add6:	f8ad 6020 	strh.w	r6, [sp, #32]
    psa_outvec out_vec[] = {
 c01adda:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01addc:	f7ff fb44 	bl	c01a468 <psa_connect>
 c01ade0:	1e05      	subs	r5, r0, #0
 c01ade2:	dd0e      	ble.n	c01ae02 <psa_mac_verify_setup+0x5c>
#endif

    status = API_DISPATCH(tfm_crypto_mac_verify_setup,
 c01ade4:	2301      	movs	r3, #1
 c01ade6:	aa05      	add	r2, sp, #20
 c01ade8:	9200      	str	r2, [sp, #0]
 c01adea:	9301      	str	r3, [sp, #4]
 c01adec:	aa03      	add	r2, sp, #12
 c01adee:	2100      	movs	r1, #0
 c01adf0:	f7ff fb3c 	bl	c01a46c <psa_call>
 c01adf4:	4604      	mov	r4, r0
                          TFM_CRYPTO_MAC_VERIFY_SETUP);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01adf6:	4628      	mov	r0, r5
 c01adf8:	f7ff fb3a 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c01adfc:	4620      	mov	r0, r4
 c01adfe:	b014      	add	sp, #80	; 0x50
 c01ae00:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01ae02:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01ae06:	e7f9      	b.n	c01adfc <psa_mac_verify_setup+0x56>

0c01ae08 <psa_mac_update>:

__attribute__((section("SFN")))
psa_status_t psa_mac_update(psa_mac_operation_t *operation,
                            const uint8_t *input,
                            size_t input_length)
{
 c01ae08:	b570      	push	{r4, r5, r6, lr}
 c01ae0a:	b096      	sub	sp, #88	; 0x58
 c01ae0c:	4604      	mov	r4, r0
 c01ae0e:	4615      	mov	r5, r2
 c01ae10:	460e      	mov	r6, r1
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01ae12:	2230      	movs	r2, #48	; 0x30
 c01ae14:	2100      	movs	r1, #0
 c01ae16:	a80a      	add	r0, sp, #40	; 0x28
 c01ae18:	f7fc fdd5 	bl	c0179c6 <memset>
 c01ae1c:	2319      	movs	r3, #25
 c01ae1e:	9309      	str	r3, [sp, #36]	; 0x24
 c01ae20:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01ae22:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01ae24:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c01ae26:	ab09      	add	r3, sp, #36	; 0x24
 c01ae28:	9305      	str	r3, [sp, #20]
 c01ae2a:	2334      	movs	r3, #52	; 0x34
 c01ae2c:	e9cd 3606 	strd	r3, r6, [sp, #24]
    psa_outvec out_vec[] = {
 c01ae30:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01ae32:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c01ae34:	9508      	str	r5, [sp, #32]
    psa_outvec out_vec[] = {
 c01ae36:	9403      	str	r4, [sp, #12]
 c01ae38:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c01ae3a:	f7ff fb15 	bl	c01a468 <psa_connect>
 c01ae3e:	1e05      	subs	r5, r0, #0
 c01ae40:	dd0f      	ble.n	c01ae62 <psa_mac_update+0x5a>
#endif

    status = API_DISPATCH(tfm_crypto_mac_update,
 c01ae42:	2301      	movs	r3, #1
 c01ae44:	9301      	str	r3, [sp, #4]
 c01ae46:	ab03      	add	r3, sp, #12
 c01ae48:	9300      	str	r3, [sp, #0]
 c01ae4a:	aa05      	add	r2, sp, #20
 c01ae4c:	2302      	movs	r3, #2
 c01ae4e:	2100      	movs	r1, #0
 c01ae50:	f7ff fb0c 	bl	c01a46c <psa_call>
 c01ae54:	4604      	mov	r4, r0
                          TFM_CRYPTO_MAC_UPDATE);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01ae56:	4628      	mov	r0, r5
 c01ae58:	f7ff fb0a 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c01ae5c:	4620      	mov	r0, r4
 c01ae5e:	b016      	add	sp, #88	; 0x58
 c01ae60:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01ae62:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01ae66:	e7f9      	b.n	c01ae5c <psa_mac_update+0x54>

0c01ae68 <psa_mac_sign_finish>:
__attribute__((section("SFN")))
psa_status_t psa_mac_sign_finish(psa_mac_operation_t *operation,
                                 uint8_t *mac,
                                 size_t mac_size,
                                 size_t *mac_length)
{
 c01ae68:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01ae6a:	b097      	sub	sp, #92	; 0x5c
 c01ae6c:	4604      	mov	r4, r0
 c01ae6e:	4615      	mov	r5, r2
 c01ae70:	460f      	mov	r7, r1
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01ae72:	2230      	movs	r2, #48	; 0x30
 c01ae74:	2100      	movs	r1, #0
 c01ae76:	a80a      	add	r0, sp, #40	; 0x28
{
 c01ae78:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c01ae7a:	f7fc fda4 	bl	c0179c6 <memset>
 c01ae7e:	231a      	movs	r3, #26
 c01ae80:	9309      	str	r3, [sp, #36]	; 0x24
 c01ae82:	6823      	ldr	r3, [r4, #0]
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
        {.base = mac, .len = mac_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01ae84:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01ae86:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c01ae88:	ab09      	add	r3, sp, #36	; 0x24
 c01ae8a:	9303      	str	r3, [sp, #12]
 c01ae8c:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c01ae8e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01ae92:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01ae94:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01ae96:	9508      	str	r5, [sp, #32]
 c01ae98:	e9cd 3706 	strd	r3, r7, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01ae9c:	f7ff fae4 	bl	c01a468 <psa_connect>
 c01aea0:	1e05      	subs	r5, r0, #0
 c01aea2:	dd11      	ble.n	c01aec8 <psa_mac_sign_finish+0x60>
#endif

    status = API_DISPATCH(tfm_crypto_mac_sign_finish,
 c01aea4:	2302      	movs	r3, #2
 c01aea6:	9301      	str	r3, [sp, #4]
 c01aea8:	ab05      	add	r3, sp, #20
 c01aeaa:	9300      	str	r3, [sp, #0]
 c01aeac:	aa03      	add	r2, sp, #12
 c01aeae:	2301      	movs	r3, #1
 c01aeb0:	2100      	movs	r1, #0
 c01aeb2:	f7ff fadb 	bl	c01a46c <psa_call>
                          TFM_CRYPTO_MAC_SIGN_FINISH);

    *mac_length = out_vec[1].len;
 c01aeb6:	9b08      	ldr	r3, [sp, #32]
    status = API_DISPATCH(tfm_crypto_mac_sign_finish,
 c01aeb8:	4604      	mov	r4, r0
    *mac_length = out_vec[1].len;
 c01aeba:	6033      	str	r3, [r6, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01aebc:	4628      	mov	r0, r5
 c01aebe:	f7ff fad7 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c01aec2:	4620      	mov	r0, r4
 c01aec4:	b017      	add	sp, #92	; 0x5c
 c01aec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01aec8:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01aecc:	e7f9      	b.n	c01aec2 <psa_mac_sign_finish+0x5a>

0c01aece <psa_mac_verify_finish>:

__attribute__((section("SFN")))
psa_status_t psa_mac_verify_finish(psa_mac_operation_t *operation,
                                   const uint8_t *mac,
                                   size_t mac_length)
{
 c01aece:	b570      	push	{r4, r5, r6, lr}
 c01aed0:	b096      	sub	sp, #88	; 0x58
 c01aed2:	4604      	mov	r4, r0
 c01aed4:	4615      	mov	r5, r2
 c01aed6:	460e      	mov	r6, r1
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01aed8:	2230      	movs	r2, #48	; 0x30
 c01aeda:	2100      	movs	r1, #0
 c01aedc:	a80a      	add	r0, sp, #40	; 0x28
 c01aede:	f7fc fd72 	bl	c0179c6 <memset>
 c01aee2:	231b      	movs	r3, #27
 c01aee4:	9309      	str	r3, [sp, #36]	; 0x24
 c01aee6:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01aee8:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01aeea:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c01aeec:	ab09      	add	r3, sp, #36	; 0x24
 c01aeee:	9305      	str	r3, [sp, #20]
 c01aef0:	2334      	movs	r3, #52	; 0x34
 c01aef2:	e9cd 3606 	strd	r3, r6, [sp, #24]
    psa_outvec out_vec[] = {
 c01aef6:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01aef8:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c01aefa:	9508      	str	r5, [sp, #32]
    psa_outvec out_vec[] = {
 c01aefc:	9403      	str	r4, [sp, #12]
 c01aefe:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c01af00:	f7ff fab2 	bl	c01a468 <psa_connect>
 c01af04:	1e05      	subs	r5, r0, #0
 c01af06:	dd0f      	ble.n	c01af28 <psa_mac_verify_finish+0x5a>
#endif

    status = API_DISPATCH(tfm_crypto_mac_verify_finish,
 c01af08:	2301      	movs	r3, #1
 c01af0a:	9301      	str	r3, [sp, #4]
 c01af0c:	ab03      	add	r3, sp, #12
 c01af0e:	9300      	str	r3, [sp, #0]
 c01af10:	aa05      	add	r2, sp, #20
 c01af12:	2302      	movs	r3, #2
 c01af14:	2100      	movs	r1, #0
 c01af16:	f7ff faa9 	bl	c01a46c <psa_call>
 c01af1a:	4604      	mov	r4, r0
                          TFM_CRYPTO_MAC_VERIFY_FINISH);

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01af1c:	4628      	mov	r0, r5
 c01af1e:	f7ff faa7 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c01af22:	4620      	mov	r0, r4
 c01af24:	b016      	add	sp, #88	; 0x58
 c01af26:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01af28:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01af2c:	e7f9      	b.n	c01af22 <psa_mac_verify_finish+0x54>

0c01af2e <psa_mac_abort>:

__attribute__((section("SFN")))
psa_status_t psa_mac_abort(psa_mac_operation_t *operation)
{
 c01af2e:	b530      	push	{r4, r5, lr}
 c01af30:	b095      	sub	sp, #84	; 0x54
 c01af32:	4604      	mov	r4, r0
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01af34:	2230      	movs	r2, #48	; 0x30
 c01af36:	2100      	movs	r1, #0
 c01af38:	a808      	add	r0, sp, #32
 c01af3a:	f7fc fd44 	bl	c0179c6 <memset>
 c01af3e:	231c      	movs	r3, #28
 c01af40:	9307      	str	r3, [sp, #28]
 c01af42:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01af44:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01af46:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01af48:	ab07      	add	r3, sp, #28
 c01af4a:	9303      	str	r3, [sp, #12]
 c01af4c:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c01af4e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01af52:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01af54:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01af56:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01af58:	f7ff fa86 	bl	c01a468 <psa_connect>
 c01af5c:	1e05      	subs	r5, r0, #0
 c01af5e:	dd0e      	ble.n	c01af7e <psa_mac_abort+0x50>
#endif

    status = API_DISPATCH(tfm_crypto_mac_abort,
 c01af60:	2301      	movs	r3, #1
 c01af62:	aa05      	add	r2, sp, #20
 c01af64:	9200      	str	r2, [sp, #0]
 c01af66:	9301      	str	r3, [sp, #4]
 c01af68:	aa03      	add	r2, sp, #12
 c01af6a:	2100      	movs	r1, #0
 c01af6c:	f7ff fa7e 	bl	c01a46c <psa_call>
 c01af70:	4604      	mov	r4, r0
                          TFM_CRYPTO_MAC_ABORT);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01af72:	4628      	mov	r0, r5
 c01af74:	f7ff fa7c 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c01af78:	4620      	mov	r0, r4
 c01af7a:	b015      	add	sp, #84	; 0x54
 c01af7c:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01af7e:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01af82:	e7f9      	b.n	c01af78 <psa_mac_abort+0x4a>

0c01af84 <psa_aead_encrypt>:
                              const uint8_t *plaintext,
                              size_t plaintext_length,
                              uint8_t *ciphertext,
                              size_t ciphertext_size,
                              size_t *ciphertext_length)
{
 c01af84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c01af88:	b099      	sub	sp, #100	; 0x64
 c01af8a:	4681      	mov	r9, r0
 c01af8c:	e9dd 4720 	ldrd	r4, r7, [sp, #128]	; 0x80
 c01af90:	4688      	mov	r8, r1
 c01af92:	4616      	mov	r6, r2
#if (TFM_CRYPTO_AEAD_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01af94:	2100      	movs	r1, #0
 c01af96:	222a      	movs	r2, #42	; 0x2a
 c01af98:	f10d 0032 	add.w	r0, sp, #50	; 0x32
{
 c01af9c:	461d      	mov	r5, r3
    struct tfm_crypto_pack_iovec iov = {
 c01af9e:	f7fc fd12 	bl	c0179c6 <memset>
 c01afa2:	231d      	movs	r3, #29
 c01afa4:	f8ad 9030 	strh.w	r9, [sp, #48]	; 0x30
 c01afa8:	930b      	str	r3, [sp, #44]	; 0x2c
 c01afaa:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 c01afae:	9517      	str	r5, [sp, #92]	; 0x5c
        .alg = alg,
        .aead_in = {.nonce = {0}, .nonce_length = nonce_length}
    };

    /* Sanitize the optional input */
    if ((additional_data == NULL) && (additional_data_length != 0)) {
 c01afb0:	b934      	cbnz	r4, c01afc0 <psa_aead_encrypt+0x3c>
 c01afb2:	b12f      	cbz	r7, c01afc0 <psa_aead_encrypt+0x3c>
        return PSA_ERROR_INVALID_ARGUMENT;
 c01afb4:	f06f 0486 	mvn.w	r4, #134	; 0x86
    PSA_CLOSE();
#endif

    return status;
#endif /* TFM_CRYPTO_AEAD_MODULE_DISABLED */
}
 c01afb8:	4620      	mov	r0, r4
 c01afba:	b019      	add	sp, #100	; 0x64
 c01afbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    psa_invec in_vec[] = {
 c01afc0:	2234      	movs	r2, #52	; 0x34
 c01afc2:	9206      	str	r2, [sp, #24]
 c01afc4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 c01afc6:	ab0b      	add	r3, sp, #44	; 0x2c
 c01afc8:	9207      	str	r2, [sp, #28]
 c01afca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
 c01afcc:	2d10      	cmp	r5, #16
    psa_invec in_vec[] = {
 c01afce:	e9cd 2408 	strd	r2, r4, [sp, #32]
    psa_outvec out_vec[] = {
 c01afd2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    psa_invec in_vec[] = {
 c01afd4:	9305      	str	r3, [sp, #20]
    psa_outvec out_vec[] = {
 c01afd6:	9203      	str	r2, [sp, #12]
 c01afd8:	9a25      	ldr	r2, [sp, #148]	; 0x94
    psa_invec in_vec[] = {
 c01afda:	970a      	str	r7, [sp, #40]	; 0x28
    psa_outvec out_vec[] = {
 c01afdc:	9204      	str	r2, [sp, #16]
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
 c01afde:	d8e9      	bhi.n	c01afb4 <psa_aead_encrypt+0x30>
    if (nonce != NULL) {
 c01afe0:	b986      	cbnz	r6, c01b004 <psa_aead_encrypt+0x80>
    PSA_CONNECT(TFM_CRYPTO);
 c01afe2:	2101      	movs	r1, #1
 c01afe4:	2080      	movs	r0, #128	; 0x80
 c01afe6:	f7ff fa3f 	bl	c01a468 <psa_connect>
 c01afea:	1e05      	subs	r5, r0, #0
 c01afec:	dc0c      	bgt.n	c01b008 <psa_aead_encrypt+0x84>
 c01afee:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01aff2:	e7e1      	b.n	c01afb8 <psa_aead_encrypt+0x34>
            iov.aead_in.nonce[idx] = nonce[idx];
 c01aff4:	5cb0      	ldrb	r0, [r6, r2]
 c01aff6:	1899      	adds	r1, r3, r2
 c01aff8:	f881 0020 	strb.w	r0, [r1, #32]
        for (idx = 0; idx < nonce_length; idx++) {
 c01affc:	3201      	adds	r2, #1
 c01affe:	42aa      	cmp	r2, r5
 c01b000:	d1f8      	bne.n	c01aff4 <psa_aead_encrypt+0x70>
 c01b002:	e7ee      	b.n	c01afe2 <psa_aead_encrypt+0x5e>
 c01b004:	2200      	movs	r2, #0
 c01b006:	e7fa      	b.n	c01affe <psa_aead_encrypt+0x7a>
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c01b008:	2301      	movs	r3, #1
        in_len--;
 c01b00a:	2c00      	cmp	r4, #0
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c01b00c:	9301      	str	r3, [sp, #4]
 c01b00e:	ab03      	add	r3, sp, #12
 c01b010:	9300      	str	r3, [sp, #0]
 c01b012:	aa05      	add	r2, sp, #20
 c01b014:	bf14      	ite	ne
 c01b016:	2303      	movne	r3, #3
 c01b018:	2302      	moveq	r3, #2
 c01b01a:	2100      	movs	r1, #0
 c01b01c:	f7ff fa26 	bl	c01a46c <psa_call>
    *ciphertext_length = out_vec[0].len;
 c01b020:	9b26      	ldr	r3, [sp, #152]	; 0x98
 c01b022:	9a04      	ldr	r2, [sp, #16]
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c01b024:	4604      	mov	r4, r0
    *ciphertext_length = out_vec[0].len;
 c01b026:	601a      	str	r2, [r3, #0]
    PSA_CLOSE();
 c01b028:	4628      	mov	r0, r5
 c01b02a:	f7ff fa21 	bl	c01a470 <psa_close>
    return status;
 c01b02e:	e7c3      	b.n	c01afb8 <psa_aead_encrypt+0x34>

0c01b030 <psa_aead_decrypt>:
                              const uint8_t *ciphertext,
                              size_t ciphertext_length,
                              uint8_t *plaintext,
                              size_t plaintext_size,
                              size_t *plaintext_length)
{
 c01b030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c01b034:	b099      	sub	sp, #100	; 0x64
 c01b036:	4681      	mov	r9, r0
 c01b038:	e9dd 4720 	ldrd	r4, r7, [sp, #128]	; 0x80
 c01b03c:	4688      	mov	r8, r1
 c01b03e:	4616      	mov	r6, r2
#if (TFM_CRYPTO_AEAD_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01b040:	2100      	movs	r1, #0
 c01b042:	222a      	movs	r2, #42	; 0x2a
 c01b044:	f10d 0032 	add.w	r0, sp, #50	; 0x32
{
 c01b048:	461d      	mov	r5, r3
    struct tfm_crypto_pack_iovec iov = {
 c01b04a:	f7fc fcbc 	bl	c0179c6 <memset>
 c01b04e:	231e      	movs	r3, #30
 c01b050:	f8ad 9030 	strh.w	r9, [sp, #48]	; 0x30
 c01b054:	930b      	str	r3, [sp, #44]	; 0x2c
 c01b056:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 c01b05a:	9517      	str	r5, [sp, #92]	; 0x5c
        .alg = alg,
        .aead_in = {.nonce = {0}, .nonce_length = nonce_length}
    };

    /* Sanitize the optional input */
    if ((additional_data == NULL) && (additional_data_length != 0)) {
 c01b05c:	b934      	cbnz	r4, c01b06c <psa_aead_decrypt+0x3c>
 c01b05e:	b12f      	cbz	r7, c01b06c <psa_aead_decrypt+0x3c>
        return PSA_ERROR_INVALID_ARGUMENT;
 c01b060:	f06f 0486 	mvn.w	r4, #134	; 0x86
    PSA_CLOSE();
#endif

    return status;
#endif /* TFM_CRYPTO_AEAD_MODULE_DISABLED */
}
 c01b064:	4620      	mov	r0, r4
 c01b066:	b019      	add	sp, #100	; 0x64
 c01b068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    psa_invec in_vec[] = {
 c01b06c:	2234      	movs	r2, #52	; 0x34
 c01b06e:	9206      	str	r2, [sp, #24]
 c01b070:	9a22      	ldr	r2, [sp, #136]	; 0x88
 c01b072:	ab0b      	add	r3, sp, #44	; 0x2c
 c01b074:	9207      	str	r2, [sp, #28]
 c01b076:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
 c01b078:	2d10      	cmp	r5, #16
    psa_invec in_vec[] = {
 c01b07a:	e9cd 2408 	strd	r2, r4, [sp, #32]
    psa_outvec out_vec[] = {
 c01b07e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    psa_invec in_vec[] = {
 c01b080:	9305      	str	r3, [sp, #20]
    psa_outvec out_vec[] = {
 c01b082:	9203      	str	r2, [sp, #12]
 c01b084:	9a25      	ldr	r2, [sp, #148]	; 0x94
    psa_invec in_vec[] = {
 c01b086:	970a      	str	r7, [sp, #40]	; 0x28
    psa_outvec out_vec[] = {
 c01b088:	9204      	str	r2, [sp, #16]
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
 c01b08a:	d8e9      	bhi.n	c01b060 <psa_aead_decrypt+0x30>
    if (nonce != NULL) {
 c01b08c:	b986      	cbnz	r6, c01b0b0 <psa_aead_decrypt+0x80>
    PSA_CONNECT(TFM_CRYPTO);
 c01b08e:	2101      	movs	r1, #1
 c01b090:	2080      	movs	r0, #128	; 0x80
 c01b092:	f7ff f9e9 	bl	c01a468 <psa_connect>
 c01b096:	1e05      	subs	r5, r0, #0
 c01b098:	dc0c      	bgt.n	c01b0b4 <psa_aead_decrypt+0x84>
 c01b09a:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01b09e:	e7e1      	b.n	c01b064 <psa_aead_decrypt+0x34>
            iov.aead_in.nonce[idx] = nonce[idx];
 c01b0a0:	5cb0      	ldrb	r0, [r6, r2]
 c01b0a2:	1899      	adds	r1, r3, r2
 c01b0a4:	f881 0020 	strb.w	r0, [r1, #32]
        for (idx = 0; idx < nonce_length; idx++) {
 c01b0a8:	3201      	adds	r2, #1
 c01b0aa:	42aa      	cmp	r2, r5
 c01b0ac:	d1f8      	bne.n	c01b0a0 <psa_aead_decrypt+0x70>
 c01b0ae:	e7ee      	b.n	c01b08e <psa_aead_decrypt+0x5e>
 c01b0b0:	2200      	movs	r2, #0
 c01b0b2:	e7fa      	b.n	c01b0aa <psa_aead_decrypt+0x7a>
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c01b0b4:	2301      	movs	r3, #1
        in_len--;
 c01b0b6:	2c00      	cmp	r4, #0
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c01b0b8:	9301      	str	r3, [sp, #4]
 c01b0ba:	ab03      	add	r3, sp, #12
 c01b0bc:	9300      	str	r3, [sp, #0]
 c01b0be:	aa05      	add	r2, sp, #20
 c01b0c0:	bf14      	ite	ne
 c01b0c2:	2303      	movne	r3, #3
 c01b0c4:	2302      	moveq	r3, #2
 c01b0c6:	2100      	movs	r1, #0
 c01b0c8:	f7ff f9d0 	bl	c01a46c <psa_call>
    *plaintext_length = out_vec[0].len;
 c01b0cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 c01b0ce:	9a04      	ldr	r2, [sp, #16]
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c01b0d0:	4604      	mov	r4, r0
    *plaintext_length = out_vec[0].len;
 c01b0d2:	601a      	str	r2, [r3, #0]
    PSA_CLOSE();
 c01b0d4:	4628      	mov	r0, r5
 c01b0d6:	f7ff f9cb 	bl	c01a470 <psa_close>
    return status;
 c01b0da:	e7c3      	b.n	c01b064 <psa_aead_decrypt+0x34>

0c01b0dc <psa_asymmetric_sign>:
                                 const uint8_t *hash,
                                 size_t hash_length,
                                 uint8_t *signature,
                                 size_t signature_size,
                                 size_t *signature_length)
{
 c01b0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01b0de:	b097      	sub	sp, #92	; 0x5c
 c01b0e0:	4615      	mov	r5, r2
 c01b0e2:	4607      	mov	r7, r0
 c01b0e4:	460e      	mov	r6, r1
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01b0e6:	222e      	movs	r2, #46	; 0x2e
 c01b0e8:	2100      	movs	r1, #0
 c01b0ea:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
{
 c01b0ee:	461c      	mov	r4, r3
    struct tfm_crypto_pack_iovec iov = {
 c01b0f0:	f7fc fc69 	bl	c0179c6 <memset>
 c01b0f4:	231f      	movs	r3, #31
 c01b0f6:	9309      	str	r3, [sp, #36]	; 0x24
        .sfn_id = TFM_CRYPTO_ASYMMETRIC_SIGN_SID,
        .key_handle = handle,
        .alg = alg,
    };

    psa_invec in_vec[] = {
 c01b0f8:	ab09      	add	r3, sp, #36	; 0x24
 c01b0fa:	9305      	str	r3, [sp, #20]
 c01b0fc:	2334      	movs	r3, #52	; 0x34
 c01b0fe:	e9cd 3506 	strd	r3, r5, [sp, #24]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = hash, .len = hash_length},
    };
    psa_outvec out_vec[] = {
 c01b102:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        {.base = signature, .len = signature_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01b104:	2101      	movs	r1, #1
    psa_outvec out_vec[] = {
 c01b106:	9303      	str	r3, [sp, #12]
 c01b108:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    PSA_CONNECT(TFM_CRYPTO);
 c01b10a:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01b10c:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 c01b110:	960d      	str	r6, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01b112:	9408      	str	r4, [sp, #32]
    psa_outvec out_vec[] = {
 c01b114:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c01b116:	f7ff f9a7 	bl	c01a468 <psa_connect>
 c01b11a:	1e05      	subs	r5, r0, #0
 c01b11c:	dd12      	ble.n	c01b144 <psa_asymmetric_sign+0x68>
#endif

    status = API_DISPATCH(tfm_crypto_asymmetric_sign,
 c01b11e:	2301      	movs	r3, #1
 c01b120:	9301      	str	r3, [sp, #4]
 c01b122:	ab03      	add	r3, sp, #12
 c01b124:	9300      	str	r3, [sp, #0]
 c01b126:	aa05      	add	r2, sp, #20
 c01b128:	2302      	movs	r3, #2
 c01b12a:	2100      	movs	r1, #0
 c01b12c:	f7ff f99e 	bl	c01a46c <psa_call>
                          TFM_CRYPTO_ASYMMETRIC_SIGN);

    *signature_length = out_vec[0].len;
 c01b130:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 c01b132:	9a04      	ldr	r2, [sp, #16]
    status = API_DISPATCH(tfm_crypto_asymmetric_sign,
 c01b134:	4604      	mov	r4, r0
    *signature_length = out_vec[0].len;
 c01b136:	601a      	str	r2, [r3, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01b138:	4628      	mov	r0, r5
 c01b13a:	f7ff f999 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c01b13e:	4620      	mov	r0, r4
 c01b140:	b017      	add	sp, #92	; 0x5c
 c01b142:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01b144:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01b148:	e7f9      	b.n	c01b13e <psa_asymmetric_sign+0x62>

0c01b14a <psa_asymmetric_verify>:
                                   psa_algorithm_t alg,
                                   const uint8_t *hash,
                                   size_t hash_length,
                                   const uint8_t *signature,
                                   size_t signature_length)
{
 c01b14a:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01b14c:	b097      	sub	sp, #92	; 0x5c
 c01b14e:	4615      	mov	r5, r2
 c01b150:	4607      	mov	r7, r0
 c01b152:	460e      	mov	r6, r1
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01b154:	222e      	movs	r2, #46	; 0x2e
 c01b156:	2100      	movs	r1, #0
 c01b158:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
{
 c01b15c:	461c      	mov	r4, r3
    struct tfm_crypto_pack_iovec iov = {
 c01b15e:	f7fc fc32 	bl	c0179c6 <memset>
 c01b162:	2320      	movs	r3, #32
 c01b164:	9309      	str	r3, [sp, #36]	; 0x24
        .sfn_id = TFM_CRYPTO_ASYMMETRIC_VERIFY_SID,
        .key_handle = handle,
        .alg = alg
    };

    psa_invec in_vec[] = {
 c01b166:	ab09      	add	r3, sp, #36	; 0x24
 c01b168:	9303      	str	r3, [sp, #12]
 c01b16a:	2334      	movs	r3, #52	; 0x34
 c01b16c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 c01b170:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        {.base = hash, .len = hash_length},
        {.base = signature, .len = signature_length}
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01b172:	2101      	movs	r1, #1
    psa_invec in_vec[] = {
 c01b174:	9307      	str	r3, [sp, #28]
 c01b176:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    PSA_CONNECT(TFM_CRYPTO);
 c01b178:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01b17a:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 c01b17e:	960d      	str	r6, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01b180:	9406      	str	r4, [sp, #24]
 c01b182:	9308      	str	r3, [sp, #32]
    PSA_CONNECT(TFM_CRYPTO);
 c01b184:	f7ff f970 	bl	c01a468 <psa_connect>
 c01b188:	1e05      	subs	r5, r0, #0
 c01b18a:	dd0d      	ble.n	c01b1a8 <psa_asymmetric_verify+0x5e>
#endif

    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_asymmetric_verify,
 c01b18c:	2100      	movs	r1, #0
 c01b18e:	2303      	movs	r3, #3
 c01b190:	e9cd 1100 	strd	r1, r1, [sp]
 c01b194:	aa03      	add	r2, sp, #12
 c01b196:	f7ff f969 	bl	c01a46c <psa_call>
 c01b19a:	4604      	mov	r4, r0
                                    TFM_CRYPTO_ASYMMETRIC_VERIFY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01b19c:	4628      	mov	r0, r5
 c01b19e:	f7ff f967 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c01b1a2:	4620      	mov	r0, r4
 c01b1a4:	b017      	add	sp, #92	; 0x5c
 c01b1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01b1a8:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01b1ac:	e7f9      	b.n	c01b1a2 <psa_asymmetric_verify+0x58>

0c01b1ae <psa_asymmetric_encrypt>:
                                    const uint8_t *salt,
                                    size_t salt_length,
                                    uint8_t *output,
                                    size_t output_size,
                                    size_t *output_length)
{
 c01b1ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c01b1b2:	b099      	sub	sp, #100	; 0x64
 c01b1b4:	4681      	mov	r9, r0
 c01b1b6:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 c01b1ba:	4688      	mov	r8, r1
 c01b1bc:	4617      	mov	r7, r2
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01b1be:	2100      	movs	r1, #0
 c01b1c0:	222e      	movs	r2, #46	; 0x2e
 c01b1c2:	f10d 0032 	add.w	r0, sp, #50	; 0x32
{
 c01b1c6:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c01b1c8:	f7fc fbfd 	bl	c0179c6 <memset>
 c01b1cc:	2321      	movs	r3, #33	; 0x21
 c01b1ce:	f8ad 9030 	strh.w	r9, [sp, #48]	; 0x30
 c01b1d2:	930b      	str	r3, [sp, #44]	; 0x2c
 c01b1d4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
        .key_handle = handle,
        .alg = alg
    };

    /* Sanitize the optional input */
    if ((salt == NULL) && (salt_length != 0)) {
 c01b1d8:	b904      	cbnz	r4, c01b1dc <psa_asymmetric_encrypt+0x2e>
 c01b1da:	bb45      	cbnz	r5, c01b22e <psa_asymmetric_encrypt+0x80>
        return PSA_ERROR_INVALID_ARGUMENT;
    }

    psa_invec in_vec[] = {
 c01b1dc:	ab0b      	add	r3, sp, #44	; 0x2c
 c01b1de:	9305      	str	r3, [sp, #20]
 c01b1e0:	2334      	movs	r3, #52	; 0x34
 c01b1e2:	e9cd 3706 	strd	r3, r7, [sp, #24]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = input, .len = input_length},
        {.base = salt, .len = salt_length}
    };

    psa_outvec out_vec[] = {
 c01b1e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
        {.base = output, .len = output_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01b1e8:	2101      	movs	r1, #1
    psa_outvec out_vec[] = {
 c01b1ea:	9303      	str	r3, [sp, #12]
 c01b1ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    PSA_CONNECT(TFM_CRYPTO);
 c01b1ee:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c01b1f0:	950a      	str	r5, [sp, #40]	; 0x28
 c01b1f2:	e9cd 6408 	strd	r6, r4, [sp, #32]
    psa_outvec out_vec[] = {
 c01b1f6:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c01b1f8:	f7ff f936 	bl	c01a468 <psa_connect>
 c01b1fc:	1e05      	subs	r5, r0, #0
 c01b1fe:	dd19      	ble.n	c01b234 <psa_asymmetric_encrypt+0x86>
#ifdef TFM_PSA_API
    size_t in_len = ARRAY_SIZE(in_vec);
    if (salt == NULL) {
        in_len--;
    }
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c01b200:	2301      	movs	r3, #1
        in_len--;
 c01b202:	2c00      	cmp	r4, #0
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c01b204:	9301      	str	r3, [sp, #4]
 c01b206:	ab03      	add	r3, sp, #12
 c01b208:	9300      	str	r3, [sp, #0]
 c01b20a:	aa05      	add	r2, sp, #20
 c01b20c:	bf14      	ite	ne
 c01b20e:	2303      	movne	r3, #3
 c01b210:	2302      	moveq	r3, #2
 c01b212:	2100      	movs	r1, #0
 c01b214:	f7ff f92a 	bl	c01a46c <psa_call>
#else
    status = API_DISPATCH(tfm_crypto_asymmetric_encrypt,
                          TFM_CRYPTO_ASYMMETRIC_ENCRYPT);
#endif

    *output_length = out_vec[0].len;
 c01b218:	9b24      	ldr	r3, [sp, #144]	; 0x90
 c01b21a:	9a04      	ldr	r2, [sp, #16]
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c01b21c:	4604      	mov	r4, r0
    *output_length = out_vec[0].len;
 c01b21e:	601a      	str	r2, [r3, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01b220:	4628      	mov	r0, r5
 c01b222:	f7ff f925 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c01b226:	4620      	mov	r0, r4
 c01b228:	b019      	add	sp, #100	; 0x64
 c01b22a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return PSA_ERROR_INVALID_ARGUMENT;
 c01b22e:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c01b232:	e7f8      	b.n	c01b226 <psa_asymmetric_encrypt+0x78>
    PSA_CONNECT(TFM_CRYPTO);
 c01b234:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01b238:	e7f5      	b.n	c01b226 <psa_asymmetric_encrypt+0x78>

0c01b23a <psa_asymmetric_decrypt>:
                                    const uint8_t *salt,
                                    size_t salt_length,
                                    uint8_t *output,
                                    size_t output_size,
                                    size_t *output_length)
{
 c01b23a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c01b23e:	b099      	sub	sp, #100	; 0x64
 c01b240:	4681      	mov	r9, r0
 c01b242:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 c01b246:	4688      	mov	r8, r1
 c01b248:	4617      	mov	r7, r2
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01b24a:	2100      	movs	r1, #0
 c01b24c:	222e      	movs	r2, #46	; 0x2e
 c01b24e:	f10d 0032 	add.w	r0, sp, #50	; 0x32
{
 c01b252:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c01b254:	f7fc fbb7 	bl	c0179c6 <memset>
 c01b258:	2322      	movs	r3, #34	; 0x22
 c01b25a:	f8ad 9030 	strh.w	r9, [sp, #48]	; 0x30
 c01b25e:	930b      	str	r3, [sp, #44]	; 0x2c
 c01b260:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
        .key_handle = handle,
        .alg = alg
    };

    /* Sanitize the optional input */
    if ((salt == NULL) && (salt_length != 0)) {
 c01b264:	b904      	cbnz	r4, c01b268 <psa_asymmetric_decrypt+0x2e>
 c01b266:	bb45      	cbnz	r5, c01b2ba <psa_asymmetric_decrypt+0x80>
        return PSA_ERROR_INVALID_ARGUMENT;
    }

    psa_invec in_vec[] = {
 c01b268:	ab0b      	add	r3, sp, #44	; 0x2c
 c01b26a:	9305      	str	r3, [sp, #20]
 c01b26c:	2334      	movs	r3, #52	; 0x34
 c01b26e:	e9cd 3706 	strd	r3, r7, [sp, #24]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = input, .len = input_length},
        {.base = salt, .len = salt_length}
    };

    psa_outvec out_vec[] = {
 c01b272:	9b22      	ldr	r3, [sp, #136]	; 0x88
        {.base = output, .len = output_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01b274:	2101      	movs	r1, #1
    psa_outvec out_vec[] = {
 c01b276:	9303      	str	r3, [sp, #12]
 c01b278:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    PSA_CONNECT(TFM_CRYPTO);
 c01b27a:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c01b27c:	950a      	str	r5, [sp, #40]	; 0x28
 c01b27e:	e9cd 6408 	strd	r6, r4, [sp, #32]
    psa_outvec out_vec[] = {
 c01b282:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c01b284:	f7ff f8f0 	bl	c01a468 <psa_connect>
 c01b288:	1e05      	subs	r5, r0, #0
 c01b28a:	dd19      	ble.n	c01b2c0 <psa_asymmetric_decrypt+0x86>
#ifdef TFM_PSA_API
    size_t in_len = ARRAY_SIZE(in_vec);
    if (salt == NULL) {
        in_len--;
    }
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c01b28c:	2301      	movs	r3, #1
        in_len--;
 c01b28e:	2c00      	cmp	r4, #0
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c01b290:	9301      	str	r3, [sp, #4]
 c01b292:	ab03      	add	r3, sp, #12
 c01b294:	9300      	str	r3, [sp, #0]
 c01b296:	aa05      	add	r2, sp, #20
 c01b298:	bf14      	ite	ne
 c01b29a:	2303      	movne	r3, #3
 c01b29c:	2302      	moveq	r3, #2
 c01b29e:	2100      	movs	r1, #0
 c01b2a0:	f7ff f8e4 	bl	c01a46c <psa_call>
#else
    status = API_DISPATCH(tfm_crypto_asymmetric_decrypt,
                          TFM_CRYPTO_ASYMMETRIC_DECRYPT);
#endif

    *output_length = out_vec[0].len;
 c01b2a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 c01b2a6:	9a04      	ldr	r2, [sp, #16]
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c01b2a8:	4604      	mov	r4, r0
    *output_length = out_vec[0].len;
 c01b2aa:	601a      	str	r2, [r3, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01b2ac:	4628      	mov	r0, r5
 c01b2ae:	f7ff f8df 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c01b2b2:	4620      	mov	r0, r4
 c01b2b4:	b019      	add	sp, #100	; 0x64
 c01b2b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return PSA_ERROR_INVALID_ARGUMENT;
 c01b2ba:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c01b2be:	e7f8      	b.n	c01b2b2 <psa_asymmetric_decrypt+0x78>
    PSA_CONNECT(TFM_CRYPTO);
 c01b2c0:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01b2c4:	e7f5      	b.n	c01b2b2 <psa_asymmetric_decrypt+0x78>

0c01b2c6 <psa_get_generator_capacity>:

__attribute__((section("SFN")))
psa_status_t psa_get_generator_capacity(const psa_crypto_generator_t *generator,
                                        size_t *capacity)
{
 c01b2c6:	b530      	push	{r4, r5, lr}
 c01b2c8:	b095      	sub	sp, #84	; 0x54
 c01b2ca:	4605      	mov	r5, r0
 c01b2cc:	460c      	mov	r4, r1
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01b2ce:	2230      	movs	r2, #48	; 0x30
 c01b2d0:	2100      	movs	r1, #0
 c01b2d2:	a808      	add	r0, sp, #32
 c01b2d4:	f7fc fb77 	bl	c0179c6 <memset>
 c01b2d8:	2323      	movs	r3, #35	; 0x23
 c01b2da:	9307      	str	r3, [sp, #28]
 c01b2dc:	682b      	ldr	r3, [r5, #0]
    psa_outvec out_vec[] = {
        {.base = capacity, .len = sizeof(size_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01b2de:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01b2e0:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01b2e2:	ab07      	add	r3, sp, #28
 c01b2e4:	9303      	str	r3, [sp, #12]
 c01b2e6:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c01b2e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01b2ec:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01b2ee:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01b2f0:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01b2f2:	f7ff f8b9 	bl	c01a468 <psa_connect>
 c01b2f6:	1e05      	subs	r5, r0, #0
 c01b2f8:	dd0e      	ble.n	c01b318 <psa_get_generator_capacity+0x52>
#endif

    status = API_DISPATCH(tfm_crypto_get_generator_capacity,
 c01b2fa:	2301      	movs	r3, #1
 c01b2fc:	aa05      	add	r2, sp, #20
 c01b2fe:	9200      	str	r2, [sp, #0]
 c01b300:	9301      	str	r3, [sp, #4]
 c01b302:	aa03      	add	r2, sp, #12
 c01b304:	2100      	movs	r1, #0
 c01b306:	f7ff f8b1 	bl	c01a46c <psa_call>
 c01b30a:	4604      	mov	r4, r0
                          TFM_CRYPTO_GET_GENERATOR_CAPACITY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01b30c:	4628      	mov	r0, r5
 c01b30e:	f7ff f8af 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c01b312:	4620      	mov	r0, r4
 c01b314:	b015      	add	sp, #84	; 0x54
 c01b316:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01b318:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01b31c:	e7f9      	b.n	c01b312 <psa_get_generator_capacity+0x4c>

0c01b31e <psa_generator_read>:

__attribute__((section("SFN")))
psa_status_t psa_generator_read(psa_crypto_generator_t *generator,
                                uint8_t *output,
                                size_t output_length)
{
 c01b31e:	b570      	push	{r4, r5, r6, lr}
 c01b320:	b094      	sub	sp, #80	; 0x50
 c01b322:	460d      	mov	r5, r1
 c01b324:	4606      	mov	r6, r0
 c01b326:	4614      	mov	r4, r2
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01b328:	2100      	movs	r1, #0
 c01b32a:	2230      	movs	r2, #48	; 0x30
 c01b32c:	a808      	add	r0, sp, #32
 c01b32e:	f7fc fb4a 	bl	c0179c6 <memset>
 c01b332:	2324      	movs	r3, #36	; 0x24
 c01b334:	9307      	str	r3, [sp, #28]
 c01b336:	6833      	ldr	r3, [r6, #0]
    psa_outvec out_vec[] = {
        {.base = output, .len = output_length},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01b338:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01b33a:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01b33c:	ab07      	add	r3, sp, #28
 c01b33e:	9303      	str	r3, [sp, #12]
 c01b340:	2334      	movs	r3, #52	; 0x34
    PSA_CONNECT(TFM_CRYPTO);
 c01b342:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01b344:	e9cd 3504 	strd	r3, r5, [sp, #16]
 c01b348:	9406      	str	r4, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01b34a:	f7ff f88d 	bl	c01a468 <psa_connect>
 c01b34e:	1e05      	subs	r5, r0, #0
 c01b350:	dd0e      	ble.n	c01b370 <psa_generator_read+0x52>
#endif

    status = API_DISPATCH(tfm_crypto_generator_read,
 c01b352:	2301      	movs	r3, #1
 c01b354:	aa05      	add	r2, sp, #20
 c01b356:	9200      	str	r2, [sp, #0]
 c01b358:	9301      	str	r3, [sp, #4]
 c01b35a:	aa03      	add	r2, sp, #12
 c01b35c:	2100      	movs	r1, #0
 c01b35e:	f7ff f885 	bl	c01a46c <psa_call>
 c01b362:	4604      	mov	r4, r0
                          TFM_CRYPTO_GENERATOR_READ);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01b364:	4628      	mov	r0, r5
 c01b366:	f7ff f883 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c01b36a:	4620      	mov	r0, r4
 c01b36c:	b014      	add	sp, #80	; 0x50
 c01b36e:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01b370:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01b374:	e7f9      	b.n	c01b36a <psa_generator_read+0x4c>

0c01b376 <psa_generator_import_key>:
__attribute__((section("SFN")))
psa_status_t psa_generator_import_key(psa_key_handle_t handle,
                                      psa_key_type_t type,
                                      size_t bits,
                                      psa_crypto_generator_t *generator)
{
 c01b376:	b570      	push	{r4, r5, r6, lr}
 c01b378:	b096      	sub	sp, #88	; 0x58
 c01b37a:	460d      	mov	r5, r1
 c01b37c:	4606      	mov	r6, r0
 c01b37e:	9203      	str	r2, [sp, #12]
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01b380:	2100      	movs	r1, #0
 c01b382:	222e      	movs	r2, #46	; 0x2e
 c01b384:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
{
 c01b388:	461c      	mov	r4, r3
    struct tfm_crypto_pack_iovec iov = {
 c01b38a:	f7fc fb1c 	bl	c0179c6 <memset>
 c01b38e:	2325      	movs	r3, #37	; 0x25
 c01b390:	9309      	str	r3, [sp, #36]	; 0x24
 c01b392:	6823      	ldr	r3, [r4, #0]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = &bits, .len = sizeof(size_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01b394:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01b396:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c01b398:	ab09      	add	r3, sp, #36	; 0x24
 c01b39a:	9305      	str	r3, [sp, #20]
 c01b39c:	2334      	movs	r3, #52	; 0x34
 c01b39e:	9306      	str	r3, [sp, #24]
 c01b3a0:	ab03      	add	r3, sp, #12
 c01b3a2:	9307      	str	r3, [sp, #28]
 c01b3a4:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01b3a6:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01b3a8:	950b      	str	r5, [sp, #44]	; 0x2c
 c01b3aa:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
    psa_invec in_vec[] = {
 c01b3ae:	9308      	str	r3, [sp, #32]
    PSA_CONNECT(TFM_CRYPTO);
 c01b3b0:	f7ff f85a 	bl	c01a468 <psa_connect>
 c01b3b4:	1e05      	subs	r5, r0, #0
 c01b3b6:	dd0d      	ble.n	c01b3d4 <psa_generator_import_key+0x5e>
#endif

    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_generator_import_key,
 c01b3b8:	2100      	movs	r1, #0
 c01b3ba:	2302      	movs	r3, #2
 c01b3bc:	e9cd 1100 	strd	r1, r1, [sp]
 c01b3c0:	aa05      	add	r2, sp, #20
 c01b3c2:	f7ff f853 	bl	c01a46c <psa_call>
 c01b3c6:	4604      	mov	r4, r0
                                    TFM_CRYPTO_GENERATOR_IMPORT_KEY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01b3c8:	4628      	mov	r0, r5
 c01b3ca:	f7ff f851 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c01b3ce:	4620      	mov	r0, r4
 c01b3d0:	b016      	add	sp, #88	; 0x58
 c01b3d2:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01b3d4:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01b3d8:	e7f9      	b.n	c01b3ce <psa_generator_import_key+0x58>

0c01b3da <psa_generator_abort>:

__attribute__((section("SFN")))
psa_status_t psa_generator_abort(psa_crypto_generator_t *generator)
{
 c01b3da:	b530      	push	{r4, r5, lr}
 c01b3dc:	b095      	sub	sp, #84	; 0x54
 c01b3de:	4604      	mov	r4, r0
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01b3e0:	2230      	movs	r2, #48	; 0x30
 c01b3e2:	2100      	movs	r1, #0
 c01b3e4:	a808      	add	r0, sp, #32
 c01b3e6:	f7fc faee 	bl	c0179c6 <memset>
 c01b3ea:	2326      	movs	r3, #38	; 0x26
 c01b3ec:	9307      	str	r3, [sp, #28]
 c01b3ee:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(generator->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01b3f0:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01b3f2:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01b3f4:	ab07      	add	r3, sp, #28
 c01b3f6:	9303      	str	r3, [sp, #12]
 c01b3f8:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c01b3fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01b3fe:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01b400:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01b402:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01b404:	f7ff f830 	bl	c01a468 <psa_connect>
 c01b408:	1e05      	subs	r5, r0, #0
 c01b40a:	dd0e      	ble.n	c01b42a <psa_generator_abort+0x50>
#endif

    status = API_DISPATCH(tfm_crypto_generator_abort,
 c01b40c:	2301      	movs	r3, #1
 c01b40e:	aa05      	add	r2, sp, #20
 c01b410:	9200      	str	r2, [sp, #0]
 c01b412:	9301      	str	r3, [sp, #4]
 c01b414:	aa03      	add	r2, sp, #12
 c01b416:	2100      	movs	r1, #0
 c01b418:	f7ff f828 	bl	c01a46c <psa_call>
 c01b41c:	4604      	mov	r4, r0
                          TFM_CRYPTO_GENERATOR_ABORT);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01b41e:	4628      	mov	r0, r5
 c01b420:	f7ff f826 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c01b424:	4620      	mov	r0, r4
 c01b426:	b015      	add	sp, #84	; 0x54
 c01b428:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01b42a:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01b42e:	e7f9      	b.n	c01b424 <psa_generator_abort+0x4a>

0c01b430 <psa_key_derivation>:
                                const uint8_t *salt,
                                size_t salt_length,
                                const uint8_t *label,
                                size_t label_length,
                                size_t capacity)
{
 c01b430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c01b434:	b098      	sub	sp, #96	; 0x60
 c01b436:	4606      	mov	r6, r0
 c01b438:	e9dd 8520 	ldrd	r8, r5, [sp, #128]	; 0x80
 c01b43c:	468a      	mov	sl, r1
 c01b43e:	4691      	mov	r9, r2
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01b440:	2100      	movs	r1, #0
 c01b442:	222e      	movs	r2, #46	; 0x2e
 c01b444:	f10d 0032 	add.w	r0, sp, #50	; 0x32
{
 c01b448:	461c      	mov	r4, r3
 c01b44a:	9f22      	ldr	r7, [sp, #136]	; 0x88
    struct tfm_crypto_pack_iovec iov = {
 c01b44c:	f7fc fabb 	bl	c0179c6 <memset>
 c01b450:	2327      	movs	r3, #39	; 0x27
 c01b452:	930b      	str	r3, [sp, #44]	; 0x2c
 c01b454:	6833      	ldr	r3, [r6, #0]
 c01b456:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
 c01b45a:	9311      	str	r3, [sp, #68]	; 0x44
 c01b45c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 c01b45e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 c01b462:	9312      	str	r3, [sp, #72]	; 0x48
        .op_handle = generator->handle,
        .capacity = capacity,
    };

    /* Sanitize the optional input */
    if ((salt == NULL) && (salt_length != 0)) {
 c01b464:	b914      	cbnz	r4, c01b46c <psa_key_derivation+0x3c>
 c01b466:	f1b8 0f00 	cmp.w	r8, #0
 c01b46a:	d12a      	bne.n	c01b4c2 <psa_key_derivation+0x92>
        return PSA_ERROR_INVALID_ARGUMENT;
    }

    if ((label == NULL) && (label_length != 0)) {
 c01b46c:	b905      	cbnz	r5, c01b470 <psa_key_derivation+0x40>
 c01b46e:	bb47      	cbnz	r7, c01b4c2 <psa_key_derivation+0x92>
        return PSA_ERROR_INVALID_ARGUMENT;
    }

    psa_invec in_vec[] = {
 c01b470:	ab0b      	add	r3, sp, #44	; 0x2c
 c01b472:	9305      	str	r3, [sp, #20]
 c01b474:	2334      	movs	r3, #52	; 0x34
 c01b476:	e9cd 3406 	strd	r3, r4, [sp, #24]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = salt, .len = salt_length},
        {.base = label, .len = label_length},
    };

    psa_outvec out_vec[] = {
 c01b47a:	2304      	movs	r3, #4
        {.base = &(generator->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01b47c:	2101      	movs	r1, #1
 c01b47e:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01b480:	9603      	str	r6, [sp, #12]
    psa_invec in_vec[] = {
 c01b482:	e9cd 8508 	strd	r8, r5, [sp, #32]
 c01b486:	970a      	str	r7, [sp, #40]	; 0x28
    psa_outvec out_vec[] = {
 c01b488:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c01b48a:	f7fe ffed 	bl	c01a468 <psa_connect>
 c01b48e:	1e06      	subs	r6, r0, #0
 c01b490:	dd1a      	ble.n	c01b4c8 <psa_key_derivation+0x98>
#endif

#ifdef TFM_PSA_API
    size_t in_len = ARRAY_SIZE(in_vec);
    if (label == NULL) {
 c01b492:	b9a5      	cbnz	r5, c01b4be <psa_key_derivation+0x8e>
        in_len--;
        if (salt == NULL) {
            in_len--;
 c01b494:	2c00      	cmp	r4, #0
 c01b496:	bf14      	ite	ne
 c01b498:	2302      	movne	r3, #2
 c01b49a:	2301      	moveq	r3, #1
        }
    }
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c01b49c:	2201      	movs	r2, #1
 c01b49e:	9201      	str	r2, [sp, #4]
 c01b4a0:	aa03      	add	r2, sp, #12
 c01b4a2:	9200      	str	r2, [sp, #0]
 c01b4a4:	2100      	movs	r1, #0
 c01b4a6:	aa05      	add	r2, sp, #20
 c01b4a8:	4630      	mov	r0, r6
 c01b4aa:	f7fe ffdf 	bl	c01a46c <psa_call>
 c01b4ae:	4604      	mov	r4, r0
    status = API_DISPATCH(tfm_crypto_key_derivation,
                          TFM_CRYPTO_KEY_DERIVATION);
#endif

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01b4b0:	4630      	mov	r0, r6
 c01b4b2:	f7fe ffdd 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c01b4b6:	4620      	mov	r0, r4
 c01b4b8:	b018      	add	sp, #96	; 0x60
 c01b4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t in_len = ARRAY_SIZE(in_vec);
 c01b4be:	2303      	movs	r3, #3
 c01b4c0:	e7ec      	b.n	c01b49c <psa_key_derivation+0x6c>
        return PSA_ERROR_INVALID_ARGUMENT;
 c01b4c2:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c01b4c6:	e7f6      	b.n	c01b4b6 <psa_key_derivation+0x86>
    PSA_CONNECT(TFM_CRYPTO);
 c01b4c8:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01b4cc:	e7f3      	b.n	c01b4b6 <psa_key_derivation+0x86>

0c01b4ce <psa_key_agreement>:
psa_status_t psa_key_agreement(psa_crypto_generator_t *generator,
                               psa_key_handle_t private_key,
                               const uint8_t *peer_key,
                               size_t peer_key_length,
                               psa_algorithm_t alg)
{
 c01b4ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01b4d0:	b097      	sub	sp, #92	; 0x5c
 c01b4d2:	4604      	mov	r4, r0
 c01b4d4:	460f      	mov	r7, r1
 c01b4d6:	4616      	mov	r6, r2
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01b4d8:	2100      	movs	r1, #0
 c01b4da:	222e      	movs	r2, #46	; 0x2e
 c01b4dc:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
{
 c01b4e0:	461d      	mov	r5, r3
    struct tfm_crypto_pack_iovec iov = {
 c01b4e2:	f7fc fa70 	bl	c0179c6 <memset>
 c01b4e6:	2328      	movs	r3, #40	; 0x28
 c01b4e8:	9309      	str	r3, [sp, #36]	; 0x24
 c01b4ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    psa_outvec out_vec[] = {
        {.base = &(generator->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01b4ec:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01b4ee:	930d      	str	r3, [sp, #52]	; 0x34
 c01b4f0:	6823      	ldr	r3, [r4, #0]
    PSA_CONNECT(TFM_CRYPTO);
 c01b4f2:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01b4f4:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c01b4f6:	ab09      	add	r3, sp, #36	; 0x24
 c01b4f8:	9305      	str	r3, [sp, #20]
 c01b4fa:	2334      	movs	r3, #52	; 0x34
 c01b4fc:	e9cd 3606 	strd	r3, r6, [sp, #24]
    psa_outvec out_vec[] = {
 c01b500:	2304      	movs	r3, #4
    psa_invec in_vec[] = {
 c01b502:	9508      	str	r5, [sp, #32]
    struct tfm_crypto_pack_iovec iov = {
 c01b504:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
    psa_outvec out_vec[] = {
 c01b508:	9403      	str	r4, [sp, #12]
 c01b50a:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c01b50c:	f7fe ffac 	bl	c01a468 <psa_connect>
 c01b510:	1e05      	subs	r5, r0, #0
 c01b512:	dd0f      	ble.n	c01b534 <psa_key_agreement+0x66>
#endif

    status = API_DISPATCH(tfm_crypto_key_agreement,
 c01b514:	2301      	movs	r3, #1
 c01b516:	9301      	str	r3, [sp, #4]
 c01b518:	ab03      	add	r3, sp, #12
 c01b51a:	9300      	str	r3, [sp, #0]
 c01b51c:	aa05      	add	r2, sp, #20
 c01b51e:	2302      	movs	r3, #2
 c01b520:	2100      	movs	r1, #0
 c01b522:	f7fe ffa3 	bl	c01a46c <psa_call>
 c01b526:	4604      	mov	r4, r0
                          TFM_CRYPTO_KEY_AGREEMENT);

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01b528:	4628      	mov	r0, r5
 c01b52a:	f7fe ffa1 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c01b52e:	4620      	mov	r0, r4
 c01b530:	b017      	add	sp, #92	; 0x5c
 c01b532:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01b534:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01b538:	e7f9      	b.n	c01b52e <psa_key_agreement+0x60>

0c01b53a <psa_generate_random>:

__attribute__((section("SFN")))
psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
 c01b53a:	b530      	push	{r4, r5, lr}
 c01b53c:	b095      	sub	sp, #84	; 0x54
 c01b53e:	4605      	mov	r5, r0
 c01b540:	460c      	mov	r4, r1
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01b542:	2230      	movs	r2, #48	; 0x30
 c01b544:	2100      	movs	r1, #0
 c01b546:	a808      	add	r0, sp, #32
 c01b548:	f7fc fa3d 	bl	c0179c6 <memset>
 c01b54c:	2229      	movs	r2, #41	; 0x29
 c01b54e:	ab14      	add	r3, sp, #80	; 0x50
 c01b550:	f843 2d34 	str.w	r2, [r3, #-52]!
        .sfn_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
 c01b554:	9303      	str	r3, [sp, #12]
 c01b556:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
 c01b558:	9406      	str	r4, [sp, #24]
 c01b55a:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
 c01b55e:	b18c      	cbz	r4, c01b584 <psa_generate_random+0x4a>
        return PSA_SUCCESS;
    }

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01b560:	2101      	movs	r1, #1
 c01b562:	2080      	movs	r0, #128	; 0x80
 c01b564:	f7fe ff80 	bl	c01a468 <psa_connect>
 c01b568:	1e05      	subs	r5, r0, #0
 c01b56a:	dd0e      	ble.n	c01b58a <psa_generate_random+0x50>
#endif

    status = API_DISPATCH(tfm_crypto_generate_random,
 c01b56c:	2301      	movs	r3, #1
 c01b56e:	aa05      	add	r2, sp, #20
 c01b570:	9200      	str	r2, [sp, #0]
 c01b572:	9301      	str	r3, [sp, #4]
 c01b574:	aa03      	add	r2, sp, #12
 c01b576:	2100      	movs	r1, #0
 c01b578:	f7fe ff78 	bl	c01a46c <psa_call>
 c01b57c:	4604      	mov	r4, r0
                          TFM_CRYPTO_GENERATE_RANDOM);

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01b57e:	4628      	mov	r0, r5
 c01b580:	f7fe ff76 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c01b584:	4620      	mov	r0, r4
 c01b586:	b015      	add	sp, #84	; 0x54
 c01b588:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01b58a:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01b58e:	e7f9      	b.n	c01b584 <psa_generate_random+0x4a>

0c01b590 <psa_generate_key>:
psa_status_t psa_generate_key(psa_key_handle_t handle,
                              psa_key_type_t type,
                              size_t bits,
                              const void *extra,
                              size_t extra_size)
{
 c01b590:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01b592:	b099      	sub	sp, #100	; 0x64
 c01b594:	4607      	mov	r7, r0
 c01b596:	460e      	mov	r6, r1
 c01b598:	9203      	str	r2, [sp, #12]
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01b59a:	2100      	movs	r1, #0
 c01b59c:	222e      	movs	r2, #46	; 0x2e
 c01b59e:	f10d 0032 	add.w	r0, sp, #50	; 0x32
{
 c01b5a2:	461c      	mov	r4, r3
 c01b5a4:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    struct tfm_crypto_pack_iovec iov = {
 c01b5a6:	f7fc fa0e 	bl	c0179c6 <memset>
 c01b5aa:	232a      	movs	r3, #42	; 0x2a
 c01b5ac:	f8ad 7030 	strh.w	r7, [sp, #48]	; 0x30
 c01b5b0:	930b      	str	r3, [sp, #44]	; 0x2c
 c01b5b2:	960d      	str	r6, [sp, #52]	; 0x34
        .key_handle = handle,
        .type = type,
    };

    /* Sanitize the optional input */
    if ((extra == NULL) && (extra_size != 0)) {
 c01b5b4:	b904      	cbnz	r4, c01b5b8 <psa_generate_key+0x28>
 c01b5b6:	bb05      	cbnz	r5, c01b5fa <psa_generate_key+0x6a>
        return PSA_ERROR_INVALID_ARGUMENT;
    }

    psa_invec in_vec[] = {
 c01b5b8:	ab0b      	add	r3, sp, #44	; 0x2c
 c01b5ba:	9305      	str	r3, [sp, #20]
 c01b5bc:	2334      	movs	r3, #52	; 0x34
 c01b5be:	9306      	str	r3, [sp, #24]
 c01b5c0:	ab03      	add	r3, sp, #12
 c01b5c2:	9307      	str	r3, [sp, #28]
 c01b5c4:	2304      	movs	r3, #4
        {.base = &bits, .len = sizeof(size_t)},
        {.base = extra, .len = extra_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01b5c6:	2101      	movs	r1, #1
 c01b5c8:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c01b5ca:	950a      	str	r5, [sp, #40]	; 0x28
 c01b5cc:	e9cd 3408 	strd	r3, r4, [sp, #32]
    PSA_CONNECT(TFM_CRYPTO);
 c01b5d0:	f7fe ff4a 	bl	c01a468 <psa_connect>
 c01b5d4:	1e05      	subs	r5, r0, #0
 c01b5d6:	dd13      	ble.n	c01b600 <psa_generate_key+0x70>
    size_t in_len = ARRAY_SIZE(in_vec);
    if (extra == NULL) {
        in_len--;
    }

    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len, NULL, 0);
 c01b5d8:	2100      	movs	r1, #0
        in_len--;
 c01b5da:	2c00      	cmp	r4, #0
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len, NULL, 0);
 c01b5dc:	e9cd 1100 	strd	r1, r1, [sp]
 c01b5e0:	bf14      	ite	ne
 c01b5e2:	2303      	movne	r3, #3
 c01b5e4:	2302      	moveq	r3, #2
 c01b5e6:	aa05      	add	r2, sp, #20
 c01b5e8:	f7fe ff40 	bl	c01a46c <psa_call>
 c01b5ec:	4604      	mov	r4, r0
    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_generate_key,
                                    TFM_CRYPTO_GENERATE_KEY);
#endif

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01b5ee:	4628      	mov	r0, r5
 c01b5f0:	f7fe ff3e 	bl	c01a470 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c01b5f4:	4620      	mov	r0, r4
 c01b5f6:	b019      	add	sp, #100	; 0x64
 c01b5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return PSA_ERROR_INVALID_ARGUMENT;
 c01b5fa:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c01b5fe:	e7f9      	b.n	c01b5f4 <psa_generate_key+0x64>
    PSA_CONNECT(TFM_CRYPTO);
 c01b600:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01b604:	e7f6      	b.n	c01b5f4 <psa_generate_key+0x64>
	...

0c01b608 <tfm_nspm_thread_entry>:
    return 1U;
}

__attribute__((section("SFN")))
psa_status_t tfm_nspm_thread_entry(void)
{
 c01b608:	b508      	push	{r3, lr}
#ifdef TFM_CORE_DEBUG
    /* Jumps to non-secure code */
    LOG_MSG("Jumping to non-secure code...");
#endif

    jump_to_ns_code();
 c01b60a:	f7fe fe79 	bl	c01a300 <jump_to_ns_code>

    /* Should not run here */
    TFM_ASSERT(false);
 c01b60e:	2263      	movs	r2, #99	; 0x63
 c01b610:	4902      	ldr	r1, [pc, #8]	; (c01b61c <tfm_nspm_thread_entry+0x14>)
 c01b612:	4803      	ldr	r0, [pc, #12]	; (c01b620 <tfm_nspm_thread_entry+0x18>)
 c01b614:	f7fc fee6 	bl	c0183e4 <iprintf>
 c01b618:	e7fe      	b.n	c01b618 <tfm_nspm_thread_entry+0x10>
 c01b61a:	bf00      	nop
 c01b61c:	0c0370fb 	.word	0x0c0370fb
 c01b620:	0c037052 	.word	0x0c037052

0c01b624 <tfm_core_ipc_request>:
                (int32_t)c, (int32_t)d)

__attribute__ ((naked, section("SFN")))
static int32_t tfm_core_ipc_request(const struct tfm_sfn_req_s *desc_ptr)
{
    __ASM volatile("SVC %0           \n"
 c01b624:	df0e      	svc	14
 c01b626:	4770      	bx	lr

0c01b628 <__acle_se_tfm_psa_framework_version_veneer>:
    desc.sfn = (sfn_t)0;
    desc.args = (int32_t *)0;
    desc.caller_part_idx = 0UL;
    desc.ns_caller = 0UL;
#else
    struct tfm_sfn_req_s desc={0};
 c01b628:	2214      	movs	r2, #20
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c01b62a:	2100      	movs	r1, #0
 * They won't call legacy SFN but instead will be handlers for TF-M
 */

__tfm_secure_gateway_attributes__
uint32_t tfm_psa_framework_version_veneer(void)
{
 c01b62c:	b510      	push	{r4, lr}
 c01b62e:	4674      	mov	r4, lr
 c01b630:	b08a      	sub	sp, #40	; 0x28
    struct tfm_sfn_req_s desc={0};
 c01b632:	eb0d 0002 	add.w	r0, sp, r2
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c01b636:	e9cd 1101 	strd	r1, r1, [sp, #4]
 c01b63a:	e9cd 1103 	strd	r1, r1, [sp, #12]
    struct tfm_sfn_req_s desc={0};
 c01b63e:	f7fc f9c2 	bl	c0179c6 <memset>
    desc.sfn = (sfn_t)fn;
 c01b642:	4b0f      	ldr	r3, [pc, #60]	; (c01b680 <__acle_se_tfm_psa_framework_version_veneer+0x58>)

/* FIXME: diagnose use outside cmse_nonsecure_entry functions.  */
__extension__ static __inline int __attribute__ ((__always_inline__))
cmse_nonsecure_caller (void)
{
  return __builtin_arm_cmse_nonsecure_caller ();
 c01b644:	f014 0f01 	tst.w	r4, #1
 c01b648:	9306      	str	r3, [sp, #24]
    desc.args = args;
 c01b64a:	ab01      	add	r3, sp, #4
 c01b64c:	9307      	str	r3, [sp, #28]
 c01b64e:	bf0c      	ite	eq
 c01b650:	2301      	moveq	r3, #1
 c01b652:	2300      	movne	r3, #0
    desc.ns_caller = cmse_nonsecure_caller() ;
 c01b654:	9309      	str	r3, [sp, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 c01b656:	f3ef 8305 	mrs	r3, IPSR
{
    IPSR_Type IPSR;

    /* if non-zero, exception is active. NOT banked S/NS */
    IPSR.w = __get_IPSR();
    return IPSR.b.ISR;
 c01b65a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (__get_active_exc_num() != EXC_NUM_THREAD_MODE)
 c01b65e:	b963      	cbnz	r3, c01b67a <__acle_se_tfm_psa_framework_version_veneer+0x52>
        return tfm_core_ipc_request(&desc);
 c01b660:	a805      	add	r0, sp, #20
 c01b662:	f7ff ffdf 	bl	c01b624 <tfm_core_ipc_request>
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_framework_version, 0,
                                   0, 0, 0);
}
 c01b666:	b00a      	add	sp, #40	; 0x28
 c01b668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c01b66c:	4671      	mov	r1, lr
 c01b66e:	4672      	mov	r2, lr
 c01b670:	4673      	mov	r3, lr
 c01b672:	46f4      	mov	ip, lr
 c01b674:	f38e 8c00 	msr	CPSR_fs, lr
 c01b678:	4774      	bxns	lr
        return TFM_ERROR_INVALID_EXC_MODE;
 c01b67a:	2008      	movs	r0, #8
 c01b67c:	e7f3      	b.n	c01b666 <__acle_se_tfm_psa_framework_version_veneer+0x3e>
 c01b67e:	bf00      	nop
 c01b680:	0c033a05 	.word	0x0c033a05

0c01b684 <__acle_se_tfm_psa_version_veneer>:
    struct tfm_sfn_req_s desc={0};
 c01b684:	2214      	movs	r2, #20
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c01b686:	2100      	movs	r1, #0

__tfm_secure_gateway_attributes__
uint32_t tfm_psa_version_veneer(uint32_t sid)
{
 c01b688:	b510      	push	{r4, lr}
 c01b68a:	4674      	mov	r4, lr
 c01b68c:	b08a      	sub	sp, #40	; 0x28
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c01b68e:	9001      	str	r0, [sp, #4]
    struct tfm_sfn_req_s desc={0};
 c01b690:	eb0d 0002 	add.w	r0, sp, r2
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c01b694:	e9cd 1102 	strd	r1, r1, [sp, #8]
 c01b698:	9104      	str	r1, [sp, #16]
    struct tfm_sfn_req_s desc={0};
 c01b69a:	f7fc f994 	bl	c0179c6 <memset>
    desc.sfn = (sfn_t)fn;
 c01b69e:	4b0f      	ldr	r3, [pc, #60]	; (c01b6dc <__acle_se_tfm_psa_version_veneer+0x58>)
 c01b6a0:	f014 0f01 	tst.w	r4, #1
 c01b6a4:	9306      	str	r3, [sp, #24]
    desc.args = args;
 c01b6a6:	ab01      	add	r3, sp, #4
 c01b6a8:	9307      	str	r3, [sp, #28]
 c01b6aa:	bf0c      	ite	eq
 c01b6ac:	2301      	moveq	r3, #1
 c01b6ae:	2300      	movne	r3, #0
    desc.ns_caller = cmse_nonsecure_caller() ;
 c01b6b0:	9309      	str	r3, [sp, #36]	; 0x24
 c01b6b2:	f3ef 8305 	mrs	r3, IPSR
 c01b6b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (__get_active_exc_num() != EXC_NUM_THREAD_MODE)
 c01b6ba:	b963      	cbnz	r3, c01b6d6 <__acle_se_tfm_psa_version_veneer+0x52>
        return tfm_core_ipc_request(&desc);
 c01b6bc:	a805      	add	r0, sp, #20
 c01b6be:	f7ff ffb1 	bl	c01b624 <tfm_core_ipc_request>
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_version, sid, 0, 0,
                                   0);
}
 c01b6c2:	b00a      	add	sp, #40	; 0x28
 c01b6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c01b6c8:	4671      	mov	r1, lr
 c01b6ca:	4672      	mov	r2, lr
 c01b6cc:	4673      	mov	r3, lr
 c01b6ce:	46f4      	mov	ip, lr
 c01b6d0:	f38e 8c00 	msr	CPSR_fs, lr
 c01b6d4:	4774      	bxns	lr
        return TFM_ERROR_INVALID_EXC_MODE;
 c01b6d6:	2008      	movs	r0, #8
 c01b6d8:	e7f3      	b.n	c01b6c2 <__acle_se_tfm_psa_version_veneer+0x3e>
 c01b6da:	bf00      	nop
 c01b6dc:	0c033a0d 	.word	0x0c033a0d

0c01b6e0 <__acle_se_tfm_psa_connect_veneer>:

__tfm_secure_gateway_attributes__
psa_handle_t tfm_psa_connect_veneer(uint32_t sid, uint32_t version)
{
 c01b6e0:	b510      	push	{r4, lr}
    struct tfm_sfn_req_s desc={0};
 c01b6e2:	2214      	movs	r2, #20
{
 c01b6e4:	b08a      	sub	sp, #40	; 0x28
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c01b6e6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 c01b6ea:	2100      	movs	r1, #0
 c01b6ec:	4674      	mov	r4, lr
    struct tfm_sfn_req_s desc={0};
 c01b6ee:	eb0d 0002 	add.w	r0, sp, r2
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c01b6f2:	e9cd 1103 	strd	r1, r1, [sp, #12]
    struct tfm_sfn_req_s desc={0};
 c01b6f6:	f7fc f966 	bl	c0179c6 <memset>
    desc.sfn = (sfn_t)fn;
 c01b6fa:	4b0f      	ldr	r3, [pc, #60]	; (c01b738 <__acle_se_tfm_psa_connect_veneer+0x58>)
 c01b6fc:	f014 0f01 	tst.w	r4, #1
 c01b700:	9306      	str	r3, [sp, #24]
    desc.args = args;
 c01b702:	ab01      	add	r3, sp, #4
 c01b704:	9307      	str	r3, [sp, #28]
 c01b706:	bf0c      	ite	eq
 c01b708:	2301      	moveq	r3, #1
 c01b70a:	2300      	movne	r3, #0
    desc.ns_caller = cmse_nonsecure_caller() ;
 c01b70c:	9309      	str	r3, [sp, #36]	; 0x24
 c01b70e:	f3ef 8305 	mrs	r3, IPSR
 c01b712:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (__get_active_exc_num() != EXC_NUM_THREAD_MODE)
 c01b716:	b963      	cbnz	r3, c01b732 <__acle_se_tfm_psa_connect_veneer+0x52>
        return tfm_core_ipc_request(&desc);
 c01b718:	a805      	add	r0, sp, #20
 c01b71a:	f7ff ff83 	bl	c01b624 <tfm_core_ipc_request>
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_connect, sid,
                                   version, 0, 0);
}
 c01b71e:	b00a      	add	sp, #40	; 0x28
 c01b720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c01b724:	4671      	mov	r1, lr
 c01b726:	4672      	mov	r2, lr
 c01b728:	4673      	mov	r3, lr
 c01b72a:	46f4      	mov	ip, lr
 c01b72c:	f38e 8c00 	msr	CPSR_fs, lr
 c01b730:	4774      	bxns	lr
        return TFM_ERROR_INVALID_EXC_MODE;
 c01b732:	2008      	movs	r0, #8
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_connect, sid,
 c01b734:	e7f3      	b.n	c01b71e <__acle_se_tfm_psa_connect_veneer+0x3e>
 c01b736:	bf00      	nop
 c01b738:	0c033a3d 	.word	0x0c033a3d

0c01b73c <__acle_se_tfm_psa_call_veneer>:

__tfm_secure_gateway_attributes__
psa_status_t tfm_psa_call_veneer(psa_handle_t handle, int32_t type,
                                 const psa_invec *in_vecs,
                                 const psa_invec *out_vecs)
{
 c01b73c:	b510      	push	{r4, lr}
 c01b73e:	b08a      	sub	sp, #40	; 0x28
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c01b740:	e9cd 2303 	strd	r2, r3, [sp, #12]
    struct tfm_sfn_req_s desc={0};
 c01b744:	2214      	movs	r2, #20
 c01b746:	4674      	mov	r4, lr
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c01b748:	e9cd 0101 	strd	r0, r1, [sp, #4]
    struct tfm_sfn_req_s desc={0};
 c01b74c:	2100      	movs	r1, #0
 c01b74e:	eb0d 0002 	add.w	r0, sp, r2
 c01b752:	f7fc f938 	bl	c0179c6 <memset>
    desc.sfn = (sfn_t)fn;
 c01b756:	4b0f      	ldr	r3, [pc, #60]	; (c01b794 <__acle_se_tfm_psa_call_veneer+0x58>)
 c01b758:	f014 0f01 	tst.w	r4, #1
 c01b75c:	9306      	str	r3, [sp, #24]
    desc.args = args;
 c01b75e:	ab01      	add	r3, sp, #4
 c01b760:	9307      	str	r3, [sp, #28]
 c01b762:	bf0c      	ite	eq
 c01b764:	2301      	moveq	r3, #1
 c01b766:	2300      	movne	r3, #0
    desc.ns_caller = cmse_nonsecure_caller() ;
 c01b768:	9309      	str	r3, [sp, #36]	; 0x24
 c01b76a:	f3ef 8305 	mrs	r3, IPSR
 c01b76e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (__get_active_exc_num() != EXC_NUM_THREAD_MODE)
 c01b772:	b963      	cbnz	r3, c01b78e <__acle_se_tfm_psa_call_veneer+0x52>
        return tfm_core_ipc_request(&desc);
 c01b774:	a805      	add	r0, sp, #20
 c01b776:	f7ff ff55 	bl	c01b624 <tfm_core_ipc_request>
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_call, handle, type,
                                   in_vecs, out_vecs);
}
 c01b77a:	b00a      	add	sp, #40	; 0x28
 c01b77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c01b780:	4671      	mov	r1, lr
 c01b782:	4672      	mov	r2, lr
 c01b784:	4673      	mov	r3, lr
 c01b786:	46f4      	mov	ip, lr
 c01b788:	f38e 8c00 	msr	CPSR_fs, lr
 c01b78c:	4774      	bxns	lr
        return TFM_ERROR_INVALID_EXC_MODE;
 c01b78e:	2008      	movs	r0, #8
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_call, handle, type,
 c01b790:	e7f3      	b.n	c01b77a <__acle_se_tfm_psa_call_veneer+0x3e>
 c01b792:	bf00      	nop
 c01b794:	0c033acd 	.word	0x0c033acd

0c01b798 <__acle_se_tfm_psa_close_veneer>:
    struct tfm_sfn_req_s desc={0};
 c01b798:	2214      	movs	r2, #20
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c01b79a:	2100      	movs	r1, #0

__tfm_secure_gateway_attributes__
psa_status_t tfm_psa_close_veneer(psa_handle_t handle)
{
 c01b79c:	b510      	push	{r4, lr}
 c01b79e:	4674      	mov	r4, lr
 c01b7a0:	b08a      	sub	sp, #40	; 0x28
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c01b7a2:	9001      	str	r0, [sp, #4]
    struct tfm_sfn_req_s desc={0};
 c01b7a4:	eb0d 0002 	add.w	r0, sp, r2
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c01b7a8:	e9cd 1102 	strd	r1, r1, [sp, #8]
 c01b7ac:	9104      	str	r1, [sp, #16]
    struct tfm_sfn_req_s desc={0};
 c01b7ae:	f7fc f90a 	bl	c0179c6 <memset>
    desc.sfn = (sfn_t)fn;
 c01b7b2:	4b0f      	ldr	r3, [pc, #60]	; (c01b7f0 <__acle_se_tfm_psa_close_veneer+0x58>)
 c01b7b4:	f014 0f01 	tst.w	r4, #1
 c01b7b8:	9306      	str	r3, [sp, #24]
    desc.args = args;
 c01b7ba:	ab01      	add	r3, sp, #4
 c01b7bc:	9307      	str	r3, [sp, #28]
 c01b7be:	bf0c      	ite	eq
 c01b7c0:	2301      	moveq	r3, #1
 c01b7c2:	2300      	movne	r3, #0
    desc.ns_caller = cmse_nonsecure_caller() ;
 c01b7c4:	9309      	str	r3, [sp, #36]	; 0x24
 c01b7c6:	f3ef 8305 	mrs	r3, IPSR
 c01b7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (__get_active_exc_num() != EXC_NUM_THREAD_MODE)
 c01b7ce:	b963      	cbnz	r3, c01b7ea <__acle_se_tfm_psa_close_veneer+0x52>
        return tfm_core_ipc_request(&desc);
 c01b7d0:	a805      	add	r0, sp, #20
 c01b7d2:	f7ff ff27 	bl	c01b624 <tfm_core_ipc_request>
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_close, handle, 0, 0,
                                   0);
}
 c01b7d6:	b00a      	add	sp, #40	; 0x28
 c01b7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c01b7dc:	4671      	mov	r1, lr
 c01b7de:	4672      	mov	r2, lr
 c01b7e0:	4673      	mov	r3, lr
 c01b7e2:	46f4      	mov	ip, lr
 c01b7e4:	f38e 8c00 	msr	CPSR_fs, lr
 c01b7e8:	4774      	bxns	lr
        return TFM_ERROR_INVALID_EXC_MODE;
 c01b7ea:	2008      	movs	r0, #8
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_close, handle, 0, 0,
 c01b7ec:	e7f3      	b.n	c01b7d6 <__acle_se_tfm_psa_close_veneer+0x3e>
 c01b7ee:	bf00      	nop
 c01b7f0:	0c033c71 	.word	0x0c033c71

0c01b7f4 <exit_zone>:
 c01b7f4:	df0f      	svc	15
 c01b7f6:	e7fe      	b.n	c01b7f6 <exit_zone+0x2>

0c01b7f8 <tfm_thrd_exit>:
}

__attribute__((section("SFN")))
void tfm_thrd_exit(void)
{
    SVC(TFM_SVC_EXIT_THRD);
 c01b7f8:	df0f      	svc	15
 c01b7fa:	e7fe      	b.n	c01b7fa <tfm_thrd_exit+0x2>

0c01b7fc <cmse_check_address_range>:
 c01b7fc:	43c3      	mvns	r3, r0
 c01b7fe:	428b      	cmp	r3, r1
 c01b800:	d36d      	bcc.n	c01b8de <cmse_check_address_range+0xe2>
 c01b802:	f032 031f 	bics.w	r3, r2, #31
 c01b806:	d16a      	bne.n	c01b8de <cmse_check_address_range+0xe2>
 c01b808:	3901      	subs	r1, #1
 c01b80a:	f002 0314 	and.w	r3, r2, #20
 c01b80e:	4401      	add	r1, r0
 c01b810:	b410      	push	{r4}
 c01b812:	ea81 0400 	eor.w	r4, r1, r0
 c01b816:	2b14      	cmp	r3, #20
 c01b818:	d80e      	bhi.n	c01b838 <cmse_check_address_range+0x3c>
 c01b81a:	e8df f003 	tbb	[pc, r3]
 c01b81e:	0d39      	.short	0x0d39
 c01b820:	0d420d0d 	.word	0x0d420d0d
 c01b824:	0d0d0d0d 	.word	0x0d0d0d0d
 c01b828:	0d0d0d0d 	.word	0x0d0d0d0d
 c01b82c:	0d4b0d0d 	.word	0x0d4b0d0d
 c01b830:	0d0d      	.short	0x0d0d
 c01b832:	10          	.byte	0x10
 c01b833:	00          	.byte	0x00
 c01b834:	029b      	lsls	r3, r3, #10
 c01b836:	d400      	bmi.n	c01b83a <cmse_check_address_range+0x3e>
 c01b838:	2000      	movs	r0, #0
 c01b83a:	bc10      	pop	{r4}
 c01b83c:	4770      	bx	lr
 c01b83e:	2c1f      	cmp	r4, #31
 c01b840:	e840 f3c0 	ttat	r3, r0
 c01b844:	d905      	bls.n	c01b852 <cmse_check_address_range+0x56>
 c01b846:	e841 f1c0 	ttat	r1, r1
 c01b84a:	461c      	mov	r4, r3
 c01b84c:	460b      	mov	r3, r1
 c01b84e:	429c      	cmp	r4, r3
 c01b850:	d1f2      	bne.n	c01b838 <cmse_check_address_range+0x3c>
 c01b852:	f022 0214 	bic.w	r2, r2, #20
 c01b856:	3a01      	subs	r2, #1
 c01b858:	2a0a      	cmp	r2, #10
 c01b85a:	d8ed      	bhi.n	c01b838 <cmse_check_address_range+0x3c>
 c01b85c:	a101      	add	r1, pc, #4	; (adr r1, c01b864 <cmse_check_address_range+0x68>)
 c01b85e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 c01b862:	bf00      	nop
 c01b864:	0c01b8d9 	.word	0x0c01b8d9
 c01b868:	0c01b8d3 	.word	0x0c01b8d3
 c01b86c:	0c01b835 	.word	0x0c01b835
 c01b870:	0c01b839 	.word	0x0c01b839
 c01b874:	0c01b839 	.word	0x0c01b839
 c01b878:	0c01b839 	.word	0x0c01b839
 c01b87c:	0c01b839 	.word	0x0c01b839
 c01b880:	0c01b8cd 	.word	0x0c01b8cd
 c01b884:	0c01b8d9 	.word	0x0c01b8d9
 c01b888:	0c01b8c7 	.word	0x0c01b8c7
 c01b88c:	0c01b835 	.word	0x0c01b835
 c01b890:	2c1f      	cmp	r4, #31
 c01b892:	e840 f300 	tt	r3, r0
 c01b896:	d9dc      	bls.n	c01b852 <cmse_check_address_range+0x56>
 c01b898:	e841 f100 	tt	r1, r1
 c01b89c:	461c      	mov	r4, r3
 c01b89e:	460b      	mov	r3, r1
 c01b8a0:	e7d5      	b.n	c01b84e <cmse_check_address_range+0x52>
 c01b8a2:	2c1f      	cmp	r4, #31
 c01b8a4:	e840 f340 	ttt	r3, r0
 c01b8a8:	d9d3      	bls.n	c01b852 <cmse_check_address_range+0x56>
 c01b8aa:	e841 f140 	ttt	r1, r1
 c01b8ae:	461c      	mov	r4, r3
 c01b8b0:	460b      	mov	r3, r1
 c01b8b2:	e7cc      	b.n	c01b84e <cmse_check_address_range+0x52>
 c01b8b4:	2c1f      	cmp	r4, #31
 c01b8b6:	e840 f380 	tta	r3, r0
 c01b8ba:	d9ca      	bls.n	c01b852 <cmse_check_address_range+0x56>
 c01b8bc:	e841 f180 	tta	r1, r1
 c01b8c0:	461c      	mov	r4, r3
 c01b8c2:	460b      	mov	r3, r1
 c01b8c4:	e7c3      	b.n	c01b84e <cmse_check_address_range+0x52>
 c01b8c6:	02dc      	lsls	r4, r3, #11
 c01b8c8:	d4b7      	bmi.n	c01b83a <cmse_check_address_range+0x3e>
 c01b8ca:	e7b5      	b.n	c01b838 <cmse_check_address_range+0x3c>
 c01b8cc:	035b      	lsls	r3, r3, #13
 c01b8ce:	d5b3      	bpl.n	c01b838 <cmse_check_address_range+0x3c>
 c01b8d0:	e7b3      	b.n	c01b83a <cmse_check_address_range+0x3e>
 c01b8d2:	0259      	lsls	r1, r3, #9
 c01b8d4:	d5b1      	bpl.n	c01b83a <cmse_check_address_range+0x3e>
 c01b8d6:	e7af      	b.n	c01b838 <cmse_check_address_range+0x3c>
 c01b8d8:	031a      	lsls	r2, r3, #12
 c01b8da:	d4ae      	bmi.n	c01b83a <cmse_check_address_range+0x3e>
 c01b8dc:	e7ac      	b.n	c01b838 <cmse_check_address_range+0x3c>
 c01b8de:	2000      	movs	r0, #0
 c01b8e0:	4770      	bx	lr
 c01b8e2:	bf00      	nop

0c01b8e4 <__gnu_cmse_nonsecure_call>:
 c01b8e4:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c01b8e8:	4627      	mov	r7, r4
 c01b8ea:	46a0      	mov	r8, r4
 c01b8ec:	46a1      	mov	r9, r4
 c01b8ee:	46a2      	mov	sl, r4
 c01b8f0:	46a3      	mov	fp, r4
 c01b8f2:	46a4      	mov	ip, r4
 c01b8f4:	b0a2      	sub	sp, #136	; 0x88
 c01b8f6:	ec2d 0a00 	vlstm	sp
 c01b8fa:	f384 8800 	msr	CPSR_f, r4
 c01b8fe:	4625      	mov	r5, r4
 c01b900:	4626      	mov	r6, r4
 c01b902:	47a4      	blxns	r4
 c01b904:	ec3d 0a00 	vlldm	sp
 c01b908:	b022      	add	sp, #136	; 0x88
 c01b90a:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	...

0c01b910 <__aeabi_drsub>:
 c01b910:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 c01b914:	e002      	b.n	c01b91c <__adddf3>
 c01b916:	bf00      	nop

0c01b918 <__aeabi_dsub>:
 c01b918:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0c01b91c <__adddf3>:
 c01b91c:	b530      	push	{r4, r5, lr}
 c01b91e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 c01b922:	ea4f 0543 	mov.w	r5, r3, lsl #1
 c01b926:	ea94 0f05 	teq	r4, r5
 c01b92a:	bf08      	it	eq
 c01b92c:	ea90 0f02 	teqeq	r0, r2
 c01b930:	bf1f      	itttt	ne
 c01b932:	ea54 0c00 	orrsne.w	ip, r4, r0
 c01b936:	ea55 0c02 	orrsne.w	ip, r5, r2
 c01b93a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 c01b93e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 c01b942:	f000 80e2 	beq.w	c01bb0a <__adddf3+0x1ee>
 c01b946:	ea4f 5454 	mov.w	r4, r4, lsr #21
 c01b94a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 c01b94e:	bfb8      	it	lt
 c01b950:	426d      	neglt	r5, r5
 c01b952:	dd0c      	ble.n	c01b96e <__adddf3+0x52>
 c01b954:	442c      	add	r4, r5
 c01b956:	ea80 0202 	eor.w	r2, r0, r2
 c01b95a:	ea81 0303 	eor.w	r3, r1, r3
 c01b95e:	ea82 0000 	eor.w	r0, r2, r0
 c01b962:	ea83 0101 	eor.w	r1, r3, r1
 c01b966:	ea80 0202 	eor.w	r2, r0, r2
 c01b96a:	ea81 0303 	eor.w	r3, r1, r3
 c01b96e:	2d36      	cmp	r5, #54	; 0x36
 c01b970:	bf88      	it	hi
 c01b972:	bd30      	pophi	{r4, r5, pc}
 c01b974:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 c01b978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 c01b97c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 c01b980:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 c01b984:	d002      	beq.n	c01b98c <__adddf3+0x70>
 c01b986:	4240      	negs	r0, r0
 c01b988:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 c01b98c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 c01b990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 c01b994:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 c01b998:	d002      	beq.n	c01b9a0 <__adddf3+0x84>
 c01b99a:	4252      	negs	r2, r2
 c01b99c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 c01b9a0:	ea94 0f05 	teq	r4, r5
 c01b9a4:	f000 80a7 	beq.w	c01baf6 <__adddf3+0x1da>
 c01b9a8:	f1a4 0401 	sub.w	r4, r4, #1
 c01b9ac:	f1d5 0e20 	rsbs	lr, r5, #32
 c01b9b0:	db0d      	blt.n	c01b9ce <__adddf3+0xb2>
 c01b9b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 c01b9b6:	fa22 f205 	lsr.w	r2, r2, r5
 c01b9ba:	1880      	adds	r0, r0, r2
 c01b9bc:	f141 0100 	adc.w	r1, r1, #0
 c01b9c0:	fa03 f20e 	lsl.w	r2, r3, lr
 c01b9c4:	1880      	adds	r0, r0, r2
 c01b9c6:	fa43 f305 	asr.w	r3, r3, r5
 c01b9ca:	4159      	adcs	r1, r3
 c01b9cc:	e00e      	b.n	c01b9ec <__adddf3+0xd0>
 c01b9ce:	f1a5 0520 	sub.w	r5, r5, #32
 c01b9d2:	f10e 0e20 	add.w	lr, lr, #32
 c01b9d6:	2a01      	cmp	r2, #1
 c01b9d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 c01b9dc:	bf28      	it	cs
 c01b9de:	f04c 0c02 	orrcs.w	ip, ip, #2
 c01b9e2:	fa43 f305 	asr.w	r3, r3, r5
 c01b9e6:	18c0      	adds	r0, r0, r3
 c01b9e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 c01b9ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 c01b9f0:	d507      	bpl.n	c01ba02 <__adddf3+0xe6>
 c01b9f2:	f04f 0e00 	mov.w	lr, #0
 c01b9f6:	f1dc 0c00 	rsbs	ip, ip, #0
 c01b9fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 c01b9fe:	eb6e 0101 	sbc.w	r1, lr, r1
 c01ba02:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 c01ba06:	d31b      	bcc.n	c01ba40 <__adddf3+0x124>
 c01ba08:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 c01ba0c:	d30c      	bcc.n	c01ba28 <__adddf3+0x10c>
 c01ba0e:	0849      	lsrs	r1, r1, #1
 c01ba10:	ea5f 0030 	movs.w	r0, r0, rrx
 c01ba14:	ea4f 0c3c 	mov.w	ip, ip, rrx
 c01ba18:	f104 0401 	add.w	r4, r4, #1
 c01ba1c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 c01ba20:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 c01ba24:	f080 809a 	bcs.w	c01bb5c <__adddf3+0x240>
 c01ba28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 c01ba2c:	bf08      	it	eq
 c01ba2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 c01ba32:	f150 0000 	adcs.w	r0, r0, #0
 c01ba36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 c01ba3a:	ea41 0105 	orr.w	r1, r1, r5
 c01ba3e:	bd30      	pop	{r4, r5, pc}
 c01ba40:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 c01ba44:	4140      	adcs	r0, r0
 c01ba46:	eb41 0101 	adc.w	r1, r1, r1
 c01ba4a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 c01ba4e:	f1a4 0401 	sub.w	r4, r4, #1
 c01ba52:	d1e9      	bne.n	c01ba28 <__adddf3+0x10c>
 c01ba54:	f091 0f00 	teq	r1, #0
 c01ba58:	bf04      	itt	eq
 c01ba5a:	4601      	moveq	r1, r0
 c01ba5c:	2000      	moveq	r0, #0
 c01ba5e:	fab1 f381 	clz	r3, r1
 c01ba62:	bf08      	it	eq
 c01ba64:	3320      	addeq	r3, #32
 c01ba66:	f1a3 030b 	sub.w	r3, r3, #11
 c01ba6a:	f1b3 0220 	subs.w	r2, r3, #32
 c01ba6e:	da0c      	bge.n	c01ba8a <__adddf3+0x16e>
 c01ba70:	320c      	adds	r2, #12
 c01ba72:	dd08      	ble.n	c01ba86 <__adddf3+0x16a>
 c01ba74:	f102 0c14 	add.w	ip, r2, #20
 c01ba78:	f1c2 020c 	rsb	r2, r2, #12
 c01ba7c:	fa01 f00c 	lsl.w	r0, r1, ip
 c01ba80:	fa21 f102 	lsr.w	r1, r1, r2
 c01ba84:	e00c      	b.n	c01baa0 <__adddf3+0x184>
 c01ba86:	f102 0214 	add.w	r2, r2, #20
 c01ba8a:	bfd8      	it	le
 c01ba8c:	f1c2 0c20 	rsble	ip, r2, #32
 c01ba90:	fa01 f102 	lsl.w	r1, r1, r2
 c01ba94:	fa20 fc0c 	lsr.w	ip, r0, ip
 c01ba98:	bfdc      	itt	le
 c01ba9a:	ea41 010c 	orrle.w	r1, r1, ip
 c01ba9e:	4090      	lslle	r0, r2
 c01baa0:	1ae4      	subs	r4, r4, r3
 c01baa2:	bfa2      	ittt	ge
 c01baa4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 c01baa8:	4329      	orrge	r1, r5
 c01baaa:	bd30      	popge	{r4, r5, pc}
 c01baac:	ea6f 0404 	mvn.w	r4, r4
 c01bab0:	3c1f      	subs	r4, #31
 c01bab2:	da1c      	bge.n	c01baee <__adddf3+0x1d2>
 c01bab4:	340c      	adds	r4, #12
 c01bab6:	dc0e      	bgt.n	c01bad6 <__adddf3+0x1ba>
 c01bab8:	f104 0414 	add.w	r4, r4, #20
 c01babc:	f1c4 0220 	rsb	r2, r4, #32
 c01bac0:	fa20 f004 	lsr.w	r0, r0, r4
 c01bac4:	fa01 f302 	lsl.w	r3, r1, r2
 c01bac8:	ea40 0003 	orr.w	r0, r0, r3
 c01bacc:	fa21 f304 	lsr.w	r3, r1, r4
 c01bad0:	ea45 0103 	orr.w	r1, r5, r3
 c01bad4:	bd30      	pop	{r4, r5, pc}
 c01bad6:	f1c4 040c 	rsb	r4, r4, #12
 c01bada:	f1c4 0220 	rsb	r2, r4, #32
 c01bade:	fa20 f002 	lsr.w	r0, r0, r2
 c01bae2:	fa01 f304 	lsl.w	r3, r1, r4
 c01bae6:	ea40 0003 	orr.w	r0, r0, r3
 c01baea:	4629      	mov	r1, r5
 c01baec:	bd30      	pop	{r4, r5, pc}
 c01baee:	fa21 f004 	lsr.w	r0, r1, r4
 c01baf2:	4629      	mov	r1, r5
 c01baf4:	bd30      	pop	{r4, r5, pc}
 c01baf6:	f094 0f00 	teq	r4, #0
 c01bafa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 c01bafe:	bf06      	itte	eq
 c01bb00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 c01bb04:	3401      	addeq	r4, #1
 c01bb06:	3d01      	subne	r5, #1
 c01bb08:	e74e      	b.n	c01b9a8 <__adddf3+0x8c>
 c01bb0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 c01bb0e:	bf18      	it	ne
 c01bb10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 c01bb14:	d029      	beq.n	c01bb6a <__adddf3+0x24e>
 c01bb16:	ea94 0f05 	teq	r4, r5
 c01bb1a:	bf08      	it	eq
 c01bb1c:	ea90 0f02 	teqeq	r0, r2
 c01bb20:	d005      	beq.n	c01bb2e <__adddf3+0x212>
 c01bb22:	ea54 0c00 	orrs.w	ip, r4, r0
 c01bb26:	bf04      	itt	eq
 c01bb28:	4619      	moveq	r1, r3
 c01bb2a:	4610      	moveq	r0, r2
 c01bb2c:	bd30      	pop	{r4, r5, pc}
 c01bb2e:	ea91 0f03 	teq	r1, r3
 c01bb32:	bf1e      	ittt	ne
 c01bb34:	2100      	movne	r1, #0
 c01bb36:	2000      	movne	r0, #0
 c01bb38:	bd30      	popne	{r4, r5, pc}
 c01bb3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 c01bb3e:	d105      	bne.n	c01bb4c <__adddf3+0x230>
 c01bb40:	0040      	lsls	r0, r0, #1
 c01bb42:	4149      	adcs	r1, r1
 c01bb44:	bf28      	it	cs
 c01bb46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 c01bb4a:	bd30      	pop	{r4, r5, pc}
 c01bb4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 c01bb50:	bf3c      	itt	cc
 c01bb52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 c01bb56:	bd30      	popcc	{r4, r5, pc}
 c01bb58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 c01bb5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 c01bb60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 c01bb64:	f04f 0000 	mov.w	r0, #0
 c01bb68:	bd30      	pop	{r4, r5, pc}
 c01bb6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 c01bb6e:	bf1a      	itte	ne
 c01bb70:	4619      	movne	r1, r3
 c01bb72:	4610      	movne	r0, r2
 c01bb74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 c01bb78:	bf1c      	itt	ne
 c01bb7a:	460b      	movne	r3, r1
 c01bb7c:	4602      	movne	r2, r0
 c01bb7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 c01bb82:	bf06      	itte	eq
 c01bb84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 c01bb88:	ea91 0f03 	teqeq	r1, r3
 c01bb8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 c01bb90:	bd30      	pop	{r4, r5, pc}
 c01bb92:	bf00      	nop

0c01bb94 <__aeabi_ui2d>:
 c01bb94:	f090 0f00 	teq	r0, #0
 c01bb98:	bf04      	itt	eq
 c01bb9a:	2100      	moveq	r1, #0
 c01bb9c:	4770      	bxeq	lr
 c01bb9e:	b530      	push	{r4, r5, lr}
 c01bba0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 c01bba4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 c01bba8:	f04f 0500 	mov.w	r5, #0
 c01bbac:	f04f 0100 	mov.w	r1, #0
 c01bbb0:	e750      	b.n	c01ba54 <__adddf3+0x138>
 c01bbb2:	bf00      	nop

0c01bbb4 <__aeabi_i2d>:
 c01bbb4:	f090 0f00 	teq	r0, #0
 c01bbb8:	bf04      	itt	eq
 c01bbba:	2100      	moveq	r1, #0
 c01bbbc:	4770      	bxeq	lr
 c01bbbe:	b530      	push	{r4, r5, lr}
 c01bbc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 c01bbc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 c01bbc8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 c01bbcc:	bf48      	it	mi
 c01bbce:	4240      	negmi	r0, r0
 c01bbd0:	f04f 0100 	mov.w	r1, #0
 c01bbd4:	e73e      	b.n	c01ba54 <__adddf3+0x138>
 c01bbd6:	bf00      	nop

0c01bbd8 <__aeabi_f2d>:
 c01bbd8:	0042      	lsls	r2, r0, #1
 c01bbda:	ea4f 01e2 	mov.w	r1, r2, asr #3
 c01bbde:	ea4f 0131 	mov.w	r1, r1, rrx
 c01bbe2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 c01bbe6:	bf1f      	itttt	ne
 c01bbe8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 c01bbec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 c01bbf0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 c01bbf4:	4770      	bxne	lr
 c01bbf6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 c01bbfa:	bf08      	it	eq
 c01bbfc:	4770      	bxeq	lr
 c01bbfe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 c01bc02:	bf04      	itt	eq
 c01bc04:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 c01bc08:	4770      	bxeq	lr
 c01bc0a:	b530      	push	{r4, r5, lr}
 c01bc0c:	f44f 7460 	mov.w	r4, #896	; 0x380
 c01bc10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 c01bc14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 c01bc18:	e71c      	b.n	c01ba54 <__adddf3+0x138>
 c01bc1a:	bf00      	nop

0c01bc1c <__aeabi_ul2d>:
 c01bc1c:	ea50 0201 	orrs.w	r2, r0, r1
 c01bc20:	bf08      	it	eq
 c01bc22:	4770      	bxeq	lr
 c01bc24:	b530      	push	{r4, r5, lr}
 c01bc26:	f04f 0500 	mov.w	r5, #0
 c01bc2a:	e00a      	b.n	c01bc42 <__aeabi_l2d+0x16>

0c01bc2c <__aeabi_l2d>:
 c01bc2c:	ea50 0201 	orrs.w	r2, r0, r1
 c01bc30:	bf08      	it	eq
 c01bc32:	4770      	bxeq	lr
 c01bc34:	b530      	push	{r4, r5, lr}
 c01bc36:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 c01bc3a:	d502      	bpl.n	c01bc42 <__aeabi_l2d+0x16>
 c01bc3c:	4240      	negs	r0, r0
 c01bc3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 c01bc42:	f44f 6480 	mov.w	r4, #1024	; 0x400
 c01bc46:	f104 0432 	add.w	r4, r4, #50	; 0x32
 c01bc4a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 c01bc4e:	f43f aed8 	beq.w	c01ba02 <__adddf3+0xe6>
 c01bc52:	f04f 0203 	mov.w	r2, #3
 c01bc56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 c01bc5a:	bf18      	it	ne
 c01bc5c:	3203      	addne	r2, #3
 c01bc5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 c01bc62:	bf18      	it	ne
 c01bc64:	3203      	addne	r2, #3
 c01bc66:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 c01bc6a:	f1c2 0320 	rsb	r3, r2, #32
 c01bc6e:	fa00 fc03 	lsl.w	ip, r0, r3
 c01bc72:	fa20 f002 	lsr.w	r0, r0, r2
 c01bc76:	fa01 fe03 	lsl.w	lr, r1, r3
 c01bc7a:	ea40 000e 	orr.w	r0, r0, lr
 c01bc7e:	fa21 f102 	lsr.w	r1, r1, r2
 c01bc82:	4414      	add	r4, r2
 c01bc84:	e6bd      	b.n	c01ba02 <__adddf3+0xe6>
 c01bc86:	bf00      	nop

0c01bc88 <__aeabi_dmul>:
 c01bc88:	b570      	push	{r4, r5, r6, lr}
 c01bc8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 c01bc8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 c01bc92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 c01bc96:	bf1d      	ittte	ne
 c01bc98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 c01bc9c:	ea94 0f0c 	teqne	r4, ip
 c01bca0:	ea95 0f0c 	teqne	r5, ip
 c01bca4:	f000 f8de 	bleq	c01be64 <__aeabi_dmul+0x1dc>
 c01bca8:	442c      	add	r4, r5
 c01bcaa:	ea81 0603 	eor.w	r6, r1, r3
 c01bcae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 c01bcb2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 c01bcb6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 c01bcba:	bf18      	it	ne
 c01bcbc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 c01bcc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 c01bcc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c01bcc8:	d038      	beq.n	c01bd3c <__aeabi_dmul+0xb4>
 c01bcca:	fba0 ce02 	umull	ip, lr, r0, r2
 c01bcce:	f04f 0500 	mov.w	r5, #0
 c01bcd2:	fbe1 e502 	umlal	lr, r5, r1, r2
 c01bcd6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 c01bcda:	fbe0 e503 	umlal	lr, r5, r0, r3
 c01bcde:	f04f 0600 	mov.w	r6, #0
 c01bce2:	fbe1 5603 	umlal	r5, r6, r1, r3
 c01bce6:	f09c 0f00 	teq	ip, #0
 c01bcea:	bf18      	it	ne
 c01bcec:	f04e 0e01 	orrne.w	lr, lr, #1
 c01bcf0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 c01bcf4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 c01bcf8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 c01bcfc:	d204      	bcs.n	c01bd08 <__aeabi_dmul+0x80>
 c01bcfe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 c01bd02:	416d      	adcs	r5, r5
 c01bd04:	eb46 0606 	adc.w	r6, r6, r6
 c01bd08:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 c01bd0c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 c01bd10:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 c01bd14:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 c01bd18:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 c01bd1c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 c01bd20:	bf88      	it	hi
 c01bd22:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 c01bd26:	d81e      	bhi.n	c01bd66 <__aeabi_dmul+0xde>
 c01bd28:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 c01bd2c:	bf08      	it	eq
 c01bd2e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 c01bd32:	f150 0000 	adcs.w	r0, r0, #0
 c01bd36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 c01bd3a:	bd70      	pop	{r4, r5, r6, pc}
 c01bd3c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 c01bd40:	ea46 0101 	orr.w	r1, r6, r1
 c01bd44:	ea40 0002 	orr.w	r0, r0, r2
 c01bd48:	ea81 0103 	eor.w	r1, r1, r3
 c01bd4c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 c01bd50:	bfc2      	ittt	gt
 c01bd52:	ebd4 050c 	rsbsgt	r5, r4, ip
 c01bd56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 c01bd5a:	bd70      	popgt	{r4, r5, r6, pc}
 c01bd5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 c01bd60:	f04f 0e00 	mov.w	lr, #0
 c01bd64:	3c01      	subs	r4, #1
 c01bd66:	f300 80ab 	bgt.w	c01bec0 <__aeabi_dmul+0x238>
 c01bd6a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 c01bd6e:	bfde      	ittt	le
 c01bd70:	2000      	movle	r0, #0
 c01bd72:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 c01bd76:	bd70      	pople	{r4, r5, r6, pc}
 c01bd78:	f1c4 0400 	rsb	r4, r4, #0
 c01bd7c:	3c20      	subs	r4, #32
 c01bd7e:	da35      	bge.n	c01bdec <__aeabi_dmul+0x164>
 c01bd80:	340c      	adds	r4, #12
 c01bd82:	dc1b      	bgt.n	c01bdbc <__aeabi_dmul+0x134>
 c01bd84:	f104 0414 	add.w	r4, r4, #20
 c01bd88:	f1c4 0520 	rsb	r5, r4, #32
 c01bd8c:	fa00 f305 	lsl.w	r3, r0, r5
 c01bd90:	fa20 f004 	lsr.w	r0, r0, r4
 c01bd94:	fa01 f205 	lsl.w	r2, r1, r5
 c01bd98:	ea40 0002 	orr.w	r0, r0, r2
 c01bd9c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 c01bda0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 c01bda4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 c01bda8:	fa21 f604 	lsr.w	r6, r1, r4
 c01bdac:	eb42 0106 	adc.w	r1, r2, r6
 c01bdb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 c01bdb4:	bf08      	it	eq
 c01bdb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 c01bdba:	bd70      	pop	{r4, r5, r6, pc}
 c01bdbc:	f1c4 040c 	rsb	r4, r4, #12
 c01bdc0:	f1c4 0520 	rsb	r5, r4, #32
 c01bdc4:	fa00 f304 	lsl.w	r3, r0, r4
 c01bdc8:	fa20 f005 	lsr.w	r0, r0, r5
 c01bdcc:	fa01 f204 	lsl.w	r2, r1, r4
 c01bdd0:	ea40 0002 	orr.w	r0, r0, r2
 c01bdd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 c01bdd8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 c01bddc:	f141 0100 	adc.w	r1, r1, #0
 c01bde0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 c01bde4:	bf08      	it	eq
 c01bde6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 c01bdea:	bd70      	pop	{r4, r5, r6, pc}
 c01bdec:	f1c4 0520 	rsb	r5, r4, #32
 c01bdf0:	fa00 f205 	lsl.w	r2, r0, r5
 c01bdf4:	ea4e 0e02 	orr.w	lr, lr, r2
 c01bdf8:	fa20 f304 	lsr.w	r3, r0, r4
 c01bdfc:	fa01 f205 	lsl.w	r2, r1, r5
 c01be00:	ea43 0302 	orr.w	r3, r3, r2
 c01be04:	fa21 f004 	lsr.w	r0, r1, r4
 c01be08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 c01be0c:	fa21 f204 	lsr.w	r2, r1, r4
 c01be10:	ea20 0002 	bic.w	r0, r0, r2
 c01be14:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 c01be18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 c01be1c:	bf08      	it	eq
 c01be1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 c01be22:	bd70      	pop	{r4, r5, r6, pc}
 c01be24:	f094 0f00 	teq	r4, #0
 c01be28:	d10f      	bne.n	c01be4a <__aeabi_dmul+0x1c2>
 c01be2a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 c01be2e:	0040      	lsls	r0, r0, #1
 c01be30:	eb41 0101 	adc.w	r1, r1, r1
 c01be34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 c01be38:	bf08      	it	eq
 c01be3a:	3c01      	subeq	r4, #1
 c01be3c:	d0f7      	beq.n	c01be2e <__aeabi_dmul+0x1a6>
 c01be3e:	ea41 0106 	orr.w	r1, r1, r6
 c01be42:	f095 0f00 	teq	r5, #0
 c01be46:	bf18      	it	ne
 c01be48:	4770      	bxne	lr
 c01be4a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 c01be4e:	0052      	lsls	r2, r2, #1
 c01be50:	eb43 0303 	adc.w	r3, r3, r3
 c01be54:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 c01be58:	bf08      	it	eq
 c01be5a:	3d01      	subeq	r5, #1
 c01be5c:	d0f7      	beq.n	c01be4e <__aeabi_dmul+0x1c6>
 c01be5e:	ea43 0306 	orr.w	r3, r3, r6
 c01be62:	4770      	bx	lr
 c01be64:	ea94 0f0c 	teq	r4, ip
 c01be68:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 c01be6c:	bf18      	it	ne
 c01be6e:	ea95 0f0c 	teqne	r5, ip
 c01be72:	d00c      	beq.n	c01be8e <__aeabi_dmul+0x206>
 c01be74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 c01be78:	bf18      	it	ne
 c01be7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 c01be7e:	d1d1      	bne.n	c01be24 <__aeabi_dmul+0x19c>
 c01be80:	ea81 0103 	eor.w	r1, r1, r3
 c01be84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 c01be88:	f04f 0000 	mov.w	r0, #0
 c01be8c:	bd70      	pop	{r4, r5, r6, pc}
 c01be8e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 c01be92:	bf06      	itte	eq
 c01be94:	4610      	moveq	r0, r2
 c01be96:	4619      	moveq	r1, r3
 c01be98:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 c01be9c:	d019      	beq.n	c01bed2 <__aeabi_dmul+0x24a>
 c01be9e:	ea94 0f0c 	teq	r4, ip
 c01bea2:	d102      	bne.n	c01beaa <__aeabi_dmul+0x222>
 c01bea4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 c01bea8:	d113      	bne.n	c01bed2 <__aeabi_dmul+0x24a>
 c01beaa:	ea95 0f0c 	teq	r5, ip
 c01beae:	d105      	bne.n	c01bebc <__aeabi_dmul+0x234>
 c01beb0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 c01beb4:	bf1c      	itt	ne
 c01beb6:	4610      	movne	r0, r2
 c01beb8:	4619      	movne	r1, r3
 c01beba:	d10a      	bne.n	c01bed2 <__aeabi_dmul+0x24a>
 c01bebc:	ea81 0103 	eor.w	r1, r1, r3
 c01bec0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 c01bec4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 c01bec8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 c01becc:	f04f 0000 	mov.w	r0, #0
 c01bed0:	bd70      	pop	{r4, r5, r6, pc}
 c01bed2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 c01bed6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 c01beda:	bd70      	pop	{r4, r5, r6, pc}

0c01bedc <__aeabi_ddiv>:
 c01bedc:	b570      	push	{r4, r5, r6, lr}
 c01bede:	f04f 0cff 	mov.w	ip, #255	; 0xff
 c01bee2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 c01bee6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 c01beea:	bf1d      	ittte	ne
 c01beec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 c01bef0:	ea94 0f0c 	teqne	r4, ip
 c01bef4:	ea95 0f0c 	teqne	r5, ip
 c01bef8:	f000 f8a7 	bleq	c01c04a <__aeabi_ddiv+0x16e>
 c01befc:	eba4 0405 	sub.w	r4, r4, r5
 c01bf00:	ea81 0e03 	eor.w	lr, r1, r3
 c01bf04:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 c01bf08:	ea4f 3101 	mov.w	r1, r1, lsl #12
 c01bf0c:	f000 8088 	beq.w	c01c020 <__aeabi_ddiv+0x144>
 c01bf10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 c01bf14:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 c01bf18:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 c01bf1c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 c01bf20:	ea4f 2202 	mov.w	r2, r2, lsl #8
 c01bf24:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 c01bf28:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 c01bf2c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 c01bf30:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 c01bf34:	429d      	cmp	r5, r3
 c01bf36:	bf08      	it	eq
 c01bf38:	4296      	cmpeq	r6, r2
 c01bf3a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 c01bf3e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 c01bf42:	d202      	bcs.n	c01bf4a <__aeabi_ddiv+0x6e>
 c01bf44:	085b      	lsrs	r3, r3, #1
 c01bf46:	ea4f 0232 	mov.w	r2, r2, rrx
 c01bf4a:	1ab6      	subs	r6, r6, r2
 c01bf4c:	eb65 0503 	sbc.w	r5, r5, r3
 c01bf50:	085b      	lsrs	r3, r3, #1
 c01bf52:	ea4f 0232 	mov.w	r2, r2, rrx
 c01bf56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 c01bf5a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 c01bf5e:	ebb6 0e02 	subs.w	lr, r6, r2
 c01bf62:	eb75 0e03 	sbcs.w	lr, r5, r3
 c01bf66:	bf22      	ittt	cs
 c01bf68:	1ab6      	subcs	r6, r6, r2
 c01bf6a:	4675      	movcs	r5, lr
 c01bf6c:	ea40 000c 	orrcs.w	r0, r0, ip
 c01bf70:	085b      	lsrs	r3, r3, #1
 c01bf72:	ea4f 0232 	mov.w	r2, r2, rrx
 c01bf76:	ebb6 0e02 	subs.w	lr, r6, r2
 c01bf7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 c01bf7e:	bf22      	ittt	cs
 c01bf80:	1ab6      	subcs	r6, r6, r2
 c01bf82:	4675      	movcs	r5, lr
 c01bf84:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 c01bf88:	085b      	lsrs	r3, r3, #1
 c01bf8a:	ea4f 0232 	mov.w	r2, r2, rrx
 c01bf8e:	ebb6 0e02 	subs.w	lr, r6, r2
 c01bf92:	eb75 0e03 	sbcs.w	lr, r5, r3
 c01bf96:	bf22      	ittt	cs
 c01bf98:	1ab6      	subcs	r6, r6, r2
 c01bf9a:	4675      	movcs	r5, lr
 c01bf9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 c01bfa0:	085b      	lsrs	r3, r3, #1
 c01bfa2:	ea4f 0232 	mov.w	r2, r2, rrx
 c01bfa6:	ebb6 0e02 	subs.w	lr, r6, r2
 c01bfaa:	eb75 0e03 	sbcs.w	lr, r5, r3
 c01bfae:	bf22      	ittt	cs
 c01bfb0:	1ab6      	subcs	r6, r6, r2
 c01bfb2:	4675      	movcs	r5, lr
 c01bfb4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 c01bfb8:	ea55 0e06 	orrs.w	lr, r5, r6
 c01bfbc:	d018      	beq.n	c01bff0 <__aeabi_ddiv+0x114>
 c01bfbe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 c01bfc2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 c01bfc6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 c01bfca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 c01bfce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 c01bfd2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 c01bfd6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 c01bfda:	d1c0      	bne.n	c01bf5e <__aeabi_ddiv+0x82>
 c01bfdc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 c01bfe0:	d10b      	bne.n	c01bffa <__aeabi_ddiv+0x11e>
 c01bfe2:	ea41 0100 	orr.w	r1, r1, r0
 c01bfe6:	f04f 0000 	mov.w	r0, #0
 c01bfea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 c01bfee:	e7b6      	b.n	c01bf5e <__aeabi_ddiv+0x82>
 c01bff0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 c01bff4:	bf04      	itt	eq
 c01bff6:	4301      	orreq	r1, r0
 c01bff8:	2000      	moveq	r0, #0
 c01bffa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 c01bffe:	bf88      	it	hi
 c01c000:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 c01c004:	f63f aeaf 	bhi.w	c01bd66 <__aeabi_dmul+0xde>
 c01c008:	ebb5 0c03 	subs.w	ip, r5, r3
 c01c00c:	bf04      	itt	eq
 c01c00e:	ebb6 0c02 	subseq.w	ip, r6, r2
 c01c012:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 c01c016:	f150 0000 	adcs.w	r0, r0, #0
 c01c01a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 c01c01e:	bd70      	pop	{r4, r5, r6, pc}
 c01c020:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 c01c024:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 c01c028:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 c01c02c:	bfc2      	ittt	gt
 c01c02e:	ebd4 050c 	rsbsgt	r5, r4, ip
 c01c032:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 c01c036:	bd70      	popgt	{r4, r5, r6, pc}
 c01c038:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 c01c03c:	f04f 0e00 	mov.w	lr, #0
 c01c040:	3c01      	subs	r4, #1
 c01c042:	e690      	b.n	c01bd66 <__aeabi_dmul+0xde>
 c01c044:	ea45 0e06 	orr.w	lr, r5, r6
 c01c048:	e68d      	b.n	c01bd66 <__aeabi_dmul+0xde>
 c01c04a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 c01c04e:	ea94 0f0c 	teq	r4, ip
 c01c052:	bf08      	it	eq
 c01c054:	ea95 0f0c 	teqeq	r5, ip
 c01c058:	f43f af3b 	beq.w	c01bed2 <__aeabi_dmul+0x24a>
 c01c05c:	ea94 0f0c 	teq	r4, ip
 c01c060:	d10a      	bne.n	c01c078 <__aeabi_ddiv+0x19c>
 c01c062:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 c01c066:	f47f af34 	bne.w	c01bed2 <__aeabi_dmul+0x24a>
 c01c06a:	ea95 0f0c 	teq	r5, ip
 c01c06e:	f47f af25 	bne.w	c01bebc <__aeabi_dmul+0x234>
 c01c072:	4610      	mov	r0, r2
 c01c074:	4619      	mov	r1, r3
 c01c076:	e72c      	b.n	c01bed2 <__aeabi_dmul+0x24a>
 c01c078:	ea95 0f0c 	teq	r5, ip
 c01c07c:	d106      	bne.n	c01c08c <__aeabi_ddiv+0x1b0>
 c01c07e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 c01c082:	f43f aefd 	beq.w	c01be80 <__aeabi_dmul+0x1f8>
 c01c086:	4610      	mov	r0, r2
 c01c088:	4619      	mov	r1, r3
 c01c08a:	e722      	b.n	c01bed2 <__aeabi_dmul+0x24a>
 c01c08c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 c01c090:	bf18      	it	ne
 c01c092:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 c01c096:	f47f aec5 	bne.w	c01be24 <__aeabi_dmul+0x19c>
 c01c09a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 c01c09e:	f47f af0d 	bne.w	c01bebc <__aeabi_dmul+0x234>
 c01c0a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 c01c0a6:	f47f aeeb 	bne.w	c01be80 <__aeabi_dmul+0x1f8>
 c01c0aa:	e712      	b.n	c01bed2 <__aeabi_dmul+0x24a>

0c01c0ac <__gedf2>:
 c01c0ac:	f04f 3cff 	mov.w	ip, #4294967295
 c01c0b0:	e006      	b.n	c01c0c0 <__cmpdf2+0x4>
 c01c0b2:	bf00      	nop

0c01c0b4 <__ledf2>:
 c01c0b4:	f04f 0c01 	mov.w	ip, #1
 c01c0b8:	e002      	b.n	c01c0c0 <__cmpdf2+0x4>
 c01c0ba:	bf00      	nop

0c01c0bc <__cmpdf2>:
 c01c0bc:	f04f 0c01 	mov.w	ip, #1
 c01c0c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 c01c0c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 c01c0c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 c01c0cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 c01c0d0:	bf18      	it	ne
 c01c0d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 c01c0d6:	d01b      	beq.n	c01c110 <__cmpdf2+0x54>
 c01c0d8:	b001      	add	sp, #4
 c01c0da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 c01c0de:	bf0c      	ite	eq
 c01c0e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 c01c0e4:	ea91 0f03 	teqne	r1, r3
 c01c0e8:	bf02      	ittt	eq
 c01c0ea:	ea90 0f02 	teqeq	r0, r2
 c01c0ee:	2000      	moveq	r0, #0
 c01c0f0:	4770      	bxeq	lr
 c01c0f2:	f110 0f00 	cmn.w	r0, #0
 c01c0f6:	ea91 0f03 	teq	r1, r3
 c01c0fa:	bf58      	it	pl
 c01c0fc:	4299      	cmppl	r1, r3
 c01c0fe:	bf08      	it	eq
 c01c100:	4290      	cmpeq	r0, r2
 c01c102:	bf2c      	ite	cs
 c01c104:	17d8      	asrcs	r0, r3, #31
 c01c106:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 c01c10a:	f040 0001 	orr.w	r0, r0, #1
 c01c10e:	4770      	bx	lr
 c01c110:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 c01c114:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 c01c118:	d102      	bne.n	c01c120 <__cmpdf2+0x64>
 c01c11a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 c01c11e:	d107      	bne.n	c01c130 <__cmpdf2+0x74>
 c01c120:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 c01c124:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 c01c128:	d1d6      	bne.n	c01c0d8 <__cmpdf2+0x1c>
 c01c12a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 c01c12e:	d0d3      	beq.n	c01c0d8 <__cmpdf2+0x1c>
 c01c130:	f85d 0b04 	ldr.w	r0, [sp], #4
 c01c134:	4770      	bx	lr
 c01c136:	bf00      	nop

0c01c138 <__aeabi_cdrcmple>:
 c01c138:	4684      	mov	ip, r0
 c01c13a:	4610      	mov	r0, r2
 c01c13c:	4662      	mov	r2, ip
 c01c13e:	468c      	mov	ip, r1
 c01c140:	4619      	mov	r1, r3
 c01c142:	4663      	mov	r3, ip
 c01c144:	e000      	b.n	c01c148 <__aeabi_cdcmpeq>
 c01c146:	bf00      	nop

0c01c148 <__aeabi_cdcmpeq>:
 c01c148:	b501      	push	{r0, lr}
 c01c14a:	f7ff ffb7 	bl	c01c0bc <__cmpdf2>
 c01c14e:	2800      	cmp	r0, #0
 c01c150:	bf48      	it	mi
 c01c152:	f110 0f00 	cmnmi.w	r0, #0
 c01c156:	bd01      	pop	{r0, pc}

0c01c158 <__aeabi_dcmpeq>:
 c01c158:	f84d ed08 	str.w	lr, [sp, #-8]!
 c01c15c:	f7ff fff4 	bl	c01c148 <__aeabi_cdcmpeq>
 c01c160:	bf0c      	ite	eq
 c01c162:	2001      	moveq	r0, #1
 c01c164:	2000      	movne	r0, #0
 c01c166:	f85d fb08 	ldr.w	pc, [sp], #8
 c01c16a:	bf00      	nop

0c01c16c <__aeabi_dcmplt>:
 c01c16c:	f84d ed08 	str.w	lr, [sp, #-8]!
 c01c170:	f7ff ffea 	bl	c01c148 <__aeabi_cdcmpeq>
 c01c174:	bf34      	ite	cc
 c01c176:	2001      	movcc	r0, #1
 c01c178:	2000      	movcs	r0, #0
 c01c17a:	f85d fb08 	ldr.w	pc, [sp], #8
 c01c17e:	bf00      	nop

0c01c180 <__aeabi_dcmple>:
 c01c180:	f84d ed08 	str.w	lr, [sp, #-8]!
 c01c184:	f7ff ffe0 	bl	c01c148 <__aeabi_cdcmpeq>
 c01c188:	bf94      	ite	ls
 c01c18a:	2001      	movls	r0, #1
 c01c18c:	2000      	movhi	r0, #0
 c01c18e:	f85d fb08 	ldr.w	pc, [sp], #8
 c01c192:	bf00      	nop

0c01c194 <__aeabi_dcmpge>:
 c01c194:	f84d ed08 	str.w	lr, [sp, #-8]!
 c01c198:	f7ff ffce 	bl	c01c138 <__aeabi_cdrcmple>
 c01c19c:	bf94      	ite	ls
 c01c19e:	2001      	movls	r0, #1
 c01c1a0:	2000      	movhi	r0, #0
 c01c1a2:	f85d fb08 	ldr.w	pc, [sp], #8
 c01c1a6:	bf00      	nop

0c01c1a8 <__aeabi_dcmpgt>:
 c01c1a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 c01c1ac:	f7ff ffc4 	bl	c01c138 <__aeabi_cdrcmple>
 c01c1b0:	bf34      	ite	cc
 c01c1b2:	2001      	movcc	r0, #1
 c01c1b4:	2000      	movcs	r0, #0
 c01c1b6:	f85d fb08 	ldr.w	pc, [sp], #8
 c01c1ba:	bf00      	nop

0c01c1bc <__aeabi_dcmpun>:
 c01c1bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 c01c1c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 c01c1c4:	d102      	bne.n	c01c1cc <__aeabi_dcmpun+0x10>
 c01c1c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 c01c1ca:	d10a      	bne.n	c01c1e2 <__aeabi_dcmpun+0x26>
 c01c1cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 c01c1d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 c01c1d4:	d102      	bne.n	c01c1dc <__aeabi_dcmpun+0x20>
 c01c1d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 c01c1da:	d102      	bne.n	c01c1e2 <__aeabi_dcmpun+0x26>
 c01c1dc:	f04f 0000 	mov.w	r0, #0
 c01c1e0:	4770      	bx	lr
 c01c1e2:	f04f 0001 	mov.w	r0, #1
 c01c1e6:	4770      	bx	lr

0c01c1e8 <__aeabi_d2iz>:
 c01c1e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 c01c1ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 c01c1f0:	d215      	bcs.n	c01c21e <__aeabi_d2iz+0x36>
 c01c1f2:	d511      	bpl.n	c01c218 <__aeabi_d2iz+0x30>
 c01c1f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 c01c1f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 c01c1fc:	d912      	bls.n	c01c224 <__aeabi_d2iz+0x3c>
 c01c1fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 c01c202:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 c01c206:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 c01c20a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 c01c20e:	fa23 f002 	lsr.w	r0, r3, r2
 c01c212:	bf18      	it	ne
 c01c214:	4240      	negne	r0, r0
 c01c216:	4770      	bx	lr
 c01c218:	f04f 0000 	mov.w	r0, #0
 c01c21c:	4770      	bx	lr
 c01c21e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 c01c222:	d105      	bne.n	c01c230 <__aeabi_d2iz+0x48>
 c01c224:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 c01c228:	bf08      	it	eq
 c01c22a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 c01c22e:	4770      	bx	lr
 c01c230:	f04f 0000 	mov.w	r0, #0
 c01c234:	4770      	bx	lr
 c01c236:	bf00      	nop

0c01c238 <__aeabi_uldivmod>:
 c01c238:	b953      	cbnz	r3, c01c250 <__aeabi_uldivmod+0x18>
 c01c23a:	b94a      	cbnz	r2, c01c250 <__aeabi_uldivmod+0x18>
 c01c23c:	2900      	cmp	r1, #0
 c01c23e:	bf08      	it	eq
 c01c240:	2800      	cmpeq	r0, #0
 c01c242:	bf1c      	itt	ne
 c01c244:	f04f 31ff 	movne.w	r1, #4294967295
 c01c248:	f04f 30ff 	movne.w	r0, #4294967295
 c01c24c:	f000 b97c 	b.w	c01c548 <__aeabi_idiv0>
 c01c250:	f1ad 0c08 	sub.w	ip, sp, #8
 c01c254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c01c258:	f000 f806 	bl	c01c268 <__udivmoddi4>
 c01c25c:	f8dd e004 	ldr.w	lr, [sp, #4]
 c01c260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c01c264:	b004      	add	sp, #16
 c01c266:	4770      	bx	lr

0c01c268 <__udivmoddi4>:
 c01c268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c01c26c:	468c      	mov	ip, r1
 c01c26e:	9d08      	ldr	r5, [sp, #32]
 c01c270:	4604      	mov	r4, r0
 c01c272:	468a      	mov	sl, r1
 c01c274:	2b00      	cmp	r3, #0
 c01c276:	d14a      	bne.n	c01c30e <__udivmoddi4+0xa6>
 c01c278:	428a      	cmp	r2, r1
 c01c27a:	4617      	mov	r7, r2
 c01c27c:	d962      	bls.n	c01c344 <__udivmoddi4+0xdc>
 c01c27e:	fab2 f682 	clz	r6, r2
 c01c282:	b14e      	cbz	r6, c01c298 <__udivmoddi4+0x30>
 c01c284:	f1c6 0e20 	rsb	lr, r6, #32
 c01c288:	fa01 f306 	lsl.w	r3, r1, r6
 c01c28c:	40b7      	lsls	r7, r6
 c01c28e:	40b4      	lsls	r4, r6
 c01c290:	fa20 fe0e 	lsr.w	lr, r0, lr
 c01c294:	ea4e 0a03 	orr.w	sl, lr, r3
 c01c298:	ea4f 4817 	mov.w	r8, r7, lsr #16
 c01c29c:	0c23      	lsrs	r3, r4, #16
 c01c29e:	fa1f f987 	uxth.w	r9, r7
 c01c2a2:	fbba fef8 	udiv	lr, sl, r8
 c01c2a6:	fb08 aa1e 	mls	sl, r8, lr, sl
 c01c2aa:	fb0e f209 	mul.w	r2, lr, r9
 c01c2ae:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 c01c2b2:	429a      	cmp	r2, r3
 c01c2b4:	d90b      	bls.n	c01c2ce <__udivmoddi4+0x66>
 c01c2b6:	18fb      	adds	r3, r7, r3
 c01c2b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 c01c2bc:	bf2c      	ite	cs
 c01c2be:	2001      	movcs	r0, #1
 c01c2c0:	2000      	movcc	r0, #0
 c01c2c2:	429a      	cmp	r2, r3
 c01c2c4:	d902      	bls.n	c01c2cc <__udivmoddi4+0x64>
 c01c2c6:	2800      	cmp	r0, #0
 c01c2c8:	f000 812a 	beq.w	c01c520 <__udivmoddi4+0x2b8>
 c01c2cc:	468e      	mov	lr, r1
 c01c2ce:	1a9a      	subs	r2, r3, r2
 c01c2d0:	b2a3      	uxth	r3, r4
 c01c2d2:	fbb2 f0f8 	udiv	r0, r2, r8
 c01c2d6:	fb08 2210 	mls	r2, r8, r0, r2
 c01c2da:	fb00 f909 	mul.w	r9, r0, r9
 c01c2de:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
 c01c2e2:	45a1      	cmp	r9, r4
 c01c2e4:	d907      	bls.n	c01c2f6 <__udivmoddi4+0x8e>
 c01c2e6:	193c      	adds	r4, r7, r4
 c01c2e8:	f100 33ff 	add.w	r3, r0, #4294967295
 c01c2ec:	d202      	bcs.n	c01c2f4 <__udivmoddi4+0x8c>
 c01c2ee:	45a1      	cmp	r9, r4
 c01c2f0:	f200 8110 	bhi.w	c01c514 <__udivmoddi4+0x2ac>
 c01c2f4:	4618      	mov	r0, r3
 c01c2f6:	eba4 0409 	sub.w	r4, r4, r9
 c01c2fa:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 c01c2fe:	2100      	movs	r1, #0
 c01c300:	b11d      	cbz	r5, c01c30a <__udivmoddi4+0xa2>
 c01c302:	40f4      	lsrs	r4, r6
 c01c304:	2300      	movs	r3, #0
 c01c306:	e9c5 4300 	strd	r4, r3, [r5]
 c01c30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c01c30e:	428b      	cmp	r3, r1
 c01c310:	d908      	bls.n	c01c324 <__udivmoddi4+0xbc>
 c01c312:	2d00      	cmp	r5, #0
 c01c314:	f000 80f2 	beq.w	c01c4fc <__udivmoddi4+0x294>
 c01c318:	2100      	movs	r1, #0
 c01c31a:	e9c5 0c00 	strd	r0, ip, [r5]
 c01c31e:	4608      	mov	r0, r1
 c01c320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c01c324:	fab3 f183 	clz	r1, r3
 c01c328:	2900      	cmp	r1, #0
 c01c32a:	d14e      	bne.n	c01c3ca <__udivmoddi4+0x162>
 c01c32c:	4563      	cmp	r3, ip
 c01c32e:	f0c0 80e8 	bcc.w	c01c502 <__udivmoddi4+0x29a>
 c01c332:	4282      	cmp	r2, r0
 c01c334:	f240 80e5 	bls.w	c01c502 <__udivmoddi4+0x29a>
 c01c338:	4608      	mov	r0, r1
 c01c33a:	2d00      	cmp	r5, #0
 c01c33c:	d0e5      	beq.n	c01c30a <__udivmoddi4+0xa2>
 c01c33e:	e9c5 4a00 	strd	r4, sl, [r5]
 c01c342:	e7e2      	b.n	c01c30a <__udivmoddi4+0xa2>
 c01c344:	b902      	cbnz	r2, c01c348 <__udivmoddi4+0xe0>
 c01c346:	deff      	udf	#255	; 0xff
 c01c348:	fab2 f682 	clz	r6, r2
 c01c34c:	2e00      	cmp	r6, #0
 c01c34e:	f040 8099 	bne.w	c01c484 <__udivmoddi4+0x21c>
 c01c352:	1a8b      	subs	r3, r1, r2
 c01c354:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c01c358:	fa1f f882 	uxth.w	r8, r2
 c01c35c:	2101      	movs	r1, #1
 c01c35e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 c01c362:	fbb3 f2fe 	udiv	r2, r3, lr
 c01c366:	fb0e 3012 	mls	r0, lr, r2, r3
 c01c36a:	fb08 f902 	mul.w	r9, r8, r2
 c01c36e:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 c01c372:	45e1      	cmp	r9, ip
 c01c374:	d908      	bls.n	c01c388 <__udivmoddi4+0x120>
 c01c376:	eb17 0c0c 	adds.w	ip, r7, ip
 c01c37a:	f102 33ff 	add.w	r3, r2, #4294967295
 c01c37e:	d202      	bcs.n	c01c386 <__udivmoddi4+0x11e>
 c01c380:	45e1      	cmp	r9, ip
 c01c382:	f200 80ca 	bhi.w	c01c51a <__udivmoddi4+0x2b2>
 c01c386:	461a      	mov	r2, r3
 c01c388:	ebac 0c09 	sub.w	ip, ip, r9
 c01c38c:	b2a3      	uxth	r3, r4
 c01c38e:	fbbc f0fe 	udiv	r0, ip, lr
 c01c392:	fb0e cc10 	mls	ip, lr, r0, ip
 c01c396:	fb08 f800 	mul.w	r8, r8, r0
 c01c39a:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
 c01c39e:	45a0      	cmp	r8, r4
 c01c3a0:	d90e      	bls.n	c01c3c0 <__udivmoddi4+0x158>
 c01c3a2:	193c      	adds	r4, r7, r4
 c01c3a4:	f100 33ff 	add.w	r3, r0, #4294967295
 c01c3a8:	bf2c      	ite	cs
 c01c3aa:	f04f 0c01 	movcs.w	ip, #1
 c01c3ae:	f04f 0c00 	movcc.w	ip, #0
 c01c3b2:	45a0      	cmp	r8, r4
 c01c3b4:	d903      	bls.n	c01c3be <__udivmoddi4+0x156>
 c01c3b6:	f1bc 0f00 	cmp.w	ip, #0
 c01c3ba:	f000 80a8 	beq.w	c01c50e <__udivmoddi4+0x2a6>
 c01c3be:	4618      	mov	r0, r3
 c01c3c0:	eba4 0408 	sub.w	r4, r4, r8
 c01c3c4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 c01c3c8:	e79a      	b.n	c01c300 <__udivmoddi4+0x98>
 c01c3ca:	f1c1 0420 	rsb	r4, r1, #32
 c01c3ce:	408b      	lsls	r3, r1
 c01c3d0:	fa02 fe01 	lsl.w	lr, r2, r1
 c01c3d4:	fa0c f601 	lsl.w	r6, ip, r1
 c01c3d8:	40e2      	lsrs	r2, r4
 c01c3da:	fa20 f704 	lsr.w	r7, r0, r4
 c01c3de:	fa2c fc04 	lsr.w	ip, ip, r4
 c01c3e2:	fa00 f801 	lsl.w	r8, r0, r1
 c01c3e6:	4313      	orrs	r3, r2
 c01c3e8:	433e      	orrs	r6, r7
 c01c3ea:	0c1f      	lsrs	r7, r3, #16
 c01c3ec:	0c32      	lsrs	r2, r6, #16
 c01c3ee:	fa1f f983 	uxth.w	r9, r3
 c01c3f2:	fbbc f0f7 	udiv	r0, ip, r7
 c01c3f6:	fb07 cc10 	mls	ip, r7, r0, ip
 c01c3fa:	fb00 fa09 	mul.w	sl, r0, r9
 c01c3fe:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 c01c402:	45e2      	cmp	sl, ip
 c01c404:	d908      	bls.n	c01c418 <__udivmoddi4+0x1b0>
 c01c406:	eb13 0c0c 	adds.w	ip, r3, ip
 c01c40a:	f100 32ff 	add.w	r2, r0, #4294967295
 c01c40e:	d202      	bcs.n	c01c416 <__udivmoddi4+0x1ae>
 c01c410:	45e2      	cmp	sl, ip
 c01c412:	f200 8089 	bhi.w	c01c528 <__udivmoddi4+0x2c0>
 c01c416:	4610      	mov	r0, r2
 c01c418:	ebac 0c0a 	sub.w	ip, ip, sl
 c01c41c:	b2b6      	uxth	r6, r6
 c01c41e:	fbbc faf7 	udiv	sl, ip, r7
 c01c422:	fb07 cc1a 	mls	ip, r7, sl, ip
 c01c426:	fb0a f909 	mul.w	r9, sl, r9
 c01c42a:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
 c01c42e:	4591      	cmp	r9, r2
 c01c430:	d906      	bls.n	c01c440 <__udivmoddi4+0x1d8>
 c01c432:	189a      	adds	r2, r3, r2
 c01c434:	f10a 36ff 	add.w	r6, sl, #4294967295
 c01c438:	d201      	bcs.n	c01c43e <__udivmoddi4+0x1d6>
 c01c43a:	4591      	cmp	r9, r2
 c01c43c:	d87a      	bhi.n	c01c534 <__udivmoddi4+0x2cc>
 c01c43e:	46b2      	mov	sl, r6
 c01c440:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
 c01c444:	eba2 0209 	sub.w	r2, r2, r9
 c01c448:	fba0 670e 	umull	r6, r7, r0, lr
 c01c44c:	42ba      	cmp	r2, r7
 c01c44e:	46b4      	mov	ip, r6
 c01c450:	46b9      	mov	r9, r7
 c01c452:	d302      	bcc.n	c01c45a <__udivmoddi4+0x1f2>
 c01c454:	d107      	bne.n	c01c466 <__udivmoddi4+0x1fe>
 c01c456:	45b0      	cmp	r8, r6
 c01c458:	d205      	bcs.n	c01c466 <__udivmoddi4+0x1fe>
 c01c45a:	ebb6 0c0e 	subs.w	ip, r6, lr
 c01c45e:	eb67 0303 	sbc.w	r3, r7, r3
 c01c462:	3801      	subs	r0, #1
 c01c464:	4699      	mov	r9, r3
 c01c466:	2d00      	cmp	r5, #0
 c01c468:	d06b      	beq.n	c01c542 <__udivmoddi4+0x2da>
 c01c46a:	ebb8 030c 	subs.w	r3, r8, ip
 c01c46e:	eb62 0209 	sbc.w	r2, r2, r9
 c01c472:	fa02 f404 	lsl.w	r4, r2, r4
 c01c476:	40cb      	lsrs	r3, r1
 c01c478:	40ca      	lsrs	r2, r1
 c01c47a:	2100      	movs	r1, #0
 c01c47c:	431c      	orrs	r4, r3
 c01c47e:	e9c5 4200 	strd	r4, r2, [r5]
 c01c482:	e742      	b.n	c01c30a <__udivmoddi4+0xa2>
 c01c484:	40b7      	lsls	r7, r6
 c01c486:	f1c6 0220 	rsb	r2, r6, #32
 c01c48a:	fa01 f306 	lsl.w	r3, r1, r6
 c01c48e:	40b4      	lsls	r4, r6
 c01c490:	fa21 fc02 	lsr.w	ip, r1, r2
 c01c494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 c01c498:	fa20 f202 	lsr.w	r2, r0, r2
 c01c49c:	fa1f f887 	uxth.w	r8, r7
 c01c4a0:	fbbc f1fe 	udiv	r1, ip, lr
 c01c4a4:	431a      	orrs	r2, r3
 c01c4a6:	fb0e cc11 	mls	ip, lr, r1, ip
 c01c4aa:	fb01 f008 	mul.w	r0, r1, r8
 c01c4ae:	0c13      	lsrs	r3, r2, #16
 c01c4b0:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 c01c4b4:	4560      	cmp	r0, ip
 c01c4b6:	d907      	bls.n	c01c4c8 <__udivmoddi4+0x260>
 c01c4b8:	eb17 0c0c 	adds.w	ip, r7, ip
 c01c4bc:	f101 33ff 	add.w	r3, r1, #4294967295
 c01c4c0:	d201      	bcs.n	c01c4c6 <__udivmoddi4+0x25e>
 c01c4c2:	4560      	cmp	r0, ip
 c01c4c4:	d833      	bhi.n	c01c52e <__udivmoddi4+0x2c6>
 c01c4c6:	4619      	mov	r1, r3
 c01c4c8:	ebac 0c00 	sub.w	ip, ip, r0
 c01c4cc:	b292      	uxth	r2, r2
 c01c4ce:	fbbc f0fe 	udiv	r0, ip, lr
 c01c4d2:	fb0e cc10 	mls	ip, lr, r0, ip
 c01c4d6:	fb00 f308 	mul.w	r3, r0, r8
 c01c4da:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 c01c4de:	4563      	cmp	r3, ip
 c01c4e0:	d907      	bls.n	c01c4f2 <__udivmoddi4+0x28a>
 c01c4e2:	eb17 0c0c 	adds.w	ip, r7, ip
 c01c4e6:	f100 32ff 	add.w	r2, r0, #4294967295
 c01c4ea:	d201      	bcs.n	c01c4f0 <__udivmoddi4+0x288>
 c01c4ec:	4563      	cmp	r3, ip
 c01c4ee:	d825      	bhi.n	c01c53c <__udivmoddi4+0x2d4>
 c01c4f0:	4610      	mov	r0, r2
 c01c4f2:	ebac 0303 	sub.w	r3, ip, r3
 c01c4f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c01c4fa:	e730      	b.n	c01c35e <__udivmoddi4+0xf6>
 c01c4fc:	4629      	mov	r1, r5
 c01c4fe:	4628      	mov	r0, r5
 c01c500:	e703      	b.n	c01c30a <__udivmoddi4+0xa2>
 c01c502:	1a84      	subs	r4, r0, r2
 c01c504:	eb6c 0303 	sbc.w	r3, ip, r3
 c01c508:	2001      	movs	r0, #1
 c01c50a:	469a      	mov	sl, r3
 c01c50c:	e715      	b.n	c01c33a <__udivmoddi4+0xd2>
 c01c50e:	3802      	subs	r0, #2
 c01c510:	443c      	add	r4, r7
 c01c512:	e755      	b.n	c01c3c0 <__udivmoddi4+0x158>
 c01c514:	3802      	subs	r0, #2
 c01c516:	443c      	add	r4, r7
 c01c518:	e6ed      	b.n	c01c2f6 <__udivmoddi4+0x8e>
 c01c51a:	3a02      	subs	r2, #2
 c01c51c:	44bc      	add	ip, r7
 c01c51e:	e733      	b.n	c01c388 <__udivmoddi4+0x120>
 c01c520:	f1ae 0e02 	sub.w	lr, lr, #2
 c01c524:	443b      	add	r3, r7
 c01c526:	e6d2      	b.n	c01c2ce <__udivmoddi4+0x66>
 c01c528:	3802      	subs	r0, #2
 c01c52a:	449c      	add	ip, r3
 c01c52c:	e774      	b.n	c01c418 <__udivmoddi4+0x1b0>
 c01c52e:	3902      	subs	r1, #2
 c01c530:	44bc      	add	ip, r7
 c01c532:	e7c9      	b.n	c01c4c8 <__udivmoddi4+0x260>
 c01c534:	f1aa 0a02 	sub.w	sl, sl, #2
 c01c538:	441a      	add	r2, r3
 c01c53a:	e781      	b.n	c01c440 <__udivmoddi4+0x1d8>
 c01c53c:	3802      	subs	r0, #2
 c01c53e:	44bc      	add	ip, r7
 c01c540:	e7d7      	b.n	c01c4f2 <__udivmoddi4+0x28a>
 c01c542:	4629      	mov	r1, r5
 c01c544:	e6e1      	b.n	c01c30a <__udivmoddi4+0xa2>
 c01c546:	bf00      	nop

0c01c548 <__aeabi_idiv0>:
 c01c548:	4770      	bx	lr
 c01c54a:	bf00      	nop
	...

Disassembly of section .ER_TFM_CODE:

0c01c568 <__do_global_dtors_aux>:
 c01c568:	b510      	push	{r4, lr}
 c01c56a:	4c05      	ldr	r4, [pc, #20]	; (c01c580 <__exidx_end+0x18>)
 c01c56c:	7823      	ldrb	r3, [r4, #0]
 c01c56e:	b933      	cbnz	r3, c01c57e <__do_global_dtors_aux+0x16>
 c01c570:	4b04      	ldr	r3, [pc, #16]	; (c01c584 <__exidx_end+0x1c>)
 c01c572:	b113      	cbz	r3, c01c57a <__do_global_dtors_aux+0x12>
 c01c574:	4804      	ldr	r0, [pc, #16]	; (c01c588 <__exidx_end+0x20>)
 c01c576:	e000      	b.n	c01c57a <__do_global_dtors_aux+0x12>
 c01c578:	bf00      	nop
 c01c57a:	2301      	movs	r3, #1
 c01c57c:	7023      	strb	r3, [r4, #0]
 c01c57e:	bd10      	pop	{r4, pc}
 c01c580:	30035d30 	.word	0x30035d30
 c01c584:	00000000 	.word	0x00000000
 c01c588:	0c0372c0 	.word	0x0c0372c0

0c01c58c <frame_dummy>:
 c01c58c:	b508      	push	{r3, lr}
 c01c58e:	4b03      	ldr	r3, [pc, #12]	; (c01c59c <frame_dummy+0x10>)
 c01c590:	b11b      	cbz	r3, c01c59a <frame_dummy+0xe>
 c01c592:	4903      	ldr	r1, [pc, #12]	; (c01c5a0 <frame_dummy+0x14>)
 c01c594:	4803      	ldr	r0, [pc, #12]	; (c01c5a4 <frame_dummy+0x18>)
 c01c596:	e000      	b.n	c01c59a <frame_dummy+0xe>
 c01c598:	bf00      	nop
 c01c59a:	bd08      	pop	{r3, pc}
 c01c59c:	00000000 	.word	0x00000000
 c01c5a0:	30035d34 	.word	0x30035d34
 c01c5a4:	0c0372c0 	.word	0x0c0372c0

0c01c5a8 <_mainCRTStartup>:
 c01c5a8:	4b15      	ldr	r3, [pc, #84]	; (c01c600 <_mainCRTStartup+0x58>)
 c01c5aa:	2b00      	cmp	r3, #0
 c01c5ac:	bf08      	it	eq
 c01c5ae:	4b13      	ldreq	r3, [pc, #76]	; (c01c5fc <_mainCRTStartup+0x54>)
 c01c5b0:	469d      	mov	sp, r3
 c01c5b2:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 c01c5b6:	2100      	movs	r1, #0
 c01c5b8:	468b      	mov	fp, r1
 c01c5ba:	460f      	mov	r7, r1
 c01c5bc:	4813      	ldr	r0, [pc, #76]	; (c01c60c <_mainCRTStartup+0x64>)
 c01c5be:	4a14      	ldr	r2, [pc, #80]	; (c01c610 <_mainCRTStartup+0x68>)
 c01c5c0:	1a12      	subs	r2, r2, r0
 c01c5c2:	f7fb fa00 	bl	c0179c6 <memset>
 c01c5c6:	4b0f      	ldr	r3, [pc, #60]	; (c01c604 <_mainCRTStartup+0x5c>)
 c01c5c8:	2b00      	cmp	r3, #0
 c01c5ca:	d000      	beq.n	c01c5ce <_mainCRTStartup+0x26>
 c01c5cc:	4798      	blx	r3
 c01c5ce:	4b0e      	ldr	r3, [pc, #56]	; (c01c608 <_mainCRTStartup+0x60>)
 c01c5d0:	2b00      	cmp	r3, #0
 c01c5d2:	d000      	beq.n	c01c5d6 <_mainCRTStartup+0x2e>
 c01c5d4:	4798      	blx	r3
 c01c5d6:	2000      	movs	r0, #0
 c01c5d8:	2100      	movs	r1, #0
 c01c5da:	0004      	movs	r4, r0
 c01c5dc:	000d      	movs	r5, r1
 c01c5de:	480d      	ldr	r0, [pc, #52]	; (c01c614 <_mainCRTStartup+0x6c>)
 c01c5e0:	2800      	cmp	r0, #0
 c01c5e2:	d002      	beq.n	c01c5ea <_mainCRTStartup+0x42>
 c01c5e4:	480c      	ldr	r0, [pc, #48]	; (c01c618 <_mainCRTStartup+0x70>)
 c01c5e6:	e000      	b.n	c01c5ea <_mainCRTStartup+0x42>
 c01c5e8:	bf00      	nop
 c01c5ea:	f7fb f985 	bl	c0178f8 <__libc_init_array>
 c01c5ee:	0020      	movs	r0, r4
 c01c5f0:	0029      	movs	r1, r5
 c01c5f2:	f016 fca9 	bl	c032f48 <main>
 c01c5f6:	f7fb f96b 	bl	c0178d0 <exit>
 c01c5fa:	bf00      	nop
 c01c5fc:	00080000 	.word	0x00080000
 c01c600:	30031000 	.word	0x30031000
	...
 c01c60c:	30035d30 	.word	0x30035d30
 c01c610:	3003c97c 	.word	0x3003c97c
	...

0c01c61c <aes_set_key>:
                       unsigned int keybits)
{
    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch (keybits) {
 c01c61c:	2ac0      	cmp	r2, #192	; 0xc0
{
 c01c61e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c01c620:	4604      	mov	r4, r0
    switch (keybits) {
 c01c622:	d056      	beq.n	c01c6d2 <aes_set_key+0xb6>
 c01c624:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 c01c628:	d02d      	beq.n	c01c686 <aes_set_key+0x6a>
 c01c62a:	2a80      	cmp	r2, #128	; 0x80
 c01c62c:	d003      	beq.n	c01c636 <aes_set_key+0x1a>
            SWAP_B8_TO_B32(ctx->aes_key[6],key,24);
            SWAP_B8_TO_B32(ctx->aes_key[7],key,28);
            break;

        default :
            return (MBEDTLS_ERR_AES_INVALID_KEY_LENGTH);
 c01c62e:	f06f 001f 	mvn.w	r0, #31

    /* allow multi-instance of CRYP use: save context for CRYP HW module CR */
    ctx->ctx_save_cr = ctx->hcryp_aes.Instance->CR;

    return (0);
}
 c01c632:	b003      	add	sp, #12
 c01c634:	bd30      	pop	{r4, r5, pc}
            ctx->hcryp_aes.Init.KeySize = CRYP_KEYSIZE_128B;;
 c01c636:	2300      	movs	r3, #0
 c01c638:	6283      	str	r3, [r0, #40]	; 0x28
 c01c63a:	680b      	ldr	r3, [r1, #0]
 c01c63c:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->aes_key[0],key,0);
 c01c63e:	6003      	str	r3, [r0, #0]
 c01c640:	684b      	ldr	r3, [r1, #4]
 c01c642:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->aes_key[1],key,4);
 c01c644:	6043      	str	r3, [r0, #4]
 c01c646:	688b      	ldr	r3, [r1, #8]
 c01c648:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->aes_key[2],key,8);
 c01c64a:	6083      	str	r3, [r0, #8]
 c01c64c:	68cb      	ldr	r3, [r1, #12]
 c01c64e:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->aes_key[3],key,12);
 c01c650:	60c3      	str	r3, [r0, #12]
    ctx->hcryp_aes.Init.DataType = CRYP_DATATYPE_8B;
 c01c652:	2304      	movs	r3, #4
 c01c654:	4a20      	ldr	r2, [pc, #128]	; (c01c6d8 <aes_set_key+0xbc>)
    ctx->hcryp_aes.Init.pKey = ctx->aes_key;
 c01c656:	62e4      	str	r4, [r4, #44]	; 0x2c
    ctx->hcryp_aes.Init.DataType = CRYP_DATATYPE_8B;
 c01c658:	e9c4 2308 	strd	r2, r3, [r4, #32]
    ctx->hcryp_aes.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 c01c65c:	2301      	movs	r3, #1
 c01c65e:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_RCC_AES_CLK_ENABLE();
 c01c660:	4b1e      	ldr	r3, [pc, #120]	; (c01c6dc <aes_set_key+0xc0>)
    if (HAL_CRYP_DeInit(&ctx->hcryp_aes) != HAL_OK) {
 c01c662:	f104 0520 	add.w	r5, r4, #32
    __HAL_RCC_AES_CLK_ENABLE();
 c01c666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    if (HAL_CRYP_DeInit(&ctx->hcryp_aes) != HAL_OK) {
 c01c668:	4628      	mov	r0, r5
    __HAL_RCC_AES_CLK_ENABLE();
 c01c66a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 c01c66e:	64da      	str	r2, [r3, #76]	; 0x4c
 c01c670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c01c672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c01c676:	9301      	str	r3, [sp, #4]
 c01c678:	9b01      	ldr	r3, [sp, #4]
    if (HAL_CRYP_DeInit(&ctx->hcryp_aes) != HAL_OK) {
 c01c67a:	f004 ffb5 	bl	c0215e8 <HAL_CRYP_DeInit>
 c01c67e:	b1f0      	cbz	r0, c01c6be <aes_set_key+0xa2>
        return (MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED);
 c01c680:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 c01c684:	e7d5      	b.n	c01c632 <aes_set_key+0x16>
            ctx->hcryp_aes.Init.KeySize = CRYP_KEYSIZE_256B;
 c01c686:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 c01c68a:	6283      	str	r3, [r0, #40]	; 0x28
 c01c68c:	680b      	ldr	r3, [r1, #0]
 c01c68e:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->aes_key[0],key,0);
 c01c690:	6003      	str	r3, [r0, #0]
 c01c692:	684b      	ldr	r3, [r1, #4]
 c01c694:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->aes_key[1],key,4);
 c01c696:	6043      	str	r3, [r0, #4]
 c01c698:	688b      	ldr	r3, [r1, #8]
 c01c69a:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->aes_key[2],key,8);
 c01c69c:	6083      	str	r3, [r0, #8]
 c01c69e:	68cb      	ldr	r3, [r1, #12]
 c01c6a0:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->aes_key[3],key,12);
 c01c6a2:	60c3      	str	r3, [r0, #12]
 c01c6a4:	690b      	ldr	r3, [r1, #16]
 c01c6a6:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->aes_key[4],key,16);
 c01c6a8:	6103      	str	r3, [r0, #16]
 c01c6aa:	694b      	ldr	r3, [r1, #20]
 c01c6ac:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->aes_key[5],key,20);
 c01c6ae:	6143      	str	r3, [r0, #20]
 c01c6b0:	698b      	ldr	r3, [r1, #24]
 c01c6b2:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->aes_key[6],key,24);
 c01c6b4:	6183      	str	r3, [r0, #24]
 c01c6b6:	69cb      	ldr	r3, [r1, #28]
 c01c6b8:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->aes_key[7],key,28);
 c01c6ba:	61c3      	str	r3, [r0, #28]
            break;
 c01c6bc:	e7c9      	b.n	c01c652 <aes_set_key+0x36>
    if (HAL_CRYP_Init(&ctx->hcryp_aes) != HAL_OK) {
 c01c6be:	4628      	mov	r0, r5
 c01c6c0:	f004 ff6e 	bl	c0215a0 <HAL_CRYP_Init>
 c01c6c4:	2800      	cmp	r0, #0
 c01c6c6:	d1db      	bne.n	c01c680 <aes_set_key+0x64>
    ctx->ctx_save_cr = ctx->hcryp_aes.Instance->CR;
 c01c6c8:	6a23      	ldr	r3, [r4, #32]
 c01c6ca:	681b      	ldr	r3, [r3, #0]
 c01c6cc:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    return (0);
 c01c6d0:	e7af      	b.n	c01c632 <aes_set_key+0x16>
            return (MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED);
 c01c6d2:	f06f 0071 	mvn.w	r0, #113	; 0x71
 c01c6d6:	e7ac      	b.n	c01c632 <aes_set_key+0x16>
 c01c6d8:	520c0000 	.word	0x520c0000
 c01c6dc:	50021000 	.word	0x50021000

0c01c6e0 <mbedtls_aes_init>:

void mbedtls_aes_init(mbedtls_aes_context *ctx)
{
    AES_VALIDATE( ctx != NULL );

    memset(ctx, 0, sizeof(mbedtls_aes_context));
 c01c6e0:	f44f 7298 	mov.w	r2, #304	; 0x130
 c01c6e4:	2100      	movs	r1, #0
 c01c6e6:	f7fb b96e 	b.w	c0179c6 <memset>

0c01c6ea <mbedtls_aes_free>:
}


void mbedtls_aes_free(mbedtls_aes_context *ctx)
{
    if (ctx == NULL) {
 c01c6ea:	b120      	cbz	r0, c01c6f6 <mbedtls_aes_free+0xc>
        *p++ = 0;
 c01c6ec:	2200      	movs	r2, #0
 c01c6ee:	f500 7398 	add.w	r3, r0, #304	; 0x130
    while (n--) {
 c01c6f2:	4298      	cmp	r0, r3
 c01c6f4:	d100      	bne.n	c01c6f8 <mbedtls_aes_free+0xe>
        return;
    }

    mbedtls_zeroize(ctx, sizeof(mbedtls_aes_context));
}
 c01c6f6:	4770      	bx	lr
        *p++ = 0;
 c01c6f8:	7002      	strb	r2, [r0, #0]
 c01c6fa:	3001      	adds	r0, #1
 c01c6fc:	e7f9      	b.n	c01c6f2 <mbedtls_aes_free+0x8>

0c01c6fe <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
int mbedtls_aes_setkey_enc(mbedtls_aes_context *ctx, const unsigned char *key,
                           unsigned int keybits)
{
    return (aes_set_key(ctx, key, keybits));
 c01c6fe:	f7ff bf8d 	b.w	c01c61c <aes_set_key>

0c01c702 <mbedtls_aes_setkey_dec>:
 c01c702:	f7ff bf8b 	b.w	c01c61c <aes_set_key>
	...

0c01c708 <mbedtls_aes_crypt_cbc>:
                          int mode,
                          size_t length,
                          unsigned char iv[16],
                          const unsigned char *input,
                          unsigned char *output)
{
 c01c708:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 c01c70c:	461d      	mov	r5, r3
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if (length % 16) {
 c01c70e:	0713      	lsls	r3, r2, #28
{
 c01c710:	4604      	mov	r4, r0
 c01c712:	4688      	mov	r8, r1
 c01c714:	4617      	mov	r7, r2
    if (length % 16) {
 c01c716:	f040 808f 	bne.w	c01c838 <mbedtls_aes_crypt_cbc+0x130>
    ctx->hcryp_aes.Instance->CR = ctx->ctx_save_cr;
 c01c71a:	6a03      	ldr	r3, [r0, #32]
 c01c71c:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
    if (HAL_CRYP_DeInit(&ctx->hcryp_aes) != HAL_OK) {
 c01c720:	f100 0620 	add.w	r6, r0, #32
    ctx->hcryp_aes.Instance->CR = ctx->ctx_save_cr;
 c01c724:	601a      	str	r2, [r3, #0]
    if (HAL_CRYP_DeInit(&ctx->hcryp_aes) != HAL_OK) {
 c01c726:	4630      	mov	r0, r6
 c01c728:	f004 ff5e 	bl	c0215e8 <HAL_CRYP_DeInit>
 c01c72c:	b120      	cbz	r0, c01c738 <mbedtls_aes_crypt_cbc+0x30>
        return (MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED);
 c01c72e:	f06f 006f 	mvn.w	r0, #111	; 0x6f
    /* Save the internal IV vector for multi context purpose */
    ctx->ctx_save_cr = ctx->hcryp_aes.Instance->CR; // save here before overwritten
    ctx->hcryp_aes.Instance->CR &= ~AES_CR_EN;

    return (0);
}
 c01c732:	b002      	add	sp, #8
 c01c734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (HAL_CRYP_Init(&ctx->hcryp_aes) != HAL_OK) {
 c01c738:	4630      	mov	r0, r6
 c01c73a:	f004 ff31 	bl	c0215a0 <HAL_CRYP_Init>
 c01c73e:	2800      	cmp	r0, #0
 c01c740:	d1f5      	bne.n	c01c72e <mbedtls_aes_crypt_cbc+0x26>
    if (CRYP_AES_CBC != ctx->hcryp_aes.Init.Algorithm)
 c01c742:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if (HAL_CRYP_SetConfig(&ctx->hcryp_aes, &ctx->hcryp_aes.Init) != HAL_OK) {
 c01c744:	f104 0124 	add.w	r1, r4, #36	; 0x24
    if (CRYP_AES_CBC != ctx->hcryp_aes.Init.Algorithm)
 c01c748:	2b20      	cmp	r3, #32
        ctx->hcryp_aes.Init.Algorithm  = CRYP_AES_CBC;
 c01c74a:	bf1c      	itt	ne
 c01c74c:	2320      	movne	r3, #32
 c01c74e:	6363      	strne	r3, [r4, #52]	; 0x34
 c01c750:	682a      	ldr	r2, [r5, #0]
    SWAP_B8_TO_B32(iv_32B[0],iv,0);
 c01c752:	4b3b      	ldr	r3, [pc, #236]	; (c01c840 <mbedtls_aes_crypt_cbc+0x138>)
 c01c754:	ba12      	rev	r2, r2
 c01c756:	601a      	str	r2, [r3, #0]
 c01c758:	686a      	ldr	r2, [r5, #4]
    if (HAL_CRYP_SetConfig(&ctx->hcryp_aes, &ctx->hcryp_aes.Init) != HAL_OK) {
 c01c75a:	4630      	mov	r0, r6
 c01c75c:	ba12      	rev	r2, r2
    SWAP_B8_TO_B32(iv_32B[1],iv,4);
 c01c75e:	605a      	str	r2, [r3, #4]
 c01c760:	68aa      	ldr	r2, [r5, #8]
 c01c762:	ba12      	rev	r2, r2
    SWAP_B8_TO_B32(iv_32B[2],iv,8);
 c01c764:	609a      	str	r2, [r3, #8]
 c01c766:	68ea      	ldr	r2, [r5, #12]
    ctx->hcryp_aes.Init.pInitVect = iv_32B;
 c01c768:	6323      	str	r3, [r4, #48]	; 0x30
 c01c76a:	ba12      	rev	r2, r2
    SWAP_B8_TO_B32(iv_32B[3],iv,12);
 c01c76c:	60da      	str	r2, [r3, #12]
    if (HAL_CRYP_SetConfig(&ctx->hcryp_aes, &ctx->hcryp_aes.Init) != HAL_OK) {
 c01c76e:	f004 fecf 	bl	c021510 <HAL_CRYP_SetConfig>
 c01c772:	2800      	cmp	r0, #0
 c01c774:	d1db      	bne.n	c01c72e <mbedtls_aes_crypt_cbc+0x26>
 c01c776:	23ff      	movs	r3, #255	; 0xff
 c01c778:	b2ba      	uxth	r2, r7
        if (HAL_CRYP_Decrypt(&ctx->hcryp_aes, (uint32_t *)input, length, (uint32_t *)output, ST_AES_TIMEOUT) != HAL_OK) {
 c01c77a:	9300      	str	r3, [sp, #0]
 c01c77c:	4630      	mov	r0, r6
 c01c77e:	e9dd 1308 	ldrd	r1, r3, [sp, #32]
    if (mode == MBEDTLS_AES_DECRYPT) {
 c01c782:	f1b8 0f00 	cmp.w	r8, #0
 c01c786:	d149      	bne.n	c01c81c <mbedtls_aes_crypt_cbc+0x114>
        if (HAL_CRYP_Decrypt(&ctx->hcryp_aes, (uint32_t *)input, length, (uint32_t *)output, ST_AES_TIMEOUT) != HAL_OK) {
 c01c788:	f005 f9f4 	bl	c021b74 <HAL_CRYP_Decrypt>
 c01c78c:	2800      	cmp	r0, #0
 c01c78e:	d1ce      	bne.n	c01c72e <mbedtls_aes_crypt_cbc+0x26>
        SWAP_B32_TO_B8(ctx->hcryp_aes.Instance->IVR3,iv,0);
 c01c790:	6a23      	ldr	r3, [r4, #32]
 c01c792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c01c794:	70eb      	strb	r3, [r5, #3]
 c01c796:	6a23      	ldr	r3, [r4, #32]
 c01c798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c01c79a:	0a1b      	lsrs	r3, r3, #8
 c01c79c:	70ab      	strb	r3, [r5, #2]
 c01c79e:	6a23      	ldr	r3, [r4, #32]
 c01c7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c01c7a2:	0c1b      	lsrs	r3, r3, #16
 c01c7a4:	706b      	strb	r3, [r5, #1]
 c01c7a6:	6a23      	ldr	r3, [r4, #32]
 c01c7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c01c7aa:	0e1b      	lsrs	r3, r3, #24
 c01c7ac:	702b      	strb	r3, [r5, #0]
        SWAP_B32_TO_B8(ctx->hcryp_aes.Instance->IVR2,iv,4);
 c01c7ae:	6a23      	ldr	r3, [r4, #32]
 c01c7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c01c7b2:	71eb      	strb	r3, [r5, #7]
 c01c7b4:	6a23      	ldr	r3, [r4, #32]
 c01c7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c01c7b8:	0a1b      	lsrs	r3, r3, #8
 c01c7ba:	71ab      	strb	r3, [r5, #6]
 c01c7bc:	6a23      	ldr	r3, [r4, #32]
 c01c7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c01c7c0:	0c1b      	lsrs	r3, r3, #16
 c01c7c2:	716b      	strb	r3, [r5, #5]
 c01c7c4:	6a23      	ldr	r3, [r4, #32]
 c01c7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c01c7c8:	0e1b      	lsrs	r3, r3, #24
 c01c7ca:	712b      	strb	r3, [r5, #4]
        SWAP_B32_TO_B8(ctx->hcryp_aes.Instance->IVR1,iv,8);
 c01c7cc:	6a23      	ldr	r3, [r4, #32]
 c01c7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c01c7d0:	72eb      	strb	r3, [r5, #11]
 c01c7d2:	6a23      	ldr	r3, [r4, #32]
 c01c7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c01c7d6:	0a1b      	lsrs	r3, r3, #8
 c01c7d8:	72ab      	strb	r3, [r5, #10]
 c01c7da:	6a23      	ldr	r3, [r4, #32]
 c01c7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c01c7de:	0c1b      	lsrs	r3, r3, #16
 c01c7e0:	726b      	strb	r3, [r5, #9]
 c01c7e2:	6a23      	ldr	r3, [r4, #32]
 c01c7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c01c7e6:	0e1b      	lsrs	r3, r3, #24
 c01c7e8:	722b      	strb	r3, [r5, #8]
        SWAP_B32_TO_B8(ctx->hcryp_aes.Instance->IVR0,iv,12);
 c01c7ea:	6a23      	ldr	r3, [r4, #32]
 c01c7ec:	6a1b      	ldr	r3, [r3, #32]
 c01c7ee:	73eb      	strb	r3, [r5, #15]
 c01c7f0:	6a23      	ldr	r3, [r4, #32]
 c01c7f2:	6a1b      	ldr	r3, [r3, #32]
 c01c7f4:	0a1b      	lsrs	r3, r3, #8
 c01c7f6:	73ab      	strb	r3, [r5, #14]
 c01c7f8:	6a23      	ldr	r3, [r4, #32]
 c01c7fa:	6a1b      	ldr	r3, [r3, #32]
 c01c7fc:	0c1b      	lsrs	r3, r3, #16
 c01c7fe:	736b      	strb	r3, [r5, #13]
 c01c800:	6a23      	ldr	r3, [r4, #32]
 c01c802:	6a1b      	ldr	r3, [r3, #32]
 c01c804:	0e1b      	lsrs	r3, r3, #24
 c01c806:	732b      	strb	r3, [r5, #12]
    ctx->ctx_save_cr = ctx->hcryp_aes.Instance->CR; // save here before overwritten
 c01c808:	6a23      	ldr	r3, [r4, #32]
    return (0);
 c01c80a:	2000      	movs	r0, #0
    ctx->ctx_save_cr = ctx->hcryp_aes.Instance->CR; // save here before overwritten
 c01c80c:	681a      	ldr	r2, [r3, #0]
 c01c80e:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
    ctx->hcryp_aes.Instance->CR &= ~AES_CR_EN;
 c01c812:	681a      	ldr	r2, [r3, #0]
 c01c814:	f022 0201 	bic.w	r2, r2, #1
 c01c818:	601a      	str	r2, [r3, #0]
    return (0);
 c01c81a:	e78a      	b.n	c01c732 <mbedtls_aes_crypt_cbc+0x2a>
        if (HAL_CRYP_Encrypt(&ctx->hcryp_aes, (uint32_t *)input, length, (uint32_t *)output, ST_AES_TIMEOUT) != HAL_OK) {
 c01c81c:	f005 f926 	bl	c021a6c <HAL_CRYP_Encrypt>
 c01c820:	2800      	cmp	r0, #0
 c01c822:	d184      	bne.n	c01c72e <mbedtls_aes_crypt_cbc+0x26>
        memcpy(iv, output, 16);
 c01c824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c01c826:	f103 0210 	add.w	r2, r3, #16
 c01c82a:	f853 1b04 	ldr.w	r1, [r3], #4
 c01c82e:	4293      	cmp	r3, r2
 c01c830:	f845 1b04 	str.w	r1, [r5], #4
 c01c834:	d1f9      	bne.n	c01c82a <mbedtls_aes_crypt_cbc+0x122>
 c01c836:	e7e7      	b.n	c01c808 <mbedtls_aes_crypt_cbc+0x100>
        return (MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH);
 c01c838:	f06f 0021 	mvn.w	r0, #33	; 0x21
 c01c83c:	e779      	b.n	c01c732 <mbedtls_aes_crypt_cbc+0x2a>
 c01c83e:	bf00      	nop
 c01c840:	30035d4c 	.word	0x30035d4c

0c01c844 <mbedtls_internal_aes_encrypt>:
int mbedtls_internal_aes_encrypt(mbedtls_aes_context *ctx,
                                 const unsigned char input[16],
                                 unsigned char output[16])
{

    if (HAL_CRYP_Encrypt(&ctx->hcryp_aes, (uint32_t *)input, 16, (uint32_t *)output, ST_AES_TIMEOUT) != HAL_OK) {
 c01c844:	23ff      	movs	r3, #255	; 0xff
{
 c01c846:	b507      	push	{r0, r1, r2, lr}
    if (HAL_CRYP_Encrypt(&ctx->hcryp_aes, (uint32_t *)input, 16, (uint32_t *)output, ST_AES_TIMEOUT) != HAL_OK) {
 c01c848:	3020      	adds	r0, #32
 c01c84a:	9300      	str	r3, [sp, #0]
 c01c84c:	4613      	mov	r3, r2
 c01c84e:	2210      	movs	r2, #16
 c01c850:	f005 f90c 	bl	c021a6c <HAL_CRYP_Encrypt>
 c01c854:	2800      	cmp	r0, #0
        return (MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED);
    }
    return (0);

}
 c01c856:	bf14      	ite	ne
 c01c858:	f06f 006f 	mvnne.w	r0, #111	; 0x6f
 c01c85c:	2000      	moveq	r0, #0
 c01c85e:	b003      	add	sp, #12
 c01c860:	f85d fb04 	ldr.w	pc, [sp], #4

0c01c864 <mbedtls_internal_aes_decrypt>:

int mbedtls_internal_aes_decrypt(mbedtls_aes_context *ctx,
                                 const unsigned char input[16],
                                 unsigned char output[16])
{
    if (HAL_CRYP_Decrypt(&ctx->hcryp_aes, (uint32_t *)input, 16, (uint32_t *)output, ST_AES_TIMEOUT) != HAL_OK) {
 c01c864:	23ff      	movs	r3, #255	; 0xff
{
 c01c866:	b507      	push	{r0, r1, r2, lr}
    if (HAL_CRYP_Decrypt(&ctx->hcryp_aes, (uint32_t *)input, 16, (uint32_t *)output, ST_AES_TIMEOUT) != HAL_OK) {
 c01c868:	3020      	adds	r0, #32
 c01c86a:	9300      	str	r3, [sp, #0]
 c01c86c:	4613      	mov	r3, r2
 c01c86e:	2210      	movs	r2, #16
 c01c870:	f005 f980 	bl	c021b74 <HAL_CRYP_Decrypt>
 c01c874:	2800      	cmp	r0, #0
        return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
    }
    return (0);
}
 c01c876:	bf14      	ite	ne
 c01c878:	f06f 006f 	mvnne.w	r0, #111	; 0x6f
 c01c87c:	2000      	moveq	r0, #0
 c01c87e:	b003      	add	sp, #12
 c01c880:	f85d fb04 	ldr.w	pc, [sp], #4

0c01c884 <mbedtls_aes_crypt_ecb>:
{
 c01c884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c01c886:	4615      	mov	r5, r2
 c01c888:	461e      	mov	r6, r3
    ctx->hcryp_aes.Instance->CR = ctx->ctx_save_cr;
 c01c88a:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
 c01c88e:	6a03      	ldr	r3, [r0, #32]
{
 c01c890:	4604      	mov	r4, r0
    ctx->hcryp_aes.Instance->CR = ctx->ctx_save_cr;
 c01c892:	601a      	str	r2, [r3, #0]
    if (CRYP_AES_ECB != ctx->hcryp_aes.Init.Algorithm)
 c01c894:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 c01c896:	460f      	mov	r7, r1
    if (CRYP_AES_ECB != ctx->hcryp_aes.Init.Algorithm)
 c01c898:	b933      	cbnz	r3, c01c8a8 <mbedtls_aes_crypt_ecb+0x24>
    if (mode == MBEDTLS_AES_DECRYPT) { /* AES decryption */
 c01c89a:	b18f      	cbz	r7, c01c8c0 <mbedtls_aes_crypt_ecb+0x3c>
        ret = mbedtls_internal_aes_encrypt(ctx, input, output);
 c01c89c:	4632      	mov	r2, r6
 c01c89e:	4629      	mov	r1, r5
 c01c8a0:	4620      	mov	r0, r4
 c01c8a2:	f7ff ffcf 	bl	c01c844 <mbedtls_internal_aes_encrypt>
 c01c8a6:	e010      	b.n	c01c8ca <mbedtls_aes_crypt_ecb+0x46>
        ctx->hcryp_aes.Init.Algorithm  = CRYP_AES_ECB;
 c01c8a8:	2300      	movs	r3, #0
        if (HAL_CRYP_SetConfig(&ctx->hcryp_aes, &ctx->hcryp_aes.Init) != HAL_OK)
 c01c8aa:	f100 0124 	add.w	r1, r0, #36	; 0x24
        ctx->hcryp_aes.Init.Algorithm  = CRYP_AES_ECB;
 c01c8ae:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_CRYP_SetConfig(&ctx->hcryp_aes, &ctx->hcryp_aes.Init) != HAL_OK)
 c01c8b0:	3020      	adds	r0, #32
 c01c8b2:	f004 fe2d 	bl	c021510 <HAL_CRYP_SetConfig>
 c01c8b6:	2800      	cmp	r0, #0
 c01c8b8:	d0ef      	beq.n	c01c89a <mbedtls_aes_crypt_ecb+0x16>
            return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 c01c8ba:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 c01c8be:	e00a      	b.n	c01c8d6 <mbedtls_aes_crypt_ecb+0x52>
        ret = mbedtls_internal_aes_decrypt(ctx, input, output);
 c01c8c0:	4632      	mov	r2, r6
 c01c8c2:	4629      	mov	r1, r5
 c01c8c4:	4620      	mov	r0, r4
 c01c8c6:	f7ff ffcd 	bl	c01c864 <mbedtls_internal_aes_decrypt>
        if( ret != 0 )
 c01c8ca:	b920      	cbnz	r0, c01c8d6 <mbedtls_aes_crypt_ecb+0x52>
    return (0);
 c01c8cc:	2000      	movs	r0, #0
    ctx->ctx_save_cr = ctx->hcryp_aes.Instance->CR;
 c01c8ce:	6a23      	ldr	r3, [r4, #32]
 c01c8d0:	681b      	ldr	r3, [r3, #0]
 c01c8d2:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
}
 c01c8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0c01c8d8 <mbedtls_aes_crypt_cfb128>:
{
 c01c8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c01c8dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 c01c8de:	4682      	mov	sl, r0
 c01c8e0:	e9dd 5708 	ldrd	r5, r7, [sp, #32]
 c01c8e4:	4698      	mov	r8, r3
    n = *iv_off;
 c01c8e6:	681c      	ldr	r4, [r3, #0]
 c01c8e8:	eb06 0902 	add.w	r9, r6, r2
    if (mode == MBEDTLS_AES_DECRYPT) {
 c01c8ec:	b1c1      	cbz	r1, c01c920 <mbedtls_aes_crypt_cfb128+0x48>
        while (length--) {
 c01c8ee:	454e      	cmp	r6, r9
 c01c8f0:	d018      	beq.n	c01c924 <mbedtls_aes_crypt_cfb128+0x4c>
            if (n == 0) {
 c01c8f2:	b32c      	cbz	r4, c01c940 <mbedtls_aes_crypt_cfb128+0x68>
            iv[n] = *output++ = (unsigned char)(iv[n] ^ *input++);
 c01c8f4:	5d2b      	ldrb	r3, [r5, r4]
 c01c8f6:	f817 2b01 	ldrb.w	r2, [r7], #1
 c01c8fa:	4053      	eors	r3, r2
 c01c8fc:	f806 3b01 	strb.w	r3, [r6], #1
 c01c900:	552b      	strb	r3, [r5, r4]
            n = (n + 1) & 0x0F;
 c01c902:	3401      	adds	r4, #1
 c01c904:	f004 040f 	and.w	r4, r4, #15
 c01c908:	e7f1      	b.n	c01c8ee <mbedtls_aes_crypt_cfb128+0x16>
            if (n == 0) {
 c01c90a:	b17c      	cbz	r4, c01c92c <mbedtls_aes_crypt_cfb128+0x54>
            *output++ = (unsigned char)(c ^ iv[n]);
 c01c90c:	5d2b      	ldrb	r3, [r5, r4]
            c = *input++;
 c01c90e:	f817 2b01 	ldrb.w	r2, [r7], #1
            *output++ = (unsigned char)(c ^ iv[n]);
 c01c912:	4053      	eors	r3, r2
 c01c914:	f806 3b01 	strb.w	r3, [r6], #1
            iv[n] = (unsigned char) c;
 c01c918:	552a      	strb	r2, [r5, r4]
            n = (n + 1) & 0x0F;
 c01c91a:	3401      	adds	r4, #1
 c01c91c:	f004 040f 	and.w	r4, r4, #15
        while (length--) {
 c01c920:	454e      	cmp	r6, r9
 c01c922:	d1f2      	bne.n	c01c90a <mbedtls_aes_crypt_cfb128+0x32>
    *iv_off = n;
 c01c924:	f8c8 4000 	str.w	r4, [r8]
    return (0);
 c01c928:	2000      	movs	r0, #0
 c01c92a:	e007      	b.n	c01c93c <mbedtls_aes_crypt_cfb128+0x64>
                ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, iv, iv);
 c01c92c:	462b      	mov	r3, r5
 c01c92e:	462a      	mov	r2, r5
 c01c930:	2101      	movs	r1, #1
 c01c932:	4650      	mov	r0, sl
 c01c934:	f7ff ffa6 	bl	c01c884 <mbedtls_aes_crypt_ecb>
                if (ret != 0)
 c01c938:	2800      	cmp	r0, #0
 c01c93a:	d0e7      	beq.n	c01c90c <mbedtls_aes_crypt_cfb128+0x34>
}
 c01c93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                ret = mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, iv, iv);
 c01c940:	462b      	mov	r3, r5
 c01c942:	462a      	mov	r2, r5
 c01c944:	2101      	movs	r1, #1
 c01c946:	4650      	mov	r0, sl
 c01c948:	f7ff ff9c 	bl	c01c884 <mbedtls_aes_crypt_ecb>
                if (ret != 0)
 c01c94c:	2800      	cmp	r0, #0
 c01c94e:	d0d1      	beq.n	c01c8f4 <mbedtls_aes_crypt_cfb128+0x1c>
 c01c950:	e7f4      	b.n	c01c93c <mbedtls_aes_crypt_cfb128+0x64>

0c01c952 <mbedtls_aes_crypt_ofb>:
{
 c01c952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    n = *iv_off;
 c01c956:	6814      	ldr	r4, [r2, #0]
{
 c01c958:	4682      	mov	sl, r0
 c01c95a:	e9dd 9508 	ldrd	r9, r5, [sp, #32]
    if( n > 15 )
 c01c95e:	2c0f      	cmp	r4, #15
{
 c01c960:	4690      	mov	r8, r2
 c01c962:	461f      	mov	r7, r3
    if( n > 15 )
 c01c964:	d81b      	bhi.n	c01c99e <mbedtls_aes_crypt_ofb+0x4c>
 c01c966:	186e      	adds	r6, r5, r1
    while( length-- )
 c01c968:	42b5      	cmp	r5, r6
 c01c96a:	d103      	bne.n	c01c974 <mbedtls_aes_crypt_ofb+0x22>
    *iv_off = n;
 c01c96c:	f8c8 4000 	str.w	r4, [r8]
 c01c970:	2000      	movs	r0, #0
 c01c972:	e012      	b.n	c01c99a <mbedtls_aes_crypt_ofb+0x48>
        if( n == 0 )
 c01c974:	b14c      	cbz	r4, c01c98a <mbedtls_aes_crypt_ofb+0x38>
        *output++ =  *input++ ^ iv[n];
 c01c976:	5d3b      	ldrb	r3, [r7, r4]
 c01c978:	f819 2b01 	ldrb.w	r2, [r9], #1
        n = ( n + 1 ) & 0x0F;
 c01c97c:	3401      	adds	r4, #1
        *output++ =  *input++ ^ iv[n];
 c01c97e:	4053      	eors	r3, r2
 c01c980:	f805 3b01 	strb.w	r3, [r5], #1
        n = ( n + 1 ) & 0x0F;
 c01c984:	f004 040f 	and.w	r4, r4, #15
 c01c988:	e7ee      	b.n	c01c968 <mbedtls_aes_crypt_ofb+0x16>
            ret = mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 c01c98a:	463b      	mov	r3, r7
 c01c98c:	463a      	mov	r2, r7
 c01c98e:	2101      	movs	r1, #1
 c01c990:	4650      	mov	r0, sl
 c01c992:	f7ff ff77 	bl	c01c884 <mbedtls_aes_crypt_ecb>
            if( ret != 0 )
 c01c996:	2800      	cmp	r0, #0
 c01c998:	d0ed      	beq.n	c01c976 <mbedtls_aes_crypt_ofb+0x24>
}
 c01c99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );
 c01c99e:	f06f 0020 	mvn.w	r0, #32
 c01c9a2:	e7fa      	b.n	c01c99a <mbedtls_aes_crypt_ofb+0x48>

0c01c9a4 <mbedtls_aes_crypt_ctr>:
{
 c01c9a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01c9a8:	4683      	mov	fp, r0
 c01c9aa:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 c01c9ae:	4617      	mov	r7, r2
 c01c9b0:	461e      	mov	r6, r3
 c01c9b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    n = *nc_off;
 c01c9b4:	6814      	ldr	r4, [r2, #0]
 c01c9b6:	eb05 0a01 	add.w	sl, r5, r1
    while (length--) {
 c01c9ba:	4555      	cmp	r5, sl
 c01c9bc:	d103      	bne.n	c01c9c6 <mbedtls_aes_crypt_ctr+0x22>
    return (0);
 c01c9be:	2000      	movs	r0, #0
    *nc_off = n;
 c01c9c0:	603c      	str	r4, [r7, #0]
}
 c01c9c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (n == 0) {
 c01c9c6:	b984      	cbnz	r4, c01c9ea <mbedtls_aes_crypt_ctr+0x46>
            if (mbedtls_aes_crypt_ecb(ctx, MBEDTLS_AES_ENCRYPT, nonce_counter, stream_block) != 0) {
 c01c9c8:	4643      	mov	r3, r8
 c01c9ca:	4632      	mov	r2, r6
 c01c9cc:	2101      	movs	r1, #1
 c01c9ce:	4658      	mov	r0, fp
 c01c9d0:	f7ff ff58 	bl	c01c884 <mbedtls_aes_crypt_ecb>
 c01c9d4:	b9a0      	cbnz	r0, c01ca00 <mbedtls_aes_crypt_ctr+0x5c>
 c01c9d6:	f106 0210 	add.w	r2, r6, #16
                if (++nonce_counter[i - 1] != 0) {
 c01c9da:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 c01c9de:	3301      	adds	r3, #1
 c01c9e0:	b2db      	uxtb	r3, r3
 c01c9e2:	7013      	strb	r3, [r2, #0]
 c01c9e4:	b90b      	cbnz	r3, c01c9ea <mbedtls_aes_crypt_ctr+0x46>
            for (i = 16; i > 0; i--)
 c01c9e6:	4296      	cmp	r6, r2
 c01c9e8:	d1f7      	bne.n	c01c9da <mbedtls_aes_crypt_ctr+0x36>
        *output++ = (unsigned char)(c ^ stream_block[n]);
 c01c9ea:	f818 3004 	ldrb.w	r3, [r8, r4]
 c01c9ee:	f819 2b01 	ldrb.w	r2, [r9], #1
        n = (n + 1) & 0x0F;
 c01c9f2:	3401      	adds	r4, #1
        *output++ = (unsigned char)(c ^ stream_block[n]);
 c01c9f4:	4053      	eors	r3, r2
 c01c9f6:	f805 3b01 	strb.w	r3, [r5], #1
        n = (n + 1) & 0x0F;
 c01c9fa:	f004 040f 	and.w	r4, r4, #15
 c01c9fe:	e7dc      	b.n	c01c9ba <mbedtls_aes_crypt_ctr+0x16>
                return (MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED);
 c01ca00:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 c01ca04:	e7dd      	b.n	c01c9c2 <mbedtls_aes_crypt_ctr+0x1e>

0c01ca06 <tfm_attest_hal_get_security_lifecycle>:
static const char attestation_profile_definition[] = "psa-tfm-profile-1.md";

enum tfm_security_lifecycle_t tfm_attest_hal_get_security_lifecycle(void)
{
    return TFM_SLC_UNKNOWN;
}
 c01ca06:	2000      	movs	r0, #0
 c01ca08:	4770      	bx	lr
	...

0c01ca0c <ccm_auth_crypt>:
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
                           const unsigned char *iv, size_t iv_len,
                           const unsigned char *add, size_t add_len,
                           const unsigned char *input, unsigned char *output,
                           unsigned char *tag, size_t tag_len )
{
 c01ca0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01ca10:	b095      	sub	sp, #84	; 0x54
 c01ca12:	9e24      	ldr	r6, [sp, #144]	; 0x90
 c01ca14:	469b      	mov	fp, r3
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */

    /* tag_len, aka t, is an element of {4, 6, 8, 10, 12, 14, 16} */
    if( tag_len < 4 || tag_len > 16 || tag_len % 2 != 0 )
 c01ca16:	1f33      	subs	r3, r6, #4
 c01ca18:	2b0c      	cmp	r3, #12
{
 c01ca1a:	4605      	mov	r5, r0
 c01ca1c:	9104      	str	r1, [sp, #16]
 c01ca1e:	4690      	mov	r8, r2
 c01ca20:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 c01ca24:	9c20      	ldr	r4, [sp, #128]	; 0x80
    if( tag_len < 4 || tag_len > 16 || tag_len % 2 != 0 )
 c01ca26:	d905      	bls.n	c01ca34 <ccm_auth_crypt+0x28>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 c01ca28:	f06f 070c 	mvn.w	r7, #12
        mbedtls_free( b1_padded_addr );

exit:

    return( ret );
}
 c01ca2c:	4638      	mov	r0, r7
 c01ca2e:	b015      	add	sp, #84	; 0x54
 c01ca30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( tag_len < 4 || tag_len > 16 || tag_len % 2 != 0 )
 c01ca34:	f016 0101 	ands.w	r1, r6, #1
 c01ca38:	d1f6      	bne.n	c01ca28 <ccm_auth_crypt+0x1c>
    if( iv_len < 7 || iv_len > 13 )
 c01ca3a:	f1a9 0307 	sub.w	r3, r9, #7
 c01ca3e:	2b06      	cmp	r3, #6
 c01ca40:	d8f2      	bhi.n	c01ca28 <ccm_auth_crypt+0x1c>
    if( add_len > 0xFF00 )
 c01ca42:	f5b4 4f7f 	cmp.w	r4, #65280	; 0xff00
 c01ca46:	d8ef      	bhi.n	c01ca28 <ccm_auth_crypt+0x1c>
    memset( b0, 0, 16 );
 c01ca48:	f10d 0a20 	add.w	sl, sp, #32
 c01ca4c:	2210      	movs	r2, #16
 c01ca4e:	4650      	mov	r0, sl
    q = 15 - (unsigned char) iv_len;
 c01ca50:	fa5f f789 	uxtb.w	r7, r9
    memset( b0, 0, 16 );
 c01ca54:	f7fa ffb7 	bl	c0179c6 <memset>
    if( add_len > 0 ) b0[0] |= 0x40;
 c01ca58:	b114      	cbz	r4, c01ca60 <ccm_auth_crypt+0x54>
 c01ca5a:	2340      	movs	r3, #64	; 0x40
 c01ca5c:	f88d 3020 	strb.w	r3, [sp, #32]
    b0[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 c01ca60:	1eb3      	subs	r3, r6, #2
 c01ca62:	085a      	lsrs	r2, r3, #1
 c01ca64:	f89d 3020 	ldrb.w	r3, [sp, #32]
    b0[0] |= q - 1;
 c01ca68:	f1c7 070e 	rsb	r7, r7, #14
 c01ca6c:	b2ff      	uxtb	r7, r7
    b0[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 c01ca6e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    b0[0] |= q - 1;
 c01ca72:	433b      	orrs	r3, r7
    memcpy( b0 + 1, iv, iv_len );
 c01ca74:	464a      	mov	r2, r9
 c01ca76:	4659      	mov	r1, fp
 c01ca78:	f10d 0021 	add.w	r0, sp, #33	; 0x21
    b0[0] |= q - 1;
 c01ca7c:	f88d 3020 	strb.w	r3, [sp, #32]
    memcpy( b0 + 1, iv, iv_len );
 c01ca80:	f7fa ff7d 	bl	c01797e <memcpy>
 c01ca84:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 c01ca88:	aa0c      	add	r2, sp, #48	; 0x30
 c01ca8a:	1bdf      	subs	r7, r3, r7
 c01ca8c:	4693      	mov	fp, r2
    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 c01ca8e:	4643      	mov	r3, r8
        b0[15-i] = (unsigned char)( len_left & 0xFF );
 c01ca90:	f802 3d01 	strb.w	r3, [r2, #-1]!
    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 c01ca94:	4297      	cmp	r7, r2
 c01ca96:	ea4f 2313 	mov.w	r3, r3, lsr #8
 c01ca9a:	d1f9      	bne.n	c01ca90 <ccm_auth_crypt+0x84>
    if( len_left > 0 )
 c01ca9c:	2b00      	cmp	r3, #0
 c01ca9e:	d1c3      	bne.n	c01ca28 <ccm_auth_crypt+0x1c>
    __HAL_RCC_AES_CLK_DISABLE();
 c01caa0:	4a4a      	ldr	r2, [pc, #296]	; (c01cbcc <ccm_auth_crypt+0x1c0>)
    HAL_CRYP_DeInit( &ctx->hcryp_ccm );
 c01caa2:	f105 0720 	add.w	r7, r5, #32
    __HAL_RCC_AES_CLK_DISABLE();
 c01caa6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    HAL_CRYP_DeInit( &ctx->hcryp_ccm );
 c01caa8:	4638      	mov	r0, r7
    __HAL_RCC_AES_CLK_DISABLE();
 c01caaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c01caae:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_CRYP_DeInit( &ctx->hcryp_ccm );
 c01cab0:	f004 fd9a 	bl	c0215e8 <HAL_CRYP_DeInit>
    ctx->hcryp_ccm.Instance->CR = ctx->ctx_save_cr;
 c01cab4:	6a2b      	ldr	r3, [r5, #32]
 c01cab6:	f8d5 212c 	ldr.w	r2, [r5, #300]	; 0x12c
 c01caba:	601a      	str	r2, [r3, #0]
    if( add_len > 0 )
 c01cabc:	2c00      	cmp	r4, #0
 c01cabe:	d054      	beq.n	c01cb6a <ccm_auth_crypt+0x15e>
        b1_padding = ((add_len + H_LENGTH) % 4);
 c01cac0:	b2e2      	uxtb	r2, r4
 c01cac2:	1c91      	adds	r1, r2, #2
        b1_length = add_len + H_LENGTH + b1_padding;
 c01cac4:	f001 0103 	and.w	r1, r1, #3
 c01cac8:	4421      	add	r1, r4
 c01caca:	1c8b      	adds	r3, r1, #2
        b1_padded_addr =
 c01cacc:	2001      	movs	r0, #1
 c01cace:	3105      	adds	r1, #5
        b1_padding = ((add_len + H_LENGTH) % 4);
 c01cad0:	9205      	str	r2, [sp, #20]
        b1_length = add_len + H_LENGTH + b1_padding;
 c01cad2:	9303      	str	r3, [sp, #12]
        b1_padded_addr =
 c01cad4:	f00d fbce 	bl	c02a274 <mbedtls_calloc>
        if( b1_padded_addr == NULL )
 c01cad8:	4681      	mov	r9, r0
 c01cada:	2800      	cmp	r0, #0
 c01cadc:	d073      	beq.n	c01cbc6 <ccm_auth_crypt+0x1ba>
        b1_aligned_addr[1] = (unsigned char)( ( add_len      ) & 0xFF );
 c01cade:	9a05      	ldr	r2, [sp, #20]
            (unsigned char*) ((uint32_t)(b1_padded_addr + 3) & 0xFFFFFFFC);
 c01cae0:	1cc3      	adds	r3, r0, #3
 c01cae2:	f023 0303 	bic.w	r3, r3, #3
        b1_aligned_addr[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
 c01cae6:	0a21      	lsrs	r1, r4, #8
 c01cae8:	7019      	strb	r1, [r3, #0]
        b1_aligned_addr[1] = (unsigned char)( ( add_len      ) & 0xFF );
 c01caea:	705a      	strb	r2, [r3, #1]
        memcpy( b1_aligned_addr + H_LENGTH, add, add_len );
 c01caec:	1c98      	adds	r0, r3, #2
 c01caee:	4622      	mov	r2, r4
 c01caf0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 c01caf2:	9305      	str	r3, [sp, #20]
 c01caf4:	f7fa ff43 	bl	c01797e <memcpy>
        ctx->hcryp_ccm.Init.Header     = (uint32_t *)b1_aligned_addr;
 c01caf8:	9b05      	ldr	r3, [sp, #20]
 c01cafa:	63ab      	str	r3, [r5, #56]	; 0x38
        ctx->hcryp_ccm.Init.HeaderSize = b1_length/4;
 c01cafc:	9b03      	ldr	r3, [sp, #12]
 c01cafe:	089b      	lsrs	r3, r3, #2
 c01cb00:	63eb      	str	r3, [r5, #60]	; 0x3c
    unsigned char *b1_padded_addr = NULL;            /* Formatting of B1   */
 c01cb02:	2200      	movs	r2, #0
 c01cb04:	eb0a 0102 	add.w	r1, sl, r2
        GET_UINT32_BE( b0_32B[j], b0, 4*j );
 c01cb08:	f81a 0002 	ldrb.w	r0, [sl, r2]
 c01cb0c:	78cb      	ldrb	r3, [r1, #3]
 c01cb0e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 c01cb12:	7848      	ldrb	r0, [r1, #1]
 c01cb14:	7889      	ldrb	r1, [r1, #2]
 c01cb16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 c01cb1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 c01cb1e:	f84b 3002 	str.w	r3, [fp, r2]
 c01cb22:	3204      	adds	r2, #4
    for( j=0; j < 4; j++ )
 c01cb24:	2a10      	cmp	r2, #16
 c01cb26:	d1ed      	bne.n	c01cb04 <ccm_auth_crypt+0xf8>
    __HAL_RCC_AES_CLK_ENABLE();
 c01cb28:	4b28      	ldr	r3, [pc, #160]	; (c01cbcc <ccm_auth_crypt+0x1c0>)
    ctx->hcryp_ccm.Init.B0         = b0_32B;
 c01cb2a:	f8c5 b040 	str.w	fp, [r5, #64]	; 0x40
    __HAL_RCC_AES_CLK_ENABLE();
 c01cb2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    if ( HAL_CRYP_Init( &ctx->hcryp_ccm ) != HAL_OK )
 c01cb30:	4638      	mov	r0, r7
    __HAL_RCC_AES_CLK_ENABLE();
 c01cb32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 c01cb36:	64da      	str	r2, [r3, #76]	; 0x4c
 c01cb38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01cb3a:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 c01cb3e:	9207      	str	r2, [sp, #28]
 c01cb40:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_AES_FORCE_RESET();
 c01cb42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c01cb44:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 c01cb48:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_AES_RELEASE_RESET();
 c01cb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c01cb4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 c01cb50:	62da      	str	r2, [r3, #44]	; 0x2c
    if ( HAL_CRYP_Init( &ctx->hcryp_ccm ) != HAL_OK )
 c01cb52:	f004 fd25 	bl	c0215a0 <HAL_CRYP_Init>
 c01cb56:	b160      	cbz	r0, c01cb72 <ccm_auth_crypt+0x166>
        ret = MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 c01cb58:	f06f 076f 	mvn.w	r7, #111	; 0x6f
    if( add_len > 0 )
 c01cb5c:	2c00      	cmp	r4, #0
 c01cb5e:	f43f af65 	beq.w	c01ca2c <ccm_auth_crypt+0x20>
        mbedtls_free( b1_padded_addr );
 c01cb62:	4648      	mov	r0, r9
 c01cb64:	f00d fb8c 	bl	c02a280 <mbedtls_free>
 c01cb68:	e760      	b.n	c01ca2c <ccm_auth_crypt+0x20>
       ctx->hcryp_ccm.Init.HeaderSize = 0;
 c01cb6a:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
    unsigned char *b1_padded_addr = NULL;            /* Formatting of B1   */
 c01cb6e:	46a1      	mov	r9, r4
 c01cb70:	e7c7      	b.n	c01cb02 <ccm_auth_crypt+0xf6>
    if( mode == CCM_DECRYPT )
 c01cb72:	9b04      	ldr	r3, [sp, #16]
 c01cb74:	fa1f f288 	uxth.w	r2, r8
 c01cb78:	2b01      	cmp	r3, #1
 c01cb7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
         if ( HAL_CRYP_Decrypt( &ctx->hcryp_ccm,
 c01cb7e:	4638      	mov	r0, r7
 c01cb80:	9300      	str	r3, [sp, #0]
 c01cb82:	e9dd 1321 	ldrd	r1, r3, [sp, #132]	; 0x84
    if( mode == CCM_DECRYPT )
 c01cb86:	d11b      	bne.n	c01cbc0 <ccm_auth_crypt+0x1b4>
         if ( HAL_CRYP_Decrypt( &ctx->hcryp_ccm,
 c01cb88:	f004 fff4 	bl	c021b74 <HAL_CRYP_Decrypt>
         if ( HAL_CRYP_Encrypt( &ctx->hcryp_ccm,
 c01cb8c:	2800      	cmp	r0, #0
 c01cb8e:	d1e3      	bne.n	c01cb58 <ccm_auth_crypt+0x14c>
    memset(mac, 0, sizeof(mac));
 c01cb90:	2210      	movs	r2, #16
 c01cb92:	2100      	movs	r1, #0
 c01cb94:	a810      	add	r0, sp, #64	; 0x40
 c01cb96:	f7fa ff16 	bl	c0179c6 <memset>
    if ( HAL_CRYPEx_AESCCM_GenerateAuthTAG( &ctx->hcryp_ccm,
 c01cb9a:	4638      	mov	r0, r7
 c01cb9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 c01cba0:	a910      	add	r1, sp, #64	; 0x40
 c01cba2:	f005 f92b 	bl	c021dfc <HAL_CRYPEx_AESCCM_GenerateAuthTAG>
 c01cba6:	4607      	mov	r7, r0
 c01cba8:	2800      	cmp	r0, #0
 c01cbaa:	d1d5      	bne.n	c01cb58 <ccm_auth_crypt+0x14c>
    memcpy( tag, mac, tag_len );
 c01cbac:	4632      	mov	r2, r6
 c01cbae:	a910      	add	r1, sp, #64	; 0x40
 c01cbb0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 c01cbb2:	f7fa fee4 	bl	c01797e <memcpy>
    ctx->ctx_save_cr = ctx->hcryp_ccm.Instance->CR;
 c01cbb6:	6a2b      	ldr	r3, [r5, #32]
 c01cbb8:	681b      	ldr	r3, [r3, #0]
 c01cbba:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
 c01cbbe:	e7cd      	b.n	c01cb5c <ccm_auth_crypt+0x150>
         if ( HAL_CRYP_Encrypt( &ctx->hcryp_ccm,
 c01cbc0:	f004 ff54 	bl	c021a6c <HAL_CRYP_Encrypt>
 c01cbc4:	e7e2      	b.n	c01cb8c <ccm_auth_crypt+0x180>
            ret = MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 c01cbc6:	f06f 076f 	mvn.w	r7, #111	; 0x6f
 c01cbca:	e72f      	b.n	c01ca2c <ccm_auth_crypt+0x20>
 c01cbcc:	50021000 	.word	0x50021000

0c01cbd0 <mbedtls_ccm_init>:
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
 c01cbd0:	f44f 7198 	mov.w	r1, #304	; 0x130
 c01cbd4:	f00d bb64 	b.w	c02a2a0 <mbedtls_platform_zeroize>

0c01cbd8 <mbedtls_ccm_setkey>:
    switch (keybits)
 c01cbd8:	2bc0      	cmp	r3, #192	; 0xc0
{
 c01cbda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c01cbdc:	4604      	mov	r4, r0
    switch (keybits)
 c01cbde:	d048      	beq.n	c01cc72 <mbedtls_ccm_setkey+0x9a>
 c01cbe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c01cbe4:	d030      	beq.n	c01cc48 <mbedtls_ccm_setkey+0x70>
 c01cbe6:	2b80      	cmp	r3, #128	; 0x80
 c01cbe8:	d003      	beq.n	c01cbf2 <mbedtls_ccm_setkey+0x1a>
            ret = MBEDTLS_ERR_CCM_BAD_INPUT;
 c01cbea:	f06f 000c 	mvn.w	r0, #12
}
 c01cbee:	b003      	add	sp, #12
 c01cbf0:	bd30      	pop	{r4, r5, pc}
            ctx->hcryp_ccm.Init.KeySize = CRYP_KEYSIZE_128B;;
 c01cbf2:	2100      	movs	r1, #0
    for( i=0; i < (keybits/32) ; i++ )
 c01cbf4:	2000      	movs	r0, #0
            ctx->hcryp_ccm.Init.KeySize = CRYP_KEYSIZE_128B;;
 c01cbf6:	62a1      	str	r1, [r4, #40]	; 0x28
    for( i=0; i < (keybits/32) ; i++ )
 c01cbf8:	095b      	lsrs	r3, r3, #5
 c01cbfa:	4283      	cmp	r3, r0
 c01cbfc:	f102 0204 	add.w	r2, r2, #4
 c01cc00:	d125      	bne.n	c01cc4e <mbedtls_ccm_setkey+0x76>
    ctx->hcryp_ccm.Init.DataType = CRYP_DATATYPE_8B;
 c01cc02:	2304      	movs	r3, #4
 c01cc04:	4a1e      	ldr	r2, [pc, #120]	; (c01cc80 <mbedtls_ccm_setkey+0xa8>)
    ctx->hcryp_ccm.Init.pKey = ctx->ccm_key;
 c01cc06:	62e4      	str	r4, [r4, #44]	; 0x2c
    ctx->hcryp_ccm.Init.DataType = CRYP_DATATYPE_8B;
 c01cc08:	e9c4 2308 	strd	r2, r3, [r4, #32]
    ctx->hcryp_ccm.Init.Algorithm  = CRYP_AES_CCM;
 c01cc0c:	2300      	movs	r3, #0
 c01cc0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ctx->hcryp_ccm.Init.HeaderSize = 0;
 c01cc12:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
    ctx->hcryp_ccm.Init.Algorithm  = CRYP_AES_CCM;
 c01cc16:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
    ctx->hcryp_ccm.Init.B0 = NULL;
 c01cc1a:	6423      	str	r3, [r4, #64]	; 0x40
    ctx->hcryp_ccm.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 c01cc1c:	2301      	movs	r3, #1
 c01cc1e:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_RCC_AES_CLK_ENABLE();
 c01cc20:	4b18      	ldr	r3, [pc, #96]	; (c01cc84 <mbedtls_ccm_setkey+0xac>)
    if (HAL_CRYP_Init(&ctx->hcryp_ccm) != HAL_OK)
 c01cc22:	f104 0020 	add.w	r0, r4, #32
    __HAL_RCC_AES_CLK_ENABLE();
 c01cc26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01cc28:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 c01cc2c:	64da      	str	r2, [r3, #76]	; 0x4c
 c01cc2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c01cc30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c01cc34:	9301      	str	r3, [sp, #4]
 c01cc36:	9b01      	ldr	r3, [sp, #4]
    if (HAL_CRYP_Init(&ctx->hcryp_ccm) != HAL_OK)
 c01cc38:	f004 fcb2 	bl	c0215a0 <HAL_CRYP_Init>
 c01cc3c:	b9e0      	cbnz	r0, c01cc78 <mbedtls_ccm_setkey+0xa0>
    ctx->ctx_save_cr = ctx->hcryp_ccm.Instance->CR;
 c01cc3e:	6a23      	ldr	r3, [r4, #32]
 c01cc40:	681b      	ldr	r3, [r3, #0]
 c01cc42:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 c01cc46:	e7d2      	b.n	c01cbee <mbedtls_ccm_setkey+0x16>
            ctx->hcryp_ccm.Init.KeySize = CRYP_KEYSIZE_256B;
 c01cc48:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 c01cc4c:	e7d2      	b.n	c01cbf4 <mbedtls_ccm_setkey+0x1c>
        GET_UINT32_BE( ctx->ccm_key[i], key, 4*i );
 c01cc4e:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 c01cc52:	f812 5c04 	ldrb.w	r5, [r2, #-4]
 c01cc56:	0409      	lsls	r1, r1, #16
 c01cc58:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
 c01cc5c:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 c01cc60:	4329      	orrs	r1, r5
 c01cc62:	f812 5c02 	ldrb.w	r5, [r2, #-2]
 c01cc66:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 c01cc6a:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
    for( i=0; i < (keybits/32) ; i++ )
 c01cc6e:	3001      	adds	r0, #1
 c01cc70:	e7c3      	b.n	c01cbfa <mbedtls_ccm_setkey+0x22>
            ret = MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED;
 c01cc72:	f06f 0071 	mvn.w	r0, #113	; 0x71
 c01cc76:	e7ba      	b.n	c01cbee <mbedtls_ccm_setkey+0x16>
        ret = MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 c01cc78:	f06f 006f 	mvn.w	r0, #111	; 0x6f
    return( ret );
 c01cc7c:	e7b7      	b.n	c01cbee <mbedtls_ccm_setkey+0x16>
 c01cc7e:	bf00      	nop
 c01cc80:	520c0000 	.word	0x520c0000
 c01cc84:	50021000 	.word	0x50021000

0c01cc88 <mbedtls_ccm_free>:
{
 c01cc88:	b510      	push	{r4, lr}
    if( ctx == NULL )
 c01cc8a:	4604      	mov	r4, r0
 c01cc8c:	b148      	cbz	r0, c01cca2 <mbedtls_ccm_free+0x1a>
    HAL_CRYP_DeInit( &ctx->hcryp_ccm );
 c01cc8e:	3020      	adds	r0, #32
 c01cc90:	f004 fcaa 	bl	c0215e8 <HAL_CRYP_DeInit>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
 c01cc94:	4620      	mov	r0, r4
}
 c01cc96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
 c01cc9a:	f44f 7198 	mov.w	r1, #304	; 0x130
 c01cc9e:	f00d baff 	b.w	c02a2a0 <mbedtls_platform_zeroize>
}
 c01cca2:	bd10      	pop	{r4, pc}

0c01cca4 <mbedtls_ccm_star_encrypt_and_tag>:
int mbedtls_ccm_star_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
 c01cca4:	b510      	push	{r4, lr}
 c01cca6:	b088      	sub	sp, #32
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    return( ccm_auth_crypt( ctx, CCM_ENCRYPT, length, iv, iv_len,
 c01cca8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 c01ccaa:	9406      	str	r4, [sp, #24]
 c01ccac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 c01ccae:	9405      	str	r4, [sp, #20]
 c01ccb0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 c01ccb2:	9404      	str	r4, [sp, #16]
 c01ccb4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 c01ccb6:	9403      	str	r4, [sp, #12]
 c01ccb8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 c01ccba:	9402      	str	r4, [sp, #8]
 c01ccbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 c01ccbe:	e9cd 3400 	strd	r3, r4, [sp]
 c01ccc2:	4613      	mov	r3, r2
 c01ccc4:	460a      	mov	r2, r1
 c01ccc6:	2100      	movs	r1, #0
 c01ccc8:	f7ff fea0 	bl	c01ca0c <ccm_auth_crypt>
                            add, add_len, input, output, tag, tag_len ) );
}
 c01cccc:	b008      	add	sp, #32
 c01ccce:	bd10      	pop	{r4, pc}

0c01ccd0 <mbedtls_ccm_encrypt_and_tag>:
int mbedtls_ccm_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
 c01ccd0:	b410      	push	{r4}
 c01ccd2:	9c06      	ldr	r4, [sp, #24]
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    if( tag_len == 0 )
 c01ccd4:	b114      	cbz	r4, c01ccdc <mbedtls_ccm_encrypt_and_tag+0xc>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
 c01ccd6:	bc10      	pop	{r4}
    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
 c01ccd8:	f7ff bfe4 	b.w	c01cca4 <mbedtls_ccm_star_encrypt_and_tag>
}
 c01ccdc:	f06f 000c 	mvn.w	r0, #12
 c01cce0:	bc10      	pop	{r4}
 c01cce2:	4770      	bx	lr

0c01cce4 <mbedtls_ccm_star_auth_decrypt>:
int mbedtls_ccm_star_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
 c01cce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01cce6:	460e      	mov	r6, r1
 c01cce8:	b08d      	sub	sp, #52	; 0x34
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
 c01ccea:	a908      	add	r1, sp, #32
{
 c01ccec:	e9dd 5415 	ldrd	r5, r4, [sp, #84]	; 0x54
    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
 c01ccf0:	e9cd 5104 	strd	r5, r1, [sp, #16]
 c01ccf4:	9914      	ldr	r1, [sp, #80]	; 0x50
{
 c01ccf6:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
 c01ccf8:	9103      	str	r1, [sp, #12]
 c01ccfa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 c01ccfc:	9706      	str	r7, [sp, #24]
 c01ccfe:	9102      	str	r1, [sp, #8]
 c01cd00:	9912      	ldr	r1, [sp, #72]	; 0x48
 c01cd02:	e9cd 3100 	strd	r3, r1, [sp]
 c01cd06:	4613      	mov	r3, r2
 c01cd08:	2101      	movs	r1, #1
 c01cd0a:	4632      	mov	r2, r6
 c01cd0c:	f7ff fe7e 	bl	c01ca0c <ccm_auth_crypt>
 c01cd10:	b960      	cbnz	r0, c01cd2c <mbedtls_ccm_star_auth_decrypt+0x48>
 c01cd12:	4603      	mov	r3, r0
 c01cd14:	b2da      	uxtb	r2, r3
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 c01cd16:	4297      	cmp	r7, r2
 c01cd18:	f103 0301 	add.w	r3, r3, #1
 c01cd1c:	d808      	bhi.n	c01cd30 <mbedtls_ccm_star_auth_decrypt+0x4c>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 c01cd1e:	b128      	cbz	r0, c01cd2c <mbedtls_ccm_star_auth_decrypt+0x48>
    {
        mbedtls_platform_zeroize( output, length );
 c01cd20:	4628      	mov	r0, r5
 c01cd22:	4631      	mov	r1, r6
 c01cd24:	f00d fabc 	bl	c02a2a0 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_CCM_AUTH_FAILED );
 c01cd28:	f06f 000e 	mvn.w	r0, #14
    }

    return( 0 );
}
 c01cd2c:	b00d      	add	sp, #52	; 0x34
 c01cd2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        diff |= tag[i] ^ check_tag[i];
 c01cd30:	a90c      	add	r1, sp, #48	; 0x30
 c01cd32:	4411      	add	r1, r2
 c01cd34:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 c01cd38:	5ca2      	ldrb	r2, [r4, r2]
 c01cd3a:	404a      	eors	r2, r1
 c01cd3c:	4310      	orrs	r0, r2
 c01cd3e:	e7e9      	b.n	c01cd14 <mbedtls_ccm_star_auth_decrypt+0x30>

0c01cd40 <mbedtls_ccm_auth_decrypt>:
int mbedtls_ccm_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
 c01cd40:	b410      	push	{r4}
 c01cd42:	9c06      	ldr	r4, [sp, #24]
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( tag_len == 0 )
 c01cd44:	b114      	cbz	r4, c01cd4c <mbedtls_ccm_auth_decrypt+0xc>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_auth_decrypt( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
 c01cd46:	bc10      	pop	{r4}
    return( mbedtls_ccm_star_auth_decrypt( ctx, length, iv, iv_len, add,
 c01cd48:	f7ff bfcc 	b.w	c01cce4 <mbedtls_ccm_star_auth_decrypt>
}
 c01cd4c:	f06f 000c 	mvn.w	r0, #12
 c01cd50:	bc10      	pop	{r4}
 c01cd52:	4770      	bx	lr

0c01cd54 <mbedtls_ecdsa_sign>:
 * Compute ECDSA signature of a hashed message
 */
int mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
                const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 c01cd54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret = 0;
    uint8_t *d_binary;
    uint8_t *k_binary = NULL;

    mbedtls_mpi k;
    PKA_HandleTypeDef hpka = {0};
 c01cd58:	2600      	movs	r6, #0
{
 c01cd5a:	461d      	mov	r5, r3
    ECDSA_VALIDATE_RET( d     != NULL );
    ECDSA_VALIDATE_RET( f_rng != NULL );
    ECDSA_VALIDATE_RET( buf   != NULL || blen == 0 );

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->G.Y.p == NULL )
 c01cd5c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 c01cd5e:	b095      	sub	sp, #84	; 0x54
 c01cd60:	4604      	mov	r4, r0
 c01cd62:	4689      	mov	r9, r1
 c01cd64:	4690      	mov	r8, r2
    PKA_HandleTypeDef hpka = {0};
 c01cd66:	e9cd 6606 	strd	r6, r6, [sp, #24]
 c01cd6a:	9608      	str	r6, [sp, #32]
    if( grp->G.Y.p == NULL )
 c01cd6c:	2b00      	cmp	r3, #0
 c01cd6e:	f000 80cd 	beq.w	c01cf0c <mbedtls_ecdsa_sign+0x1b8>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 c01cd72:	2101      	movs	r1, #1
 c01cd74:	4628      	mov	r0, r5
 c01cd76:	f008 fa83 	bl	c025280 <mbedtls_mpi_cmp_int>
 c01cd7a:	42b0      	cmp	r0, r6
 c01cd7c:	da04      	bge.n	c01cd88 <mbedtls_ecdsa_sign+0x34>
        return ( MBEDTLS_ERR_ECP_INVALID_KEY);
 c01cd7e:	4d64      	ldr	r5, [pc, #400]	; (c01cf10 <mbedtls_ecdsa_sign+0x1bc>)
        mbedtls_platform_zeroize(ECDSA_SignOut.SSign, grp->st_order_size);
        mbedtls_free(ECDSA_SignOut.SSign);
    }

    return ret;
}
 c01cd80:	4628      	mov	r0, r5
 c01cd82:	b015      	add	sp, #84	; 0x54
 c01cd84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 c01cd88:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 c01cd8c:	4628      	mov	r0, r5
 c01cd8e:	f008 fa37 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c01cd92:	2800      	cmp	r0, #0
 c01cd94:	daf3      	bge.n	c01cd7e <mbedtls_ecdsa_sign+0x2a>
    ECDSA_SignIn.modulusSize    = grp->st_modulus_size;
 c01cd96:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    ECDSA_SignIn.primeOrderSize = grp->st_order_size;
 c01cd98:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    ECDSA_SignIn.modulusSize    = grp->st_modulus_size;
 c01cd9c:	930a      	str	r3, [sp, #40]	; 0x28
    ECDSA_SignIn.modulus        = grp->st_p;
 c01cd9e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    d_binary = mbedtls_calloc(grp->st_order_size, sizeof( uint8_t ));
 c01cda2:	2101      	movs	r1, #1
    ECDSA_SignIn.modulus        = grp->st_p;
 c01cda4:	930d      	str	r3, [sp, #52]	; 0x34
    ECDSA_SignIn.coefSign       = grp->st_a_sign;
 c01cda6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    ECDSA_SignIn.primeOrderSize = grp->st_order_size;
 c01cdaa:	9009      	str	r0, [sp, #36]	; 0x24
    ECDSA_SignIn.coefSign       = grp->st_a_sign;
 c01cdac:	930b      	str	r3, [sp, #44]	; 0x2c
    ECDSA_SignIn.coef           = grp->st_a_abs;
 c01cdae:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 c01cdb2:	930c      	str	r3, [sp, #48]	; 0x30
    ECDSA_SignIn.basePointX     = grp->st_gx;
 c01cdb4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 c01cdb8:	930f      	str	r3, [sp, #60]	; 0x3c
    ECDSA_SignIn.basePointY     = grp->st_gy;
 c01cdba:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 c01cdbe:	9310      	str	r3, [sp, #64]	; 0x40
    ECDSA_SignIn.primeOrder     = grp->st_n;
 c01cdc0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 c01cdc4:	9313      	str	r3, [sp, #76]	; 0x4c
    ECDSA_SignIn.hash = buf;
 c01cdc6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 c01cdc8:	9311      	str	r3, [sp, #68]	; 0x44
    d_binary = mbedtls_calloc(grp->st_order_size, sizeof( uint8_t ));
 c01cdca:	f00d fa53 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK((d_binary == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01cdce:	4607      	mov	r7, r0
 c01cdd0:	b910      	cbnz	r0, c01cdd8 <mbedtls_ecdsa_sign+0x84>
    uint8_t *k_binary = NULL;
 c01cdd2:	2600      	movs	r6, #0
    MBEDTLS_MPI_CHK((ECDSA_SignOut.SSign == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01cdd4:	4d4f      	ldr	r5, [pc, #316]	; (c01cf14 <mbedtls_ecdsa_sign+0x1c0>)
 c01cdd6:	e064      	b.n	c01cea2 <mbedtls_ecdsa_sign+0x14e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( d, d_binary, grp->st_order_size ) );
 c01cdd8:	4601      	mov	r1, r0
 c01cdda:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 c01cdde:	4628      	mov	r0, r5
 c01cde0:	f008 f8c1 	bl	c024f66 <mbedtls_mpi_write_binary>
 c01cde4:	4605      	mov	r5, r0
 c01cde6:	2800      	cmp	r0, #0
 c01cde8:	d15b      	bne.n	c01cea2 <mbedtls_ecdsa_sign+0x14e>
    mbedtls_mpi_init( &k );
 c01cdea:	a803      	add	r0, sp, #12
    ECDSA_SignIn.privateKey = d_binary;
 c01cdec:	9712      	str	r7, [sp, #72]	; 0x48
    mbedtls_mpi_init( &k );
 c01cdee:	f007 fec3 	bl	c024b78 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &k, f_rng, p_rng ) );
 c01cdf2:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 c01cdf6:	a903      	add	r1, sp, #12
 c01cdf8:	4620      	mov	r0, r4
 c01cdfa:	f001 f841 	bl	c01de80 <mbedtls_ecp_gen_privkey>
 c01cdfe:	4605      	mov	r5, r0
 c01ce00:	2800      	cmp	r0, #0
 c01ce02:	d14e      	bne.n	c01cea2 <mbedtls_ecdsa_sign+0x14e>
    k_binary = mbedtls_calloc(grp->st_order_size, sizeof( uint8_t ));
 c01ce04:	2101      	movs	r1, #1
 c01ce06:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 c01ce0a:	f00d fa33 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK((k_binary == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01ce0e:	4606      	mov	r6, r0
 c01ce10:	2800      	cmp	r0, #0
 c01ce12:	d0de      	beq.n	c01cdd2 <mbedtls_ecdsa_sign+0x7e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &k, k_binary, grp->st_order_size ) );
 c01ce14:	4601      	mov	r1, r0
 c01ce16:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 c01ce1a:	a803      	add	r0, sp, #12
 c01ce1c:	f008 f8a3 	bl	c024f66 <mbedtls_mpi_write_binary>
 c01ce20:	4605      	mov	r5, r0
 c01ce22:	2800      	cmp	r0, #0
 c01ce24:	d13d      	bne.n	c01cea2 <mbedtls_ecdsa_sign+0x14e>
    __HAL_RCC_PKA_CLK_ENABLE();
 c01ce26:	4b3c      	ldr	r3, [pc, #240]	; (c01cf18 <mbedtls_ecdsa_sign+0x1c4>)
    ECDSA_SignIn.integer = k_binary;
 c01ce28:	960e      	str	r6, [sp, #56]	; 0x38
    __HAL_RCC_PKA_CLK_ENABLE();
 c01ce2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    MBEDTLS_MPI_CHK((HAL_PKA_Init(&hpka) != HAL_OK) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0);
 c01ce2c:	a806      	add	r0, sp, #24
    __HAL_RCC_PKA_CLK_ENABLE();
 c01ce2e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 c01ce32:	64da      	str	r2, [r3, #76]	; 0x4c
 c01ce34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c01ce36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c01ce3a:	9300      	str	r3, [sp, #0]
 c01ce3c:	9b00      	ldr	r3, [sp, #0]
    hpka.Instance = PKA;
 c01ce3e:	4b37      	ldr	r3, [pc, #220]	; (c01cf1c <mbedtls_ecdsa_sign+0x1c8>)
 c01ce40:	9306      	str	r3, [sp, #24]
    MBEDTLS_MPI_CHK((HAL_PKA_Init(&hpka) != HAL_OK) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0);
 c01ce42:	f005 fe14 	bl	c022a6e <HAL_PKA_Init>
 c01ce46:	2800      	cmp	r0, #0
 c01ce48:	d15d      	bne.n	c01cf06 <mbedtls_ecdsa_sign+0x1b2>
    MBEDTLS_MPI_CHK((HAL_PKA_ECDSASign(&hpka, &ECDSA_SignIn, ST_ECDSA_TIMEOUT) != HAL_OK) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0);
 c01ce4a:	f241 3288 	movw	r2, #5000	; 0x1388
 c01ce4e:	a909      	add	r1, sp, #36	; 0x24
 c01ce50:	a806      	add	r0, sp, #24
 c01ce52:	f006 f857 	bl	c022f04 <HAL_PKA_ECDSASign>
 c01ce56:	2800      	cmp	r0, #0
 c01ce58:	d155      	bne.n	c01cf06 <mbedtls_ecdsa_sign+0x1b2>
    ECDSA_SignOut.RSign = mbedtls_calloc(grp->st_order_size, sizeof( uint8_t ));
 c01ce5a:	2101      	movs	r1, #1
 c01ce5c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 c01ce60:	f00d fa08 	bl	c02a274 <mbedtls_calloc>
 c01ce64:	9001      	str	r0, [sp, #4]
    MBEDTLS_MPI_CHK((ECDSA_SignOut.RSign == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01ce66:	2800      	cmp	r0, #0
 c01ce68:	d0b4      	beq.n	c01cdd4 <mbedtls_ecdsa_sign+0x80>
    ECDSA_SignOut.SSign = mbedtls_calloc(grp->st_order_size, sizeof( uint8_t ));
 c01ce6a:	2101      	movs	r1, #1
 c01ce6c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 c01ce70:	f00d fa00 	bl	c02a274 <mbedtls_calloc>
 c01ce74:	9002      	str	r0, [sp, #8]
    MBEDTLS_MPI_CHK((ECDSA_SignOut.SSign == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01ce76:	2800      	cmp	r0, #0
 c01ce78:	d0ac      	beq.n	c01cdd4 <mbedtls_ecdsa_sign+0x80>
    HAL_PKA_ECDSASign_GetResult(&hpka, &ECDSA_SignOut, NULL);
 c01ce7a:	2200      	movs	r2, #0
 c01ce7c:	a901      	add	r1, sp, #4
 c01ce7e:	a806      	add	r0, sp, #24
 c01ce80:	f005 feb6 	bl	c022bf0 <HAL_PKA_ECDSASign_GetResult>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( r, ECDSA_SignOut.RSign, grp->st_order_size ) );
 c01ce84:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 c01ce88:	9901      	ldr	r1, [sp, #4]
 c01ce8a:	4648      	mov	r0, r9
 c01ce8c:	f007 fffe 	bl	c024e8c <mbedtls_mpi_read_binary>
 c01ce90:	4605      	mov	r5, r0
 c01ce92:	b930      	cbnz	r0, c01cea2 <mbedtls_ecdsa_sign+0x14e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( s, ECDSA_SignOut.SSign, grp->st_order_size ) );
 c01ce94:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 c01ce98:	9902      	ldr	r1, [sp, #8]
 c01ce9a:	4640      	mov	r0, r8
 c01ce9c:	f007 fff6 	bl	c024e8c <mbedtls_mpi_read_binary>
 c01cea0:	4605      	mov	r5, r0
    HAL_PKA_DeInit(&hpka);
 c01cea2:	a806      	add	r0, sp, #24
 c01cea4:	f005 fe0c 	bl	c022ac0 <HAL_PKA_DeInit>
    __HAL_RCC_PKA_CLK_DISABLE();
 c01cea8:	4a1b      	ldr	r2, [pc, #108]	; (c01cf18 <mbedtls_ecdsa_sign+0x1c4>)
    mbedtls_mpi_free( &k );
 c01ceaa:	a803      	add	r0, sp, #12
    __HAL_RCC_PKA_CLK_DISABLE();
 c01ceac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 c01ceae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c01ceb2:	64d3      	str	r3, [r2, #76]	; 0x4c
    mbedtls_mpi_free( &k );
 c01ceb4:	f007 fe66 	bl	c024b84 <mbedtls_mpi_free>
    if (d_binary != NULL)
 c01ceb8:	b13f      	cbz	r7, c01ceca <mbedtls_ecdsa_sign+0x176>
        mbedtls_platform_zeroize(d_binary, grp->st_order_size);
 c01ceba:	4638      	mov	r0, r7
 c01cebc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 c01cec0:	f00d f9ee 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free(d_binary);
 c01cec4:	4638      	mov	r0, r7
 c01cec6:	f00d f9db 	bl	c02a280 <mbedtls_free>
    if (k_binary != NULL)
 c01ceca:	b13e      	cbz	r6, c01cedc <mbedtls_ecdsa_sign+0x188>
        mbedtls_platform_zeroize(k_binary, grp->st_order_size);
 c01cecc:	4630      	mov	r0, r6
 c01cece:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 c01ced2:	f00d f9e5 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free(k_binary);
 c01ced6:	4630      	mov	r0, r6
 c01ced8:	f00d f9d2 	bl	c02a280 <mbedtls_free>
    if (ECDSA_SignOut.RSign != NULL)
 c01cedc:	9801      	ldr	r0, [sp, #4]
 c01cede:	b130      	cbz	r0, c01ceee <mbedtls_ecdsa_sign+0x19a>
        mbedtls_platform_zeroize(ECDSA_SignOut.RSign, grp->st_order_size);
 c01cee0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 c01cee4:	f00d f9dc 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free(ECDSA_SignOut.RSign);
 c01cee8:	9801      	ldr	r0, [sp, #4]
 c01ceea:	f00d f9c9 	bl	c02a280 <mbedtls_free>
    if (ECDSA_SignOut.SSign != NULL)
 c01ceee:	9802      	ldr	r0, [sp, #8]
 c01cef0:	2800      	cmp	r0, #0
 c01cef2:	f43f af45 	beq.w	c01cd80 <mbedtls_ecdsa_sign+0x2c>
        mbedtls_platform_zeroize(ECDSA_SignOut.SSign, grp->st_order_size);
 c01cef6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 c01cefa:	f00d f9d1 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free(ECDSA_SignOut.SSign);
 c01cefe:	9802      	ldr	r0, [sp, #8]
 c01cf00:	f00d f9be 	bl	c02a280 <mbedtls_free>
 c01cf04:	e73c      	b.n	c01cd80 <mbedtls_ecdsa_sign+0x2c>
    MBEDTLS_MPI_CHK((HAL_PKA_ECDSASign(&hpka, &ECDSA_SignIn, ST_ECDSA_TIMEOUT) != HAL_OK) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0);
 c01cf06:	f06f 056f 	mvn.w	r5, #111	; 0x6f
 c01cf0a:	e7ca      	b.n	c01cea2 <mbedtls_ecdsa_sign+0x14e>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c01cf0c:	4d04      	ldr	r5, [pc, #16]	; (c01cf20 <mbedtls_ecdsa_sign+0x1cc>)
 c01cf0e:	e737      	b.n	c01cd80 <mbedtls_ecdsa_sign+0x2c>
 c01cf10:	ffffb380 	.word	0xffffb380
 c01cf14:	ffffb280 	.word	0xffffb280
 c01cf18:	50021000 	.word	0x50021000
 c01cf1c:	520c2000 	.word	0x520c2000
 c01cf20:	ffffb080 	.word	0xffffb080

0c01cf24 <mbedtls_ecdsa_verify>:
int mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,
                          const unsigned char *buf, size_t blen,
                          const mbedtls_ecp_point *Q,
                          const mbedtls_mpi *r,
                          const mbedtls_mpi *s)
{
 c01cf24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret = 0;
    size_t olen;
    uint8_t *Q_binary;
    uint8_t *r_binary = NULL;
    uint8_t *s_binary = NULL;
    PKA_HandleTypeDef hpka = {0};
 c01cf28:	2600      	movs	r6, #0
{
 c01cf2a:	461d      	mov	r5, r3
    ECDSA_VALIDATE_RET( r   != NULL );
    ECDSA_VALIDATE_RET( s   != NULL );
    ECDSA_VALIDATE_RET( buf != NULL || blen == 0 );

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->G.Y.p == NULL )
 c01cf2c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 c01cf2e:	b096      	sub	sp, #88	; 0x58
 c01cf30:	4604      	mov	r4, r0
 c01cf32:	4688      	mov	r8, r1
    PKA_HandleTypeDef hpka = {0};
 c01cf34:	e9cd 6606 	strd	r6, r6, [sp, #24]
 c01cf38:	9608      	str	r6, [sp, #32]
    if( grp->G.Y.p == NULL )
 c01cf3a:	2b00      	cmp	r3, #0
 c01cf3c:	f000 80f4 	beq.w	c01d128 <mbedtls_ecdsa_verify+0x204>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* Make sure r and s are in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 c01cf40:	2101      	movs	r1, #1
 c01cf42:	981c      	ldr	r0, [sp, #112]	; 0x70
 c01cf44:	f008 f99c 	bl	c025280 <mbedtls_mpi_cmp_int>
 c01cf48:	42b0      	cmp	r0, r6
 c01cf4a:	da04      	bge.n	c01cf56 <mbedtls_ecdsa_verify+0x32>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
        return( MBEDTLS_ERR_ECP_VERIFY_FAILED );
 c01cf4c:	4d7c      	ldr	r5, [pc, #496]	; (c01d140 <mbedtls_ecdsa_verify+0x21c>)
        mbedtls_platform_zeroize(s_binary, grp->st_order_size);
        mbedtls_free(s_binary);
    }

    return ret;
}
 c01cf4e:	4628      	mov	r0, r5
 c01cf50:	b016      	add	sp, #88	; 0x58
 c01cf52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 c01cf56:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 c01cf5a:	4639      	mov	r1, r7
 c01cf5c:	981c      	ldr	r0, [sp, #112]	; 0x70
 c01cf5e:	f008 f94f 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c01cf62:	2800      	cmp	r0, #0
 c01cf64:	daf2      	bge.n	c01cf4c <mbedtls_ecdsa_verify+0x28>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 c01cf66:	2101      	movs	r1, #1
 c01cf68:	981d      	ldr	r0, [sp, #116]	; 0x74
 c01cf6a:	f008 f989 	bl	c025280 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 c01cf6e:	2800      	cmp	r0, #0
 c01cf70:	dbec      	blt.n	c01cf4c <mbedtls_ecdsa_verify+0x28>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 c01cf72:	4639      	mov	r1, r7
 c01cf74:	981d      	ldr	r0, [sp, #116]	; 0x74
 c01cf76:	f008 f943 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c01cf7a:	2800      	cmp	r0, #0
 c01cf7c:	dae6      	bge.n	c01cf4c <mbedtls_ecdsa_verify+0x28>
    Q_binary = mbedtls_calloc( ( 2U * grp->st_modulus_size ) + 1U, sizeof( uint8_t ) );
 c01cf7e:	2101      	movs	r1, #1
    ECDSA_VerifyIn.primeOrderSize = grp->st_order_size;
 c01cf80:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    ECDSA_VerifyIn.modulusSize    = grp->st_modulus_size;
 c01cf84:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    ECDSA_VerifyIn.primeOrderSize = grp->st_order_size;
 c01cf86:	9309      	str	r3, [sp, #36]	; 0x24
    ECDSA_VerifyIn.modulus        = grp->st_p;
 c01cf88:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    ECDSA_VerifyIn.modulusSize    = grp->st_modulus_size;
 c01cf8c:	900a      	str	r0, [sp, #40]	; 0x28
    ECDSA_VerifyIn.modulus        = grp->st_p;
 c01cf8e:	930d      	str	r3, [sp, #52]	; 0x34
    ECDSA_VerifyIn.coefSign       = grp->st_a_sign;
 c01cf90:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    Q_binary = mbedtls_calloc( ( 2U * grp->st_modulus_size ) + 1U, sizeof( uint8_t ) );
 c01cf94:	0040      	lsls	r0, r0, #1
    ECDSA_VerifyIn.coefSign       = grp->st_a_sign;
 c01cf96:	930b      	str	r3, [sp, #44]	; 0x2c
    ECDSA_VerifyIn.coef           = grp->st_a_abs;
 c01cf98:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    Q_binary = mbedtls_calloc( ( 2U * grp->st_modulus_size ) + 1U, sizeof( uint8_t ) );
 c01cf9c:	4408      	add	r0, r1
    ECDSA_VerifyIn.coef           = grp->st_a_abs;
 c01cf9e:	930c      	str	r3, [sp, #48]	; 0x30
    ECDSA_VerifyIn.basePointX     = grp->st_gx;
 c01cfa0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 c01cfa4:	930e      	str	r3, [sp, #56]	; 0x38
    ECDSA_VerifyIn.basePointY     = grp->st_gy;
 c01cfa6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 c01cfaa:	930f      	str	r3, [sp, #60]	; 0x3c
    ECDSA_VerifyIn.primeOrder     = grp->st_n;
 c01cfac:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    ECDSA_VerifyIn.hash = buf;
 c01cfb0:	e9cd 8314 	strd	r8, r3, [sp, #80]	; 0x50
    Q_binary = mbedtls_calloc( ( 2U * grp->st_modulus_size ) + 1U, sizeof( uint8_t ) );
 c01cfb4:	f00d f95e 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK((Q_binary == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01cfb8:	4680      	mov	r8, r0
 c01cfba:	2800      	cmp	r0, #0
 c01cfbc:	f000 80b6 	beq.w	c01d12c <mbedtls_ecdsa_verify+0x208>
    MBEDTLS_MPI_CHK( mbedtls_ecp_point_write_binary( grp, Q, MBEDTLS_ECP_PF_UNCOMPRESSED, &olen, Q_binary, ( 2U * grp->st_modulus_size ) + 1U ) );
 c01cfc0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 c01cfc2:	4629      	mov	r1, r5
 c01cfc4:	005b      	lsls	r3, r3, #1
 c01cfc6:	3301      	adds	r3, #1
 c01cfc8:	e9cd 0300 	strd	r0, r3, [sp]
 c01cfcc:	4632      	mov	r2, r6
 c01cfce:	ab04      	add	r3, sp, #16
 c01cfd0:	4620      	mov	r0, r4
 c01cfd2:	f000 fa47 	bl	c01d464 <mbedtls_ecp_point_write_binary>
 c01cfd6:	4605      	mov	r5, r0
 c01cfd8:	2800      	cmp	r0, #0
 c01cfda:	f040 809b 	bne.w	c01d114 <mbedtls_ecdsa_verify+0x1f0>
    ECDSA_VerifyIn.pPubKeyCurvePtX = Q_binary + 1U;
 c01cfde:	f108 0301 	add.w	r3, r8, #1
 c01cfe2:	9310      	str	r3, [sp, #64]	; 0x40
    ECDSA_VerifyIn.pPubKeyCurvePtY = Q_binary + grp->st_modulus_size + 1U;
 c01cfe4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    r_binary = mbedtls_calloc(grp->st_order_size, sizeof( uint8_t ));
 c01cfe6:	2101      	movs	r1, #1
    ECDSA_VerifyIn.pPubKeyCurvePtY = Q_binary + grp->st_modulus_size + 1U;
 c01cfe8:	3301      	adds	r3, #1
 c01cfea:	4443      	add	r3, r8
    r_binary = mbedtls_calloc(grp->st_order_size, sizeof( uint8_t ));
 c01cfec:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    ECDSA_VerifyIn.pPubKeyCurvePtY = Q_binary + grp->st_modulus_size + 1U;
 c01cff0:	9311      	str	r3, [sp, #68]	; 0x44
    r_binary = mbedtls_calloc(grp->st_order_size, sizeof( uint8_t ));
 c01cff2:	f00d f93f 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK((r_binary == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01cff6:	4607      	mov	r7, r0
 c01cff8:	2800      	cmp	r0, #0
 c01cffa:	f000 808d 	beq.w	c01d118 <mbedtls_ecdsa_verify+0x1f4>
    s_binary = mbedtls_calloc(grp->st_order_size, sizeof( uint8_t ));
 c01cffe:	2101      	movs	r1, #1
 c01d000:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 c01d004:	f00d f936 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK((s_binary == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01d008:	4606      	mov	r6, r0
 c01d00a:	2800      	cmp	r0, #0
 c01d00c:	f000 8085 	beq.w	c01d11a <mbedtls_ecdsa_verify+0x1f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( r, r_binary, grp->st_order_size ) );
 c01d010:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 c01d014:	4639      	mov	r1, r7
 c01d016:	981c      	ldr	r0, [sp, #112]	; 0x70
 c01d018:	f007 ffa5 	bl	c024f66 <mbedtls_mpi_write_binary>
 c01d01c:	4605      	mov	r5, r0
 c01d01e:	2800      	cmp	r0, #0
 c01d020:	d140      	bne.n	c01d0a4 <mbedtls_ecdsa_verify+0x180>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( s, s_binary, grp->st_order_size ) );
 c01d022:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 c01d026:	4631      	mov	r1, r6
 c01d028:	981d      	ldr	r0, [sp, #116]	; 0x74
    ECDSA_VerifyIn.RSign = r_binary;
 c01d02a:	9712      	str	r7, [sp, #72]	; 0x48
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( s, s_binary, grp->st_order_size ) );
 c01d02c:	f007 ff9b 	bl	c024f66 <mbedtls_mpi_write_binary>
 c01d030:	4605      	mov	r5, r0
 c01d032:	2800      	cmp	r0, #0
 c01d034:	d136      	bne.n	c01d0a4 <mbedtls_ecdsa_verify+0x180>
    __HAL_RCC_PKA_CLK_ENABLE();
 c01d036:	4b43      	ldr	r3, [pc, #268]	; (c01d144 <mbedtls_ecdsa_verify+0x220>)
    ECDSA_VerifyIn.SSign = s_binary;
 c01d038:	9613      	str	r6, [sp, #76]	; 0x4c
    __HAL_RCC_PKA_CLK_ENABLE();
 c01d03a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    MBEDTLS_MPI_CHK((HAL_PKA_Init(&hpka) != HAL_OK) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0);
 c01d03c:	a806      	add	r0, sp, #24
    __HAL_RCC_PKA_CLK_ENABLE();
 c01d03e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 c01d042:	64da      	str	r2, [r3, #76]	; 0x4c
 c01d044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c01d046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c01d04a:	9305      	str	r3, [sp, #20]
 c01d04c:	9b05      	ldr	r3, [sp, #20]
    hpka.Instance = PKA;
 c01d04e:	4b3e      	ldr	r3, [pc, #248]	; (c01d148 <mbedtls_ecdsa_verify+0x224>)
 c01d050:	9306      	str	r3, [sp, #24]
    MBEDTLS_MPI_CHK((HAL_PKA_Init(&hpka) != HAL_OK) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0);
 c01d052:	f005 fd0c 	bl	c022a6e <HAL_PKA_Init>
 c01d056:	2800      	cmp	r0, #0
 c01d058:	d161      	bne.n	c01d11e <mbedtls_ecdsa_verify+0x1fa>
    MBEDTLS_MPI_CHK((HAL_PKA_ECDSAVerif(&hpka, &ECDSA_VerifyIn, ST_ECDSA_TIMEOUT) != HAL_OK) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0);
 c01d05a:	f241 3288 	movw	r2, #5000	; 0x1388
 c01d05e:	a909      	add	r1, sp, #36	; 0x24
 c01d060:	a806      	add	r0, sp, #24
 c01d062:	f005 fff7 	bl	c023054 <HAL_PKA_ECDSAVerif>
 c01d066:	2800      	cmp	r0, #0
 c01d068:	d159      	bne.n	c01d11e <mbedtls_ecdsa_verify+0x1fa>
    MBEDTLS_MPI_CHK((HAL_PKA_ECDSAVerif_IsValidSignature(&hpka) != 1U) ? MBEDTLS_ERR_ECP_VERIFY_FAILED : 0);
 c01d06a:	a806      	add	r0, sp, #24
 c01d06c:	f005 fd3c 	bl	c022ae8 <HAL_PKA_ECDSAVerif_IsValidSignature>
 c01d070:	2801      	cmp	r0, #1
 c01d072:	d157      	bne.n	c01d124 <mbedtls_ecdsa_verify+0x200>
  uint8_t* p_sign_PKA = (uint8_t*) &hpka->Instance->RAM[PKA_ECDSA_VERIF_OUT_SIGNATURE_R];
 c01d074:	9906      	ldr	r1, [sp, #24]
 c01d076:	9812      	ldr	r0, [sp, #72]	; 0x48
 c01d078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c01d07a:	f201 515c 	addw	r1, r1, #1372	; 0x55c
  __IO uint8_t result = 0;
 c01d07e:	f88d 500f 	strb.w	r5, [sp, #15]
 c01d082:	3801      	subs	r0, #1
 c01d084:	440b      	add	r3, r1
  for (i = 0U, j = Size - 1U; i < Size; i++, j--)
 c01d086:	4299      	cmp	r1, r3
 c01d088:	d135      	bne.n	c01d0f6 <mbedtls_ecdsa_verify+0x1d2>
  if ( (i != Size) || (result != SIGN_VALID) )
 c01d08a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 c01d08e:	2b55      	cmp	r3, #85	; 0x55
    result = SIGN_INVALID;
 c01d090:	bf1c      	itt	ne
 c01d092:	2382      	movne	r3, #130	; 0x82
 c01d094:	f88d 300f 	strbne.w	r3, [sp, #15]
  return result;
 c01d098:	f89d 200f 	ldrb.w	r2, [sp, #15]
    MBEDTLS_MPI_CHK((CheckPKASignature(&hpka, &ECDSA_VerifyIn) != SIGN_VALID) ? MBEDTLS_ERR_ECP_VERIFY_FAILED : 0);
 c01d09c:	4b28      	ldr	r3, [pc, #160]	; (c01d140 <mbedtls_ecdsa_verify+0x21c>)
 c01d09e:	2a55      	cmp	r2, #85	; 0x55
 c01d0a0:	bf18      	it	ne
 c01d0a2:	461d      	movne	r5, r3
    HAL_PKA_DeInit(&hpka);
 c01d0a4:	a806      	add	r0, sp, #24
 c01d0a6:	f005 fd0b 	bl	c022ac0 <HAL_PKA_DeInit>
    __HAL_RCC_PKA_CLK_DISABLE();
 c01d0aa:	4a26      	ldr	r2, [pc, #152]	; (c01d144 <mbedtls_ecdsa_verify+0x220>)
 c01d0ac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 c01d0ae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c01d0b2:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (Q_binary != NULL)
 c01d0b4:	f1b8 0f00 	cmp.w	r8, #0
 c01d0b8:	d008      	beq.n	c01d0cc <mbedtls_ecdsa_verify+0x1a8>
        mbedtls_platform_zeroize(Q_binary, ( 2U * grp->st_modulus_size ) + 1U );
 c01d0ba:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 c01d0bc:	4640      	mov	r0, r8
 c01d0be:	0049      	lsls	r1, r1, #1
 c01d0c0:	3101      	adds	r1, #1
 c01d0c2:	f00d f8ed 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free(Q_binary);
 c01d0c6:	4640      	mov	r0, r8
 c01d0c8:	f00d f8da 	bl	c02a280 <mbedtls_free>
    if (r_binary != NULL)
 c01d0cc:	b13f      	cbz	r7, c01d0de <mbedtls_ecdsa_verify+0x1ba>
        mbedtls_platform_zeroize(r_binary, grp->st_order_size);
 c01d0ce:	4638      	mov	r0, r7
 c01d0d0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 c01d0d4:	f00d f8e4 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free(r_binary);
 c01d0d8:	4638      	mov	r0, r7
 c01d0da:	f00d f8d1 	bl	c02a280 <mbedtls_free>
    if (s_binary != NULL)
 c01d0de:	2e00      	cmp	r6, #0
 c01d0e0:	f43f af35 	beq.w	c01cf4e <mbedtls_ecdsa_verify+0x2a>
        mbedtls_platform_zeroize(s_binary, grp->st_order_size);
 c01d0e4:	4630      	mov	r0, r6
 c01d0e6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 c01d0ea:	f00d f8d9 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free(s_binary);
 c01d0ee:	4630      	mov	r0, r6
 c01d0f0:	f00d f8c6 	bl	c02a280 <mbedtls_free>
 c01d0f4:	e72b      	b.n	c01cf4e <mbedtls_ecdsa_verify+0x2a>
    result |= pSign[i] ^ SIGN_VALID ^ p_sign_PKA[j];
 c01d0f6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 c01d0fa:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 c01d0fe:	f89d c00f 	ldrb.w	ip, [sp, #15]
 c01d102:	f082 0255 	eor.w	r2, r2, #85	; 0x55
 c01d106:	ea82 020e 	eor.w	r2, r2, lr
 c01d10a:	ea4c 0202 	orr.w	r2, ip, r2
 c01d10e:	f88d 200f 	strb.w	r2, [sp, #15]
 c01d112:	e7b8      	b.n	c01d086 <mbedtls_ecdsa_verify+0x162>
    uint8_t *r_binary = NULL;
 c01d114:	4637      	mov	r7, r6
 c01d116:	e7c5      	b.n	c01d0a4 <mbedtls_ecdsa_verify+0x180>
    uint8_t *s_binary = NULL;
 c01d118:	4606      	mov	r6, r0
    MBEDTLS_MPI_CHK((s_binary == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01d11a:	4d0c      	ldr	r5, [pc, #48]	; (c01d14c <mbedtls_ecdsa_verify+0x228>)
 c01d11c:	e7c2      	b.n	c01d0a4 <mbedtls_ecdsa_verify+0x180>
    MBEDTLS_MPI_CHK((HAL_PKA_ECDSAVerif(&hpka, &ECDSA_VerifyIn, ST_ECDSA_TIMEOUT) != HAL_OK) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0);
 c01d11e:	f06f 056f 	mvn.w	r5, #111	; 0x6f
 c01d122:	e7bf      	b.n	c01d0a4 <mbedtls_ecdsa_verify+0x180>
    MBEDTLS_MPI_CHK((HAL_PKA_ECDSAVerif_IsValidSignature(&hpka) != 1U) ? MBEDTLS_ERR_ECP_VERIFY_FAILED : 0);
 c01d124:	4d06      	ldr	r5, [pc, #24]	; (c01d140 <mbedtls_ecdsa_verify+0x21c>)
 c01d126:	e7bd      	b.n	c01d0a4 <mbedtls_ecdsa_verify+0x180>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c01d128:	4d09      	ldr	r5, [pc, #36]	; (c01d150 <mbedtls_ecdsa_verify+0x22c>)
 c01d12a:	e710      	b.n	c01cf4e <mbedtls_ecdsa_verify+0x2a>
    HAL_PKA_DeInit(&hpka);
 c01d12c:	a806      	add	r0, sp, #24
 c01d12e:	f005 fcc7 	bl	c022ac0 <HAL_PKA_DeInit>
    __HAL_RCC_PKA_CLK_DISABLE();
 c01d132:	4a04      	ldr	r2, [pc, #16]	; (c01d144 <mbedtls_ecdsa_verify+0x220>)
    MBEDTLS_MPI_CHK((Q_binary == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01d134:	4d05      	ldr	r5, [pc, #20]	; (c01d14c <mbedtls_ecdsa_verify+0x228>)
    __HAL_RCC_PKA_CLK_DISABLE();
 c01d136:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 c01d138:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c01d13c:	64d3      	str	r3, [r2, #76]	; 0x4c
 c01d13e:	e706      	b.n	c01cf4e <mbedtls_ecdsa_verify+0x2a>
 c01d140:	ffffb200 	.word	0xffffb200
 c01d144:	50021000 	.word	0x50021000
 c01d148:	520c2000 	.word	0x520c2000
 c01d14c:	ffffb280 	.word	0xffffb280
 c01d150:	ffffb080 	.word	0xffffb080

0c01d154 <ecp_modp>:
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
    int ret;

    if( grp->modp == NULL )
 c01d154:	6e4b      	ldr	r3, [r1, #100]	; 0x64
{
 c01d156:	b570      	push	{r4, r5, r6, lr}
 c01d158:	4604      	mov	r4, r0
 c01d15a:	460d      	mov	r5, r1
    if( grp->modp == NULL )
 c01d15c:	b92b      	cbnz	r3, c01d16a <ecp_modp+0x16>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );

cleanup:
    return( ret );
}
 c01d15e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 c01d162:	1d0a      	adds	r2, r1, #4
 c01d164:	4601      	mov	r1, r0
 c01d166:	f008 bc6d 	b.w	c025a44 <mbedtls_mpi_mod_mpi>
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 c01d16a:	6803      	ldr	r3, [r0, #0]
 c01d16c:	2b00      	cmp	r3, #0
 c01d16e:	db09      	blt.n	c01d184 <ecp_modp+0x30>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 c01d170:	4620      	mov	r0, r4
 c01d172:	f007 fe31 	bl	c024dd8 <mbedtls_mpi_bitlen>
 c01d176:	6dab      	ldr	r3, [r5, #88]	; 0x58
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 c01d178:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 c01d17c:	d908      	bls.n	c01d190 <ecp_modp+0x3c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c01d17e:	4e17      	ldr	r6, [pc, #92]	; (c01d1dc <ecp_modp+0x88>)
}
 c01d180:	4630      	mov	r0, r6
 c01d182:	bd70      	pop	{r4, r5, r6, pc}
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 c01d184:	2100      	movs	r1, #0
 c01d186:	f008 f87b 	bl	c025280 <mbedtls_mpi_cmp_int>
 c01d18a:	2800      	cmp	r0, #0
 c01d18c:	d0f0      	beq.n	c01d170 <ecp_modp+0x1c>
 c01d18e:	e7f6      	b.n	c01d17e <ecp_modp+0x2a>
    MBEDTLS_MPI_CHK( grp->modp( N ) );
 c01d190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c01d192:	4620      	mov	r0, r4
 c01d194:	4798      	blx	r3
 c01d196:	4606      	mov	r6, r0
 c01d198:	2800      	cmp	r0, #0
 c01d19a:	d1f1      	bne.n	c01d180 <ecp_modp+0x2c>
 c01d19c:	3504      	adds	r5, #4
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 c01d19e:	6823      	ldr	r3, [r4, #0]
 c01d1a0:	2b00      	cmp	r3, #0
 c01d1a2:	da04      	bge.n	c01d1ae <ecp_modp+0x5a>
 c01d1a4:	2100      	movs	r1, #0
 c01d1a6:	4620      	mov	r0, r4
 c01d1a8:	f008 f86a 	bl	c025280 <mbedtls_mpi_cmp_int>
 c01d1ac:	b968      	cbnz	r0, c01d1ca <ecp_modp+0x76>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 c01d1ae:	4629      	mov	r1, r5
 c01d1b0:	4620      	mov	r0, r4
 c01d1b2:	f008 f825 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c01d1b6:	2800      	cmp	r0, #0
 c01d1b8:	dbe2      	blt.n	c01d180 <ecp_modp+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 c01d1ba:	462a      	mov	r2, r5
 c01d1bc:	4621      	mov	r1, r4
 c01d1be:	4620      	mov	r0, r4
 c01d1c0:	f008 f8d5 	bl	c02536e <mbedtls_mpi_sub_abs>
 c01d1c4:	2800      	cmp	r0, #0
 c01d1c6:	d0f2      	beq.n	c01d1ae <ecp_modp+0x5a>
 c01d1c8:	e006      	b.n	c01d1d8 <ecp_modp+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 c01d1ca:	462a      	mov	r2, r5
 c01d1cc:	4621      	mov	r1, r4
 c01d1ce:	4620      	mov	r0, r4
 c01d1d0:	f008 f90b 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c01d1d4:	2800      	cmp	r0, #0
 c01d1d6:	d0e2      	beq.n	c01d19e <ecp_modp+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 c01d1d8:	4606      	mov	r6, r0
 c01d1da:	e7d1      	b.n	c01d180 <ecp_modp+0x2c>
 c01d1dc:	ffffb080 	.word	0xffffb080

0c01d1e0 <mbedtls_ecp_point_free.part.2>:
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
 c01d1e0:	b510      	push	{r4, lr}
 c01d1e2:	4604      	mov	r4, r0
    mbedtls_mpi_free( &( pt->X ) );
 c01d1e4:	f007 fcce 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 c01d1e8:	f104 000c 	add.w	r0, r4, #12
 c01d1ec:	f007 fcca 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 c01d1f0:	f104 0018 	add.w	r0, r4, #24
}
 c01d1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &( pt->Z ) );
 c01d1f8:	f007 bcc4 	b.w	c024b84 <mbedtls_mpi_free>

0c01d1fc <mbedtls_ecp_grp_id_list>:
    if( ! init_done )
 c01d1fc:	4a09      	ldr	r2, [pc, #36]	; (c01d224 <mbedtls_ecp_grp_id_list+0x28>)
{
 c01d1fe:	b530      	push	{r4, r5, lr}
    if( ! init_done )
 c01d200:	6813      	ldr	r3, [r2, #0]
 c01d202:	b15b      	cbz	r3, c01d21c <mbedtls_ecp_grp_id_list+0x20>
}
 c01d204:	4808      	ldr	r0, [pc, #32]	; (c01d228 <mbedtls_ecp_grp_id_list+0x2c>)
 c01d206:	bd30      	pop	{r4, r5, pc}
 c01d208:	3301      	adds	r3, #1
             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 c01d20a:	fb05 f103 	mul.w	r1, r5, r3
 c01d20e:	5d09      	ldrb	r1, [r1, r4]
            ecp_supported_grp_id[i++] = curve_info->grp_id;
 c01d210:	54c1      	strb	r1, [r0, r3]
        for( curve_info = mbedtls_ecp_curve_list();
 c01d212:	2900      	cmp	r1, #0
 c01d214:	d1f8      	bne.n	c01d208 <mbedtls_ecp_grp_id_list+0xc>
        init_done = 1;
 c01d216:	2301      	movs	r3, #1
 c01d218:	6013      	str	r3, [r2, #0]
 c01d21a:	e7f3      	b.n	c01d204 <mbedtls_ecp_grp_id_list+0x8>
             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 c01d21c:	4c03      	ldr	r4, [pc, #12]	; (c01d22c <mbedtls_ecp_grp_id_list+0x30>)
 c01d21e:	250c      	movs	r5, #12
 c01d220:	4801      	ldr	r0, [pc, #4]	; (c01d228 <mbedtls_ecp_grp_id_list+0x2c>)
 c01d222:	e7f2      	b.n	c01d20a <mbedtls_ecp_grp_id_list+0xe>
 c01d224:	30035d68 	.word	0x30035d68
 c01d228:	30035d5c 	.word	0x30035d5c
 c01d22c:	0c034514 	.word	0x0c034514

0c01d230 <mbedtls_ecp_curve_info_from_grp_id>:
    for( curve_info = mbedtls_ecp_curve_list();
 c01d230:	2300      	movs	r3, #0
{
 c01d232:	b510      	push	{r4, lr}
 c01d234:	4c05      	ldr	r4, [pc, #20]	; (c01d24c <mbedtls_ecp_curve_info_from_grp_id+0x1c>)
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 c01d236:	5d1a      	ldrb	r2, [r3, r4]
 c01d238:	18e1      	adds	r1, r4, r3
    for( curve_info = mbedtls_ecp_curve_list();
 c01d23a:	b90a      	cbnz	r2, c01d240 <mbedtls_ecp_curve_info_from_grp_id+0x10>
    return( NULL );
 c01d23c:	4611      	mov	r1, r2
 c01d23e:	e003      	b.n	c01d248 <mbedtls_ecp_curve_info_from_grp_id+0x18>
        if( curve_info->grp_id == grp_id )
 c01d240:	4282      	cmp	r2, r0
 c01d242:	f103 030c 	add.w	r3, r3, #12
 c01d246:	d1f6      	bne.n	c01d236 <mbedtls_ecp_curve_info_from_grp_id+0x6>
}
 c01d248:	4608      	mov	r0, r1
 c01d24a:	bd10      	pop	{r4, pc}
 c01d24c:	0c034514 	.word	0x0c034514

0c01d250 <mbedtls_ecp_get_type>:
    if( grp->G.X.p == NULL )
 c01d250:	6b03      	ldr	r3, [r0, #48]	; 0x30
 c01d252:	b12b      	cbz	r3, c01d260 <mbedtls_ecp_get_type+0x10>
    if( grp->G.Y.p == NULL )
 c01d254:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 c01d256:	2b00      	cmp	r3, #0
        return( MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS );
 c01d258:	bf0c      	ite	eq
 c01d25a:	2002      	moveq	r0, #2
 c01d25c:	2001      	movne	r0, #1
 c01d25e:	4770      	bx	lr
        return( MBEDTLS_ECP_TYPE_NONE );
 c01d260:	4618      	mov	r0, r3
}
 c01d262:	4770      	bx	lr

0c01d264 <mbedtls_ecp_point_init>:
{
 c01d264:	b510      	push	{r4, lr}
 c01d266:	4604      	mov	r4, r0
    mbedtls_mpi_init( &pt->X );
 c01d268:	f007 fc86 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 c01d26c:	f104 000c 	add.w	r0, r4, #12
 c01d270:	f007 fc82 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 c01d274:	f104 0018 	add.w	r0, r4, #24
}
 c01d278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_init( &pt->Z );
 c01d27c:	f007 bc7c 	b.w	c024b78 <mbedtls_mpi_init>

0c01d280 <mbedtls_ecp_group_init>:
{
 c01d280:	b538      	push	{r3, r4, r5, lr}
    grp->id = MBEDTLS_ECP_DP_NONE;
 c01d282:	2500      	movs	r5, #0
{
 c01d284:	4604      	mov	r4, r0
    grp->id = MBEDTLS_ECP_DP_NONE;
 c01d286:	f800 5b04 	strb.w	r5, [r0], #4
    mbedtls_mpi_init( &grp->P );
 c01d28a:	f007 fc75 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
 c01d28e:	f104 0010 	add.w	r0, r4, #16
 c01d292:	f007 fc71 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
 c01d296:	f104 001c 	add.w	r0, r4, #28
 c01d29a:	f007 fc6d 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
 c01d29e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 c01d2a2:	f7ff ffdf 	bl	c01d264 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
 c01d2a6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 c01d2aa:	f007 fc65 	bl	c024b78 <mbedtls_mpi_init>
    grp->nbits = 0;
 c01d2ae:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
    grp->modp = NULL;
 c01d2b2:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
    grp->t_post = NULL;
 c01d2b6:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    grp->T = NULL;
 c01d2ba:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
    grp->st_modulus_size = 0;
 c01d2be:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    grp->st_p = NULL;
 c01d2c2:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    grp->st_a_abs = NULL;
 c01d2c6:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
    grp->st_gx = NULL;
 c01d2ca:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
    grp->st_n = NULL;
 c01d2ce:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
}
 c01d2d2:	bd38      	pop	{r3, r4, r5, pc}

0c01d2d4 <mbedtls_ecp_keypair_init>:
{
 c01d2d4:	b510      	push	{r4, lr}
 c01d2d6:	4604      	mov	r4, r0
    mbedtls_ecp_group_init( &key->grp );
 c01d2d8:	f7ff ffd2 	bl	c01d280 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 c01d2dc:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 c01d2e0:	f007 fc4a 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 c01d2e4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
}
 c01d2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_init( &key->Q );
 c01d2ec:	f7ff bfba 	b.w	c01d264 <mbedtls_ecp_point_init>

0c01d2f0 <mbedtls_ecp_point_free>:
    if( pt == NULL )
 c01d2f0:	b108      	cbz	r0, c01d2f6 <mbedtls_ecp_point_free+0x6>
 c01d2f2:	f7ff bf75 	b.w	c01d1e0 <mbedtls_ecp_point_free.part.2>
}
 c01d2f6:	4770      	bx	lr

0c01d2f8 <mbedtls_ecp_group_free>:
{
 c01d2f8:	b570      	push	{r4, r5, r6, lr}
    if( grp == NULL )
 c01d2fa:	4604      	mov	r4, r0
 c01d2fc:	2800      	cmp	r0, #0
 c01d2fe:	d06a      	beq.n	c01d3d6 <mbedtls_ecp_group_free+0xde>
    if( grp->h != 1 )
 c01d300:	6e03      	ldr	r3, [r0, #96]	; 0x60
 c01d302:	2b01      	cmp	r3, #1
 c01d304:	d012      	beq.n	c01d32c <mbedtls_ecp_group_free+0x34>
        mbedtls_mpi_free( &grp->P );
 c01d306:	3004      	adds	r0, #4
 c01d308:	f007 fc3c 	bl	c024b84 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 c01d30c:	f104 0010 	add.w	r0, r4, #16
 c01d310:	f007 fc38 	bl	c024b84 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 c01d314:	f104 001c 	add.w	r0, r4, #28
 c01d318:	f007 fc34 	bl	c024b84 <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 c01d31c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 c01d320:	f7ff ffe6 	bl	c01d2f0 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 c01d324:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 c01d328:	f007 fc2c 	bl	c024b84 <mbedtls_mpi_free>
    if( grp->T != NULL )
 c01d32c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 c01d32e:	2b00      	cmp	r3, #0
 c01d330:	d14e      	bne.n	c01d3d0 <mbedtls_ecp_group_free+0xd8>
    if ( grp->st_p != NULL )
 c01d332:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 c01d336:	b130      	cbz	r0, c01d346 <mbedtls_ecp_group_free+0x4e>
        mbedtls_platform_zeroize( grp->st_p, grp->st_modulus_size );
 c01d338:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 c01d33a:	f00c ffb1 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( grp->st_p );
 c01d33e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 c01d342:	f00c ff9d 	bl	c02a280 <mbedtls_free>
    if ( grp->st_a_abs != NULL )
 c01d346:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 c01d34a:	b130      	cbz	r0, c01d35a <mbedtls_ecp_group_free+0x62>
        mbedtls_platform_zeroize( grp->st_a_abs, grp->st_modulus_size );
 c01d34c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 c01d34e:	f00c ffa7 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( grp->st_a_abs );
 c01d352:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 c01d356:	f00c ff93 	bl	c02a280 <mbedtls_free>
    if ( grp->st_b != NULL )
 c01d35a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 c01d35e:	b130      	cbz	r0, c01d36e <mbedtls_ecp_group_free+0x76>
        mbedtls_platform_zeroize( grp->st_b, grp->st_modulus_size );
 c01d360:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 c01d362:	f00c ff9d 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( grp->st_b );
 c01d366:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 c01d36a:	f00c ff89 	bl	c02a280 <mbedtls_free>
    if ( grp->st_gx != NULL )
 c01d36e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 c01d372:	b130      	cbz	r0, c01d382 <mbedtls_ecp_group_free+0x8a>
        mbedtls_platform_zeroize( grp->st_gx, grp->st_modulus_size );
 c01d374:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 c01d376:	f00c ff93 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( grp->st_gx );
 c01d37a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 c01d37e:	f00c ff7f 	bl	c02a280 <mbedtls_free>
    if ( grp->st_gy != NULL )
 c01d382:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 c01d386:	b130      	cbz	r0, c01d396 <mbedtls_ecp_group_free+0x9e>
        mbedtls_platform_zeroize( grp->st_gy, grp->st_modulus_size );
 c01d388:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 c01d38a:	f00c ff89 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( grp->st_gy );
 c01d38e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 c01d392:	f00c ff75 	bl	c02a280 <mbedtls_free>
    if ( grp->st_n != NULL )
 c01d396:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 c01d39a:	b138      	cbz	r0, c01d3ac <mbedtls_ecp_group_free+0xb4>
        mbedtls_platform_zeroize( grp->st_n, grp->st_order_size );
 c01d39c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 c01d3a0:	f00c ff7e 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( grp->st_n );
 c01d3a4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 c01d3a8:	f00c ff6a 	bl	c02a280 <mbedtls_free>
    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 c01d3ac:	4620      	mov	r0, r4
}
 c01d3ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 c01d3b2:	21a0      	movs	r1, #160	; 0xa0
 c01d3b4:	f00c bf74 	b.w	c02a2a0 <mbedtls_platform_zeroize>
            mbedtls_ecp_point_free( &grp->T[i] );
 c01d3b8:	fb06 0005 	mla	r0, r6, r5, r0
 c01d3bc:	f7ff ff98 	bl	c01d2f0 <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 c01d3c0:	3501      	adds	r5, #1
 c01d3c2:	e9d4 031d 	ldrd	r0, r3, [r4, #116]	; 0x74
 c01d3c6:	42ab      	cmp	r3, r5
 c01d3c8:	d8f6      	bhi.n	c01d3b8 <mbedtls_ecp_group_free+0xc0>
        mbedtls_free( grp->T );
 c01d3ca:	f00c ff59 	bl	c02a280 <mbedtls_free>
 c01d3ce:	e7b0      	b.n	c01d332 <mbedtls_ecp_group_free+0x3a>
        for( i = 0; i < grp->T_size; i++ )
 c01d3d0:	2500      	movs	r5, #0
            mbedtls_ecp_point_free( &grp->T[i] );
 c01d3d2:	2624      	movs	r6, #36	; 0x24
 c01d3d4:	e7f5      	b.n	c01d3c2 <mbedtls_ecp_group_free+0xca>
}
 c01d3d6:	bd70      	pop	{r4, r5, r6, pc}

0c01d3d8 <mbedtls_ecp_keypair_free>:
{
 c01d3d8:	b510      	push	{r4, lr}
    if( key == NULL )
 c01d3da:	4604      	mov	r4, r0
 c01d3dc:	b158      	cbz	r0, c01d3f6 <mbedtls_ecp_keypair_free+0x1e>
    mbedtls_ecp_group_free( &key->grp );
 c01d3de:	f7ff ff8b 	bl	c01d2f8 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 c01d3e2:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 c01d3e6:	f007 fbcd 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 c01d3ea:	f104 00ac 	add.w	r0, r4, #172	; 0xac
}
 c01d3ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_free( &key->Q );
 c01d3f2:	f7ff bf7d 	b.w	c01d2f0 <mbedtls_ecp_point_free>
}
 c01d3f6:	bd10      	pop	{r4, pc}

0c01d3f8 <mbedtls_ecp_copy>:
{
 c01d3f8:	b538      	push	{r3, r4, r5, lr}
 c01d3fa:	4604      	mov	r4, r0
 c01d3fc:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 c01d3fe:	f007 fbf9 	bl	c024bf4 <mbedtls_mpi_copy>
 c01d402:	b970      	cbnz	r0, c01d422 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 c01d404:	f105 010c 	add.w	r1, r5, #12
 c01d408:	f104 000c 	add.w	r0, r4, #12
 c01d40c:	f007 fbf2 	bl	c024bf4 <mbedtls_mpi_copy>
 c01d410:	b938      	cbnz	r0, c01d422 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 c01d412:	f105 0118 	add.w	r1, r5, #24
 c01d416:	f104 0018 	add.w	r0, r4, #24
}
 c01d41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 c01d41e:	f007 bbe9 	b.w	c024bf4 <mbedtls_mpi_copy>
}
 c01d422:	bd38      	pop	{r3, r4, r5, pc}

0c01d424 <mbedtls_ecp_group_copy>:
    return( mbedtls_ecp_group_load( dst, src->id ) );
 c01d424:	7809      	ldrb	r1, [r1, #0]
 c01d426:	f001 b833 	b.w	c01e490 <mbedtls_ecp_group_load>

0c01d42a <mbedtls_ecp_set_zero>:
{
 c01d42a:	b510      	push	{r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 c01d42c:	2101      	movs	r1, #1
{
 c01d42e:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 c01d430:	f007 fc62 	bl	c024cf8 <mbedtls_mpi_lset>
 c01d434:	b960      	cbnz	r0, c01d450 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 c01d436:	2101      	movs	r1, #1
 c01d438:	f104 000c 	add.w	r0, r4, #12
 c01d43c:	f007 fc5c 	bl	c024cf8 <mbedtls_mpi_lset>
 c01d440:	b930      	cbnz	r0, c01d450 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 c01d442:	4601      	mov	r1, r0
 c01d444:	f104 0018 	add.w	r0, r4, #24
}
 c01d448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 c01d44c:	f007 bc54 	b.w	c024cf8 <mbedtls_mpi_lset>
}
 c01d450:	bd10      	pop	{r4, pc}

0c01d452 <mbedtls_ecp_is_zero>:
{
 c01d452:	b508      	push	{r3, lr}
    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
 c01d454:	2100      	movs	r1, #0
 c01d456:	3018      	adds	r0, #24
 c01d458:	f007 ff12 	bl	c025280 <mbedtls_mpi_cmp_int>
}
 c01d45c:	fab0 f080 	clz	r0, r0
 c01d460:	0940      	lsrs	r0, r0, #5
 c01d462:	bd08      	pop	{r3, pc}

0c01d464 <mbedtls_ecp_point_write_binary>:
{
 c01d464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01d468:	4683      	mov	fp, r0
 c01d46a:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
    plen = mbedtls_mpi_size( &grp->P );
 c01d46e:	3004      	adds	r0, #4
{
 c01d470:	460f      	mov	r7, r1
 c01d472:	4692      	mov	sl, r2
 c01d474:	4699      	mov	r9, r3
    plen = mbedtls_mpi_size( &grp->P );
 c01d476:	f007 fccf 	bl	c024e18 <mbedtls_mpi_size>
 c01d47a:	4605      	mov	r5, r0
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c01d47c:	4658      	mov	r0, fp
 c01d47e:	f7ff fee7 	bl	c01d250 <mbedtls_ecp_get_type>
 c01d482:	2802      	cmp	r0, #2
 c01d484:	d123      	bne.n	c01d4ce <mbedtls_ecp_point_write_binary+0x6a>
        if( buflen < *olen )
 c01d486:	4545      	cmp	r5, r8
        *olen = plen;
 c01d488:	f8c9 5000 	str.w	r5, [r9]
        if( buflen < *olen )
 c01d48c:	d903      	bls.n	c01d496 <mbedtls_ecp_point_write_binary+0x32>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 c01d48e:	4e29      	ldr	r6, [pc, #164]	; (c01d534 <mbedtls_ecp_point_write_binary+0xd0>)
}
 c01d490:	4630      	mov	r0, r6
 c01d492:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary_le( &P->X, buf, plen ) );
 c01d496:	462a      	mov	r2, r5
 c01d498:	4621      	mov	r1, r4
 c01d49a:	4638      	mov	r0, r7
 c01d49c:	f007 fd2e 	bl	c024efc <mbedtls_mpi_write_binary_le>
 c01d4a0:	4606      	mov	r6, r0
 c01d4a2:	2800      	cmp	r0, #0
 c01d4a4:	d1f4      	bne.n	c01d490 <mbedtls_ecp_point_write_binary+0x2c>
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 c01d4a6:	4658      	mov	r0, fp
 c01d4a8:	f7ff fed2 	bl	c01d250 <mbedtls_ecp_get_type>
 c01d4ac:	2801      	cmp	r0, #1
 c01d4ae:	4683      	mov	fp, r0
 c01d4b0:	d1ee      	bne.n	c01d490 <mbedtls_ecp_point_write_binary+0x2c>
        if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 c01d4b2:	2100      	movs	r1, #0
 c01d4b4:	f107 0018 	add.w	r0, r7, #24
 c01d4b8:	f007 fee2 	bl	c025280 <mbedtls_mpi_cmp_int>
 c01d4bc:	b948      	cbnz	r0, c01d4d2 <mbedtls_ecp_point_write_binary+0x6e>
            if( buflen < 1 )
 c01d4be:	f1b8 0f00 	cmp.w	r8, #0
 c01d4c2:	d0e4      	beq.n	c01d48e <mbedtls_ecp_point_write_binary+0x2a>
            buf[0] = 0x00;
 c01d4c4:	7020      	strb	r0, [r4, #0]
            return( 0 );
 c01d4c6:	4606      	mov	r6, r0
            *olen = 1;
 c01d4c8:	f8c9 b000 	str.w	fp, [r9]
            return( 0 );
 c01d4cc:	e7e0      	b.n	c01d490 <mbedtls_ecp_point_write_binary+0x2c>
    int ret = MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;
 c01d4ce:	4e1a      	ldr	r6, [pc, #104]	; (c01d538 <mbedtls_ecp_point_write_binary+0xd4>)
 c01d4d0:	e7e9      	b.n	c01d4a6 <mbedtls_ecp_point_write_binary+0x42>
        if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
 c01d4d2:	f1ba 0f00 	cmp.w	sl, #0
 c01d4d6:	d119      	bne.n	c01d50c <mbedtls_ecp_point_write_binary+0xa8>
            *olen = 2 * plen + 1;
 c01d4d8:	006b      	lsls	r3, r5, #1
 c01d4da:	3301      	adds	r3, #1
            if( buflen < *olen )
 c01d4dc:	4543      	cmp	r3, r8
            *olen = 2 * plen + 1;
 c01d4de:	f8c9 3000 	str.w	r3, [r9]
            if( buflen < *olen )
 c01d4e2:	d8d4      	bhi.n	c01d48e <mbedtls_ecp_point_write_binary+0x2a>
            buf[0] = 0x04;
 c01d4e4:	4621      	mov	r1, r4
 c01d4e6:	2304      	movs	r3, #4
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 c01d4e8:	462a      	mov	r2, r5
            buf[0] = 0x04;
 c01d4ea:	f801 3b01 	strb.w	r3, [r1], #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 c01d4ee:	4638      	mov	r0, r7
 c01d4f0:	f007 fd39 	bl	c024f66 <mbedtls_mpi_write_binary>
 c01d4f4:	4606      	mov	r6, r0
 c01d4f6:	2800      	cmp	r0, #0
 c01d4f8:	d1ca      	bne.n	c01d490 <mbedtls_ecp_point_write_binary+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
 c01d4fa:	462a      	mov	r2, r5
 c01d4fc:	1c69      	adds	r1, r5, #1
 c01d4fe:	4421      	add	r1, r4
 c01d500:	f107 000c 	add.w	r0, r7, #12
}
 c01d504:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 c01d508:	f007 bd2d 	b.w	c024f66 <mbedtls_mpi_write_binary>
        else if( format == MBEDTLS_ECP_PF_COMPRESSED )
 c01d50c:	f1ba 0f01 	cmp.w	sl, #1
 c01d510:	d1be      	bne.n	c01d490 <mbedtls_ecp_point_write_binary+0x2c>
            *olen = plen + 1;
 c01d512:	1c6b      	adds	r3, r5, #1
            if( buflen < *olen )
 c01d514:	4543      	cmp	r3, r8
            *olen = plen + 1;
 c01d516:	f8c9 3000 	str.w	r3, [r9]
            if( buflen < *olen )
 c01d51a:	d8b8      	bhi.n	c01d48e <mbedtls_ecp_point_write_binary+0x2a>
            buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
 c01d51c:	2100      	movs	r1, #0
 c01d51e:	f107 000c 	add.w	r0, r7, #12
 c01d522:	f007 fc05 	bl	c024d30 <mbedtls_mpi_get_bit>
 c01d526:	4621      	mov	r1, r4
 c01d528:	3002      	adds	r0, #2
 c01d52a:	f801 0b01 	strb.w	r0, [r1], #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 c01d52e:	462a      	mov	r2, r5
 c01d530:	4638      	mov	r0, r7
 c01d532:	e7e7      	b.n	c01d504 <mbedtls_ecp_point_write_binary+0xa0>
 c01d534:	ffffb100 	.word	0xffffb100
 c01d538:	ffffb180 	.word	0xffffb180

0c01d53c <mbedtls_ecp_point_read_binary>:
{
 c01d53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c01d540:	4681      	mov	r9, r0
 c01d542:	460d      	mov	r5, r1
 c01d544:	4690      	mov	r8, r2
    if( ilen < 1 )
 c01d546:	461e      	mov	r6, r3
 c01d548:	b91b      	cbnz	r3, c01d552 <mbedtls_ecp_point_read_binary+0x16>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c01d54a:	4c32      	ldr	r4, [pc, #200]	; (c01d614 <mbedtls_ecp_point_read_binary+0xd8>)
}
 c01d54c:	4620      	mov	r0, r4
 c01d54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    plen = mbedtls_mpi_size( &grp->P );
 c01d552:	3004      	adds	r0, #4
 c01d554:	f007 fc60 	bl	c024e18 <mbedtls_mpi_size>
 c01d558:	4607      	mov	r7, r0
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c01d55a:	4648      	mov	r0, r9
 c01d55c:	f7ff fe78 	bl	c01d250 <mbedtls_ecp_get_type>
 c01d560:	2802      	cmp	r0, #2
 c01d562:	d133      	bne.n	c01d5cc <mbedtls_ecp_point_read_binary+0x90>
        if( plen != ilen )
 c01d564:	42be      	cmp	r6, r7
 c01d566:	d1f0      	bne.n	c01d54a <mbedtls_ecp_point_read_binary+0xe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary_le( &pt->X, buf, plen ) );
 c01d568:	4632      	mov	r2, r6
 c01d56a:	4641      	mov	r1, r8
 c01d56c:	4628      	mov	r0, r5
 c01d56e:	f007 fc59 	bl	c024e24 <mbedtls_mpi_read_binary_le>
 c01d572:	4604      	mov	r4, r0
 c01d574:	2800      	cmp	r0, #0
 c01d576:	d1e9      	bne.n	c01d54c <mbedtls_ecp_point_read_binary+0x10>
        mbedtls_mpi_free( &pt->Y );
 c01d578:	f105 000c 	add.w	r0, r5, #12
 c01d57c:	f007 fb02 	bl	c024b84 <mbedtls_mpi_free>
        if( grp->id == MBEDTLS_ECP_DP_CURVE25519 )
 c01d580:	f899 3000 	ldrb.w	r3, [r9]
 c01d584:	2b09      	cmp	r3, #9
 c01d586:	d017      	beq.n	c01d5b8 <mbedtls_ecp_point_read_binary+0x7c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 c01d588:	2101      	movs	r1, #1
 c01d58a:	f105 0018 	add.w	r0, r5, #24
 c01d58e:	f007 fbb3 	bl	c024cf8 <mbedtls_mpi_lset>
 c01d592:	4604      	mov	r4, r0
 c01d594:	2800      	cmp	r0, #0
 c01d596:	d1d9      	bne.n	c01d54c <mbedtls_ecp_point_read_binary+0x10>
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 c01d598:	4648      	mov	r0, r9
 c01d59a:	f7ff fe59 	bl	c01d250 <mbedtls_ecp_get_type>
 c01d59e:	2801      	cmp	r0, #1
 c01d5a0:	4681      	mov	r9, r0
 c01d5a2:	d1d3      	bne.n	c01d54c <mbedtls_ecp_point_read_binary+0x10>
        if( buf[0] == 0x00 )
 c01d5a4:	f898 3000 	ldrb.w	r3, [r8]
 c01d5a8:	b993      	cbnz	r3, c01d5d0 <mbedtls_ecp_point_read_binary+0x94>
            if( ilen == 1 )
 c01d5aa:	2e01      	cmp	r6, #1
 c01d5ac:	d1cd      	bne.n	c01d54a <mbedtls_ecp_point_read_binary+0xe>
                return( mbedtls_ecp_set_zero( pt ) );
 c01d5ae:	4628      	mov	r0, r5
}
 c01d5b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                return( mbedtls_ecp_set_zero( pt ) );
 c01d5b4:	f7ff bf39 	b.w	c01d42a <mbedtls_ecp_set_zero>
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &pt->X, plen * 8 - 1, 0 ) );
 c01d5b8:	00f1      	lsls	r1, r6, #3
 c01d5ba:	4622      	mov	r2, r4
 c01d5bc:	3901      	subs	r1, #1
 c01d5be:	4628      	mov	r0, r5
 c01d5c0:	f007 fbc6 	bl	c024d50 <mbedtls_mpi_set_bit>
 c01d5c4:	4604      	mov	r4, r0
 c01d5c6:	2800      	cmp	r0, #0
 c01d5c8:	d0de      	beq.n	c01d588 <mbedtls_ecp_point_read_binary+0x4c>
 c01d5ca:	e7bf      	b.n	c01d54c <mbedtls_ecp_point_read_binary+0x10>
    int ret = MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;
 c01d5cc:	4c12      	ldr	r4, [pc, #72]	; (c01d618 <mbedtls_ecp_point_read_binary+0xdc>)
 c01d5ce:	e7e3      	b.n	c01d598 <mbedtls_ecp_point_read_binary+0x5c>
        if( buf[0] != 0x04 )
 c01d5d0:	2b04      	cmp	r3, #4
 c01d5d2:	d11d      	bne.n	c01d610 <mbedtls_ecp_point_read_binary+0xd4>
        if( ilen != 2 * plen + 1 )
 c01d5d4:	007b      	lsls	r3, r7, #1
 c01d5d6:	3301      	adds	r3, #1
 c01d5d8:	42b3      	cmp	r3, r6
 c01d5da:	d1b6      	bne.n	c01d54a <mbedtls_ecp_point_read_binary+0xe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
 c01d5dc:	463a      	mov	r2, r7
 c01d5de:	f108 0101 	add.w	r1, r8, #1
 c01d5e2:	4628      	mov	r0, r5
 c01d5e4:	f007 fc52 	bl	c024e8c <mbedtls_mpi_read_binary>
 c01d5e8:	4604      	mov	r4, r0
 c01d5ea:	2800      	cmp	r0, #0
 c01d5ec:	d1ae      	bne.n	c01d54c <mbedtls_ecp_point_read_binary+0x10>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y,
 c01d5ee:	1c79      	adds	r1, r7, #1
 c01d5f0:	463a      	mov	r2, r7
 c01d5f2:	4441      	add	r1, r8
 c01d5f4:	f105 000c 	add.w	r0, r5, #12
 c01d5f8:	f007 fc48 	bl	c024e8c <mbedtls_mpi_read_binary>
 c01d5fc:	4604      	mov	r4, r0
 c01d5fe:	2800      	cmp	r0, #0
 c01d600:	d1a4      	bne.n	c01d54c <mbedtls_ecp_point_read_binary+0x10>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 c01d602:	4649      	mov	r1, r9
 c01d604:	f105 0018 	add.w	r0, r5, #24
}
 c01d608:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 c01d60c:	f007 bb74 	b.w	c024cf8 <mbedtls_mpi_lset>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 c01d610:	4c01      	ldr	r4, [pc, #4]	; (c01d618 <mbedtls_ecp_point_read_binary+0xdc>)
 c01d612:	e79b      	b.n	c01d54c <mbedtls_ecp_point_read_binary+0x10>
 c01d614:	ffffb080 	.word	0xffffb080
 c01d618:	ffffb180 	.word	0xffffb180

0c01d61c <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
 c01d61c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c01d620:	460f      	mov	r7, r1
 c01d622:	b08f      	sub	sp, #60	; 0x3c
 c01d624:	4605      	mov	r5, r0
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 c01d626:	2101      	movs	r1, #1
 c01d628:	f107 0018 	add.w	r0, r7, #24
 c01d62c:	f007 fe28 	bl	c025280 <mbedtls_mpi_cmp_int>
 c01d630:	4604      	mov	r4, r0
 c01d632:	b108      	cbz	r0, c01d638 <mbedtls_ecp_check_pubkey+0x1c>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 c01d634:	4c4b      	ldr	r4, [pc, #300]	; (c01d764 <mbedtls_ecp_check_pubkey+0x148>)
 c01d636:	e00d      	b.n	c01d654 <mbedtls_ecp_check_pubkey+0x38>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );

#if defined(ECP_MONTGOMERY)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c01d638:	4628      	mov	r0, r5
 c01d63a:	f7ff fe09 	bl	c01d250 <mbedtls_ecp_get_type>
 c01d63e:	2802      	cmp	r0, #2
 c01d640:	4606      	mov	r6, r0
 c01d642:	d10b      	bne.n	c01d65c <mbedtls_ecp_check_pubkey+0x40>
    if( mbedtls_mpi_size( &pt->X ) > ( grp->nbits + 7 ) / 8 )
 c01d644:	4638      	mov	r0, r7
 c01d646:	f007 fbe7 	bl	c024e18 <mbedtls_mpi_size>
 c01d64a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 c01d64c:	3307      	adds	r3, #7
 c01d64e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
 c01d652:	d8ef      	bhi.n	c01d634 <mbedtls_ecp_check_pubkey+0x18>
#if defined(ECP_SHORTWEIERSTRASS)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 c01d654:	4620      	mov	r0, r4
 c01d656:	b00f      	add	sp, #60	; 0x3c
 c01d658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 c01d65c:	2801      	cmp	r0, #1
 c01d65e:	d17f      	bne.n	c01d760 <mbedtls_ecp_check_pubkey+0x144>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 c01d660:	4621      	mov	r1, r4
 c01d662:	4638      	mov	r0, r7
    PKA_HandleTypeDef hpka = {0};
 c01d664:	e9cd 4404 	strd	r4, r4, [sp, #16]
 c01d668:	9406      	str	r4, [sp, #24]
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 c01d66a:	f007 fe09 	bl	c025280 <mbedtls_mpi_cmp_int>
 c01d66e:	2800      	cmp	r0, #0
 c01d670:	dbe0      	blt.n	c01d634 <mbedtls_ecp_check_pubkey+0x18>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 c01d672:	f107 080c 	add.w	r8, r7, #12
 c01d676:	4621      	mov	r1, r4
 c01d678:	4640      	mov	r0, r8
 c01d67a:	f007 fe01 	bl	c025280 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 c01d67e:	2800      	cmp	r0, #0
 c01d680:	dbd8      	blt.n	c01d634 <mbedtls_ecp_check_pubkey+0x18>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 c01d682:	f105 0904 	add.w	r9, r5, #4
 c01d686:	4649      	mov	r1, r9
 c01d688:	4638      	mov	r0, r7
 c01d68a:	f007 fdb9 	bl	c025200 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 c01d68e:	2800      	cmp	r0, #0
 c01d690:	dad0      	bge.n	c01d634 <mbedtls_ecp_check_pubkey+0x18>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 c01d692:	4649      	mov	r1, r9
 c01d694:	4640      	mov	r0, r8
 c01d696:	f007 fdb3 	bl	c025200 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 c01d69a:	2800      	cmp	r0, #0
 c01d69c:	daca      	bge.n	c01d634 <mbedtls_ecp_check_pubkey+0x18>
    ECC_PointCheck.modulus     = grp->st_p;
 c01d69e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    ECC_PointCheck.modulusSize = grp->st_modulus_size;
 c01d6a2:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    ECC_PointCheck.modulus     = grp->st_p;
 c01d6a4:	930b      	str	r3, [sp, #44]	; 0x2c
    ECC_PointCheck.coefSign    = grp->st_a_sign;
 c01d6a6:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
    ECC_PointCheck.modulusSize = grp->st_modulus_size;
 c01d6aa:	9007      	str	r0, [sp, #28]
    ECC_PointCheck.coefSign    = grp->st_a_sign;
 c01d6ac:	9308      	str	r3, [sp, #32]
    ECC_PointCheck.coefA       = grp->st_a_abs;
 c01d6ae:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    pt_binary = mbedtls_calloc(( 2U * grp->st_modulus_size ) + 1U, sizeof( uint8_t ));
 c01d6b2:	0040      	lsls	r0, r0, #1
    ECC_PointCheck.coefA       = grp->st_a_abs;
 c01d6b4:	9309      	str	r3, [sp, #36]	; 0x24
    ECC_PointCheck.coefB       = grp->st_b;
 c01d6b6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    pt_binary = mbedtls_calloc(( 2U * grp->st_modulus_size ) + 1U, sizeof( uint8_t ));
 c01d6ba:	4631      	mov	r1, r6
 c01d6bc:	3001      	adds	r0, #1
    ECC_PointCheck.coefB       = grp->st_b;
 c01d6be:	930a      	str	r3, [sp, #40]	; 0x28
    pt_binary = mbedtls_calloc(( 2U * grp->st_modulus_size ) + 1U, sizeof( uint8_t ));
 c01d6c0:	f00c fdd8 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK((pt_binary == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01d6c4:	4606      	mov	r6, r0
 c01d6c6:	2800      	cmp	r0, #0
 c01d6c8:	d048      	beq.n	c01d75c <mbedtls_ecp_check_pubkey+0x140>
    MBEDTLS_MPI_CHK( mbedtls_ecp_point_write_binary( grp, pt, MBEDTLS_ECP_PF_UNCOMPRESSED, &olen, pt_binary, ( 2U * grp->st_modulus_size ) + 1U ) );
 c01d6ca:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 c01d6cc:	4622      	mov	r2, r4
 c01d6ce:	005b      	lsls	r3, r3, #1
 c01d6d0:	3301      	adds	r3, #1
 c01d6d2:	e9cd 0300 	strd	r0, r3, [sp]
 c01d6d6:	4639      	mov	r1, r7
 c01d6d8:	ab02      	add	r3, sp, #8
 c01d6da:	4628      	mov	r0, r5
 c01d6dc:	f7ff fec2 	bl	c01d464 <mbedtls_ecp_point_write_binary>
 c01d6e0:	4604      	mov	r4, r0
 c01d6e2:	b9b8      	cbnz	r0, c01d714 <mbedtls_ecp_check_pubkey+0xf8>
    ECC_PointCheck.pointX = pt_binary + 1U;
 c01d6e4:	1c73      	adds	r3, r6, #1
 c01d6e6:	930c      	str	r3, [sp, #48]	; 0x30
    ECC_PointCheck.pointY = pt_binary + grp->st_modulus_size + 1U;
 c01d6e8:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    MBEDTLS_MPI_CHK((HAL_PKA_Init(&hpka) != HAL_OK) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0);
 c01d6ea:	a804      	add	r0, sp, #16
    ECC_PointCheck.pointY = pt_binary + grp->st_modulus_size + 1U;
 c01d6ec:	3301      	adds	r3, #1
 c01d6ee:	4433      	add	r3, r6
 c01d6f0:	930d      	str	r3, [sp, #52]	; 0x34
    __HAL_RCC_PKA_CLK_ENABLE();
 c01d6f2:	4b1d      	ldr	r3, [pc, #116]	; (c01d768 <mbedtls_ecp_check_pubkey+0x14c>)
 c01d6f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01d6f6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 c01d6fa:	64da      	str	r2, [r3, #76]	; 0x4c
 c01d6fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c01d6fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c01d702:	9303      	str	r3, [sp, #12]
 c01d704:	9b03      	ldr	r3, [sp, #12]
    hpka.Instance = PKA;
 c01d706:	4b19      	ldr	r3, [pc, #100]	; (c01d76c <mbedtls_ecp_check_pubkey+0x150>)
 c01d708:	9304      	str	r3, [sp, #16]
    MBEDTLS_MPI_CHK((HAL_PKA_Init(&hpka) != HAL_OK) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0);
 c01d70a:	f005 f9b0 	bl	c022a6e <HAL_PKA_Init>
 c01d70e:	b1a8      	cbz	r0, c01d73c <mbedtls_ecp_check_pubkey+0x120>
 c01d710:	f06f 046f 	mvn.w	r4, #111	; 0x6f
    HAL_PKA_DeInit(&hpka);
 c01d714:	a804      	add	r0, sp, #16
 c01d716:	f005 f9d3 	bl	c022ac0 <HAL_PKA_DeInit>
    __HAL_RCC_PKA_CLK_DISABLE();
 c01d71a:	4a13      	ldr	r2, [pc, #76]	; (c01d768 <mbedtls_ecp_check_pubkey+0x14c>)
 c01d71c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 c01d71e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c01d722:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (pt_binary != NULL)
 c01d724:	2e00      	cmp	r6, #0
 c01d726:	d095      	beq.n	c01d654 <mbedtls_ecp_check_pubkey+0x38>
        mbedtls_platform_zeroize(pt_binary, ( 2U * grp->st_modulus_size ) + 1U );
 c01d728:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 c01d72a:	4630      	mov	r0, r6
 c01d72c:	0049      	lsls	r1, r1, #1
 c01d72e:	3101      	adds	r1, #1
 c01d730:	f00c fdb6 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free(pt_binary);
 c01d734:	4630      	mov	r0, r6
 c01d736:	f00c fda3 	bl	c02a280 <mbedtls_free>
        return( ecp_check_pubkey_sw( grp, pt ) );
 c01d73a:	e78b      	b.n	c01d654 <mbedtls_ecp_check_pubkey+0x38>
    MBEDTLS_MPI_CHK((HAL_PKA_PointCheck(&hpka, &ECC_PointCheck, ST_ECP_TIMEOUT) != HAL_OK) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0);
 c01d73c:	f241 3288 	movw	r2, #5000	; 0x1388
 c01d740:	a907      	add	r1, sp, #28
 c01d742:	a804      	add	r0, sp, #16
 c01d744:	f005 fd47 	bl	c0231d6 <HAL_PKA_PointCheck>
 c01d748:	2800      	cmp	r0, #0
 c01d74a:	d1e1      	bne.n	c01d710 <mbedtls_ecp_check_pubkey+0xf4>
    if( HAL_PKA_PointCheck_IsOnCurve(&hpka) != 1U)
 c01d74c:	a804      	add	r0, sp, #16
 c01d74e:	f005 f9d2 	bl	c022af6 <HAL_PKA_PointCheck_IsOnCurve>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 c01d752:	4b04      	ldr	r3, [pc, #16]	; (c01d764 <mbedtls_ecp_check_pubkey+0x148>)
 c01d754:	2801      	cmp	r0, #1
 c01d756:	bf18      	it	ne
 c01d758:	461c      	movne	r4, r3
 c01d75a:	e7db      	b.n	c01d714 <mbedtls_ecp_check_pubkey+0xf8>
    MBEDTLS_MPI_CHK((pt_binary == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01d75c:	4c04      	ldr	r4, [pc, #16]	; (c01d770 <mbedtls_ecp_check_pubkey+0x154>)
 c01d75e:	e7d9      	b.n	c01d714 <mbedtls_ecp_check_pubkey+0xf8>
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c01d760:	4c04      	ldr	r4, [pc, #16]	; (c01d774 <mbedtls_ecp_check_pubkey+0x158>)
 c01d762:	e777      	b.n	c01d654 <mbedtls_ecp_check_pubkey+0x38>
 c01d764:	ffffb380 	.word	0xffffb380
 c01d768:	50021000 	.word	0x50021000
 c01d76c:	520c2000 	.word	0x520c2000
 c01d770:	ffffb280 	.word	0xffffb280
 c01d774:	ffffb080 	.word	0xffffb080

0c01d778 <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
 c01d778:	b570      	push	{r4, r5, r6, lr}
 c01d77a:	4606      	mov	r6, r0
 c01d77c:	460c      	mov	r4, r1
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( d   != NULL );

#if defined(ECP_MONTGOMERY)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c01d77e:	f7ff fd67 	bl	c01d250 <mbedtls_ecp_get_type>
 c01d782:	2802      	cmp	r0, #2
 c01d784:	4605      	mov	r5, r0
 c01d786:	d119      	bne.n	c01d7bc <mbedtls_ecp_check_privkey+0x44>
    {
        /* see RFC 7748 sec. 5 para. 5 */
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 c01d788:	2100      	movs	r1, #0
 c01d78a:	4620      	mov	r0, r4
 c01d78c:	f007 fad0 	bl	c024d30 <mbedtls_mpi_get_bit>
 c01d790:	bb18      	cbnz	r0, c01d7da <mbedtls_ecp_check_privkey+0x62>
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 c01d792:	2101      	movs	r1, #1
 c01d794:	4620      	mov	r0, r4
 c01d796:	f007 facb 	bl	c024d30 <mbedtls_mpi_get_bit>
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 c01d79a:	b9f0      	cbnz	r0, c01d7da <mbedtls_ecp_check_privkey+0x62>
            mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */
 c01d79c:	4620      	mov	r0, r4
 c01d79e:	f007 fb1b 	bl	c024dd8 <mbedtls_mpi_bitlen>
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 c01d7a2:	6df3      	ldr	r3, [r6, #92]	; 0x5c
            mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */
 c01d7a4:	3801      	subs	r0, #1
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 c01d7a6:	4298      	cmp	r0, r3
 c01d7a8:	d117      	bne.n	c01d7da <mbedtls_ecp_check_privkey+0x62>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );

        /* see [Curve25519] page 5 */
        if( grp->nbits == 254 && mbedtls_mpi_get_bit( d, 2 ) != 0 )
 c01d7aa:	28fe      	cmp	r0, #254	; 0xfe
 c01d7ac:	d104      	bne.n	c01d7b8 <mbedtls_ecp_check_privkey+0x40>
 c01d7ae:	4629      	mov	r1, r5
 c01d7b0:	4620      	mov	r0, r4
 c01d7b2:	f007 fabd 	bl	c024d30 <mbedtls_mpi_get_bit>
 c01d7b6:	b980      	cbnz	r0, c01d7da <mbedtls_ecp_check_privkey+0x62>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );

        return( 0 );
 c01d7b8:	2000      	movs	r0, #0
            return( 0 );
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 c01d7ba:	bd70      	pop	{r4, r5, r6, pc}
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 c01d7bc:	2801      	cmp	r0, #1
 c01d7be:	d10e      	bne.n	c01d7de <mbedtls_ecp_check_privkey+0x66>
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 c01d7c0:	4601      	mov	r1, r0
 c01d7c2:	4620      	mov	r0, r4
 c01d7c4:	f007 fd5c 	bl	c025280 <mbedtls_mpi_cmp_int>
 c01d7c8:	2800      	cmp	r0, #0
 c01d7ca:	db06      	blt.n	c01d7da <mbedtls_ecp_check_privkey+0x62>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 c01d7cc:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 c01d7d0:	4620      	mov	r0, r4
 c01d7d2:	f007 fd15 	bl	c025200 <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 c01d7d6:	2800      	cmp	r0, #0
 c01d7d8:	dbee      	blt.n	c01d7b8 <mbedtls_ecp_check_privkey+0x40>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 c01d7da:	4802      	ldr	r0, [pc, #8]	; (c01d7e4 <mbedtls_ecp_check_privkey+0x6c>)
 c01d7dc:	e7ed      	b.n	c01d7ba <mbedtls_ecp_check_privkey+0x42>
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c01d7de:	4802      	ldr	r0, [pc, #8]	; (c01d7e8 <mbedtls_ecp_check_privkey+0x70>)
 c01d7e0:	e7eb      	b.n	c01d7ba <mbedtls_ecp_check_privkey+0x42>
 c01d7e2:	bf00      	nop
 c01d7e4:	ffffb380 	.word	0xffffb380
 c01d7e8:	ffffb080 	.word	0xffffb080

0c01d7ec <mbedtls_ecp_mul_restartable>:
{
 c01d7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01d7f0:	4689      	mov	r9, r1
 c01d7f2:	b0af      	sub	sp, #188	; 0xbc
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 c01d7f4:	4611      	mov	r1, r2
{
 c01d7f6:	4604      	mov	r4, r0
 c01d7f8:	e9cd 2303 	strd	r2, r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 c01d7fc:	f7ff ffbc 	bl	c01d778 <mbedtls_ecp_check_privkey>
 c01d800:	4607      	mov	r7, r0
 c01d802:	2800      	cmp	r0, #0
 c01d804:	d16f      	bne.n	c01d8e6 <mbedtls_ecp_mul_restartable+0xfa>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 c01d806:	9904      	ldr	r1, [sp, #16]
 c01d808:	4620      	mov	r0, r4
 c01d80a:	f7ff ff07 	bl	c01d61c <mbedtls_ecp_check_pubkey>
 c01d80e:	4607      	mov	r7, r0
 c01d810:	2800      	cmp	r0, #0
 c01d812:	d168      	bne.n	c01d8e6 <mbedtls_ecp_mul_restartable+0xfa>
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c01d814:	4620      	mov	r0, r4
 c01d816:	f7ff fd1b 	bl	c01d250 <mbedtls_ecp_get_type>
 c01d81a:	2802      	cmp	r0, #2
 c01d81c:	f040 8266 	bne.w	c01dcec <mbedtls_ecp_mul_restartable+0x500>
    mbedtls_ecp_point_init( &RP ); mbedtls_mpi_init( &PX );
 c01d820:	a825      	add	r0, sp, #148	; 0x94
 c01d822:	f7ff fd1f 	bl	c01d264 <mbedtls_ecp_point_init>
 c01d826:	a807      	add	r0, sp, #28
 c01d828:	f007 f9a6 	bl	c024b78 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );
 c01d82c:	9904      	ldr	r1, [sp, #16]
 c01d82e:	a807      	add	r0, sp, #28
 c01d830:	f007 f9e0 	bl	c024bf4 <mbedtls_mpi_copy>
 c01d834:	4607      	mov	r7, r0
 c01d836:	2800      	cmp	r0, #0
 c01d838:	d14c      	bne.n	c01d8d4 <mbedtls_ecp_mul_restartable+0xe8>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );
 c01d83a:	9904      	ldr	r1, [sp, #16]
 c01d83c:	a825      	add	r0, sp, #148	; 0x94
 c01d83e:	f7ff fddb 	bl	c01d3f8 <mbedtls_ecp_copy>
 c01d842:	4607      	mov	r7, r0
 c01d844:	2800      	cmp	r0, #0
 c01d846:	d145      	bne.n	c01d8d4 <mbedtls_ecp_mul_restartable+0xe8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );
 c01d848:	2101      	movs	r1, #1
 c01d84a:	4648      	mov	r0, r9
 c01d84c:	f007 fa54 	bl	c024cf8 <mbedtls_mpi_lset>
 c01d850:	4607      	mov	r7, r0
 c01d852:	2800      	cmp	r0, #0
 c01d854:	d13e      	bne.n	c01d8d4 <mbedtls_ecp_mul_restartable+0xe8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );
 c01d856:	f109 0518 	add.w	r5, r9, #24
 c01d85a:	4601      	mov	r1, r0
 c01d85c:	4628      	mov	r0, r5
 c01d85e:	f007 fa4b 	bl	c024cf8 <mbedtls_mpi_lset>
 c01d862:	4607      	mov	r7, r0
 c01d864:	bbb0      	cbnz	r0, c01d8d4 <mbedtls_ecp_mul_restartable+0xe8>
    mbedtls_mpi_free( &R->Y );
 c01d866:	f109 000c 	add.w	r0, r9, #12
 c01d86a:	f007 f98b 	bl	c024b84 <mbedtls_mpi_free>
    MOD_ADD( RP.X );
 c01d86e:	1d26      	adds	r6, r4, #4
 c01d870:	4631      	mov	r1, r6
 c01d872:	a825      	add	r0, sp, #148	; 0x94
 c01d874:	f007 fcc4 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c01d878:	2800      	cmp	r0, #0
 c01d87a:	da23      	bge.n	c01d8c4 <mbedtls_ecp_mul_restartable+0xd8>
    if( f_rng != NULL )
 c01d87c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 c01d87e:	bbb3      	cbnz	r3, c01d8ee <mbedtls_ecp_mul_restartable+0x102>
    i = mbedtls_mpi_bitlen( m ); /* one past the (zero-based) most significant bit */
 c01d880:	9803      	ldr	r0, [sp, #12]
 c01d882:	f007 faa9 	bl	c024dd8 <mbedtls_mpi_bitlen>
 c01d886:	f100 38ff 	add.w	r8, r0, #4294967295
    while( i-- > 0 )
 c01d88a:	f1b8 3fff 	cmp.w	r8, #4294967295
 c01d88e:	d176      	bne.n	c01d97e <mbedtls_ecp_mul_restartable+0x192>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );
 c01d890:	4632      	mov	r2, r6
 c01d892:	4629      	mov	r1, r5
 c01d894:	4628      	mov	r0, r5
 c01d896:	f008 fcfc 	bl	c026292 <mbedtls_mpi_inv_mod>
 c01d89a:	4607      	mov	r7, r0
 c01d89c:	b9d0      	cbnz	r0, c01d8d4 <mbedtls_ecp_mul_restartable+0xe8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );
 c01d89e:	462a      	mov	r2, r5
 c01d8a0:	4649      	mov	r1, r9
 c01d8a2:	4648      	mov	r0, r9
 c01d8a4:	f007 fe12 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01d8a8:	4607      	mov	r7, r0
 c01d8aa:	b998      	cbnz	r0, c01d8d4 <mbedtls_ecp_mul_restartable+0xe8>
 c01d8ac:	4621      	mov	r1, r4
 c01d8ae:	4648      	mov	r0, r9
 c01d8b0:	f7ff fc50 	bl	c01d154 <ecp_modp>
 c01d8b4:	4607      	mov	r7, r0
 c01d8b6:	b968      	cbnz	r0, c01d8d4 <mbedtls_ecp_mul_restartable+0xe8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );
 c01d8b8:	2101      	movs	r1, #1
 c01d8ba:	4628      	mov	r0, r5
 c01d8bc:	f007 fa1c 	bl	c024cf8 <mbedtls_mpi_lset>
 c01d8c0:	4607      	mov	r7, r0
 c01d8c2:	e007      	b.n	c01d8d4 <mbedtls_ecp_mul_restartable+0xe8>
    MOD_ADD( RP.X );
 c01d8c4:	a925      	add	r1, sp, #148	; 0x94
 c01d8c6:	4632      	mov	r2, r6
 c01d8c8:	4608      	mov	r0, r1
 c01d8ca:	f007 fd50 	bl	c02536e <mbedtls_mpi_sub_abs>
 c01d8ce:	4607      	mov	r7, r0
 c01d8d0:	2800      	cmp	r0, #0
 c01d8d2:	d0cd      	beq.n	c01d870 <mbedtls_ecp_mul_restartable+0x84>
 c01d8d4:	a825      	add	r0, sp, #148	; 0x94
 c01d8d6:	f7ff fc83 	bl	c01d1e0 <mbedtls_ecp_point_free.part.2>
    mbedtls_ecp_point_free( &RP ); mbedtls_mpi_free( &PX );
 c01d8da:	a807      	add	r0, sp, #28
 c01d8dc:	f007 f952 	bl	c024b84 <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
 c01d8e0:	2f00      	cmp	r7, #0
 c01d8e2:	f000 8204 	beq.w	c01dcee <mbedtls_ecp_mul_restartable+0x502>
}
 c01d8e6:	4638      	mov	r0, r7
 c01d8e8:	b02f      	add	sp, #188	; 0xbc
 c01d8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p_size = ( grp->pbits + 7 ) / 8;
 c01d8ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
    mbedtls_mpi_init( &l );
 c01d8f0:	f10d 0888 	add.w	r8, sp, #136	; 0x88
    p_size = ( grp->pbits + 7 ) / 8;
 c01d8f4:	3307      	adds	r3, #7
 c01d8f6:	08db      	lsrs	r3, r3, #3
    mbedtls_mpi_init( &l );
 c01d8f8:	4640      	mov	r0, r8
    p_size = ( grp->pbits + 7 ) / 8;
 c01d8fa:	9305      	str	r3, [sp, #20]
    mbedtls_mpi_init( &l );
 c01d8fc:	f04f 0b0c 	mov.w	fp, #12
 c01d900:	f007 f93a 	bl	c024b78 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 c01d904:	46c2      	mov	sl, r8
 c01d906:	e9dd 2338 	ldrd	r2, r3, [sp, #224]	; 0xe0
 c01d90a:	9905      	ldr	r1, [sp, #20]
 c01d90c:	4650      	mov	r0, sl
 c01d90e:	f008 fbca 	bl	c0260a6 <mbedtls_mpi_fill_random>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 c01d912:	4607      	mov	r7, r0
 c01d914:	bb40      	cbnz	r0, c01d968 <mbedtls_ecp_mul_restartable+0x17c>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 c01d916:	4631      	mov	r1, r6
 c01d918:	4640      	mov	r0, r8
 c01d91a:	f007 fc71 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c01d91e:	2800      	cmp	r0, #0
 c01d920:	da28      	bge.n	c01d974 <mbedtls_ecp_mul_restartable+0x188>
        if( count++ > 10 )
 c01d922:	f1bb 0b01 	subs.w	fp, fp, #1
 c01d926:	f000 8293 	beq.w	c01de50 <mbedtls_ecp_mul_restartable+0x664>
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 c01d92a:	2101      	movs	r1, #1
 c01d92c:	4640      	mov	r0, r8
 c01d92e:	f007 fca7 	bl	c025280 <mbedtls_mpi_cmp_int>
 c01d932:	2800      	cmp	r0, #0
 c01d934:	dde7      	ble.n	c01d906 <mbedtls_ecp_mul_restartable+0x11a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );
 c01d936:	a925      	add	r1, sp, #148	; 0x94
 c01d938:	4642      	mov	r2, r8
 c01d93a:	4608      	mov	r0, r1
 c01d93c:	f007 fdc6 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01d940:	4607      	mov	r7, r0
 c01d942:	b988      	cbnz	r0, c01d968 <mbedtls_ecp_mul_restartable+0x17c>
 c01d944:	4621      	mov	r1, r4
 c01d946:	a825      	add	r0, sp, #148	; 0x94
 c01d948:	f7ff fc04 	bl	c01d154 <ecp_modp>
 c01d94c:	4607      	mov	r7, r0
 c01d94e:	b958      	cbnz	r0, c01d968 <mbedtls_ecp_mul_restartable+0x17c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );
 c01d950:	a92b      	add	r1, sp, #172	; 0xac
 c01d952:	4642      	mov	r2, r8
 c01d954:	4608      	mov	r0, r1
 c01d956:	f007 fdb9 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01d95a:	4607      	mov	r7, r0
 c01d95c:	b920      	cbnz	r0, c01d968 <mbedtls_ecp_mul_restartable+0x17c>
 c01d95e:	4621      	mov	r1, r4
 c01d960:	a82b      	add	r0, sp, #172	; 0xac
 c01d962:	f7ff fbf7 	bl	c01d154 <ecp_modp>
 c01d966:	4607      	mov	r7, r0
    mbedtls_mpi_free( &l );
 c01d968:	4650      	mov	r0, sl
 c01d96a:	f007 f90b 	bl	c024b84 <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );
 c01d96e:	2f00      	cmp	r7, #0
 c01d970:	d086      	beq.n	c01d880 <mbedtls_ecp_mul_restartable+0x94>
 c01d972:	e7af      	b.n	c01d8d4 <mbedtls_ecp_mul_restartable+0xe8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 c01d974:	2101      	movs	r1, #1
 c01d976:	4640      	mov	r0, r8
 c01d978:	f007 fb72 	bl	c025060 <mbedtls_mpi_shift_r>
 c01d97c:	e7c9      	b.n	c01d912 <mbedtls_ecp_mul_restartable+0x126>
        b = mbedtls_mpi_get_bit( m, i );
 c01d97e:	4641      	mov	r1, r8
 c01d980:	9803      	ldr	r0, [sp, #12]
 c01d982:	f007 f9d5 	bl	c024d30 <mbedtls_mpi_get_bit>
 c01d986:	fa5f fa80 	uxtb.w	sl, r0
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 c01d98a:	4652      	mov	r2, sl
 c01d98c:	a925      	add	r1, sp, #148	; 0x94
 c01d98e:	4648      	mov	r0, r9
 c01d990:	f007 f971 	bl	c024c76 <mbedtls_mpi_safe_cond_swap>
 c01d994:	4607      	mov	r7, r0
 c01d996:	2800      	cmp	r0, #0
 c01d998:	d19c      	bne.n	c01d8d4 <mbedtls_ecp_mul_restartable+0xe8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 c01d99a:	4652      	mov	r2, sl
 c01d99c:	a92b      	add	r1, sp, #172	; 0xac
 c01d99e:	4628      	mov	r0, r5
 c01d9a0:	f007 f969 	bl	c024c76 <mbedtls_mpi_safe_cond_swap>
 c01d9a4:	4607      	mov	r7, r0
 c01d9a6:	2800      	cmp	r0, #0
 c01d9a8:	d194      	bne.n	c01d8d4 <mbedtls_ecp_mul_restartable+0xe8>
    mbedtls_mpi_init( &A ); mbedtls_mpi_init( &AA ); mbedtls_mpi_init( &B );
 c01d9aa:	a80a      	add	r0, sp, #40	; 0x28
 c01d9ac:	f007 f8e4 	bl	c024b78 <mbedtls_mpi_init>
 c01d9b0:	a80d      	add	r0, sp, #52	; 0x34
 c01d9b2:	f007 f8e1 	bl	c024b78 <mbedtls_mpi_init>
 c01d9b6:	a810      	add	r0, sp, #64	; 0x40
 c01d9b8:	f007 f8de 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &BB ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &C );
 c01d9bc:	a813      	add	r0, sp, #76	; 0x4c
 c01d9be:	f007 f8db 	bl	c024b78 <mbedtls_mpi_init>
 c01d9c2:	a816      	add	r0, sp, #88	; 0x58
 c01d9c4:	f007 f8d8 	bl	c024b78 <mbedtls_mpi_init>
 c01d9c8:	a819      	add	r0, sp, #100	; 0x64
 c01d9ca:	f007 f8d5 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &D ); mbedtls_mpi_init( &DA ); mbedtls_mpi_init( &CB );
 c01d9ce:	a81c      	add	r0, sp, #112	; 0x70
 c01d9d0:	f007 f8d2 	bl	c024b78 <mbedtls_mpi_init>
 c01d9d4:	a81f      	add	r0, sp, #124	; 0x7c
 c01d9d6:	f007 f8cf 	bl	c024b78 <mbedtls_mpi_init>
 c01d9da:	a822      	add	r0, sp, #136	; 0x88
 c01d9dc:	f007 f8cc 	bl	c024b78 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );
 c01d9e0:	462a      	mov	r2, r5
 c01d9e2:	4649      	mov	r1, r9
 c01d9e4:	a80a      	add	r0, sp, #40	; 0x28
 c01d9e6:	f007 fd00 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c01d9ea:	4607      	mov	r7, r0
 c01d9ec:	2800      	cmp	r0, #0
 c01d9ee:	f040 8104 	bne.w	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01d9f2:	4631      	mov	r1, r6
 c01d9f4:	a80a      	add	r0, sp, #40	; 0x28
 c01d9f6:	f007 fc03 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c01d9fa:	2800      	cmp	r0, #0
 c01d9fc:	f280 8130 	bge.w	c01dc60 <mbedtls_ecp_mul_restartable+0x474>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );
 c01da00:	aa0a      	add	r2, sp, #40	; 0x28
 c01da02:	4611      	mov	r1, r2
 c01da04:	a80d      	add	r0, sp, #52	; 0x34
 c01da06:	f007 fd61 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01da0a:	4607      	mov	r7, r0
 c01da0c:	2800      	cmp	r0, #0
 c01da0e:	f040 80f4 	bne.w	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01da12:	4621      	mov	r1, r4
 c01da14:	a80d      	add	r0, sp, #52	; 0x34
 c01da16:	f7ff fb9d 	bl	c01d154 <ecp_modp>
 c01da1a:	4607      	mov	r7, r0
 c01da1c:	2800      	cmp	r0, #0
 c01da1e:	f040 80ec 	bne.w	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );
 c01da22:	f10d 0b40 	add.w	fp, sp, #64	; 0x40
 c01da26:	462a      	mov	r2, r5
 c01da28:	4649      	mov	r1, r9
 c01da2a:	4658      	mov	r0, fp
 c01da2c:	f007 fcff 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c01da30:	4607      	mov	r7, r0
 c01da32:	2800      	cmp	r0, #0
 c01da34:	f040 80e1 	bne.w	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01da38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c01da3a:	2b00      	cmp	r3, #0
 c01da3c:	f2c0 8116 	blt.w	c01dc6c <mbedtls_ecp_mul_restartable+0x480>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );
 c01da40:	aa10      	add	r2, sp, #64	; 0x40
 c01da42:	4611      	mov	r1, r2
 c01da44:	a813      	add	r0, sp, #76	; 0x4c
 c01da46:	f007 fd41 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01da4a:	4607      	mov	r7, r0
 c01da4c:	2800      	cmp	r0, #0
 c01da4e:	f040 80d4 	bne.w	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01da52:	4621      	mov	r1, r4
 c01da54:	a813      	add	r0, sp, #76	; 0x4c
 c01da56:	f7ff fb7d 	bl	c01d154 <ecp_modp>
 c01da5a:	4607      	mov	r7, r0
 c01da5c:	2800      	cmp	r0, #0
 c01da5e:	f040 80cc 	bne.w	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );
 c01da62:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 c01da66:	aa13      	add	r2, sp, #76	; 0x4c
 c01da68:	a90d      	add	r1, sp, #52	; 0x34
 c01da6a:	4658      	mov	r0, fp
 c01da6c:	f007 fcdf 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c01da70:	4607      	mov	r7, r0
 c01da72:	2800      	cmp	r0, #0
 c01da74:	f040 80c1 	bne.w	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01da78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 c01da7a:	2b00      	cmp	r3, #0
 c01da7c:	f2c0 8103 	blt.w	c01dc86 <mbedtls_ecp_mul_restartable+0x49a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );
 c01da80:	f10d 0b64 	add.w	fp, sp, #100	; 0x64
 c01da84:	aa2b      	add	r2, sp, #172	; 0xac
 c01da86:	a925      	add	r1, sp, #148	; 0x94
 c01da88:	4658      	mov	r0, fp
 c01da8a:	f007 fcae 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c01da8e:	4607      	mov	r7, r0
 c01da90:	2800      	cmp	r0, #0
 c01da92:	f040 80b2 	bne.w	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01da96:	4631      	mov	r1, r6
 c01da98:	4658      	mov	r0, fp
 c01da9a:	f007 fbb1 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c01da9e:	2800      	cmp	r0, #0
 c01daa0:	f280 80fe 	bge.w	c01dca0 <mbedtls_ecp_mul_restartable+0x4b4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );
 c01daa4:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 c01daa8:	aa2b      	add	r2, sp, #172	; 0xac
 c01daaa:	a925      	add	r1, sp, #148	; 0x94
 c01daac:	4658      	mov	r0, fp
 c01daae:	f007 fcbe 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c01dab2:	4607      	mov	r7, r0
 c01dab4:	2800      	cmp	r0, #0
 c01dab6:	f040 80a0 	bne.w	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01daba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 c01dabc:	2b00      	cmp	r3, #0
 c01dabe:	f2c0 80f5 	blt.w	c01dcac <mbedtls_ecp_mul_restartable+0x4c0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );
 c01dac2:	aa0a      	add	r2, sp, #40	; 0x28
 c01dac4:	a91c      	add	r1, sp, #112	; 0x70
 c01dac6:	a81f      	add	r0, sp, #124	; 0x7c
 c01dac8:	f007 fd00 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01dacc:	4607      	mov	r7, r0
 c01dace:	2800      	cmp	r0, #0
 c01dad0:	f040 8093 	bne.w	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01dad4:	4621      	mov	r1, r4
 c01dad6:	a81f      	add	r0, sp, #124	; 0x7c
 c01dad8:	f7ff fb3c 	bl	c01d154 <ecp_modp>
 c01dadc:	4607      	mov	r7, r0
 c01dade:	2800      	cmp	r0, #0
 c01dae0:	f040 808b 	bne.w	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );
 c01dae4:	aa10      	add	r2, sp, #64	; 0x40
 c01dae6:	a919      	add	r1, sp, #100	; 0x64
 c01dae8:	a822      	add	r0, sp, #136	; 0x88
 c01daea:	f007 fcef 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01daee:	4607      	mov	r7, r0
 c01daf0:	2800      	cmp	r0, #0
 c01daf2:	f040 8082 	bne.w	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01daf6:	4621      	mov	r1, r4
 c01daf8:	a822      	add	r0, sp, #136	; 0x88
 c01dafa:	f7ff fb2b 	bl	c01d154 <ecp_modp>
 c01dafe:	4607      	mov	r7, r0
 c01db00:	2800      	cmp	r0, #0
 c01db02:	d17a      	bne.n	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );
 c01db04:	aa22      	add	r2, sp, #136	; 0x88
 c01db06:	a91f      	add	r1, sp, #124	; 0x7c
 c01db08:	a825      	add	r0, sp, #148	; 0x94
 c01db0a:	f007 fc6e 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c01db0e:	4607      	mov	r7, r0
 c01db10:	2800      	cmp	r0, #0
 c01db12:	d172      	bne.n	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01db14:	4621      	mov	r1, r4
 c01db16:	a825      	add	r0, sp, #148	; 0x94
 c01db18:	f7ff fb1c 	bl	c01d154 <ecp_modp>
 c01db1c:	4607      	mov	r7, r0
 c01db1e:	2800      	cmp	r0, #0
 c01db20:	d16b      	bne.n	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );
 c01db22:	aa25      	add	r2, sp, #148	; 0x94
 c01db24:	4611      	mov	r1, r2
 c01db26:	4610      	mov	r0, r2
 c01db28:	f007 fcd0 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01db2c:	4607      	mov	r7, r0
 c01db2e:	2800      	cmp	r0, #0
 c01db30:	d163      	bne.n	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01db32:	4621      	mov	r1, r4
 c01db34:	a825      	add	r0, sp, #148	; 0x94
 c01db36:	f7ff fb0d 	bl	c01d154 <ecp_modp>
 c01db3a:	4607      	mov	r7, r0
 c01db3c:	2800      	cmp	r0, #0
 c01db3e:	d15c      	bne.n	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );
 c01db40:	aa22      	add	r2, sp, #136	; 0x88
 c01db42:	a91f      	add	r1, sp, #124	; 0x7c
 c01db44:	a82b      	add	r0, sp, #172	; 0xac
 c01db46:	f007 fc72 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c01db4a:	4607      	mov	r7, r0
 c01db4c:	2800      	cmp	r0, #0
 c01db4e:	d154      	bne.n	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01db50:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 c01db52:	2b00      	cmp	r3, #0
 c01db54:	f2c0 80b7 	blt.w	c01dcc6 <mbedtls_ecp_mul_restartable+0x4da>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );
 c01db58:	aa2b      	add	r2, sp, #172	; 0xac
 c01db5a:	4611      	mov	r1, r2
 c01db5c:	4610      	mov	r0, r2
 c01db5e:	f007 fcb5 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01db62:	4607      	mov	r7, r0
 c01db64:	2800      	cmp	r0, #0
 c01db66:	d148      	bne.n	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01db68:	4621      	mov	r1, r4
 c01db6a:	a82b      	add	r0, sp, #172	; 0xac
 c01db6c:	f7ff faf2 	bl	c01d154 <ecp_modp>
 c01db70:	4607      	mov	r7, r0
 c01db72:	2800      	cmp	r0, #0
 c01db74:	d141      	bne.n	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );
 c01db76:	aa2b      	add	r2, sp, #172	; 0xac
 c01db78:	a907      	add	r1, sp, #28
 c01db7a:	4610      	mov	r0, r2
 c01db7c:	f007 fca6 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01db80:	4607      	mov	r7, r0
 c01db82:	2800      	cmp	r0, #0
 c01db84:	d139      	bne.n	c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01db86:	4621      	mov	r1, r4
 c01db88:	a82b      	add	r0, sp, #172	; 0xac
 c01db8a:	f7ff fae3 	bl	c01d154 <ecp_modp>
 c01db8e:	4607      	mov	r7, r0
 c01db90:	bb98      	cbnz	r0, c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );
 c01db92:	aa13      	add	r2, sp, #76	; 0x4c
 c01db94:	a90d      	add	r1, sp, #52	; 0x34
 c01db96:	4648      	mov	r0, r9
 c01db98:	f007 fc98 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01db9c:	4607      	mov	r7, r0
 c01db9e:	bb60      	cbnz	r0, c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01dba0:	4621      	mov	r1, r4
 c01dba2:	4648      	mov	r0, r9
 c01dba4:	f7ff fad6 	bl	c01d154 <ecp_modp>
 c01dba8:	4607      	mov	r7, r0
 c01dbaa:	bb30      	cbnz	r0, c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );
 c01dbac:	aa16      	add	r2, sp, #88	; 0x58
 c01dbae:	f104 0110 	add.w	r1, r4, #16
 c01dbb2:	4628      	mov	r0, r5
 c01dbb4:	f007 fc8a 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01dbb8:	4607      	mov	r7, r0
 c01dbba:	b9f0      	cbnz	r0, c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01dbbc:	4621      	mov	r1, r4
 c01dbbe:	4628      	mov	r0, r5
 c01dbc0:	f7ff fac8 	bl	c01d154 <ecp_modp>
 c01dbc4:	4607      	mov	r7, r0
 c01dbc6:	b9c0      	cbnz	r0, c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );
 c01dbc8:	462a      	mov	r2, r5
 c01dbca:	a913      	add	r1, sp, #76	; 0x4c
 c01dbcc:	4628      	mov	r0, r5
 c01dbce:	f007 fc0c 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c01dbd2:	4607      	mov	r7, r0
 c01dbd4:	b988      	cbnz	r0, c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01dbd6:	4631      	mov	r1, r6
 c01dbd8:	4628      	mov	r0, r5
 c01dbda:	f007 fb11 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c01dbde:	2800      	cmp	r0, #0
 c01dbe0:	da7e      	bge.n	c01dce0 <mbedtls_ecp_mul_restartable+0x4f4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );
 c01dbe2:	462a      	mov	r2, r5
 c01dbe4:	a916      	add	r1, sp, #88	; 0x58
 c01dbe6:	4628      	mov	r0, r5
 c01dbe8:	f007 fc70 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01dbec:	4607      	mov	r7, r0
 c01dbee:	b920      	cbnz	r0, c01dbfa <mbedtls_ecp_mul_restartable+0x40e>
 c01dbf0:	4621      	mov	r1, r4
 c01dbf2:	4628      	mov	r0, r5
 c01dbf4:	f7ff faae 	bl	c01d154 <ecp_modp>
 c01dbf8:	4607      	mov	r7, r0
    mbedtls_mpi_free( &A ); mbedtls_mpi_free( &AA ); mbedtls_mpi_free( &B );
 c01dbfa:	a80a      	add	r0, sp, #40	; 0x28
 c01dbfc:	f006 ffc2 	bl	c024b84 <mbedtls_mpi_free>
 c01dc00:	a80d      	add	r0, sp, #52	; 0x34
 c01dc02:	f006 ffbf 	bl	c024b84 <mbedtls_mpi_free>
 c01dc06:	a810      	add	r0, sp, #64	; 0x40
 c01dc08:	f006 ffbc 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &BB ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &C );
 c01dc0c:	a813      	add	r0, sp, #76	; 0x4c
 c01dc0e:	f006 ffb9 	bl	c024b84 <mbedtls_mpi_free>
 c01dc12:	a816      	add	r0, sp, #88	; 0x58
 c01dc14:	f006 ffb6 	bl	c024b84 <mbedtls_mpi_free>
 c01dc18:	a819      	add	r0, sp, #100	; 0x64
 c01dc1a:	f006 ffb3 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &D ); mbedtls_mpi_free( &DA ); mbedtls_mpi_free( &CB );
 c01dc1e:	a81c      	add	r0, sp, #112	; 0x70
 c01dc20:	f006 ffb0 	bl	c024b84 <mbedtls_mpi_free>
 c01dc24:	a81f      	add	r0, sp, #124	; 0x7c
 c01dc26:	f006 ffad 	bl	c024b84 <mbedtls_mpi_free>
 c01dc2a:	a822      	add	r0, sp, #136	; 0x88
 c01dc2c:	f006 ffaa 	bl	c024b84 <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );
 c01dc30:	2f00      	cmp	r7, #0
 c01dc32:	f47f ae4f 	bne.w	c01d8d4 <mbedtls_ecp_mul_restartable+0xe8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 c01dc36:	4652      	mov	r2, sl
 c01dc38:	a925      	add	r1, sp, #148	; 0x94
 c01dc3a:	4648      	mov	r0, r9
 c01dc3c:	f007 f81b 	bl	c024c76 <mbedtls_mpi_safe_cond_swap>
 c01dc40:	4607      	mov	r7, r0
 c01dc42:	2800      	cmp	r0, #0
 c01dc44:	f47f ae46 	bne.w	c01d8d4 <mbedtls_ecp_mul_restartable+0xe8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 c01dc48:	4652      	mov	r2, sl
 c01dc4a:	a92b      	add	r1, sp, #172	; 0xac
 c01dc4c:	4628      	mov	r0, r5
 c01dc4e:	f007 f812 	bl	c024c76 <mbedtls_mpi_safe_cond_swap>
 c01dc52:	f108 38ff 	add.w	r8, r8, #4294967295
 c01dc56:	4607      	mov	r7, r0
 c01dc58:	2800      	cmp	r0, #0
 c01dc5a:	f43f ae16 	beq.w	c01d88a <mbedtls_ecp_mul_restartable+0x9e>
 c01dc5e:	e639      	b.n	c01d8d4 <mbedtls_ecp_mul_restartable+0xe8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );
 c01dc60:	a90a      	add	r1, sp, #40	; 0x28
 c01dc62:	4632      	mov	r2, r6
 c01dc64:	4608      	mov	r0, r1
 c01dc66:	f007 fb82 	bl	c02536e <mbedtls_mpi_sub_abs>
 c01dc6a:	e6be      	b.n	c01d9ea <mbedtls_ecp_mul_restartable+0x1fe>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );
 c01dc6c:	2100      	movs	r1, #0
 c01dc6e:	4658      	mov	r0, fp
 c01dc70:	f007 fb06 	bl	c025280 <mbedtls_mpi_cmp_int>
 c01dc74:	2800      	cmp	r0, #0
 c01dc76:	f43f aee3 	beq.w	c01da40 <mbedtls_ecp_mul_restartable+0x254>
 c01dc7a:	4632      	mov	r2, r6
 c01dc7c:	4659      	mov	r1, fp
 c01dc7e:	4658      	mov	r0, fp
 c01dc80:	f007 fbb3 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c01dc84:	e6d4      	b.n	c01da30 <mbedtls_ecp_mul_restartable+0x244>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );
 c01dc86:	2100      	movs	r1, #0
 c01dc88:	4658      	mov	r0, fp
 c01dc8a:	f007 faf9 	bl	c025280 <mbedtls_mpi_cmp_int>
 c01dc8e:	2800      	cmp	r0, #0
 c01dc90:	f43f aef6 	beq.w	c01da80 <mbedtls_ecp_mul_restartable+0x294>
 c01dc94:	4632      	mov	r2, r6
 c01dc96:	4659      	mov	r1, fp
 c01dc98:	4658      	mov	r0, fp
 c01dc9a:	f007 fba6 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c01dc9e:	e6e7      	b.n	c01da70 <mbedtls_ecp_mul_restartable+0x284>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );
 c01dca0:	4632      	mov	r2, r6
 c01dca2:	4659      	mov	r1, fp
 c01dca4:	4658      	mov	r0, fp
 c01dca6:	f007 fb62 	bl	c02536e <mbedtls_mpi_sub_abs>
 c01dcaa:	e6f0      	b.n	c01da8e <mbedtls_ecp_mul_restartable+0x2a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );
 c01dcac:	2100      	movs	r1, #0
 c01dcae:	4658      	mov	r0, fp
 c01dcb0:	f007 fae6 	bl	c025280 <mbedtls_mpi_cmp_int>
 c01dcb4:	2800      	cmp	r0, #0
 c01dcb6:	f43f af04 	beq.w	c01dac2 <mbedtls_ecp_mul_restartable+0x2d6>
 c01dcba:	4632      	mov	r2, r6
 c01dcbc:	4659      	mov	r1, fp
 c01dcbe:	4658      	mov	r0, fp
 c01dcc0:	f007 fb93 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c01dcc4:	e6f5      	b.n	c01dab2 <mbedtls_ecp_mul_restartable+0x2c6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );
 c01dcc6:	2100      	movs	r1, #0
 c01dcc8:	a82b      	add	r0, sp, #172	; 0xac
 c01dcca:	f007 fad9 	bl	c025280 <mbedtls_mpi_cmp_int>
 c01dcce:	2800      	cmp	r0, #0
 c01dcd0:	f43f af42 	beq.w	c01db58 <mbedtls_ecp_mul_restartable+0x36c>
 c01dcd4:	a92b      	add	r1, sp, #172	; 0xac
 c01dcd6:	4632      	mov	r2, r6
 c01dcd8:	4608      	mov	r0, r1
 c01dcda:	f007 fb86 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c01dcde:	e734      	b.n	c01db4a <mbedtls_ecp_mul_restartable+0x35e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );
 c01dce0:	4632      	mov	r2, r6
 c01dce2:	4629      	mov	r1, r5
 c01dce4:	4628      	mov	r0, r5
 c01dce6:	f007 fb42 	bl	c02536e <mbedtls_mpi_sub_abs>
 c01dcea:	e772      	b.n	c01dbd2 <mbedtls_ecp_mul_restartable+0x3e6>
    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 c01dcec:	4f59      	ldr	r7, [pc, #356]	; (c01de54 <mbedtls_ecp_mul_restartable+0x668>)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 c01dcee:	4620      	mov	r0, r4
 c01dcf0:	f7ff faae 	bl	c01d250 <mbedtls_ecp_get_type>
 c01dcf4:	2801      	cmp	r0, #1
 c01dcf6:	4683      	mov	fp, r0
 c01dcf8:	f47f adf5 	bne.w	c01d8e6 <mbedtls_ecp_mul_restartable+0xfa>
    PKA_HandleTypeDef hpka = {0};
 c01dcfc:	2500      	movs	r5, #0
    scalarMulSize = mbedtls_mpi_size(m);
 c01dcfe:	9803      	ldr	r0, [sp, #12]
    PKA_HandleTypeDef hpka = {0};
 c01dd00:	e9cd 5522 	strd	r5, r5, [sp, #136]	; 0x88
 c01dd04:	9524      	str	r5, [sp, #144]	; 0x90
    scalarMulSize = mbedtls_mpi_size(m);
 c01dd06:	f007 f887 	bl	c024e18 <mbedtls_mpi_size>
    ECC_MulIn.coefSign    = grp->st_a_sign;
 c01dd0a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    ECC_MulIn.scalarMulSize = scalarMulSize;
 c01dd0e:	9025      	str	r0, [sp, #148]	; 0x94
    ECC_MulIn.coefSign    = grp->st_a_sign;
 c01dd10:	9327      	str	r3, [sp, #156]	; 0x9c
    scalarMulSize = mbedtls_mpi_size(m);
 c01dd12:	4682      	mov	sl, r0
    ECC_MulIn.coefA       = grp->st_a_abs;
 c01dd14:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    ECC_MulIn.modulusSize = grp->st_modulus_size;
 c01dd18:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    ECC_MulIn.coefA       = grp->st_a_abs;
 c01dd1a:	9328      	str	r3, [sp, #160]	; 0xa0
    ECC_MulIn.modulusSize = grp->st_modulus_size;
 c01dd1c:	9026      	str	r0, [sp, #152]	; 0x98
    ECC_MulIn.modulus     = grp->st_p;
 c01dd1e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    P_binary = mbedtls_calloc(2U * grp->st_modulus_size + 1U, sizeof( uint8_t ));
 c01dd22:	0040      	lsls	r0, r0, #1
 c01dd24:	4659      	mov	r1, fp
 c01dd26:	3001      	adds	r0, #1
    ECC_MulIn.modulus     = grp->st_p;
 c01dd28:	9329      	str	r3, [sp, #164]	; 0xa4
    P_binary = mbedtls_calloc(2U * grp->st_modulus_size + 1U, sizeof( uint8_t ));
 c01dd2a:	f00c faa3 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK((P_binary == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01dd2e:	4680      	mov	r8, r0
 c01dd30:	b918      	cbnz	r0, c01dd3a <mbedtls_ecp_mul_restartable+0x54e>
    uint8_t *R_binary = NULL;
 c01dd32:	2500      	movs	r5, #0
    uint8_t *m_binary = NULL;
 c01dd34:	462e      	mov	r6, r5
    MBEDTLS_MPI_CHK((R_binary == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01dd36:	4f48      	ldr	r7, [pc, #288]	; (c01de58 <mbedtls_ecp_mul_restartable+0x66c>)
 c01dd38:	e05b      	b.n	c01ddf2 <mbedtls_ecp_mul_restartable+0x606>
    MBEDTLS_MPI_CHK( mbedtls_ecp_point_write_binary( grp, P, MBEDTLS_ECP_PF_UNCOMPRESSED, &olen, P_binary, 2U * grp->st_modulus_size + 1U) );
 c01dd3a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 c01dd3c:	462a      	mov	r2, r5
 c01dd3e:	005b      	lsls	r3, r3, #1
 c01dd40:	3301      	adds	r3, #1
 c01dd42:	e9cd 0300 	strd	r0, r3, [sp]
 c01dd46:	9904      	ldr	r1, [sp, #16]
 c01dd48:	ab19      	add	r3, sp, #100	; 0x64
 c01dd4a:	4620      	mov	r0, r4
 c01dd4c:	f7ff fb8a 	bl	c01d464 <mbedtls_ecp_point_write_binary>
 c01dd50:	4607      	mov	r7, r0
 c01dd52:	2800      	cmp	r0, #0
 c01dd54:	d176      	bne.n	c01de44 <mbedtls_ecp_mul_restartable+0x658>
    ECC_MulIn.pointX = P_binary + 1U;
 c01dd56:	f108 0301 	add.w	r3, r8, #1
 c01dd5a:	932a      	str	r3, [sp, #168]	; 0xa8
    ECC_MulIn.pointY = P_binary + grp->st_modulus_size + 1U;
 c01dd5c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    m_binary = mbedtls_calloc(scalarMulSize, sizeof( uint8_t ));
 c01dd5e:	4659      	mov	r1, fp
    ECC_MulIn.pointY = P_binary + grp->st_modulus_size + 1U;
 c01dd60:	3301      	adds	r3, #1
 c01dd62:	4443      	add	r3, r8
    m_binary = mbedtls_calloc(scalarMulSize, sizeof( uint8_t ));
 c01dd64:	4650      	mov	r0, sl
    ECC_MulIn.pointY = P_binary + grp->st_modulus_size + 1U;
 c01dd66:	932b      	str	r3, [sp, #172]	; 0xac
    m_binary = mbedtls_calloc(scalarMulSize, sizeof( uint8_t ));
 c01dd68:	f00c fa84 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK((m_binary == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01dd6c:	4606      	mov	r6, r0
 c01dd6e:	2800      	cmp	r0, #0
 c01dd70:	d0df      	beq.n	c01dd32 <mbedtls_ecp_mul_restartable+0x546>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( m, m_binary, scalarMulSize ) );
 c01dd72:	4601      	mov	r1, r0
 c01dd74:	4652      	mov	r2, sl
 c01dd76:	9803      	ldr	r0, [sp, #12]
 c01dd78:	f007 f8f5 	bl	c024f66 <mbedtls_mpi_write_binary>
 c01dd7c:	4607      	mov	r7, r0
 c01dd7e:	2800      	cmp	r0, #0
 c01dd80:	d137      	bne.n	c01ddf2 <mbedtls_ecp_mul_restartable+0x606>
    __HAL_RCC_PKA_CLK_ENABLE();
 c01dd82:	4a36      	ldr	r2, [pc, #216]	; (c01de5c <mbedtls_ecp_mul_restartable+0x670>)
    ECC_MulIn.scalarMul = m_binary;
 c01dd84:	962c      	str	r6, [sp, #176]	; 0xb0
    __HAL_RCC_PKA_CLK_ENABLE();
 c01dd86:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    MBEDTLS_MPI_CHK((HAL_PKA_Init(&hpka) != HAL_OK) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0);
 c01dd88:	a822      	add	r0, sp, #136	; 0x88
    __HAL_RCC_PKA_CLK_ENABLE();
 c01dd8a:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 c01dd8e:	64d1      	str	r1, [r2, #76]	; 0x4c
 c01dd90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 c01dd92:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 c01dd96:	921c      	str	r2, [sp, #112]	; 0x70
 c01dd98:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    hpka.Instance = PKA;
 c01dd9a:	4a31      	ldr	r2, [pc, #196]	; (c01de60 <mbedtls_ecp_mul_restartable+0x674>)
 c01dd9c:	9222      	str	r2, [sp, #136]	; 0x88
    MBEDTLS_MPI_CHK((HAL_PKA_Init(&hpka) != HAL_OK) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0);
 c01dd9e:	f004 fe66 	bl	c022a6e <HAL_PKA_Init>
 c01dda2:	2800      	cmp	r0, #0
 c01dda4:	d150      	bne.n	c01de48 <mbedtls_ecp_mul_restartable+0x65c>
    MBEDTLS_MPI_CHK((HAL_PKA_ECCMul(&hpka, &ECC_MulIn, ST_ECP_TIMEOUT) != HAL_OK) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0);
 c01dda6:	f241 3288 	movw	r2, #5000	; 0x1388
 c01ddaa:	a925      	add	r1, sp, #148	; 0x94
 c01ddac:	a822      	add	r0, sp, #136	; 0x88
 c01ddae:	f005 fa79 	bl	c0232a4 <HAL_PKA_ECCMul>
 c01ddb2:	2800      	cmp	r0, #0
 c01ddb4:	d148      	bne.n	c01de48 <mbedtls_ecp_mul_restartable+0x65c>
    R_binary = mbedtls_calloc(2U * grp->st_modulus_size + 1U, sizeof( uint8_t ));
 c01ddb6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 c01ddb8:	4659      	mov	r1, fp
 c01ddba:	0040      	lsls	r0, r0, #1
 c01ddbc:	3001      	adds	r0, #1
 c01ddbe:	f00c fa59 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK((R_binary == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01ddc2:	4605      	mov	r5, r0
 c01ddc4:	2800      	cmp	r0, #0
 c01ddc6:	d0b6      	beq.n	c01dd36 <mbedtls_ecp_mul_restartable+0x54a>
    ECC_MulOut.ptX = R_binary + 1U;
 c01ddc8:	1c43      	adds	r3, r0, #1
 c01ddca:	931f      	str	r3, [sp, #124]	; 0x7c
    ECC_MulOut.ptY = R_binary + grp->st_modulus_size + 1U;
 c01ddcc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    HAL_PKA_ECCMul_GetResult(&hpka, &ECC_MulOut);
 c01ddce:	a91f      	add	r1, sp, #124	; 0x7c
    ECC_MulOut.ptY = R_binary + grp->st_modulus_size + 1U;
 c01ddd0:	3301      	adds	r3, #1
 c01ddd2:	4403      	add	r3, r0
    HAL_PKA_ECCMul_GetResult(&hpka, &ECC_MulOut);
 c01ddd4:	a822      	add	r0, sp, #136	; 0x88
    ECC_MulOut.ptY = R_binary + grp->st_modulus_size + 1U;
 c01ddd6:	9320      	str	r3, [sp, #128]	; 0x80
    HAL_PKA_ECCMul_GetResult(&hpka, &ECC_MulOut);
 c01ddd8:	f004 ff35 	bl	c022c46 <HAL_PKA_ECCMul_GetResult>
    R_binary[0] = 0x04U;
 c01dddc:	2304      	movs	r3, #4
 c01ddde:	702b      	strb	r3, [r5, #0]
    MBEDTLS_MPI_CHK( mbedtls_ecp_point_read_binary( grp, R, R_binary, 2U * grp->st_modulus_size + 1U) );
 c01dde0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 c01dde2:	462a      	mov	r2, r5
 c01dde4:	005b      	lsls	r3, r3, #1
 c01dde6:	3301      	adds	r3, #1
 c01dde8:	4649      	mov	r1, r9
 c01ddea:	4620      	mov	r0, r4
 c01ddec:	f7ff fba6 	bl	c01d53c <mbedtls_ecp_point_read_binary>
 c01ddf0:	4607      	mov	r7, r0
    HAL_PKA_DeInit(&hpka);
 c01ddf2:	a822      	add	r0, sp, #136	; 0x88
 c01ddf4:	f004 fe64 	bl	c022ac0 <HAL_PKA_DeInit>
    __HAL_RCC_PKA_CLK_DISABLE();
 c01ddf8:	4918      	ldr	r1, [pc, #96]	; (c01de5c <mbedtls_ecp_mul_restartable+0x670>)
 c01ddfa:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 c01ddfc:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 c01de00:	64ca      	str	r2, [r1, #76]	; 0x4c
    if (P_binary != NULL)
 c01de02:	f1b8 0f00 	cmp.w	r8, #0
 c01de06:	d008      	beq.n	c01de1a <mbedtls_ecp_mul_restartable+0x62e>
        mbedtls_platform_zeroize(P_binary, 2U * grp->st_modulus_size + 1U);
 c01de08:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 c01de0a:	4640      	mov	r0, r8
 c01de0c:	0049      	lsls	r1, r1, #1
 c01de0e:	3101      	adds	r1, #1
 c01de10:	f00c fa46 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free(P_binary);
 c01de14:	4640      	mov	r0, r8
 c01de16:	f00c fa33 	bl	c02a280 <mbedtls_free>
    if (m_binary != NULL)
 c01de1a:	b136      	cbz	r6, c01de2a <mbedtls_ecp_mul_restartable+0x63e>
        mbedtls_platform_zeroize(m_binary, scalarMulSize);
 c01de1c:	4630      	mov	r0, r6
 c01de1e:	4651      	mov	r1, sl
 c01de20:	f00c fa3e 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free(m_binary);
 c01de24:	4630      	mov	r0, r6
 c01de26:	f00c fa2b 	bl	c02a280 <mbedtls_free>
    if (R_binary != NULL)
 c01de2a:	2d00      	cmp	r5, #0
 c01de2c:	f43f ad5b 	beq.w	c01d8e6 <mbedtls_ecp_mul_restartable+0xfa>
        mbedtls_platform_zeroize(R_binary, 2U * grp->st_modulus_size + 1U);
 c01de30:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 c01de32:	4628      	mov	r0, r5
 c01de34:	0049      	lsls	r1, r1, #1
 c01de36:	3101      	adds	r1, #1
 c01de38:	f00c fa32 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free(R_binary);
 c01de3c:	4628      	mov	r0, r5
 c01de3e:	f00c fa1f 	bl	c02a280 <mbedtls_free>
    return( ret );
 c01de42:	e550      	b.n	c01d8e6 <mbedtls_ecp_mul_restartable+0xfa>
    uint8_t *m_binary = NULL;
 c01de44:	462e      	mov	r6, r5
 c01de46:	e7d4      	b.n	c01ddf2 <mbedtls_ecp_mul_restartable+0x606>
    uint8_t *R_binary = NULL;
 c01de48:	463d      	mov	r5, r7
    MBEDTLS_MPI_CHK((HAL_PKA_ECCMul(&hpka, &ECC_MulIn, ST_ECP_TIMEOUT) != HAL_OK) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0);
 c01de4a:	f06f 076f 	mvn.w	r7, #111	; 0x6f
 c01de4e:	e7d0      	b.n	c01ddf2 <mbedtls_ecp_mul_restartable+0x606>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 c01de50:	4f04      	ldr	r7, [pc, #16]	; (c01de64 <mbedtls_ecp_mul_restartable+0x678>)
 c01de52:	e53f      	b.n	c01d8d4 <mbedtls_ecp_mul_restartable+0xe8>
 c01de54:	ffffb080 	.word	0xffffb080
 c01de58:	ffffb280 	.word	0xffffb280
 c01de5c:	50021000 	.word	0x50021000
 c01de60:	520c2000 	.word	0x520c2000
 c01de64:	ffffb300 	.word	0xffffb300

0c01de68 <mbedtls_ecp_mul>:
{
 c01de68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( mbedtls_ecp_mul_restartable( grp, R, m, P, f_rng, p_rng, NULL ) );
 c01de6a:	2400      	movs	r4, #0
 c01de6c:	9402      	str	r4, [sp, #8]
 c01de6e:	9c07      	ldr	r4, [sp, #28]
 c01de70:	9401      	str	r4, [sp, #4]
 c01de72:	9c06      	ldr	r4, [sp, #24]
 c01de74:	9400      	str	r4, [sp, #0]
 c01de76:	f7ff fcb9 	bl	c01d7ec <mbedtls_ecp_mul_restartable>
}
 c01de7a:	b004      	add	sp, #16
 c01de7c:	bd10      	pop	{r4, pc}
	...

0c01de80 <mbedtls_ecp_gen_privkey>:
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 c01de80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
 c01de84:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
{
 c01de86:	4605      	mov	r5, r0
 c01de88:	460c      	mov	r4, r1
 c01de8a:	4691      	mov	r9, r2
 c01de8c:	469a      	mov	sl, r3

#if defined(ECP_MONTGOMERY)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c01de8e:	f7ff f9df 	bl	c01d250 <mbedtls_ecp_get_type>
    n_size = ( grp->nbits + 7 ) / 8;
 c01de92:	3607      	adds	r6, #7
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c01de94:	2802      	cmp	r0, #2
    n_size = ( grp->nbits + 7 ) / 8;
 c01de96:	ea4f 08d6 	mov.w	r8, r6, lsr #3
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c01de9a:	d16a      	bne.n	c01df72 <mbedtls_ecp_gen_privkey+0xf2>
    {
        /* [M225] page 5 */
        size_t b;

        do {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 c01de9c:	4653      	mov	r3, sl
 c01de9e:	464a      	mov	r2, r9
 c01dea0:	4641      	mov	r1, r8
 c01dea2:	4620      	mov	r0, r4
 c01dea4:	f008 f8ff 	bl	c0260a6 <mbedtls_mpi_fill_random>
 c01dea8:	4607      	mov	r7, r0
 c01deaa:	2800      	cmp	r0, #0
 c01deac:	d15d      	bne.n	c01df6a <mbedtls_ecp_gen_privkey+0xea>
        } while( mbedtls_mpi_bitlen( d ) == 0);
 c01deae:	4620      	mov	r0, r4
 c01deb0:	f006 ff92 	bl	c024dd8 <mbedtls_mpi_bitlen>
 c01deb4:	2800      	cmp	r0, #0
 c01deb6:	d0f1      	beq.n	c01de9c <mbedtls_ecp_gen_privkey+0x1c>

        /* Make sure the most significant bit is nbits */
        b = mbedtls_mpi_bitlen( d ) - 1; /* mbedtls_mpi_bitlen is one-based */
 c01deb8:	4620      	mov	r0, r4
 c01deba:	f006 ff8d 	bl	c024dd8 <mbedtls_mpi_bitlen>
        if( b > grp->nbits )
 c01debe:	6de9      	ldr	r1, [r5, #92]	; 0x5c
        b = mbedtls_mpi_bitlen( d ) - 1; /* mbedtls_mpi_bitlen is one-based */
 c01dec0:	3801      	subs	r0, #1
        if( b > grp->nbits )
 c01dec2:	4281      	cmp	r1, r0
 c01dec4:	d244      	bcs.n	c01df50 <mbedtls_ecp_gen_privkey+0xd0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, b - grp->nbits ) );
 c01dec6:	1a41      	subs	r1, r0, r1
 c01dec8:	4620      	mov	r0, r4
 c01deca:	f007 f8c9 	bl	c025060 <mbedtls_mpi_shift_r>
 c01dece:	4607      	mov	r7, r0
 c01ded0:	2800      	cmp	r0, #0
 c01ded2:	d14a      	bne.n	c01df6a <mbedtls_ecp_gen_privkey+0xea>
        else
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, grp->nbits, 1 ) );

        /* Make sure the last two bits are unset for Curve448, three bits for
           Curve25519 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 0, 0 ) );
 c01ded4:	2200      	movs	r2, #0
 c01ded6:	4620      	mov	r0, r4
 c01ded8:	4611      	mov	r1, r2
 c01deda:	f006 ff39 	bl	c024d50 <mbedtls_mpi_set_bit>
 c01dede:	4607      	mov	r7, r0
 c01dee0:	2800      	cmp	r0, #0
 c01dee2:	d142      	bne.n	c01df6a <mbedtls_ecp_gen_privkey+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );
 c01dee4:	4602      	mov	r2, r0
 c01dee6:	2101      	movs	r1, #1
 c01dee8:	4620      	mov	r0, r4
 c01deea:	f006 ff31 	bl	c024d50 <mbedtls_mpi_set_bit>
 c01deee:	2800      	cmp	r0, #0
 c01def0:	d141      	bne.n	c01df76 <mbedtls_ecp_gen_privkey+0xf6>
        if( grp->nbits == 254 )
 c01def2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 c01def4:	2afe      	cmp	r2, #254	; 0xfe
 c01def6:	d030      	beq.n	c01df5a <mbedtls_ecp_gen_privkey+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );
 c01def8:	2700      	movs	r7, #0
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 c01defa:	4628      	mov	r0, r5
 c01defc:	f7ff f9a8 	bl	c01d250 <mbedtls_ecp_get_type>
 c01df00:	2801      	cmp	r0, #1
 c01df02:	d132      	bne.n	c01df6a <mbedtls_ecp_gen_privkey+0xea>
 c01df04:	f04f 0b1f 	mov.w	fp, #31
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 c01df08:	f105 034c 	add.w	r3, r5, #76	; 0x4c
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 c01df0c:	f026 0607 	bic.w	r6, r6, #7
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 c01df10:	9301      	str	r3, [sp, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 c01df12:	4653      	mov	r3, sl
 c01df14:	464a      	mov	r2, r9
 c01df16:	4641      	mov	r1, r8
 c01df18:	4620      	mov	r0, r4
 c01df1a:	f008 f8c4 	bl	c0260a6 <mbedtls_mpi_fill_random>
 c01df1e:	4607      	mov	r7, r0
 c01df20:	bb18      	cbnz	r0, c01df6a <mbedtls_ecp_gen_privkey+0xea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 c01df22:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 c01df24:	4620      	mov	r0, r4
 c01df26:	1a71      	subs	r1, r6, r1
 c01df28:	f007 f89a 	bl	c025060 <mbedtls_mpi_shift_r>
 c01df2c:	4607      	mov	r7, r0
 c01df2e:	b9e0      	cbnz	r0, c01df6a <mbedtls_ecp_gen_privkey+0xea>
            if( ++count > 30 )
 c01df30:	f1bb 0b01 	subs.w	fp, fp, #1
 c01df34:	d021      	beq.n	c01df7a <mbedtls_ecp_gen_privkey+0xfa>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 c01df36:	2101      	movs	r1, #1
 c01df38:	4620      	mov	r0, r4
 c01df3a:	f007 f9a1 	bl	c025280 <mbedtls_mpi_cmp_int>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 c01df3e:	2800      	cmp	r0, #0
 c01df40:	dbe7      	blt.n	c01df12 <mbedtls_ecp_gen_privkey+0x92>
 c01df42:	9901      	ldr	r1, [sp, #4]
 c01df44:	4620      	mov	r0, r4
 c01df46:	f007 f95b 	bl	c025200 <mbedtls_mpi_cmp_mpi>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 c01df4a:	2800      	cmp	r0, #0
 c01df4c:	dae1      	bge.n	c01df12 <mbedtls_ecp_gen_privkey+0x92>
 c01df4e:	e00c      	b.n	c01df6a <mbedtls_ecp_gen_privkey+0xea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, grp->nbits, 1 ) );
 c01df50:	2201      	movs	r2, #1
 c01df52:	4620      	mov	r0, r4
 c01df54:	f006 fefc 	bl	c024d50 <mbedtls_mpi_set_bit>
 c01df58:	e7b9      	b.n	c01dece <mbedtls_ecp_gen_privkey+0x4e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );
 c01df5a:	463a      	mov	r2, r7
 c01df5c:	2102      	movs	r1, #2
 c01df5e:	4620      	mov	r0, r4
 c01df60:	f006 fef6 	bl	c024d50 <mbedtls_mpi_set_bit>
 c01df64:	4607      	mov	r7, r0
 c01df66:	2800      	cmp	r0, #0
 c01df68:	d0c6      	beq.n	c01def8 <mbedtls_ecp_gen_privkey+0x78>
    }
#endif /* ECP_SHORTWEIERSTRASS */

cleanup:
    return( ret );
}
 c01df6a:	4638      	mov	r0, r7
 c01df6c:	b003      	add	sp, #12
 c01df6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 c01df72:	4f03      	ldr	r7, [pc, #12]	; (c01df80 <mbedtls_ecp_gen_privkey+0x100>)
 c01df74:	e7c1      	b.n	c01defa <mbedtls_ecp_gen_privkey+0x7a>
cleanup:
 c01df76:	4607      	mov	r7, r0
 c01df78:	e7f7      	b.n	c01df6a <mbedtls_ecp_gen_privkey+0xea>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 c01df7a:	4f02      	ldr	r7, [pc, #8]	; (c01df84 <mbedtls_ecp_gen_privkey+0x104>)
 c01df7c:	e7f5      	b.n	c01df6a <mbedtls_ecp_gen_privkey+0xea>
 c01df7e:	bf00      	nop
 c01df80:	ffffb080 	.word	0xffffb080
 c01df84:	ffffb300 	.word	0xffffb300

0c01df88 <mbedtls_ecp_gen_keypair_base>:
int mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,
                     const mbedtls_ecp_point *G,
                     mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 c01df88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c01df8c:	4614      	mov	r4, r2
 c01df8e:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 c01df92:	4689      	mov	r9, r1
 c01df94:	4698      	mov	r8, r3
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( G     != NULL );
    ECP_VALIDATE_RET( Q     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
 c01df96:	462a      	mov	r2, r5
 c01df98:	4633      	mov	r3, r6
 c01df9a:	4621      	mov	r1, r4
{
 c01df9c:	4607      	mov	r7, r0
    MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
 c01df9e:	f7ff ff6f 	bl	c01de80 <mbedtls_ecp_gen_privkey>
 c01dfa2:	b948      	cbnz	r0, c01dfb8 <mbedtls_ecp_gen_keypair_base+0x30>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
 c01dfa4:	e9cd 5608 	strd	r5, r6, [sp, #32]
 c01dfa8:	464b      	mov	r3, r9
 c01dfaa:	4622      	mov	r2, r4
 c01dfac:	4641      	mov	r1, r8
 c01dfae:	4638      	mov	r0, r7

cleanup:
    return( ret );
}
 c01dfb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
 c01dfb4:	f7ff bf58 	b.w	c01de68 <mbedtls_ecp_mul>
}
 c01dfb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0c01dfbc <mbedtls_ecp_gen_keypair>:
 */
int mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp,
                             mbedtls_mpi *d, mbedtls_ecp_point *Q,
                             int (*f_rng)(void *, unsigned char *, size_t),
                             void *p_rng )
{
 c01dfbc:	b513      	push	{r0, r1, r4, lr}
    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( Q     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    return( mbedtls_ecp_gen_keypair_base( grp, &grp->G, d, Q, f_rng, p_rng ) );
 c01dfbe:	9c04      	ldr	r4, [sp, #16]
 c01dfc0:	e9cd 3400 	strd	r3, r4, [sp]
 c01dfc4:	4613      	mov	r3, r2
 c01dfc6:	460a      	mov	r2, r1
 c01dfc8:	f100 0128 	add.w	r1, r0, #40	; 0x28
 c01dfcc:	f7ff ffdc 	bl	c01df88 <mbedtls_ecp_gen_keypair_base>
}
 c01dfd0:	b002      	add	sp, #8
 c01dfd2:	bd10      	pop	{r4, pc}

0c01dfd4 <mbedtls_ecp_gen_key>:
/*
 * Generate a keypair, prettier wrapper
 */
int mbedtls_ecp_gen_key( mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 c01dfd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c01dfd6:	460c      	mov	r4, r1
    int ret;
    ECP_VALIDATE_RET( key   != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    if( ( ret = mbedtls_ecp_group_load( &key->grp, grp_id ) ) != 0 )
 c01dfd8:	4601      	mov	r1, r0
 c01dfda:	4620      	mov	r0, r4
{
 c01dfdc:	4615      	mov	r5, r2
 c01dfde:	461e      	mov	r6, r3
    if( ( ret = mbedtls_ecp_group_load( &key->grp, grp_id ) ) != 0 )
 c01dfe0:	f000 fa56 	bl	c01e490 <mbedtls_ecp_group_load>
 c01dfe4:	b940      	cbnz	r0, c01dff8 <mbedtls_ecp_gen_key+0x24>
        return( ret );

    return( mbedtls_ecp_gen_keypair( &key->grp, &key->d, &key->Q, f_rng, p_rng ) );
 c01dfe6:	9600      	str	r6, [sp, #0]
 c01dfe8:	462b      	mov	r3, r5
 c01dfea:	f104 02ac 	add.w	r2, r4, #172	; 0xac
 c01dfee:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 c01dff2:	4620      	mov	r0, r4
 c01dff4:	f7ff ffe2 	bl	c01dfbc <mbedtls_ecp_gen_keypair>
}
 c01dff8:	b002      	add	sp, #8
 c01dffa:	bd70      	pop	{r4, r5, r6, pc}

0c01dffc <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
 c01dffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 c01e000:	7803      	ldrb	r3, [r0, #0]
{
 c01e002:	b0b4      	sub	sp, #208	; 0xd0
 c01e004:	4605      	mov	r5, r0
 c01e006:	460c      	mov	r4, r1
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 c01e008:	b923      	cbnz	r3, c01e014 <mbedtls_ecp_check_pub_priv+0x18>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c01e00a:	4c28      	ldr	r4, [pc, #160]	; (c01e0ac <mbedtls_ecp_check_pub_priv+0xb0>)
cleanup:
    mbedtls_ecp_point_free( &Q );
    mbedtls_ecp_group_free( &grp );

    return( ret );
}
 c01e00c:	4620      	mov	r0, r4
 c01e00e:	b034      	add	sp, #208	; 0xd0
 c01e010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 c01e014:	780a      	ldrb	r2, [r1, #0]
 c01e016:	429a      	cmp	r2, r3
 c01e018:	d1f7      	bne.n	c01e00a <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 c01e01a:	f101 08ac 	add.w	r8, r1, #172	; 0xac
 c01e01e:	4641      	mov	r1, r8
 c01e020:	30ac      	adds	r0, #172	; 0xac
 c01e022:	f007 f8ed 	bl	c025200 <mbedtls_mpi_cmp_mpi>
        pub->grp.id != prv->grp.id ||
 c01e026:	2800      	cmp	r0, #0
 c01e028:	d1ef      	bne.n	c01e00a <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 c01e02a:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
 c01e02e:	4639      	mov	r1, r7
 c01e030:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
 c01e034:	f007 f8e4 	bl	c025200 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 c01e038:	2800      	cmp	r0, #0
 c01e03a:	d1e6      	bne.n	c01e00a <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
 c01e03c:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
 c01e040:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
 c01e044:	4631      	mov	r1, r6
 c01e046:	f007 f8db 	bl	c025200 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 c01e04a:	4605      	mov	r5, r0
 c01e04c:	2800      	cmp	r0, #0
 c01e04e:	d1dc      	bne.n	c01e00a <mbedtls_ecp_check_pub_priv+0xe>
    mbedtls_ecp_point_init( &Q );
 c01e050:	a803      	add	r0, sp, #12
 c01e052:	f7ff f907 	bl	c01d264 <mbedtls_ecp_point_init>
    mbedtls_ecp_group_init( &grp );
 c01e056:	a80c      	add	r0, sp, #48	; 0x30
 c01e058:	f7ff f912 	bl	c01d280 <mbedtls_ecp_group_init>
    mbedtls_ecp_group_copy( &grp, &prv->grp );
 c01e05c:	4621      	mov	r1, r4
 c01e05e:	a80c      	add	r0, sp, #48	; 0x30
 c01e060:	f7ff f9e0 	bl	c01d424 <mbedtls_ecp_group_copy>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
 c01e064:	f104 0328 	add.w	r3, r4, #40	; 0x28
 c01e068:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 c01e06c:	e9cd 5500 	strd	r5, r5, [sp]
 c01e070:	a903      	add	r1, sp, #12
 c01e072:	a80c      	add	r0, sp, #48	; 0x30
 c01e074:	f7ff fef8 	bl	c01de68 <mbedtls_ecp_mul>
 c01e078:	4604      	mov	r4, r0
 c01e07a:	b980      	cbnz	r0, c01e09e <mbedtls_ecp_check_pub_priv+0xa2>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 c01e07c:	4641      	mov	r1, r8
 c01e07e:	a803      	add	r0, sp, #12
 c01e080:	f007 f8be 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c01e084:	b950      	cbnz	r0, c01e09c <mbedtls_ecp_check_pub_priv+0xa0>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 c01e086:	4639      	mov	r1, r7
 c01e088:	a806      	add	r0, sp, #24
 c01e08a:	f007 f8b9 	bl	c025200 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 c01e08e:	b928      	cbnz	r0, c01e09c <mbedtls_ecp_check_pub_priv+0xa0>
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
 c01e090:	4631      	mov	r1, r6
 c01e092:	a809      	add	r0, sp, #36	; 0x24
 c01e094:	f007 f8b4 	bl	c025200 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 c01e098:	4604      	mov	r4, r0
 c01e09a:	b100      	cbz	r0, c01e09e <mbedtls_ecp_check_pub_priv+0xa2>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 c01e09c:	4c03      	ldr	r4, [pc, #12]	; (c01e0ac <mbedtls_ecp_check_pub_priv+0xb0>)
 c01e09e:	a803      	add	r0, sp, #12
 c01e0a0:	f7ff f89e 	bl	c01d1e0 <mbedtls_ecp_point_free.part.2>
    mbedtls_ecp_group_free( &grp );
 c01e0a4:	a80c      	add	r0, sp, #48	; 0x30
 c01e0a6:	f7ff f927 	bl	c01d2f8 <mbedtls_ecp_group_free>
    return( ret );
 c01e0aa:	e7af      	b.n	c01e00c <mbedtls_ecp_check_pub_priv+0x10>
 c01e0ac:	ffffb080 	.word	0xffffb080

0c01e0b0 <ecp_mod_p448>:
 * arithmetic using the limbs directly as we do for the NIST primes above,
 * but for 64-bit targets it should use half the number of operations if we do
 * the reduction with 224-bit limbs, since mpi_add_mpi will then use 64-bit adds.
 */
static int ecp_mod_p448( mbedtls_mpi *N )
{
 c01e0b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t i;
    mbedtls_mpi M, Q;
    mbedtls_mpi_uint Mp[P448_WIDTH + 1], Qp[P448_WIDTH];

    if( N->n <= P448_WIDTH )
 c01e0b4:	6846      	ldr	r6, [r0, #4]
{
 c01e0b6:	b0a5      	sub	sp, #148	; 0x94
    if( N->n <= P448_WIDTH )
 c01e0b8:	2e0e      	cmp	r6, #14
{
 c01e0ba:	4607      	mov	r7, r0
    if( N->n <= P448_WIDTH )
 c01e0bc:	d964      	bls.n	c01e188 <ecp_mod_p448+0xd8>
        return( 0 );

    /* M = A1 */
    M.s = 1;
 c01e0be:	2301      	movs	r3, #1
    M.n = N->n - ( P448_WIDTH );
 c01e0c0:	f1a6 080e 	sub.w	r8, r6, #14
    if( M.n > P448_WIDTH )
 c01e0c4:	f1b8 0f0e 	cmp.w	r8, #14
    M.s = 1;
 c01e0c8:	9301      	str	r3, [sp, #4]
    M.n = N->n - ( P448_WIDTH );
 c01e0ca:	f8cd 8008 	str.w	r8, [sp, #8]
    if( M.n > P448_WIDTH )
 c01e0ce:	d85d      	bhi.n	c01e18c <ecp_mod_p448+0xdc>
        /* Shouldn't be called with N larger than 2^896! */
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    M.p = Mp;
 c01e0d0:	f10d 0954 	add.w	r9, sp, #84	; 0x54
    memset( Mp, 0, sizeof( Mp ) );
 c01e0d4:	223c      	movs	r2, #60	; 0x3c
 c01e0d6:	2100      	movs	r1, #0
 c01e0d8:	4648      	mov	r0, r9
    M.p = Mp;
 c01e0da:	f8cd 900c 	str.w	r9, [sp, #12]
    memset( Mp, 0, sizeof( Mp ) );
 c01e0de:	f7f9 fc72 	bl	c0179c6 <memset>
    memcpy( Mp, N->p + P448_WIDTH, M.n * sizeof( mbedtls_mpi_uint ) );
 c01e0e2:	68bd      	ldr	r5, [r7, #8]
 c01e0e4:	ea4f 0288 	mov.w	r2, r8, lsl #2
 c01e0e8:	f105 0438 	add.w	r4, r5, #56	; 0x38
 c01e0ec:	4621      	mov	r1, r4
 c01e0ee:	4648      	mov	r0, r9
 c01e0f0:	f7f9 fc45 	bl	c01797e <memcpy>
 c01e0f4:	4621      	mov	r1, r4

    /* N = A0 */
    for( i = P448_WIDTH; i < N->n; i++ )
        N->p[i] = 0;
 c01e0f6:	2300      	movs	r3, #0
 c01e0f8:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 c01e0fc:	f841 3b04 	str.w	r3, [r1], #4
    for( i = P448_WIDTH; i < N->n; i++ )
 c01e100:	428d      	cmp	r5, r1
 c01e102:	d1fb      	bne.n	c01e0fc <ecp_mod_p448+0x4c>

    /* N += A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 c01e104:	ae01      	add	r6, sp, #4
 c01e106:	4632      	mov	r2, r6
 c01e108:	4639      	mov	r1, r7
 c01e10a:	4638      	mov	r0, r7
 c01e10c:	f007 f96d 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c01e110:	bb98      	cbnz	r0, c01e17a <ecp_mod_p448+0xca>

    /* Q = B1, N += B1 */
    Q = M;
 c01e112:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    Q.p = Qp;
    memcpy( Qp, Mp, sizeof( Qp ) );
 c01e116:	464d      	mov	r5, r9
    Q = M;
 c01e118:	f10d 0810 	add.w	r8, sp, #16
    Q.p = Qp;
 c01e11c:	ac07      	add	r4, sp, #28
    Q = M;
 c01e11e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
    memcpy( Qp, Mp, sizeof( Qp ) );
 c01e122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    Q.p = Qp;
 c01e124:	9406      	str	r4, [sp, #24]
    memcpy( Qp, Mp, sizeof( Qp ) );
 c01e126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 c01e128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 c01e12a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 c01e12c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 c01e12e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 c01e130:	e895 0003 	ldmia.w	r5, {r0, r1}
 c01e134:	e884 0003 	stmia.w	r4, {r0, r1}
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Q, 224 ) );
 c01e138:	21e0      	movs	r1, #224	; 0xe0
 c01e13a:	4640      	mov	r0, r8
 c01e13c:	f006 ff90 	bl	c025060 <mbedtls_mpi_shift_r>
 c01e140:	b9d8      	cbnz	r0, c01e17a <ecp_mod_p448+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &Q ) );
 c01e142:	4642      	mov	r2, r8
 c01e144:	4639      	mov	r1, r7
 c01e146:	4638      	mov	r0, r7
 c01e148:	f007 f94f 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c01e14c:	b9a8      	cbnz	r0, c01e17a <ecp_mod_p448+0xca>

    /* M = (B0 + B1) * 2^224, N += M */
    if( sizeof( mbedtls_mpi_uint ) > 4 )
        Mp[P224_WIDTH_MIN] &= ( (mbedtls_mpi_uint)-1 ) >> ( P224_UNUSED_BITS );
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 c01e14e:	2307      	movs	r3, #7
 c01e150:	9a02      	ldr	r2, [sp, #8]
 c01e152:	429a      	cmp	r2, r3
 c01e154:	d814      	bhi.n	c01e180 <ecp_mod_p448+0xd0>
        Mp[i] = 0;
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M, &M, &Q ) );
 c01e156:	4642      	mov	r2, r8
 c01e158:	4631      	mov	r1, r6
 c01e15a:	4630      	mov	r0, r6
 c01e15c:	f007 f945 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c01e160:	b958      	cbnz	r0, c01e17a <ecp_mod_p448+0xca>
    M.n = P448_WIDTH + 1; /* Make room for shifted carry bit from the addition */
 c01e162:	230f      	movs	r3, #15
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &M, 224 ) );
 c01e164:	21e0      	movs	r1, #224	; 0xe0
 c01e166:	4630      	mov	r0, r6
    M.n = P448_WIDTH + 1; /* Make room for shifted carry bit from the addition */
 c01e168:	9302      	str	r3, [sp, #8]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &M, 224 ) );
 c01e16a:	f006 ff31 	bl	c024fd0 <mbedtls_mpi_shift_l>
 c01e16e:	b920      	cbnz	r0, c01e17a <ecp_mod_p448+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 c01e170:	4632      	mov	r2, r6
 c01e172:	4639      	mov	r1, r7
 c01e174:	4638      	mov	r0, r7
 c01e176:	f007 f938 	bl	c0253ea <mbedtls_mpi_add_mpi>

cleanup:
    return( ret );
}
 c01e17a:	b025      	add	sp, #148	; 0x94
 c01e17c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Mp[i] = 0;
 c01e180:	f849 0023 	str.w	r0, [r9, r3, lsl #2]
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 c01e184:	3301      	adds	r3, #1
 c01e186:	e7e4      	b.n	c01e152 <ecp_mod_p448+0xa2>
        return( 0 );
 c01e188:	2000      	movs	r0, #0
 c01e18a:	e7f6      	b.n	c01e17a <ecp_mod_p448+0xca>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c01e18c:	4800      	ldr	r0, [pc, #0]	; (c01e190 <ecp_mod_p448+0xe0>)
 c01e18e:	e7f4      	b.n	c01e17a <ecp_mod_p448+0xca>
 c01e190:	ffffb080 	.word	0xffffb080

0c01e194 <ecp_mod_p255>:
{
 c01e194:	b530      	push	{r4, r5, lr}
    if( N->n < P255_WIDTH )
 c01e196:	6845      	ldr	r5, [r0, #4]
{
 c01e198:	b08f      	sub	sp, #60	; 0x3c
    if( N->n < P255_WIDTH )
 c01e19a:	2d07      	cmp	r5, #7
{
 c01e19c:	4604      	mov	r4, r0
    if( N->n < P255_WIDTH )
 c01e19e:	d935      	bls.n	c01e20c <ecp_mod_p255+0x78>
    M.s = 1;
 c01e1a0:	2301      	movs	r3, #1
    M.n = N->n - ( P255_WIDTH - 1 );
 c01e1a2:	3d07      	subs	r5, #7
    if( M.n > P255_WIDTH + 1 )
 c01e1a4:	2d09      	cmp	r5, #9
    M.s = 1;
 c01e1a6:	9301      	str	r3, [sp, #4]
    M.n = N->n - ( P255_WIDTH - 1 );
 c01e1a8:	9502      	str	r5, [sp, #8]
    if( M.n > P255_WIDTH + 1 )
 c01e1aa:	d831      	bhi.n	c01e210 <ecp_mod_p255+0x7c>
    M.p = Mp;
 c01e1ac:	ab04      	add	r3, sp, #16
    memset( Mp, 0, sizeof Mp );
 c01e1ae:	2228      	movs	r2, #40	; 0x28
 c01e1b0:	2100      	movs	r1, #0
 c01e1b2:	4618      	mov	r0, r3
    M.p = Mp;
 c01e1b4:	9303      	str	r3, [sp, #12]
    memset( Mp, 0, sizeof Mp );
 c01e1b6:	f7f9 fc06 	bl	c0179c6 <memset>
    memcpy( Mp, N->p + P255_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );
 c01e1ba:	68a1      	ldr	r1, [r4, #8]
 c01e1bc:	00aa      	lsls	r2, r5, #2
 c01e1be:	311c      	adds	r1, #28
 c01e1c0:	f7f9 fbdd 	bl	c01797e <memcpy>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 255 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );
 c01e1c4:	211f      	movs	r1, #31
 c01e1c6:	a801      	add	r0, sp, #4
 c01e1c8:	f006 ff4a 	bl	c025060 <mbedtls_mpi_shift_r>
 c01e1cc:	b9b8      	cbnz	r0, c01e1fe <ecp_mod_p255+0x6a>
    M.n++; /* Make room for multiplication by 19 */
 c01e1ce:	9b02      	ldr	r3, [sp, #8]
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( N, 255, 0 ) );
 c01e1d0:	4602      	mov	r2, r0
    M.n++; /* Make room for multiplication by 19 */
 c01e1d2:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( N, 255, 0 ) );
 c01e1d4:	21ff      	movs	r1, #255	; 0xff
 c01e1d6:	4620      	mov	r0, r4
    M.n++; /* Make room for multiplication by 19 */
 c01e1d8:	9302      	str	r3, [sp, #8]
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( N, 255, 0 ) );
 c01e1da:	f006 fdb9 	bl	c024d50 <mbedtls_mpi_set_bit>
 c01e1de:	b970      	cbnz	r0, c01e1fe <ecp_mod_p255+0x6a>
    for( i = P255_WIDTH; i < N->n; i++ )
 c01e1e0:	2308      	movs	r3, #8
 c01e1e2:	6862      	ldr	r2, [r4, #4]
 c01e1e4:	429a      	cmp	r2, r3
 c01e1e6:	d80c      	bhi.n	c01e202 <ecp_mod_p255+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M, &M, 19 ) );
 c01e1e8:	a901      	add	r1, sp, #4
 c01e1ea:	2213      	movs	r2, #19
 c01e1ec:	4608      	mov	r0, r1
 c01e1ee:	f007 f9d6 	bl	c02559e <mbedtls_mpi_mul_int>
 c01e1f2:	b920      	cbnz	r0, c01e1fe <ecp_mod_p255+0x6a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 c01e1f4:	aa01      	add	r2, sp, #4
 c01e1f6:	4621      	mov	r1, r4
 c01e1f8:	4620      	mov	r0, r4
 c01e1fa:	f007 f857 	bl	c0252ac <mbedtls_mpi_add_abs>
}
 c01e1fe:	b00f      	add	sp, #60	; 0x3c
 c01e200:	bd30      	pop	{r4, r5, pc}
        N->p[i] = 0;
 c01e202:	68a1      	ldr	r1, [r4, #8]
 c01e204:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    for( i = P255_WIDTH; i < N->n; i++ )
 c01e208:	3301      	adds	r3, #1
 c01e20a:	e7eb      	b.n	c01e1e4 <ecp_mod_p255+0x50>
        return( 0 );
 c01e20c:	2000      	movs	r0, #0
 c01e20e:	e7f6      	b.n	c01e1fe <ecp_mod_p255+0x6a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c01e210:	4800      	ldr	r0, [pc, #0]	; (c01e214 <ecp_mod_p255+0x80>)
 c01e212:	e7f4      	b.n	c01e1fe <ecp_mod_p255+0x6a>
 c01e214:	ffffb080 	.word	0xffffb080

0c01e218 <ecp_group_load>:
{
 c01e218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c01e21c:	4604      	mov	r4, r0
    ecp_mpi_load( &grp->P, p, plen );
 c01e21e:	f100 0a04 	add.w	sl, r0, #4
    X->s = 1;
 c01e222:	2001      	movs	r0, #1
    X->n = len / sizeof( mbedtls_mpi_uint );
 c01e224:	0892      	lsrs	r2, r2, #2
    X->s = 1;
 c01e226:	6060      	str	r0, [r4, #4]
    X->p = (mbedtls_mpi_uint *) p;
 c01e228:	e9c4 2102 	strd	r2, r1, [r4, #8]
    if( a != NULL )
 c01e22c:	b123      	cbz	r3, c01e238 <ecp_group_load+0x20>
    X->n = len / sizeof( mbedtls_mpi_uint );
 c01e22e:	9a08      	ldr	r2, [sp, #32]
    X->s = 1;
 c01e230:	6120      	str	r0, [r4, #16]
    X->n = len / sizeof( mbedtls_mpi_uint );
 c01e232:	0892      	lsrs	r2, r2, #2
    X->p = (mbedtls_mpi_uint *) p;
 c01e234:	e9c4 2305 	strd	r2, r3, [r4, #20]
    X->s = 1;
 c01e238:	2501      	movs	r5, #1
    X->n = len / sizeof( mbedtls_mpi_uint );
 c01e23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    X->s = 1;
 c01e23c:	61e5      	str	r5, [r4, #28]
    X->n = len / sizeof( mbedtls_mpi_uint );
 c01e23e:	089b      	lsrs	r3, r3, #2
 c01e240:	6223      	str	r3, [r4, #32]
    X->p = (mbedtls_mpi_uint *) p;
 c01e242:	9b09      	ldr	r3, [sp, #36]	; 0x24
    X->s = 1;
 c01e244:	64e5      	str	r5, [r4, #76]	; 0x4c
    X->p = (mbedtls_mpi_uint *) p;
 c01e246:	6263      	str	r3, [r4, #36]	; 0x24
    X->n = len / sizeof( mbedtls_mpi_uint );
 c01e248:	9b10      	ldr	r3, [sp, #64]	; 0x40
    X->s = 1;
 c01e24a:	62a5      	str	r5, [r4, #40]	; 0x28
    X->n = len / sizeof( mbedtls_mpi_uint );
 c01e24c:	089b      	lsrs	r3, r3, #2
 c01e24e:	6523      	str	r3, [r4, #80]	; 0x50
    X->p = (mbedtls_mpi_uint *) p;
 c01e250:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    X->s = 1;
 c01e252:	6365      	str	r5, [r4, #52]	; 0x34
    X->p = (mbedtls_mpi_uint *) p;
 c01e254:	6563      	str	r3, [r4, #84]	; 0x54
    X->n = len / sizeof( mbedtls_mpi_uint );
 c01e256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    X->n = 1;
 c01e258:	6465      	str	r5, [r4, #68]	; 0x44
    X->n = len / sizeof( mbedtls_mpi_uint );
 c01e25a:	089b      	lsrs	r3, r3, #2
 c01e25c:	62e3      	str	r3, [r4, #44]	; 0x2c
    X->p = (mbedtls_mpi_uint *) p;
 c01e25e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 c01e260:	4650      	mov	r0, sl
    X->p = (mbedtls_mpi_uint *) p;
 c01e262:	6323      	str	r3, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 c01e264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ecp_mpi_load( &grp->N, n, nlen );
 c01e266:	f104 064c 	add.w	r6, r4, #76	; 0x4c
    X->n = len / sizeof( mbedtls_mpi_uint );
 c01e26a:	089b      	lsrs	r3, r3, #2
 c01e26c:	63a3      	str	r3, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 c01e26e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ecp_mpi_load( &grp->B, b, blen );
 c01e270:	f104 091c 	add.w	r9, r4, #28
    X->s = 1;
 c01e274:	e9c4 350f 	strd	r3, r5, [r4, #60]	; 0x3c
    X->p = one;
 c01e278:	4b3f      	ldr	r3, [pc, #252]	; (c01e378 <ecp_group_load+0x160>)
    ecp_mpi_load( &grp->G.X, gx, gxlen );
 c01e27a:	f104 0828 	add.w	r8, r4, #40	; 0x28
    X->p = one;
 c01e27e:	64a3      	str	r3, [r4, #72]	; 0x48
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 c01e280:	f006 fdaa 	bl	c024dd8 <mbedtls_mpi_bitlen>
 c01e284:	65a0      	str	r0, [r4, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 c01e286:	4630      	mov	r0, r6
 c01e288:	f006 fda6 	bl	c024dd8 <mbedtls_mpi_bitlen>
    grp->h = 1;
 c01e28c:	e9c4 0517 	strd	r0, r5, [r4, #92]	; 0x5c
    grp->st_modulus_size = mbedtls_mpi_size( &grp->P );
 c01e290:	4650      	mov	r0, sl
 c01e292:	f006 fdc1 	bl	c024e18 <mbedtls_mpi_size>
 c01e296:	67e0      	str	r0, [r4, #124]	; 0x7c
    grp->st_order_size = mbedtls_mpi_size( &grp->N );
 c01e298:	4630      	mov	r0, r6
 c01e29a:	f006 fdbd 	bl	c024e18 <mbedtls_mpi_size>
    grp->st_p = mbedtls_calloc(grp->st_modulus_size, sizeof( uint8_t ));
 c01e29e:	4629      	mov	r1, r5
    grp->st_order_size = mbedtls_mpi_size( &grp->N );
 c01e2a0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    grp->st_p = mbedtls_calloc(grp->st_modulus_size, sizeof( uint8_t ));
 c01e2a4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 c01e2a6:	f00b ffe5 	bl	c02a274 <mbedtls_calloc>
    ecp_mpi_load( &grp->G.Y, gy, gylen );
 c01e2aa:	f104 0734 	add.w	r7, r4, #52	; 0x34
    grp->st_p = mbedtls_calloc(grp->st_modulus_size, sizeof( uint8_t ));
 c01e2ae:	4601      	mov	r1, r0
 c01e2b0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    MBEDTLS_MPI_CHK((grp->st_p == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01e2b4:	2800      	cmp	r0, #0
 c01e2b6:	d059      	beq.n	c01e36c <ecp_group_load+0x154>
    mbedtls_mpi_write_binary(&grp->P, grp->st_p, grp->st_modulus_size);
 c01e2b8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 c01e2ba:	4650      	mov	r0, sl
 c01e2bc:	f006 fe53 	bl	c024f66 <mbedtls_mpi_write_binary>
    grp->st_a_abs = mbedtls_calloc(grp->st_modulus_size, sizeof( uint8_t ));
 c01e2c0:	4629      	mov	r1, r5
 c01e2c2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 c01e2c4:	f00b ffd6 	bl	c02a274 <mbedtls_calloc>
 c01e2c8:	4601      	mov	r1, r0
 c01e2ca:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    MBEDTLS_MPI_CHK((grp->st_a_abs == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01e2ce:	2800      	cmp	r0, #0
 c01e2d0:	d04c      	beq.n	c01e36c <ecp_group_load+0x154>
    if (grp->A.p == NULL)
 c01e2d2:	69a3      	ldr	r3, [r4, #24]
 c01e2d4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 c01e2d6:	2b00      	cmp	r3, #0
 c01e2d8:	d140      	bne.n	c01e35c <ecp_group_load+0x144>
        mbedtls_platform_zeroize(grp->st_a_abs, grp->st_modulus_size);
 c01e2da:	4611      	mov	r1, r2
 c01e2dc:	f00b ffe0 	bl	c02a2a0 <mbedtls_platform_zeroize>
        grp->st_a_abs[grp->st_modulus_size - 1] = 3U;
 c01e2e0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 c01e2e2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 c01e2e6:	4413      	add	r3, r2
 c01e2e8:	2203      	movs	r2, #3
 c01e2ea:	f803 2c01 	strb.w	r2, [r3, #-1]
        grp->st_a_sign = 1U;
 c01e2ee:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    grp->st_b = mbedtls_calloc(grp->st_modulus_size, sizeof( uint8_t ));
 c01e2f2:	2101      	movs	r1, #1
 c01e2f4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 c01e2f6:	f00b ffbd 	bl	c02a274 <mbedtls_calloc>
 c01e2fa:	4601      	mov	r1, r0
 c01e2fc:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    MBEDTLS_MPI_CHK((grp->st_b == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01e300:	b3a0      	cbz	r0, c01e36c <ecp_group_load+0x154>
    mbedtls_mpi_write_binary(&grp->B, grp->st_b, grp->st_modulus_size);
 c01e302:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 c01e304:	4648      	mov	r0, r9
 c01e306:	f006 fe2e 	bl	c024f66 <mbedtls_mpi_write_binary>
    grp->st_gx = mbedtls_calloc(grp->st_modulus_size, sizeof( uint8_t ));
 c01e30a:	2101      	movs	r1, #1
 c01e30c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 c01e30e:	f00b ffb1 	bl	c02a274 <mbedtls_calloc>
 c01e312:	4601      	mov	r1, r0
 c01e314:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    MBEDTLS_MPI_CHK((grp->st_gx == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01e318:	b340      	cbz	r0, c01e36c <ecp_group_load+0x154>
    mbedtls_mpi_write_binary(&grp->G.X, grp->st_gx, grp->st_modulus_size);
 c01e31a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 c01e31c:	4640      	mov	r0, r8
 c01e31e:	f006 fe22 	bl	c024f66 <mbedtls_mpi_write_binary>
    grp->st_gy = mbedtls_calloc(grp->st_modulus_size, sizeof( uint8_t ));
 c01e322:	2101      	movs	r1, #1
 c01e324:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 c01e326:	f00b ffa5 	bl	c02a274 <mbedtls_calloc>
 c01e32a:	4601      	mov	r1, r0
 c01e32c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
    MBEDTLS_MPI_CHK((grp->st_gy == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01e330:	b1e0      	cbz	r0, c01e36c <ecp_group_load+0x154>
    mbedtls_mpi_write_binary(&grp->G.Y, grp->st_gy, grp->st_modulus_size);
 c01e332:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 c01e334:	4638      	mov	r0, r7
 c01e336:	f006 fe16 	bl	c024f66 <mbedtls_mpi_write_binary>
    grp->st_n = mbedtls_calloc(grp->st_order_size, sizeof( uint8_t ));
 c01e33a:	2101      	movs	r1, #1
 c01e33c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 c01e340:	f00b ff98 	bl	c02a274 <mbedtls_calloc>
 c01e344:	4601      	mov	r1, r0
 c01e346:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    MBEDTLS_MPI_CHK((grp->st_n == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01e34a:	b178      	cbz	r0, c01e36c <ecp_group_load+0x154>
    mbedtls_mpi_write_binary(&grp->N, grp->st_n, grp->st_order_size);
 c01e34c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 c01e350:	4630      	mov	r0, r6
 c01e352:	f006 fe08 	bl	c024f66 <mbedtls_mpi_write_binary>
    MBEDTLS_MPI_CHK((grp->st_n == NULL) ? MBEDTLS_ERR_ECP_ALLOC_FAILED : 0);
 c01e356:	2000      	movs	r0, #0
}
 c01e358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mbedtls_mpi_write_binary(&grp->A, grp->st_a_abs, grp->st_modulus_size);
 c01e35c:	f104 0010 	add.w	r0, r4, #16
 c01e360:	f006 fe01 	bl	c024f66 <mbedtls_mpi_write_binary>
        grp->st_a_sign = 0;
 c01e364:	2300      	movs	r3, #0
 c01e366:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 c01e36a:	e7c2      	b.n	c01e2f2 <ecp_group_load+0xda>
        mbedtls_ecp_group_free( grp );
 c01e36c:	4620      	mov	r0, r4
 c01e36e:	f7fe ffc3 	bl	c01d2f8 <mbedtls_ecp_group_free>
 c01e372:	4802      	ldr	r0, [pc, #8]	; (c01e37c <ecp_group_load+0x164>)
    return( ret );
 c01e374:	e7f0      	b.n	c01e358 <ecp_group_load+0x140>
 c01e376:	bf00      	nop
 c01e378:	30035b18 	.word	0x30035b18
 c01e37c:	ffffb280 	.word	0xffffb280

0c01e380 <ecp_mod_koblitz.constprop.0>:
 * Write N as A0 + 2^224 A1, return A0 + R * A1.
 * Actually do two passes, since R is big.
 */
#define P_KOBLITZ_MAX   ( 256 / 8 / sizeof( mbedtls_mpi_uint ) )  // Max limbs in P
#define P_KOBLITZ_R     ( 8 / sizeof( mbedtls_mpi_uint ) )        // Limbs in R
static inline int ecp_mod_koblitz( mbedtls_mpi *N, mbedtls_mpi_uint *Rp, size_t p_limbs,
 c01e380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    size_t i;
    mbedtls_mpi M, R;
    mbedtls_mpi_uint Mp[P_KOBLITZ_MAX + P_KOBLITZ_R + 1];

    if( N->n < p_limbs )
 c01e384:	f8d0 b004 	ldr.w	fp, [r0, #4]
static inline int ecp_mod_koblitz( mbedtls_mpi *N, mbedtls_mpi_uint *Rp, size_t p_limbs,
 c01e388:	b093      	sub	sp, #76	; 0x4c
    if( N->n < p_limbs )
 c01e38a:	4593      	cmp	fp, r2
static inline int ecp_mod_koblitz( mbedtls_mpi *N, mbedtls_mpi_uint *Rp, size_t p_limbs,
 c01e38c:	4606      	mov	r6, r0
 c01e38e:	4615      	mov	r5, r2
    if( N->n < p_limbs )
 c01e390:	d369      	bcc.n	c01e466 <ecp_mod_koblitz.constprop.0+0xe6>
 c01e392:	ebab 0405 	sub.w	r4, fp, r5
    /* Common setup for M */
    M.s = 1;
    M.p = Mp;

    /* M = A1 */
    M.n = N->n - ( p_limbs - adjust );
 c01e396:	42ac      	cmp	r4, r5
    R.n = P_KOBLITZ_R;
 c01e398:	f04f 0202 	mov.w	r2, #2
    R.s = 1;
 c01e39c:	f04f 0301 	mov.w	r3, #1
    M.n = N->n - ( p_limbs - adjust );
 c01e3a0:	bf28      	it	cs
 c01e3a2:	462c      	movcs	r4, r5
    M.p = Mp;
 c01e3a4:	f10d 081c 	add.w	r8, sp, #28
    R.p = Rp;
 c01e3a8:	9106      	str	r1, [sp, #24]
    R.n = P_KOBLITZ_R;
 c01e3aa:	9205      	str	r2, [sp, #20]
    if( M.n > p_limbs + adjust )
        M.n = p_limbs + adjust;
    memset( Mp, 0, sizeof Mp );
 c01e3ac:	2100      	movs	r1, #0
 c01e3ae:	222c      	movs	r2, #44	; 0x2c
 c01e3b0:	4640      	mov	r0, r8
    R.s = 1;
 c01e3b2:	9304      	str	r3, [sp, #16]
    M.s = 1;
 c01e3b4:	9301      	str	r3, [sp, #4]
    M.n = N->n - ( p_limbs - adjust );
 c01e3b6:	9402      	str	r4, [sp, #8]
    M.p = Mp;
 c01e3b8:	f8cd 800c 	str.w	r8, [sp, #12]
    memset( Mp, 0, sizeof Mp );
 c01e3bc:	f7f9 fb03 	bl	c0179c6 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 c01e3c0:	f8d6 a008 	ldr.w	sl, [r6, #8]
 c01e3c4:	ea4f 0985 	mov.w	r9, r5, lsl #2
 c01e3c8:	eb0a 0709 	add.w	r7, sl, r9
 c01e3cc:	00a2      	lsls	r2, r4, #2
 c01e3ce:	4639      	mov	r1, r7
 c01e3d0:	4640      	mov	r0, r8
 c01e3d2:	f7f9 fad4 	bl	c01797e <memcpy>

    /* N = A0 */
    if( mask != 0 )
        N->p[p_limbs - 1] &= mask;
    for( i = p_limbs; i < N->n; i++ )
        N->p[i] = 0;
 c01e3d6:	2300      	movs	r3, #0
    M.n += R.n; /* Make room for multiplication by R */
 c01e3d8:	3402      	adds	r4, #2
 c01e3da:	9402      	str	r4, [sp, #8]
 c01e3dc:	eb0a 0a8b 	add.w	sl, sl, fp, lsl #2
    for( i = p_limbs; i < N->n; i++ )
 c01e3e0:	4557      	cmp	r7, sl
 c01e3e2:	d139      	bne.n	c01e458 <ecp_mod_koblitz.constprop.0+0xd8>

    /* N = A0 + R * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 c01e3e4:	a901      	add	r1, sp, #4
 c01e3e6:	aa04      	add	r2, sp, #16
 c01e3e8:	4608      	mov	r0, r1
 c01e3ea:	f007 f86f 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01e3ee:	4604      	mov	r4, r0
 c01e3f0:	bb70      	cbnz	r0, c01e450 <ecp_mod_koblitz.constprop.0+0xd0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 c01e3f2:	aa01      	add	r2, sp, #4
 c01e3f4:	4631      	mov	r1, r6
 c01e3f6:	4630      	mov	r0, r6
 c01e3f8:	f006 ff58 	bl	c0252ac <mbedtls_mpi_add_abs>
 c01e3fc:	4604      	mov	r4, r0
 c01e3fe:	bb38      	cbnz	r0, c01e450 <ecp_mod_koblitz.constprop.0+0xd0>

    /* Second pass */

    /* M = A1 */
    M.n = N->n - ( p_limbs - adjust );
 c01e400:	6877      	ldr	r7, [r6, #4]
    if( M.n > p_limbs + adjust )
        M.n = p_limbs + adjust;
    memset( Mp, 0, sizeof Mp );
 c01e402:	4601      	mov	r1, r0
 c01e404:	1b7b      	subs	r3, r7, r5
 c01e406:	222c      	movs	r2, #44	; 0x2c
 c01e408:	4640      	mov	r0, r8
    M.n = N->n - ( p_limbs - adjust );
 c01e40a:	42ab      	cmp	r3, r5
 c01e40c:	bf94      	ite	ls
 c01e40e:	9302      	strls	r3, [sp, #8]
 c01e410:	9502      	strhi	r5, [sp, #8]
    memset( Mp, 0, sizeof Mp );
 c01e412:	f7f9 fad8 	bl	c0179c6 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 c01e416:	f8dd b008 	ldr.w	fp, [sp, #8]
 c01e41a:	f8d6 a008 	ldr.w	sl, [r6, #8]
 c01e41e:	ea4f 028b 	mov.w	r2, fp, lsl #2
 c01e422:	eb0a 0109 	add.w	r1, sl, r9
 c01e426:	4640      	mov	r0, r8
 c01e428:	f7f9 faa9 	bl	c01797e <memcpy>
    if( shift != 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );
    M.n += R.n; /* Make room for multiplication by R */
 c01e42c:	9b05      	ldr	r3, [sp, #20]
 c01e42e:	445b      	add	r3, fp
 c01e430:	9302      	str	r3, [sp, #8]

    /* N = A0 */
    if( mask != 0 )
        N->p[p_limbs - 1] &= mask;
    for( i = p_limbs; i < N->n; i++ )
 c01e432:	42af      	cmp	r7, r5
 c01e434:	d813      	bhi.n	c01e45e <ecp_mod_koblitz.constprop.0+0xde>
        N->p[i] = 0;

    /* N = A0 + R * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 c01e436:	a901      	add	r1, sp, #4
 c01e438:	aa04      	add	r2, sp, #16
 c01e43a:	4608      	mov	r0, r1
 c01e43c:	f007 f846 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01e440:	4604      	mov	r4, r0
 c01e442:	b928      	cbnz	r0, c01e450 <ecp_mod_koblitz.constprop.0+0xd0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 c01e444:	aa01      	add	r2, sp, #4
 c01e446:	4631      	mov	r1, r6
 c01e448:	4630      	mov	r0, r6
 c01e44a:	f006 ff2f 	bl	c0252ac <mbedtls_mpi_add_abs>
 c01e44e:	4604      	mov	r4, r0

cleanup:
    return( ret );
}
 c01e450:	4620      	mov	r0, r4
 c01e452:	b013      	add	sp, #76	; 0x4c
 c01e454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        N->p[i] = 0;
 c01e458:	f847 3b04 	str.w	r3, [r7], #4
 c01e45c:	e7c0      	b.n	c01e3e0 <ecp_mod_koblitz.constprop.0+0x60>
        N->p[i] = 0;
 c01e45e:	f84a 4025 	str.w	r4, [sl, r5, lsl #2]
    for( i = p_limbs; i < N->n; i++ )
 c01e462:	3501      	adds	r5, #1
 c01e464:	e7e5      	b.n	c01e432 <ecp_mod_koblitz.constprop.0+0xb2>
        return( 0 );
 c01e466:	2400      	movs	r4, #0
 c01e468:	e7f2      	b.n	c01e450 <ecp_mod_koblitz.constprop.0+0xd0>
	...

0c01e46c <ecp_mod_p192k1>:
static int ecp_mod_p192k1( mbedtls_mpi *N )
{
    static mbedtls_mpi_uint Rp[] = {
        BYTES_TO_T_UINT_8( 0xC9, 0x11, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };

    return( ecp_mod_koblitz( N, Rp, 192 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 c01e46c:	2206      	movs	r2, #6
 c01e46e:	4901      	ldr	r1, [pc, #4]	; (c01e474 <ecp_mod_p192k1+0x8>)
 c01e470:	f7ff bf86 	b.w	c01e380 <ecp_mod_koblitz.constprop.0>
 c01e474:	30035b00 	.word	0x30035b00

0c01e478 <ecp_mod_p224k1>:
        BYTES_TO_T_UINT_8( 0x93, 0x1A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };

#if defined(MBEDTLS_HAVE_INT64)
    return( ecp_mod_koblitz( N, Rp, 4, 1, 32, 0xFFFFFFFF ) );
#else
    return( ecp_mod_koblitz( N, Rp, 224 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 c01e478:	2207      	movs	r2, #7
 c01e47a:	4901      	ldr	r1, [pc, #4]	; (c01e480 <ecp_mod_p224k1+0x8>)
 c01e47c:	f7ff bf80 	b.w	c01e380 <ecp_mod_koblitz.constprop.0>
 c01e480:	30035b08 	.word	0x30035b08

0c01e484 <ecp_mod_p256k1>:
 */
static int ecp_mod_p256k1( mbedtls_mpi *N )
{
    static mbedtls_mpi_uint Rp[] = {
        BYTES_TO_T_UINT_8( 0xD1, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };
    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 c01e484:	2208      	movs	r2, #8
 c01e486:	4901      	ldr	r1, [pc, #4]	; (c01e48c <ecp_mod_p256k1+0x8>)
 c01e488:	f7ff bf7a 	b.w	c01e380 <ecp_mod_koblitz.constprop.0>
 c01e48c:	30035b10 	.word	0x30035b10

0c01e490 <mbedtls_ecp_group_load>:
{
 c01e490:	b570      	push	{r4, r5, r6, lr}
 c01e492:	460c      	mov	r4, r1
 c01e494:	4605      	mov	r5, r0
 c01e496:	b08e      	sub	sp, #56	; 0x38
    mbedtls_ecp_group_free( grp );
 c01e498:	f7fe ff2e 	bl	c01d2f8 <mbedtls_ecp_group_free>
    grp->id = id;
 c01e49c:	702c      	strb	r4, [r5, #0]
    switch( id )
 c01e49e:	3c01      	subs	r4, #1
 c01e4a0:	2c0c      	cmp	r4, #12
 c01e4a2:	f200 8223 	bhi.w	c01e8ec <mbedtls_ecp_group_load+0x45c>
 c01e4a6:	e8df f014 	tbh	[pc, r4, lsl #1]
 c01e4aa:	000d      	.short	0x000d
 c01e4ac:	00360024 	.word	0x00360024
 c01e4b0:	00580047 	.word	0x00580047
 c01e4b4:	00b700a6 	.word	0x00b700a6
 c01e4b8:	00d900c8 	.word	0x00d900c8
 c01e4bc:	007d0069 	.word	0x007d0069
 c01e4c0:	01b50092 	.word	0x01b50092
            return( LOAD_GROUP( secp192r1 ) );
 c01e4c4:	2218      	movs	r2, #24
 c01e4c6:	4b90      	ldr	r3, [pc, #576]	; (c01e708 <mbedtls_ecp_group_load+0x278>)
 c01e4c8:	4990      	ldr	r1, [pc, #576]	; (c01e70c <mbedtls_ecp_group_load+0x27c>)
 c01e4ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 c01e4ce:	4b90      	ldr	r3, [pc, #576]	; (c01e710 <mbedtls_ecp_group_load+0x280>)
 c01e4d0:	9208      	str	r2, [sp, #32]
 c01e4d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 c01e4d6:	4b8f      	ldr	r3, [pc, #572]	; (c01e714 <mbedtls_ecp_group_load+0x284>)
 c01e4d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 c01e4dc:	4b8e      	ldr	r3, [pc, #568]	; (c01e718 <mbedtls_ecp_group_load+0x288>)
 c01e4de:	9301      	str	r3, [sp, #4]
 c01e4e0:	2300      	movs	r3, #0
 c01e4e2:	9300      	str	r3, [sp, #0]
            return( LOAD_GROUP( secp224r1 ) );
 c01e4e4:	4628      	mov	r0, r5
 c01e4e6:	f7ff fe97 	bl	c01e218 <ecp_group_load>
 c01e4ea:	4604      	mov	r4, r0
}
 c01e4ec:	4620      	mov	r0, r4
 c01e4ee:	b00e      	add	sp, #56	; 0x38
 c01e4f0:	bd70      	pop	{r4, r5, r6, pc}
            return( LOAD_GROUP( secp224r1 ) );
 c01e4f2:	231c      	movs	r3, #28
 c01e4f4:	4a89      	ldr	r2, [pc, #548]	; (c01e71c <mbedtls_ecp_group_load+0x28c>)
 c01e4f6:	9308      	str	r3, [sp, #32]
 c01e4f8:	e9cd 3206 	strd	r3, r2, [sp, #24]
 c01e4fc:	4a88      	ldr	r2, [pc, #544]	; (c01e720 <mbedtls_ecp_group_load+0x290>)
 c01e4fe:	4989      	ldr	r1, [pc, #548]	; (c01e724 <mbedtls_ecp_group_load+0x294>)
 c01e500:	e9cd 3204 	strd	r3, r2, [sp, #16]
 c01e504:	4a88      	ldr	r2, [pc, #544]	; (c01e728 <mbedtls_ecp_group_load+0x298>)
 c01e506:	e9cd 3202 	strd	r3, r2, [sp, #8]
 c01e50a:	4b88      	ldr	r3, [pc, #544]	; (c01e72c <mbedtls_ecp_group_load+0x29c>)
 c01e50c:	2220      	movs	r2, #32
 c01e50e:	9301      	str	r3, [sp, #4]
 c01e510:	2300      	movs	r3, #0
 c01e512:	9300      	str	r3, [sp, #0]
 c01e514:	e7e6      	b.n	c01e4e4 <mbedtls_ecp_group_load+0x54>
            return( LOAD_GROUP( secp256r1 ) );
 c01e516:	2220      	movs	r2, #32
 c01e518:	4b85      	ldr	r3, [pc, #532]	; (c01e730 <mbedtls_ecp_group_load+0x2a0>)
 c01e51a:	9208      	str	r2, [sp, #32]
 c01e51c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 c01e520:	4b84      	ldr	r3, [pc, #528]	; (c01e734 <mbedtls_ecp_group_load+0x2a4>)
 c01e522:	4985      	ldr	r1, [pc, #532]	; (c01e738 <mbedtls_ecp_group_load+0x2a8>)
 c01e524:	e9cd 2304 	strd	r2, r3, [sp, #16]
 c01e528:	4b84      	ldr	r3, [pc, #528]	; (c01e73c <mbedtls_ecp_group_load+0x2ac>)
 c01e52a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 c01e52e:	4b84      	ldr	r3, [pc, #528]	; (c01e740 <mbedtls_ecp_group_load+0x2b0>)
 c01e530:	9301      	str	r3, [sp, #4]
 c01e532:	2300      	movs	r3, #0
 c01e534:	9300      	str	r3, [sp, #0]
 c01e536:	e7d5      	b.n	c01e4e4 <mbedtls_ecp_group_load+0x54>
            return( LOAD_GROUP( secp384r1 ) );
 c01e538:	2230      	movs	r2, #48	; 0x30
 c01e53a:	4b82      	ldr	r3, [pc, #520]	; (c01e744 <mbedtls_ecp_group_load+0x2b4>)
 c01e53c:	9208      	str	r2, [sp, #32]
 c01e53e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 c01e542:	4b81      	ldr	r3, [pc, #516]	; (c01e748 <mbedtls_ecp_group_load+0x2b8>)
 c01e544:	4981      	ldr	r1, [pc, #516]	; (c01e74c <mbedtls_ecp_group_load+0x2bc>)
 c01e546:	e9cd 2304 	strd	r2, r3, [sp, #16]
 c01e54a:	4b81      	ldr	r3, [pc, #516]	; (c01e750 <mbedtls_ecp_group_load+0x2c0>)
 c01e54c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 c01e550:	4b80      	ldr	r3, [pc, #512]	; (c01e754 <mbedtls_ecp_group_load+0x2c4>)
 c01e552:	9301      	str	r3, [sp, #4]
 c01e554:	2300      	movs	r3, #0
 c01e556:	9300      	str	r3, [sp, #0]
 c01e558:	e7c4      	b.n	c01e4e4 <mbedtls_ecp_group_load+0x54>
            return( LOAD_GROUP( secp521r1 ) );
 c01e55a:	2244      	movs	r2, #68	; 0x44
 c01e55c:	4b7e      	ldr	r3, [pc, #504]	; (c01e758 <mbedtls_ecp_group_load+0x2c8>)
 c01e55e:	9208      	str	r2, [sp, #32]
 c01e560:	e9cd 2306 	strd	r2, r3, [sp, #24]
 c01e564:	4b7d      	ldr	r3, [pc, #500]	; (c01e75c <mbedtls_ecp_group_load+0x2cc>)
 c01e566:	497e      	ldr	r1, [pc, #504]	; (c01e760 <mbedtls_ecp_group_load+0x2d0>)
 c01e568:	e9cd 2304 	strd	r2, r3, [sp, #16]
 c01e56c:	4b7d      	ldr	r3, [pc, #500]	; (c01e764 <mbedtls_ecp_group_load+0x2d4>)
 c01e56e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 c01e572:	4b7d      	ldr	r3, [pc, #500]	; (c01e768 <mbedtls_ecp_group_load+0x2d8>)
 c01e574:	9301      	str	r3, [sp, #4]
 c01e576:	2300      	movs	r3, #0
 c01e578:	9300      	str	r3, [sp, #0]
 c01e57a:	e7b3      	b.n	c01e4e4 <mbedtls_ecp_group_load+0x54>
            return( LOAD_GROUP_A( secp192k1 ) );
 c01e57c:	2218      	movs	r2, #24
            grp->modp = ecp_mod_p192k1;
 c01e57e:	4b7b      	ldr	r3, [pc, #492]	; (c01e76c <mbedtls_ecp_group_load+0x2dc>)
            return( LOAD_GROUP_A( secp192k1 ) );
 c01e580:	497b      	ldr	r1, [pc, #492]	; (c01e770 <mbedtls_ecp_group_load+0x2e0>)
            grp->modp = ecp_mod_p192k1;
 c01e582:	666b      	str	r3, [r5, #100]	; 0x64
            return( LOAD_GROUP_A( secp192k1 ) );
 c01e584:	4b7b      	ldr	r3, [pc, #492]	; (c01e774 <mbedtls_ecp_group_load+0x2e4>)
 c01e586:	9208      	str	r2, [sp, #32]
 c01e588:	e9cd 2306 	strd	r2, r3, [sp, #24]
 c01e58c:	4b7a      	ldr	r3, [pc, #488]	; (c01e778 <mbedtls_ecp_group_load+0x2e8>)
 c01e58e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 c01e592:	4b7a      	ldr	r3, [pc, #488]	; (c01e77c <mbedtls_ecp_group_load+0x2ec>)
 c01e594:	9303      	str	r3, [sp, #12]
 c01e596:	2304      	movs	r3, #4
 c01e598:	e9cd 3100 	strd	r3, r1, [sp]
 c01e59c:	9302      	str	r3, [sp, #8]
 c01e59e:	4978      	ldr	r1, [pc, #480]	; (c01e780 <mbedtls_ecp_group_load+0x2f0>)
 c01e5a0:	4b78      	ldr	r3, [pc, #480]	; (c01e784 <mbedtls_ecp_group_load+0x2f4>)
 c01e5a2:	e79f      	b.n	c01e4e4 <mbedtls_ecp_group_load+0x54>
            grp->modp = ecp_mod_p224k1;
 c01e5a4:	4b78      	ldr	r3, [pc, #480]	; (c01e788 <mbedtls_ecp_group_load+0x2f8>)
            return( LOAD_GROUP_A( secp224k1 ) );
 c01e5a6:	221c      	movs	r2, #28
            grp->modp = ecp_mod_p224k1;
 c01e5a8:	666b      	str	r3, [r5, #100]	; 0x64
            return( LOAD_GROUP_A( secp224k1 ) );
 c01e5aa:	2320      	movs	r3, #32
 c01e5ac:	9308      	str	r3, [sp, #32]
 c01e5ae:	4b77      	ldr	r3, [pc, #476]	; (c01e78c <mbedtls_ecp_group_load+0x2fc>)
 c01e5b0:	4977      	ldr	r1, [pc, #476]	; (c01e790 <mbedtls_ecp_group_load+0x300>)
 c01e5b2:	9307      	str	r3, [sp, #28]
 c01e5b4:	4b77      	ldr	r3, [pc, #476]	; (c01e794 <mbedtls_ecp_group_load+0x304>)
 c01e5b6:	9206      	str	r2, [sp, #24]
 c01e5b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 c01e5bc:	4b76      	ldr	r3, [pc, #472]	; (c01e798 <mbedtls_ecp_group_load+0x308>)
 c01e5be:	9303      	str	r3, [sp, #12]
 c01e5c0:	2304      	movs	r3, #4
 c01e5c2:	e9cd 3100 	strd	r3, r1, [sp]
 c01e5c6:	9302      	str	r3, [sp, #8]
 c01e5c8:	4974      	ldr	r1, [pc, #464]	; (c01e79c <mbedtls_ecp_group_load+0x30c>)
 c01e5ca:	4b75      	ldr	r3, [pc, #468]	; (c01e7a0 <mbedtls_ecp_group_load+0x310>)
 c01e5cc:	e78a      	b.n	c01e4e4 <mbedtls_ecp_group_load+0x54>
            return( LOAD_GROUP_A( secp256k1 ) );
 c01e5ce:	2220      	movs	r2, #32
            grp->modp = ecp_mod_p256k1;
 c01e5d0:	4b74      	ldr	r3, [pc, #464]	; (c01e7a4 <mbedtls_ecp_group_load+0x314>)
            return( LOAD_GROUP_A( secp256k1 ) );
 c01e5d2:	4975      	ldr	r1, [pc, #468]	; (c01e7a8 <mbedtls_ecp_group_load+0x318>)
            grp->modp = ecp_mod_p256k1;
 c01e5d4:	666b      	str	r3, [r5, #100]	; 0x64
            return( LOAD_GROUP_A( secp256k1 ) );
 c01e5d6:	4b75      	ldr	r3, [pc, #468]	; (c01e7ac <mbedtls_ecp_group_load+0x31c>)
 c01e5d8:	9208      	str	r2, [sp, #32]
 c01e5da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 c01e5de:	4b74      	ldr	r3, [pc, #464]	; (c01e7b0 <mbedtls_ecp_group_load+0x320>)
 c01e5e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 c01e5e4:	4b73      	ldr	r3, [pc, #460]	; (c01e7b4 <mbedtls_ecp_group_load+0x324>)
 c01e5e6:	9303      	str	r3, [sp, #12]
 c01e5e8:	2304      	movs	r3, #4
 c01e5ea:	e9cd 3100 	strd	r3, r1, [sp]
 c01e5ee:	9302      	str	r3, [sp, #8]
 c01e5f0:	4971      	ldr	r1, [pc, #452]	; (c01e7b8 <mbedtls_ecp_group_load+0x328>)
 c01e5f2:	4b72      	ldr	r3, [pc, #456]	; (c01e7bc <mbedtls_ecp_group_load+0x32c>)
 c01e5f4:	e776      	b.n	c01e4e4 <mbedtls_ecp_group_load+0x54>
            return( LOAD_GROUP_A( brainpoolP256r1 ) );
 c01e5f6:	2220      	movs	r2, #32
 c01e5f8:	4b71      	ldr	r3, [pc, #452]	; (c01e7c0 <mbedtls_ecp_group_load+0x330>)
 c01e5fa:	9208      	str	r2, [sp, #32]
 c01e5fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 c01e600:	4b70      	ldr	r3, [pc, #448]	; (c01e7c4 <mbedtls_ecp_group_load+0x334>)
 c01e602:	4971      	ldr	r1, [pc, #452]	; (c01e7c8 <mbedtls_ecp_group_load+0x338>)
 c01e604:	e9cd 2304 	strd	r2, r3, [sp, #16]
 c01e608:	4b70      	ldr	r3, [pc, #448]	; (c01e7cc <mbedtls_ecp_group_load+0x33c>)
 c01e60a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 c01e60e:	4b70      	ldr	r3, [pc, #448]	; (c01e7d0 <mbedtls_ecp_group_load+0x340>)
 c01e610:	e9cd 2300 	strd	r2, r3, [sp]
 c01e614:	4b6f      	ldr	r3, [pc, #444]	; (c01e7d4 <mbedtls_ecp_group_load+0x344>)
 c01e616:	e765      	b.n	c01e4e4 <mbedtls_ecp_group_load+0x54>
            return( LOAD_GROUP_A( brainpoolP384r1 ) );
 c01e618:	2230      	movs	r2, #48	; 0x30
 c01e61a:	4b6f      	ldr	r3, [pc, #444]	; (c01e7d8 <mbedtls_ecp_group_load+0x348>)
 c01e61c:	9208      	str	r2, [sp, #32]
 c01e61e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 c01e622:	4b6e      	ldr	r3, [pc, #440]	; (c01e7dc <mbedtls_ecp_group_load+0x34c>)
 c01e624:	496e      	ldr	r1, [pc, #440]	; (c01e7e0 <mbedtls_ecp_group_load+0x350>)
 c01e626:	e9cd 2304 	strd	r2, r3, [sp, #16]
 c01e62a:	4b6e      	ldr	r3, [pc, #440]	; (c01e7e4 <mbedtls_ecp_group_load+0x354>)
 c01e62c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 c01e630:	4b6d      	ldr	r3, [pc, #436]	; (c01e7e8 <mbedtls_ecp_group_load+0x358>)
 c01e632:	e9cd 2300 	strd	r2, r3, [sp]
 c01e636:	4b6d      	ldr	r3, [pc, #436]	; (c01e7ec <mbedtls_ecp_group_load+0x35c>)
 c01e638:	e754      	b.n	c01e4e4 <mbedtls_ecp_group_load+0x54>
            return( LOAD_GROUP_A( brainpoolP512r1 ) );
 c01e63a:	2240      	movs	r2, #64	; 0x40
 c01e63c:	4b6c      	ldr	r3, [pc, #432]	; (c01e7f0 <mbedtls_ecp_group_load+0x360>)
 c01e63e:	9208      	str	r2, [sp, #32]
 c01e640:	e9cd 2306 	strd	r2, r3, [sp, #24]
 c01e644:	4b6b      	ldr	r3, [pc, #428]	; (c01e7f4 <mbedtls_ecp_group_load+0x364>)
 c01e646:	496c      	ldr	r1, [pc, #432]	; (c01e7f8 <mbedtls_ecp_group_load+0x368>)
 c01e648:	e9cd 2304 	strd	r2, r3, [sp, #16]
 c01e64c:	4b6b      	ldr	r3, [pc, #428]	; (c01e7fc <mbedtls_ecp_group_load+0x36c>)
 c01e64e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 c01e652:	4b6b      	ldr	r3, [pc, #428]	; (c01e800 <mbedtls_ecp_group_load+0x370>)
 c01e654:	e9cd 2300 	strd	r2, r3, [sp]
 c01e658:	4b6a      	ldr	r3, [pc, #424]	; (c01e804 <mbedtls_ecp_group_load+0x374>)
 c01e65a:	e743      	b.n	c01e4e4 <mbedtls_ecp_group_load+0x54>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "01DB42" ) );
 c01e65c:	2110      	movs	r1, #16
            grp->modp = ecp_mod_p255;
 c01e65e:	4b6a      	ldr	r3, [pc, #424]	; (c01e808 <mbedtls_ecp_group_load+0x378>)
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "01DB42" ) );
 c01e660:	4a6a      	ldr	r2, [pc, #424]	; (c01e80c <mbedtls_ecp_group_load+0x37c>)
            grp->modp = ecp_mod_p255;
 c01e662:	666b      	str	r3, [r5, #100]	; 0x64
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "01DB42" ) );
 c01e664:	1868      	adds	r0, r5, r1
 c01e666:	f006 ffa7 	bl	c0255b8 <mbedtls_mpi_read_string>
 c01e66a:	4604      	mov	r4, r0
 c01e66c:	2800      	cmp	r0, #0
 c01e66e:	f040 8139 	bne.w	c01e8e4 <mbedtls_ecp_group_load+0x454>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 c01e672:	1d2e      	adds	r6, r5, #4
 c01e674:	2101      	movs	r1, #1
 c01e676:	4630      	mov	r0, r6
 c01e678:	f006 fb3e 	bl	c024cf8 <mbedtls_mpi_lset>
 c01e67c:	4604      	mov	r4, r0
 c01e67e:	2800      	cmp	r0, #0
 c01e680:	f040 8130 	bne.w	c01e8e4 <mbedtls_ecp_group_load+0x454>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 255 ) );
 c01e684:	21ff      	movs	r1, #255	; 0xff
 c01e686:	4630      	mov	r0, r6
 c01e688:	f006 fca2 	bl	c024fd0 <mbedtls_mpi_shift_l>
 c01e68c:	4604      	mov	r4, r0
 c01e68e:	2800      	cmp	r0, #0
 c01e690:	f040 8128 	bne.w	c01e8e4 <mbedtls_ecp_group_load+0x454>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 19 ) );
 c01e694:	2213      	movs	r2, #19
 c01e696:	4631      	mov	r1, r6
 c01e698:	4630      	mov	r0, r6
 c01e69a:	f006 ff01 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c01e69e:	4604      	mov	r4, r0
 c01e6a0:	2800      	cmp	r0, #0
 c01e6a2:	f040 811f 	bne.w	c01e8e4 <mbedtls_ecp_group_load+0x454>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 c01e6a6:	4630      	mov	r0, r6
 c01e6a8:	f006 fb96 	bl	c024dd8 <mbedtls_mpi_bitlen>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->N, 16,
 c01e6ac:	f105 064c 	add.w	r6, r5, #76	; 0x4c
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 c01e6b0:	65a8      	str	r0, [r5, #88]	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->N, 16,
 c01e6b2:	4a57      	ldr	r2, [pc, #348]	; (c01e810 <mbedtls_ecp_group_load+0x380>)
 c01e6b4:	2110      	movs	r1, #16
 c01e6b6:	4630      	mov	r0, r6
 c01e6b8:	f006 ff7e 	bl	c0255b8 <mbedtls_mpi_read_string>
 c01e6bc:	4604      	mov	r4, r0
 c01e6be:	2800      	cmp	r0, #0
 c01e6c0:	f040 8110 	bne.w	c01e8e4 <mbedtls_ecp_group_load+0x454>
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 252, 1 ) );
 c01e6c4:	2201      	movs	r2, #1
 c01e6c6:	21fc      	movs	r1, #252	; 0xfc
 c01e6c8:	4630      	mov	r0, r6
 c01e6ca:	f006 fb41 	bl	c024d50 <mbedtls_mpi_set_bit>
 c01e6ce:	4604      	mov	r4, r0
 c01e6d0:	2800      	cmp	r0, #0
 c01e6d2:	f040 8107 	bne.w	c01e8e4 <mbedtls_ecp_group_load+0x454>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 9 ) );
 c01e6d6:	2109      	movs	r1, #9
 c01e6d8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 c01e6dc:	f006 fb0c 	bl	c024cf8 <mbedtls_mpi_lset>
 c01e6e0:	4604      	mov	r4, r0
 c01e6e2:	2800      	cmp	r0, #0
 c01e6e4:	f040 80fe 	bne.w	c01e8e4 <mbedtls_ecp_group_load+0x454>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 c01e6e8:	2101      	movs	r1, #1
 c01e6ea:	f105 0040 	add.w	r0, r5, #64	; 0x40
 c01e6ee:	f006 fb03 	bl	c024cf8 <mbedtls_mpi_lset>
 c01e6f2:	4604      	mov	r4, r0
 c01e6f4:	2800      	cmp	r0, #0
 c01e6f6:	f040 80f5 	bne.w	c01e8e4 <mbedtls_ecp_group_load+0x454>
    mbedtls_mpi_free( &grp->G.Y );
 c01e6fa:	f105 0034 	add.w	r0, r5, #52	; 0x34
 c01e6fe:	f006 fa41 	bl	c024b84 <mbedtls_mpi_free>
    grp->nbits = 254;
 c01e702:	23fe      	movs	r3, #254	; 0xfe
 c01e704:	65eb      	str	r3, [r5, #92]	; 0x5c
 c01e706:	e6f1      	b.n	c01e4ec <mbedtls_ecp_group_load+0x5c>
 c01e708:	0c034a9c 	.word	0x0c034a9c
 c01e70c:	0c034ab4 	.word	0x0c034ab4
 c01e710:	0c034a84 	.word	0x0c034a84
 c01e714:	0c034a6c 	.word	0x0c034a6c
 c01e718:	0c034a54 	.word	0x0c034a54
 c01e71c:	0c034b9c 	.word	0x0c034b9c
 c01e720:	0c034b80 	.word	0x0c034b80
 c01e724:	0c034bb8 	.word	0x0c034bb8
 c01e728:	0c034b64 	.word	0x0c034b64
 c01e72c:	0c034b48 	.word	0x0c034b48
 c01e730:	0c034cc0 	.word	0x0c034cc0
 c01e734:	0c034ca0 	.word	0x0c034ca0
 c01e738:	0c034ce0 	.word	0x0c034ce0
 c01e73c:	0c034c80 	.word	0x0c034c80
 c01e740:	0c034c60 	.word	0x0c034c60
 c01e744:	0c034d90 	.word	0x0c034d90
 c01e748:	0c034d60 	.word	0x0c034d60
 c01e74c:	0c034dc0 	.word	0x0c034dc0
 c01e750:	0c034d30 	.word	0x0c034d30
 c01e754:	0c034d00 	.word	0x0c034d00
 c01e758:	0c034ebc 	.word	0x0c034ebc
 c01e75c:	0c034e78 	.word	0x0c034e78
 c01e760:	0c034f00 	.word	0x0c034f00
 c01e764:	0c034e34 	.word	0x0c034e34
 c01e768:	0c034df0 	.word	0x0c034df0
 c01e76c:	0c01e46d 	.word	0x0c01e46d
 c01e770:	0c0349f0 	.word	0x0c0349f0
 c01e774:	0c034a24 	.word	0x0c034a24
 c01e778:	0c034a0c 	.word	0x0c034a0c
 c01e77c:	0c0349f4 	.word	0x0c0349f4
 c01e780:	0c034a3c 	.word	0x0c034a3c
 c01e784:	0c0349ec 	.word	0x0c0349ec
 c01e788:	0c01e479 	.word	0x0c01e479
 c01e78c:	0c034b0c 	.word	0x0c034b0c
 c01e790:	0c034ad0 	.word	0x0c034ad0
 c01e794:	0c034af0 	.word	0x0c034af0
 c01e798:	0c034ad4 	.word	0x0c034ad4
 c01e79c:	0c034b2c 	.word	0x0c034b2c
 c01e7a0:	0c034acc 	.word	0x0c034acc
 c01e7a4:	0c01e485 	.word	0x0c01e485
 c01e7a8:	0c034bdc 	.word	0x0c034bdc
 c01e7ac:	0c034c20 	.word	0x0c034c20
 c01e7b0:	0c034c00 	.word	0x0c034c00
 c01e7b4:	0c034be0 	.word	0x0c034be0
 c01e7b8:	0c034c40 	.word	0x0c034c40
 c01e7bc:	0c034bd8 	.word	0x0c034bd8
 c01e7c0:	0c0346a4 	.word	0x0c0346a4
 c01e7c4:	0c034684 	.word	0x0c034684
 c01e7c8:	0c0346c4 	.word	0x0c0346c4
 c01e7cc:	0c034664 	.word	0x0c034664
 c01e7d0:	0c034644 	.word	0x0c034644
 c01e7d4:	0c034624 	.word	0x0c034624
 c01e7d8:	0c0347a4 	.word	0x0c0347a4
 c01e7dc:	0c034774 	.word	0x0c034774
 c01e7e0:	0c0347d4 	.word	0x0c0347d4
 c01e7e4:	0c034744 	.word	0x0c034744
 c01e7e8:	0c034714 	.word	0x0c034714
 c01e7ec:	0c0346e4 	.word	0x0c0346e4
 c01e7f0:	0c034904 	.word	0x0c034904
 c01e7f4:	0c0348c4 	.word	0x0c0348c4
 c01e7f8:	0c034944 	.word	0x0c034944
 c01e7fc:	0c034884 	.word	0x0c034884
 c01e800:	0c034844 	.word	0x0c034844
 c01e804:	0c034804 	.word	0x0c034804
 c01e808:	0c01e195 	.word	0x0c01e195
 c01e80c:	0c034984 	.word	0x0c034984
 c01e810:	0c03498b 	.word	0x0c03498b
            grp->modp = ecp_mod_p448;
 c01e814:	4b38      	ldr	r3, [pc, #224]	; (c01e8f8 <mbedtls_ecp_group_load+0x468>)
    mbedtls_mpi_init( &Ns );
 c01e816:	a80b      	add	r0, sp, #44	; 0x2c
            grp->modp = ecp_mod_p448;
 c01e818:	666b      	str	r3, [r5, #100]	; 0x64
    mbedtls_mpi_init( &Ns );
 c01e81a:	f006 f9ad 	bl	c024b78 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "98AA" ) );
 c01e81e:	2110      	movs	r1, #16
 c01e820:	4a36      	ldr	r2, [pc, #216]	; (c01e8fc <mbedtls_ecp_group_load+0x46c>)
 c01e822:	1868      	adds	r0, r5, r1
 c01e824:	f006 fec8 	bl	c0255b8 <mbedtls_mpi_read_string>
 c01e828:	4604      	mov	r4, r0
 c01e82a:	2800      	cmp	r0, #0
 c01e82c:	d154      	bne.n	c01e8d8 <mbedtls_ecp_group_load+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 c01e82e:	1d2e      	adds	r6, r5, #4
 c01e830:	2101      	movs	r1, #1
 c01e832:	4630      	mov	r0, r6
 c01e834:	f006 fa60 	bl	c024cf8 <mbedtls_mpi_lset>
 c01e838:	4604      	mov	r4, r0
 c01e83a:	2800      	cmp	r0, #0
 c01e83c:	d14c      	bne.n	c01e8d8 <mbedtls_ecp_group_load+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 c01e83e:	21e0      	movs	r1, #224	; 0xe0
 c01e840:	4630      	mov	r0, r6
 c01e842:	f006 fbc5 	bl	c024fd0 <mbedtls_mpi_shift_l>
 c01e846:	4604      	mov	r4, r0
 c01e848:	2800      	cmp	r0, #0
 c01e84a:	d145      	bne.n	c01e8d8 <mbedtls_ecp_group_load+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 c01e84c:	2201      	movs	r2, #1
 c01e84e:	4631      	mov	r1, r6
 c01e850:	4630      	mov	r0, r6
 c01e852:	f006 fe25 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c01e856:	4604      	mov	r4, r0
 c01e858:	2800      	cmp	r0, #0
 c01e85a:	d13d      	bne.n	c01e8d8 <mbedtls_ecp_group_load+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 c01e85c:	21e0      	movs	r1, #224	; 0xe0
 c01e85e:	4630      	mov	r0, r6
 c01e860:	f006 fbb6 	bl	c024fd0 <mbedtls_mpi_shift_l>
 c01e864:	4604      	mov	r4, r0
 c01e866:	bbb8      	cbnz	r0, c01e8d8 <mbedtls_ecp_group_load+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 c01e868:	2201      	movs	r2, #1
 c01e86a:	4631      	mov	r1, r6
 c01e86c:	4630      	mov	r0, r6
 c01e86e:	f006 fe17 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c01e872:	4604      	mov	r4, r0
 c01e874:	bb80      	cbnz	r0, c01e8d8 <mbedtls_ecp_group_load+0x448>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 c01e876:	4630      	mov	r0, r6
 c01e878:	f006 faae 	bl	c024dd8 <mbedtls_mpi_bitlen>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 5 ) );
 c01e87c:	2105      	movs	r1, #5
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 c01e87e:	65a8      	str	r0, [r5, #88]	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 5 ) );
 c01e880:	f105 0028 	add.w	r0, r5, #40	; 0x28
 c01e884:	f006 fa38 	bl	c024cf8 <mbedtls_mpi_lset>
 c01e888:	4604      	mov	r4, r0
 c01e88a:	bb28      	cbnz	r0, c01e8d8 <mbedtls_ecp_group_load+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 c01e88c:	2101      	movs	r1, #1
 c01e88e:	f105 0040 	add.w	r0, r5, #64	; 0x40
 c01e892:	f006 fa31 	bl	c024cf8 <mbedtls_mpi_lset>
 c01e896:	4604      	mov	r4, r0
 c01e898:	b9f0      	cbnz	r0, c01e8d8 <mbedtls_ecp_group_load+0x448>
    mbedtls_mpi_free( &grp->G.Y );
 c01e89a:	f105 0034 	add.w	r0, r5, #52	; 0x34
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 446, 1 ) );
 c01e89e:	f105 064c 	add.w	r6, r5, #76	; 0x4c
    mbedtls_mpi_free( &grp->G.Y );
 c01e8a2:	f006 f96f 	bl	c024b84 <mbedtls_mpi_free>
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 446, 1 ) );
 c01e8a6:	2201      	movs	r2, #1
 c01e8a8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 c01e8ac:	4630      	mov	r0, r6
 c01e8ae:	f006 fa4f 	bl	c024d50 <mbedtls_mpi_set_bit>
 c01e8b2:	4604      	mov	r4, r0
 c01e8b4:	b980      	cbnz	r0, c01e8d8 <mbedtls_ecp_group_load+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &Ns, 16,
 c01e8b6:	4a12      	ldr	r2, [pc, #72]	; (c01e900 <mbedtls_ecp_group_load+0x470>)
 c01e8b8:	2110      	movs	r1, #16
 c01e8ba:	a80b      	add	r0, sp, #44	; 0x2c
 c01e8bc:	f006 fe7c 	bl	c0255b8 <mbedtls_mpi_read_string>
 c01e8c0:	4604      	mov	r4, r0
 c01e8c2:	b948      	cbnz	r0, c01e8d8 <mbedtls_ecp_group_load+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &grp->N, &grp->N, &Ns ) );
 c01e8c4:	aa0b      	add	r2, sp, #44	; 0x2c
 c01e8c6:	4631      	mov	r1, r6
 c01e8c8:	4630      	mov	r0, r6
 c01e8ca:	f006 fdb0 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c01e8ce:	4604      	mov	r4, r0
 c01e8d0:	b910      	cbnz	r0, c01e8d8 <mbedtls_ecp_group_load+0x448>
    grp->nbits = 447;
 c01e8d2:	f240 13bf 	movw	r3, #447	; 0x1bf
 c01e8d6:	65eb      	str	r3, [r5, #92]	; 0x5c
    mbedtls_mpi_free( &Ns );
 c01e8d8:	a80b      	add	r0, sp, #44	; 0x2c
 c01e8da:	f006 f953 	bl	c024b84 <mbedtls_mpi_free>
    if( ret != 0 )
 c01e8de:	2c00      	cmp	r4, #0
 c01e8e0:	f43f ae04 	beq.w	c01e4ec <mbedtls_ecp_group_load+0x5c>
        mbedtls_ecp_group_free( grp );
 c01e8e4:	4628      	mov	r0, r5
 c01e8e6:	f7fe fd07 	bl	c01d2f8 <mbedtls_ecp_group_free>
 c01e8ea:	e5ff      	b.n	c01e4ec <mbedtls_ecp_group_load+0x5c>
            mbedtls_ecp_group_free( grp );
 c01e8ec:	4628      	mov	r0, r5
 c01e8ee:	f7fe fd03 	bl	c01d2f8 <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 c01e8f2:	4c04      	ldr	r4, [pc, #16]	; (c01e904 <mbedtls_ecp_group_load+0x474>)
 c01e8f4:	e5fa      	b.n	c01e4ec <mbedtls_ecp_group_load+0x5c>
 c01e8f6:	bf00      	nop
 c01e8f8:	0c01e0b1 	.word	0x0c01e0b1
 c01e8fc:	0c0349ac 	.word	0x0c0349ac
 c01e900:	0c0349b1 	.word	0x0c0349b1
 c01e904:	ffffb180 	.word	0xffffb180

0c01e908 <mbedtls_gcm_init>:
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
    GCM_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 c01e908:	f44f 72a0 	mov.w	r2, #320	; 0x140
 c01e90c:	2100      	movs	r1, #0
 c01e90e:	f7f9 b85a 	b.w	c0179c6 <memset>
	...

0c01e914 <mbedtls_gcm_setkey>:
                        unsigned int keybits )
{
    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( key != NULL );

    switch (keybits) {
 c01e914:	2bc0      	cmp	r3, #192	; 0xc0
{
 c01e916:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c01e918:	4604      	mov	r4, r0
    switch (keybits) {
 c01e91a:	d058      	beq.n	c01e9ce <mbedtls_gcm_setkey+0xba>
 c01e91c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c01e920:	d02f      	beq.n	c01e982 <mbedtls_gcm_setkey+0x6e>
 c01e922:	2b80      	cmp	r3, #128	; 0x80
 c01e924:	d003      	beq.n	c01e92e <mbedtls_gcm_setkey+0x1a>
            SWAP_B8_TO_B32(ctx->gcm_key[6],key,24);
            SWAP_B8_TO_B32(ctx->gcm_key[7],key,28);
            break;

        default :
            return (MBEDTLS_ERR_GCM_BAD_INPUT);
 c01e926:	f06f 0013 	mvn.w	r0, #19

    /* allow multi-instance of CRYP use: save context for CRYP HW module CR */
    ctx->ctx_save_cr = ctx->hcryp_gcm.Instance->CR;

    return( 0 );
}
 c01e92a:	b003      	add	sp, #12
 c01e92c:	bd30      	pop	{r4, r5, pc}
            ctx->hcryp_gcm.Init.KeySize = CRYP_KEYSIZE_128B;;
 c01e92e:	2300      	movs	r3, #0
 c01e930:	6283      	str	r3, [r0, #40]	; 0x28
 c01e932:	6813      	ldr	r3, [r2, #0]
 c01e934:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->gcm_key[0],key,0);
 c01e936:	6003      	str	r3, [r0, #0]
 c01e938:	6853      	ldr	r3, [r2, #4]
 c01e93a:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->gcm_key[1],key,4);
 c01e93c:	6043      	str	r3, [r0, #4]
 c01e93e:	6893      	ldr	r3, [r2, #8]
 c01e940:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->gcm_key[2],key,8);
 c01e942:	6083      	str	r3, [r0, #8]
 c01e944:	68d3      	ldr	r3, [r2, #12]
 c01e946:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->gcm_key[3],key,12);
 c01e948:	60c3      	str	r3, [r0, #12]
    ctx->hcryp_gcm.Init.DataType = CRYP_DATATYPE_8B;
 c01e94a:	2304      	movs	r3, #4
 c01e94c:	4a21      	ldr	r2, [pc, #132]	; (c01e9d4 <mbedtls_gcm_setkey+0xc0>)
    ctx->hcryp_gcm.Init.pKey = ctx->gcm_key;
 c01e94e:	62e4      	str	r4, [r4, #44]	; 0x2c
    ctx->hcryp_gcm.Init.DataType = CRYP_DATATYPE_8B;
 c01e950:	e9c4 2308 	strd	r2, r3, [r4, #32]
    ctx->hcryp_gcm.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 c01e954:	2301      	movs	r3, #1
 c01e956:	6463      	str	r3, [r4, #68]	; 0x44
    ctx->hcryp_gcm.Init.Algorithm  = CRYP_AES_GCM_GMAC;
 c01e958:	2360      	movs	r3, #96	; 0x60
 c01e95a:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_RCC_AES_CLK_ENABLE();
 c01e95c:	4b1e      	ldr	r3, [pc, #120]	; (c01e9d8 <mbedtls_gcm_setkey+0xc4>)
    if (HAL_CRYP_DeInit(&ctx->hcryp_gcm) != HAL_OK) {
 c01e95e:	f104 0520 	add.w	r5, r4, #32
    __HAL_RCC_AES_CLK_ENABLE();
 c01e962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    if (HAL_CRYP_DeInit(&ctx->hcryp_gcm) != HAL_OK) {
 c01e964:	4628      	mov	r0, r5
    __HAL_RCC_AES_CLK_ENABLE();
 c01e966:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 c01e96a:	64da      	str	r2, [r3, #76]	; 0x4c
 c01e96c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c01e96e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c01e972:	9301      	str	r3, [sp, #4]
 c01e974:	9b01      	ldr	r3, [sp, #4]
    if (HAL_CRYP_DeInit(&ctx->hcryp_gcm) != HAL_OK) {
 c01e976:	f002 fe37 	bl	c0215e8 <HAL_CRYP_DeInit>
 c01e97a:	b1f0      	cbz	r0, c01e9ba <mbedtls_gcm_setkey+0xa6>
        return (MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED);
 c01e97c:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 c01e980:	e7d3      	b.n	c01e92a <mbedtls_gcm_setkey+0x16>
            ctx->hcryp_gcm.Init.KeySize = CRYP_KEYSIZE_256B;
 c01e982:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 c01e986:	6283      	str	r3, [r0, #40]	; 0x28
 c01e988:	6813      	ldr	r3, [r2, #0]
 c01e98a:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->gcm_key[0],key,0);
 c01e98c:	6003      	str	r3, [r0, #0]
 c01e98e:	6853      	ldr	r3, [r2, #4]
 c01e990:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->gcm_key[1],key,4);
 c01e992:	6043      	str	r3, [r0, #4]
 c01e994:	6893      	ldr	r3, [r2, #8]
 c01e996:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->gcm_key[2],key,8);
 c01e998:	6083      	str	r3, [r0, #8]
 c01e99a:	68d3      	ldr	r3, [r2, #12]
 c01e99c:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->gcm_key[3],key,12);
 c01e99e:	60c3      	str	r3, [r0, #12]
 c01e9a0:	6913      	ldr	r3, [r2, #16]
 c01e9a2:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->gcm_key[4],key,16);
 c01e9a4:	6103      	str	r3, [r0, #16]
 c01e9a6:	6953      	ldr	r3, [r2, #20]
 c01e9a8:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->gcm_key[5],key,20);
 c01e9aa:	6143      	str	r3, [r0, #20]
 c01e9ac:	6993      	ldr	r3, [r2, #24]
 c01e9ae:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->gcm_key[6],key,24);
 c01e9b0:	6183      	str	r3, [r0, #24]
 c01e9b2:	69d3      	ldr	r3, [r2, #28]
 c01e9b4:	ba1b      	rev	r3, r3
            SWAP_B8_TO_B32(ctx->gcm_key[7],key,28);
 c01e9b6:	61c3      	str	r3, [r0, #28]
            break;
 c01e9b8:	e7c7      	b.n	c01e94a <mbedtls_gcm_setkey+0x36>
    if (HAL_CRYP_Init(&ctx->hcryp_gcm) != HAL_OK) {
 c01e9ba:	4628      	mov	r0, r5
 c01e9bc:	f002 fdf0 	bl	c0215a0 <HAL_CRYP_Init>
 c01e9c0:	2800      	cmp	r0, #0
 c01e9c2:	d1db      	bne.n	c01e97c <mbedtls_gcm_setkey+0x68>
    ctx->ctx_save_cr = ctx->hcryp_gcm.Instance->CR;
 c01e9c4:	6a23      	ldr	r3, [r4, #32]
 c01e9c6:	681b      	ldr	r3, [r3, #0]
 c01e9c8:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    return( 0 );
 c01e9cc:	e7ad      	b.n	c01e92a <mbedtls_gcm_setkey+0x16>
            return MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED;
 c01e9ce:	f06f 0071 	mvn.w	r0, #113	; 0x71
 c01e9d2:	e7aa      	b.n	c01e92a <mbedtls_gcm_setkey+0x16>
 c01e9d4:	520c0000 	.word	0x520c0000
 c01e9d8:	50021000 	.word	0x50021000

0c01e9dc <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 c01e9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c01e9e0:	9d07      	ldr	r5, [sp, #28]
 c01e9e2:	4604      	mov	r4, r0
 c01e9e4:	4688      	mov	r8, r1
 c01e9e6:	4616      	mov	r6, r2
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 c01e9e8:	2b00      	cmp	r3, #0
 c01e9ea:	d039      	beq.n	c01ea60 <mbedtls_gcm_starts+0x84>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    /* HW implementation restrict support to the length of 96 bits */
    if( IV_LENGTH != iv_len )
 c01e9ec:	2b0c      	cmp	r3, #12
 c01e9ee:	d13a      	bne.n	c01ea66 <mbedtls_gcm_starts+0x8a>
    {
        return( MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED );
    }

    /* allow multi-context of CRYP use: restore context */
    ctx->hcryp_gcm.Instance->CR = ctx->ctx_save_cr;
 c01e9f0:	6a03      	ldr	r3, [r0, #32]
 c01e9f2:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c

    if ( HAL_CRYP_Init( &ctx->hcryp_gcm ) != HAL_OK )
 c01e9f6:	f100 0720 	add.w	r7, r0, #32
    ctx->hcryp_gcm.Instance->CR = ctx->ctx_save_cr;
 c01e9fa:	601a      	str	r2, [r3, #0]
    if ( HAL_CRYP_Init( &ctx->hcryp_gcm ) != HAL_OK )
 c01e9fc:	4638      	mov	r0, r7
 c01e9fe:	f002 fdcf 	bl	c0215a0 <HAL_CRYP_Init>
 c01ea02:	b118      	cbz	r0, c01ea0c <mbedtls_gcm_starts+0x30>
    {
        return( MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED );
 c01ea04:	f06f 006f 	mvn.w	r0, #111	; 0x6f

    /* allow multi-context of CRYP : save context */
    ctx->ctx_save_cr = ctx->hcryp_gcm.Instance->CR;

    return( 0 );
}
 c01ea08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ctx->len = 0;
 c01ea0c:	2000      	movs	r0, #0
 c01ea0e:	2100      	movs	r1, #0
 c01ea10:	f504 7398 	add.w	r3, r4, #304	; 0x130
    ctx->mode = mode;
 c01ea14:	f8c4 8138 	str.w	r8, [r4, #312]	; 0x138
    ctx->len = 0;
 c01ea18:	e9c3 0100 	strd	r0, r1, [r3]
 c01ea1c:	6832      	ldr	r2, [r6, #0]
    SWAP_B8_TO_B32(iv_32B[0],iv,0);
 c01ea1e:	4b13      	ldr	r3, [pc, #76]	; (c01ea6c <mbedtls_gcm_starts+0x90>)
 c01ea20:	ba12      	rev	r2, r2
 c01ea22:	601a      	str	r2, [r3, #0]
 c01ea24:	6872      	ldr	r2, [r6, #4]
 c01ea26:	ba12      	rev	r2, r2
    SWAP_B8_TO_B32(iv_32B[1],iv,4);
 c01ea28:	605a      	str	r2, [r3, #4]
 c01ea2a:	68b2      	ldr	r2, [r6, #8]
    ctx->hcryp_gcm.Init.pInitVect = iv_32B;
 c01ea2c:	6323      	str	r3, [r4, #48]	; 0x30
 c01ea2e:	ba12      	rev	r2, r2
    SWAP_B8_TO_B32(iv_32B[2],iv,8);
 c01ea30:	609a      	str	r2, [r3, #8]
    iv_32B[3] = 0x00000002;
 c01ea32:	2202      	movs	r2, #2
 c01ea34:	60da      	str	r2, [r3, #12]
    if (add_len != 0)
 c01ea36:	b18d      	cbz	r5, c01ea5c <mbedtls_gcm_starts+0x80>
      ctx->hcryp_gcm.Init.Header = (uint32_t *)add;
 c01ea38:	9b06      	ldr	r3, [sp, #24]
 c01ea3a:	63a3      	str	r3, [r4, #56]	; 0x38
    ctx->hcryp_gcm.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_BYTE;
 c01ea3c:	2301      	movs	r3, #1
      ctx->hcryp_gcm.Init.HeaderSize = 0;
 c01ea3e:	63e5      	str	r5, [r4, #60]	; 0x3c
    ctx->hcryp_gcm.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;
 c01ea40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    if ( HAL_CRYP_SetConfig( &ctx->hcryp_gcm, &ctx->hcryp_gcm.Init ) != HAL_OK )
 c01ea44:	f104 0124 	add.w	r1, r4, #36	; 0x24
 c01ea48:	4638      	mov	r0, r7
 c01ea4a:	f002 fd61 	bl	c021510 <HAL_CRYP_SetConfig>
 c01ea4e:	2800      	cmp	r0, #0
 c01ea50:	d1d8      	bne.n	c01ea04 <mbedtls_gcm_starts+0x28>
    ctx->ctx_save_cr = ctx->hcryp_gcm.Instance->CR;
 c01ea52:	6a23      	ldr	r3, [r4, #32]
 c01ea54:	681b      	ldr	r3, [r3, #0]
 c01ea56:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    return( 0 );
 c01ea5a:	e7d5      	b.n	c01ea08 <mbedtls_gcm_starts+0x2c>
      ctx->hcryp_gcm.Init.Header = NULL;
 c01ea5c:	63a5      	str	r5, [r4, #56]	; 0x38
 c01ea5e:	e7ed      	b.n	c01ea3c <mbedtls_gcm_starts+0x60>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 c01ea60:	f06f 0013 	mvn.w	r0, #19
 c01ea64:	e7d0      	b.n	c01ea08 <mbedtls_gcm_starts+0x2c>
        return( MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED );
 c01ea66:	f06f 0071 	mvn.w	r0, #113	; 0x71
 c01ea6a:	e7cd      	b.n	c01ea08 <mbedtls_gcm_starts+0x2c>
 c01ea6c:	30035d6c 	.word	0x30035d6c

0c01ea70 <mbedtls_gcm_update>:
{
    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
 c01ea70:	4293      	cmp	r3, r2
{
 c01ea72:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
 c01ea76:	4694      	mov	ip, r2
 c01ea78:	4604      	mov	r4, r0
 c01ea7a:	460d      	mov	r5, r1
 c01ea7c:	469e      	mov	lr, r3
    if( output > input && (size_t) ( output - input ) < length )
 c01ea7e:	d902      	bls.n	c01ea86 <mbedtls_gcm_update+0x16>
 c01ea80:	1a9b      	subs	r3, r3, r2
 c01ea82:	428b      	cmp	r3, r1
 c01ea84:	d33b      	bcc.n	c01eafe <mbedtls_gcm_update+0x8e>
 c01ea86:	2300      	movs	r3, #0
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 c01ea88:	f504 7898 	add.w	r8, r4, #304	; 0x130
 c01ea8c:	e9d8 ab00 	ldrd	sl, fp, [r8]
 c01ea90:	eb1a 0005 	adds.w	r0, sl, r5
 c01ea94:	eb5b 0103 	adcs.w	r1, fp, r3
 c01ea98:	f04f 0600 	mov.w	r6, #0
 c01ea9c:	f04f 0700 	mov.w	r7, #0
 c01eaa0:	bf24      	itt	cs
 c01eaa2:	2601      	movcs	r6, #1
 c01eaa4:	2700      	movcs	r7, #0
 c01eaa6:	ea56 0307 	orrs.w	r3, r6, r7
 c01eaaa:	d128      	bne.n	c01eafe <mbedtls_gcm_update+0x8e>
 c01eaac:	230f      	movs	r3, #15
 c01eaae:	f06f 021f 	mvn.w	r2, #31
 c01eab2:	428b      	cmp	r3, r1
 c01eab4:	bf08      	it	eq
 c01eab6:	4282      	cmpeq	r2, r0
 c01eab8:	d321      	bcc.n	c01eafe <mbedtls_gcm_update+0x8e>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    /* allow multi-context of CRYP use: restore context */
    ctx->hcryp_gcm.Instance->CR = ctx->ctx_save_cr;
 c01eaba:	6a23      	ldr	r3, [r4, #32]
 c01eabc:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 c01eac0:	601a      	str	r2, [r3, #0]
 c01eac2:	23ff      	movs	r3, #255	; 0xff

    ctx->len += length;
 c01eac4:	e9c8 0100 	strd	r0, r1, [r8]

    if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 c01eac8:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    {
         if (HAL_CRYP_Decrypt(&ctx->hcryp_gcm,
 c01eacc:	9300      	str	r3, [sp, #0]
 c01eace:	f104 0020 	add.w	r0, r4, #32
 c01ead2:	b2aa      	uxth	r2, r5
 c01ead4:	4673      	mov	r3, lr
    if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 c01ead6:	b971      	cbnz	r1, c01eaf6 <mbedtls_gcm_update+0x86>
         if (HAL_CRYP_Decrypt(&ctx->hcryp_gcm,
 c01ead8:	4661      	mov	r1, ip
 c01eada:	f003 f84b 	bl	c021b74 <HAL_CRYP_Decrypt>
 c01eade:	b938      	cbnz	r0, c01eaf0 <mbedtls_gcm_update+0x80>
    }

    /* allow multi-context of CRYP : save context */
    ctx->ctx_save_cr = ctx->hcryp_gcm.Instance->CR;

    return( 0 );
 c01eae0:	2000      	movs	r0, #0
    ctx->ctx_save_cr = ctx->hcryp_gcm.Instance->CR;
 c01eae2:	6a23      	ldr	r3, [r4, #32]
 c01eae4:	681b      	ldr	r3, [r3, #0]
 c01eae6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
}
 c01eaea:	b002      	add	sp, #8
 c01eaec:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
            return( MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED );
 c01eaf0:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 c01eaf4:	e7f9      	b.n	c01eaea <mbedtls_gcm_update+0x7a>
         if (HAL_CRYP_Encrypt(&ctx->hcryp_gcm,
 c01eaf6:	4661      	mov	r1, ip
 c01eaf8:	f002 ffb8 	bl	c021a6c <HAL_CRYP_Encrypt>
 c01eafc:	e7ef      	b.n	c01eade <mbedtls_gcm_update+0x6e>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 c01eafe:	f06f 0013 	mvn.w	r0, #19
 c01eb02:	e7f2      	b.n	c01eaea <mbedtls_gcm_update+0x7a>

0c01eb04 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 c01eb04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 c01eb06:	460c      	mov	r4, r1
    __ALIGN_BEGIN uint8_t mac[16]      __ALIGN_END; /* temporary mac         */

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( tag_len > 16 || tag_len < 4 )
 c01eb08:	1f11      	subs	r1, r2, #4
 c01eb0a:	290c      	cmp	r1, #12
{
 c01eb0c:	4605      	mov	r5, r0
    if( tag_len > 16 || tag_len < 4 )
 c01eb0e:	d823      	bhi.n	c01eb58 <mbedtls_gcm_finish+0x54>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* implementation restrict support to a 16 bytes tag buffer */
    if( tag_len != 16 )
 c01eb10:	2a10      	cmp	r2, #16
 c01eb12:	d124      	bne.n	c01eb5e <mbedtls_gcm_finish+0x5a>
        return( MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED );

    /* allow multi-context of CRYP use: restore context */
    ctx->hcryp_gcm.Instance->CR = ctx->ctx_save_cr;
 c01eb14:	f8d0 112c 	ldr.w	r1, [r0, #300]	; 0x12c
 c01eb18:	6a03      	ldr	r3, [r0, #32]

    /* Tag has a variable length */
    memset(mac, 0, sizeof(mac));
 c01eb1a:	4668      	mov	r0, sp
    ctx->hcryp_gcm.Instance->CR = ctx->ctx_save_cr;
 c01eb1c:	6019      	str	r1, [r3, #0]
    memset(mac, 0, sizeof(mac));
 c01eb1e:	2100      	movs	r1, #0
 c01eb20:	f7f8 ff51 	bl	c0179c6 <memset>

    /* Generate the authentication TAG */
    if (HAL_CRYPEx_AESGCM_GenerateAuthTAG(&ctx->hcryp_gcm,
 c01eb24:	22ff      	movs	r2, #255	; 0xff
 c01eb26:	4669      	mov	r1, sp
 c01eb28:	f105 0020 	add.w	r0, r5, #32
 c01eb2c:	f003 f8e4 	bl	c021cf8 <HAL_CRYPEx_AESGCM_GenerateAuthTAG>
 c01eb30:	b9c0      	cbnz	r0, c01eb64 <mbedtls_gcm_finish+0x60>
                                          ST_GCM_TIMEOUT)!= HAL_OK)
    {
        return (MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED);
    }

    memcpy( tag, mac, tag_len );
 c01eb32:	466b      	mov	r3, sp
 c01eb34:	4622      	mov	r2, r4
 c01eb36:	ae04      	add	r6, sp, #16
 c01eb38:	461c      	mov	r4, r3
 c01eb3a:	cc03      	ldmia	r4!, {r0, r1}
 c01eb3c:	42b4      	cmp	r4, r6
 c01eb3e:	6010      	str	r0, [r2, #0]
 c01eb40:	6051      	str	r1, [r2, #4]
 c01eb42:	4623      	mov	r3, r4
 c01eb44:	f102 0208 	add.w	r2, r2, #8
 c01eb48:	d1f6      	bne.n	c01eb38 <mbedtls_gcm_finish+0x34>

    /* allow multi-context of CRYP : save context */
    ctx->ctx_save_cr = ctx->hcryp_gcm.Instance->CR;

    return( 0 );
 c01eb4a:	2000      	movs	r0, #0
    ctx->ctx_save_cr = ctx->hcryp_gcm.Instance->CR;
 c01eb4c:	6a2b      	ldr	r3, [r5, #32]
 c01eb4e:	681b      	ldr	r3, [r3, #0]
 c01eb50:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
}
 c01eb54:	b004      	add	sp, #16
 c01eb56:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 c01eb58:	f06f 0013 	mvn.w	r0, #19
 c01eb5c:	e7fa      	b.n	c01eb54 <mbedtls_gcm_finish+0x50>
        return( MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED );
 c01eb5e:	f06f 0071 	mvn.w	r0, #113	; 0x71
 c01eb62:	e7f7      	b.n	c01eb54 <mbedtls_gcm_finish+0x50>
        return (MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED);
 c01eb64:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 c01eb68:	e7f4      	b.n	c01eb54 <mbedtls_gcm_finish+0x50>

0c01eb6a <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 c01eb6a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c01eb6e:	4617      	mov	r7, r2
 c01eb70:	e9dd 890d 	ldrd	r8, r9, [sp, #52]	; 0x34
 c01eb74:	e9dd 650f 	ldrd	r6, r5, [sp, #60]	; 0x3c
 c01eb78:	461a      	mov	r2, r3
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 c01eb7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
{
 c01eb7c:	4604      	mov	r4, r0
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 c01eb7e:	9301      	str	r3, [sp, #4]
 c01eb80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c01eb82:	9300      	str	r3, [sp, #0]
 c01eb84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c01eb86:	f7ff ff29 	bl	c01e9dc <mbedtls_gcm_starts>
 c01eb8a:	b970      	cbnz	r0, c01ebaa <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 c01eb8c:	464b      	mov	r3, r9
 c01eb8e:	4642      	mov	r2, r8
 c01eb90:	4639      	mov	r1, r7
 c01eb92:	4620      	mov	r0, r4
 c01eb94:	f7ff ff6c 	bl	c01ea70 <mbedtls_gcm_update>
 c01eb98:	b938      	cbnz	r0, c01ebaa <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 c01eb9a:	4632      	mov	r2, r6
 c01eb9c:	4629      	mov	r1, r5
 c01eb9e:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 c01eba0:	b003      	add	sp, #12
 c01eba2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 c01eba6:	f7ff bfad 	b.w	c01eb04 <mbedtls_gcm_finish>
}
 c01ebaa:	b003      	add	sp, #12
 c01ebac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0c01ebb0 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 c01ebb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01ebb2:	460e      	mov	r6, r1
 c01ebb4:	b08d      	sub	sp, #52	; 0x34
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 c01ebb6:	9916      	ldr	r1, [sp, #88]	; 0x58
{
 c01ebb8:	9f15      	ldr	r7, [sp, #84]	; 0x54
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 c01ebba:	9103      	str	r1, [sp, #12]
 c01ebbc:	9913      	ldr	r1, [sp, #76]	; 0x4c
{
 c01ebbe:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 c01ebc0:	9102      	str	r1, [sp, #8]
 c01ebc2:	9912      	ldr	r1, [sp, #72]	; 0x48
 c01ebc4:	ac08      	add	r4, sp, #32
 c01ebc6:	e9cd 3100 	strd	r3, r1, [sp]
 c01ebca:	e9cd 7405 	strd	r7, r4, [sp, #20]
 c01ebce:	4613      	mov	r3, r2
 c01ebd0:	9504      	str	r5, [sp, #16]
 c01ebd2:	4632      	mov	r2, r6
 c01ebd4:	2100      	movs	r1, #0
 c01ebd6:	f7ff ffc8 	bl	c01eb6a <mbedtls_gcm_crypt_and_tag>
 c01ebda:	b948      	cbnz	r0, c01ebf0 <mbedtls_gcm_auth_decrypt+0x40>
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 c01ebdc:	4603      	mov	r3, r0
 c01ebde:	42bb      	cmp	r3, r7
 c01ebe0:	d108      	bne.n	c01ebf4 <mbedtls_gcm_auth_decrypt+0x44>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 c01ebe2:	b128      	cbz	r0, c01ebf0 <mbedtls_gcm_auth_decrypt+0x40>
    {
        mbedtls_platform_zeroize( output, length );
 c01ebe4:	4628      	mov	r0, r5
 c01ebe6:	4631      	mov	r1, r6
 c01ebe8:	f00b fb5a 	bl	c02a2a0 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 c01ebec:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 c01ebf0:	b00d      	add	sp, #52	; 0x34
 c01ebf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        diff |= tag[i] ^ check_tag[i];
 c01ebf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 c01ebf6:	5ce1      	ldrb	r1, [r4, r3]
 c01ebf8:	5cd2      	ldrb	r2, [r2, r3]
    for( diff = 0, i = 0; i < tag_len; i++ )
 c01ebfa:	3301      	adds	r3, #1
        diff |= tag[i] ^ check_tag[i];
 c01ebfc:	404a      	eors	r2, r1
 c01ebfe:	4310      	orrs	r0, r2
 c01ec00:	e7ed      	b.n	c01ebde <mbedtls_gcm_auth_decrypt+0x2e>

0c01ec02 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
    if( ctx == NULL )
 c01ec02:	b118      	cbz	r0, c01ec0c <mbedtls_gcm_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 c01ec04:	f44f 71a0 	mov.w	r1, #320	; 0x140
 c01ec08:	f00b bb4a 	b.w	c02a2a0 <mbedtls_platform_zeroize>
}
 c01ec0c:	4770      	bx	lr
	...

0c01ec10 <ARM_USART_GetVersion>:
    0  /* Reserved */
};

static ARM_DRIVER_VERSION ARM_USART_GetVersion(void)
{
    return DriverVersion;
 c01ec10:	4b03      	ldr	r3, [pc, #12]	; (c01ec20 <ARM_USART_GetVersion+0x10>)
{
 c01ec12:	b082      	sub	sp, #8
    return DriverVersion;
 c01ec14:	6818      	ldr	r0, [r3, #0]
 c01ec16:	b283      	uxth	r3, r0
}
 c01ec18:	f363 000f 	bfi	r0, r3, #0, #16
 c01ec1c:	b002      	add	sp, #8
 c01ec1e:	4770      	bx	lr
 c01ec20:	0c034f44 	.word	0x0c034f44

0c01ec24 <ARM_USART_GetCapabilities>:

static ARM_USART_CAPABILITIES ARM_USART_GetCapabilities(void)
{
    return DriverCapabilities;
}
 c01ec24:	2001      	movs	r0, #1
 c01ec26:	4770      	bx	lr

0c01ec28 <ARM_USART0_Uninitialize>:

static int32_t ARM_USART0_Uninitialize(void)
{
    /* Nothing to be done */
    return ARM_DRIVER_OK;
}
 c01ec28:	2000      	movs	r0, #0
 c01ec2a:	4770      	bx	lr

0c01ec2c <ARM_USART0_PowerControl>:

static int32_t ARM_USART0_PowerControl(ARM_POWER_STATE state)
{
    return ARM_DRIVER_ERROR_UNSUPPORTED;
}
 c01ec2c:	f06f 0003 	mvn.w	r0, #3
 c01ec30:	4770      	bx	lr

0c01ec32 <ARM_USART0_Transfer>:
    ARG_UNUSED(data_out);
    ARG_UNUSED(data_in);
    ARG_UNUSED(num);

    return ARM_DRIVER_ERROR_UNSUPPORTED;
}
 c01ec32:	f06f 0003 	mvn.w	r0, #3
 c01ec36:	4770      	bx	lr

0c01ec38 <ARM_USART0_GetTxCount>:

static uint32_t ARM_USART0_GetTxCount(void)
{
    return (uint32_t)ARM_DRIVER_ERROR_UNSUPPORTED;
}
 c01ec38:	f06f 0003 	mvn.w	r0, #3
 c01ec3c:	4770      	bx	lr

0c01ec3e <ARM_USART0_Control>:
    return (uint32_t)ARM_DRIVER_ERROR_UNSUPPORTED;
}
static int32_t ARM_USART0_Control(uint32_t control, uint32_t arg)
{
    return ARM_DRIVER_OK;
}
 c01ec3e:	2000      	movs	r0, #0
 c01ec40:	4770      	bx	lr

0c01ec42 <ARM_USART0_GetStatus>:

static ARM_USART_STATUS ARM_USART0_GetStatus(void)
{
    ARM_USART_STATUS status = {0, 0, 0, 0, 0, 0, 0, 0};
 c01ec42:	2300      	movs	r3, #0
{
 c01ec44:	b082      	sub	sp, #8
    ARM_USART_STATUS status = {0, 0, 0, 0, 0, 0, 0, 0};
 c01ec46:	9301      	str	r3, [sp, #4]
    return status;
 c01ec48:	9801      	ldr	r0, [sp, #4]
}
 c01ec4a:	b002      	add	sp, #8
 c01ec4c:	4770      	bx	lr

0c01ec4e <ARM_USART0_GetModemStatus>:
    return ARM_DRIVER_ERROR_UNSUPPORTED;
}

static ARM_USART_MODEM_STATUS ARM_USART0_GetModemStatus(void)
{
    ARM_USART_MODEM_STATUS modem_status = {0, 0, 0, 0, 0};
 c01ec4e:	2300      	movs	r3, #0
{
 c01ec50:	b082      	sub	sp, #8
    ARM_USART_MODEM_STATUS modem_status = {0, 0, 0, 0, 0};
 c01ec52:	9301      	str	r3, [sp, #4]
    return modem_status;
 c01ec54:	9801      	ldr	r0, [sp, #4]
}
 c01ec56:	b002      	add	sp, #8
 c01ec58:	4770      	bx	lr
	...

0c01ec5c <ARM_USART0_Receive>:
{
 c01ec5c:	b510      	push	{r4, lr}
 c01ec5e:	460c      	mov	r4, r1
   if ((data == NULL) || (num == 0U)) {
 c01ec60:	4601      	mov	r1, r0
 c01ec62:	b130      	cbz	r0, c01ec72 <ARM_USART0_Receive+0x16>
 c01ec64:	b12c      	cbz	r4, c01ec72 <ARM_USART0_Receive+0x16>
  HAL_UART_Receive_IT(&uart_device, data, num);
 c01ec66:	b2a2      	uxth	r2, r4
 c01ec68:	4803      	ldr	r0, [pc, #12]	; (c01ec78 <ARM_USART0_Receive+0x1c>)
 c01ec6a:	f005 f9b3 	bl	c023fd4 <HAL_UART_Receive_IT>
  return num;
 c01ec6e:	4620      	mov	r0, r4
}
 c01ec70:	bd10      	pop	{r4, pc}
        return ARM_DRIVER_ERROR_PARAMETER;
 c01ec72:	f06f 0004 	mvn.w	r0, #4
 c01ec76:	e7fb      	b.n	c01ec70 <ARM_USART0_Receive+0x14>
 c01ec78:	30035d7c 	.word	0x30035d7c

0c01ec7c <ARM_USART0_Send>:
{
 c01ec7c:	b508      	push	{r3, lr}
    if ((data == NULL) || (num == 0U)) {
 c01ec7e:	b148      	cbz	r0, c01ec94 <ARM_USART0_Send+0x18>
 c01ec80:	b141      	cbz	r1, c01ec94 <ARM_USART0_Send+0x18>
    HAL_UART_Transmit(&uart_device, (uint8_t *) data, num,  1000);
 c01ec82:	b28a      	uxth	r2, r1
 c01ec84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c01ec88:	4601      	mov	r1, r0
 c01ec8a:	4804      	ldr	r0, [pc, #16]	; (c01ec9c <ARM_USART0_Send+0x20>)
 c01ec8c:	f005 f87e 	bl	c023d8c <HAL_UART_Transmit>
    return ARM_DRIVER_OK;
 c01ec90:	2000      	movs	r0, #0
}
 c01ec92:	bd08      	pop	{r3, pc}
        return ARM_DRIVER_ERROR_PARAMETER;
 c01ec94:	f06f 0004 	mvn.w	r0, #4
 c01ec98:	e7fb      	b.n	c01ec92 <ARM_USART0_Send+0x16>
 c01ec9a:	bf00      	nop
 c01ec9c:	30035d7c 	.word	0x30035d7c

0c01eca0 <ARM_USART0_Initialize>:
  COM_TX_GPIO_CLK_ENABLE();
 c01eca0:	4b27      	ldr	r3, [pc, #156]	; (c01ed40 <ARM_USART0_Initialize+0xa0>)
{
 c01eca2:	b530      	push	{r4, r5, lr}
  COM_TX_GPIO_CLK_ENABLE();
 c01eca4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 c01eca6:	b089      	sub	sp, #36	; 0x24
  COM_TX_GPIO_CLK_ENABLE();
 c01eca8:	f042 0201 	orr.w	r2, r2, #1
 c01ecac:	64da      	str	r2, [r3, #76]	; 0x4c
 c01ecae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  GPIO_Init.Alternate = COM_TX_AF;
 c01ecb0:	2507      	movs	r5, #7
  COM_TX_GPIO_CLK_ENABLE();
 c01ecb2:	f002 0201 	and.w	r2, r2, #1
 c01ecb6:	9200      	str	r2, [sp, #0]
 c01ecb8:	9a00      	ldr	r2, [sp, #0]
  COM_RX_GPIO_CLK_ENABLE();
 c01ecba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_Init(COM_TX_GPIO_PORT, &GPIO_Init);
 c01ecbc:	4c21      	ldr	r4, [pc, #132]	; (c01ed44 <ARM_USART0_Initialize+0xa4>)
  COM_RX_GPIO_CLK_ENABLE();
 c01ecbe:	f042 0201 	orr.w	r2, r2, #1
 c01ecc2:	64da      	str	r2, [r3, #76]	; 0x4c
 c01ecc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_Init(COM_TX_GPIO_PORT, &GPIO_Init);
 c01ecc6:	a903      	add	r1, sp, #12
  COM_RX_GPIO_CLK_ENABLE();
 c01ecc8:	f002 0201 	and.w	r2, r2, #1
 c01eccc:	9201      	str	r2, [sp, #4]
 c01ecce:	9a01      	ldr	r2, [sp, #4]
  COM_CLK_ENABLE();
 c01ecd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  HAL_GPIO_Init(COM_TX_GPIO_PORT, &GPIO_Init);
 c01ecd2:	4620      	mov	r0, r4
  COM_CLK_ENABLE();
 c01ecd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c01ecd8:	661a      	str	r2, [r3, #96]	; 0x60
 c01ecda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 c01ecdc:	f44f 7200 	mov.w	r2, #512	; 0x200
  COM_CLK_ENABLE();
 c01ece0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c01ece4:	9302      	str	r3, [sp, #8]
 c01ece6:	9b02      	ldr	r3, [sp, #8]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 c01ece8:	2302      	movs	r3, #2
 c01ecea:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 c01ecee:	9306      	str	r3, [sp, #24]
  GPIO_Init.Pull      = GPIO_PULLUP;
 c01ecf0:	2301      	movs	r3, #1
  GPIO_Init.Alternate = COM_TX_AF;
 c01ecf2:	9507      	str	r5, [sp, #28]
  GPIO_Init.Pull      = GPIO_PULLUP;
 c01ecf4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(COM_TX_GPIO_PORT, &GPIO_Init);
 c01ecf6:	f003 fa6d 	bl	c0221d4 <HAL_GPIO_Init>
  GPIO_Init.Pin       = COM_RX_PIN;
 c01ecfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(COM_RX_GPIO_PORT, &GPIO_Init);
 c01ecfe:	a903      	add	r1, sp, #12
 c01ed00:	4620      	mov	r0, r4
  GPIO_Init.Pin       = COM_RX_PIN;
 c01ed02:	9303      	str	r3, [sp, #12]
  GPIO_Init.Alternate = COM_RX_AF;
 c01ed04:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(COM_RX_GPIO_PORT, &GPIO_Init);
 c01ed06:	f003 fa65 	bl	c0221d4 <HAL_GPIO_Init>
  uart_device.Init.BaudRate       = 115200;
 c01ed0a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  uart_device.Instance = COM_INSTANCE;
 c01ed0e:	480e      	ldr	r0, [pc, #56]	; (c01ed48 <ARM_USART0_Initialize+0xa8>)
  uart_device.Init.BaudRate       = 115200;
 c01ed10:	490e      	ldr	r1, [pc, #56]	; (c01ed4c <ARM_USART0_Initialize+0xac>)
  uart_device.Init.Mode           = UART_MODE_TX_RX;
 c01ed12:	220c      	movs	r2, #12
  uart_device.Init.BaudRate       = 115200;
 c01ed14:	e9c0 1300 	strd	r1, r3, [r0]
  uart_device.Init.WordLength     = UART_WORDLENGTH_8B;
 c01ed18:	2300      	movs	r3, #0
  uart_device.Init.HwFlowCtl      = UART_HWCONTROL_NONE;
 c01ed1a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  uart_device.Init.OverSampling   = UART_OVERSAMPLING_8;
 c01ed1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  uart_device.Init.StopBits       = UART_STOPBITS_1;
 c01ed22:	e9c0 3302 	strd	r3, r3, [r0, #8]
  uart_device.Init.Parity         = UART_PARITY_NONE;
 c01ed26:	6103      	str	r3, [r0, #16]
  uart_device.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c01ed28:	e9c0 2307 	strd	r2, r3, [r0, #28]
  uart_device.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c01ed2c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&uart_device) != HAL_OK)
 c01ed2e:	f005 f8bd 	bl	c023eac <HAL_UART_Init>
 c01ed32:	3000      	adds	r0, #0
 c01ed34:	bf18      	it	ne
 c01ed36:	2001      	movne	r0, #1
}
 c01ed38:	4240      	negs	r0, r0
 c01ed3a:	b009      	add	sp, #36	; 0x24
 c01ed3c:	bd30      	pop	{r4, r5, pc}
 c01ed3e:	bf00      	nop
 c01ed40:	50021000 	.word	0x50021000
 c01ed44:	52020000 	.word	0x52020000
 c01ed48:	30035d7c 	.word	0x30035d7c
 c01ed4c:	50013800 	.word	0x50013800

0c01ed50 <ARM_USART0_SetModemControl>:
 c01ed50:	f06f 0003 	mvn.w	r0, #3
 c01ed54:	4770      	bx	lr

0c01ed56 <ARM_USART0_GetRxCount>:
 c01ed56:	f06f 0003 	mvn.w	r0, #3
 c01ed5a:	4770      	bx	lr

0c01ed5c <ARM_Flash_GetVersion>:
/* Flash Status */
static ARM_FLASH_STATUS ARM_FLASH0_STATUS = {0, 0, 0};

static ARM_DRIVER_VERSION ARM_Flash_GetVersion(void)
{
    return DriverVersion;
 c01ed5c:	4b03      	ldr	r3, [pc, #12]	; (c01ed6c <ARM_Flash_GetVersion+0x10>)
{
 c01ed5e:	b082      	sub	sp, #8
    return DriverVersion;
 c01ed60:	6818      	ldr	r0, [r3, #0]
 c01ed62:	b283      	uxth	r3, r0
}
 c01ed64:	f363 000f 	bfi	r0, r3, #0, #16
 c01ed68:	b002      	add	sp, #8
 c01ed6a:	4770      	bx	lr
 c01ed6c:	0c034f98 	.word	0x0c034f98

0c01ed70 <ARM_Flash_GetCapabilities>:

static ARM_FLASH_CAPABILITIES ARM_Flash_GetCapabilities(void)
{
    return DriverCapabilities;
}
 c01ed70:	200c      	movs	r0, #12
 c01ed72:	4770      	bx	lr

0c01ed74 <ARM_Flash_Uninitialize>:
}

static int32_t ARM_Flash_Uninitialize(void)
{
    return ARM_DRIVER_OK;
}
 c01ed74:	2000      	movs	r0, #0
 c01ed76:	4770      	bx	lr

0c01ed78 <ARM_Flash_PowerControl>:

static int32_t ARM_Flash_PowerControl(ARM_POWER_STATE state)
{
    switch(state) {
 c01ed78:	2801      	cmp	r0, #1
 c01ed7a:	d905      	bls.n	c01ed88 <ARM_Flash_PowerControl+0x10>
 c01ed7c:	2802      	cmp	r0, #2
        return ARM_DRIVER_OK;
    case ARM_POWER_OFF:
    case ARM_POWER_LOW:
        return ARM_DRIVER_ERROR_UNSUPPORTED;
    default:
        return ARM_DRIVER_ERROR_PARAMETER;
 c01ed7e:	bf0c      	ite	eq
 c01ed80:	2000      	moveq	r0, #0
 c01ed82:	f06f 0004 	mvnne.w	r0, #4
 c01ed86:	4770      	bx	lr
        return ARM_DRIVER_ERROR_UNSUPPORTED;
 c01ed88:	f06f 0003 	mvn.w	r0, #3
    }
}
 c01ed8c:	4770      	bx	lr

0c01ed8e <ARM_Flash_EraseChip>:
}

static int32_t ARM_Flash_EraseChip(void)
{
    return ARM_DRIVER_ERROR_UNSUPPORTED;
}
 c01ed8e:	f06f 0003 	mvn.w	r0, #3
 c01ed92:	4770      	bx	lr

0c01ed94 <ARM_Flash_GetStatus>:

static ARM_FLASH_STATUS ARM_Flash_GetStatus(void)
{
    return ARM_FLASH0_STATUS;
 c01ed94:	4b01      	ldr	r3, [pc, #4]	; (c01ed9c <ARM_Flash_GetStatus+0x8>)
 c01ed96:	6818      	ldr	r0, [r3, #0]
}
 c01ed98:	4770      	bx	lr
 c01ed9a:	bf00      	nop
 c01ed9c:	30035e0c 	.word	0x30035e0c

0c01eda0 <ARM_Flash_GetInfo>:

static ARM_FLASH_INFO * ARM_Flash_GetInfo(void)
{
    return ARM_FLASH0_DEV.data;
}
 c01eda0:	4b01      	ldr	r3, [pc, #4]	; (c01eda8 <ARM_Flash_GetInfo+0x8>)
 c01eda2:	6818      	ldr	r0, [r3, #0]
 c01eda4:	4770      	bx	lr
 c01eda6:	bf00      	nop
 c01eda8:	30035b1c 	.word	0x30035b1c

0c01edac <ARM_Flash_ReadData>:
{
 c01edac:	b510      	push	{r4, lr}
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 c01edae:	4b0c      	ldr	r3, [pc, #48]	; (c01ede0 <ARM_Flash_ReadData+0x34>)
{
 c01edb0:	460c      	mov	r4, r1
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 c01edb2:	6819      	ldr	r1, [r3, #0]
 c01edb4:	f36f 0141 	bfc	r1, #1, #1
 c01edb8:	6019      	str	r1, [r3, #0]
    is_valid = is_range_valid(&ARM_FLASH0_DEV, addr + cnt -1);
 c01edba:	1e51      	subs	r1, r2, #1
 c01edbc:	4401      	add	r1, r0
    if(is_valid != true) {
 c01edbe:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 c01edc2:	d306      	bcc.n	c01edd2 <ARM_Flash_ReadData+0x26>
        return ARM_DRIVER_ERROR_PARAMETER;
 c01edc4:	f06f 0004 	mvn.w	r0, #4
        ARM_FLASH0_STATUS.error = DRIVER_STATUS_ERROR;
 c01edc8:	681a      	ldr	r2, [r3, #0]
 c01edca:	f042 0202 	orr.w	r2, r2, #2
 c01edce:	601a      	str	r2, [r3, #0]
}
 c01edd0:	bd10      	pop	{r4, pc}
    memcpy(data,(void*)((uint32_t)addr+FLASH_BASE), cnt);
 c01edd2:	f100 6140 	add.w	r1, r0, #201326592	; 0xc000000
 c01edd6:	4620      	mov	r0, r4
 c01edd8:	f7f8 fdd1 	bl	c01797e <memcpy>
    return ARM_DRIVER_OK;
 c01eddc:	2000      	movs	r0, #0
 c01edde:	e7f7      	b.n	c01edd0 <ARM_Flash_ReadData+0x24>
 c01ede0:	30035e0c 	.word	0x30035e0c

0c01ede4 <ARM_Flash_Initialize>:
{
 c01ede4:	b508      	push	{r3, lr}
  FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 c01ede6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c01edea:	f003 f8c3 	bl	c021f74 <FLASH_WaitForLastOperation>
}
 c01edee:	2000      	movs	r0, #0
 c01edf0:	bd08      	pop	{r3, pc}
	...

0c01edf4 <ARM_Flash_ProgramData>:
{
 c01edf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 c01edf8:	4c2c      	ldr	r4, [pc, #176]	; (c01eeac <ARM_Flash_ProgramData+0xb8>)
{
 c01edfa:	4688      	mov	r8, r1
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 c01edfc:	6823      	ldr	r3, [r4, #0]
  if ((!is_range_valid(&ARM_FLASH0_DEV, addr + cnt - 1)) ||
 c01edfe:	1881      	adds	r1, r0, r2
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 c01ee00:	f36f 0341 	bfc	r3, #1, #1
 c01ee04:	6023      	str	r3, [r4, #0]
  if ((!is_range_valid(&ARM_FLASH0_DEV, addr + cnt - 1)) ||
 c01ee06:	1e4b      	subs	r3, r1, #1
 c01ee08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
{
 c01ee0c:	4606      	mov	r6, r0
 c01ee0e:	4617      	mov	r7, r2
  if ((!is_range_valid(&ARM_FLASH0_DEV, addr + cnt - 1)) ||
 c01ee10:	d212      	bcs.n	c01ee38 <ARM_Flash_ProgramData+0x44>
    return ((param % flash_dev->data->program_unit) != 0) ? (false) : (true);
 c01ee12:	4b27      	ldr	r3, [pc, #156]	; (c01eeb0 <ARM_Flash_ProgramData+0xbc>)
 c01ee14:	681b      	ldr	r3, [r3, #0]
 c01ee16:	691b      	ldr	r3, [r3, #16]
 c01ee18:	fbb0 f2f3 	udiv	r2, r0, r3
 c01ee1c:	fb03 0212 	mls	r2, r3, r2, r0
  if ((!is_range_valid(&ARM_FLASH0_DEV, addr + cnt - 1)) ||
 c01ee20:	b952      	cbnz	r2, c01ee38 <ARM_Flash_ProgramData+0x44>
    return ((param % flash_dev->data->program_unit) != 0) ? (false) : (true);
 c01ee22:	fbb7 f5f3 	udiv	r5, r7, r3
 c01ee26:	fb03 7515 	mls	r5, r3, r5, r7
      (!is_write_aligned(&ARM_FLASH0_DEV, addr))     ||
 c01ee2a:	b92d      	cbnz	r5, c01ee38 <ARM_Flash_ProgramData+0x44>
         ? true : false;
 c01ee2c:	f5b1 3fb8 	cmp.w	r1, #94208	; 0x17000
 c01ee30:	d202      	bcs.n	c01ee38 <ARM_Flash_ProgramData+0x44>
      (!is_write_aligned(&ARM_FLASH0_DEV, cnt))      ||
 c01ee32:	f5b0 3f90 	cmp.w	r0, #73728	; 0x12000
 c01ee36:	d208      	bcs.n	c01ee4a <ARM_Flash_ProgramData+0x56>
        return ARM_DRIVER_ERROR_PARAMETER;
 c01ee38:	f06f 0004 	mvn.w	r0, #4
        ARM_FLASH0_STATUS.error = DRIVER_STATUS_ERROR;
 c01ee3c:	6823      	ldr	r3, [r4, #0]
 c01ee3e:	f043 0302 	orr.w	r3, r3, #2
 c01ee42:	6023      	str	r3, [r4, #0]
}
 c01ee44:	b003      	add	sp, #12
 c01ee46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_FLASH_Unlock();
 c01ee4a:	f003 f85f 	bl	c021f0c <HAL_FLASH_Unlock>
    ARM_FLASH0_STATUS.busy = DRIVER_STATUS_BUSY;
 c01ee4e:	6823      	ldr	r3, [r4, #0]
 c01ee50:	f106 6640 	add.w	r6, r6, #201326592	; 0xc000000
 c01ee54:	f043 0301 	orr.w	r3, r3, #1
 c01ee58:	6023      	str	r3, [r4, #0]
        memcpy(&dword,  (void *)((uint32_t)data+loop), sizeof(dword));
 c01ee5a:	466b      	mov	r3, sp
 c01ee5c:	eb08 0205 	add.w	r2, r8, r5
 c01ee60:	6810      	ldr	r0, [r2, #0]
 c01ee62:	6851      	ldr	r1, [r2, #4]
 c01ee64:	c303      	stmia	r3!, {r0, r1}
        err = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (FLASH_BASE+addr), dword);
 c01ee66:	1971      	adds	r1, r6, r5
 c01ee68:	e9dd 2300 	ldrd	r2, r3, [sp]
 c01ee6c:	2001      	movs	r0, #1
 c01ee6e:	f003 f8bf 	bl	c021ff0 <HAL_FLASH_Program>
        loop += sizeof(dword);
 c01ee72:	3508      	adds	r5, #8
    }while((loop!=cnt) && (err == HAL_OK));
 c01ee74:	42af      	cmp	r7, r5
        err = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (FLASH_BASE+addr), dword);
 c01ee76:	4681      	mov	r9, r0
    }while((loop!=cnt) && (err == HAL_OK));
 c01ee78:	d001      	beq.n	c01ee7e <ARM_Flash_ProgramData+0x8a>
 c01ee7a:	2800      	cmp	r0, #0
 c01ee7c:	d0ed      	beq.n	c01ee5a <ARM_Flash_ProgramData+0x66>
    ARM_FLASH0_STATUS.busy = DRIVER_STATUS_IDLE;
 c01ee7e:	6823      	ldr	r3, [r4, #0]
 c01ee80:	f36f 0300 	bfc	r3, #0, #1
 c01ee84:	6023      	str	r3, [r4, #0]
    HAL_FLASH_Lock();
 c01ee86:	f003 f861 	bl	c021f4c <HAL_FLASH_Lock>
    if ((err == HAL_OK) && memcmp(dest,data,cnt)){
 c01ee8a:	f1b9 0f00 	cmp.w	r9, #0
 c01ee8e:	d109      	bne.n	c01eea4 <ARM_Flash_ProgramData+0xb0>
 c01ee90:	463a      	mov	r2, r7
 c01ee92:	4641      	mov	r1, r8
 c01ee94:	4630      	mov	r0, r6
 c01ee96:	f7f8 fd63 	bl	c017960 <memcmp>
 c01ee9a:	3000      	adds	r0, #0
 c01ee9c:	bf18      	it	ne
 c01ee9e:	2001      	movne	r0, #1
 c01eea0:	4240      	negs	r0, r0
 c01eea2:	e7cf      	b.n	c01ee44 <ARM_Flash_ProgramData+0x50>
    return (err == HAL_OK) ? ARM_DRIVER_OK :ARM_DRIVER_ERROR;
 c01eea4:	f04f 30ff 	mov.w	r0, #4294967295
 c01eea8:	e7cc      	b.n	c01ee44 <ARM_Flash_ProgramData+0x50>
 c01eeaa:	bf00      	nop
 c01eeac:	30035e0c 	.word	0x30035e0c
 c01eeb0:	30035b1c 	.word	0x30035b1c

0c01eeb4 <ARM_Flash_EraseSector>:
{
 c01eeb4:	b530      	push	{r4, r5, lr}
  if (!(is_range_valid(&ARM_FLASH0_DEV, addr)) ||
 c01eeb6:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
{
 c01eeba:	b087      	sub	sp, #28
 c01eebc:	4c1e      	ldr	r4, [pc, #120]	; (c01ef38 <ARM_Flash_EraseSector+0x84>)
  if (!(is_range_valid(&ARM_FLASH0_DEV, addr)) ||
 c01eebe:	d20c      	bcs.n	c01eeda <ARM_Flash_EraseSector+0x26>
    return ((param % (flash_dev->data->sector_size)) != 0) ? (false) : (true);
 c01eec0:	4b1e      	ldr	r3, [pc, #120]	; (c01ef3c <ARM_Flash_EraseSector+0x88>)
 c01eec2:	681b      	ldr	r3, [r3, #0]
 c01eec4:	6899      	ldr	r1, [r3, #8]
 c01eec6:	fbb0 f2f1 	udiv	r2, r0, r1
 c01eeca:	fb01 0212 	mls	r2, r1, r2, r0
  if (!(is_range_valid(&ARM_FLASH0_DEV, addr)) ||
 c01eece:	b922      	cbnz	r2, c01eeda <ARM_Flash_EraseSector+0x26>
    ((param >= FLASH_NV_COUNTERS_AREA_OFFSET) && 
 c01eed0:	f5a0 3290 	sub.w	r2, r0, #73728	; 0x12000
      !(is_erase_aligned(&ARM_FLASH0_DEV, addr)) ||
 c01eed4:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 c01eed8:	d307      	bcc.n	c01eeea <ARM_Flash_EraseSector+0x36>
         return ARM_DRIVER_ERROR_PARAMETER;
 c01eeda:	f06f 0004 	mvn.w	r0, #4
         ARM_FLASH0_STATUS.error = DRIVER_STATUS_ERROR;
 c01eede:	6823      	ldr	r3, [r4, #0]
 c01eee0:	f043 0302 	orr.w	r3, r3, #2
 c01eee4:	6023      	str	r3, [r4, #0]
}
 c01eee6:	b007      	add	sp, #28
 c01eee8:	bd30      	pop	{r4, r5, pc}
    EraseInit.Banks = bank_number(&ARM_FLASH0_DEV, addr);
 c01eeea:	2202      	movs	r2, #2
 c01eeec:	2101      	movs	r1, #1
    EraseInit.NbPages = 2;
 c01eeee:	9205      	str	r2, [sp, #20]
    EraseInit.Banks = bank_number(&ARM_FLASH0_DEV, addr);
 c01eef0:	e9cd 2102 	strd	r2, r1, [sp, #8]
    uint32_t page = param / flash_dev->data->page_size ;
 c01eef4:	68da      	ldr	r2, [r3, #12]
    page = ((page > (flash_dev->data->sector_count))) ? page -((flash_dev->data->sector_count)) : page;
 c01eef6:	685b      	ldr	r3, [r3, #4]
    uint32_t page = param / flash_dev->data->page_size ;
 c01eef8:	fbb0 f0f2 	udiv	r0, r0, r2
    page = ((page > (flash_dev->data->sector_count))) ? page -((flash_dev->data->sector_count)) : page;
 c01eefc:	4298      	cmp	r0, r3
 c01eefe:	bf88      	it	hi
 c01ef00:	1ac0      	subhi	r0, r0, r3
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 c01ef02:	6823      	ldr	r3, [r4, #0]
    EraseInit.Page = page_number(&ARM_FLASH0_DEV, addr);
 c01ef04:	9004      	str	r0, [sp, #16]
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 c01ef06:	f36f 0341 	bfc	r3, #1, #1
 c01ef0a:	6023      	str	r3, [r4, #0]
    HAL_FLASH_Unlock();
 c01ef0c:	f002 fffe 	bl	c021f0c <HAL_FLASH_Unlock>
    ARM_FLASH0_STATUS.busy = DRIVER_STATUS_BUSY;
 c01ef10:	6823      	ldr	r3, [r4, #0]
    err = HAL_FLASHEx_Erase(&EraseInit, &pageError);
 c01ef12:	a901      	add	r1, sp, #4
    ARM_FLASH0_STATUS.busy = DRIVER_STATUS_BUSY;
 c01ef14:	f043 0301 	orr.w	r3, r3, #1
    err = HAL_FLASHEx_Erase(&EraseInit, &pageError);
 c01ef18:	a802      	add	r0, sp, #8
    ARM_FLASH0_STATUS.busy = DRIVER_STATUS_BUSY;
 c01ef1a:	6023      	str	r3, [r4, #0]
    err = HAL_FLASHEx_Erase(&EraseInit, &pageError);
 c01ef1c:	f003 f904 	bl	c022128 <HAL_FLASHEx_Erase>
 c01ef20:	4605      	mov	r5, r0
    ARM_FLASH0_STATUS.busy = DRIVER_STATUS_IDLE;
 c01ef22:	6823      	ldr	r3, [r4, #0]
 c01ef24:	f36f 0300 	bfc	r3, #0, #1
 c01ef28:	6023      	str	r3, [r4, #0]
    HAL_FLASH_Lock();
 c01ef2a:	f003 f80f 	bl	c021f4c <HAL_FLASH_Lock>
  return (err == HAL_OK) ? ARM_DRIVER_OK :ARM_DRIVER_ERROR;
 c01ef2e:	1c28      	adds	r0, r5, #0
 c01ef30:	bf18      	it	ne
 c01ef32:	2001      	movne	r0, #1
 c01ef34:	4240      	negs	r0, r0
 c01ef36:	e7d6      	b.n	c01eee6 <ARM_Flash_EraseSector+0x32>
 c01ef38:	30035e0c 	.word	0x30035e0c
 c01ef3c:	30035b1c 	.word	0x30035b1c

0c01ef40 <mbedtls_hardware_poll>:
}


/*  interface for mbed-crypto */
int mbedtls_hardware_poll(void *data, unsigned char *output, size_t len, size_t *olen)
{
 c01ef40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 c01ef44:	460d      	mov	r5, r1
 c01ef46:	4614      	mov	r4, r2
 c01ef48:	4698      	mov	r8, r3
__STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;

#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 c01ef4a:	4b35      	ldr	r3, [pc, #212]	; (c01f020 <mbedtls_hardware_poll+0xe0>)
 c01ef4c:	461e      	mov	r6, r3
 c01ef4e:	e8d3 2f4f 	ldrexb	r2, [r3]
    newValue = __LDREXB(valuePtr) + delta;
 c01ef52:	3201      	adds	r2, #1
 c01ef54:	b2d2      	uxtb	r2, r2
 */
__STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 c01ef56:	e8c3 2f49 	strexb	r9, r2, [r3]
  } while (__STREXB(newValue, valuePtr));
 c01ef5a:	f1b9 0f00 	cmp.w	r9, #0
 c01ef5e:	d1f6      	bne.n	c01ef4e <mbedtls_hardware_poll+0xe>
  if (atomic_incr_u8(&users, 1) > 1)
 c01ef60:	2a01      	cmp	r2, #1
 c01ef62:	d900      	bls.n	c01ef66 <mbedtls_hardware_poll+0x26>
 c01ef64:	e7fe      	b.n	c01ef64 <mbedtls_hardware_poll+0x24>
  handle.Instance = RNG;
 c01ef66:	4f2f      	ldr	r7, [pc, #188]	; (c01f024 <mbedtls_hardware_poll+0xe4>)
  __HAL_RCC_RNG_CONFIG(RCC_RNGCLKSOURCE_MSI);
 c01ef68:	4b2f      	ldr	r3, [pc, #188]	; (c01f028 <mbedtls_hardware_poll+0xe8>)
    if (HAL_RNG_GenerateRandomNumber(&handle, (uint32_t *)random) != HAL_OK)
 c01ef6a:	46ba      	mov	sl, r7
  __HAL_RCC_RNG_CONFIG(RCC_RNGCLKSOURCE_MSI);
 c01ef6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
  HAL_RNG_Init(&handle);
 c01ef70:	4638      	mov	r0, r7
  __HAL_RCC_RNG_CONFIG(RCC_RNGCLKSOURCE_MSI);
 c01ef72:	f042 6240 	orr.w	r2, r2, #201326592	; 0xc000000
 c01ef76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_RCC_RNG_CLK_ENABLE();
 c01ef7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01ef7c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 c01ef80:	64da      	str	r2, [r3, #76]	; 0x4c
 c01ef82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  handle.Lock = HAL_UNLOCKED;
 c01ef84:	f887 9008 	strb.w	r9, [r7, #8]
  __HAL_RCC_RNG_CLK_ENABLE();
 c01ef88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c01ef8c:	9301      	str	r3, [sp, #4]
 c01ef8e:	9b01      	ldr	r3, [sp, #4]
  handle.Instance = RNG;
 c01ef90:	4b26      	ldr	r3, [pc, #152]	; (c01f02c <mbedtls_hardware_poll+0xec>)
  handle.State = HAL_RNG_STATE_RESET;
 c01ef92:	f887 9009 	strb.w	r9, [r7, #9]
  handle.Instance = RNG;
 c01ef96:	603b      	str	r3, [r7, #0]
  HAL_RNG_Init(&handle);
 c01ef98:	f004 fa12 	bl	c0233c0 <HAL_RNG_Init>
  HAL_RNG_GenerateRandomNumber(&handle, &dummy);
 c01ef9c:	4669      	mov	r1, sp
 c01ef9e:	4638      	mov	r0, r7
 c01efa0:	f004 faef 	bl	c023582 <HAL_RNG_GenerateRandomNumber>
  *output_length = 0;
 c01efa4:	f8c8 9000 	str.w	r9, [r8]
  while ((*output_length < length) && (ret == 0))
 c01efa8:	f8d8 3000 	ldr.w	r3, [r8]
 c01efac:	429c      	cmp	r4, r3
 c01efae:	d904      	bls.n	c01efba <mbedtls_hardware_poll+0x7a>
    if (HAL_RNG_GenerateRandomNumber(&handle, (uint32_t *)random) != HAL_OK)
 c01efb0:	4669      	mov	r1, sp
 c01efb2:	4650      	mov	r0, sl
 c01efb4:	f004 fae5 	bl	c023582 <HAL_RNG_GenerateRandomNumber>
 c01efb8:	b360      	cbz	r0, c01f014 <mbedtls_hardware_poll+0xd4>
  if ((__HAL_RNG_GET_FLAG(&handle, (RNG_FLAG_CECS | RNG_FLAG_SECS))) != 0)
 c01efba:	683b      	ldr	r3, [r7, #0]
  HAL_RNG_DeInit(&handle);
 c01efbc:	4819      	ldr	r0, [pc, #100]	; (c01f024 <mbedtls_hardware_poll+0xe4>)
  if ((__HAL_RNG_GET_FLAG(&handle, (RNG_FLAG_CECS | RNG_FLAG_SECS))) != 0)
 c01efbe:	685b      	ldr	r3, [r3, #4]
 c01efc0:	f003 0306 	and.w	r3, r3, #6
 c01efc4:	2b06      	cmp	r3, #6
    *output_length = 0;
 c01efc6:	bf04      	itt	eq
 c01efc8:	2300      	moveq	r3, #0
 c01efca:	f8c8 3000 	streq.w	r3, [r8]
  HAL_RNG_DeInit(&handle);
 c01efce:	f004 fa5a 	bl	c023486 <HAL_RNG_DeInit>
  __HAL_RCC_RNG_CLK_DISABLE();
 c01efd2:	4a15      	ldr	r2, [pc, #84]	; (c01f028 <mbedtls_hardware_poll+0xe8>)
 c01efd4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 c01efd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c01efda:	64d3      	str	r3, [r2, #76]	; 0x4c
  users = 0;
 c01efdc:	2300      	movs	r3, #0
 c01efde:	7033      	strb	r3, [r6, #0]
  RNG_Init();
  RNG_GetBytes(output, len, olen);
  RNG_DeInit();
  if (*olen != len)
 c01efe0:	f8d8 0000 	ldr.w	r0, [r8]
  {
    return -1;
  }
  return 0;
}
 c01efe4:	1b00      	subs	r0, r0, r4
 c01efe6:	bf18      	it	ne
 c01efe8:	f04f 30ff 	movne.w	r0, #4294967295
 c01efec:	b002      	add	sp, #8
 c01efee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        *output++ = random[i];
 c01eff2:	ab02      	add	r3, sp, #8
 c01eff4:	181a      	adds	r2, r3, r0
 c01eff6:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 c01effa:	3001      	adds	r0, #1
 c01effc:	f805 3b01 	strb.w	r3, [r5], #1
        *output_length += 1;
 c01f000:	f8d8 3000 	ldr.w	r3, [r8]
      for (uint8_t i = 0; (i < 4) && (*output_length < length) ; i++)
 c01f004:	2804      	cmp	r0, #4
        *output_length += 1;
 c01f006:	f103 0301 	add.w	r3, r3, #1
 c01f00a:	f8c8 3000 	str.w	r3, [r8]
        random[i] = 0;
 c01f00e:	f802 9c08 	strb.w	r9, [r2, #-8]
      for (uint8_t i = 0; (i < 4) && (*output_length < length) ; i++)
 c01f012:	d0c9      	beq.n	c01efa8 <mbedtls_hardware_poll+0x68>
 c01f014:	f8d8 3000 	ldr.w	r3, [r8]
 c01f018:	429c      	cmp	r4, r3
 c01f01a:	d8ea      	bhi.n	c01eff2 <mbedtls_hardware_poll+0xb2>
 c01f01c:	e7c4      	b.n	c01efa8 <mbedtls_hardware_poll+0x68>
 c01f01e:	bf00      	nop
 c01f020:	30035e24 	.word	0x30035e24
 c01f024:	30035e10 	.word	0x30035e10
 c01f028:	50021000 	.word	0x50021000
 c01f02c:	520c0800 	.word	0x520c0800

0c01f030 <mpu_armv8m_enable>:
               (MPU_ARMV8M_MAIR_ATTR_CODE_VAL << MPU_MAIR0_Attr1_Pos) |
               (MPU_ARMV8M_MAIR_ATTR_DATA_VAL << MPU_MAIR0_Attr2_Pos) |
               (MPU_ARMV8M_MAIR_ATTR_DATANOCACHE_VAL << MPU_MAIR0_Attr3_Pos);

  mpu->CTRL =
    (privdef_en ? MPU_CTRL_PRIVDEFENA_Msk : 0) |
 c01f030:	2900      	cmp	r1, #0
 c01f032:	bf14      	ite	ne
 c01f034:	2104      	movne	r1, #4
 c01f036:	2100      	moveq	r1, #0
    (hfnmi_en   ? MPU_CTRL_HFNMIENA_Msk   : 0);
 c01f038:	2a00      	cmp	r2, #0
 c01f03a:	bf14      	ite	ne
 c01f03c:	2202      	movne	r2, #2
 c01f03e:	2200      	moveq	r2, #0
  MPU_Type *mpu = (MPU_Type *)dev->base;
 c01f040:	6803      	ldr	r3, [r0, #0]
  mpu->MAIR0 = (MPU_ARMV8M_MAIR_ATTR_DEVICE_VAL << MPU_MAIR0_Attr0_Pos) |
 c01f042:	4807      	ldr	r0, [pc, #28]	; (c01f060 <mpu_armv8m_enable+0x30>)
    (privdef_en ? MPU_CTRL_PRIVDEFENA_Msk : 0) |
 c01f044:	4311      	orrs	r1, r2
  mpu->MAIR0 = (MPU_ARMV8M_MAIR_ATTR_DEVICE_VAL << MPU_MAIR0_Attr0_Pos) |
 c01f046:	6318      	str	r0, [r3, #48]	; 0x30
  mpu->CTRL =
 c01f048:	6059      	str	r1, [r3, #4]

  /*Ensure all configuration is written before enable*/

  mpu->CTRL |= MPU_CTRL_ENABLE_Msk;
 c01f04a:	685a      	ldr	r2, [r3, #4]
 c01f04c:	f042 0201 	orr.w	r2, r2, #1
 c01f050:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 c01f052:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 c01f056:	f3bf 8f6f 	isb	sy

  /* Enable MPU before next instruction */
  __DSB();
  __ISB();
  return MPU_ARMV8M_OK;
}
 c01f05a:	2000      	movs	r0, #0
 c01f05c:	4770      	bx	lr
 c01f05e:	bf00      	nop
 c01f060:	44ffaa04 	.word	0x44ffaa04

0c01f064 <mpu_armv8m_region_enable>:
  uint32_t ctrl_before;
  uint32_t base_cfg;
  uint32_t limit_cfg;

  /*FIXME : Add complete error checking*/
  if ((region_cfg->region_base & ~MPU_RBAR_BASE_Msk) != 0)
 c01f064:	684a      	ldr	r2, [r1, #4]
{
 c01f066:	b530      	push	{r4, r5, lr}
  if ((region_cfg->region_base & ~MPU_RBAR_BASE_Msk) != 0)
 c01f068:	f012 051f 	ands.w	r5, r2, #31
 c01f06c:	d128      	bne.n	c01f0c0 <mpu_armv8m_region_enable+0x5c>
  MPU_Type *mpu = (MPU_Type *)dev->base;
 c01f06e:	6804      	ldr	r4, [r0, #0]
   */

  ctrl_before = mpu->CTRL;
  mpu->CTRL = 0;

  mpu->RNR  = region_cfg->region_nr & MPU_RNR_REGION_Msk;
 c01f070:	780b      	ldrb	r3, [r1, #0]
  ctrl_before = mpu->CTRL;
 c01f072:	6860      	ldr	r0, [r4, #4]
  mpu->CTRL = 0;
 c01f074:	6065      	str	r5, [r4, #4]
  mpu->RNR  = region_cfg->region_nr & MPU_RNR_REGION_Msk;
 c01f076:	60a3      	str	r3, [r4, #8]

  /* This 0s the lower bits of the base address */
  base_cfg = region_cfg->region_base & MPU_RBAR_BASE_Msk;
  base_cfg |= (region_cfg->attr_sh << MPU_RBAR_SH_Pos) & MPU_RBAR_SH_Msk;
  base_cfg |= (region_cfg->attr_access << MPU_RBAR_AP_Pos) & MPU_RBAR_AP_Msk;
  base_cfg |= (region_cfg->attr_exec << MPU_RBAR_XN_Pos) & MPU_RBAR_XN_Msk;
 c01f078:	7c0b      	ldrb	r3, [r1, #16]
  base_cfg = region_cfg->region_base & MPU_RBAR_BASE_Msk;
 c01f07a:	f022 021f 	bic.w	r2, r2, #31
  base_cfg |= (region_cfg->attr_exec << MPU_RBAR_XN_Pos) & MPU_RBAR_XN_Msk;
 c01f07e:	f003 0301 	and.w	r3, r3, #1
 c01f082:	4313      	orrs	r3, r2
  base_cfg |= (region_cfg->attr_sh << MPU_RBAR_SH_Pos) & MPU_RBAR_SH_Msk;
 c01f084:	7c8a      	ldrb	r2, [r1, #18]
 c01f086:	00d2      	lsls	r2, r2, #3
 c01f088:	f002 0218 	and.w	r2, r2, #24
 c01f08c:	431a      	orrs	r2, r3
  base_cfg |= (region_cfg->attr_access << MPU_RBAR_AP_Pos) & MPU_RBAR_AP_Msk;
 c01f08e:	7c4b      	ldrb	r3, [r1, #17]
 c01f090:	005b      	lsls	r3, r3, #1
 c01f092:	f003 0306 	and.w	r3, r3, #6
  base_cfg |= (region_cfg->attr_exec << MPU_RBAR_XN_Pos) & MPU_RBAR_XN_Msk;
 c01f096:	4313      	orrs	r3, r2

  mpu->RBAR = base_cfg;
 c01f098:	60e3      	str	r3, [r4, #12]

  /*This 0s the lower bits of base address but they are treated as 1 */
  limit_cfg = (region_cfg->region_limit - 1) & MPU_RLAR_LIMIT_Msk;
 c01f09a:	688b      	ldr	r3, [r1, #8]
 c01f09c:	3b01      	subs	r3, #1
 c01f09e:	f023 021f 	bic.w	r2, r3, #31

  limit_cfg |= (region_cfg->region_attridx << MPU_RLAR_AttrIndx_Pos) &
 c01f0a2:	68cb      	ldr	r3, [r1, #12]
 c01f0a4:	005b      	lsls	r3, r3, #1
 c01f0a6:	f003 030e 	and.w	r3, r3, #14
 c01f0aa:	4313      	orrs	r3, r2
               MPU_RLAR_AttrIndx_Msk;

  limit_cfg |= MPU_RLAR_EN_Msk;
 c01f0ac:	f043 0301 	orr.w	r3, r3, #1

  mpu->RLAR = limit_cfg;
 c01f0b0:	6123      	str	r3, [r4, #16]

  /*Restore main MPU control*/
  mpu->CTRL = ctrl_before;
 c01f0b2:	6060      	str	r0, [r4, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 c01f0b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 c01f0b8:	f3bf 8f6f 	isb	sy

  /* Enable MPU before the next instruction */
  __DSB();
  __ISB();

  return ret_val;
 c01f0bc:	4628      	mov	r0, r5
}
 c01f0be:	bd30      	pop	{r4, r5, pc}
    return MPU_ARMV8M_ERROR;
 c01f0c0:	2001      	movs	r0, #1
 c01f0c2:	e7fc      	b.n	c01f0be <mpu_armv8m_region_enable+0x5a>

0c01f0c4 <mpu_armv8m_region_disable>:
enum mpu_armv8m_error_t mpu_armv8m_region_disable(
  struct mpu_armv8m_dev_t *dev,
  uint32_t region_nr)
{

  MPU_Type *mpu = (MPU_Type *)dev->base;
 c01f0c4:	6803      	ldr	r3, [r0, #0]
  uint32_t ctrl_before;

  /*FIXME : Add complete error checking*/

  ctrl_before = mpu->CTRL;
  mpu->CTRL = 0;
 c01f0c6:	2000      	movs	r0, #0
  ctrl_before = mpu->CTRL;
 c01f0c8:	685a      	ldr	r2, [r3, #4]

  mpu->RNR  = region_nr & MPU_RNR_REGION_Msk;
 c01f0ca:	b2c9      	uxtb	r1, r1
  mpu->CTRL = 0;
 c01f0cc:	6058      	str	r0, [r3, #4]
  mpu->RNR  = region_nr & MPU_RNR_REGION_Msk;
 c01f0ce:	6099      	str	r1, [r3, #8]

  mpu->RBAR = 0;
 c01f0d0:	60d8      	str	r0, [r3, #12]
  mpu->RLAR = 0;
 c01f0d2:	6118      	str	r0, [r3, #16]

  /*Restore main MPU control*/
  mpu->CTRL = ctrl_before;
 c01f0d4:	605a      	str	r2, [r3, #4]

  return ret_val;
}
 c01f0d6:	4770      	bx	lr

0c01f0d8 <mpu_armv8m_clean>:

enum mpu_armv8m_error_t mpu_armv8m_clean(struct mpu_armv8m_dev_t *dev)
{
 c01f0d8:	b538      	push	{r3, r4, r5, lr}
 c01f0da:	4605      	mov	r5, r0
  MPU_Type *mpu = (MPU_Type *)dev->base;
 c01f0dc:	6803      	ldr	r3, [r0, #0]
  uint32_t i = (mpu->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos;
 c01f0de:	681c      	ldr	r4, [r3, #0]
 c01f0e0:	f3c4 2407 	ubfx	r4, r4, #8, #8

  while (i > 0)
 c01f0e4:	b90c      	cbnz	r4, c01f0ea <mpu_armv8m_clean+0x12>
    i--;
  }

  return MPU_ARMV8M_OK;

}
 c01f0e6:	4620      	mov	r0, r4
 c01f0e8:	bd38      	pop	{r3, r4, r5, pc}
    mpu_armv8m_region_disable(dev, i - 1);
 c01f0ea:	3c01      	subs	r4, #1
 c01f0ec:	4621      	mov	r1, r4
 c01f0ee:	4628      	mov	r0, r5
 c01f0f0:	f7ff ffe8 	bl	c01f0c4 <mpu_armv8m_region_disable>
 c01f0f4:	e7f6      	b.n	c01f0e4 <mpu_armv8m_clean+0xc>

0c01f0f6 <mgf_mask>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 c01f0f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01f0fa:	b095      	sub	sp, #84	; 0x54
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 c01f0fc:	ae04      	add	r6, sp, #16
{
 c01f0fe:	4607      	mov	r7, r0
 c01f100:	460c      	mov	r4, r1
 c01f102:	4691      	mov	r9, r2
    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 c01f104:	2100      	movs	r1, #0
 c01f106:	2240      	movs	r2, #64	; 0x40
 c01f108:	4630      	mov	r0, r6
{
 c01f10a:	9301      	str	r3, [sp, #4]
 c01f10c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 c01f10e:	f7f8 fc5a 	bl	c0179c6 <memset>
    memset( counter, 0, 4 );
 c01f112:	2300      	movs	r3, #0
 c01f114:	f10d 0850 	add.w	r8, sp, #80	; 0x50

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 c01f118:	6828      	ldr	r0, [r5, #0]
    memset( counter, 0, 4 );
 c01f11a:	f848 3d44 	str.w	r3, [r8, #-68]!
    hlen = mbedtls_md_get_size( md_ctx->md_info );
 c01f11e:	f008 ffe5 	bl	c0280ec <mbedtls_md_get_size>
 c01f122:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 c01f124:	b954      	cbnz	r4, c01f13c <mgf_mask+0x46>
        counter[3]++;

        dlen -= use_len;
    }

exit:
 c01f126:	4623      	mov	r3, r4
    mbedtls_platform_zeroize( mask, sizeof( mask ) );
 c01f128:	4630      	mov	r0, r6
 c01f12a:	2140      	movs	r1, #64	; 0x40
 c01f12c:	9301      	str	r3, [sp, #4]
 c01f12e:	f00b f8b7 	bl	c02a2a0 <mbedtls_platform_zeroize>

    return( ret );
}
 c01f132:	9b01      	ldr	r3, [sp, #4]
 c01f134:	4618      	mov	r0, r3
 c01f136:	b015      	add	sp, #84	; 0x54
 c01f138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c01f13c:	4554      	cmp	r4, sl
        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
 c01f13e:	4628      	mov	r0, r5
 c01f140:	46a3      	mov	fp, r4
 c01f142:	bf28      	it	cs
 c01f144:	46d3      	movcs	fp, sl
 c01f146:	f008 fee9 	bl	c027f1c <mbedtls_md_starts>
 c01f14a:	4603      	mov	r3, r0
 c01f14c:	2800      	cmp	r0, #0
 c01f14e:	d1eb      	bne.n	c01f128 <mgf_mask+0x32>
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
 c01f150:	9a01      	ldr	r2, [sp, #4]
 c01f152:	4649      	mov	r1, r9
 c01f154:	4628      	mov	r0, r5
 c01f156:	f008 feeb 	bl	c027f30 <mbedtls_md_update>
 c01f15a:	4603      	mov	r3, r0
 c01f15c:	2800      	cmp	r0, #0
 c01f15e:	d1e3      	bne.n	c01f128 <mgf_mask+0x32>
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
 c01f160:	2204      	movs	r2, #4
 c01f162:	4641      	mov	r1, r8
 c01f164:	4628      	mov	r0, r5
 c01f166:	f008 fee3 	bl	c027f30 <mbedtls_md_update>
 c01f16a:	4603      	mov	r3, r0
 c01f16c:	2800      	cmp	r0, #0
 c01f16e:	d1db      	bne.n	c01f128 <mgf_mask+0x32>
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
 c01f170:	4631      	mov	r1, r6
 c01f172:	4628      	mov	r0, r5
 c01f174:	f008 fee6 	bl	c027f44 <mbedtls_md_finish>
 c01f178:	4603      	mov	r3, r0
 c01f17a:	2800      	cmp	r0, #0
 c01f17c:	d1d4      	bne.n	c01f128 <mgf_mask+0x32>
 c01f17e:	463a      	mov	r2, r7
        for( i = 0; i < use_len; ++i )
 c01f180:	455b      	cmp	r3, fp
 c01f182:	d107      	bne.n	c01f194 <mgf_mask+0x9e>
        counter[3]++;
 c01f184:	f89d 200f 	ldrb.w	r2, [sp, #15]
 c01f188:	441f      	add	r7, r3
 c01f18a:	3201      	adds	r2, #1
 c01f18c:	f88d 200f 	strb.w	r2, [sp, #15]
        dlen -= use_len;
 c01f190:	1ae4      	subs	r4, r4, r3
 c01f192:	e7c7      	b.n	c01f124 <mgf_mask+0x2e>
            *p++ ^= mask[i];
 c01f194:	f812 1b01 	ldrb.w	r1, [r2], #1
 c01f198:	5cf0      	ldrb	r0, [r6, r3]
        for( i = 0; i < use_len; ++i )
 c01f19a:	3301      	adds	r3, #1
            *p++ ^= mask[i];
 c01f19c:	4041      	eors	r1, r0
 c01f19e:	f802 1c01 	strb.w	r1, [r2, #-1]
 c01f1a2:	e7ed      	b.n	c01f180 <mgf_mask+0x8a>

0c01f1a4 <rsa_rsassa_pkcs1_v15_encode>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 c01f1a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 c01f1a8:	461d      	mov	r5, r3
    size_t oid_size  = 0;
 c01f1aa:	2300      	movs	r3, #0
{
 c01f1ac:	460e      	mov	r6, r1
 c01f1ae:	4690      	mov	r8, r2
 c01f1b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 c01f1b2:	e9cd 3300 	strd	r3, r3, [sp]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 c01f1b6:	4604      	mov	r4, r0
 c01f1b8:	2800      	cmp	r0, #0
 c01f1ba:	d064      	beq.n	c01f286 <rsa_rsassa_pkcs1_v15_encode+0xe2>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 c01f1bc:	f008 fe62 	bl	c027e84 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 c01f1c0:	4606      	mov	r6, r0
 c01f1c2:	b920      	cbnz	r0, c01f1ce <rsa_rsassa_pkcs1_v15_encode+0x2a>
    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
    {
        mbedtls_platform_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c01f1c4:	4c3c      	ldr	r4, [pc, #240]	; (c01f2b8 <rsa_rsassa_pkcs1_v15_encode+0x114>)
    }

    return( 0 );
}
 c01f1c6:	4620      	mov	r0, r4
 c01f1c8:	b002      	add	sp, #8
 c01f1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 c01f1ce:	4620      	mov	r0, r4
 c01f1d0:	466a      	mov	r2, sp
 c01f1d2:	a901      	add	r1, sp, #4
 c01f1d4:	f009 f9c4 	bl	c028560 <mbedtls_oid_get_oid_by_md>
 c01f1d8:	4604      	mov	r4, r0
 c01f1da:	2800      	cmp	r0, #0
 c01f1dc:	d1f2      	bne.n	c01f1c4 <rsa_rsassa_pkcs1_v15_encode+0x20>
        hashlen = mbedtls_md_get_size( md_info );
 c01f1de:	4630      	mov	r0, r6
 c01f1e0:	f008 ff84 	bl	c0280ec <mbedtls_md_get_size>
        if( 8 + hashlen + oid_size  >= 0x80         ||
 c01f1e4:	9e00      	ldr	r6, [sp, #0]
        hashlen = mbedtls_md_get_size( md_info );
 c01f1e6:	4681      	mov	r9, r0
        if( 8 + hashlen + oid_size  >= 0x80         ||
 c01f1e8:	1983      	adds	r3, r0, r6
 c01f1ea:	f103 0208 	add.w	r2, r3, #8
 c01f1ee:	2a7f      	cmp	r2, #127	; 0x7f
 c01f1f0:	d8e8      	bhi.n	c01f1c4 <rsa_rsassa_pkcs1_v15_encode+0x20>
            10 + hashlen + oid_size <  10 + hashlen )
 c01f1f2:	f103 020a 	add.w	r2, r3, #10
 c01f1f6:	f100 010a 	add.w	r1, r0, #10
            10 + hashlen            <  hashlen      ||
 c01f1fa:	428a      	cmp	r2, r1
 c01f1fc:	d3e2      	bcc.n	c01f1c4 <rsa_rsassa_pkcs1_v15_encode+0x20>
        if( nb_pad < 10 + hashlen + oid_size )
 c01f1fe:	42aa      	cmp	r2, r5
 c01f200:	d8e0      	bhi.n	c01f1c4 <rsa_rsassa_pkcs1_v15_encode+0x20>
        nb_pad -= 10 + hashlen + oid_size;
 c01f202:	f1a5 060a 	sub.w	r6, r5, #10
 c01f206:	1af6      	subs	r6, r6, r3
    if( nb_pad < 3 + 8 )
 c01f208:	2e0a      	cmp	r6, #10
 c01f20a:	d9db      	bls.n	c01f1c4 <rsa_rsassa_pkcs1_v15_encode+0x20>
    *p++ = 0;
 c01f20c:	46ba      	mov	sl, r7
    *p++ = MBEDTLS_RSA_SIGN;
 c01f20e:	2301      	movs	r3, #1
    *p++ = 0;
 c01f210:	f80a 4b02 	strb.w	r4, [sl], #2
    nb_pad -= 3;
 c01f214:	3e03      	subs	r6, #3
    memset( p, 0xFF, nb_pad );
 c01f216:	4632      	mov	r2, r6
    *p++ = MBEDTLS_RSA_SIGN;
 c01f218:	707b      	strb	r3, [r7, #1]
    memset( p, 0xFF, nb_pad );
 c01f21a:	21ff      	movs	r1, #255	; 0xff
 c01f21c:	4650      	mov	r0, sl
 c01f21e:	f7f8 fbd2 	bl	c0179c6 <memset>
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 c01f222:	2130      	movs	r1, #48	; 0x30
    p += nb_pad;
 c01f224:	eb0a 0306 	add.w	r3, sl, r6
    *p++ = 0;
 c01f228:	f80a 4006 	strb.w	r4, [sl, r6]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 c01f22c:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 c01f22e:	9e00      	ldr	r6, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 c01f230:	70d9      	strb	r1, [r3, #3]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 c01f232:	f106 0208 	add.w	r2, r6, #8
 c01f236:	444a      	add	r2, r9
 c01f238:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char)( 0x04 + oid_size );
 c01f23a:	b2f2      	uxtb	r2, r6
 c01f23c:	1d11      	adds	r1, r2, #4
 c01f23e:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 c01f240:	2106      	movs	r1, #6
    *p++ = (unsigned char) oid_size;
 c01f242:	f103 0a07 	add.w	sl, r3, #7
    *p++ = MBEDTLS_ASN1_OID;
 c01f246:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 c01f248:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 c01f24a:	9901      	ldr	r1, [sp, #4]
 c01f24c:	4632      	mov	r2, r6
 c01f24e:	4650      	mov	r0, sl
 c01f250:	f7f8 fb95 	bl	c01797e <memcpy>
    *p++ = MBEDTLS_ASN1_NULL;
 c01f254:	2305      	movs	r3, #5
 c01f256:	f80a 3006 	strb.w	r3, [sl, r6]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 c01f25a:	2304      	movs	r3, #4
    p += oid_size;
 c01f25c:	eb0a 0206 	add.w	r2, sl, r6
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 c01f260:	7093      	strb	r3, [r2, #2]
    *p++ = (unsigned char) hashlen;
 c01f262:	18d3      	adds	r3, r2, r3
 c01f264:	f882 9003 	strb.w	r9, [r2, #3]
    *p++ = 0x00;
 c01f268:	7054      	strb	r4, [r2, #1]
    memcpy( p, hash, hashlen );
 c01f26a:	4641      	mov	r1, r8
 c01f26c:	464a      	mov	r2, r9
 c01f26e:	4618      	mov	r0, r3
 c01f270:	f7f8 fb85 	bl	c01797e <memcpy>
    if( p != dst + dst_len )
 c01f274:	197a      	adds	r2, r7, r5
    p += hashlen;
 c01f276:	4481      	add	r9, r0
    if( p != dst + dst_len )
 c01f278:	454a      	cmp	r2, r9
 c01f27a:	d0a4      	beq.n	c01f1c6 <rsa_rsassa_pkcs1_v15_encode+0x22>
        mbedtls_platform_zeroize( dst, dst_len );
 c01f27c:	4629      	mov	r1, r5
 c01f27e:	4638      	mov	r0, r7
 c01f280:	f00b f80e 	bl	c02a2a0 <mbedtls_platform_zeroize>
 c01f284:	e79e      	b.n	c01f1c4 <rsa_rsassa_pkcs1_v15_encode+0x20>
        if( nb_pad < hashlen )
 c01f286:	428d      	cmp	r5, r1
 c01f288:	d39c      	bcc.n	c01f1c4 <rsa_rsassa_pkcs1_v15_encode+0x20>
        nb_pad -= hashlen;
 c01f28a:	1a6d      	subs	r5, r5, r1
    if( nb_pad < 3 + 8 )
 c01f28c:	2d0a      	cmp	r5, #10
 c01f28e:	d999      	bls.n	c01f1c4 <rsa_rsassa_pkcs1_v15_encode+0x20>
    *p++ = 0;
 c01f290:	463b      	mov	r3, r7
    *p++ = MBEDTLS_RSA_SIGN;
 c01f292:	2201      	movs	r2, #1
    nb_pad -= 3;
 c01f294:	3d03      	subs	r5, #3
    *p++ = 0;
 c01f296:	f803 0b02 	strb.w	r0, [r3], #2
    memset( p, 0xFF, nb_pad );
 c01f29a:	21ff      	movs	r1, #255	; 0xff
    *p++ = MBEDTLS_RSA_SIGN;
 c01f29c:	707a      	strb	r2, [r7, #1]
    memset( p, 0xFF, nb_pad );
 c01f29e:	4618      	mov	r0, r3
 c01f2a0:	462a      	mov	r2, r5
 c01f2a2:	f7f8 fb90 	bl	c0179c6 <memset>
 c01f2a6:	4603      	mov	r3, r0
    p += nb_pad;
 c01f2a8:	4428      	add	r0, r5
    *p++ = 0;
 c01f2aa:	555c      	strb	r4, [r3, r5]
        memcpy( p, hash, hashlen );
 c01f2ac:	4632      	mov	r2, r6
 c01f2ae:	4641      	mov	r1, r8
 c01f2b0:	3001      	adds	r0, #1
 c01f2b2:	f7f8 fb64 	bl	c01797e <memcpy>
        return( 0 );
 c01f2b6:	e786      	b.n	c01f1c6 <rsa_rsassa_pkcs1_v15_encode+0x22>
 c01f2b8:	ffffbf80 	.word	0xffffbf80

0c01f2bc <rsa_check_context.isra.0>:
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 c01f2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 c01f2be:	f100 0508 	add.w	r5, r0, #8
 c01f2c2:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 c01f2c4:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 c01f2c6:	4628      	mov	r0, r5
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 c01f2c8:	460e      	mov	r6, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 c01f2ca:	f005 fda5 	bl	c024e18 <mbedtls_mpi_size>
 c01f2ce:	4287      	cmp	r7, r0
 c01f2d0:	d001      	beq.n	c01f2d6 <rsa_check_context.isra.0+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c01f2d2:	4827      	ldr	r0, [pc, #156]	; (c01f370 <rsa_check_context.isra.0+0xb4>)
}
 c01f2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 c01f2d6:	6863      	ldr	r3, [r4, #4]
 c01f2d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c01f2dc:	d8f9      	bhi.n	c01f2d2 <rsa_check_context.isra.0+0x16>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 c01f2de:	2100      	movs	r1, #0
 c01f2e0:	4628      	mov	r0, r5
 c01f2e2:	f005 ffcd 	bl	c025280 <mbedtls_mpi_cmp_int>
 c01f2e6:	2800      	cmp	r0, #0
 c01f2e8:	ddf3      	ble.n	c01f2d2 <rsa_check_context.isra.0+0x16>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 c01f2ea:	2100      	movs	r1, #0
 c01f2ec:	4628      	mov	r0, r5
 c01f2ee:	f005 fd1f 	bl	c024d30 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 c01f2f2:	2800      	cmp	r0, #0
 c01f2f4:	d0ed      	beq.n	c01f2d2 <rsa_check_context.isra.0+0x16>
    if( is_priv &&
 c01f2f6:	b9f6      	cbnz	r6, c01f336 <rsa_check_context.isra.0+0x7a>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 c01f2f8:	2100      	movs	r1, #0
 c01f2fa:	f104 0014 	add.w	r0, r4, #20
 c01f2fe:	f005 ffbf 	bl	c025280 <mbedtls_mpi_cmp_int>
 c01f302:	2800      	cmp	r0, #0
 c01f304:	dde5      	ble.n	c01f2d2 <rsa_check_context.isra.0+0x16>
    if( is_priv &&
 c01f306:	b1a6      	cbz	r6, c01f332 <rsa_check_context.isra.0+0x76>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 c01f308:	2100      	movs	r1, #0
 c01f30a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 c01f30e:	f005 ffb7 	bl	c025280 <mbedtls_mpi_cmp_int>
    if( is_priv &&
 c01f312:	2800      	cmp	r0, #0
 c01f314:	dddd      	ble.n	c01f2d2 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 c01f316:	2100      	movs	r1, #0
 c01f318:	f104 0050 	add.w	r0, r4, #80	; 0x50
 c01f31c:	f005 ffb0 	bl	c025280 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 c01f320:	2800      	cmp	r0, #0
 c01f322:	ddd6      	ble.n	c01f2d2 <rsa_check_context.isra.0+0x16>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 c01f324:	2100      	movs	r1, #0
 c01f326:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c01f32a:	f005 ffa9 	bl	c025280 <mbedtls_mpi_cmp_int>
    if( is_priv &&
 c01f32e:	2800      	cmp	r0, #0
 c01f330:	ddcf      	ble.n	c01f2d2 <rsa_check_context.isra.0+0x16>
    return( 0 );
 c01f332:	2000      	movs	r0, #0
 c01f334:	e7ce      	b.n	c01f2d4 <rsa_check_context.isra.0+0x18>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 c01f336:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 c01f33a:	2100      	movs	r1, #0
 c01f33c:	4628      	mov	r0, r5
 c01f33e:	f005 ff9f 	bl	c025280 <mbedtls_mpi_cmp_int>
    if( is_priv &&
 c01f342:	2800      	cmp	r0, #0
 c01f344:	ddc5      	ble.n	c01f2d2 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 c01f346:	2100      	movs	r1, #0
 c01f348:	4628      	mov	r0, r5
 c01f34a:	f005 fcf1 	bl	c024d30 <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 c01f34e:	2800      	cmp	r0, #0
 c01f350:	d0bf      	beq.n	c01f2d2 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 c01f352:	f104 0538 	add.w	r5, r4, #56	; 0x38
 c01f356:	2100      	movs	r1, #0
 c01f358:	4628      	mov	r0, r5
 c01f35a:	f005 ff91 	bl	c025280 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 c01f35e:	2800      	cmp	r0, #0
 c01f360:	ddb7      	ble.n	c01f2d2 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 c01f362:	2100      	movs	r1, #0
 c01f364:	4628      	mov	r0, r5
 c01f366:	f005 fce3 	bl	c024d30 <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 c01f36a:	2800      	cmp	r0, #0
 c01f36c:	d1c4      	bne.n	c01f2f8 <rsa_check_context.isra.0+0x3c>
 c01f36e:	e7b0      	b.n	c01f2d2 <rsa_check_context.isra.0+0x16>
 c01f370:	ffffbf80 	.word	0xffffbf80

0c01f374 <mbedtls_rsa_import_raw>:
{
 c01f374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c01f378:	9f09      	ldr	r7, [sp, #36]	; 0x24
 c01f37a:	4604      	mov	r4, r0
 c01f37c:	4698      	mov	r8, r3
 c01f37e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 c01f380:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    if( N != NULL )
 c01f382:	b149      	cbz	r1, c01f398 <mbedtls_rsa_import_raw+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 c01f384:	f100 0908 	add.w	r9, r0, #8
 c01f388:	4648      	mov	r0, r9
 c01f38a:	f005 fd7f 	bl	c024e8c <mbedtls_mpi_read_binary>
 c01f38e:	b9a0      	cbnz	r0, c01f3ba <mbedtls_rsa_import_raw+0x46>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 c01f390:	4648      	mov	r0, r9
 c01f392:	f005 fd41 	bl	c024e18 <mbedtls_mpi_size>
 c01f396:	6060      	str	r0, [r4, #4]
    if( P != NULL )
 c01f398:	f1b8 0f00 	cmp.w	r8, #0
 c01f39c:	d105      	bne.n	c01f3aa <mbedtls_rsa_import_raw+0x36>
    if( Q != NULL )
 c01f39e:	b97f      	cbnz	r7, c01f3c0 <mbedtls_rsa_import_raw+0x4c>
    if( D != NULL )
 c01f3a0:	b9be      	cbnz	r6, c01f3d2 <mbedtls_rsa_import_raw+0x5e>
    if( E != NULL )
 c01f3a2:	b9fd      	cbnz	r5, c01f3e4 <mbedtls_rsa_import_raw+0x70>
    return( 0 );
 c01f3a4:	2000      	movs	r0, #0
}
 c01f3a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 c01f3aa:	9a08      	ldr	r2, [sp, #32]
 c01f3ac:	4641      	mov	r1, r8
 c01f3ae:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 c01f3b2:	f005 fd6b 	bl	c024e8c <mbedtls_mpi_read_binary>
 c01f3b6:	2800      	cmp	r0, #0
 c01f3b8:	d0f1      	beq.n	c01f39e <mbedtls_rsa_import_raw+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 c01f3ba:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 c01f3be:	e7f2      	b.n	c01f3a6 <mbedtls_rsa_import_raw+0x32>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 c01f3c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c01f3c2:	4639      	mov	r1, r7
 c01f3c4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 c01f3c8:	f005 fd60 	bl	c024e8c <mbedtls_mpi_read_binary>
 c01f3cc:	2800      	cmp	r0, #0
 c01f3ce:	d1f4      	bne.n	c01f3ba <mbedtls_rsa_import_raw+0x46>
 c01f3d0:	e7e6      	b.n	c01f3a0 <mbedtls_rsa_import_raw+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 c01f3d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 c01f3d4:	4631      	mov	r1, r6
 c01f3d6:	f104 0020 	add.w	r0, r4, #32
 c01f3da:	f005 fd57 	bl	c024e8c <mbedtls_mpi_read_binary>
 c01f3de:	2800      	cmp	r0, #0
 c01f3e0:	d1eb      	bne.n	c01f3ba <mbedtls_rsa_import_raw+0x46>
 c01f3e2:	e7de      	b.n	c01f3a2 <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 c01f3e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c01f3e6:	4629      	mov	r1, r5
 c01f3e8:	f104 0014 	add.w	r0, r4, #20
 c01f3ec:	f005 fd4e 	bl	c024e8c <mbedtls_mpi_read_binary>
    if( ret != 0 )
 c01f3f0:	2800      	cmp	r0, #0
 c01f3f2:	d0d7      	beq.n	c01f3a4 <mbedtls_rsa_import_raw+0x30>
 c01f3f4:	e7e1      	b.n	c01f3ba <mbedtls_rsa_import_raw+0x46>
	...

0c01f3f8 <mbedtls_rsa_complete>:
{
 c01f3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 c01f3fc:	f100 0908 	add.w	r9, r0, #8
{
 c01f400:	b085      	sub	sp, #20
 c01f402:	4604      	mov	r4, r0
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 c01f404:	2100      	movs	r1, #0
 c01f406:	4648      	mov	r0, r9
 c01f408:	f005 ff3a 	bl	c025280 <mbedtls_mpi_cmp_int>
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 c01f40c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 c01f410:	2100      	movs	r1, #0
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 c01f412:	4683      	mov	fp, r0
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 c01f414:	4630      	mov	r0, r6
 c01f416:	f005 ff33 	bl	c025280 <mbedtls_mpi_cmp_int>
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 c01f41a:	f104 0738 	add.w	r7, r4, #56	; 0x38
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 c01f41e:	9003      	str	r0, [sp, #12]
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 c01f420:	2100      	movs	r1, #0
 c01f422:	4638      	mov	r0, r7
 c01f424:	f005 ff2c 	bl	c025280 <mbedtls_mpi_cmp_int>
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 c01f428:	f104 0820 	add.w	r8, r4, #32
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 c01f42c:	9002      	str	r0, [sp, #8]
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 c01f42e:	2100      	movs	r1, #0
 c01f430:	4640      	mov	r0, r8
 c01f432:	f005 ff25 	bl	c025280 <mbedtls_mpi_cmp_int>
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 c01f436:	f104 0a14 	add.w	sl, r4, #20
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 c01f43a:	4605      	mov	r5, r0
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 c01f43c:	2100      	movs	r1, #0
 c01f43e:	4650      	mov	r0, sl
 c01f440:	f005 ff1e 	bl	c025280 <mbedtls_mpi_cmp_int>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 c01f444:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 c01f448:	b1ba      	cbz	r2, c01f47a <mbedtls_rsa_complete+0x82>
 c01f44a:	2b00      	cmp	r3, #0
 c01f44c:	d05c      	beq.n	c01f508 <mbedtls_rsa_complete+0x110>
 c01f44e:	2d00      	cmp	r5, #0
 c01f450:	d055      	beq.n	c01f4fe <mbedtls_rsa_complete+0x106>
 c01f452:	1c01      	adds	r1, r0, #0
 c01f454:	bf18      	it	ne
 c01f456:	2101      	movne	r1, #1
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 c01f458:	f1bb 0f00 	cmp.w	fp, #0
 c01f45c:	d158      	bne.n	c01f510 <mbedtls_rsa_complete+0x118>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 c01f45e:	2b00      	cmp	r3, #0
 c01f460:	d056      	beq.n	c01f510 <mbedtls_rsa_complete+0x118>
 c01f462:	2d00      	cmp	r5, #0
 c01f464:	d154      	bne.n	c01f510 <mbedtls_rsa_complete+0x118>
 c01f466:	1c05      	adds	r5, r0, #0
 c01f468:	bf18      	it	ne
 c01f46a:	2501      	movne	r5, #1
    is_priv = n_missing || pq_missing || d_missing;
 c01f46c:	b9c9      	cbnz	r1, c01f4a2 <mbedtls_rsa_complete+0xaa>
 c01f46e:	b15d      	cbz	r5, c01f488 <mbedtls_rsa_complete+0x90>
    if( !have_N && have_P && have_Q )
 c01f470:	f1bb 0f00 	cmp.w	fp, #0
 c01f474:	d12a      	bne.n	c01f4cc <mbedtls_rsa_complete+0xd4>
 c01f476:	b9c2      	cbnz	r2, c01f4aa <mbedtls_rsa_complete+0xb2>
 c01f478:	e028      	b.n	c01f4cc <mbedtls_rsa_complete+0xd4>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 c01f47a:	f1bb 0f00 	cmp.w	fp, #0
 c01f47e:	d003      	beq.n	c01f488 <mbedtls_rsa_complete+0x90>
 c01f480:	b913      	cbnz	r3, c01f488 <mbedtls_rsa_complete+0x90>
 c01f482:	b12d      	cbz	r5, c01f490 <mbedtls_rsa_complete+0x98>
 c01f484:	2800      	cmp	r0, #0
 c01f486:	d145      	bne.n	c01f514 <mbedtls_rsa_complete+0x11c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c01f488:	4826      	ldr	r0, [pc, #152]	; (c01f524 <mbedtls_rsa_complete+0x12c>)
 c01f48a:	e017      	b.n	c01f4bc <mbedtls_rsa_complete+0xc4>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 c01f48c:	4629      	mov	r1, r5
 c01f48e:	e7ea      	b.n	c01f466 <mbedtls_rsa_complete+0x6e>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 c01f490:	2800      	cmp	r0, #0
 c01f492:	d0f9      	beq.n	c01f488 <mbedtls_rsa_complete+0x90>
    return( rsa_check_context( ctx, is_priv, 1 ) );
 c01f494:	4629      	mov	r1, r5
 c01f496:	4620      	mov	r0, r4
}
 c01f498:	b005      	add	sp, #20
 c01f49a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( rsa_check_context( ctx, is_priv, 1 ) );
 c01f49e:	f7ff bf0d 	b.w	c01f2bc <rsa_check_context.isra.0>
    if( !have_N && have_P && have_Q )
 c01f4a2:	f1bb 0f00 	cmp.w	fp, #0
 c01f4a6:	d110      	bne.n	c01f4ca <mbedtls_rsa_complete+0xd2>
 c01f4a8:	b17a      	cbz	r2, c01f4ca <mbedtls_rsa_complete+0xd2>
 c01f4aa:	b173      	cbz	r3, c01f4ca <mbedtls_rsa_complete+0xd2>
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 c01f4ac:	463a      	mov	r2, r7
 c01f4ae:	4631      	mov	r1, r6
 c01f4b0:	4648      	mov	r0, r9
 c01f4b2:	f006 f80b 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c01f4b6:	b120      	cbz	r0, c01f4c2 <mbedtls_rsa_complete+0xca>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 c01f4b8:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
 c01f4bc:	b005      	add	sp, #20
 c01f4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ctx->len = mbedtls_mpi_size( &ctx->N );
 c01f4c2:	4648      	mov	r0, r9
 c01f4c4:	f005 fca8 	bl	c024e18 <mbedtls_mpi_size>
 c01f4c8:	6060      	str	r0, [r4, #4]
    else if( d_missing )
 c01f4ca:	b13d      	cbz	r5, c01f4dc <mbedtls_rsa_complete+0xe4>
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 c01f4cc:	4643      	mov	r3, r8
 c01f4ce:	4652      	mov	r2, sl
 c01f4d0:	4639      	mov	r1, r7
 c01f4d2:	4630      	mov	r0, r6
 c01f4d4:	f00e f836 	bl	c02d544 <mbedtls_rsa_deduce_private_exponent>
 c01f4d8:	2800      	cmp	r0, #0
 c01f4da:	d1ed      	bne.n	c01f4b8 <mbedtls_rsa_complete+0xc0>
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 c01f4dc:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 c01f4e0:	9301      	str	r3, [sp, #4]
 c01f4e2:	f104 0350 	add.w	r3, r4, #80	; 0x50
 c01f4e6:	9300      	str	r3, [sp, #0]
 c01f4e8:	4642      	mov	r2, r8
 c01f4ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c01f4ee:	4639      	mov	r1, r7
 c01f4f0:	4630      	mov	r0, r6
 c01f4f2:	f00e f9e3 	bl	c02d8bc <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 c01f4f6:	2800      	cmp	r0, #0
 c01f4f8:	d1de      	bne.n	c01f4b8 <mbedtls_rsa_complete+0xc0>
 c01f4fa:	2501      	movs	r5, #1
 c01f4fc:	e7ca      	b.n	c01f494 <mbedtls_rsa_complete+0x9c>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 c01f4fe:	f1bb 0f00 	cmp.w	fp, #0
 c01f502:	d1c3      	bne.n	c01f48c <mbedtls_rsa_complete+0x94>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 c01f504:	4659      	mov	r1, fp
 c01f506:	e7aa      	b.n	c01f45e <mbedtls_rsa_complete+0x66>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 c01f508:	f1bb 0f00 	cmp.w	fp, #0
 c01f50c:	d1bc      	bne.n	c01f488 <mbedtls_rsa_complete+0x90>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 c01f50e:	4659      	mov	r1, fp
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 c01f510:	2500      	movs	r5, #0
 c01f512:	e7ab      	b.n	c01f46c <mbedtls_rsa_complete+0x74>
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
 c01f514:	9700      	str	r7, [sp, #0]
 c01f516:	4633      	mov	r3, r6
 c01f518:	4642      	mov	r2, r8
 c01f51a:	4651      	mov	r1, sl
 c01f51c:	4648      	mov	r0, r9
 c01f51e:	f00d ff15 	bl	c02d34c <mbedtls_rsa_deduce_primes>
 c01f522:	e7d9      	b.n	c01f4d8 <mbedtls_rsa_complete+0xe0>
 c01f524:	ffffbf80 	.word	0xffffbf80

0c01f528 <mbedtls_rsa_export>:
{
 c01f528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 c01f52c:	f100 0a08 	add.w	sl, r0, #8
{
 c01f530:	4604      	mov	r4, r0
 c01f532:	e9dd 9508 	ldrd	r9, r5, [sp, #32]
 c01f536:	460e      	mov	r6, r1
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 c01f538:	4650      	mov	r0, sl
 c01f53a:	2100      	movs	r1, #0
{
 c01f53c:	4617      	mov	r7, r2
 c01f53e:	4698      	mov	r8, r3
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 c01f540:	f005 fe9e 	bl	c025280 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 c01f544:	b910      	cbnz	r0, c01f54c <mbedtls_rsa_export+0x24>
        if( P != NULL || Q != NULL || D != NULL )
 c01f546:	b347      	cbz	r7, c01f59a <mbedtls_rsa_export+0x72>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c01f548:	482b      	ldr	r0, [pc, #172]	; (c01f5f8 <mbedtls_rsa_export+0xd0>)
 c01f54a:	e034      	b.n	c01f5b6 <mbedtls_rsa_export+0x8e>
        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&
 c01f54c:	2100      	movs	r1, #0
 c01f54e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 c01f552:	f005 fe95 	bl	c025280 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 c01f556:	2800      	cmp	r0, #0
 c01f558:	d0f5      	beq.n	c01f546 <mbedtls_rsa_export+0x1e>
        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&
 c01f55a:	2100      	movs	r1, #0
 c01f55c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 c01f560:	f005 fe8e 	bl	c025280 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&
 c01f564:	2800      	cmp	r0, #0
 c01f566:	d0ee      	beq.n	c01f546 <mbedtls_rsa_export+0x1e>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 c01f568:	2100      	movs	r1, #0
 c01f56a:	f104 0020 	add.w	r0, r4, #32
 c01f56e:	f005 fe87 	bl	c025280 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&
 c01f572:	2800      	cmp	r0, #0
 c01f574:	d0e7      	beq.n	c01f546 <mbedtls_rsa_export+0x1e>
        mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0;
 c01f576:	2100      	movs	r1, #0
 c01f578:	f104 0014 	add.w	r0, r4, #20
 c01f57c:	f005 fe80 	bl	c025280 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 c01f580:	2800      	cmp	r0, #0
 c01f582:	d0e0      	beq.n	c01f546 <mbedtls_rsa_export+0x1e>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( N, &ctx->N ) ) != 0 ) ||
 c01f584:	b98e      	cbnz	r6, c01f5aa <mbedtls_rsa_export+0x82>
 c01f586:	b9c7      	cbnz	r7, c01f5ba <mbedtls_rsa_export+0x92>
        ( P != NULL && ( ret = mbedtls_mpi_copy( P, &ctx->P ) ) != 0 ) ||
 c01f588:	f1b8 0f00 	cmp.w	r8, #0
 c01f58c:	d11d      	bne.n	c01f5ca <mbedtls_rsa_export+0xa2>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( Q, &ctx->Q ) ) != 0 ) ||
 c01f58e:	f1b9 0f00 	cmp.w	r9, #0
 c01f592:	d122      	bne.n	c01f5da <mbedtls_rsa_export+0xb2>
        ( D != NULL && ( ret = mbedtls_mpi_copy( D, &ctx->D ) ) != 0 ) ||
 c01f594:	bb4d      	cbnz	r5, c01f5ea <mbedtls_rsa_export+0xc2>
    return( 0 );
 c01f596:	4628      	mov	r0, r5
 c01f598:	e00d      	b.n	c01f5b6 <mbedtls_rsa_export+0x8e>
        if( P != NULL || Q != NULL || D != NULL )
 c01f59a:	f1b8 0f00 	cmp.w	r8, #0
 c01f59e:	d1d3      	bne.n	c01f548 <mbedtls_rsa_export+0x20>
 c01f5a0:	f1b9 0f00 	cmp.w	r9, #0
 c01f5a4:	d1d0      	bne.n	c01f548 <mbedtls_rsa_export+0x20>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( N, &ctx->N ) ) != 0 ) ||
 c01f5a6:	2e00      	cmp	r6, #0
 c01f5a8:	d0f4      	beq.n	c01f594 <mbedtls_rsa_export+0x6c>
 c01f5aa:	4651      	mov	r1, sl
 c01f5ac:	4630      	mov	r0, r6
 c01f5ae:	f005 fb21 	bl	c024bf4 <mbedtls_mpi_copy>
 c01f5b2:	2800      	cmp	r0, #0
 c01f5b4:	d0e7      	beq.n	c01f586 <mbedtls_rsa_export+0x5e>
}
 c01f5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( P, &ctx->P ) ) != 0 ) ||
 c01f5ba:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 c01f5be:	4638      	mov	r0, r7
 c01f5c0:	f005 fb18 	bl	c024bf4 <mbedtls_mpi_copy>
 c01f5c4:	2800      	cmp	r0, #0
 c01f5c6:	d0df      	beq.n	c01f588 <mbedtls_rsa_export+0x60>
 c01f5c8:	e7f5      	b.n	c01f5b6 <mbedtls_rsa_export+0x8e>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( Q, &ctx->Q ) ) != 0 ) ||
 c01f5ca:	f104 0138 	add.w	r1, r4, #56	; 0x38
 c01f5ce:	4640      	mov	r0, r8
 c01f5d0:	f005 fb10 	bl	c024bf4 <mbedtls_mpi_copy>
 c01f5d4:	2800      	cmp	r0, #0
 c01f5d6:	d0da      	beq.n	c01f58e <mbedtls_rsa_export+0x66>
 c01f5d8:	e7ed      	b.n	c01f5b6 <mbedtls_rsa_export+0x8e>
        ( D != NULL && ( ret = mbedtls_mpi_copy( D, &ctx->D ) ) != 0 ) ||
 c01f5da:	f104 0120 	add.w	r1, r4, #32
 c01f5de:	4648      	mov	r0, r9
 c01f5e0:	f005 fb08 	bl	c024bf4 <mbedtls_mpi_copy>
 c01f5e4:	2800      	cmp	r0, #0
 c01f5e6:	d0d5      	beq.n	c01f594 <mbedtls_rsa_export+0x6c>
 c01f5e8:	e7e5      	b.n	c01f5b6 <mbedtls_rsa_export+0x8e>
        ( E != NULL && ( ret = mbedtls_mpi_copy( E, &ctx->E ) ) != 0 ) )
 c01f5ea:	f104 0114 	add.w	r1, r4, #20
 c01f5ee:	4628      	mov	r0, r5
}
 c01f5f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ( E != NULL && ( ret = mbedtls_mpi_copy( E, &ctx->E ) ) != 0 ) )
 c01f5f4:	f005 bafe 	b.w	c024bf4 <mbedtls_mpi_copy>
 c01f5f8:	ffffbf80 	.word	0xffffbf80

0c01f5fc <mbedtls_rsa_export_crt>:
{
 c01f5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c01f5fe:	4604      	mov	r4, r0
 c01f600:	460f      	mov	r7, r1
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 c01f602:	3008      	adds	r0, #8
 c01f604:	2100      	movs	r1, #0
{
 c01f606:	4616      	mov	r6, r2
 c01f608:	461d      	mov	r5, r3
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 c01f60a:	f005 fe39 	bl	c025280 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 c01f60e:	b908      	cbnz	r0, c01f614 <mbedtls_rsa_export_crt+0x18>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c01f610:	481e      	ldr	r0, [pc, #120]	; (c01f68c <mbedtls_rsa_export_crt+0x90>)
}
 c01f612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&
 c01f614:	2100      	movs	r1, #0
 c01f616:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 c01f61a:	f005 fe31 	bl	c025280 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 c01f61e:	2800      	cmp	r0, #0
 c01f620:	d0f6      	beq.n	c01f610 <mbedtls_rsa_export_crt+0x14>
        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&
 c01f622:	2100      	movs	r1, #0
 c01f624:	f104 0038 	add.w	r0, r4, #56	; 0x38
 c01f628:	f005 fe2a 	bl	c025280 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&
 c01f62c:	2800      	cmp	r0, #0
 c01f62e:	d0ef      	beq.n	c01f610 <mbedtls_rsa_export_crt+0x14>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 c01f630:	2100      	movs	r1, #0
 c01f632:	f104 0020 	add.w	r0, r4, #32
 c01f636:	f005 fe23 	bl	c025280 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&
 c01f63a:	2800      	cmp	r0, #0
 c01f63c:	d0e8      	beq.n	c01f610 <mbedtls_rsa_export_crt+0x14>
        mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0;
 c01f63e:	2100      	movs	r1, #0
 c01f640:	f104 0014 	add.w	r0, r4, #20
 c01f644:	f005 fe1c 	bl	c025280 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 c01f648:	2800      	cmp	r0, #0
 c01f64a:	d0e1      	beq.n	c01f610 <mbedtls_rsa_export_crt+0x14>
    if( ( DP != NULL && ( ret = mbedtls_mpi_copy( DP, &ctx->DP ) ) != 0 ) ||
 c01f64c:	b91f      	cbnz	r7, c01f656 <mbedtls_rsa_export_crt+0x5a>
 c01f64e:	b966      	cbnz	r6, c01f66a <mbedtls_rsa_export_crt+0x6e>
        ( DQ != NULL && ( ret = mbedtls_mpi_copy( DQ, &ctx->DQ ) ) != 0 ) ||
 c01f650:	b99d      	cbnz	r5, c01f67a <mbedtls_rsa_export_crt+0x7e>
    return( 0 );
 c01f652:	2000      	movs	r0, #0
 c01f654:	e7dd      	b.n	c01f612 <mbedtls_rsa_export_crt+0x16>
    if( ( DP != NULL && ( ret = mbedtls_mpi_copy( DP, &ctx->DP ) ) != 0 ) ||
 c01f656:	f104 0144 	add.w	r1, r4, #68	; 0x44
 c01f65a:	4638      	mov	r0, r7
 c01f65c:	f005 faca 	bl	c024bf4 <mbedtls_mpi_copy>
 c01f660:	2800      	cmp	r0, #0
 c01f662:	d0f4      	beq.n	c01f64e <mbedtls_rsa_export_crt+0x52>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 c01f664:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 c01f668:	e7d3      	b.n	c01f612 <mbedtls_rsa_export_crt+0x16>
        ( DQ != NULL && ( ret = mbedtls_mpi_copy( DQ, &ctx->DQ ) ) != 0 ) ||
 c01f66a:	f104 0150 	add.w	r1, r4, #80	; 0x50
 c01f66e:	4630      	mov	r0, r6
 c01f670:	f005 fac0 	bl	c024bf4 <mbedtls_mpi_copy>
 c01f674:	2800      	cmp	r0, #0
 c01f676:	d1f5      	bne.n	c01f664 <mbedtls_rsa_export_crt+0x68>
 c01f678:	e7ea      	b.n	c01f650 <mbedtls_rsa_export_crt+0x54>
        ( QP != NULL && ( ret = mbedtls_mpi_copy( QP, &ctx->QP ) ) != 0 ) )
 c01f67a:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 c01f67e:	4628      	mov	r0, r5
 c01f680:	f005 fab8 	bl	c024bf4 <mbedtls_mpi_copy>
 c01f684:	2800      	cmp	r0, #0
 c01f686:	d1ed      	bne.n	c01f664 <mbedtls_rsa_export_crt+0x68>
 c01f688:	e7e3      	b.n	c01f652 <mbedtls_rsa_export_crt+0x56>
 c01f68a:	bf00      	nop
 c01f68c:	ffffbf80 	.word	0xffffbf80

0c01f690 <mbedtls_rsa_init>:
{
 c01f690:	b538      	push	{r3, r4, r5, lr}
 c01f692:	460d      	mov	r5, r1
 c01f694:	4614      	mov	r4, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 c01f696:	2100      	movs	r1, #0
 c01f698:	22a4      	movs	r2, #164	; 0xa4
 c01f69a:	f7f8 f994 	bl	c0179c6 <memset>
    ctx->hash_id = hash_id;
 c01f69e:	e9c0 5429 	strd	r5, r4, [r0, #164]	; 0xa4
}
 c01f6a2:	bd38      	pop	{r3, r4, r5, pc}

0c01f6a4 <mbedtls_rsa_set_padding>:
    ctx->hash_id = hash_id;
 c01f6a4:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
}
 c01f6a8:	4770      	bx	lr

0c01f6aa <mbedtls_rsa_get_len>:
}
 c01f6aa:	6840      	ldr	r0, [r0, #4]
 c01f6ac:	4770      	bx	lr
	...

0c01f6b0 <mbedtls_rsa_check_pubkey>:
{
 c01f6b0:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 c01f6b2:	2100      	movs	r1, #0
{
 c01f6b4:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 c01f6b6:	f7ff fe01 	bl	c01f2bc <rsa_check_context.isra.0>
 c01f6ba:	4605      	mov	r5, r0
 c01f6bc:	b9b8      	cbnz	r0, c01f6ee <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 c01f6be:	f104 0608 	add.w	r6, r4, #8
 c01f6c2:	4630      	mov	r0, r6
 c01f6c4:	f005 fb88 	bl	c024dd8 <mbedtls_mpi_bitlen>
 c01f6c8:	287f      	cmp	r0, #127	; 0x7f
 c01f6ca:	d910      	bls.n	c01f6ee <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 c01f6cc:	3414      	adds	r4, #20
 c01f6ce:	4629      	mov	r1, r5
 c01f6d0:	4620      	mov	r0, r4
 c01f6d2:	f005 fb2d 	bl	c024d30 <mbedtls_mpi_get_bit>
 c01f6d6:	b150      	cbz	r0, c01f6ee <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 c01f6d8:	4620      	mov	r0, r4
 c01f6da:	f005 fb7d 	bl	c024dd8 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 c01f6de:	2801      	cmp	r0, #1
 c01f6e0:	d905      	bls.n	c01f6ee <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 c01f6e2:	4631      	mov	r1, r6
 c01f6e4:	4620      	mov	r0, r4
 c01f6e6:	f005 fd8b 	bl	c025200 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 c01f6ea:	2800      	cmp	r0, #0
 c01f6ec:	db00      	blt.n	c01f6f0 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 c01f6ee:	4d01      	ldr	r5, [pc, #4]	; (c01f6f4 <mbedtls_rsa_check_pubkey+0x44>)
}
 c01f6f0:	4628      	mov	r0, r5
 c01f6f2:	bd70      	pop	{r4, r5, r6, pc}
 c01f6f4:	ffffbe00 	.word	0xffffbe00

0c01f6f8 <mbedtls_rsa_check_privkey>:
{
 c01f6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01f6fa:	b085      	sub	sp, #20
 c01f6fc:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 c01f6fe:	f7ff ffd7 	bl	c01f6b0 <mbedtls_rsa_check_pubkey>
 c01f702:	b110      	cbz	r0, c01f70a <mbedtls_rsa_check_privkey+0x12>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 c01f704:	4816      	ldr	r0, [pc, #88]	; (c01f760 <mbedtls_rsa_check_privkey+0x68>)
}
 c01f706:	b005      	add	sp, #20
 c01f708:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 c01f70a:	2101      	movs	r1, #1
 c01f70c:	4620      	mov	r0, r4
 c01f70e:	f7ff fdd5 	bl	c01f2bc <rsa_check_context.isra.0>
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 c01f712:	2800      	cmp	r0, #0
 c01f714:	d1f6      	bne.n	c01f704 <mbedtls_rsa_check_privkey+0xc>
    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 c01f716:	f104 0314 	add.w	r3, r4, #20
 c01f71a:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 c01f71e:	f104 0638 	add.w	r6, r4, #56	; 0x38
 c01f722:	f104 0720 	add.w	r7, r4, #32
 c01f726:	e9cd 0001 	strd	r0, r0, [sp, #4]
 c01f72a:	9300      	str	r3, [sp, #0]
 c01f72c:	4632      	mov	r2, r6
 c01f72e:	463b      	mov	r3, r7
 c01f730:	4629      	mov	r1, r5
 c01f732:	f104 0008 	add.w	r0, r4, #8
 c01f736:	f00d ffe9 	bl	c02d70c <mbedtls_rsa_validate_params>
 c01f73a:	2800      	cmp	r0, #0
 c01f73c:	d1e2      	bne.n	c01f704 <mbedtls_rsa_check_privkey+0xc>
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 c01f73e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 c01f742:	9301      	str	r3, [sp, #4]
 c01f744:	f104 0350 	add.w	r3, r4, #80	; 0x50
 c01f748:	9300      	str	r3, [sp, #0]
 c01f74a:	463a      	mov	r2, r7
 c01f74c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c01f750:	4631      	mov	r1, r6
 c01f752:	4628      	mov	r0, r5
 c01f754:	f00d ff54 	bl	c02d600 <mbedtls_rsa_validate_crt>
 c01f758:	2800      	cmp	r0, #0
 c01f75a:	d0d4      	beq.n	c01f706 <mbedtls_rsa_check_privkey+0xe>
 c01f75c:	e7d2      	b.n	c01f704 <mbedtls_rsa_check_privkey+0xc>
 c01f75e:	bf00      	nop
 c01f760:	ffffbe00 	.word	0xffffbe00

0c01f764 <mbedtls_rsa_check_pub_priv>:
{
 c01f764:	b538      	push	{r3, r4, r5, lr}
 c01f766:	4605      	mov	r5, r0
 c01f768:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 c01f76a:	f7ff ffa1 	bl	c01f6b0 <mbedtls_rsa_check_pubkey>
 c01f76e:	b988      	cbnz	r0, c01f794 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 c01f770:	4620      	mov	r0, r4
 c01f772:	f7ff ffc1 	bl	c01f6f8 <mbedtls_rsa_check_privkey>
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 c01f776:	b968      	cbnz	r0, c01f794 <mbedtls_rsa_check_pub_priv+0x30>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 c01f778:	f104 0108 	add.w	r1, r4, #8
 c01f77c:	f105 0008 	add.w	r0, r5, #8
 c01f780:	f005 fd3e 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c01f784:	b930      	cbnz	r0, c01f794 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 c01f786:	f104 0114 	add.w	r1, r4, #20
 c01f78a:	f105 0014 	add.w	r0, r5, #20
 c01f78e:	f005 fd37 	bl	c025200 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 c01f792:	b100      	cbz	r0, c01f796 <mbedtls_rsa_check_pub_priv+0x32>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 c01f794:	4800      	ldr	r0, [pc, #0]	; (c01f798 <mbedtls_rsa_check_pub_priv+0x34>)
}
 c01f796:	bd38      	pop	{r3, r4, r5, pc}
 c01f798:	ffffbe00 	.word	0xffffbe00

0c01f79c <mbedtls_rsa_public>:
{
 c01f79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01f7a0:	468b      	mov	fp, r1
 c01f7a2:	b08f      	sub	sp, #60	; 0x3c
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 c01f7a4:	2100      	movs	r1, #0
{
 c01f7a6:	4607      	mov	r7, r0
 c01f7a8:	9201      	str	r2, [sp, #4]
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 c01f7aa:	f7ff fd87 	bl	c01f2bc <rsa_check_context.isra.0>
 c01f7ae:	2800      	cmp	r0, #0
 c01f7b0:	f040 809c 	bne.w	c01f8ec <mbedtls_rsa_public+0x150>
    mbedtls_mpi_init( &T );
 c01f7b4:	a803      	add	r0, sp, #12
 c01f7b6:	f005 f9df 	bl	c024b78 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 c01f7ba:	687a      	ldr	r2, [r7, #4]
 c01f7bc:	4659      	mov	r1, fp
 c01f7be:	a803      	add	r0, sp, #12
 c01f7c0:	f005 fb64 	bl	c024e8c <mbedtls_mpi_read_binary>
 c01f7c4:	4604      	mov	r4, r0
 c01f7c6:	2800      	cmp	r0, #0
 c01f7c8:	f040 8081 	bne.w	c01f8ce <mbedtls_rsa_public+0x132>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 c01f7cc:	f107 0908 	add.w	r9, r7, #8
 c01f7d0:	4649      	mov	r1, r9
 c01f7d2:	a803      	add	r0, sp, #12
 c01f7d4:	f005 fd14 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c01f7d8:	2800      	cmp	r0, #0
 c01f7da:	f280 8084 	bge.w	c01f8e6 <mbedtls_rsa_public+0x14a>
    PKA_ModExpInTypeDef in = {0};
 c01f7de:	2214      	movs	r2, #20
 c01f7e0:	4621      	mov	r1, r4
    MBEDTLS_MPI_CHK( rsa_pka_modexp( &ctx->E, &ctx->N, input, output ) );
 c01f7e2:	3714      	adds	r7, #20
    PKA_ModExpInTypeDef in = {0};
 c01f7e4:	a809      	add	r0, sp, #36	; 0x24
    PKA_HandleTypeDef hpka = {0};
 c01f7e6:	e9cd 4406 	strd	r4, r4, [sp, #24]
 c01f7ea:	9408      	str	r4, [sp, #32]
    PKA_ModExpInTypeDef in = {0};
 c01f7ec:	f7f8 f8eb 	bl	c0179c6 <memset>
    elen = mbedtls_mpi_size( exponent );
 c01f7f0:	4638      	mov	r0, r7
 c01f7f2:	f005 fb11 	bl	c024e18 <mbedtls_mpi_size>
    if (elen < 4)
 c01f7f6:	2803      	cmp	r0, #3
      elen = 4;
 c01f7f8:	bf92      	itee	ls
 c01f7fa:	2604      	movls	r6, #4
        elen_padding = (elen % 4);
 c01f7fc:	f000 0603 	andhi.w	r6, r0, #3
        elen += elen_padding;
 c01f800:	1836      	addhi	r6, r6, r0
    e_binary = mbedtls_calloc( 1, elen );
 c01f802:	4631      	mov	r1, r6
 c01f804:	2001      	movs	r0, #1
 c01f806:	f00a fd35 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK( ( e_binary == NULL ) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0 );
 c01f80a:	4680      	mov	r8, r0
 c01f80c:	b918      	cbnz	r0, c01f816 <mbedtls_rsa_public+0x7a>
    uint8_t *n_binary = NULL;
 c01f80e:	2500      	movs	r5, #0
    MBEDTLS_MPI_CHK( ( HAL_PKA_ModExp( &hpka, &in, ST_PKA_TIMEOUT ) != HAL_OK ) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0 );
 c01f810:	f06f 046f 	mvn.w	r4, #111	; 0x6f
 c01f814:	e03b      	b.n	c01f88e <mbedtls_rsa_public+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( exponent, e_binary, elen ) );
 c01f816:	4601      	mov	r1, r0
 c01f818:	4632      	mov	r2, r6
 c01f81a:	4638      	mov	r0, r7
 c01f81c:	f005 fba3 	bl	c024f66 <mbedtls_mpi_write_binary>
 c01f820:	4604      	mov	r4, r0
 c01f822:	2800      	cmp	r0, #0
 c01f824:	d15d      	bne.n	c01f8e2 <mbedtls_rsa_public+0x146>
    nlen = mbedtls_mpi_size( modulus );
 c01f826:	4648      	mov	r0, r9
 c01f828:	f005 faf6 	bl	c024e18 <mbedtls_mpi_size>
    n_binary = mbedtls_calloc( 1, nlen );
 c01f82c:	4601      	mov	r1, r0
    nlen = mbedtls_mpi_size( modulus );
 c01f82e:	4682      	mov	sl, r0
    n_binary = mbedtls_calloc( 1, nlen );
 c01f830:	2001      	movs	r0, #1
 c01f832:	f00a fd1f 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK( ( n_binary == NULL ) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0 );
 c01f836:	4605      	mov	r5, r0
 c01f838:	2800      	cmp	r0, #0
 c01f83a:	d0e8      	beq.n	c01f80e <mbedtls_rsa_public+0x72>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( modulus, n_binary, nlen ) );
 c01f83c:	4601      	mov	r1, r0
 c01f83e:	4652      	mov	r2, sl
 c01f840:	4648      	mov	r0, r9
 c01f842:	f005 fb90 	bl	c024f66 <mbedtls_mpi_write_binary>
 c01f846:	4604      	mov	r4, r0
 c01f848:	bb08      	cbnz	r0, c01f88e <mbedtls_rsa_public+0xf2>
    in.OpSize  = nlen;           /* modulus length */
 c01f84a:	e9cd 6a09 	strd	r6, sl, [sp, #36]	; 0x24
    __HAL_RCC_PKA_CLK_ENABLE();
 c01f84e:	4b28      	ldr	r3, [pc, #160]	; (c01f8f0 <mbedtls_rsa_public+0x154>)
    in.pExp    = e_binary;       /* Exponent */
 c01f850:	e9cd 8b0b 	strd	r8, fp, [sp, #44]	; 0x2c
    __HAL_RCC_PKA_CLK_ENABLE();
 c01f854:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    in.pMod    = n_binary;       /* modulus */
 c01f856:	950d      	str	r5, [sp, #52]	; 0x34
    __HAL_RCC_PKA_CLK_ENABLE();
 c01f858:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 c01f85c:	64da      	str	r2, [r3, #76]	; 0x4c
 c01f85e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    MBEDTLS_MPI_CHK( ( HAL_PKA_Init( &hpka ) != HAL_OK ) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0 );
 c01f860:	a806      	add	r0, sp, #24
    __HAL_RCC_PKA_CLK_ENABLE();
 c01f862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c01f866:	9302      	str	r3, [sp, #8]
 c01f868:	9b02      	ldr	r3, [sp, #8]
    hpka.Instance = PKA;
 c01f86a:	4b22      	ldr	r3, [pc, #136]	; (c01f8f4 <mbedtls_rsa_public+0x158>)
 c01f86c:	9306      	str	r3, [sp, #24]
    MBEDTLS_MPI_CHK( ( HAL_PKA_Init( &hpka ) != HAL_OK ) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0 );
 c01f86e:	f003 f8fe 	bl	c022a6e <HAL_PKA_Init>
 c01f872:	2800      	cmp	r0, #0
 c01f874:	d1cc      	bne.n	c01f810 <mbedtls_rsa_public+0x74>
    MBEDTLS_MPI_CHK( ( HAL_PKA_ModExp( &hpka, &in, ST_PKA_TIMEOUT ) != HAL_OK ) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0 );
 c01f876:	f241 3288 	movw	r2, #5000	; 0x1388
 c01f87a:	a909      	add	r1, sp, #36	; 0x24
 c01f87c:	a806      	add	r0, sp, #24
 c01f87e:	f003 fab2 	bl	c022de6 <HAL_PKA_ModExp>
 c01f882:	2800      	cmp	r0, #0
 c01f884:	d1c4      	bne.n	c01f810 <mbedtls_rsa_public+0x74>
    HAL_PKA_ModExp_GetResult( &hpka, (uint8_t *)output );
 c01f886:	9901      	ldr	r1, [sp, #4]
 c01f888:	a806      	add	r0, sp, #24
 c01f88a:	f003 f9a6 	bl	c022bda <HAL_PKA_ModExp_GetResult>
    HAL_PKA_DeInit( &hpka );
 c01f88e:	a806      	add	r0, sp, #24
 c01f890:	f003 f916 	bl	c022ac0 <HAL_PKA_DeInit>
    __HAL_RCC_PKA_CLK_DISABLE();
 c01f894:	4a16      	ldr	r2, [pc, #88]	; (c01f8f0 <mbedtls_rsa_public+0x154>)
 c01f896:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 c01f898:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c01f89c:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (e_binary != NULL)
 c01f89e:	f1b8 0f00 	cmp.w	r8, #0
 c01f8a2:	d009      	beq.n	c01f8b8 <mbedtls_rsa_public+0x11c>
        mbedtls_platform_zeroize( e_binary, mbedtls_mpi_size( exponent ) );
 c01f8a4:	4638      	mov	r0, r7
 c01f8a6:	f005 fab7 	bl	c024e18 <mbedtls_mpi_size>
 c01f8aa:	4601      	mov	r1, r0
 c01f8ac:	4640      	mov	r0, r8
 c01f8ae:	f00a fcf7 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( e_binary );
 c01f8b2:	4640      	mov	r0, r8
 c01f8b4:	f00a fce4 	bl	c02a280 <mbedtls_free>
    if (n_binary != NULL)
 c01f8b8:	b14d      	cbz	r5, c01f8ce <mbedtls_rsa_public+0x132>
        mbedtls_platform_zeroize( n_binary, mbedtls_mpi_size( modulus ) );
 c01f8ba:	4648      	mov	r0, r9
 c01f8bc:	f005 faac 	bl	c024e18 <mbedtls_mpi_size>
 c01f8c0:	4601      	mov	r1, r0
 c01f8c2:	4628      	mov	r0, r5
 c01f8c4:	f00a fcec 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( n_binary );
 c01f8c8:	4628      	mov	r0, r5
 c01f8ca:	f00a fcd9 	bl	c02a280 <mbedtls_free>
    mbedtls_mpi_free( &T );
 c01f8ce:	a803      	add	r0, sp, #12
 c01f8d0:	f005 f958 	bl	c024b84 <mbedtls_mpi_free>
    if( ret != 0 )
 c01f8d4:	b10c      	cbz	r4, c01f8da <mbedtls_rsa_public+0x13e>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 c01f8d6:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
}
 c01f8da:	4620      	mov	r0, r4
 c01f8dc:	b00f      	add	sp, #60	; 0x3c
 c01f8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *n_binary = NULL;
 c01f8e2:	2500      	movs	r5, #0
 c01f8e4:	e7d3      	b.n	c01f88e <mbedtls_rsa_public+0xf2>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 c01f8e6:	f06f 0403 	mvn.w	r4, #3
 c01f8ea:	e7f0      	b.n	c01f8ce <mbedtls_rsa_public+0x132>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c01f8ec:	4c02      	ldr	r4, [pc, #8]	; (c01f8f8 <mbedtls_rsa_public+0x15c>)
 c01f8ee:	e7f4      	b.n	c01f8da <mbedtls_rsa_public+0x13e>
 c01f8f0:	50021000 	.word	0x50021000
 c01f8f4:	520c2000 	.word	0x520c2000
 c01f8f8:	ffffbf80 	.word	0xffffbf80

0c01f8fc <mbedtls_rsa_private>:
{
 c01f8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( rsa_check_context( ctx, 1             /* private key checks */,
 c01f900:	2101      	movs	r1, #1
{
 c01f902:	b0ab      	sub	sp, #172	; 0xac
 c01f904:	4605      	mov	r5, r0
 c01f906:	9304      	str	r3, [sp, #16]
    if( rsa_check_context( ctx, 1             /* private key checks */,
 c01f908:	f7ff fcd8 	bl	c01f2bc <rsa_check_context.isra.0>
 c01f90c:	4606      	mov	r6, r0
 c01f90e:	2800      	cmp	r0, #0
 c01f910:	f040 8149 	bne.w	c01fba6 <mbedtls_rsa_private+0x2aa>
    mbedtls_mpi_init( &T );
 c01f914:	a808      	add	r0, sp, #32
 c01f916:	f005 f92f 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &P1 );
 c01f91a:	a80b      	add	r0, sp, #44	; 0x2c
 c01f91c:	f005 f92c 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 c01f920:	a80e      	add	r0, sp, #56	; 0x38
 c01f922:	f005 f929 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 c01f926:	a811      	add	r0, sp, #68	; 0x44
 c01f928:	f005 f926 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 c01f92c:	a814      	add	r0, sp, #80	; 0x50
 c01f92e:	f005 f923 	bl	c024b78 <mbedtls_mpi_init>
 c01f932:	a817      	add	r0, sp, #92	; 0x5c
 c01f934:	f005 f920 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &I );
 c01f938:	a81a      	add	r0, sp, #104	; 0x68
 c01f93a:	f005 f91d 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 c01f93e:	a81d      	add	r0, sp, #116	; 0x74
 c01f940:	f005 f91a 	bl	c024b78 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 c01f944:	686a      	ldr	r2, [r5, #4]
 c01f946:	9904      	ldr	r1, [sp, #16]
 c01f948:	a808      	add	r0, sp, #32
 c01f94a:	f005 fa9f 	bl	c024e8c <mbedtls_mpi_read_binary>
 c01f94e:	4604      	mov	r4, r0
 c01f950:	2800      	cmp	r0, #0
 c01f952:	f040 80ea 	bne.w	c01fb2a <mbedtls_rsa_private+0x22e>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 c01f956:	f105 0108 	add.w	r1, r5, #8
 c01f95a:	a808      	add	r0, sp, #32
 c01f95c:	f005 fc50 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c01f960:	2800      	cmp	r0, #0
 c01f962:	f280 811d 	bge.w	c01fba0 <mbedtls_rsa_private+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 c01f966:	a908      	add	r1, sp, #32
 c01f968:	a81a      	add	r0, sp, #104	; 0x68
 c01f96a:	f005 f943 	bl	c024bf4 <mbedtls_mpi_copy>
 c01f96e:	4604      	mov	r4, r0
 c01f970:	2800      	cmp	r0, #0
 c01f972:	f040 80da 	bne.w	c01fb2a <mbedtls_rsa_private+0x22e>
    MBEDTLS_MPI_CHK( rsa_crt_pka_modexp( DP, DQ, &ctx->P, &ctx->Q, &ctx->QP, input, ctx->len, output) );
 c01f976:	686b      	ldr	r3, [r5, #4]
    PKA_RSACRTExpInTypeDef in = {0};
 c01f978:	4601      	mov	r1, r0
 c01f97a:	221c      	movs	r2, #28
    PKA_HandleTypeDef hpka = {0};
 c01f97c:	e9cd 0020 	strd	r0, r0, [sp, #128]	; 0x80
 c01f980:	9022      	str	r0, [sp, #136]	; 0x88
    mbedtls_mpi *DP = &ctx->DP;
 c01f982:	f105 0744 	add.w	r7, r5, #68	; 0x44
    PKA_RSACRTExpInTypeDef in = {0};
 c01f986:	a823      	add	r0, sp, #140	; 0x8c
    MBEDTLS_MPI_CHK( rsa_crt_pka_modexp( DP, DQ, &ctx->P, &ctx->Q, &ctx->QP, input, ctx->len, output) );
 c01f988:	9305      	str	r3, [sp, #20]
    PKA_RSACRTExpInTypeDef in = {0};
 c01f98a:	f7f8 f81c 	bl	c0179c6 <memset>
    dplen = mbedtls_mpi_size( dp );
 c01f98e:	4638      	mov	r0, r7
 c01f990:	f005 fa42 	bl	c024e18 <mbedtls_mpi_size>
    dp_binary = mbedtls_calloc( 1, dplen );
 c01f994:	4601      	mov	r1, r0
    dplen = mbedtls_mpi_size( dp );
 c01f996:	4683      	mov	fp, r0
    dp_binary = mbedtls_calloc( 1, dplen );
 c01f998:	2001      	movs	r0, #1
 c01f99a:	f00a fc6b 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK( ( dp_binary == NULL ) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0 );
 c01f99e:	4681      	mov	r9, r0
 c01f9a0:	2800      	cmp	r0, #0
 c01f9a2:	f000 80e1 	beq.w	c01fb68 <mbedtls_rsa_private+0x26c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( dp, dp_binary, dplen ) );
 c01f9a6:	4601      	mov	r1, r0
 c01f9a8:	465a      	mov	r2, fp
 c01f9aa:	4638      	mov	r0, r7
 c01f9ac:	f005 fadb 	bl	c024f66 <mbedtls_mpi_write_binary>
 c01f9b0:	4604      	mov	r4, r0
 c01f9b2:	2800      	cmp	r0, #0
 c01f9b4:	f040 80df 	bne.w	c01fb76 <mbedtls_rsa_private+0x27a>
    mbedtls_mpi *DQ = &ctx->DQ;
 c01f9b8:	f105 0450 	add.w	r4, r5, #80	; 0x50
    dqlen = mbedtls_mpi_size( dq );
 c01f9bc:	4620      	mov	r0, r4
 c01f9be:	f005 fa2b 	bl	c024e18 <mbedtls_mpi_size>
    dq_binary = mbedtls_calloc( 1, dqlen );
 c01f9c2:	4601      	mov	r1, r0
    dqlen = mbedtls_mpi_size( dq );
 c01f9c4:	4682      	mov	sl, r0
    dq_binary = mbedtls_calloc( 1, dqlen );
 c01f9c6:	2001      	movs	r0, #1
 c01f9c8:	f00a fc54 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK( ( dq_binary == NULL ) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0 );
 c01f9cc:	4680      	mov	r8, r0
 c01f9ce:	2800      	cmp	r0, #0
 c01f9d0:	f000 80d5 	beq.w	c01fb7e <mbedtls_rsa_private+0x282>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( dq, dq_binary, dqlen ) );
 c01f9d4:	4601      	mov	r1, r0
 c01f9d6:	4652      	mov	r2, sl
 c01f9d8:	4620      	mov	r0, r4
 c01f9da:	f005 fac4 	bl	c024f66 <mbedtls_mpi_write_binary>
 c01f9de:	4604      	mov	r4, r0
 c01f9e0:	2800      	cmp	r0, #0
 c01f9e2:	f040 80d0 	bne.w	c01fb86 <mbedtls_rsa_private+0x28a>
    MBEDTLS_MPI_CHK( rsa_crt_pka_modexp( DP, DQ, &ctx->P, &ctx->Q, &ctx->QP, input, ctx->len, output) );
 c01f9e6:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    plen = mbedtls_mpi_size( p );
 c01f9ea:	4620      	mov	r0, r4
 c01f9ec:	f005 fa14 	bl	c024e18 <mbedtls_mpi_size>
 c01f9f0:	9001      	str	r0, [sp, #4]
    p_binary = mbedtls_calloc( 1, plen );
 c01f9f2:	4601      	mov	r1, r0
 c01f9f4:	2001      	movs	r0, #1
 c01f9f6:	f00a fc3d 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK( ( p_binary == NULL ) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0 );
 c01f9fa:	4607      	mov	r7, r0
 c01f9fc:	2800      	cmp	r0, #0
 c01f9fe:	f000 80c5 	beq.w	c01fb8c <mbedtls_rsa_private+0x290>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( p, p_binary, plen ) );
 c01fa02:	4601      	mov	r1, r0
 c01fa04:	9a01      	ldr	r2, [sp, #4]
 c01fa06:	4620      	mov	r0, r4
 c01fa08:	f005 faad 	bl	c024f66 <mbedtls_mpi_write_binary>
 c01fa0c:	4604      	mov	r4, r0
 c01fa0e:	2800      	cmp	r0, #0
 c01fa10:	f040 80bf 	bne.w	c01fb92 <mbedtls_rsa_private+0x296>
    MBEDTLS_MPI_CHK( rsa_crt_pka_modexp( DP, DQ, &ctx->P, &ctx->Q, &ctx->QP, input, ctx->len, output) );
 c01fa14:	f105 0438 	add.w	r4, r5, #56	; 0x38
    qlen = mbedtls_mpi_size( q );
 c01fa18:	4620      	mov	r0, r4
 c01fa1a:	f005 f9fd 	bl	c024e18 <mbedtls_mpi_size>
 c01fa1e:	9002      	str	r0, [sp, #8]
    q_binary = mbedtls_calloc( 1, qlen );
 c01fa20:	4601      	mov	r1, r0
 c01fa22:	2001      	movs	r0, #1
 c01fa24:	f00a fc26 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK( ( q_binary == NULL ) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0 );
 c01fa28:	4606      	mov	r6, r0
 c01fa2a:	2800      	cmp	r0, #0
 c01fa2c:	f000 80b4 	beq.w	c01fb98 <mbedtls_rsa_private+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( q, q_binary, qlen ) );
 c01fa30:	4601      	mov	r1, r0
 c01fa32:	9a02      	ldr	r2, [sp, #8]
 c01fa34:	4620      	mov	r0, r4
 c01fa36:	f005 fa96 	bl	c024f66 <mbedtls_mpi_write_binary>
 c01fa3a:	4604      	mov	r4, r0
 c01fa3c:	2800      	cmp	r0, #0
 c01fa3e:	f040 80ad 	bne.w	c01fb9c <mbedtls_rsa_private+0x2a0>
    MBEDTLS_MPI_CHK( rsa_crt_pka_modexp( DP, DQ, &ctx->P, &ctx->Q, &ctx->QP, input, ctx->len, output) );
 c01fa42:	f105 045c 	add.w	r4, r5, #92	; 0x5c
    qplen = mbedtls_mpi_size( qp );
 c01fa46:	4620      	mov	r0, r4
 c01fa48:	f005 f9e6 	bl	c024e18 <mbedtls_mpi_size>
 c01fa4c:	9003      	str	r0, [sp, #12]
    qp_binary = mbedtls_calloc( 1, qplen );
 c01fa4e:	4601      	mov	r1, r0
 c01fa50:	2001      	movs	r0, #1
 c01fa52:	f00a fc0f 	bl	c02a274 <mbedtls_calloc>
    MBEDTLS_MPI_CHK( ( qp_binary == NULL ) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0 );
 c01fa56:	4605      	mov	r5, r0
 c01fa58:	2800      	cmp	r0, #0
 c01fa5a:	f000 8089 	beq.w	c01fb70 <mbedtls_rsa_private+0x274>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( qp, qp_binary, qplen ) );
 c01fa5e:	4601      	mov	r1, r0
 c01fa60:	9a03      	ldr	r2, [sp, #12]
 c01fa62:	4620      	mov	r0, r4
 c01fa64:	f005 fa7f 	bl	c024f66 <mbedtls_mpi_write_binary>
 c01fa68:	4604      	mov	r4, r0
 c01fa6a:	bb50      	cbnz	r0, c01fac2 <mbedtls_rsa_private+0x1c6>
    in.size    = input_len;
 c01fa6c:	9b05      	ldr	r3, [sp, #20]
    in.pOpQinv = qp_binary;
 c01fa6e:	e9cd 8525 	strd	r8, r5, [sp, #148]	; 0x94
    in.pOpDp   = dp_binary;
 c01fa72:	e9cd 3923 	strd	r3, r9, [sp, #140]	; 0x8c
    in.popA    = input;
 c01fa76:	9b04      	ldr	r3, [sp, #16]
    in.pPrimeQ = q_binary;
 c01fa78:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    in.popA    = input;
 c01fa7c:	9329      	str	r3, [sp, #164]	; 0xa4
    __HAL_RCC_PKA_CLK_ENABLE();
 c01fa7e:	4b4b      	ldr	r3, [pc, #300]	; (c01fbac <mbedtls_rsa_private+0x2b0>)
 c01fa80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01fa82:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 c01fa86:	64da      	str	r2, [r3, #76]	; 0x4c
 c01fa88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    hpka.Instance = PKA;
 c01fa8a:	4a49      	ldr	r2, [pc, #292]	; (c01fbb0 <mbedtls_rsa_private+0x2b4>)
    __HAL_RCC_PKA_CLK_ENABLE();
 c01fa8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c01fa90:	9307      	str	r3, [sp, #28]
 c01fa92:	9b07      	ldr	r3, [sp, #28]
    hpka.Instance = PKA;
 c01fa94:	ab2a      	add	r3, sp, #168	; 0xa8
 c01fa96:	f843 2d28 	str.w	r2, [r3, #-40]!
    MBEDTLS_MPI_CHK( ( HAL_PKA_Init( &hpka ) != HAL_OK ) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0 );
 c01fa9a:	4618      	mov	r0, r3
 c01fa9c:	9304      	str	r3, [sp, #16]
 c01fa9e:	f002 ffe6 	bl	c022a6e <HAL_PKA_Init>
 c01faa2:	2800      	cmp	r0, #0
 c01faa4:	d164      	bne.n	c01fb70 <mbedtls_rsa_private+0x274>
    MBEDTLS_MPI_CHK( ( HAL_PKA_RSACRTExp( &hpka, &in, ST_PKA_TIMEOUT ) != HAL_OK ) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0 );
 c01faa6:	9b04      	ldr	r3, [sp, #16]
 c01faa8:	f241 3288 	movw	r2, #5000	; 0x1388
 c01faac:	a923      	add	r1, sp, #140	; 0x8c
 c01faae:	4618      	mov	r0, r3
 c01fab0:	f003 fb33 	bl	c02311a <HAL_PKA_RSACRTExp>
 c01fab4:	2800      	cmp	r0, #0
 c01fab6:	d15b      	bne.n	c01fb70 <mbedtls_rsa_private+0x274>
    HAL_PKA_ModExp_GetResult( &hpka, (uint8_t *)output );
 c01fab8:	9b04      	ldr	r3, [sp, #16]
 c01faba:	9934      	ldr	r1, [sp, #208]	; 0xd0
 c01fabc:	4618      	mov	r0, r3
 c01fabe:	f003 f88c 	bl	c022bda <HAL_PKA_ModExp_GetResult>
    HAL_PKA_DeInit( &hpka );
 c01fac2:	a820      	add	r0, sp, #128	; 0x80
 c01fac4:	f002 fffc 	bl	c022ac0 <HAL_PKA_DeInit>
    __HAL_RCC_PKA_CLK_DISABLE();
 c01fac8:	4a38      	ldr	r2, [pc, #224]	; (c01fbac <mbedtls_rsa_private+0x2b0>)
 c01faca:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 c01facc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c01fad0:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (dp_binary != NULL)
 c01fad2:	f1b9 0f00 	cmp.w	r9, #0
 c01fad6:	d006      	beq.n	c01fae6 <mbedtls_rsa_private+0x1ea>
        mbedtls_platform_zeroize( dp_binary, dplen );
 c01fad8:	4648      	mov	r0, r9
 c01fada:	4659      	mov	r1, fp
 c01fadc:	f00a fbe0 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( dp_binary );
 c01fae0:	4648      	mov	r0, r9
 c01fae2:	f00a fbcd 	bl	c02a280 <mbedtls_free>
    if (dq_binary != NULL)
 c01fae6:	f1b8 0f00 	cmp.w	r8, #0
 c01faea:	d006      	beq.n	c01fafa <mbedtls_rsa_private+0x1fe>
        mbedtls_platform_zeroize( dq_binary, dqlen );
 c01faec:	4640      	mov	r0, r8
 c01faee:	4651      	mov	r1, sl
 c01faf0:	f00a fbd6 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( dq_binary );
 c01faf4:	4640      	mov	r0, r8
 c01faf6:	f00a fbc3 	bl	c02a280 <mbedtls_free>
    if (p_binary != NULL)
 c01fafa:	b137      	cbz	r7, c01fb0a <mbedtls_rsa_private+0x20e>
        mbedtls_platform_zeroize( p_binary, plen );
 c01fafc:	4638      	mov	r0, r7
 c01fafe:	9901      	ldr	r1, [sp, #4]
 c01fb00:	f00a fbce 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( p_binary );
 c01fb04:	4638      	mov	r0, r7
 c01fb06:	f00a fbbb 	bl	c02a280 <mbedtls_free>
    if (q_binary != NULL)
 c01fb0a:	b136      	cbz	r6, c01fb1a <mbedtls_rsa_private+0x21e>
        mbedtls_platform_zeroize( q_binary, qlen );
 c01fb0c:	4630      	mov	r0, r6
 c01fb0e:	9902      	ldr	r1, [sp, #8]
 c01fb10:	f00a fbc6 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( q_binary );
 c01fb14:	4630      	mov	r0, r6
 c01fb16:	f00a fbb3 	bl	c02a280 <mbedtls_free>
    if (qp_binary != NULL)
 c01fb1a:	b135      	cbz	r5, c01fb2a <mbedtls_rsa_private+0x22e>
        mbedtls_platform_zeroize( qp_binary, qplen );
 c01fb1c:	4628      	mov	r0, r5
 c01fb1e:	9903      	ldr	r1, [sp, #12]
 c01fb20:	f00a fbbe 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( qp_binary );
 c01fb24:	4628      	mov	r0, r5
 c01fb26:	f00a fbab 	bl	c02a280 <mbedtls_free>
    mbedtls_mpi_free( &P1 );
 c01fb2a:	a80b      	add	r0, sp, #44	; 0x2c
 c01fb2c:	f005 f82a 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 c01fb30:	a80e      	add	r0, sp, #56	; 0x38
 c01fb32:	f005 f827 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 c01fb36:	a811      	add	r0, sp, #68	; 0x44
 c01fb38:	f005 f824 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 c01fb3c:	a808      	add	r0, sp, #32
 c01fb3e:	f005 f821 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 c01fb42:	a814      	add	r0, sp, #80	; 0x50
 c01fb44:	f005 f81e 	bl	c024b84 <mbedtls_mpi_free>
 c01fb48:	a817      	add	r0, sp, #92	; 0x5c
 c01fb4a:	f005 f81b 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &C );
 c01fb4e:	a81d      	add	r0, sp, #116	; 0x74
 c01fb50:	f005 f818 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 c01fb54:	a81a      	add	r0, sp, #104	; 0x68
 c01fb56:	f005 f815 	bl	c024b84 <mbedtls_mpi_free>
    if( ret != 0 )
 c01fb5a:	b10c      	cbz	r4, c01fb60 <mbedtls_rsa_private+0x264>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 c01fb5c:	f5a4 4486 	sub.w	r4, r4, #17152	; 0x4300
}
 c01fb60:	4620      	mov	r0, r4
 c01fb62:	b02b      	add	sp, #172	; 0xac
 c01fb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *qp_binary = NULL;
 c01fb68:	4605      	mov	r5, r0
    uint8_t *q_binary = NULL;
 c01fb6a:	4606      	mov	r6, r0
    uint8_t *p_binary = NULL;
 c01fb6c:	4607      	mov	r7, r0
    uint8_t *dq_binary = NULL;
 c01fb6e:	4680      	mov	r8, r0
    MBEDTLS_MPI_CHK( ( HAL_PKA_RSACRTExp( &hpka, &in, ST_PKA_TIMEOUT ) != HAL_OK ) ? MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED : 0 );
 c01fb70:	f06f 046f 	mvn.w	r4, #111	; 0x6f
 c01fb74:	e7a5      	b.n	c01fac2 <mbedtls_rsa_private+0x1c6>
    uint8_t *qp_binary = NULL;
 c01fb76:	4635      	mov	r5, r6
    uint8_t *p_binary = NULL;
 c01fb78:	4637      	mov	r7, r6
    uint8_t *dq_binary = NULL;
 c01fb7a:	46b0      	mov	r8, r6
 c01fb7c:	e7a1      	b.n	c01fac2 <mbedtls_rsa_private+0x1c6>
    uint8_t *qp_binary = NULL;
 c01fb7e:	4605      	mov	r5, r0
    uint8_t *q_binary = NULL;
 c01fb80:	4606      	mov	r6, r0
    uint8_t *p_binary = NULL;
 c01fb82:	4607      	mov	r7, r0
 c01fb84:	e7f4      	b.n	c01fb70 <mbedtls_rsa_private+0x274>
    uint8_t *qp_binary = NULL;
 c01fb86:	4635      	mov	r5, r6
    uint8_t *p_binary = NULL;
 c01fb88:	4637      	mov	r7, r6
 c01fb8a:	e79a      	b.n	c01fac2 <mbedtls_rsa_private+0x1c6>
    uint8_t *qp_binary = NULL;
 c01fb8c:	4605      	mov	r5, r0
    uint8_t *q_binary = NULL;
 c01fb8e:	4606      	mov	r6, r0
 c01fb90:	e7ee      	b.n	c01fb70 <mbedtls_rsa_private+0x274>
    uint8_t *qp_binary = NULL;
 c01fb92:	2500      	movs	r5, #0
    uint8_t *q_binary = NULL;
 c01fb94:	462e      	mov	r6, r5
 c01fb96:	e794      	b.n	c01fac2 <mbedtls_rsa_private+0x1c6>
    uint8_t *qp_binary = NULL;
 c01fb98:	4605      	mov	r5, r0
 c01fb9a:	e7e9      	b.n	c01fb70 <mbedtls_rsa_private+0x274>
 c01fb9c:	2500      	movs	r5, #0
 c01fb9e:	e790      	b.n	c01fac2 <mbedtls_rsa_private+0x1c6>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 c01fba0:	f06f 0403 	mvn.w	r4, #3
 c01fba4:	e7c1      	b.n	c01fb2a <mbedtls_rsa_private+0x22e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c01fba6:	4c03      	ldr	r4, [pc, #12]	; (c01fbb4 <mbedtls_rsa_private+0x2b8>)
 c01fba8:	e7da      	b.n	c01fb60 <mbedtls_rsa_private+0x264>
 c01fbaa:	bf00      	nop
 c01fbac:	50021000 	.word	0x50021000
 c01fbb0:	520c2000 	.word	0x520c2000
 c01fbb4:	ffffbf80 	.word	0xffffbf80

0c01fbb8 <mbedtls_rsa_rsaes_oaep_encrypt>:
{
 c01fbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c01fbbc:	2b01      	cmp	r3, #1
{
 c01fbbe:	b08b      	sub	sp, #44	; 0x2c
 c01fbc0:	4680      	mov	r8, r0
 c01fbc2:	468a      	mov	sl, r1
 c01fbc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 c01fbc8:	9f16      	ldr	r7, [sp, #88]	; 0x58
 c01fbca:	9e18      	ldr	r6, [sp, #96]	; 0x60
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c01fbcc:	d108      	bne.n	c01fbe0 <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
 c01fbce:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 c01fbd2:	2b01      	cmp	r3, #1
 c01fbd4:	d004      	beq.n	c01fbe0 <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c01fbd6:	4b41      	ldr	r3, [pc, #260]	; (c01fcdc <mbedtls_rsa_rsaes_oaep_encrypt+0x124>)
}
 c01fbd8:	4618      	mov	r0, r3
 c01fbda:	b00b      	add	sp, #44	; 0x2c
 c01fbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
 c01fbe0:	f1ba 0f00 	cmp.w	sl, #0
 c01fbe4:	d0f7      	beq.n	c01fbd6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 c01fbe6:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 c01fbea:	f008 f94b 	bl	c027e84 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 c01fbee:	9003      	str	r0, [sp, #12]
 c01fbf0:	2800      	cmp	r0, #0
 c01fbf2:	d0f0      	beq.n	c01fbd6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    olen = ctx->len;
 c01fbf4:	f8d8 4004 	ldr.w	r4, [r8, #4]
    hlen = mbedtls_md_get_size( md_info );
 c01fbf8:	f008 fa78 	bl	c0280ec <mbedtls_md_get_size>
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 c01fbfc:	b203      	sxth	r3, r0
 c01fbfe:	005b      	lsls	r3, r3, #1
 c01fc00:	9302      	str	r3, [sp, #8]
 c01fc02:	9a02      	ldr	r2, [sp, #8]
 c01fc04:	1cbb      	adds	r3, r7, #2
 c01fc06:	4413      	add	r3, r2
 c01fc08:	42bb      	cmp	r3, r7
    hlen = mbedtls_md_get_size( md_info );
 c01fc0a:	4605      	mov	r5, r0
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 c01fc0c:	d3e3      	bcc.n	c01fbd6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
 c01fc0e:	42a3      	cmp	r3, r4
 c01fc10:	d8e1      	bhi.n	c01fbd6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    memset( output, 0, olen );
 c01fc12:	4622      	mov	r2, r4
 c01fc14:	2100      	movs	r1, #0
 c01fc16:	4630      	mov	r0, r6
 c01fc18:	f7f7 fed5 	bl	c0179c6 <memset>
    *p++ = 0;
 c01fc1c:	2300      	movs	r3, #0
 c01fc1e:	f106 0901 	add.w	r9, r6, #1
 c01fc22:	7033      	strb	r3, [r6, #0]
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 c01fc24:	462a      	mov	r2, r5
 c01fc26:	4649      	mov	r1, r9
 c01fc28:	9804      	ldr	r0, [sp, #16]
 c01fc2a:	47d0      	blx	sl
 c01fc2c:	b110      	cbz	r0, c01fc34 <mbedtls_rsa_rsaes_oaep_encrypt+0x7c>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 c01fc2e:	f5a0 4389 	sub.w	r3, r0, #17536	; 0x4480
 c01fc32:	e7d1      	b.n	c01fbd8 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    p += hlen;
 c01fc34:	eb09 0b05 	add.w	fp, r9, r5
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
 c01fc38:	465b      	mov	r3, fp
 c01fc3a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 c01fc3e:	9803      	ldr	r0, [sp, #12]
 c01fc40:	f008 f98a 	bl	c027f58 <mbedtls_md>
 c01fc44:	4603      	mov	r3, r0
 c01fc46:	2800      	cmp	r0, #0
 c01fc48:	d1c6      	bne.n	c01fbd8 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    p += olen - 2 * hlen - 2 - ilen;
 c01fc4a:	1be3      	subs	r3, r4, r7
 c01fc4c:	9a02      	ldr	r2, [sp, #8]
 c01fc4e:	3b02      	subs	r3, #2
 c01fc50:	442b      	add	r3, r5
 c01fc52:	1a9b      	subs	r3, r3, r2
    *p++ = 1;
 c01fc54:	2201      	movs	r2, #1
    p += olen - 2 * hlen - 2 - ilen;
 c01fc56:	eb0b 0003 	add.w	r0, fp, r3
    *p++ = 1;
 c01fc5a:	f80b 2003 	strb.w	r2, [fp, r3]
    if( ilen != 0 )
 c01fc5e:	b127      	cbz	r7, c01fc6a <mbedtls_rsa_rsaes_oaep_encrypt+0xb2>
        memcpy( p, input, ilen );
 c01fc60:	463a      	mov	r2, r7
 c01fc62:	9917      	ldr	r1, [sp, #92]	; 0x5c
 c01fc64:	3001      	adds	r0, #1
 c01fc66:	f7f7 fe8a 	bl	c01797e <memcpy>
    mbedtls_md_init( &md_ctx );
 c01fc6a:	af07      	add	r7, sp, #28
 c01fc6c:	4638      	mov	r0, r7
 c01fc6e:	f008 f915 	bl	c027e9c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 c01fc72:	2200      	movs	r2, #0
 c01fc74:	9903      	ldr	r1, [sp, #12]
 c01fc76:	4638      	mov	r0, r7
 c01fc78:	f008 f930 	bl	c027edc <mbedtls_md_setup>
 c01fc7c:	4603      	mov	r3, r0
 c01fc7e:	b9a8      	cbnz	r0, c01fcac <mbedtls_rsa_rsaes_oaep_encrypt+0xf4>
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 c01fc80:	f105 0b01 	add.w	fp, r5, #1
 c01fc84:	3c01      	subs	r4, #1
 c01fc86:	44b3      	add	fp, r6
 c01fc88:	1b64      	subs	r4, r4, r5
 c01fc8a:	462b      	mov	r3, r5
 c01fc8c:	9700      	str	r7, [sp, #0]
 c01fc8e:	464a      	mov	r2, r9
 c01fc90:	4621      	mov	r1, r4
 c01fc92:	4658      	mov	r0, fp
 c01fc94:	f7ff fa2f 	bl	c01f0f6 <mgf_mask>
 c01fc98:	4603      	mov	r3, r0
 c01fc9a:	b938      	cbnz	r0, c01fcac <mbedtls_rsa_rsaes_oaep_encrypt+0xf4>
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 c01fc9c:	4623      	mov	r3, r4
 c01fc9e:	9700      	str	r7, [sp, #0]
 c01fca0:	465a      	mov	r2, fp
 c01fca2:	4629      	mov	r1, r5
 c01fca4:	4648      	mov	r0, r9
 c01fca6:	f7ff fa26 	bl	c01f0f6 <mgf_mask>
 c01fcaa:	4603      	mov	r3, r0
    mbedtls_md_free( &md_ctx );
 c01fcac:	a807      	add	r0, sp, #28
 c01fcae:	9302      	str	r3, [sp, #8]
 c01fcb0:	f008 f8f9 	bl	c027ea6 <mbedtls_md_free>
    if( ret != 0 )
 c01fcb4:	9b02      	ldr	r3, [sp, #8]
 c01fcb6:	2b00      	cmp	r3, #0
 c01fcb8:	d18e      	bne.n	c01fbd8 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 c01fcba:	9b05      	ldr	r3, [sp, #20]
 c01fcbc:	b933      	cbnz	r3, c01fccc <mbedtls_rsa_rsaes_oaep_encrypt+0x114>
 c01fcbe:	4632      	mov	r2, r6
 c01fcc0:	4631      	mov	r1, r6
 c01fcc2:	4640      	mov	r0, r8
 c01fcc4:	f7ff fd6a 	bl	c01f79c <mbedtls_rsa_public>
 c01fcc8:	4603      	mov	r3, r0
 c01fcca:	e785      	b.n	c01fbd8 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
 c01fccc:	9600      	str	r6, [sp, #0]
 c01fcce:	4633      	mov	r3, r6
 c01fcd0:	9a04      	ldr	r2, [sp, #16]
 c01fcd2:	4651      	mov	r1, sl
 c01fcd4:	4640      	mov	r0, r8
 c01fcd6:	f7ff fe11 	bl	c01f8fc <mbedtls_rsa_private>
 c01fcda:	e7f5      	b.n	c01fcc8 <mbedtls_rsa_rsaes_oaep_encrypt+0x110>
 c01fcdc:	ffffbf80 	.word	0xffffbf80

0c01fce0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
{
 c01fce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01fce4:	4699      	mov	r9, r3
 c01fce6:	e9dd 630c 	ldrd	r6, r3, [sp, #48]	; 0x30
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c01fcea:	f1b9 0f01 	cmp.w	r9, #1
{
 c01fcee:	4607      	mov	r7, r0
 c01fcf0:	4688      	mov	r8, r1
 c01fcf2:	4693      	mov	fp, r2
 c01fcf4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c01fcf6:	d106      	bne.n	c01fd06 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
 c01fcf8:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 c01fcfc:	b11a      	cbz	r2, c01fd06 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c01fcfe:	482d      	ldr	r0, [pc, #180]	; (c01fdb4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd4>)
}
 c01fd00:	b003      	add	sp, #12
 c01fd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ilen + 11 < ilen || olen < ilen + 11 )
 c01fd06:	f116 0f0c 	cmn.w	r6, #12
    olen = ctx->len;
 c01fd0a:	687c      	ldr	r4, [r7, #4]
    if( ilen + 11 < ilen || olen < ilen + 11 )
 c01fd0c:	d8f7      	bhi.n	c01fcfe <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
 c01fd0e:	f106 020b 	add.w	r2, r6, #11
 c01fd12:	42a2      	cmp	r2, r4
 c01fd14:	d8f3      	bhi.n	c01fcfe <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
    *p++ = 0;
 c01fd16:	2100      	movs	r1, #0
    nb_pad = olen - 3 - ilen;
 c01fd18:	1ba4      	subs	r4, r4, r6
 c01fd1a:	1ee2      	subs	r2, r4, #3
    *p++ = 0;
 c01fd1c:	7029      	strb	r1, [r5, #0]
    if( mode == MBEDTLS_RSA_PUBLIC )
 c01fd1e:	f1b9 0f00 	cmp.w	r9, #0
 c01fd22:	d12f      	bne.n	c01fd84 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa4>
        if( f_rng == NULL )
 c01fd24:	f1b8 0f00 	cmp.w	r8, #0
 c01fd28:	d0e9      	beq.n	c01fcfe <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
        *p++ = MBEDTLS_RSA_CRYPT;
 c01fd2a:	2102      	movs	r1, #2
 c01fd2c:	1cac      	adds	r4, r5, #2
 c01fd2e:	18a2      	adds	r2, r4, r2
 c01fd30:	7069      	strb	r1, [r5, #1]
 c01fd32:	9200      	str	r2, [sp, #0]
        while( nb_pad-- > 0 )
 c01fd34:	9a00      	ldr	r2, [sp, #0]
 c01fd36:	4294      	cmp	r4, r2
 c01fd38:	d112      	bne.n	c01fd60 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x80>
    *p++ = 0;
 c01fd3a:	2200      	movs	r2, #0
 c01fd3c:	7022      	strb	r2, [r4, #0]
    if( ilen != 0 )
 c01fd3e:	b126      	cbz	r6, c01fd4a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x6a>
        memcpy( p, input, ilen );
 c01fd40:	4632      	mov	r2, r6
 c01fd42:	4619      	mov	r1, r3
 c01fd44:	1c60      	adds	r0, r4, #1
 c01fd46:	f7f7 fe1a 	bl	c01797e <memcpy>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 c01fd4a:	f1b9 0f00 	cmp.w	r9, #0
 c01fd4e:	d123      	bne.n	c01fd98 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xb8>
 c01fd50:	462a      	mov	r2, r5
 c01fd52:	4629      	mov	r1, r5
 c01fd54:	4638      	mov	r0, r7
}
 c01fd56:	b003      	add	sp, #12
 c01fd58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 c01fd5c:	f7ff bd1e 	b.w	c01f79c <mbedtls_rsa_public>
 c01fd60:	f04f 0a64 	mov.w	sl, #100	; 0x64
                ret = f_rng( p_rng, p, 1 );
 c01fd64:	2201      	movs	r2, #1
 c01fd66:	4621      	mov	r1, r4
 c01fd68:	4658      	mov	r0, fp
 c01fd6a:	9301      	str	r3, [sp, #4]
 c01fd6c:	47c0      	blx	r8
            } while( *p == 0 && --rng_dl && ret == 0 );
 c01fd6e:	7822      	ldrb	r2, [r4, #0]
 c01fd70:	9b01      	ldr	r3, [sp, #4]
 c01fd72:	b9da      	cbnz	r2, c01fdac <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xcc>
 c01fd74:	f1ba 0a01 	subs.w	sl, sl, #1
 c01fd78:	d001      	beq.n	c01fd7e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x9e>
 c01fd7a:	2800      	cmp	r0, #0
 c01fd7c:	d0f2      	beq.n	c01fd64 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x84>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 c01fd7e:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 c01fd82:	e7bd      	b.n	c01fd00 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x20>
        *p++ = MBEDTLS_RSA_SIGN;
 c01fd84:	2101      	movs	r1, #1
 c01fd86:	7069      	strb	r1, [r5, #1]
 c01fd88:	1ca9      	adds	r1, r5, #2
 c01fd8a:	188c      	adds	r4, r1, r2
            *p++ = 0xFF;
 c01fd8c:	22ff      	movs	r2, #255	; 0xff
        while( nb_pad-- > 0 )
 c01fd8e:	428c      	cmp	r4, r1
 c01fd90:	d0d3      	beq.n	c01fd3a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5a>
            *p++ = 0xFF;
 c01fd92:	f801 2b01 	strb.w	r2, [r1], #1
 c01fd96:	e7fa      	b.n	c01fd8e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xae>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 c01fd98:	462b      	mov	r3, r5
 c01fd9a:	465a      	mov	r2, fp
 c01fd9c:	4641      	mov	r1, r8
 c01fd9e:	4638      	mov	r0, r7
 c01fda0:	950c      	str	r5, [sp, #48]	; 0x30
}
 c01fda2:	b003      	add	sp, #12
 c01fda4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 c01fda8:	f7ff bda8 	b.w	c01f8fc <mbedtls_rsa_private>
            if( rng_dl == 0 || ret != 0 )
 c01fdac:	2800      	cmp	r0, #0
 c01fdae:	d1e6      	bne.n	c01fd7e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x9e>
            p++;
 c01fdb0:	3401      	adds	r4, #1
 c01fdb2:	e7bf      	b.n	c01fd34 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x54>
 c01fdb4:	ffffbf80 	.word	0xffffbf80

0c01fdb8 <mbedtls_rsa_pkcs1_encrypt>:
{
 c01fdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 c01fdba:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 c01fdbe:	b087      	sub	sp, #28
 c01fdc0:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 c01fdc4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    switch( ctx->padding )
 c01fdc6:	b11c      	cbz	r4, c01fdd0 <mbedtls_rsa_pkcs1_encrypt+0x18>
 c01fdc8:	2c01      	cmp	r4, #1
 c01fdca:	d006      	beq.n	c01fdda <mbedtls_rsa_pkcs1_encrypt+0x22>
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 c01fdcc:	4808      	ldr	r0, [pc, #32]	; (c01fdf0 <mbedtls_rsa_pkcs1_encrypt+0x38>)
 c01fdce:	e00c      	b.n	c01fdea <mbedtls_rsa_pkcs1_encrypt+0x32>
}
 c01fdd0:	b007      	add	sp, #28
 c01fdd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
 c01fdd6:	f7ff bf83 	b.w	c01fce0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 c01fdda:	2400      	movs	r4, #0
 c01fddc:	e9cd 6703 	strd	r6, r7, [sp, #12]
 c01fde0:	9502      	str	r5, [sp, #8]
 c01fde2:	e9cd 4400 	strd	r4, r4, [sp]
 c01fde6:	f7ff fee7 	bl	c01fbb8 <mbedtls_rsa_rsaes_oaep_encrypt>
}
 c01fdea:	b007      	add	sp, #28
 c01fdec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c01fdee:	bf00      	nop
 c01fdf0:	ffffbf00 	.word	0xffffbf00

0c01fdf4 <mbedtls_rsa_rsaes_oaep_decrypt>:
{
 c01fdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c01fdf8:	2b01      	cmp	r3, #1
{
 c01fdfa:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 c01fdfe:	4607      	mov	r7, r0
 c01fe00:	468a      	mov	sl, r1
 c01fe02:	9203      	str	r2, [sp, #12]
 c01fe04:	469b      	mov	fp, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c01fe06:	d10a      	bne.n	c01fe1e <mbedtls_rsa_rsaes_oaep_decrypt+0x2a>
 c01fe08:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 c01fe0c:	2b01      	cmp	r3, #1
 c01fe0e:	d006      	beq.n	c01fe1e <mbedtls_rsa_rsaes_oaep_decrypt+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c01fe10:	f8df a178 	ldr.w	sl, [pc, #376]	; c01ff8c <mbedtls_rsa_rsaes_oaep_decrypt+0x198>
}
 c01fe14:	4650      	mov	r0, sl
 c01fe16:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 c01fe1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ilen = ctx->len;
 c01fe1e:	687c      	ldr	r4, [r7, #4]
    if( ilen < 16 || ilen > sizeof( buf ) )
 c01fe20:	f1a4 0310 	sub.w	r3, r4, #16
 c01fe24:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 c01fe28:	d8f2      	bhi.n	c01fe10 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 c01fe2a:	f897 00a8 	ldrb.w	r0, [r7, #168]	; 0xa8
 c01fe2e:	f008 f829 	bl	c027e84 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 c01fe32:	9002      	str	r0, [sp, #8]
 c01fe34:	2800      	cmp	r0, #0
 c01fe36:	d0eb      	beq.n	c01fe10 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
    hlen = mbedtls_md_get_size( md_info );
 c01fe38:	f008 f958 	bl	c0280ec <mbedtls_md_get_size>
    if( 2 * hlen + 2 > ilen )
 c01fe3c:	f100 0801 	add.w	r8, r0, #1
 c01fe40:	ea4f 0648 	mov.w	r6, r8, lsl #1
 c01fe44:	42a6      	cmp	r6, r4
    hlen = mbedtls_md_get_size( md_info );
 c01fe46:	4605      	mov	r5, r0
    if( 2 * hlen + 2 > ilen )
 c01fe48:	d8e2      	bhi.n	c01fe10 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
 c01fe4a:	f10d 0960 	add.w	r9, sp, #96	; 0x60
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 c01fe4e:	f1bb 0f00 	cmp.w	fp, #0
 c01fe52:	d11f      	bne.n	c01fe94 <mbedtls_rsa_rsaes_oaep_decrypt+0xa0>
 c01fe54:	464a      	mov	r2, r9
 c01fe56:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
 c01fe5a:	4638      	mov	r0, r7
 c01fe5c:	f7ff fc9e 	bl	c01f79c <mbedtls_rsa_public>
 c01fe60:	4682      	mov	sl, r0
    if( ret != 0 )
 c01fe62:	b968      	cbnz	r0, c01fe80 <mbedtls_rsa_rsaes_oaep_decrypt+0x8c>
    mbedtls_md_init( &md_ctx );
 c01fe64:	af05      	add	r7, sp, #20
 c01fe66:	4638      	mov	r0, r7
 c01fe68:	f008 f818 	bl	c027e9c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 c01fe6c:	4652      	mov	r2, sl
 c01fe6e:	9902      	ldr	r1, [sp, #8]
 c01fe70:	4638      	mov	r0, r7
 c01fe72:	f008 f833 	bl	c027edc <mbedtls_md_setup>
 c01fe76:	4682      	mov	sl, r0
 c01fe78:	b1b0      	cbz	r0, c01fea8 <mbedtls_rsa_rsaes_oaep_decrypt+0xb4>
        mbedtls_md_free( &md_ctx );
 c01fe7a:	4638      	mov	r0, r7
        mbedtls_md_free( &md_ctx );
 c01fe7c:	f008 f813 	bl	c027ea6 <mbedtls_md_free>
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 c01fe80:	a818      	add	r0, sp, #96	; 0x60
 c01fe82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 c01fe86:	f00a fa0b 	bl	c02a2a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( lhash, sizeof( lhash ) );
 c01fe8a:	2140      	movs	r1, #64	; 0x40
 c01fe8c:	a808      	add	r0, sp, #32
 c01fe8e:	f00a fa07 	bl	c02a2a0 <mbedtls_platform_zeroize>
    return( ret );
 c01fe92:	e7bf      	b.n	c01fe14 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 c01fe94:	f8cd 9000 	str.w	r9, [sp]
 c01fe98:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
 c01fe9c:	9a03      	ldr	r2, [sp, #12]
 c01fe9e:	4651      	mov	r1, sl
 c01fea0:	4638      	mov	r0, r7
 c01fea2:	f7ff fd2b 	bl	c01f8fc <mbedtls_rsa_private>
 c01fea6:	e7db      	b.n	c01fe60 <mbedtls_rsa_rsaes_oaep_decrypt+0x6c>
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 c01fea8:	f104 3bff 	add.w	fp, r4, #4294967295
 c01feac:	44c8      	add	r8, r9
 c01feae:	ebab 0b05 	sub.w	fp, fp, r5
 c01feb2:	9700      	str	r7, [sp, #0]
 c01feb4:	465b      	mov	r3, fp
 c01feb6:	4642      	mov	r2, r8
 c01feb8:	4629      	mov	r1, r5
 c01feba:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 c01febe:	f7ff f91a 	bl	c01f0f6 <mgf_mask>
 c01fec2:	4682      	mov	sl, r0
 c01fec4:	b948      	cbnz	r0, c01feda <mbedtls_rsa_rsaes_oaep_decrypt+0xe6>
                          &md_ctx ) ) != 0 ||
 c01fec6:	9700      	str	r7, [sp, #0]
 c01fec8:	462b      	mov	r3, r5
 c01feca:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 c01fece:	4659      	mov	r1, fp
 c01fed0:	4640      	mov	r0, r8
 c01fed2:	f7ff f910 	bl	c01f0f6 <mgf_mask>
 c01fed6:	4682      	mov	sl, r0
 c01fed8:	b108      	cbz	r0, c01fede <mbedtls_rsa_rsaes_oaep_decrypt+0xea>
        mbedtls_md_free( &md_ctx );
 c01feda:	a805      	add	r0, sp, #20
 c01fedc:	e7ce      	b.n	c01fe7c <mbedtls_rsa_rsaes_oaep_decrypt+0x88>
    mbedtls_md_free( &md_ctx );
 c01fede:	4638      	mov	r0, r7
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 c01fee0:	af08      	add	r7, sp, #32
    mbedtls_md_free( &md_ctx );
 c01fee2:	f007 ffe0 	bl	c027ea6 <mbedtls_md_free>
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 c01fee6:	463b      	mov	r3, r7
 c01fee8:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 c01feec:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
 c01fef0:	9802      	ldr	r0, [sp, #8]
 c01fef2:	f008 f831 	bl	c027f58 <mbedtls_md>
 c01fef6:	4682      	mov	sl, r0
 c01fef8:	2800      	cmp	r0, #0
 c01fefa:	d1c1      	bne.n	c01fe80 <mbedtls_rsa_rsaes_oaep_decrypt+0x8c>
    p += hlen; /* Skip seed */
 c01fefc:	f10d 0361 	add.w	r3, sp, #97	; 0x61
    bad |= *p++; /* First byte must be 0 */
 c01ff00:	f899 2000 	ldrb.w	r2, [r9]
    p += hlen; /* Skip seed */
 c01ff04:	1959      	adds	r1, r3, r5
    for( i = 0; i < hlen; i++ )
 c01ff06:	42a8      	cmp	r0, r5
 c01ff08:	fa4f fc82 	sxtb.w	ip, r2
 c01ff0c:	d322      	bcc.n	c01ff54 <mbedtls_rsa_rsaes_oaep_decrypt+0x160>
    pad_done = 0;
 c01ff0e:	2200      	movs	r2, #0
 c01ff10:	440d      	add	r5, r1
 c01ff12:	462f      	mov	r7, r5
    pad_len = 0;
 c01ff14:	4611      	mov	r1, r2
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 c01ff16:	1ba6      	subs	r6, r4, r6
 c01ff18:	442e      	add	r6, r5
 c01ff1a:	42be      	cmp	r6, r7
 c01ff1c:	d124      	bne.n	c01ff68 <mbedtls_rsa_rsaes_oaep_decrypt+0x174>
    bad |= *p++ ^ 0x01;
 c01ff1e:	5c6a      	ldrb	r2, [r5, r1]
 c01ff20:	f082 0201 	eor.w	r2, r2, #1
 c01ff24:	ea4c 0202 	orr.w	r2, ip, r2
    if( bad != 0 )
 c01ff28:	f012 0fff 	tst.w	r2, #255	; 0xff
 c01ff2c:	d127      	bne.n	c01ff7e <mbedtls_rsa_rsaes_oaep_decrypt+0x18a>
    bad |= *p++ ^ 0x01;
 c01ff2e:	3101      	adds	r1, #1
 c01ff30:	4429      	add	r1, r5
    if( ilen - ( p - buf ) > output_max_len )
 c01ff32:	aa18      	add	r2, sp, #96	; 0x60
 c01ff34:	1a8a      	subs	r2, r1, r2
 c01ff36:	f8dd 049c 	ldr.w	r0, [sp, #1180]	; 0x49c
 c01ff3a:	1aa2      	subs	r2, r4, r2
 c01ff3c:	4282      	cmp	r2, r0
 c01ff3e:	d821      	bhi.n	c01ff84 <mbedtls_rsa_rsaes_oaep_decrypt+0x190>
    *olen = ilen - (p - buf);
 c01ff40:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
 c01ff44:	6002      	str	r2, [r0, #0]
    if( *olen != 0 )
 c01ff46:	2a00      	cmp	r2, #0
 c01ff48:	d09a      	beq.n	c01fe80 <mbedtls_rsa_rsaes_oaep_decrypt+0x8c>
        memcpy( output, p, *olen );
 c01ff4a:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
 c01ff4e:	f7f7 fd16 	bl	c01797e <memcpy>
 c01ff52:	e795      	b.n	c01fe80 <mbedtls_rsa_rsaes_oaep_decrypt+0x8c>
        bad |= lhash[i] ^ *p++;
 c01ff54:	5c3a      	ldrb	r2, [r7, r0]
 c01ff56:	f811 e000 	ldrb.w	lr, [r1, r0]
    for( i = 0; i < hlen; i++ )
 c01ff5a:	3001      	adds	r0, #1
        bad |= lhash[i] ^ *p++;
 c01ff5c:	ea82 020e 	eor.w	r2, r2, lr
 c01ff60:	ea4c 0202 	orr.w	r2, ip, r2
 c01ff64:	b2d2      	uxtb	r2, r2
 c01ff66:	e7ce      	b.n	c01ff06 <mbedtls_rsa_rsaes_oaep_decrypt+0x112>
        pad_done |= p[i];
 c01ff68:	f817 0b01 	ldrb.w	r0, [r7], #1
 c01ff6c:	4302      	orrs	r2, r0
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 c01ff6e:	4250      	negs	r0, r2
 c01ff70:	4310      	orrs	r0, r2
 c01ff72:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 c01ff76:	f080 0001 	eor.w	r0, r0, #1
 c01ff7a:	4401      	add	r1, r0
 c01ff7c:	e7cd      	b.n	c01ff1a <mbedtls_rsa_rsaes_oaep_decrypt+0x126>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 c01ff7e:	f8df a010 	ldr.w	sl, [pc, #16]	; c01ff90 <mbedtls_rsa_rsaes_oaep_decrypt+0x19c>
 c01ff82:	e77d      	b.n	c01fe80 <mbedtls_rsa_rsaes_oaep_decrypt+0x8c>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 c01ff84:	f8df a00c 	ldr.w	sl, [pc, #12]	; c01ff94 <mbedtls_rsa_rsaes_oaep_decrypt+0x1a0>
 c01ff88:	e77a      	b.n	c01fe80 <mbedtls_rsa_rsaes_oaep_decrypt+0x8c>
 c01ff8a:	bf00      	nop
 c01ff8c:	ffffbf80 	.word	0xffffbf80
 c01ff90:	ffffbf00 	.word	0xffffbf00
 c01ff94:	ffffbc00 	.word	0xffffbc00

0c01ff98 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
{
 c01ff98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c01ff9c:	2b01      	cmp	r3, #1
{
 c01ff9e:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 c01ffa2:	4698      	mov	r8, r3
 c01ffa4:	f8dd 743c 	ldr.w	r7, [sp, #1084]	; 0x43c
    ilen = ctx->len;
 c01ffa8:	6845      	ldr	r5, [r0, #4]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c01ffaa:	d104      	bne.n	c01ffb6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1e>
 c01ffac:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 c01ffb0:	2b00      	cmp	r3, #0
 c01ffb2:	f040 80c7 	bne.w	c020144 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1ac>
    if( ilen < 16 || ilen > sizeof( buf ) )
 c01ffb6:	f1a5 0310 	sub.w	r3, r5, #16
 c01ffba:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 c01ffbe:	f200 80c1 	bhi.w	c020144 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1ac>
 c01ffc2:	ae02      	add	r6, sp, #8
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 c01ffc4:	f1b8 0f00 	cmp.w	r8, #0
 c01ffc8:	d127      	bne.n	c02001a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x82>
 c01ffca:	4632      	mov	r2, r6
 c01ffcc:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
 c01ffd0:	f7ff fbe4 	bl	c01f79c <mbedtls_rsa_public>
    if( ret != 0 )
 c01ffd4:	4604      	mov	r4, r0
 c01ffd6:	2800      	cmp	r0, #0
 c01ffd8:	f040 809d 	bne.w	c020116 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x17e>
    bad |= buf[0];
 c01ffdc:	7830      	ldrb	r0, [r6, #0]
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
 c01ffde:	7873      	ldrb	r3, [r6, #1]
        for( i = 2; i < ilen; i++ )
 c01ffe0:	2402      	movs	r4, #2
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
 c01ffe2:	f083 0301 	eor.w	r3, r3, #1
 c01ffe6:	4303      	orrs	r3, r0
    unsigned char pad_done = 0;
 c01ffe8:	2000      	movs	r0, #0
    size_t pad_count = 0;
 c01ffea:	4601      	mov	r1, r0
            pad_done |= if_int( buf[i], 0, 1 );
 c01ffec:	5d32      	ldrb	r2, [r6, r4]
        for( i = 2; i < ilen; i++ )
 c01ffee:	3401      	adds	r4, #1
            pad_done |= if_int( buf[i], 0, 1 );
 c01fff0:	2a00      	cmp	r2, #0
 c01fff2:	bf08      	it	eq
 c01fff4:	f040 0001 	orreq.w	r0, r0, #1
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 c01fff8:	43d2      	mvns	r2, r2
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 c01fffa:	f1c0 0c00 	rsb	ip, r0, #0
 c01fffe:	ea4c 0c00 	orr.w	ip, ip, r0
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 c020002:	b2d2      	uxtb	r2, r2
    return( ( mask & if1 ) | (~mask & if0 ) );
 c020004:	ea22 72ec 	bic.w	r2, r2, ip, asr #31
            pad_count += if_int( pad_done, 0, 1 );
 c020008:	f1bc 0f00 	cmp.w	ip, #0
 c02000c:	bfa8      	it	ge
 c02000e:	3101      	addge	r1, #1
        for( i = 2; i < ilen; i++ )
 c020010:	42a5      	cmp	r5, r4
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 c020012:	ea43 0302 	orr.w	r3, r3, r2
        for( i = 2; i < ilen; i++ )
 c020016:	d1e9      	bne.n	c01ffec <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x54>
 c020018:	e026      	b.n	c020068 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd0>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 c02001a:	9600      	str	r6, [sp, #0]
 c02001c:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
 c020020:	f7ff fc6c 	bl	c01f8fc <mbedtls_rsa_private>
    if( ret != 0 )
 c020024:	4604      	mov	r4, r0
 c020026:	2800      	cmp	r0, #0
 c020028:	d175      	bne.n	c020116 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x17e>
    if( mode == MBEDTLS_RSA_PRIVATE )
 c02002a:	f1b8 0f01 	cmp.w	r8, #1
    bad |= buf[0];
 c02002e:	7830      	ldrb	r0, [r6, #0]
    if( mode == MBEDTLS_RSA_PRIVATE )
 c020030:	d1d5      	bne.n	c01ffde <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x46>
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
 c020032:	7873      	ldrb	r3, [r6, #1]
    size_t pad_count = 0;
 c020034:	4621      	mov	r1, r4
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
 c020036:	f083 0302 	eor.w	r3, r3, #2
 c02003a:	4303      	orrs	r3, r0
    unsigned char pad_done = 0;
 c02003c:	4620      	mov	r0, r4
        for( i = 2; i < ilen; i++ )
 c02003e:	2402      	movs	r4, #2
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
 c020040:	5d32      	ldrb	r2, [r6, r4]
        for( i = 2; i < ilen; i++ )
 c020042:	3401      	adds	r4, #1
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
 c020044:	f1c2 0c00 	rsb	ip, r2, #0
 c020048:	ea42 020c 	orr.w	r2, r2, ip
 c02004c:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 c020050:	f082 0201 	eor.w	r2, r2, #1
 c020054:	4310      	orrs	r0, r2
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 c020056:	4242      	negs	r2, r0
 c020058:	4302      	orrs	r2, r0
 c02005a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 c02005e:	f082 0201 	eor.w	r2, r2, #1
        for( i = 2; i < ilen; i++ )
 c020062:	42a5      	cmp	r5, r4
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 c020064:	4411      	add	r1, r2
        for( i = 2; i < ilen; i++ )
 c020066:	d1eb      	bne.n	c020040 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa8>
    plaintext_max_size = ( output_max_len > ilen - 11 ?
 c020068:	f1a5 020b 	sub.w	r2, r5, #11
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 c02006c:	f1a1 0408 	sub.w	r4, r1, #8
    plaintext_max_size = ( output_max_len > ilen - 11 ?
 c020070:	42ba      	cmp	r2, r7
 c020072:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31
 c020076:	bf28      	it	cs
 c020078:	463a      	movcs	r2, r7
    bad |= size_greater_than( 8, pad_count );
 c02007a:	2800      	cmp	r0, #0
 c02007c:	bf14      	ite	ne
 c02007e:	4618      	movne	r0, r3
 c020080:	f043 0001 	orreq.w	r0, r3, #1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 c020084:	4244      	negs	r4, r0
 c020086:	4304      	orrs	r4, r0
                             (unsigned) ( ilen - pad_count - 3 ) );
 c020088:	f1a5 0803 	sub.w	r8, r5, #3
 c02008c:	eba8 0801 	sub.w	r8, r8, r1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 c020090:	17e4      	asrs	r4, r4, #31
    return( ( mask & if1 ) | (~mask & if0 ) );
 c020092:	2c00      	cmp	r4, #0
 c020094:	bf18      	it	ne
 c020096:	4690      	movne	r8, r2
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 c020098:	eba2 0308 	sub.w	r3, r2, r8
 c02009c:	0fdb      	lsrs	r3, r3, #31
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 c02009e:	4259      	negs	r1, r3
    bad = all_or_nothing_int( bad | output_too_large );
 c0200a0:	4303      	orrs	r3, r0
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 c0200a2:	4258      	negs	r0, r3
 c0200a4:	4318      	orrs	r0, r3
 c0200a6:	f401 4c88 	and.w	ip, r1, #17408	; 0x4400
    return( ( mask & if1 ) | (~mask & if0 ) );
 c0200aa:	2c00      	cmp	r4, #0
 c0200ac:	bf0c      	ite	eq
 c0200ae:	4664      	moveq	r4, ip
 c0200b0:	f44f 4482 	movne.w	r4, #16640	; 0x4100
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 c0200b4:	17c0      	asrs	r0, r0, #31
        buf[i] &= ~bad;
 c0200b6:	43c0      	mvns	r0, r0
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
 c0200b8:	4264      	negs	r4, r4
 c0200ba:	f10d 0313 	add.w	r3, sp, #19
        buf[i] &= ~bad;
 c0200be:	f893 c000 	ldrb.w	ip, [r3]
 c0200c2:	ea0c 0c00 	and.w	ip, ip, r0
 c0200c6:	f803 cb01 	strb.w	ip, [r3], #1
    for( i = 11; i < ilen; i++ )
 c0200ca:	eba3 0c06 	sub.w	ip, r3, r6
 c0200ce:	4565      	cmp	r5, ip
 c0200d0:	d8f5      	bhi.n	c0200be <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x126>
    return( ( mask & if1 ) | (~mask & if0 ) );
 c0200d2:	2900      	cmp	r1, #0
 c0200d4:	bf18      	it	ne
 c0200d6:	4690      	movne	r8, r2
    mem_move_to_left( buf + ilen - plaintext_max_size,
 c0200d8:	1aa9      	subs	r1, r5, r2
 c0200da:	4431      	add	r1, r6
    if( total == 0 )
 c0200dc:	b192      	cbz	r2, c020104 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x16c>
    for( i = 0; i < total; i++ )
 c0200de:	2000      	movs	r0, #0
        for( n = 0; n < total - 1; n++ )
 c0200e0:	f102 39ff 	add.w	r9, r2, #4294967295
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 c0200e4:	eb01 0e09 	add.w	lr, r1, r9
        for( n = 0; n < total - 1; n++ )
 c0200e8:	2300      	movs	r3, #0
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 c0200ea:	eba0 0508 	sub.w	r5, r0, r8
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 c0200ee:	17ed      	asrs	r5, r5, #31
        for( n = 0; n < total - 1; n++ )
 c0200f0:	454b      	cmp	r3, r9
 c0200f2:	d31a      	bcc.n	c02012a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x192>
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 c0200f4:	f89e 3000 	ldrb.w	r3, [lr]
    for( i = 0; i < total; i++ )
 c0200f8:	3001      	adds	r0, #1
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 c0200fa:	401d      	ands	r5, r3
    for( i = 0; i < total; i++ )
 c0200fc:	4282      	cmp	r2, r0
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 c0200fe:	f88e 5000 	strb.w	r5, [lr]
    for( i = 0; i < total; i++ )
 c020102:	d1f1      	bne.n	c0200e8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x150>
    if( output_max_len != 0 )
 c020104:	b11f      	cbz	r7, c02010e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x176>
        memcpy( output, buf + ilen - plaintext_max_size, plaintext_max_size );
 c020106:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
 c02010a:	f7f7 fc38 	bl	c01797e <memcpy>
    *olen = plaintext_size;
 c02010e:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
 c020112:	f8c3 8000 	str.w	r8, [r3]
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 c020116:	f44f 6180 	mov.w	r1, #1024	; 0x400
 c02011a:	4630      	mov	r0, r6
 c02011c:	f00a f8c0 	bl	c02a2a0 <mbedtls_platform_zeroize>
}
 c020120:	4620      	mov	r0, r4
 c020122:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 c020126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            unsigned char current = buf[n];
 c02012a:	f813 c001 	ldrb.w	ip, [r3, r1]
 c02012e:	eb03 0a01 	add.w	sl, r3, r1
            unsigned char next = buf[n+1];
 c020132:	3301      	adds	r3, #1
 c020134:	f813 b001 	ldrb.w	fp, [r3, r1]
            buf[n] = if_int( no_op, current, next );
 c020138:	2d00      	cmp	r5, #0
 c02013a:	bf08      	it	eq
 c02013c:	46dc      	moveq	ip, fp
 c02013e:	f88a c000 	strb.w	ip, [sl]
 c020142:	e7d5      	b.n	c0200f0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x158>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c020144:	4c00      	ldr	r4, [pc, #0]	; (c020148 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1b0>)
 c020146:	e7eb      	b.n	c020120 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>
 c020148:	ffffbf80 	.word	0xffffbf80

0c02014c <mbedtls_rsa_pkcs1_decrypt>:
{
 c02014c:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 c02014e:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 c020152:	b087      	sub	sp, #28
 c020154:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 c020158:	e9dd 7c0e 	ldrd	r7, ip, [sp, #56]	; 0x38
    switch( ctx->padding )
 c02015c:	b11c      	cbz	r4, c020166 <mbedtls_rsa_pkcs1_decrypt+0x1a>
 c02015e:	2c01      	cmp	r4, #1
 c020160:	d006      	beq.n	c020170 <mbedtls_rsa_pkcs1_decrypt+0x24>
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 c020162:	4809      	ldr	r0, [pc, #36]	; (c020188 <mbedtls_rsa_pkcs1_decrypt+0x3c>)
 c020164:	e00d      	b.n	c020182 <mbedtls_rsa_pkcs1_decrypt+0x36>
}
 c020166:	b007      	add	sp, #28
 c020168:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
 c02016c:	f7ff bf14 	b.w	c01ff98 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 c020170:	2400      	movs	r4, #0
 c020172:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 c020176:	e9cd 5602 	strd	r5, r6, [sp, #8]
 c02017a:	e9cd 4400 	strd	r4, r4, [sp]
 c02017e:	f7ff fe39 	bl	c01fdf4 <mbedtls_rsa_rsaes_oaep_decrypt>
}
 c020182:	b007      	add	sp, #28
 c020184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c020186:	bf00      	nop
 c020188:	ffffbf00 	.word	0xffffbf00

0c02018c <mbedtls_rsa_rsassa_pss_sign>:
{
 c02018c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c020190:	2b01      	cmp	r3, #1
{
 c020192:	b09f      	sub	sp, #124	; 0x7c
 c020194:	4681      	mov	r9, r0
 c020196:	9103      	str	r1, [sp, #12]
 c020198:	e9cd 2306 	strd	r2, r3, [sp, #24]
 c02019c:	f89d 00a0 	ldrb.w	r0, [sp, #160]	; 0xa0
 c0201a0:	9d2b      	ldr	r5, [sp, #172]	; 0xac
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c0201a2:	d109      	bne.n	c0201b8 <mbedtls_rsa_rsassa_pss_sign+0x2c>
 c0201a4:	f8d9 30a4 	ldr.w	r3, [r9, #164]	; 0xa4
 c0201a8:	2b01      	cmp	r3, #1
 c0201aa:	d005      	beq.n	c0201b8 <mbedtls_rsa_rsassa_pss_sign+0x2c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c0201ac:	f8df b174 	ldr.w	fp, [pc, #372]	; c020324 <mbedtls_rsa_rsassa_pss_sign+0x198>
}
 c0201b0:	4658      	mov	r0, fp
 c0201b2:	b01f      	add	sp, #124	; 0x7c
 c0201b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
 c0201b8:	9b03      	ldr	r3, [sp, #12]
 c0201ba:	2b00      	cmp	r3, #0
 c0201bc:	d0f6      	beq.n	c0201ac <mbedtls_rsa_rsassa_pss_sign+0x20>
    olen = ctx->len;
 c0201be:	f8d9 4004 	ldr.w	r4, [r9, #4]
    if( md_alg != MBEDTLS_MD_NONE )
 c0201c2:	b130      	cbz	r0, c0201d2 <mbedtls_rsa_rsassa_pss_sign+0x46>
        md_info = mbedtls_md_info_from_type( md_alg );
 c0201c4:	f007 fe5e 	bl	c027e84 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 c0201c8:	2800      	cmp	r0, #0
 c0201ca:	d0ef      	beq.n	c0201ac <mbedtls_rsa_rsassa_pss_sign+0x20>
        hashlen = mbedtls_md_get_size( md_info );
 c0201cc:	f007 ff8e 	bl	c0280ec <mbedtls_md_get_size>
 c0201d0:	9029      	str	r0, [sp, #164]	; 0xa4
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 c0201d2:	f899 00a8 	ldrb.w	r0, [r9, #168]	; 0xa8
 c0201d6:	f007 fe55 	bl	c027e84 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 c0201da:	4683      	mov	fp, r0
 c0201dc:	2800      	cmp	r0, #0
 c0201de:	d0e5      	beq.n	c0201ac <mbedtls_rsa_rsassa_pss_sign+0x20>
    hlen = mbedtls_md_get_size( md_info );
 c0201e0:	f007 ff84 	bl	c0280ec <mbedtls_md_get_size>
 c0201e4:	b203      	sxth	r3, r0
 c0201e6:	005b      	lsls	r3, r3, #1
    if( olen < hlen + min_slen + 2 )
 c0201e8:	429c      	cmp	r4, r3
    hlen = mbedtls_md_get_size( md_info );
 c0201ea:	4682      	mov	sl, r0
    if( olen < hlen + min_slen + 2 )
 c0201ec:	d3de      	bcc.n	c0201ac <mbedtls_rsa_rsassa_pss_sign+0x20>
    else if( olen >= hlen + hlen + 2 )
 c0201ee:	3302      	adds	r3, #2
 c0201f0:	42a3      	cmp	r3, r4
        slen = hlen;
 c0201f2:	bf92      	itee	ls
 c0201f4:	4680      	movls	r8, r0
        slen = olen - hlen - 2;
 c0201f6:	f1a4 0802 	subhi.w	r8, r4, #2
 c0201fa:	eba8 0800 	subhi.w	r8, r8, r0
    memset( sig, 0, olen );
 c0201fe:	4622      	mov	r2, r4
 c020200:	2100      	movs	r1, #0
 c020202:	4628      	mov	r0, r5
 c020204:	f7f7 fbdf 	bl	c0179c6 <memset>
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 c020208:	4642      	mov	r2, r8
 c02020a:	a90e      	add	r1, sp, #56	; 0x38
 c02020c:	9806      	ldr	r0, [sp, #24]
 c02020e:	9b03      	ldr	r3, [sp, #12]
 c020210:	4798      	blx	r3
 c020212:	b110      	cbz	r0, c02021a <mbedtls_rsa_rsassa_pss_sign+0x8e>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 c020214:	f5a0 4b89 	sub.w	fp, r0, #17536	; 0x4480
 c020218:	e7ca      	b.n	c0201b0 <mbedtls_rsa_rsassa_pss_sign+0x24>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c02021a:	f109 0308 	add.w	r3, r9, #8
 c02021e:	9009      	str	r0, [sp, #36]	; 0x24
 c020220:	4618      	mov	r0, r3
 c020222:	9304      	str	r3, [sp, #16]
 c020224:	f004 fdd8 	bl	c024dd8 <mbedtls_mpi_bitlen>
    *p++ = 0x01;
 c020228:	2101      	movs	r1, #1
    p += olen - hlen - slen - 2;
 c02022a:	eba4 030a 	sub.w	r3, r4, sl
 c02022e:	1e9a      	subs	r2, r3, #2
 c020230:	eba2 0208 	sub.w	r2, r2, r8
 c020234:	18ae      	adds	r6, r5, r2
    *p++ = 0x01;
 c020236:	3601      	adds	r6, #1
 c020238:	54a9      	strb	r1, [r5, r2]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c02023a:	9008      	str	r0, [sp, #32]
    memcpy( p, salt, slen );
 c02023c:	4642      	mov	r2, r8
 c02023e:	a90e      	add	r1, sp, #56	; 0x38
    mbedtls_md_init( &md_ctx );
 c020240:	af0b      	add	r7, sp, #44	; 0x2c
    memcpy( p, salt, slen );
 c020242:	4630      	mov	r0, r6
    p += olen - hlen - slen - 2;
 c020244:	9305      	str	r3, [sp, #20]
    memcpy( p, salt, slen );
 c020246:	f7f7 fb9a 	bl	c01797e <memcpy>
    mbedtls_md_init( &md_ctx );
 c02024a:	4638      	mov	r0, r7
 c02024c:	f007 fe26 	bl	c027e9c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 c020250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c020252:	4659      	mov	r1, fp
 c020254:	461a      	mov	r2, r3
 c020256:	4638      	mov	r0, r7
 c020258:	f007 fe40 	bl	c027edc <mbedtls_md_setup>
 c02025c:	4683      	mov	fp, r0
 c02025e:	2800      	cmp	r0, #0
 c020260:	d147      	bne.n	c0202f2 <mbedtls_rsa_rsassa_pss_sign+0x166>
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 c020262:	4638      	mov	r0, r7
 c020264:	f007 fe5a 	bl	c027f1c <mbedtls_md_starts>
 c020268:	4683      	mov	fp, r0
 c02026a:	2800      	cmp	r0, #0
 c02026c:	d141      	bne.n	c0202f2 <mbedtls_rsa_rsassa_pss_sign+0x166>
    p += slen;
 c02026e:	4446      	add	r6, r8
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
 c020270:	2208      	movs	r2, #8
 c020272:	4631      	mov	r1, r6
 c020274:	4638      	mov	r0, r7
 c020276:	f007 fe5b 	bl	c027f30 <mbedtls_md_update>
 c02027a:	4683      	mov	fp, r0
 c02027c:	2800      	cmp	r0, #0
 c02027e:	d138      	bne.n	c0202f2 <mbedtls_rsa_rsassa_pss_sign+0x166>
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
 c020280:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 c020284:	4638      	mov	r0, r7
 c020286:	f007 fe53 	bl	c027f30 <mbedtls_md_update>
 c02028a:	4683      	mov	fp, r0
 c02028c:	bb88      	cbnz	r0, c0202f2 <mbedtls_rsa_rsassa_pss_sign+0x166>
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
 c02028e:	4642      	mov	r2, r8
 c020290:	a90e      	add	r1, sp, #56	; 0x38
 c020292:	4638      	mov	r0, r7
 c020294:	f007 fe4c 	bl	c027f30 <mbedtls_md_update>
 c020298:	4683      	mov	fp, r0
 c02029a:	bb50      	cbnz	r0, c0202f2 <mbedtls_rsa_rsassa_pss_sign+0x166>
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
 c02029c:	4631      	mov	r1, r6
 c02029e:	4638      	mov	r0, r7
 c0202a0:	f007 fe50 	bl	c027f44 <mbedtls_md_finish>
 c0202a4:	4683      	mov	fp, r0
 c0202a6:	bb20      	cbnz	r0, c0202f2 <mbedtls_rsa_rsassa_pss_sign+0x166>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c0202a8:	9b08      	ldr	r3, [sp, #32]
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 c0202aa:	9700      	str	r7, [sp, #0]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c0202ac:	3b01      	subs	r3, #1
    if( msb % 8 == 0 )
 c0202ae:	f013 0f07 	tst.w	r3, #7
 c0202b2:	bf0c      	ite	eq
 c0202b4:	2001      	moveq	r0, #1
 c0202b6:	2000      	movne	r0, #0
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 c0202b8:	9b05      	ldr	r3, [sp, #20]
 c0202ba:	4632      	mov	r2, r6
 c0202bc:	1e59      	subs	r1, r3, #1
 c0202be:	1a09      	subs	r1, r1, r0
 c0202c0:	4653      	mov	r3, sl
 c0202c2:	4428      	add	r0, r5
 c0202c4:	f7fe ff17 	bl	c01f0f6 <mgf_mask>
 c0202c8:	4683      	mov	fp, r0
 c0202ca:	b990      	cbnz	r0, c0202f2 <mbedtls_rsa_rsassa_pss_sign+0x166>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c0202cc:	9804      	ldr	r0, [sp, #16]
 c0202ce:	f004 fd83 	bl	c024dd8 <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 c0202d2:	ebc0 00c4 	rsb	r0, r0, r4, lsl #3
 c0202d6:	24ff      	movs	r4, #255	; 0xff
    *p++ = 0xBC;
 c0202d8:	23bc      	movs	r3, #188	; 0xbc
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 c0202da:	3001      	adds	r0, #1
 c0202dc:	fa44 f000 	asr.w	r0, r4, r0
 c0202e0:	782c      	ldrb	r4, [r5, #0]
    mbedtls_platform_zeroize( salt, sizeof( salt ) );
 c0202e2:	2140      	movs	r1, #64	; 0x40
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 c0202e4:	4020      	ands	r0, r4
 c0202e6:	7028      	strb	r0, [r5, #0]
    *p++ = 0xBC;
 c0202e8:	f806 300a 	strb.w	r3, [r6, sl]
    mbedtls_platform_zeroize( salt, sizeof( salt ) );
 c0202ec:	a80e      	add	r0, sp, #56	; 0x38
 c0202ee:	f009 ffd7 	bl	c02a2a0 <mbedtls_platform_zeroize>
    mbedtls_md_free( &md_ctx );
 c0202f2:	a80b      	add	r0, sp, #44	; 0x2c
 c0202f4:	f007 fdd7 	bl	c027ea6 <mbedtls_md_free>
    if( ret != 0 )
 c0202f8:	f1bb 0f00 	cmp.w	fp, #0
 c0202fc:	f47f af58 	bne.w	c0201b0 <mbedtls_rsa_rsassa_pss_sign+0x24>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 c020300:	9b07      	ldr	r3, [sp, #28]
 c020302:	b933      	cbnz	r3, c020312 <mbedtls_rsa_rsassa_pss_sign+0x186>
 c020304:	462a      	mov	r2, r5
 c020306:	4629      	mov	r1, r5
 c020308:	4648      	mov	r0, r9
 c02030a:	f7ff fa47 	bl	c01f79c <mbedtls_rsa_public>
 c02030e:	4683      	mov	fp, r0
 c020310:	e74e      	b.n	c0201b0 <mbedtls_rsa_rsassa_pss_sign+0x24>
 c020312:	9500      	str	r5, [sp, #0]
 c020314:	462b      	mov	r3, r5
 c020316:	9a06      	ldr	r2, [sp, #24]
 c020318:	9903      	ldr	r1, [sp, #12]
 c02031a:	4648      	mov	r0, r9
 c02031c:	f7ff faee 	bl	c01f8fc <mbedtls_rsa_private>
 c020320:	e7f5      	b.n	c02030e <mbedtls_rsa_rsassa_pss_sign+0x182>
 c020322:	bf00      	nop
 c020324:	ffffbf80 	.word	0xffffbf80

0c020328 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 c020328:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c02032c:	2b01      	cmp	r3, #1
{
 c02032e:	4605      	mov	r5, r0
 c020330:	4689      	mov	r9, r1
 c020332:	4692      	mov	sl, r2
 c020334:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 c020338:	461e      	mov	r6, r3
 c02033a:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 c02033e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c020340:	d103      	bne.n	c02034a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x22>
 c020342:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 c020346:	2b00      	cmp	r3, #0
 c020348:	d14d      	bne.n	c0203e6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbe>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 c02034a:	9700      	str	r7, [sp, #0]
 c02034c:	686b      	ldr	r3, [r5, #4]
 c02034e:	f7fe ff29 	bl	c01f1a4 <rsa_rsassa_pkcs1_v15_encode>
 c020352:	4604      	mov	r4, r0
 c020354:	bbd0      	cbnz	r0, c0203cc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 c020356:	b93e      	cbnz	r6, c020368 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x40>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 c020358:	463a      	mov	r2, r7
 c02035a:	4639      	mov	r1, r7
 c02035c:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 c02035e:	b002      	add	sp, #8
 c020360:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 c020364:	f7ff ba1a 	b.w	c01f79c <mbedtls_rsa_public>
    sig_try = mbedtls_calloc( 1, ctx->len );
 c020368:	6869      	ldr	r1, [r5, #4]
 c02036a:	2001      	movs	r0, #1
 c02036c:	f009 ff82 	bl	c02a274 <mbedtls_calloc>
    if( sig_try == NULL )
 c020370:	4606      	mov	r6, r0
 c020372:	b140      	cbz	r0, c020386 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x5e>
    verif = mbedtls_calloc( 1, ctx->len );
 c020374:	6869      	ldr	r1, [r5, #4]
 c020376:	2001      	movs	r0, #1
 c020378:	f009 ff7c 	bl	c02a274 <mbedtls_calloc>
    if( verif == NULL )
 c02037c:	4680      	mov	r8, r0
 c02037e:	b928      	cbnz	r0, c02038c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x64>
        mbedtls_free( sig_try );
 c020380:	4630      	mov	r0, r6
 c020382:	f009 ff7d 	bl	c02a280 <mbedtls_free>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 c020386:	f06f 040f 	mvn.w	r4, #15
 c02038a:	e01f      	b.n	c0203cc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 c02038c:	9600      	str	r6, [sp, #0]
 c02038e:	463b      	mov	r3, r7
 c020390:	4652      	mov	r2, sl
 c020392:	4649      	mov	r1, r9
 c020394:	4628      	mov	r0, r5
 c020396:	f7ff fab1 	bl	c01f8fc <mbedtls_rsa_private>
 c02039a:	4604      	mov	r4, r0
 c02039c:	b980      	cbnz	r0, c0203c0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x98>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 c02039e:	4642      	mov	r2, r8
 c0203a0:	4631      	mov	r1, r6
 c0203a2:	4628      	mov	r0, r5
 c0203a4:	f7ff f9fa 	bl	c01f79c <mbedtls_rsa_public>
 c0203a8:	4604      	mov	r4, r0
 c0203aa:	b948      	cbnz	r0, c0203c0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x98>
    unsigned char diff = 0;
 c0203ac:	4601      	mov	r1, r0
    for( i = 0; i < n; i++ )
 c0203ae:	4603      	mov	r3, r0
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 c0203b0:	686a      	ldr	r2, [r5, #4]
    for( i = 0; i < n; i++ )
 c0203b2:	429a      	cmp	r2, r3
 c0203b4:	d10e      	bne.n	c0203d4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xac>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 c0203b6:	b9a1      	cbnz	r1, c0203e2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xba>
    memcpy( sig, sig_try, ctx->len );
 c0203b8:	4631      	mov	r1, r6
 c0203ba:	4638      	mov	r0, r7
 c0203bc:	f7f7 fadf 	bl	c01797e <memcpy>
    mbedtls_free( sig_try );
 c0203c0:	4630      	mov	r0, r6
 c0203c2:	f009 ff5d 	bl	c02a280 <mbedtls_free>
    mbedtls_free( verif );
 c0203c6:	4640      	mov	r0, r8
 c0203c8:	f009 ff5a 	bl	c02a280 <mbedtls_free>
}
 c0203cc:	4620      	mov	r0, r4
 c0203ce:	b002      	add	sp, #8
 c0203d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        diff |= A[i] ^ B[i];
 c0203d4:	f818 0003 	ldrb.w	r0, [r8, r3]
 c0203d8:	5cfd      	ldrb	r5, [r7, r3]
    for( i = 0; i < n; i++ )
 c0203da:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 c0203dc:	4068      	eors	r0, r5
 c0203de:	4301      	orrs	r1, r0
 c0203e0:	e7e7      	b.n	c0203b2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x8a>
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 c0203e2:	4c02      	ldr	r4, [pc, #8]	; (c0203ec <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc4>)
 c0203e4:	e7ec      	b.n	c0203c0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x98>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c0203e6:	4c02      	ldr	r4, [pc, #8]	; (c0203f0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
 c0203e8:	e7f0      	b.n	c0203cc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>
 c0203ea:	bf00      	nop
 c0203ec:	ffffbd00 	.word	0xffffbd00
 c0203f0:	ffffbf80 	.word	0xffffbf80

0c0203f4 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 c0203f4:	b430      	push	{r4, r5}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
 c0203f6:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
 c0203fa:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
 c0203fe:	b125      	cbz	r5, c02040a <mbedtls_rsa_pkcs1_sign+0x16>
 c020400:	2d01      	cmp	r5, #1
 c020402:	d006      	beq.n	c020412 <mbedtls_rsa_pkcs1_sign+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 c020404:	bc30      	pop	{r4, r5}
 c020406:	4805      	ldr	r0, [pc, #20]	; (c02041c <mbedtls_rsa_pkcs1_sign+0x28>)
 c020408:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 c02040a:	9402      	str	r4, [sp, #8]
}
 c02040c:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 c02040e:	f7ff bf8b 	b.w	c020328 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
 c020412:	9402      	str	r4, [sp, #8]
}
 c020414:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
 c020416:	f7ff beb9 	b.w	c02018c <mbedtls_rsa_rsassa_pss_sign>
 c02041a:	bf00      	nop
 c02041c:	ffffbf00 	.word	0xffffbf00

0c020420 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 c020420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c020424:	2b01      	cmp	r3, #1
{
 c020426:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 c02042a:	4605      	mov	r5, r0
 c02042c:	f89d 7490 	ldrb.w	r7, [sp, #1168]	; 0x490
 c020430:	f8dd b4a0 	ldr.w	fp, [sp, #1184]	; 0x4a0
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c020434:	d109      	bne.n	c02044a <mbedtls_rsa_rsassa_pss_verify_ext+0x2a>
 c020436:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 c02043a:	2801      	cmp	r0, #1
 c02043c:	d005      	beq.n	c02044a <mbedtls_rsa_rsassa_pss_verify_ext+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c02043e:	4b61      	ldr	r3, [pc, #388]	; (c0205c4 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
 c020440:	4618      	mov	r0, r3
 c020442:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 c020446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    siglen = ctx->len;
 c02044a:	686c      	ldr	r4, [r5, #4]
    if( siglen < 16 || siglen > sizeof( buf ) )
 c02044c:	f1a4 0010 	sub.w	r0, r4, #16
 c020450:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
 c020454:	d8f3      	bhi.n	c02043e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
 c020456:	ae1a      	add	r6, sp, #104	; 0x68
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 c020458:	2b00      	cmp	r3, #0
 c02045a:	f040 80a7 	bne.w	c0205ac <mbedtls_rsa_rsassa_pss_verify_ext+0x18c>
 c02045e:	4632      	mov	r2, r6
 c020460:	f8dd 14a4 	ldr.w	r1, [sp, #1188]	; 0x4a4
 c020464:	4628      	mov	r0, r5
 c020466:	f7ff f999 	bl	c01f79c <mbedtls_rsa_public>
 c02046a:	4603      	mov	r3, r0
    if( ret != 0 )
 c02046c:	2800      	cmp	r0, #0
 c02046e:	d1e7      	bne.n	c020440 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
    if( buf[siglen - 1] != 0xBC )
 c020470:	f104 38ff 	add.w	r8, r4, #4294967295
 c020474:	f816 3008 	ldrb.w	r3, [r6, r8]
 c020478:	2bbc      	cmp	r3, #188	; 0xbc
 c02047a:	f040 80a0 	bne.w	c0205be <mbedtls_rsa_rsassa_pss_verify_ext+0x19e>
    if( md_alg != MBEDTLS_MD_NONE )
 c02047e:	b147      	cbz	r7, c020492 <mbedtls_rsa_rsassa_pss_verify_ext+0x72>
        md_info = mbedtls_md_info_from_type( md_alg );
 c020480:	4638      	mov	r0, r7
 c020482:	f007 fcff 	bl	c027e84 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 c020486:	2800      	cmp	r0, #0
 c020488:	d0d9      	beq.n	c02043e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        hashlen = mbedtls_md_get_size( md_info );
 c02048a:	f007 fe2f 	bl	c0280ec <mbedtls_md_get_size>
 c02048e:	f8cd 0494 	str.w	r0, [sp, #1172]	; 0x494
    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 c020492:	f89d 049c 	ldrb.w	r0, [sp, #1180]	; 0x49c
 c020496:	f007 fcf5 	bl	c027e84 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 c02049a:	4681      	mov	r9, r0
 c02049c:	2800      	cmp	r0, #0
 c02049e:	d0ce      	beq.n	c02043e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    hlen = mbedtls_md_get_size( md_info );
 c0204a0:	f007 fe24 	bl	c0280ec <mbedtls_md_get_size>
    memset( zeros, 0, 8 );
 c0204a4:	2300      	movs	r3, #0
    hlen = mbedtls_md_get_size( md_info );
 c0204a6:	4682      	mov	sl, r0
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c0204a8:	f105 0008 	add.w	r0, r5, #8
    memset( zeros, 0, 8 );
 c0204ac:	e9cd 3305 	strd	r3, r3, [sp, #20]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c0204b0:	f004 fc92 	bl	c024dd8 <mbedtls_mpi_bitlen>
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 c0204b4:	f06f 0307 	mvn.w	r3, #7
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c0204b8:	1e47      	subs	r7, r0, #1
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 c0204ba:	fb03 7304 	mla	r3, r3, r4, r7
 c0204be:	7832      	ldrb	r2, [r6, #0]
 c0204c0:	3308      	adds	r3, #8
 c0204c2:	fa52 f303 	asrs.w	r3, r2, r3
 c0204c6:	d1ba      	bne.n	c02043e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    if( msb % 8 == 0 )
 c0204c8:	077b      	lsls	r3, r7, #29
 c0204ca:	bf18      	it	ne
 c0204cc:	46a0      	movne	r8, r4
    if( siglen < hlen + 2 )
 c0204ce:	f10a 0302 	add.w	r3, sl, #2
    p = buf;
 c0204d2:	bf14      	ite	ne
 c0204d4:	4635      	movne	r5, r6
        p++;
 c0204d6:	f10d 0569 	addeq.w	r5, sp, #105	; 0x69
    if( siglen < hlen + 2 )
 c0204da:	4543      	cmp	r3, r8
 c0204dc:	d8af      	bhi.n	c02043e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    mbedtls_md_init( &md_ctx );
 c0204de:	ac07      	add	r4, sp, #28
 c0204e0:	4620      	mov	r0, r4
 c0204e2:	f007 fcdb 	bl	c027e9c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 c0204e6:	2200      	movs	r2, #0
 c0204e8:	4649      	mov	r1, r9
 c0204ea:	4620      	mov	r0, r4
 c0204ec:	f007 fcf6 	bl	c027edc <mbedtls_md_setup>
 c0204f0:	4603      	mov	r3, r0
 c0204f2:	2800      	cmp	r0, #0
 c0204f4:	d154      	bne.n	c0205a0 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    hash_start = p + siglen - hlen - 1;
 c0204f6:	ea6f 010a 	mvn.w	r1, sl
 c0204fa:	4441      	add	r1, r8
 c0204fc:	eb05 0901 	add.w	r9, r5, r1
    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
 c020500:	4653      	mov	r3, sl
 c020502:	9400      	str	r4, [sp, #0]
 c020504:	464a      	mov	r2, r9
 c020506:	4628      	mov	r0, r5
 c020508:	f7fe fdf5 	bl	c01f0f6 <mgf_mask>
    if( ret != 0 )
 c02050c:	4603      	mov	r3, r0
 c02050e:	2800      	cmp	r0, #0
 c020510:	d146      	bne.n	c0205a0 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 c020512:	ebc7 08c8 	rsb	r8, r7, r8, lsl #3
 c020516:	27ff      	movs	r7, #255	; 0xff
 c020518:	fa47 f708 	asr.w	r7, r7, r8
 c02051c:	f896 8000 	ldrb.w	r8, [r6]
    while( p < hash_start - 1 && *p == 0 )
 c020520:	f109 32ff 	add.w	r2, r9, #4294967295
    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 c020524:	ea07 0708 	and.w	r7, r7, r8
 c020528:	7037      	strb	r7, [r6, #0]
 c02052a:	f815 3b01 	ldrb.w	r3, [r5], #1
    while( p < hash_start - 1 && *p == 0 )
 c02052e:	1e69      	subs	r1, r5, #1
 c020530:	428a      	cmp	r2, r1
 c020532:	d901      	bls.n	c020538 <mbedtls_rsa_rsassa_pss_verify_ext+0x118>
 c020534:	2b00      	cmp	r3, #0
 c020536:	d0f8      	beq.n	c02052a <mbedtls_rsa_rsassa_pss_verify_ext+0x10a>
    if( *p++ != 0x01 )
 c020538:	2b01      	cmp	r3, #1
 c02053a:	d13e      	bne.n	c0205ba <mbedtls_rsa_rsassa_pss_verify_ext+0x19a>
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 c02053c:	f1bb 3fff 	cmp.w	fp, #4294967295
    observed_salt_len = hash_start - p;
 c020540:	eba9 0605 	sub.w	r6, r9, r5
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 c020544:	d001      	beq.n	c02054a <mbedtls_rsa_rsassa_pss_verify_ext+0x12a>
 c020546:	455e      	cmp	r6, fp
 c020548:	d137      	bne.n	c0205ba <mbedtls_rsa_rsassa_pss_verify_ext+0x19a>
    ret = mbedtls_md_starts( &md_ctx );
 c02054a:	4620      	mov	r0, r4
 c02054c:	f007 fce6 	bl	c027f1c <mbedtls_md_starts>
    if ( ret != 0 )
 c020550:	4603      	mov	r3, r0
 c020552:	bb28      	cbnz	r0, c0205a0 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
 c020554:	2208      	movs	r2, #8
 c020556:	a905      	add	r1, sp, #20
 c020558:	4620      	mov	r0, r4
 c02055a:	f007 fce9 	bl	c027f30 <mbedtls_md_update>
    if ( ret != 0 )
 c02055e:	4603      	mov	r3, r0
 c020560:	b9f0      	cbnz	r0, c0205a0 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
 c020562:	f8dd 2494 	ldr.w	r2, [sp, #1172]	; 0x494
 c020566:	f8dd 1498 	ldr.w	r1, [sp, #1176]	; 0x498
 c02056a:	4620      	mov	r0, r4
 c02056c:	f007 fce0 	bl	c027f30 <mbedtls_md_update>
    if ( ret != 0 )
 c020570:	4603      	mov	r3, r0
 c020572:	b9a8      	cbnz	r0, c0205a0 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
 c020574:	4632      	mov	r2, r6
 c020576:	4629      	mov	r1, r5
 c020578:	4620      	mov	r0, r4
 c02057a:	f007 fcd9 	bl	c027f30 <mbedtls_md_update>
    if ( ret != 0 )
 c02057e:	4603      	mov	r3, r0
 c020580:	b970      	cbnz	r0, c0205a0 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_finish( &md_ctx, result );
 c020582:	a90a      	add	r1, sp, #40	; 0x28
 c020584:	4620      	mov	r0, r4
 c020586:	f007 fcdd 	bl	c027f44 <mbedtls_md_finish>
    if ( ret != 0 )
 c02058a:	4603      	mov	r3, r0
 c02058c:	b940      	cbnz	r0, c0205a0 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    if( memcmp( hash_start, result, hlen ) != 0 )
 c02058e:	4652      	mov	r2, sl
 c020590:	a90a      	add	r1, sp, #40	; 0x28
 c020592:	4648      	mov	r0, r9
 c020594:	f7f7 f9e4 	bl	c017960 <memcmp>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 c020598:	4b0b      	ldr	r3, [pc, #44]	; (c0205c8 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)
 c02059a:	2800      	cmp	r0, #0
 c02059c:	bf08      	it	eq
 c02059e:	2300      	moveq	r3, #0
    mbedtls_md_free( &md_ctx );
 c0205a0:	4620      	mov	r0, r4
 c0205a2:	9303      	str	r3, [sp, #12]
 c0205a4:	f007 fc7f 	bl	c027ea6 <mbedtls_md_free>
    return( ret );
 c0205a8:	9b03      	ldr	r3, [sp, #12]
 c0205aa:	e749      	b.n	c020440 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 c0205ac:	9600      	str	r6, [sp, #0]
 c0205ae:	f8dd 34a4 	ldr.w	r3, [sp, #1188]	; 0x4a4
 c0205b2:	4628      	mov	r0, r5
 c0205b4:	f7ff f9a2 	bl	c01f8fc <mbedtls_rsa_private>
 c0205b8:	e757      	b.n	c02046a <mbedtls_rsa_rsassa_pss_verify_ext+0x4a>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 c0205ba:	4b04      	ldr	r3, [pc, #16]	; (c0205cc <mbedtls_rsa_rsassa_pss_verify_ext+0x1ac>)
 c0205bc:	e7f0      	b.n	c0205a0 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 c0205be:	4b03      	ldr	r3, [pc, #12]	; (c0205cc <mbedtls_rsa_rsassa_pss_verify_ext+0x1ac>)
 c0205c0:	e73e      	b.n	c020440 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
 c0205c2:	bf00      	nop
 c0205c4:	ffffbf80 	.word	0xffffbf80
 c0205c8:	ffffbc80 	.word	0xffffbc80
 c0205cc:	ffffbf00 	.word	0xffffbf00

0c0205d0 <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 c0205d0:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 c0205d2:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
{
 c0205d6:	b086      	sub	sp, #24
 c0205d8:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 c0205dc:	b17c      	cbz	r4, c0205fe <mbedtls_rsa_rsassa_pss_verify+0x2e>
 c0205de:	b2e4      	uxtb	r4, r4

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
 c0205e0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 c0205e2:	9605      	str	r6, [sp, #20]
 c0205e4:	f04f 36ff 	mov.w	r6, #4294967295
 c0205e8:	e9cd 4603 	strd	r4, r6, [sp, #12]
 c0205ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 c0205ee:	9402      	str	r4, [sp, #8]
 c0205f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 c0205f2:	e9cd 5400 	strd	r5, r4, [sp]
 c0205f6:	f7ff ff13 	bl	c020420 <mbedtls_rsa_rsassa_pss_verify_ext>
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );

}
 c0205fa:	b006      	add	sp, #24
 c0205fc:	bd70      	pop	{r4, r5, r6, pc}
                             : md_alg;
 c0205fe:	462c      	mov	r4, r5
 c020600:	e7ee      	b.n	c0205e0 <mbedtls_rsa_rsassa_pss_verify+0x10>
	...

0c020604 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c020604:	2b01      	cmp	r3, #1
{
 c020606:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02060a:	4680      	mov	r8, r0
 c02060c:	468a      	mov	sl, r1
 c02060e:	4693      	mov	fp, r2
 c020610:	4699      	mov	r9, r3
    sig_len = ctx->len;
 c020612:	6847      	ldr	r7, [r0, #4]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c020614:	d103      	bne.n	c02061e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1a>
 c020616:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 c02061a:	2b00      	cmp	r3, #0
 c02061c:	d14a      	bne.n	c0206b4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb0>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 c02061e:	4639      	mov	r1, r7
 c020620:	2001      	movs	r0, #1
 c020622:	f009 fe27 	bl	c02a274 <mbedtls_calloc>
 c020626:	4606      	mov	r6, r0
 c020628:	2800      	cmp	r0, #0
 c02062a:	d045      	beq.n	c0206b8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb4>
 c02062c:	4639      	mov	r1, r7
 c02062e:	2001      	movs	r0, #1
 c020630:	f009 fe20 	bl	c02a274 <mbedtls_calloc>
 c020634:	4605      	mov	r5, r0
 c020636:	2800      	cmp	r0, #0
 c020638:	d041      	beq.n	c0206be <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xba>
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 c02063a:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 c02063e:	9000      	str	r0, [sp, #0]
 c020640:	463b      	mov	r3, r7
 c020642:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 c020646:	f7fe fdad 	bl	c01f1a4 <rsa_rsassa_pkcs1_v15_encode>
 c02064a:	4604      	mov	r4, r0
 c02064c:	b988      	cbnz	r0, c020672 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 c02064e:	f1b9 0f00 	cmp.w	r9, #0
 c020652:	d121      	bne.n	c020698 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 c020654:	4632      	mov	r2, r6
 c020656:	990f      	ldr	r1, [sp, #60]	; 0x3c
 c020658:	4640      	mov	r0, r8
 c02065a:	f7ff f89f 	bl	c01f79c <mbedtls_rsa_public>
 c02065e:	4604      	mov	r4, r0
    if( ret != 0 )
 c020660:	b938      	cbnz	r0, c020672 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
    unsigned char diff = 0;
 c020662:	4602      	mov	r2, r0
    for( i = 0; i < n; i++ )
 c020664:	4603      	mov	r3, r0
 c020666:	429f      	cmp	r7, r3
 c020668:	d11e      	bne.n	c0206a8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa4>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 c02066a:	4b16      	ldr	r3, [pc, #88]	; (c0206c4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc0>)
 c02066c:	2a00      	cmp	r2, #0
 c02066e:	bf18      	it	ne
 c020670:	461c      	movne	r4, r3

cleanup:

    if( encoded != NULL )
    {
        mbedtls_platform_zeroize( encoded, sig_len );
 c020672:	4630      	mov	r0, r6
 c020674:	4639      	mov	r1, r7
 c020676:	f009 fe13 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( encoded );
 c02067a:	4630      	mov	r0, r6
 c02067c:	f009 fe00 	bl	c02a280 <mbedtls_free>
    }

    if( encoded_expected != NULL )
 c020680:	b135      	cbz	r5, c020690 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8c>
    {
        mbedtls_platform_zeroize( encoded_expected, sig_len );
 c020682:	4628      	mov	r0, r5
 c020684:	4639      	mov	r1, r7
 c020686:	f009 fe0b 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( encoded_expected );
 c02068a:	4628      	mov	r0, r5
 c02068c:	f009 fdf8 	bl	c02a280 <mbedtls_free>
    }

    return( ret );
}
 c020690:	4620      	mov	r0, r4
 c020692:	b003      	add	sp, #12
 c020694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 c020698:	9600      	str	r6, [sp, #0]
 c02069a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 c02069c:	465a      	mov	r2, fp
 c02069e:	4651      	mov	r1, sl
 c0206a0:	4640      	mov	r0, r8
 c0206a2:	f7ff f92b 	bl	c01f8fc <mbedtls_rsa_private>
 c0206a6:	e7da      	b.n	c02065e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5a>
        diff |= A[i] ^ B[i];
 c0206a8:	5cf1      	ldrb	r1, [r6, r3]
 c0206aa:	5ce8      	ldrb	r0, [r5, r3]
    for( i = 0; i < n; i++ )
 c0206ac:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 c0206ae:	4041      	eors	r1, r0
 c0206b0:	430a      	orrs	r2, r1
 c0206b2:	e7d8      	b.n	c020666 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c0206b4:	4c04      	ldr	r4, [pc, #16]	; (c0206c8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
 c0206b6:	e7eb      	b.n	c020690 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8c>
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 c0206b8:	f06f 040f 	mvn.w	r4, #15
 c0206bc:	e7e8      	b.n	c020690 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8c>
 c0206be:	f06f 040f 	mvn.w	r4, #15
 c0206c2:	e7d6      	b.n	c020672 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
 c0206c4:	ffffbc80 	.word	0xffffbc80
 c0206c8:	ffffbf80 	.word	0xffffbf80

0c0206cc <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 c0206cc:	b430      	push	{r4, r5}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
 c0206ce:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
 c0206d2:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
 c0206d6:	b125      	cbz	r5, c0206e2 <mbedtls_rsa_pkcs1_verify+0x16>
 c0206d8:	2d01      	cmp	r5, #1
 c0206da:	d006      	beq.n	c0206ea <mbedtls_rsa_pkcs1_verify+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 c0206dc:	bc30      	pop	{r4, r5}
 c0206de:	4805      	ldr	r0, [pc, #20]	; (c0206f4 <mbedtls_rsa_pkcs1_verify+0x28>)
 c0206e0:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 c0206e2:	9402      	str	r4, [sp, #8]
}
 c0206e4:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 c0206e6:	f7ff bf8d 	b.w	c020604 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
 c0206ea:	9402      	str	r4, [sp, #8]
}
 c0206ec:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
 c0206ee:	f7ff bf6f 	b.w	c0205d0 <mbedtls_rsa_rsassa_pss_verify>
 c0206f2:	bf00      	nop
 c0206f4:	ffffbf00 	.word	0xffffbf00

0c0206f8 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 c0206f8:	b510      	push	{r4, lr}
    if( ctx == NULL )
 c0206fa:	4604      	mov	r4, r0
 c0206fc:	b3a0      	cbz	r0, c020768 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
 c0206fe:	308c      	adds	r0, #140	; 0x8c
 c020700:	f004 fa40 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
 c020704:	f104 0098 	add.w	r0, r4, #152	; 0x98
 c020708:	f004 fa3c 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
 c02070c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 c020710:	f004 fa38 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
 c020714:	f104 0020 	add.w	r0, r4, #32
 c020718:	f004 fa34 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
 c02071c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 c020720:	f004 fa30 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
 c020724:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 c020728:	f004 fa2c 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
 c02072c:	f104 0014 	add.w	r0, r4, #20
 c020730:	f004 fa28 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
 c020734:	f104 0008 	add.w	r0, r4, #8
 c020738:	f004 fa24 	bl	c024b84 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
 c02073c:	f104 0080 	add.w	r0, r4, #128	; 0x80
 c020740:	f004 fa20 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
 c020744:	f104 0074 	add.w	r0, r4, #116	; 0x74
 c020748:	f004 fa1c 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
 c02074c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c020750:	f004 fa18 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
 c020754:	f104 0050 	add.w	r0, r4, #80	; 0x50
 c020758:	f004 fa14 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 c02075c:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 c020760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
 c020764:	f004 ba0e 	b.w	c024b84 <mbedtls_mpi_free>
}
 c020768:	bd10      	pop	{r4, pc}
	...

0c02076c <mbedtls_rsa_gen_key>:
{
 c02076c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( nbits < 128 || exponent < 3 || nbits % 2 != 0 )
 c020770:	2b7f      	cmp	r3, #127	; 0x7f
{
 c020772:	b091      	sub	sp, #68	; 0x44
 c020774:	4604      	mov	r4, r0
 c020776:	468a      	mov	sl, r1
 c020778:	9203      	str	r2, [sp, #12]
 c02077a:	461d      	mov	r5, r3
 c02077c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    if( nbits < 128 || exponent < 3 || nbits % 2 != 0 )
 c02077e:	f240 80e5 	bls.w	c02094c <mbedtls_rsa_gen_key+0x1e0>
 c020782:	2e02      	cmp	r6, #2
 c020784:	f340 80e2 	ble.w	c02094c <mbedtls_rsa_gen_key+0x1e0>
 c020788:	07eb      	lsls	r3, r5, #31
 c02078a:	f100 80df 	bmi.w	c02094c <mbedtls_rsa_gen_key+0x1e0>
        prime_quality = MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR;
 c02078e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    mbedtls_mpi_init( &H );
 c020792:	a807      	add	r0, sp, #28
        prime_quality = MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR;
 c020794:	bf94      	ite	ls
 c020796:	f04f 0b00 	movls.w	fp, #0
 c02079a:	f04f 0b02 	movhi.w	fp, #2
    mbedtls_mpi_init( &H );
 c02079e:	f004 f9eb 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &G );
 c0207a2:	a80a      	add	r0, sp, #40	; 0x28
 c0207a4:	f004 f9e8 	bl	c024b78 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &ctx->E, exponent ) );
 c0207a8:	f104 0814 	add.w	r8, r4, #20
    mbedtls_mpi_init( &L );
 c0207ac:	a80d      	add	r0, sp, #52	; 0x34
 c0207ae:	f004 f9e3 	bl	c024b78 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &ctx->E, exponent ) );
 c0207b2:	4631      	mov	r1, r6
 c0207b4:	4640      	mov	r0, r8
 c0207b6:	f004 fa9f 	bl	c024cf8 <mbedtls_mpi_lset>
 c0207ba:	4601      	mov	r1, r0
 c0207bc:	2800      	cmp	r0, #0
 c0207be:	f040 80af 	bne.w	c020920 <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->P, nbits >> 1,
 c0207c2:	ea4f 0955 	mov.w	r9, r5, lsr #1
 c0207c6:	2dc7      	cmp	r5, #199	; 0xc7
        if( mbedtls_mpi_bitlen( &H ) <= ( ( nbits >= 200 ) ? ( ( nbits >> 1 ) - 99 ) : 0 ) )
 c0207c8:	f1a9 0363 	sub.w	r3, r9, #99	; 0x63
 c0207cc:	bf98      	it	ls
 c0207ce:	2300      	movls	r3, #0
        if( mbedtls_mpi_bitlen( &ctx->D ) <= ( ( nbits + 1 ) / 2 ) ) // (FIPS 186-4 §B.3.1 criterion 3(a))
 c0207d0:	3501      	adds	r5, #1
 c0207d2:	9305      	str	r3, [sp, #20]
 c0207d4:	086b      	lsrs	r3, r5, #1
 c0207d6:	9304      	str	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->P, nbits >> 1,
 c0207d8:	f104 052c 	add.w	r5, r4, #44	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->Q, nbits >> 1,
 c0207dc:	f104 0638 	add.w	r6, r4, #56	; 0x38
        MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->P, nbits >> 1,
 c0207e0:	9b03      	ldr	r3, [sp, #12]
 c0207e2:	4649      	mov	r1, r9
 c0207e4:	9300      	str	r3, [sp, #0]
 c0207e6:	465a      	mov	r2, fp
 c0207e8:	4653      	mov	r3, sl
 c0207ea:	4628      	mov	r0, r5
 c0207ec:	f005 fed2 	bl	c026594 <mbedtls_mpi_gen_prime>
 c0207f0:	4601      	mov	r1, r0
 c0207f2:	2800      	cmp	r0, #0
 c0207f4:	f040 8094 	bne.w	c020920 <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->Q, nbits >> 1,
 c0207f8:	9b03      	ldr	r3, [sp, #12]
 c0207fa:	4649      	mov	r1, r9
 c0207fc:	9300      	str	r3, [sp, #0]
 c0207fe:	465a      	mov	r2, fp
 c020800:	4653      	mov	r3, sl
 c020802:	4630      	mov	r0, r6
 c020804:	f005 fec6 	bl	c026594 <mbedtls_mpi_gen_prime>
 c020808:	4601      	mov	r1, r0
 c02080a:	2800      	cmp	r0, #0
 c02080c:	f040 8088 	bne.w	c020920 <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &H, &ctx->P, &ctx->Q ) );
 c020810:	4629      	mov	r1, r5
 c020812:	4632      	mov	r2, r6
 c020814:	a807      	add	r0, sp, #28
 c020816:	f004 fe0a 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c02081a:	4601      	mov	r1, r0
 c02081c:	2800      	cmp	r0, #0
 c02081e:	d17f      	bne.n	c020920 <mbedtls_rsa_gen_key+0x1b4>
        if( mbedtls_mpi_bitlen( &H ) <= ( ( nbits >= 200 ) ? ( ( nbits >> 1 ) - 99 ) : 0 ) )
 c020820:	a807      	add	r0, sp, #28
 c020822:	f004 fad9 	bl	c024dd8 <mbedtls_mpi_bitlen>
 c020826:	9b05      	ldr	r3, [sp, #20]
 c020828:	4298      	cmp	r0, r3
 c02082a:	d9d9      	bls.n	c0207e0 <mbedtls_rsa_gen_key+0x74>
        if( H.s < 0 )
 c02082c:	9b07      	ldr	r3, [sp, #28]
 c02082e:	2b00      	cmp	r3, #0
 c020830:	da03      	bge.n	c02083a <mbedtls_rsa_gen_key+0xce>
            mbedtls_mpi_swap( &ctx->P, &ctx->Q );
 c020832:	4631      	mov	r1, r6
 c020834:	4628      	mov	r0, r5
 c020836:	f004 fa09 	bl	c024c4c <mbedtls_mpi_swap>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &ctx->P, &ctx->P, 1 ) );
 c02083a:	4629      	mov	r1, r5
 c02083c:	2201      	movs	r2, #1
 c02083e:	4628      	mov	r0, r5
 c020840:	f004 fe2e 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c020844:	4601      	mov	r1, r0
 c020846:	2800      	cmp	r0, #0
 c020848:	d16a      	bne.n	c020920 <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &ctx->Q, &ctx->Q, 1 ) );
 c02084a:	4631      	mov	r1, r6
 c02084c:	2201      	movs	r2, #1
 c02084e:	4630      	mov	r0, r6
 c020850:	f004 fe26 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c020854:	4601      	mov	r1, r0
 c020856:	2800      	cmp	r0, #0
 c020858:	d162      	bne.n	c020920 <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &H, &ctx->P, &ctx->Q ) );
 c02085a:	4629      	mov	r1, r5
 c02085c:	4632      	mov	r2, r6
 c02085e:	a807      	add	r0, sp, #28
 c020860:	f004 fe34 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c020864:	4601      	mov	r1, r0
 c020866:	2800      	cmp	r0, #0
 c020868:	d15a      	bne.n	c020920 <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, &ctx->E, &H  ) );
 c02086a:	4641      	mov	r1, r8
 c02086c:	aa07      	add	r2, sp, #28
 c02086e:	a80a      	add	r0, sp, #40	; 0x28
 c020870:	f005 fb95 	bl	c025f9e <mbedtls_mpi_gcd>
 c020874:	4601      	mov	r1, r0
 c020876:	2800      	cmp	r0, #0
 c020878:	d152      	bne.n	c020920 <mbedtls_rsa_gen_key+0x1b4>
        if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 c02087a:	2101      	movs	r1, #1
 c02087c:	a80a      	add	r0, sp, #40	; 0x28
 c02087e:	f004 fcff 	bl	c025280 <mbedtls_mpi_cmp_int>
 c020882:	2800      	cmp	r0, #0
 c020884:	d1ac      	bne.n	c0207e0 <mbedtls_rsa_gen_key+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, &ctx->P, &ctx->Q ) );
 c020886:	4629      	mov	r1, r5
 c020888:	4632      	mov	r2, r6
 c02088a:	a80a      	add	r0, sp, #40	; 0x28
 c02088c:	f005 fb87 	bl	c025f9e <mbedtls_mpi_gcd>
 c020890:	4601      	mov	r1, r0
 c020892:	2800      	cmp	r0, #0
 c020894:	d144      	bne.n	c020920 <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &L, NULL, &H, &G ) );
 c020896:	ab0a      	add	r3, sp, #40	; 0x28
 c020898:	aa07      	add	r2, sp, #28
 c02089a:	a80d      	add	r0, sp, #52	; 0x34
 c02089c:	f004 ff1c 	bl	c0256d8 <mbedtls_mpi_div_mpi>
 c0208a0:	4601      	mov	r1, r0
 c0208a2:	2800      	cmp	r0, #0
 c0208a4:	d13c      	bne.n	c020920 <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->D, &ctx->E, &L ) );
 c0208a6:	f104 0720 	add.w	r7, r4, #32
 c0208aa:	4641      	mov	r1, r8
 c0208ac:	aa0d      	add	r2, sp, #52	; 0x34
 c0208ae:	4638      	mov	r0, r7
 c0208b0:	f005 fcef 	bl	c026292 <mbedtls_mpi_inv_mod>
 c0208b4:	4601      	mov	r1, r0
 c0208b6:	bb98      	cbnz	r0, c020920 <mbedtls_rsa_gen_key+0x1b4>
        if( mbedtls_mpi_bitlen( &ctx->D ) <= ( ( nbits + 1 ) / 2 ) ) // (FIPS 186-4 §B.3.1 criterion 3(a))
 c0208b8:	4638      	mov	r0, r7
 c0208ba:	f004 fa8d 	bl	c024dd8 <mbedtls_mpi_bitlen>
 c0208be:	9b04      	ldr	r3, [sp, #16]
 c0208c0:	4298      	cmp	r0, r3
 c0208c2:	d98d      	bls.n	c0207e0 <mbedtls_rsa_gen_key+0x74>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &ctx->P,  &ctx->P, 1 ) );
 c0208c4:	4629      	mov	r1, r5
 c0208c6:	2201      	movs	r2, #1
 c0208c8:	4628      	mov	r0, r5
 c0208ca:	f004 fdd3 	bl	c025474 <mbedtls_mpi_add_int>
 c0208ce:	4601      	mov	r1, r0
 c0208d0:	bb30      	cbnz	r0, c020920 <mbedtls_rsa_gen_key+0x1b4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &ctx->Q,  &ctx->Q, 1 ) );
 c0208d2:	4631      	mov	r1, r6
 c0208d4:	2201      	movs	r2, #1
 c0208d6:	4630      	mov	r0, r6
 c0208d8:	f004 fdcc 	bl	c025474 <mbedtls_mpi_add_int>
 c0208dc:	4601      	mov	r1, r0
 c0208de:	b9f8      	cbnz	r0, c020920 <mbedtls_rsa_gen_key+0x1b4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P, &ctx->Q ) );
 c0208e0:	f104 0808 	add.w	r8, r4, #8
 c0208e4:	4629      	mov	r1, r5
 c0208e6:	4632      	mov	r2, r6
 c0208e8:	4640      	mov	r0, r8
 c0208ea:	f004 fdef 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c0208ee:	4601      	mov	r1, r0
 c0208f0:	b9b0      	cbnz	r0, c020920 <mbedtls_rsa_gen_key+0x1b4>
    ctx->len = mbedtls_mpi_size( &ctx->N );
 c0208f2:	4640      	mov	r0, r8
 c0208f4:	f004 fa90 	bl	c024e18 <mbedtls_mpi_size>
    MBEDTLS_MPI_CHK( mbedtls_rsa_deduce_crt( &ctx->P, &ctx->Q, &ctx->D,
 c0208f8:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 c0208fc:	9301      	str	r3, [sp, #4]
 c0208fe:	f104 0350 	add.w	r3, r4, #80	; 0x50
    ctx->len = mbedtls_mpi_size( &ctx->N );
 c020902:	6060      	str	r0, [r4, #4]
    MBEDTLS_MPI_CHK( mbedtls_rsa_deduce_crt( &ctx->P, &ctx->Q, &ctx->D,
 c020904:	9300      	str	r3, [sp, #0]
 c020906:	4631      	mov	r1, r6
 c020908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c02090c:	463a      	mov	r2, r7
 c02090e:	4628      	mov	r0, r5
 c020910:	f00c ffd4 	bl	c02d8bc <mbedtls_rsa_deduce_crt>
 c020914:	4601      	mov	r1, r0
 c020916:	b918      	cbnz	r0, c020920 <mbedtls_rsa_gen_key+0x1b4>
    MBEDTLS_MPI_CHK( mbedtls_rsa_check_privkey( ctx ) );
 c020918:	4620      	mov	r0, r4
 c02091a:	f7fe feed 	bl	c01f6f8 <mbedtls_rsa_check_privkey>
 c02091e:	4601      	mov	r1, r0
    mbedtls_mpi_free( &H );
 c020920:	a807      	add	r0, sp, #28
 c020922:	9103      	str	r1, [sp, #12]
 c020924:	f004 f92e 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G );
 c020928:	a80a      	add	r0, sp, #40	; 0x28
 c02092a:	f004 f92b 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 c02092e:	a80d      	add	r0, sp, #52	; 0x34
 c020930:	f004 f928 	bl	c024b84 <mbedtls_mpi_free>
    if( ret != 0 )
 c020934:	9903      	ldr	r1, [sp, #12]
 c020936:	b129      	cbz	r1, c020944 <mbedtls_rsa_gen_key+0x1d8>
        mbedtls_rsa_free( ctx );
 c020938:	4620      	mov	r0, r4
 c02093a:	f7ff fedd 	bl	c0206f8 <mbedtls_rsa_free>
        return( MBEDTLS_ERR_RSA_KEY_GEN_FAILED + ret );
 c02093e:	9903      	ldr	r1, [sp, #12]
 c020940:	f5a1 4183 	sub.w	r1, r1, #16768	; 0x4180
}
 c020944:	4608      	mov	r0, r1
 c020946:	b011      	add	sp, #68	; 0x44
 c020948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c02094c:	4900      	ldr	r1, [pc, #0]	; (c020950 <mbedtls_rsa_gen_key+0x1e4>)
 c02094e:	e7f9      	b.n	c020944 <mbedtls_rsa_gen_key+0x1d8>
 c020950:	ffffbf80 	.word	0xffffbf80

0c020954 <mbedtls_sha1_init>:
static void mbedtls_zeroize(void *v, size_t n)
{
    volatile unsigned char *p = (unsigned char *)v;
    while (n--)
    {
        *p++ = 0;
 c020954:	2200      	movs	r2, #0
    }
}

void mbedtls_sha1_init(mbedtls_sha1_context *ctx)
{
 c020956:	b082      	sub	sp, #8
 c020958:	f500 73b6 	add.w	r3, r0, #364	; 0x16c
    while (n--)
 c02095c:	4298      	cmp	r0, r3
 c02095e:	d10b      	bne.n	c020978 <mbedtls_sha1_init+0x24>
    SHA1_VALIDATE( ctx != NULL );

    mbedtls_zeroize(ctx, sizeof(mbedtls_sha1_context));

    /* Enable HASH clock */
    __HAL_RCC_HASH_CLK_ENABLE();
 c020960:	4b07      	ldr	r3, [pc, #28]	; (c020980 <mbedtls_sha1_init+0x2c>)
 c020962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c020964:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 c020968:	64da      	str	r2, [r3, #76]	; 0x4c
 c02096a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c02096c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c020970:	9301      	str	r3, [sp, #4]
 c020972:	9b01      	ldr	r3, [sp, #4]
}
 c020974:	b002      	add	sp, #8
 c020976:	4770      	bx	lr
        *p++ = 0;
 c020978:	7002      	strb	r2, [r0, #0]
 c02097a:	3001      	adds	r0, #1
 c02097c:	e7ee      	b.n	c02095c <mbedtls_sha1_init+0x8>
 c02097e:	bf00      	nop
 c020980:	50021000 	.word	0x50021000

0c020984 <mbedtls_sha1_free>:

void mbedtls_sha1_free(mbedtls_sha1_context *ctx)
{
    if (ctx == NULL)
 c020984:	b120      	cbz	r0, c020990 <mbedtls_sha1_free+0xc>
        *p++ = 0;
 c020986:	2200      	movs	r2, #0
 c020988:	f500 73b6 	add.w	r3, r0, #364	; 0x16c
    while (n--)
 c02098c:	4298      	cmp	r0, r3
 c02098e:	d100      	bne.n	c020992 <mbedtls_sha1_free+0xe>
    {
        return;
    }
    mbedtls_zeroize(ctx, sizeof(mbedtls_sha1_context));
}
 c020990:	4770      	bx	lr
        *p++ = 0;
 c020992:	7002      	strb	r2, [r0, #0]
 c020994:	3001      	adds	r0, #1
 c020996:	e7f9      	b.n	c02098c <mbedtls_sha1_free+0x8>

0c020998 <mbedtls_sha1_clone>:

void mbedtls_sha1_clone(mbedtls_sha1_context *dst,
                          const mbedtls_sha1_context *src)
{
 c020998:	b508      	push	{r3, lr}
    SHA1_VALIDATE( dst != NULL );
    SHA1_VALIDATE( src != NULL );

    *dst = *src;
 c02099a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 c02099e:	f7f6 ffee 	bl	c01797e <memcpy>
}
 c0209a2:	bd08      	pop	{r3, pc}

0c0209a4 <mbedtls_sha1_starts_ret>:

int mbedtls_sha1_starts_ret(mbedtls_sha1_context *ctx)
{
 c0209a4:	b538      	push	{r3, r4, r5, lr}
 c0209a6:	4605      	mov	r5, r0
    SHA1_VALIDATE_RET( ctx != NULL );

    /* HASH Configuration */
    if (HAL_HASH_DeInit(&ctx->hhash) != HAL_OK)
 c0209a8:	f001 fef3 	bl	c022792 <HAL_HASH_DeInit>
 c0209ac:	b110      	cbz	r0, c0209b4 <mbedtls_sha1_starts_ret+0x10>
    {
        return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 c0209ae:	f06f 006f 	mvn.w	r0, #111	; 0x6f

    /* save hw context */
    HAL_HASH_ContextSaving(&ctx->hhash, ctx->ctx_save_regs);

    return 0;
}
 c0209b2:	bd38      	pop	{r3, r4, r5, pc}
    ctx->hhash.Init.DataType = HASH_DATATYPE_8B;
 c0209b4:	2320      	movs	r3, #32
    if (HAL_HASH_Init(&ctx->hhash) != HAL_OK)
 c0209b6:	4628      	mov	r0, r5
    ctx->hhash.Init.DataType = HASH_DATATYPE_8B;
 c0209b8:	602b      	str	r3, [r5, #0]
    if (HAL_HASH_Init(&ctx->hhash) != HAL_OK)
 c0209ba:	f001 feb9 	bl	c022730 <HAL_HASH_Init>
 c0209be:	4604      	mov	r4, r0
 c0209c0:	2800      	cmp	r0, #0
 c0209c2:	d1f4      	bne.n	c0209ae <mbedtls_sha1_starts_ret+0xa>
    HAL_HASH_ContextSaving(&ctx->hhash, ctx->ctx_save_regs);
 c0209c4:	4628      	mov	r0, r5
 c0209c6:	f105 0185 	add.w	r1, r5, #133	; 0x85
 c0209ca:	f001 fefb 	bl	c0227c4 <HAL_HASH_ContextSaving>
    return 0;
 c0209ce:	4620      	mov	r0, r4
 c0209d0:	e7ef      	b.n	c0209b2 <mbedtls_sha1_starts_ret+0xe>

0c0209d2 <mbedtls_internal_sha1_process>:

int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx, const unsigned char data[ST_SHA1_BLOCK_SIZE] )
{
 c0209d2:	b570      	push	{r4, r5, r6, lr}
 c0209d4:	460c      	mov	r4, r1
 c0209d6:	4605      	mov	r5, r0
    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    /* restore hw context */
    HAL_HASH_ContextRestoring(&ctx->hhash, ctx->ctx_save_regs);
 c0209d8:	f100 0685 	add.w	r6, r0, #133	; 0x85
 c0209dc:	4631      	mov	r1, r6
 c0209de:	f001 ff17 	bl	c022810 <HAL_HASH_ContextRestoring>

    if (HAL_HASH_SHA1_Accmlt(&ctx->hhash, (uint8_t *) data, ST_SHA1_BLOCK_SIZE) != 0)
 c0209e2:	4621      	mov	r1, r4
 c0209e4:	2240      	movs	r2, #64	; 0x40
 c0209e6:	4628      	mov	r0, r5
 c0209e8:	f002 f818 	bl	c022a1c <HAL_HASH_SHA1_Accmlt>
 c0209ec:	4604      	mov	r4, r0
 c0209ee:	b928      	cbnz	r0, c0209fc <mbedtls_internal_sha1_process+0x2a>
    {
        return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
    }

    /* save hw context */
    HAL_HASH_ContextSaving(&ctx->hhash, ctx->ctx_save_regs);
 c0209f0:	4628      	mov	r0, r5
 c0209f2:	4631      	mov	r1, r6
 c0209f4:	f001 fee6 	bl	c0227c4 <HAL_HASH_ContextSaving>

    return 0;
 c0209f8:	4620      	mov	r0, r4
}
 c0209fa:	bd70      	pop	{r4, r5, r6, pc}
        return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 c0209fc:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 c020a00:	e7fb      	b.n	c0209fa <mbedtls_internal_sha1_process+0x28>

0c020a02 <mbedtls_sha1_update_ret>:

int mbedtls_sha1_update_ret(mbedtls_sha1_context *ctx, const unsigned char *input, size_t ilen)
{
 c020a02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c020a06:	4604      	mov	r4, r0
 c020a08:	4616      	mov	r6, r2

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );

    /* restore hw context */
    HAL_HASH_ContextRestoring(&ctx->hhash, ctx->ctx_save_regs);
 c020a0a:	f100 0985 	add.w	r9, r0, #133	; 0x85
{
 c020a0e:	460f      	mov	r7, r1
    HAL_HASH_ContextRestoring(&ctx->hhash, ctx->ctx_save_regs);
 c020a10:	4649      	mov	r1, r9
 c020a12:	f001 fefd 	bl	c022810 <HAL_HASH_ContextRestoring>

    if (currentlen < (ST_SHA1_BLOCK_SIZE - ctx->sbuf_len))
 c020a16:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
 c020a1a:	f104 0844 	add.w	r8, r4, #68	; 0x44
 c020a1e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 c020a22:	42b2      	cmp	r2, r6
 c020a24:	4440      	add	r0, r8
 c020a26:	d90e      	bls.n	c020a46 <mbedtls_sha1_update_ret+0x44>
    {
        /* only store input data in context buffer */
        memcpy(ctx->sbuf + ctx->sbuf_len, input, currentlen);
 c020a28:	4632      	mov	r2, r6
 c020a2a:	4639      	mov	r1, r7
 c020a2c:	f7f6 ffa7 	bl	c01797e <memcpy>
        ctx->sbuf_len += currentlen;
 c020a30:	f894 1084 	ldrb.w	r1, [r4, #132]	; 0x84
 c020a34:	440e      	add	r6, r1
 c020a36:	f884 6084 	strb.w	r6, [r4, #132]	; 0x84
            memcpy(ctx->sbuf, input + ilen - ctx->sbuf_len, ctx->sbuf_len);
        }
    }

    /* save hw context */
    HAL_HASH_ContextSaving(&ctx->hhash, ctx->ctx_save_regs);
 c020a3a:	4620      	mov	r0, r4
 c020a3c:	4649      	mov	r1, r9
 c020a3e:	f001 fec1 	bl	c0227c4 <HAL_HASH_ContextSaving>

    return 0;
 c020a42:	2000      	movs	r0, #0
 c020a44:	e00f      	b.n	c020a66 <mbedtls_sha1_update_ret+0x64>
        memcpy(ctx->sbuf + ctx->sbuf_len, input, (ST_SHA1_BLOCK_SIZE - ctx->sbuf_len));
 c020a46:	4639      	mov	r1, r7
 c020a48:	f7f6 ff99 	bl	c01797e <memcpy>
        currentlen -= (ST_SHA1_BLOCK_SIZE - ctx->sbuf_len);
 c020a4c:	f894 2084 	ldrb.w	r2, [r4, #132]	; 0x84
 c020a50:	f1a6 0540 	sub.w	r5, r6, #64	; 0x40
 c020a54:	4415      	add	r5, r2
        if (HAL_HASH_SHA1_Accmlt(&ctx->hhash, (uint8_t *)(ctx->sbuf), ST_SHA1_BLOCK_SIZE) != 0)
 c020a56:	4641      	mov	r1, r8
 c020a58:	2240      	movs	r2, #64	; 0x40
 c020a5a:	4620      	mov	r0, r4
 c020a5c:	f001 ffde 	bl	c022a1c <HAL_HASH_SHA1_Accmlt>
 c020a60:	b118      	cbz	r0, c020a6a <mbedtls_sha1_update_ret+0x68>
            return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 c020a62:	f06f 006f 	mvn.w	r0, #111	; 0x6f
}
 c020a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (iter != 0)
 c020a6a:	2d3f      	cmp	r5, #63	; 0x3f
 c020a6c:	d80b      	bhi.n	c020a86 <mbedtls_sha1_update_ret+0x84>
        ctx->sbuf_len = currentlen % ST_SHA1_BLOCK_SIZE;
 c020a6e:	f005 023f 	and.w	r2, r5, #63	; 0x3f
 c020a72:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
        if (ctx->sbuf_len != 0)
 c020a76:	2a00      	cmp	r2, #0
 c020a78:	d0df      	beq.n	c020a3a <mbedtls_sha1_update_ret+0x38>
            memcpy(ctx->sbuf, input + ilen - ctx->sbuf_len, ctx->sbuf_len);
 c020a7a:	1ab1      	subs	r1, r6, r2
 c020a7c:	4439      	add	r1, r7
 c020a7e:	4640      	mov	r0, r8
 c020a80:	f7f6 ff7d 	bl	c01797e <memcpy>
 c020a84:	e7d9      	b.n	c020a3a <mbedtls_sha1_update_ret+0x38>
            if (HAL_HASH_SHA1_Accmlt(&ctx->hhash, (uint8_t *)(input + ST_SHA1_BLOCK_SIZE - ctx->sbuf_len), (iter * ST_SHA1_BLOCK_SIZE)) != 0)
 c020a86:	f894 1084 	ldrb.w	r1, [r4, #132]	; 0x84
 c020a8a:	f025 023f 	bic.w	r2, r5, #63	; 0x3f
 c020a8e:	f1c1 0140 	rsb	r1, r1, #64	; 0x40
 c020a92:	4439      	add	r1, r7
 c020a94:	4620      	mov	r0, r4
 c020a96:	f001 ffc1 	bl	c022a1c <HAL_HASH_SHA1_Accmlt>
 c020a9a:	2800      	cmp	r0, #0
 c020a9c:	d0e7      	beq.n	c020a6e <mbedtls_sha1_update_ret+0x6c>
 c020a9e:	e7e0      	b.n	c020a62 <mbedtls_sha1_update_ret+0x60>

0c020aa0 <mbedtls_sha1_finish_ret>:

int mbedtls_sha1_finish_ret(mbedtls_sha1_context *ctx, unsigned char output[32])
{
 c020aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c020aa2:	460d      	mov	r5, r1
    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    /* restore hw context */
    HAL_HASH_ContextRestoring(&ctx->hhash, ctx->ctx_save_regs);
 c020aa4:	f100 0185 	add.w	r1, r0, #133	; 0x85
{
 c020aa8:	4604      	mov	r4, r0
    HAL_HASH_ContextRestoring(&ctx->hhash, ctx->ctx_save_regs);
 c020aaa:	f001 feb1 	bl	c022810 <HAL_HASH_ContextRestoring>

    /* Last accumulation for pending bytes in sbuf_len, then trig processing and get digest */
    if (HAL_HASH_SHA1_Accmlt_End(&ctx->hhash, ctx->sbuf, ctx->sbuf_len, output, ST_SHA1_TIMEOUT) != 0)
 c020aae:	2303      	movs	r3, #3
 c020ab0:	f894 2084 	ldrb.w	r2, [r4, #132]	; 0x84
 c020ab4:	9300      	str	r3, [sp, #0]
 c020ab6:	f104 0144 	add.w	r1, r4, #68	; 0x44
 c020aba:	462b      	mov	r3, r5
 c020abc:	4620      	mov	r0, r4
 c020abe:	f001 ff5e 	bl	c02297e <HAL_HASH_SHA1_Accmlt_End>
 c020ac2:	b918      	cbnz	r0, c020acc <mbedtls_sha1_finish_ret+0x2c>
    {
        return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
    }

    ctx->sbuf_len = 0;
 c020ac4:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84

    return 0;
}
 c020ac8:	b003      	add	sp, #12
 c020aca:	bd30      	pop	{r4, r5, pc}
        return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 c020acc:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 c020ad0:	e7fa      	b.n	c020ac8 <mbedtls_sha1_finish_ret+0x28>
	...

0c020ad4 <mbedtls_sha256_init>:
static void mbedtls_zeroize(void *v, size_t n)
{
    volatile unsigned char *p = (unsigned char *)v;
    while (n--)
    {
        *p++ = 0;
 c020ad4:	2200      	movs	r2, #0
    }
}

void mbedtls_sha256_init(mbedtls_sha256_context *ctx)
{
 c020ad6:	b082      	sub	sp, #8
 c020ad8:	f500 73b8 	add.w	r3, r0, #368	; 0x170
    while (n--)
 c020adc:	4298      	cmp	r0, r3
 c020ade:	d10b      	bne.n	c020af8 <mbedtls_sha256_init+0x24>
    SHA256_VALIDATE( ctx != NULL );

    mbedtls_zeroize(ctx, sizeof(mbedtls_sha256_context));

    /* Enable HASH clock */
    __HAL_RCC_HASH_CLK_ENABLE();
 c020ae0:	4b07      	ldr	r3, [pc, #28]	; (c020b00 <mbedtls_sha256_init+0x2c>)
 c020ae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c020ae4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 c020ae8:	64da      	str	r2, [r3, #76]	; 0x4c
 c020aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c020aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c020af0:	9301      	str	r3, [sp, #4]
 c020af2:	9b01      	ldr	r3, [sp, #4]
}
 c020af4:	b002      	add	sp, #8
 c020af6:	4770      	bx	lr
        *p++ = 0;
 c020af8:	7002      	strb	r2, [r0, #0]
 c020afa:	3001      	adds	r0, #1
 c020afc:	e7ee      	b.n	c020adc <mbedtls_sha256_init+0x8>
 c020afe:	bf00      	nop
 c020b00:	50021000 	.word	0x50021000

0c020b04 <mbedtls_sha256_free>:

void mbedtls_sha256_free(mbedtls_sha256_context *ctx)
{
    if (ctx == NULL)
 c020b04:	b120      	cbz	r0, c020b10 <mbedtls_sha256_free+0xc>
        *p++ = 0;
 c020b06:	2200      	movs	r2, #0
 c020b08:	f500 73b8 	add.w	r3, r0, #368	; 0x170
    while (n--)
 c020b0c:	4298      	cmp	r0, r3
 c020b0e:	d100      	bne.n	c020b12 <mbedtls_sha256_free+0xe>
    {
        return;
    }
    mbedtls_zeroize(ctx, sizeof(mbedtls_sha256_context));
}
 c020b10:	4770      	bx	lr
        *p++ = 0;
 c020b12:	7002      	strb	r2, [r0, #0]
 c020b14:	3001      	adds	r0, #1
 c020b16:	e7f9      	b.n	c020b0c <mbedtls_sha256_free+0x8>

0c020b18 <mbedtls_sha256_clone>:

void mbedtls_sha256_clone(mbedtls_sha256_context *dst,
                          const mbedtls_sha256_context *src)
{
 c020b18:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
 c020b1a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 c020b1e:	f7f6 ff2e 	bl	c01797e <memcpy>
}
 c020b22:	bd08      	pop	{r3, pc}

0c020b24 <mbedtls_sha256_starts_ret>:

int mbedtls_sha256_starts_ret(mbedtls_sha256_context *ctx, int is224)
{
 c020b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    /* HASH Configuration */
    if (HAL_HASH_DeInit(&ctx->hhash) != HAL_OK)
 c020b26:	1d06      	adds	r6, r0, #4
{
 c020b28:	4604      	mov	r4, r0
    if (HAL_HASH_DeInit(&ctx->hhash) != HAL_OK)
 c020b2a:	4630      	mov	r0, r6
{
 c020b2c:	460f      	mov	r7, r1
    if (HAL_HASH_DeInit(&ctx->hhash) != HAL_OK)
 c020b2e:	f001 fe30 	bl	c022792 <HAL_HASH_DeInit>
 c020b32:	b110      	cbz	r0, c020b3a <mbedtls_sha256_starts_ret+0x16>
    {
        return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 c020b34:	f06f 006f 	mvn.w	r0, #111	; 0x6f

    /* save hw context */
    HAL_HASH_ContextSaving(&ctx->hhash, ctx->ctx_save_regs);

    return 0;
}
 c020b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ctx->hhash.Init.DataType = HASH_DATATYPE_8B;
 c020b3a:	2320      	movs	r3, #32
    if (HAL_HASH_Init(&ctx->hhash) != HAL_OK)
 c020b3c:	4630      	mov	r0, r6
    ctx->hhash.Init.DataType = HASH_DATATYPE_8B;
 c020b3e:	6063      	str	r3, [r4, #4]
    if (HAL_HASH_Init(&ctx->hhash) != HAL_OK)
 c020b40:	f001 fdf6 	bl	c022730 <HAL_HASH_Init>
 c020b44:	4605      	mov	r5, r0
 c020b46:	2800      	cmp	r0, #0
 c020b48:	d1f4      	bne.n	c020b34 <mbedtls_sha256_starts_ret+0x10>
    ctx->is224 = is224;
 c020b4a:	4621      	mov	r1, r4
    HAL_HASH_ContextSaving(&ctx->hhash, ctx->ctx_save_regs);
 c020b4c:	4630      	mov	r0, r6
    ctx->is224 = is224;
 c020b4e:	f841 7b89 	str.w	r7, [r1], #137
    HAL_HASH_ContextSaving(&ctx->hhash, ctx->ctx_save_regs);
 c020b52:	f001 fe37 	bl	c0227c4 <HAL_HASH_ContextSaving>
    return 0;
 c020b56:	4628      	mov	r0, r5
 c020b58:	e7ee      	b.n	c020b38 <mbedtls_sha256_starts_ret+0x14>

0c020b5a <mbedtls_internal_sha256_process>:

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx, const unsigned char data[ST_SHA256_BLOCK_SIZE] )
{
 c020b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c020b5c:	4605      	mov	r5, r0
 c020b5e:	460e      	mov	r6, r1
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    /* restore hw context */
    HAL_HASH_ContextRestoring(&ctx->hhash, ctx->ctx_save_regs);
 c020b60:	1d04      	adds	r4, r0, #4
 c020b62:	f100 0789 	add.w	r7, r0, #137	; 0x89
 c020b66:	4639      	mov	r1, r7
 c020b68:	4620      	mov	r0, r4
 c020b6a:	f001 fe51 	bl	c022810 <HAL_HASH_ContextRestoring>

    if (ctx->is224 == 0) {
 c020b6e:	682b      	ldr	r3, [r5, #0]
        if (HAL_HASHEx_SHA256_Accmlt(&ctx->hhash, (uint8_t *) data, ST_SHA256_BLOCK_SIZE) != 0) {
 c020b70:	2240      	movs	r2, #64	; 0x40
 c020b72:	4631      	mov	r1, r6
 c020b74:	4620      	mov	r0, r4
    if (ctx->is224 == 0) {
 c020b76:	b95b      	cbnz	r3, c020b90 <mbedtls_internal_sha256_process+0x36>
        if (HAL_HASHEx_SHA256_Accmlt(&ctx->hhash, (uint8_t *) data, ST_SHA256_BLOCK_SIZE) != 0) {
 c020b78:	f001 ff70 	bl	c022a5c <HAL_HASHEx_SHA256_Accmlt>
 c020b7c:	b928      	cbnz	r0, c020b8a <mbedtls_internal_sha256_process+0x30>
            return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
        }
    }

    /* save hw context */
    HAL_HASH_ContextSaving(&ctx->hhash, ctx->ctx_save_regs);
 c020b7e:	4620      	mov	r0, r4
 c020b80:	4639      	mov	r1, r7
 c020b82:	f001 fe1f 	bl	c0227c4 <HAL_HASH_ContextSaving>

    return 0;
 c020b86:	2000      	movs	r0, #0
}
 c020b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 c020b8a:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 c020b8e:	e7fb      	b.n	c020b88 <mbedtls_internal_sha256_process+0x2e>
        if (HAL_HASHEx_SHA224_Accmlt(&ctx->hhash, (uint8_t *) data, ST_SHA256_BLOCK_SIZE) != 0) {
 c020b90:	f001 ff51 	bl	c022a36 <HAL_HASHEx_SHA224_Accmlt>
 c020b94:	e7f2      	b.n	c020b7c <mbedtls_internal_sha256_process+0x22>

0c020b96 <mbedtls_sha256_update_ret>:

int mbedtls_sha256_update_ret(mbedtls_sha256_context *ctx, const unsigned char *input, size_t ilen)
{
 c020b96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c020b9a:	4604      	mov	r4, r0
 c020b9c:	4616      	mov	r6, r2

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    /* restore hw context */
    HAL_HASH_ContextRestoring(&ctx->hhash, ctx->ctx_save_regs);
 c020b9e:	f100 0a89 	add.w	sl, r0, #137	; 0x89
 c020ba2:	1d07      	adds	r7, r0, #4
 c020ba4:	4638      	mov	r0, r7
{
 c020ba6:	4689      	mov	r9, r1
    HAL_HASH_ContextRestoring(&ctx->hhash, ctx->ctx_save_regs);
 c020ba8:	4651      	mov	r1, sl
 c020baa:	f001 fe31 	bl	c022810 <HAL_HASH_ContextRestoring>

    if (currentlen < (ST_SHA256_BLOCK_SIZE - ctx->sbuf_len))
 c020bae:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
 c020bb2:	f104 0848 	add.w	r8, r4, #72	; 0x48
 c020bb6:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 c020bba:	42b2      	cmp	r2, r6
 c020bbc:	4440      	add	r0, r8
 c020bbe:	d90e      	bls.n	c020bde <mbedtls_sha256_update_ret+0x48>
    {
        /* only store input data in context buffer */
        memcpy(ctx->sbuf + ctx->sbuf_len, input, currentlen);
 c020bc0:	4632      	mov	r2, r6
 c020bc2:	4649      	mov	r1, r9
 c020bc4:	f7f6 fedb 	bl	c01797e <memcpy>
        ctx->sbuf_len += currentlen;
 c020bc8:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
 c020bcc:	440e      	add	r6, r1
 c020bce:	f884 6088 	strb.w	r6, [r4, #136]	; 0x88
            memcpy(ctx->sbuf, input + ilen - ctx->sbuf_len, ctx->sbuf_len);
        }
    }

    /* save hw context */
    HAL_HASH_ContextSaving(&ctx->hhash, ctx->ctx_save_regs);
 c020bd2:	4638      	mov	r0, r7
 c020bd4:	4651      	mov	r1, sl
 c020bd6:	f001 fdf5 	bl	c0227c4 <HAL_HASH_ContextSaving>
    return 0;
 c020bda:	2000      	movs	r0, #0
 c020bdc:	e030      	b.n	c020c40 <mbedtls_sha256_update_ret+0xaa>
        memcpy(ctx->sbuf + ctx->sbuf_len, input, (ST_SHA256_BLOCK_SIZE - ctx->sbuf_len));
 c020bde:	4649      	mov	r1, r9
 c020be0:	f7f6 fecd 	bl	c01797e <memcpy>
        currentlen -= (ST_SHA256_BLOCK_SIZE - ctx->sbuf_len);
 c020be4:	f894 5088 	ldrb.w	r5, [r4, #136]	; 0x88
        if (ctx->is224 == 0)
 c020be8:	6823      	ldr	r3, [r4, #0]
        currentlen -= (ST_SHA256_BLOCK_SIZE - ctx->sbuf_len);
 c020bea:	f1a6 0240 	sub.w	r2, r6, #64	; 0x40
 c020bee:	4415      	add	r5, r2
            if (HAL_HASHEx_SHA256_Accmlt(&ctx->hhash, (uint8_t *)(ctx->sbuf), ST_SHA256_BLOCK_SIZE) != 0)
 c020bf0:	4641      	mov	r1, r8
 c020bf2:	2240      	movs	r2, #64	; 0x40
 c020bf4:	4638      	mov	r0, r7
        if (ctx->is224 == 0)
 c020bf6:	b983      	cbnz	r3, c020c1a <mbedtls_sha256_update_ret+0x84>
            if (HAL_HASHEx_SHA256_Accmlt(&ctx->hhash, (uint8_t *)(ctx->sbuf), ST_SHA256_BLOCK_SIZE) != 0)
 c020bf8:	f001 ff30 	bl	c022a5c <HAL_HASHEx_SHA256_Accmlt>
 c020bfc:	b9f0      	cbnz	r0, c020c3c <mbedtls_sha256_update_ret+0xa6>
        if (iter != 0)
 c020bfe:	2d3f      	cmp	r5, #63	; 0x3f
 c020c00:	d80e      	bhi.n	c020c20 <mbedtls_sha256_update_ret+0x8a>
        ctx->sbuf_len = currentlen % ST_SHA256_BLOCK_SIZE;
 c020c02:	f005 023f 	and.w	r2, r5, #63	; 0x3f
 c020c06:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
        if (ctx->sbuf_len != 0)
 c020c0a:	2a00      	cmp	r2, #0
 c020c0c:	d0e1      	beq.n	c020bd2 <mbedtls_sha256_update_ret+0x3c>
            memcpy(ctx->sbuf, input + ilen - ctx->sbuf_len, ctx->sbuf_len);
 c020c0e:	1ab1      	subs	r1, r6, r2
 c020c10:	4449      	add	r1, r9
 c020c12:	4640      	mov	r0, r8
 c020c14:	f7f6 feb3 	bl	c01797e <memcpy>
 c020c18:	e7db      	b.n	c020bd2 <mbedtls_sha256_update_ret+0x3c>
            if (HAL_HASHEx_SHA224_Accmlt(&ctx->hhash, (uint8_t *)(ctx->sbuf), ST_SHA256_BLOCK_SIZE) != 0)
 c020c1a:	f001 ff0c 	bl	c022a36 <HAL_HASHEx_SHA224_Accmlt>
 c020c1e:	e7ed      	b.n	c020bfc <mbedtls_sha256_update_ret+0x66>
 c020c20:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
            if (ctx->is224 == 0)
 c020c24:	6823      	ldr	r3, [r4, #0]
 c020c26:	f1c1 0140 	rsb	r1, r1, #64	; 0x40
 c020c2a:	4449      	add	r1, r9
 c020c2c:	f025 023f 	bic.w	r2, r5, #63	; 0x3f
                if (HAL_HASHEx_SHA256_Accmlt(&ctx->hhash, (uint8_t *)(input + ST_SHA256_BLOCK_SIZE - ctx->sbuf_len), (iter * ST_SHA256_BLOCK_SIZE)) != 0)
 c020c30:	4638      	mov	r0, r7
            if (ctx->is224 == 0)
 c020c32:	b93b      	cbnz	r3, c020c44 <mbedtls_sha256_update_ret+0xae>
                if (HAL_HASHEx_SHA256_Accmlt(&ctx->hhash, (uint8_t *)(input + ST_SHA256_BLOCK_SIZE - ctx->sbuf_len), (iter * ST_SHA256_BLOCK_SIZE)) != 0)
 c020c34:	f001 ff12 	bl	c022a5c <HAL_HASHEx_SHA256_Accmlt>
                if (HAL_HASHEx_SHA224_Accmlt(&ctx->hhash, (uint8_t *)(input + ST_SHA256_BLOCK_SIZE - ctx->sbuf_len), (iter * ST_SHA256_BLOCK_SIZE)) != 0)
 c020c38:	2800      	cmp	r0, #0
 c020c3a:	d0e2      	beq.n	c020c02 <mbedtls_sha256_update_ret+0x6c>
                return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 c020c3c:	f06f 006f 	mvn.w	r0, #111	; 0x6f
}
 c020c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (HAL_HASHEx_SHA224_Accmlt(&ctx->hhash, (uint8_t *)(input + ST_SHA256_BLOCK_SIZE - ctx->sbuf_len), (iter * ST_SHA256_BLOCK_SIZE)) != 0)
 c020c44:	f001 fef7 	bl	c022a36 <HAL_HASHEx_SHA224_Accmlt>
 c020c48:	e7f6      	b.n	c020c38 <mbedtls_sha256_update_ret+0xa2>

0c020c4a <mbedtls_sha256_finish_ret>:

int mbedtls_sha256_finish_ret(mbedtls_sha256_context *ctx, unsigned char output[32])
{
 c020c4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c020c4c:	4604      	mov	r4, r0
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /* restore hw context */
    HAL_HASH_ContextRestoring(&ctx->hhash, ctx->ctx_save_regs);
 c020c4e:	1d05      	adds	r5, r0, #4
{
 c020c50:	460e      	mov	r6, r1
    HAL_HASH_ContextRestoring(&ctx->hhash, ctx->ctx_save_regs);
 c020c52:	f100 0189 	add.w	r1, r0, #137	; 0x89
 c020c56:	4628      	mov	r0, r5
 c020c58:	f001 fdda 	bl	c022810 <HAL_HASH_ContextRestoring>
 c020c5c:	2303      	movs	r3, #3

    /* Last accumulation for pending bytes in sbuf_len, then trig processing and get digest */
    if (ctx->is224 == 0)
 c020c5e:	6820      	ldr	r0, [r4, #0]
    {
        if (HAL_HASHEx_SHA256_Accmlt_End(&ctx->hhash, ctx->sbuf, ctx->sbuf_len, output, ST_SHA256_TIMEOUT) != 0)
 c020c60:	9300      	str	r3, [sp, #0]
 c020c62:	f104 0148 	add.w	r1, r4, #72	; 0x48
 c020c66:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
 c020c6a:	4633      	mov	r3, r6
    if (ctx->is224 == 0)
 c020c6c:	b958      	cbnz	r0, c020c86 <mbedtls_sha256_finish_ret+0x3c>
        if (HAL_HASHEx_SHA256_Accmlt_End(&ctx->hhash, ctx->sbuf, ctx->sbuf_len, output, ST_SHA256_TIMEOUT) != 0)
 c020c6e:	4628      	mov	r0, r5
 c020c70:	f001 fefa 	bl	c022a68 <HAL_HASHEx_SHA256_Accmlt_End>
 c020c74:	b920      	cbnz	r0, c020c80 <mbedtls_sha256_finish_ret+0x36>
        {
            return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
        }
    }

    ctx->sbuf_len = 0;
 c020c76:	2000      	movs	r0, #0
 c020c78:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88

    return 0;
}
 c020c7c:	b002      	add	sp, #8
 c020c7e:	bd70      	pop	{r4, r5, r6, pc}
            return MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 c020c80:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 c020c84:	e7fa      	b.n	c020c7c <mbedtls_sha256_finish_ret+0x32>
        if (HAL_HASHEx_SHA224_Accmlt_End(&ctx->hhash, ctx->sbuf, ctx->sbuf_len, output, ST_SHA256_TIMEOUT) != 0)
 c020c86:	4628      	mov	r0, r5
 c020c88:	f001 fed9 	bl	c022a3e <HAL_HASHEx_SHA224_Accmlt_End>
 c020c8c:	e7f2      	b.n	c020c74 <mbedtls_sha256_finish_ret+0x2a>

0c020c8e <tfm_spm_hal_init_isolation_hw>:

struct mpu_armv8m_dev_t dev_mpu_s = { MPU_BASE };
struct mpu_armv8m_dev_t dev_mpu_ns = { MPU_BASE_NS };

enum tfm_plat_err_t tfm_spm_hal_init_isolation_hw(void)
{
 c020c8e:	b508      	push	{r3, lr}
  /* Configures non-secure memory spaces in the target */
  mpc_init_cfg();
 c020c90:	f000 fabe 	bl	c021210 <mpc_init_cfg>
  sau_and_idau_cfg();
 c020c94:	f000 f9fa 	bl	c02108c <sau_and_idau_cfg>
  ppc_init_cfg();
 c020c98:	f000 faea 	bl	c021270 <ppc_init_cfg>
  return TFM_PLAT_ERR_SUCCESS;
}
 c020c9c:	2000      	movs	r0, #0
 c020c9e:	bd08      	pop	{r3, pc}

0c020ca0 <tfm_spm_hal_configure_default_isolation>:

void tfm_spm_hal_configure_default_isolation(
  const struct tfm_spm_partition_platform_data_t *platform_data)
{
  if (platform_data)
 c020ca0:	b100      	cbz	r0, c020ca4 <tfm_spm_hal_configure_default_isolation+0x4>
 c020ca2:	e7fe      	b.n	c020ca2 <tfm_spm_hal_configure_default_isolation+0x2>
  {
    /* fix me : not supported*/
    while (1);
  }

}
 c020ca4:	4770      	bx	lr
	...

0c020ca8 <tfm_spm_hal_setup_isolation_hw>:
}
#endif /* !defined(TFM_PSA_API) */
#endif /* TFM_LVL != 1 */

enum tfm_plat_err_t tfm_spm_hal_setup_isolation_hw(void)
{
 c020ca8:	b570      	push	{r4, r5, r6, lr}
  mpu_armv8m_clean(&dev_mpu_s);
 c020caa:	4856      	ldr	r0, [pc, #344]	; (c020e04 <tfm_spm_hal_setup_isolation_hw+0x15c>)
{
 c020cac:	b086      	sub	sp, #24
  mpu_armv8m_clean(&dev_mpu_s);
 c020cae:	f7fe fa13 	bl	c01f0d8 <mpu_armv8m_clean>
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_CODE_IDX;
 c020cb2:	2401      	movs	r4, #1
  region_cfg.region_nr = MPU_REGION_VENEERS;
 c020cb4:	2300      	movs	r3, #0
  region_cfg.attr_access = MPU_ARMV8M_AP_RO_PRIV_UNPRIV;
 c020cb6:	2503      	movs	r5, #3
  region_cfg.region_base = memory_regions.veneer_base;
 c020cb8:	4a53      	ldr	r2, [pc, #332]	; (c020e08 <tfm_spm_hal_setup_isolation_hw+0x160>)
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c020cba:	4852      	ldr	r0, [pc, #328]	; (c020e04 <tfm_spm_hal_setup_isolation_hw+0x15c>)
  region_cfg.region_base = memory_regions.veneer_base;
 c020cbc:	68d1      	ldr	r1, [r2, #12]
  region_cfg.region_limit = memory_regions.veneer_limit;
 c020cbe:	6912      	ldr	r2, [r2, #16]
  region_cfg.region_base = memory_regions.veneer_base;
 c020cc0:	9102      	str	r1, [sp, #8]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c020cc2:	a901      	add	r1, sp, #4
  region_cfg.region_nr = MPU_REGION_VENEERS;
 c020cc4:	9301      	str	r3, [sp, #4]
  region_cfg.region_limit = memory_regions.veneer_limit;
 c020cc6:	9203      	str	r2, [sp, #12]
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_CODE_IDX;
 c020cc8:	9404      	str	r4, [sp, #16]
  region_cfg.attr_access = MPU_ARMV8M_AP_RO_PRIV_UNPRIV;
 c020cca:	f88d 5015 	strb.w	r5, [sp, #21]
  region_cfg.attr_sh = MPU_ARMV8M_SH_NONE;
 c020cce:	f88d 3016 	strb.w	r3, [sp, #22]
  region_cfg.attr_exec = MPU_ARMV8M_XN_EXEC_OK;
 c020cd2:	f88d 3014 	strb.w	r3, [sp, #20]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c020cd6:	f7fe f9c5 	bl	c01f064 <mpu_armv8m_region_enable>
 c020cda:	b148      	cbz	r0, c020cf0 <tfm_spm_hal_setup_isolation_hw+0x48>
#if TFM_LVL != 1
  if (tfm_spm_mpu_init() != SPM_ERR_OK)
  {
    ERROR_MSG("Failed to set up initial MPU configuration! Halting.");
 c020cdc:	484b      	ldr	r0, [pc, #300]	; (c020e0c <tfm_spm_hal_setup_isolation_hw+0x164>)
 c020cde:	f012 f95d 	bl	c032f9c <tfm_core_log_puts>
 c020ce2:	484b      	ldr	r0, [pc, #300]	; (c020e10 <tfm_spm_hal_setup_isolation_hw+0x168>)
 c020ce4:	f012 f95a 	bl	c032f9c <tfm_core_log_puts>
 c020ce8:	484a      	ldr	r0, [pc, #296]	; (c020e14 <tfm_spm_hal_setup_isolation_hw+0x16c>)
 c020cea:	f012 f957 	bl	c032f9c <tfm_core_log_puts>
 c020cee:	e7fe      	b.n	c020cee <tfm_spm_hal_setup_isolation_hw+0x46>
  region_cfg.region_base =
 c020cf0:	4b49      	ldr	r3, [pc, #292]	; (c020e18 <tfm_spm_hal_setup_isolation_hw+0x170>)
  region_cfg.attr_sh = MPU_ARMV8M_SH_NONE;
 c020cf2:	f88d 0016 	strb.w	r0, [sp, #22]
  region_cfg.region_base =
 c020cf6:	9302      	str	r3, [sp, #8]
  region_cfg.region_limit =
 c020cf8:	4b48      	ldr	r3, [pc, #288]	; (c020e1c <tfm_spm_hal_setup_isolation_hw+0x174>)
  region_cfg.attr_exec = MPU_ARMV8M_XN_EXEC_OK;
 c020cfa:	f88d 0014 	strb.w	r0, [sp, #20]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c020cfe:	a901      	add	r1, sp, #4
 c020d00:	4840      	ldr	r0, [pc, #256]	; (c020e04 <tfm_spm_hal_setup_isolation_hw+0x15c>)
  region_cfg.region_nr = MPU_REGION_TFM_UNPRIV_CODE;
 c020d02:	9401      	str	r4, [sp, #4]
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_CODE_IDX;
 c020d04:	e9cd 3403 	strd	r3, r4, [sp, #12]
  region_cfg.attr_access = MPU_ARMV8M_AP_RO_PRIV_UNPRIV;
 c020d08:	f88d 5015 	strb.w	r5, [sp, #21]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c020d0c:	f7fe f9aa 	bl	c01f064 <mpu_armv8m_region_enable>
 c020d10:	2800      	cmp	r0, #0
 c020d12:	d1e3      	bne.n	c020cdc <tfm_spm_hal_setup_isolation_hw+0x34>
  region_cfg.region_nr = MPU_REGION_TFM_UNPRIV_DATA;
 c020d14:	2602      	movs	r6, #2
  region_cfg.region_base =
 c020d16:	4b42      	ldr	r3, [pc, #264]	; (c020e20 <tfm_spm_hal_setup_isolation_hw+0x178>)
  region_cfg.attr_sh = MPU_ARMV8M_SH_NONE;
 c020d18:	f88d 0016 	strb.w	r0, [sp, #22]
  region_cfg.region_base =
 c020d1c:	9302      	str	r3, [sp, #8]
  region_cfg.region_limit =
 c020d1e:	4b41      	ldr	r3, [pc, #260]	; (c020e24 <tfm_spm_hal_setup_isolation_hw+0x17c>)
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c020d20:	a901      	add	r1, sp, #4
 c020d22:	4838      	ldr	r0, [pc, #224]	; (c020e04 <tfm_spm_hal_setup_isolation_hw+0x15c>)
  region_cfg.region_nr = MPU_REGION_TFM_UNPRIV_DATA;
 c020d24:	9601      	str	r6, [sp, #4]
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_DATA_IDX;
 c020d26:	e9cd 3603 	strd	r3, r6, [sp, #12]
  region_cfg.attr_access = MPU_ARMV8M_AP_RW_PRIV_UNPRIV;
 c020d2a:	f88d 4015 	strb.w	r4, [sp, #21]
  region_cfg.attr_exec = MPU_ARMV8M_XN_EXEC_NEVER;
 c020d2e:	f88d 4014 	strb.w	r4, [sp, #20]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c020d32:	f7fe f997 	bl	c01f064 <mpu_armv8m_region_enable>
 c020d36:	2800      	cmp	r0, #0
 c020d38:	d1d0      	bne.n	c020cdc <tfm_spm_hal_setup_isolation_hw+0x34>
  region_cfg.region_base =
 c020d3a:	4b3b      	ldr	r3, [pc, #236]	; (c020e28 <tfm_spm_hal_setup_isolation_hw+0x180>)
  region_cfg.attr_sh = MPU_ARMV8M_SH_NONE;
 c020d3c:	f88d 0016 	strb.w	r0, [sp, #22]
  region_cfg.region_base =
 c020d40:	9302      	str	r3, [sp, #8]
  region_cfg.region_limit =
 c020d42:	4b3a      	ldr	r3, [pc, #232]	; (c020e2c <tfm_spm_hal_setup_isolation_hw+0x184>)
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c020d44:	a901      	add	r1, sp, #4
 c020d46:	482f      	ldr	r0, [pc, #188]	; (c020e04 <tfm_spm_hal_setup_isolation_hw+0x15c>)
  region_cfg.region_nr = MPU_REGION_NS_STACK;
 c020d48:	9501      	str	r5, [sp, #4]
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_DATA_IDX;
 c020d4a:	e9cd 3603 	strd	r3, r6, [sp, #12]
  region_cfg.attr_access = MPU_ARMV8M_AP_RW_PRIV_UNPRIV;
 c020d4e:	f88d 4015 	strb.w	r4, [sp, #21]
  region_cfg.attr_exec = MPU_ARMV8M_XN_EXEC_NEVER;
 c020d52:	f88d 4014 	strb.w	r4, [sp, #20]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c020d56:	f7fe f985 	bl	c01f064 <mpu_armv8m_region_enable>
 c020d5a:	2800      	cmp	r0, #0
 c020d5c:	d1be      	bne.n	c020cdc <tfm_spm_hal_setup_isolation_hw+0x34>
  region_cfg.region_nr = PARTITION_REGION_RO;
 c020d5e:	2304      	movs	r3, #4
 c020d60:	9301      	str	r3, [sp, #4]
  region_cfg.region_base =
 c020d62:	4b33      	ldr	r3, [pc, #204]	; (c020e30 <tfm_spm_hal_setup_isolation_hw+0x188>)
  region_cfg.attr_sh = MPU_ARMV8M_SH_NONE;
 c020d64:	f88d 0016 	strb.w	r0, [sp, #22]
  region_cfg.region_base =
 c020d68:	9302      	str	r3, [sp, #8]
  region_cfg.region_limit =
 c020d6a:	4b32      	ldr	r3, [pc, #200]	; (c020e34 <tfm_spm_hal_setup_isolation_hw+0x18c>)
  region_cfg.attr_exec = MPU_ARMV8M_XN_EXEC_OK;
 c020d6c:	f88d 0014 	strb.w	r0, [sp, #20]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c020d70:	a901      	add	r1, sp, #4
 c020d72:	4824      	ldr	r0, [pc, #144]	; (c020e04 <tfm_spm_hal_setup_isolation_hw+0x15c>)
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_CODE_IDX;
 c020d74:	e9cd 3403 	strd	r3, r4, [sp, #12]
  region_cfg.attr_access = MPU_ARMV8M_AP_RO_PRIV_UNPRIV;
 c020d78:	f88d 5015 	strb.w	r5, [sp, #21]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c020d7c:	f7fe f972 	bl	c01f064 <mpu_armv8m_region_enable>
 c020d80:	2800      	cmp	r0, #0
 c020d82:	d1ab      	bne.n	c020cdc <tfm_spm_hal_setup_isolation_hw+0x34>
  region_cfg.region_nr = PARTITION_REGION_RW_STACK;
 c020d84:	2305      	movs	r3, #5
 c020d86:	9301      	str	r3, [sp, #4]
  region_cfg.region_base =
 c020d88:	4b2b      	ldr	r3, [pc, #172]	; (c020e38 <tfm_spm_hal_setup_isolation_hw+0x190>)
  region_cfg.attr_sh = MPU_ARMV8M_SH_NONE;
 c020d8a:	f88d 0016 	strb.w	r0, [sp, #22]
  region_cfg.region_base =
 c020d8e:	9302      	str	r3, [sp, #8]
  region_cfg.region_limit =
 c020d90:	4b2a      	ldr	r3, [pc, #168]	; (c020e3c <tfm_spm_hal_setup_isolation_hw+0x194>)
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c020d92:	a901      	add	r1, sp, #4
 c020d94:	481b      	ldr	r0, [pc, #108]	; (c020e04 <tfm_spm_hal_setup_isolation_hw+0x15c>)
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_DATA_IDX;
 c020d96:	e9cd 3603 	strd	r3, r6, [sp, #12]
  region_cfg.attr_access = MPU_ARMV8M_AP_RW_PRIV_UNPRIV;
 c020d9a:	f88d 4015 	strb.w	r4, [sp, #21]
  region_cfg.attr_exec = MPU_ARMV8M_XN_EXEC_NEVER;
 c020d9e:	f88d 4014 	strb.w	r4, [sp, #20]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c020da2:	f7fe f95f 	bl	c01f064 <mpu_armv8m_region_enable>
 c020da6:	2800      	cmp	r0, #0
 c020da8:	d198      	bne.n	c020cdc <tfm_spm_hal_setup_isolation_hw+0x34>
  region_cfg.region_base = TFM_NV_DATA_START;
 c020daa:	2206      	movs	r2, #6
 c020dac:	4b24      	ldr	r3, [pc, #144]	; (c020e40 <tfm_spm_hal_setup_isolation_hw+0x198>)
  region_cfg.attr_access = MPU_ARMV8M_AP_RW_PRIV_ONLY;
 c020dae:	f88d 0015 	strb.w	r0, [sp, #21]
  region_cfg.region_base = TFM_NV_DATA_START;
 c020db2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  region_cfg.region_limit = TFM_NV_DATA_LIMIT;
 c020db6:	f503 439f 	add.w	r3, r3, #20352	; 0x4f80
 c020dba:	337f      	adds	r3, #127	; 0x7f
  region_cfg.attr_sh = MPU_ARMV8M_SH_NONE;
 c020dbc:	f88d 0016 	strb.w	r0, [sp, #22]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c020dc0:	a901      	add	r1, sp, #4
 c020dc2:	4810      	ldr	r0, [pc, #64]	; (c020e04 <tfm_spm_hal_setup_isolation_hw+0x15c>)
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_DATANOCACHE_IDX;
 c020dc4:	e9cd 3503 	strd	r3, r5, [sp, #12]
  region_cfg.attr_exec = MPU_ARMV8M_XN_EXEC_NEVER;
 c020dc8:	f88d 4014 	strb.w	r4, [sp, #20]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c020dcc:	f7fe f94a 	bl	c01f064 <mpu_armv8m_region_enable>
 c020dd0:	4605      	mov	r5, r0
 c020dd2:	2800      	cmp	r0, #0
 c020dd4:	d182      	bne.n	c020cdc <tfm_spm_hal_setup_isolation_hw+0x34>
  mpu_armv8m_enable(&dev_mpu_s, PRIVILEGED_DEFAULT_ENABLE,
 c020dd6:	4622      	mov	r2, r4
 c020dd8:	4621      	mov	r1, r4
 c020dda:	480a      	ldr	r0, [pc, #40]	; (c020e04 <tfm_spm_hal_setup_isolation_hw+0x15c>)
 c020ddc:	f7fe f928 	bl	c01f030 <mpu_armv8m_enable>
      ;
    }
  }
#endif /* TFM_LVL != 1 */
  return TFM_PLAT_ERR_SUCCESS;
}
 c020de0:	4628      	mov	r0, r5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c020de2:	4b18      	ldr	r3, [pc, #96]	; (c020e44 <tfm_spm_hal_setup_isolation_hw+0x19c>)
 c020de4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 c020de6:	f042 0201 	orr.w	r2, r2, #1
 c020dea:	661a      	str	r2, [r3, #96]	; 0x60
 c020dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  SYSCFG->CSLCKR |= SYSCFG_CSLCKR_LOCKSMPU;
 c020dee:	4a16      	ldr	r2, [pc, #88]	; (c020e48 <tfm_spm_hal_setup_isolation_hw+0x1a0>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c020df0:	f003 0301 	and.w	r3, r3, #1
 c020df4:	9300      	str	r3, [sp, #0]
 c020df6:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->CSLCKR |= SYSCFG_CSLCKR_LOCKSMPU;
 c020df8:	6913      	ldr	r3, [r2, #16]
 c020dfa:	f043 0302 	orr.w	r3, r3, #2
 c020dfe:	6113      	str	r3, [r2, #16]
}
 c020e00:	b006      	add	sp, #24
 c020e02:	bd70      	pop	{r4, r5, r6, pc}
 c020e04:	30035b20 	.word	0x30035b20
 c020e08:	0c035064 	.word	0x0c035064
 c020e0c:	0c034fc8 	.word	0x0c034fc8
 c020e10:	0c034fd7 	.word	0x0c034fd7
 c020e14:	0c0370e3 	.word	0x0c0370e3
 c020e18:	0c0178c0 	.word	0x0c0178c0
 c020e1c:	0c01c560 	.word	0x0c01c560
 c020e20:	30031000 	.word	0x30031000
 c020e24:	30031020 	.word	0x30031020
 c020e28:	30030800 	.word	0x30030800
 c020e2c:	30031000 	.word	0x30031000
 c020e30:	0c01c560 	.word	0x0c01c560
 c020e34:	0c01c560 	.word	0x0c01c560
 c020e38:	30034b00 	.word	0x30034b00
 c020e3c:	30034b00 	.word	0x30034b00
 c020e40:	0c012000 	.word	0x0c012000
 c020e44:	50021000 	.word	0x50021000
 c020e48:	50010000 	.word	0x50010000

0c020e4c <tfm_spm_hal_get_ns_VTOR>:

uint32_t tfm_spm_hal_get_ns_VTOR(void)
{
  return memory_regions.non_secure_code_start;
}
 c020e4c:	4b01      	ldr	r3, [pc, #4]	; (c020e54 <tfm_spm_hal_get_ns_VTOR+0x8>)
 c020e4e:	6818      	ldr	r0, [r3, #0]
 c020e50:	4770      	bx	lr
 c020e52:	bf00      	nop
 c020e54:	0c035064 	.word	0x0c035064

0c020e58 <tfm_spm_hal_get_ns_MSP>:

uint32_t tfm_spm_hal_get_ns_MSP(void)
{
  return *((uint32_t *)memory_regions.non_secure_code_start);
 c020e58:	4b01      	ldr	r3, [pc, #4]	; (c020e60 <tfm_spm_hal_get_ns_MSP+0x8>)
 c020e5a:	681b      	ldr	r3, [r3, #0]
}
 c020e5c:	6818      	ldr	r0, [r3, #0]
 c020e5e:	4770      	bx	lr
 c020e60:	0c035064 	.word	0x0c035064

0c020e64 <tfm_spm_hal_get_ns_entry_point>:

uint32_t tfm_spm_hal_get_ns_entry_point(void)
{
  return *((uint32_t *)(memory_regions.non_secure_code_start + 4));
 c020e64:	4b01      	ldr	r3, [pc, #4]	; (c020e6c <tfm_spm_hal_get_ns_entry_point+0x8>)
 c020e66:	681b      	ldr	r3, [r3, #0]
}
 c020e68:	6858      	ldr	r0, [r3, #4]
 c020e6a:	4770      	bx	lr
 c020e6c:	0c035064 	.word	0x0c035064

0c020e70 <tfm_spm_hal_set_ns_mpu>:
  mpu_armv8m_enable(&dev_mpu_ns, PRIVILEGED_DEFAULT_ENABLE,
                    HARDFAULT_NMI_ENABLE);

  /* NS MPU config not locked: User choice. */
#endif
}
 c020e70:	4770      	bx	lr
	...

0c020e74 <tfm_spm_hal_set_secure_irq_priority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 c020e74:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c020e76:	bfac      	ite	ge
 c020e78:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c020e7c:	4b06      	ldrlt	r3, [pc, #24]	; (c020e98 <tfm_spm_hal_set_secure_irq_priority+0x24>)
 c020e7e:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c020e82:	bfab      	itete	ge
 c020e84:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c020e88:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c020e8c:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c020e90:	5419      	strblt	r1, [r3, r0]
                                                        uint32_t priority)
{
  uint32_t quantized_priority = priority >> (8U - __NVIC_PRIO_BITS);
  NVIC_SetPriority(irq_line, quantized_priority);
  return TFM_PLAT_ERR_SUCCESS;
}
 c020e92:	2000      	movs	r0, #0
 c020e94:	4770      	bx	lr
 c020e96:	bf00      	nop
 c020e98:	e000ed14 	.word	0xe000ed14

0c020e9c <tfm_spm_hal_clear_pending_irq>:
  if ((int32_t)(IRQn) >= 0)
 c020e9c:	2800      	cmp	r0, #0
 c020e9e:	db09      	blt.n	c020eb4 <tfm_spm_hal_clear_pending_irq+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c020ea0:	2201      	movs	r2, #1
 c020ea2:	0943      	lsrs	r3, r0, #5
 c020ea4:	f000 001f 	and.w	r0, r0, #31
 c020ea8:	fa02 f000 	lsl.w	r0, r2, r0
 c020eac:	4a02      	ldr	r2, [pc, #8]	; (c020eb8 <tfm_spm_hal_clear_pending_irq+0x1c>)
 c020eae:	3360      	adds	r3, #96	; 0x60
 c020eb0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

void tfm_spm_hal_clear_pending_irq(IRQn_Type irq_line)
{
  NVIC_ClearPendingIRQ(irq_line);
}
 c020eb4:	4770      	bx	lr
 c020eb6:	bf00      	nop
 c020eb8:	e000e100 	.word	0xe000e100

0c020ebc <tfm_spm_hal_enable_irq>:
  if ((int32_t)(IRQn) >= 0)
 c020ebc:	2800      	cmp	r0, #0
 c020ebe:	db08      	blt.n	c020ed2 <tfm_spm_hal_enable_irq+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c020ec0:	2301      	movs	r3, #1
 c020ec2:	0942      	lsrs	r2, r0, #5
 c020ec4:	f000 001f 	and.w	r0, r0, #31
 c020ec8:	fa03 f000 	lsl.w	r0, r3, r0
 c020ecc:	4b01      	ldr	r3, [pc, #4]	; (c020ed4 <tfm_spm_hal_enable_irq+0x18>)
 c020ece:	f843 0022 	str.w	r0, [r3, r2, lsl #2]

void tfm_spm_hal_enable_irq(IRQn_Type irq_line)
{
  NVIC_EnableIRQ(irq_line);
}
 c020ed2:	4770      	bx	lr
 c020ed4:	e000e100 	.word	0xe000e100

0c020ed8 <tfm_spm_hal_disable_irq>:
  if ((int32_t)(IRQn) >= 0)
 c020ed8:	2800      	cmp	r0, #0
 c020eda:	db0d      	blt.n	c020ef8 <tfm_spm_hal_disable_irq+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c020edc:	2201      	movs	r2, #1
 c020ede:	0943      	lsrs	r3, r0, #5
 c020ee0:	f000 001f 	and.w	r0, r0, #31
 c020ee4:	fa02 f000 	lsl.w	r0, r2, r0
 c020ee8:	4a04      	ldr	r2, [pc, #16]	; (c020efc <tfm_spm_hal_disable_irq+0x24>)
 c020eea:	3320      	adds	r3, #32
 c020eec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 c020ef0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 c020ef4:	f3bf 8f6f 	isb	sy

void tfm_spm_hal_disable_irq(IRQn_Type irq_line)
{
  NVIC_DisableIRQ(irq_line);
}
 c020ef8:	4770      	bx	lr
 c020efa:	bf00      	nop
 c020efc:	e000e100 	.word	0xe000e100

0c020f00 <tfm_spm_hal_set_irq_target_state>:
  IRQn_Type irq_line,
  enum irq_target_state_t target_state)
{
  uint32_t result;

  if (target_state == TFM_IRQ_TARGET_STATE_SECURE)
 c020f00:	b9c9      	cbnz	r1, c020f36 <tfm_spm_hal_set_irq_target_state+0x36>
  if ((int32_t)(IRQn) >= 0)
 c020f02:	2800      	cmp	r0, #0
 c020f04:	db15      	blt.n	c020f32 <tfm_spm_hal_set_irq_target_state+0x32>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
 c020f06:	2101      	movs	r1, #1
 c020f08:	0943      	lsrs	r3, r0, #5
 c020f0a:	009b      	lsls	r3, r3, #2
 c020f0c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 c020f10:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 c020f14:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
 c020f18:	f000 001f 	and.w	r0, r0, #31
 c020f1c:	4081      	lsls	r1, r0
 c020f1e:	ea22 0201 	bic.w	r2, r2, r1
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
 c020f22:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 c020f26:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
 c020f2a:	40c1      	lsrs	r1, r0
 c020f2c:	f001 0101 	and.w	r1, r1, #1
    result = NVIC_SetTargetState(irq_line);
  }

  if (result)
  {
    return TFM_IRQ_TARGET_STATE_NON_SECURE;
 c020f30:	b2c9      	uxtb	r1, r1
  }
  else
  {
    return TFM_IRQ_TARGET_STATE_SECURE;
  }
}
 c020f32:	4608      	mov	r0, r1
 c020f34:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
 c020f36:	2800      	cmp	r0, #0
 c020f38:	db0d      	blt.n	c020f56 <tfm_spm_hal_set_irq_target_state+0x56>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
 c020f3a:	2201      	movs	r2, #1
 c020f3c:	0943      	lsrs	r3, r0, #5
 c020f3e:	009b      	lsls	r3, r3, #2
 c020f40:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 c020f44:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 c020f48:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
 c020f4c:	f000 001f 	and.w	r0, r0, #31
 c020f50:	4082      	lsls	r2, r0
 c020f52:	430a      	orrs	r2, r1
 c020f54:	e7e5      	b.n	c020f22 <tfm_spm_hal_set_irq_target_state+0x22>
    return TFM_IRQ_TARGET_STATE_SECURE;
 c020f56:	2100      	movs	r1, #0
 c020f58:	e7eb      	b.n	c020f32 <tfm_spm_hal_set_irq_target_state+0x32>

0c020f5a <tfm_spm_hal_enable_fault_handlers>:

enum tfm_plat_err_t tfm_spm_hal_enable_fault_handlers(void)
{
    return enable_fault_handlers();
 c020f5a:	f000 b823 	b.w	c020fa4 <enable_fault_handlers>

0c020f5e <tfm_spm_hal_system_reset_cfg>:

enum tfm_plat_err_t tfm_spm_hal_system_reset_cfg(void)
{
  /*    return system_reset_cfg();*/
  return TFM_PLAT_ERR_SUCCESS;
}
 c020f5e:	2000      	movs	r0, #0
 c020f60:	4770      	bx	lr

0c020f62 <tfm_spm_hal_nvic_interrupt_target_state_cfg>:
 c020f62:	2000      	movs	r0, #0
 c020f64:	4770      	bx	lr

0c020f66 <tfm_spm_hal_nvic_interrupt_enable>:
 c020f66:	2000      	movs	r0, #0
 c020f68:	4770      	bx	lr
	...

0c020f6c <SystemInit>:
void SystemInit(void)
{
  __IO uint32_t tmp;
#if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
  extern uint32_t __Vectors;
  SCB->VTOR = (uint32_t) &__Vectors;
 c020f6c:	4a09      	ldr	r2, [pc, #36]	; (c020f94 <SystemInit+0x28>)
 c020f6e:	4b0a      	ldr	r3, [pc, #40]	; (c020f98 <SystemInit+0x2c>)
{
 c020f70:	b082      	sub	sp, #8
  SCB->VTOR = (uint32_t) &__Vectors;
 c020f72:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */


  /* Lock Secure Vector Table */
  /* Enable SYSCFG interface clock */
  RCC->APB2ENR       |= RCC_APB2ENR_SYSCFGEN;
 c020f74:	4b09      	ldr	r3, [pc, #36]	; (c020f9c <SystemInit+0x30>)
 c020f76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 c020f78:	f042 0201 	orr.w	r2, r2, #1
 c020f7c:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmp = RCC->APB2ENR;
 c020f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  SYSCFG->CSLCKR |= SYSCFG_CSLCKR_LOCKSVTAIRCR;
 c020f80:	4a07      	ldr	r2, [pc, #28]	; (c020fa0 <SystemInit+0x34>)
  tmp = RCC->APB2ENR;
 c020f82:	9301      	str	r3, [sp, #4]
  SYSCFG->CSLCKR |= SYSCFG_CSLCKR_LOCKSVTAIRCR;
 c020f84:	6913      	ldr	r3, [r2, #16]
 c020f86:	f043 0301 	orr.w	r3, r3, #1
 c020f8a:	6113      	str	r3, [r2, #16]
  (void)(tmp);
 c020f8c:	9b01      	ldr	r3, [sp, #4]

}
 c020f8e:	b002      	add	sp, #8
 c020f90:	4770      	bx	lr
 c020f92:	bf00      	nop
 c020f94:	0c017400 	.word	0x0c017400
 c020f98:	e000ed00 	.word	0xe000ed00
 c020f9c:	50021000 	.word	0x50021000
 c020fa0:	50010000 	.word	0x50010000

0c020fa4 <enable_fault_handlers>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c020fa4:	2000      	movs	r0, #0
 c020fa6:	4b03      	ldr	r3, [pc, #12]	; (c020fb4 <enable_fault_handlers+0x10>)
 c020fa8:	76d8      	strb	r0, [r3, #27]

enum tfm_plat_err_t enable_fault_handlers(void)
{
  NVIC_SetPriority(SecureFault_IRQn, 0);
  /* Enables BUS, MEM, USG and Secure faults */
  SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk
 c020faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c020fac:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 c020fb0:	625a      	str	r2, [r3, #36]	; 0x24
                | SCB_SHCSR_BUSFAULTENA_Msk
                | SCB_SHCSR_MEMFAULTENA_Msk
                | SCB_SHCSR_SECUREFAULTENA_Msk;
  return TFM_PLAT_ERR_SUCCESS;

}
 c020fb2:	4770      	bx	lr
 c020fb4:	e000ed00 	.word	0xe000ed00

0c020fb8 <pinmux_conf_init_ns>:
}
/*----------------- GPIO Pin mux configuration for non secure --------------- */
/*  set all pin mux to un-secure */
void pinmux_conf_init_ns(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c020fb8:	4b32      	ldr	r3, [pc, #200]	; (c021084 <pinmux_conf_init_ns+0xcc>)
{
 c020fba:	b088      	sub	sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c020fbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c020fbe:	f042 0201 	orr.w	r2, r2, #1
 c020fc2:	64da      	str	r2, [r3, #76]	; 0x4c
 c020fc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c020fc6:	f002 0201 	and.w	r2, r2, #1
 c020fca:	9200      	str	r2, [sp, #0]
 c020fcc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c020fce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c020fd0:	f042 0202 	orr.w	r2, r2, #2
 c020fd4:	64da      	str	r2, [r3, #76]	; 0x4c
 c020fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c020fd8:	f002 0202 	and.w	r2, r2, #2
 c020fdc:	9201      	str	r2, [sp, #4]
 c020fde:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c020fe0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c020fe2:	f042 0204 	orr.w	r2, r2, #4
 c020fe6:	64da      	str	r2, [r3, #76]	; 0x4c
 c020fe8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c020fea:	f002 0204 	and.w	r2, r2, #4
 c020fee:	9202      	str	r2, [sp, #8]
 c020ff0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c020ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c020ff4:	f042 0208 	orr.w	r2, r2, #8
 c020ff8:	64da      	str	r2, [r3, #76]	; 0x4c
 c020ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c020ffc:	f002 0208 	and.w	r2, r2, #8
 c021000:	9203      	str	r2, [sp, #12]
 c021002:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 c021004:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c021006:	f042 0210 	orr.w	r2, r2, #16
 c02100a:	64da      	str	r2, [r3, #76]	; 0x4c
 c02100c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c02100e:	f002 0210 	and.w	r2, r2, #16
 c021012:	9204      	str	r2, [sp, #16]
 c021014:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 c021016:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c021018:	f042 0220 	orr.w	r2, r2, #32
 c02101c:	64da      	str	r2, [r3, #76]	; 0x4c
 c02101e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c021020:	f002 0220 	and.w	r2, r2, #32
 c021024:	9205      	str	r2, [sp, #20]
 c021026:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c021028:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c02102a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 c02102e:	64da      	str	r2, [r3, #76]	; 0x4c
 c021030:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c021032:	f002 0240 	and.w	r2, r2, #64	; 0x40
 c021036:	9206      	str	r2, [sp, #24]
 c021038:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c02103a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c02103c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 c021040:	64da      	str	r2, [r3, #76]	; 0x4c
 c021042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  GPIOA_S->SECCFGR = 0x0;
 c021044:	4a10      	ldr	r2, [pc, #64]	; (c021088 <pinmux_conf_init_ns+0xd0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c021046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c02104a:	9307      	str	r3, [sp, #28]
 c02104c:	9b07      	ldr	r3, [sp, #28]
  GPIOA_S->SECCFGR = 0x0;
 c02104e:	2300      	movs	r3, #0
 c021050:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOB_S->SECCFGR = 0x0;
 c021052:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  GPIOC_S->SECCFGR = 0x0;
 c021056:	f8c2 3830 	str.w	r3, [r2, #2096]	; 0x830
  GPIOD_S->SECCFGR = 0x0;
 c02105a:	f8c2 3c30 	str.w	r3, [r2, #3120]	; 0xc30
  GPIOB_S->SECCFGR = 0x0;
 c02105e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  GPIOE_S->SECCFGR = 0x0;
 c021062:	f8c2 3c30 	str.w	r3, [r2, #3120]	; 0xc30
  GPIOC_S->SECCFGR = 0x0;
 c021066:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  GPIOF_S->SECCFGR = 0x0;
 c02106a:	f8c2 3c30 	str.w	r3, [r2, #3120]	; 0xc30
  GPIOD_S->SECCFGR = 0x0;
 c02106e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  GPIOG_S->SECCFGR = 0x0;
 c021072:	f8c2 3c30 	str.w	r3, [r2, #3120]	; 0xc30
  GPIOE_S->SECCFGR = 0x0;
 c021076:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  GPIOH_S->SECCFGR = 0x0;
 c02107a:	f8c2 3c30 	str.w	r3, [r2, #3120]	; 0xc30

}
 c02107e:	b008      	add	sp, #32
 c021080:	4770      	bx	lr
 c021082:	bf00      	nop
 c021084:	50021000 	.word	0x50021000
 c021088:	52020000 	.word	0x52020000

0c02108c <sau_and_idau_cfg>:
/*------------------- SAU/IDAU configuration functions -----------------------*/

void sau_and_idau_cfg(void)
{
  SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c02108c:	4a2d      	ldr	r2, [pc, #180]	; (c021144 <sau_and_idau_cfg+0xb8>)
{
 c02108e:	b082      	sub	sp, #8
  SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c021090:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 c021094:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c021098:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
               ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

  FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c02109c:	f8d2 3234 	ldr.w	r3, [r2, #564]	; 0x234
               ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos) & FPU_FPCCR_TS_Msk) |
 c0210a0:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
               ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c0210a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0210a8:	f8c2 3234 	str.w	r3, [r2, #564]	; 0x234
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
 c0210ac:	4b26      	ldr	r3, [pc, #152]	; (c021148 <sau_and_idau_cfg+0xbc>)
 c0210ae:	681a      	ldr	r2, [r3, #0]
 c0210b0:	f022 0201 	bic.w	r2, r2, #1
 c0210b4:	601a      	str	r2, [r3, #0]

  /* Disable SAU */
  TZ_SAU_Disable();

  /* Configures SAU regions to be non-secure */
  SAU->RNR  = TFM_NS_REGION_CODE;
 c0210b6:	2200      	movs	r2, #0
 c0210b8:	609a      	str	r2, [r3, #8]
  SAU->RBAR = (memory_regions.non_secure_partition_base
 c0210ba:	4a24      	ldr	r2, [pc, #144]	; (c02114c <sau_and_idau_cfg+0xc0>)
               & SAU_RBAR_BADDR_Msk);
 c0210bc:	6851      	ldr	r1, [r2, #4]
 c0210be:	f021 011f 	bic.w	r1, r1, #31
  SAU->RBAR = (memory_regions.non_secure_partition_base
 c0210c2:	60d9      	str	r1, [r3, #12]
  SAU->RLAR = (memory_regions.non_secure_partition_limit
 c0210c4:	4922      	ldr	r1, [pc, #136]	; (c021150 <sau_and_idau_cfg+0xc4>)
 c0210c6:	6119      	str	r1, [r3, #16]
               & SAU_RLAR_LADDR_Msk)
              | SAU_RLAR_ENABLE_Msk;

  SAU->RNR  = TFM_NS_REGION_DATA;
 c0210c8:	2101      	movs	r1, #1
 c0210ca:	6099      	str	r1, [r3, #8]
  SAU->RBAR = (NS_DATA_START & SAU_RBAR_BADDR_Msk);
 c0210cc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 c0210d0:	60d9      	str	r1, [r3, #12]
  SAU->RLAR = (NS_DATA_LIMIT & SAU_RLAR_LADDR_Msk) | SAU_RLAR_ENABLE_Msk;
 c0210d2:	f501 313f 	add.w	r1, r1, #195584	; 0x2fc00
 c0210d6:	f201 31e1 	addw	r1, r1, #993	; 0x3e1
 c0210da:	6119      	str	r1, [r3, #16]

  /* Configures veneers region to be non-secure callable */
  SAU->RNR  = TFM_NS_REGION_VENEER;
 c0210dc:	2102      	movs	r1, #2
 c0210de:	6099      	str	r1, [r3, #8]
  SAU->RBAR = (memory_regions.veneer_base  & SAU_RBAR_BADDR_Msk);
 c0210e0:	68d1      	ldr	r1, [r2, #12]
  SAU->RLAR = (memory_regions.veneer_limit & SAU_RLAR_LADDR_Msk)
 c0210e2:	6912      	ldr	r2, [r2, #16]
  SAU->RBAR = (memory_regions.veneer_base  & SAU_RBAR_BADDR_Msk);
 c0210e4:	f021 011f 	bic.w	r1, r1, #31
  SAU->RLAR = (memory_regions.veneer_limit & SAU_RLAR_LADDR_Msk)
 c0210e8:	f022 021f 	bic.w	r2, r2, #31
              | SAU_RLAR_ENABLE_Msk
              | SAU_RLAR_NSC_Msk;
 c0210ec:	f042 0203 	orr.w	r2, r2, #3
  SAU->RBAR = (memory_regions.veneer_base  & SAU_RBAR_BADDR_Msk);
 c0210f0:	60d9      	str	r1, [r3, #12]
  SAU->RLAR = (memory_regions.veneer_limit & SAU_RLAR_LADDR_Msk)
 c0210f2:	611a      	str	r2, [r3, #16]

  /* Configure the peripherals space */
  SAU->RNR  = TFM_NS_REGION_PERIPH_1;
 c0210f4:	2203      	movs	r2, #3
 c0210f6:	609a      	str	r2, [r3, #8]
  SAU->RBAR = (PERIPHERALS_BASE_NS_START & SAU_RBAR_BADDR_Msk);
 c0210f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c0210fc:	60da      	str	r2, [r3, #12]
  SAU->RLAR = (PERIPHERALS_BASE_NS_END & SAU_RLAR_LADDR_Msk)
 c0210fe:	4a15      	ldr	r2, [pc, #84]	; (c021154 <sau_and_idau_cfg+0xc8>)
 c021100:	611a      	str	r2, [r3, #16]
              | SAU_RLAR_ENABLE_Msk;
  /* Configure the peripherals space 2 to access package information */
  SAU->RNR  = TFM_NS_REGION_PERIPH_2;
 c021102:	2204      	movs	r2, #4
 c021104:	609a      	str	r2, [r3, #8]
  SAU->RBAR = (PACKAGE_BASE & SAU_RBAR_BADDR_Msk);
 c021106:	4a14      	ldr	r2, [pc, #80]	; (c021158 <sau_and_idau_cfg+0xcc>)
 c021108:	60da      	str	r2, [r3, #12]
  SAU->RLAR = ((PACKAGE_BASE + 0xfff) & SAU_RLAR_LADDR_Msk)
 c02110a:	f602 72e1 	addw	r2, r2, #4065	; 0xfe1
 c02110e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 c021110:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 c021114:	f3bf 8f6f 	isb	sy
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
 c021118:	681a      	ldr	r2, [r3, #0]
 c02111a:	f042 0201 	orr.w	r2, r2, #1
 c02111e:	601a      	str	r2, [r3, #0]

  /* Enable SAU */
  TZ_SAU_Enable();

  /* Lock SAU config */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c021120:	4b0e      	ldr	r3, [pc, #56]	; (c02115c <sau_and_idau_cfg+0xd0>)
 c021122:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 c021124:	f042 0201 	orr.w	r2, r2, #1
 c021128:	661a      	str	r2, [r3, #96]	; 0x60
 c02112a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  SYSCFG->CSLCKR |= SYSCFG_CSLCKR_LOCKSAU;
 c02112c:	4a0c      	ldr	r2, [pc, #48]	; (c021160 <sau_and_idau_cfg+0xd4>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c02112e:	f003 0301 	and.w	r3, r3, #1
 c021132:	9301      	str	r3, [sp, #4]
 c021134:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->CSLCKR |= SYSCFG_CSLCKR_LOCKSAU;
 c021136:	6913      	ldr	r3, [r2, #16]
 c021138:	f043 0304 	orr.w	r3, r3, #4
 c02113c:	6113      	str	r3, [r2, #16]
}
 c02113e:	b002      	add	sp, #8
 c021140:	4770      	bx	lr
 c021142:	bf00      	nop
 c021144:	e000ed00 	.word	0xe000ed00
 c021148:	e000edd0 	.word	0xe000edd0
 c02114c:	0c035064 	.word	0x0c035064
 c021150:	90223fe1 	.word	0x90223fe1
 c021154:	4fffffe1 	.word	0x4fffffe1
 c021158:	0bfa0500 	.word	0x0bfa0500
 c02115c:	50021000 	.word	0x50021000
 c021160:	50010000 	.word	0x50010000

0c021164 <unsecure_sram1>:
void  unsecure_sram2(uint32_t start, uint32_t end);
void  lock_sram_config(uint32_t MemBaseAddress);

/*------------------- Memory configuration functions -------------------------*/
void  unsecure_sram1(uint32_t start, uint32_t end)
{
 c021164:	b570      	push	{r4, r5, r6, lr}
  uint32_t regwrite = 0xffffffff;
  uint32_t index;
  uint32_t block_start = (start - 0x20000000) / (256);
  uint32_t block_end = block_start + ((end - start) + 1) / (256);

  if (start & 0xff)
 c021166:	f010 0fff 	tst.w	r0, #255	; 0xff
{
 c02116a:	b09c      	sub	sp, #112	; 0x70
 c02116c:	4605      	mov	r5, r0
 c02116e:	460c      	mov	r4, r1
  if (start & 0xff)
 c021170:	d000      	beq.n	c021174 <unsecure_sram1+0x10>
 c021172:	e7fe      	b.n	c021172 <unsecure_sram1+0xe>
    /*  Check alignment to avoid further problem  */
    /*  FIX ME  */
    while (1);

  if (HAL_GTZC_MPCBB_GetConfigMem(SRAM1_BASE, &MPCBB_desc) != HAL_OK)
 c021174:	a901      	add	r1, sp, #4
 c021176:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c02117a:	f001 f9a5 	bl	c0224c8 <HAL_GTZC_MPCBB_GetConfigMem>
 c02117e:	b100      	cbz	r0, c021182 <unsecure_sram1+0x1e>
 c021180:	e7fe      	b.n	c021180 <unsecure_sram1+0x1c>
  uint32_t block_end = block_start + ((end - start) + 1) / (256);
 c021182:	1c61      	adds	r1, r4, #1
  uint32_t block_start = (start - 0x20000000) / (256);
 c021184:	f105 4260 	add.w	r2, r5, #3758096384	; 0xe0000000
  uint32_t block_end = block_start + ((end - start) + 1) / (256);
 c021188:	1b49      	subs	r1, r1, r5
  uint32_t regwrite = 0xffffffff;
 c02118a:	f04f 33ff 	mov.w	r3, #4294967295
    {
      regwrite = 0xffffffff;
    }
    if ((index >= block_start) && (index < block_end))
    {
      regwrite = regwrite & ~(1 << (index & 0x1f));
 c02118e:	2501      	movs	r5, #1
  uint32_t block_start = (start - 0x20000000) / (256);
 c021190:	0a12      	lsrs	r2, r2, #8
  uint32_t block_end = block_start + ((end - start) + 1) / (256);
 c021192:	eb02 2111 	add.w	r1, r2, r1, lsr #8
    if (!(index & 0x1f))
 c021196:	f010 041f 	ands.w	r4, r0, #31
 c02119a:	d01d      	beq.n	c0211d8 <unsecure_sram1+0x74>
    if ((index >= block_start) && (index < block_end))
 c02119c:	4282      	cmp	r2, r0
 c02119e:	d805      	bhi.n	c0211ac <unsecure_sram1+0x48>
 c0211a0:	4281      	cmp	r1, r0
 c0211a2:	d903      	bls.n	c0211ac <unsecure_sram1+0x48>
      regwrite = regwrite & ~(1 << (index & 0x1f));
 c0211a4:	fa05 f604 	lsl.w	r6, r5, r4
 c0211a8:	ea23 0306 	bic.w	r3, r3, r6
    }
    /* write register when 32 sub block are set  */
    if ((index & 0x1f) == 0x1f)
 c0211ac:	2c1f      	cmp	r4, #31
 c0211ae:	d105      	bne.n	c0211bc <unsecure_sram1+0x58>
    {
      MPCBB_desc.AttributeConfig.MPCBB_SecConfig_array[index >> 5] = regwrite;
 c0211b0:	0944      	lsrs	r4, r0, #5
 c0211b2:	ae1c      	add	r6, sp, #112	; 0x70
 c0211b4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 c0211b8:	f844 3c64 	str.w	r3, [r4, #-100]
  for (index = 0; index < 768; index++)
 c0211bc:	3001      	adds	r0, #1
 c0211be:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 c0211c2:	d1e8      	bne.n	c021196 <unsecure_sram1+0x32>
    }
  }
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_desc) != HAL_OK)
 c0211c4:	a901      	add	r1, sp, #4
 c0211c6:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c0211ca:	f001 f93d 	bl	c022448 <HAL_GTZC_MPCBB_ConfigMem>
 c0211ce:	b150      	cbz	r0, c0211e6 <unsecure_sram1+0x82>
 c0211d0:	e7fe      	b.n	c0211d0 <unsecure_sram1+0x6c>
      regwrite = 0xffffffff;
 c0211d2:	f04f 33ff 	mov.w	r3, #4294967295
 c0211d6:	e7e5      	b.n	c0211a4 <unsecure_sram1+0x40>
    if ((index >= block_start) && (index < block_end))
 c0211d8:	4282      	cmp	r2, r0
 c0211da:	d801      	bhi.n	c0211e0 <unsecure_sram1+0x7c>
 c0211dc:	4281      	cmp	r1, r0
 c0211de:	d8f8      	bhi.n	c0211d2 <unsecure_sram1+0x6e>
      regwrite = 0xffffffff;
 c0211e0:	f04f 33ff 	mov.w	r3, #4294967295
 c0211e4:	e7ea      	b.n	c0211bc <unsecure_sram1+0x58>
    /* FIX ME */
    while (1);

}
 c0211e6:	b01c      	add	sp, #112	; 0x70
 c0211e8:	bd70      	pop	{r4, r5, r6, pc}

0c0211ea <lock_sram_config>:
    while (1);

}

void  lock_sram_config(uint32_t MemBaseAddress)
{
 c0211ea:	b510      	push	{r4, lr}
 c0211ec:	b09c      	sub	sp, #112	; 0x70
  MPCBB_ConfigTypeDef MPCBB_desc;
  uint32_t index;
  if (HAL_GTZC_MPCBB_GetConfigMem(MemBaseAddress, &MPCBB_desc) != HAL_OK)
 c0211ee:	a901      	add	r1, sp, #4
{
 c0211f0:	4604      	mov	r4, r0
  if (HAL_GTZC_MPCBB_GetConfigMem(MemBaseAddress, &MPCBB_desc) != HAL_OK)
 c0211f2:	f001 f969 	bl	c0224c8 <HAL_GTZC_MPCBB_GetConfigMem>
 c0211f6:	b940      	cbnz	r0, c02120a <lock_sram_config+0x20>
    /* FIX ME */
    while (1);

  for (index = 0; index < GTZC_MCPBB_NB_LCK_VCTR_REG_MAX; index ++)
  {
    MPCBB_desc.AttributeConfig.MPCBB_LockConfig_array[index] = 0xffffffff;
 c0211f8:	f04f 33ff 	mov.w	r3, #4294967295
  }
  if (HAL_GTZC_MPCBB_ConfigMem(MemBaseAddress, &MPCBB_desc) != HAL_OK)
 c0211fc:	a901      	add	r1, sp, #4
 c0211fe:	4620      	mov	r0, r4
    MPCBB_desc.AttributeConfig.MPCBB_LockConfig_array[index] = 0xffffffff;
 c021200:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(MemBaseAddress, &MPCBB_desc) != HAL_OK)
 c021202:	f001 f921 	bl	c022448 <HAL_GTZC_MPCBB_ConfigMem>
 c021206:	b108      	cbz	r0, c02120c <lock_sram_config+0x22>
 c021208:	e7fe      	b.n	c021208 <lock_sram_config+0x1e>
 c02120a:	e7fe      	b.n	c02120a <lock_sram_config+0x20>
    /* FIX ME */
    while (1);
}
 c02120c:	b01c      	add	sp, #112	; 0x70
 c02120e:	bd10      	pop	{r4, pc}

0c021210 <mpc_init_cfg>:

void mpc_init_cfg(void)
{
  /* Enable GTZC clock */
  __HAL_RCC_GTZC_CLK_ENABLE();
 c021210:	4b12      	ldr	r3, [pc, #72]	; (c02125c <mpc_init_cfg+0x4c>)
{
 c021212:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_GTZC_CLK_ENABLE();
 c021214:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  /* assume non secure ram is only in SRAM 1 , SRAM 2 is reserved for secure */
  unsecure_sram1(NS_DATA_START, NS_DATA_START + NS_DATA_SIZE - 1);
 c021216:	4912      	ldr	r1, [pc, #72]	; (c021260 <mpc_init_cfg+0x50>)
  __HAL_RCC_GTZC_CLK_ENABLE();
 c021218:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 c02121c:	649a      	str	r2, [r3, #72]	; 0x48
 c02121e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  unsecure_sram1(NS_DATA_START, NS_DATA_START + NS_DATA_SIZE - 1);
 c021220:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  __HAL_RCC_GTZC_CLK_ENABLE();
 c021224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c021228:	9301      	str	r3, [sp, #4]
 c02122a:	9b01      	ldr	r3, [sp, #4]
  unsecure_sram1(NS_DATA_START, NS_DATA_START + NS_DATA_SIZE - 1);
 c02122c:	f7ff ff9a 	bl	c021164 <unsecure_sram1>
  lock_sram_config(SRAM1_BASE);
 c021230:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c021234:	f7ff ffd9 	bl	c0211ea <lock_sram_config>
  lock_sram_config(SRAM2_BASE);
 c021238:	480a      	ldr	r0, [pc, #40]	; (c021264 <mpc_init_cfg+0x54>)
 c02123a:	f7ff ffd6 	bl	c0211ea <lock_sram_config>

  /*  use sticky bit to lock all SRAM config  */
  /*  enable interruption on illegal access on FLASH */
  HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_FLASH);
 c02123e:	480a      	ldr	r0, [pc, #40]	; (c021268 <mpc_init_cfg+0x58>)
 c021240:	f001 f976 	bl	c022530 <HAL_GTZC_TZIC_EnableIT>

  /* Configure Secure peripherals */
  HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_RNG, GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_NPRIV);
 c021244:	f240 3101 	movw	r1, #769	; 0x301
 c021248:	4808      	ldr	r0, [pc, #32]	; (c02126c <mpc_init_cfg+0x5c>)
 c02124a:	f001 f88b 	bl	c022364 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
  __ASM volatile ("dsb 0xF":::"memory");
 c02124e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 c021252:	f3bf 8f6f 	isb	sy
  /* Add barriers to assure the MPC configuration is done before continue
   * the execution.
   */
  __DSB();
  __ISB();
}
 c021256:	b003      	add	sp, #12
 c021258:	f85d fb04 	ldr.w	pc, [sp], #4
 c02125c:	50021000 	.word	0x50021000
 c021260:	2002ffff 	.word	0x2002ffff
 c021264:	30030000 	.word	0x30030000
 c021268:	1000001a 	.word	0x1000001a
 c02126c:	1000000e 	.word	0x1000000e

0c021270 <ppc_init_cfg>:
/*---------------------- PPC configuration functions -------------------------*/

void ppc_init_cfg(void)
{
  /*  pinmux is secured after reset : configure all pin mux as non secure*/
  pinmux_conf_init_ns();
 c021270:	f7ff bea2 	b.w	c020fb8 <pinmux_conf_init_ns>

0c021274 <tfm_spm_hal_init_debug>:
 c021274:	4770      	bx	lr
	...

0c021278 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 c021278:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 c02127c:	4905      	ldr	r1, [pc, #20]	; (c021294 <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 c02127e:	4b06      	ldr	r3, [pc, #24]	; (c021298 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 c021280:	68ca      	ldr	r2, [r1, #12]
 c021282:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 c021286:	4313      	orrs	r3, r2
 c021288:	60cb      	str	r3, [r1, #12]
 c02128a:	f3bf 8f4f 	dsb	sy
    __NOP();
 c02128e:	bf00      	nop
 c021290:	e7fd      	b.n	c02128e <__NVIC_SystemReset+0x16>
 c021292:	bf00      	nop
 c021294:	e000ed00 	.word	0xe000ed00
 c021298:	05fa0004 	.word	0x05fa0004

0c02129c <Error_Handler>:
 */

#include "platform/include/tfm_platform_system.h"
#include "cmsis.h"
void Error_Handler(void)
{
 c02129c:	b508      	push	{r3, lr}
	/* Reset the system */
    NVIC_SystemReset();
 c02129e:	f7ff ffeb 	bl	c021278 <__NVIC_SystemReset>
	...

0c0212a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 c0212a4:	4b01      	ldr	r3, [pc, #4]	; (c0212ac <HAL_GetTick+0x8>)
 c0212a6:	6818      	ldr	r0, [r3, #0]
}
 c0212a8:	4770      	bx	lr
 c0212aa:	bf00      	nop
 c0212ac:	3003c94c 	.word	0x3003c94c

0c0212b0 <CRYP_SetKey>:
  *         occurs when the key is written out of HAL scope.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
  if (hcryp->Init.pKey != NULL)
 c0212b0:	68c3      	ldr	r3, [r0, #12]
 c0212b2:	b1a3      	cbz	r3, c0212de <CRYP_SetKey+0x2e>
  {
    switch (KeySize)
 c0212b4:	b1a1      	cbz	r1, c0212e0 <CRYP_SetKey+0x30>
 c0212b6:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 c0212ba:	d110      	bne.n	c0212de <CRYP_SetKey+0x2e>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 c0212bc:	6819      	ldr	r1, [r3, #0]
 c0212be:	6802      	ldr	r2, [r0, #0]
 c0212c0:	63d1      	str	r1, [r2, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 c0212c2:	6859      	ldr	r1, [r3, #4]
 c0212c4:	6391      	str	r1, [r2, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 c0212c6:	6899      	ldr	r1, [r3, #8]
 c0212c8:	6351      	str	r1, [r2, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 c0212ca:	68d9      	ldr	r1, [r3, #12]
 c0212cc:	6311      	str	r1, [r2, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 c0212ce:	6919      	ldr	r1, [r3, #16]
 c0212d0:	61d1      	str	r1, [r2, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 c0212d2:	6959      	ldr	r1, [r3, #20]
 c0212d4:	6191      	str	r1, [r2, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 c0212d6:	6999      	ldr	r1, [r3, #24]
 c0212d8:	6151      	str	r1, [r2, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 c0212da:	69db      	ldr	r3, [r3, #28]
        break;
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 c0212dc:	6113      	str	r3, [r2, #16]
        break;
      default:
        break;
    }
  }
}
 c0212de:	4770      	bx	lr
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 c0212e0:	6819      	ldr	r1, [r3, #0]
 c0212e2:	6802      	ldr	r2, [r0, #0]
 c0212e4:	61d1      	str	r1, [r2, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 c0212e6:	6859      	ldr	r1, [r3, #4]
 c0212e8:	6191      	str	r1, [r2, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 c0212ea:	6899      	ldr	r1, [r3, #8]
 c0212ec:	6151      	str	r1, [r2, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 c0212ee:	68db      	ldr	r3, [r3, #12]
 c0212f0:	e7f4      	b.n	c0212dc <CRYP_SetKey+0x2c>

0c0212f2 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 c0212f2:	b570      	push	{r4, r5, r6, lr}
 c0212f4:	4606      	mov	r6, r0
 c0212f6:	460c      	mov	r4, r1
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 c0212f8:	f7ff ffd4 	bl	c0212a4 <HAL_GetTick>
 c0212fc:	4605      	mov	r5, r0

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 c0212fe:	6832      	ldr	r2, [r6, #0]
 c021300:	6853      	ldr	r3, [r2, #4]
 c021302:	07db      	lsls	r3, r3, #31
 c021304:	d501      	bpl.n	c02130a <CRYP_WaitOnCCFlag+0x18>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 c021306:	2000      	movs	r0, #0
}
 c021308:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 c02130a:	1c61      	adds	r1, r4, #1
 c02130c:	d0f8      	beq.n	c021300 <CRYP_WaitOnCCFlag+0xe>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 c02130e:	f7ff ffc9 	bl	c0212a4 <HAL_GetTick>
 c021312:	1b40      	subs	r0, r0, r5
 c021314:	42a0      	cmp	r0, r4
 c021316:	d801      	bhi.n	c02131c <CRYP_WaitOnCCFlag+0x2a>
 c021318:	2c00      	cmp	r4, #0
 c02131a:	d1f0      	bne.n	c0212fe <CRYP_WaitOnCCFlag+0xc>
        return HAL_ERROR;
 c02131c:	2001      	movs	r0, #1
 c02131e:	e7f3      	b.n	c021308 <CRYP_WaitOnCCFlag+0x16>

0c021320 <CRYP_GCMCCM_SetHeaderPhase>:
{
 c021320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c021324:	b08c      	sub	sp, #48	; 0x30
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 c021326:	466d      	mov	r5, sp
{
 c021328:	4604      	mov	r4, r0
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 c02132a:	4e78      	ldr	r6, [pc, #480]	; (c02150c <CRYP_GCMCCM_SetHeaderPhase+0x1ec>)
{
 c02132c:	460f      	mov	r7, r1
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 c02132e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 c021330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c021332:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 c021334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c021336:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 c02133a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 c02133e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 c021340:	69e5      	ldr	r5, [r4, #28]
 c021342:	b903      	cbnz	r3, c021346 <CRYP_GCMCCM_SetHeaderPhase+0x26>
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 c021344:	00ad      	lsls	r5, r5, #2
 c021346:	6823      	ldr	r3, [r4, #0]
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 c021348:	681a      	ldr	r2, [r3, #0]
  if ((size_in_bytes != 0U))
 c02134a:	2d00      	cmp	r5, #0
 c02134c:	f000 80cd 	beq.w	c0214ea <CRYP_GCMCCM_SetHeaderPhase+0x1ca>
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 c021350:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 c021354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c021358:	601a      	str	r2, [r3, #0]
    __HAL_CRYP_ENABLE(hcryp);
 c02135a:	681a      	ldr	r2, [r3, #0]
    if ((size_in_bytes % 16U) == 0U)
 c02135c:	f015 060f 	ands.w	r6, r5, #15
    __HAL_CRYP_ENABLE(hcryp);
 c021360:	f042 0201 	orr.w	r2, r2, #1
 c021364:	601a      	str	r2, [r3, #0]
    if ((size_in_bytes % 16U) == 0U)
 c021366:	d022      	beq.n	c0213ae <CRYP_GCMCCM_SetHeaderPhase+0x8e>
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 c021368:	2600      	movs	r6, #0
 c02136a:	ea4f 1815 	mov.w	r8, r5, lsr #4
 c02136e:	ea4f 0888 	mov.w	r8, r8, lsl #2
 c021372:	45b0      	cmp	r8, r6
 c021374:	6823      	ldr	r3, [r4, #0]
 c021376:	d861      	bhi.n	c02143c <CRYP_GCMCCM_SetHeaderPhase+0x11c>
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 c021378:	2100      	movs	r1, #0
 c02137a:	f3c5 0281 	ubfx	r2, r5, #2, #2
 c02137e:	428a      	cmp	r2, r1
 c021380:	f040 808e 	bne.w	c0214a0 <CRYP_GCMCCM_SetHeaderPhase+0x180>
      if ((size_in_bytes % 4U) == 0U)
 c021384:	f015 0503 	ands.w	r5, r5, #3
 c021388:	f040 8096 	bne.w	c0214b8 <CRYP_GCMCCM_SetHeaderPhase+0x198>
          loopcounter++;
 c02138c:	3101      	adds	r1, #1
        while (loopcounter < 4U)
 c02138e:	2904      	cmp	r1, #4
          hcryp->Instance->DINR = 0x0U;
 c021390:	609d      	str	r5, [r3, #8]
        while (loopcounter < 4U)
 c021392:	d1fb      	bne.n	c02138c <CRYP_GCMCCM_SetHeaderPhase+0x6c>
      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c021394:	4639      	mov	r1, r7
 c021396:	4620      	mov	r0, r4
 c021398:	f7ff ffab 	bl	c0212f2 <CRYP_WaitOnCCFlag>
 c02139c:	6823      	ldr	r3, [r4, #0]
 c02139e:	2800      	cmp	r0, #0
 c0213a0:	f040 80a1 	bne.w	c0214e6 <CRYP_GCMCCM_SetHeaderPhase+0x1c6>
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 c0213a4:	681a      	ldr	r2, [r3, #0]
 c0213a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 c0213aa:	601a      	str	r2, [r3, #0]
 c0213ac:	e003      	b.n	c0213b6 <CRYP_GCMCCM_SetHeaderPhase+0x96>
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 c0213ae:	08ad      	lsrs	r5, r5, #2
 c0213b0:	42b5      	cmp	r5, r6
 c0213b2:	d803      	bhi.n	c0213bc <CRYP_GCMCCM_SetHeaderPhase+0x9c>
  return HAL_OK;
 c0213b4:	2000      	movs	r0, #0
}
 c0213b6:	b00c      	add	sp, #48	; 0x30
 c0213b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 c0213bc:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 c0213be:	69a1      	ldr	r1, [r4, #24]
 c0213c0:	b29b      	uxth	r3, r3
 c0213c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 c0213c6:	6822      	ldr	r2, [r4, #0]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c0213c8:	4620      	mov	r0, r4
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 c0213ca:	6093      	str	r3, [r2, #8]
        hcryp->CrypHeaderCount++ ;
 c0213cc:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 c0213ce:	3301      	adds	r3, #1
 c0213d0:	b29b      	uxth	r3, r3
 c0213d2:	87a3      	strh	r3, [r4, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 c0213d4:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 c0213d6:	b29b      	uxth	r3, r3
 c0213d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 c0213dc:	6093      	str	r3, [r2, #8]
        hcryp->CrypHeaderCount++ ;
 c0213de:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 c0213e0:	3301      	adds	r3, #1
 c0213e2:	b29b      	uxth	r3, r3
 c0213e4:	87a3      	strh	r3, [r4, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 c0213e6:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 c0213e8:	b29b      	uxth	r3, r3
 c0213ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 c0213ee:	6093      	str	r3, [r2, #8]
        hcryp->CrypHeaderCount++ ;
 c0213f0:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 c0213f2:	3301      	adds	r3, #1
 c0213f4:	b29b      	uxth	r3, r3
 c0213f6:	87a3      	strh	r3, [r4, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 c0213f8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 c0213fa:	b29b      	uxth	r3, r3
 c0213fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c021400:	4639      	mov	r1, r7
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 c021402:	6093      	str	r3, [r2, #8]
        hcryp->CrypHeaderCount++ ;
 c021404:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 c021406:	3301      	adds	r3, #1
 c021408:	b29b      	uxth	r3, r3
 c02140a:	87a3      	strh	r3, [r4, #60]	; 0x3c
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c02140c:	f7ff ff71 	bl	c0212f2 <CRYP_WaitOnCCFlag>
 c021410:	6823      	ldr	r3, [r4, #0]
          __HAL_CRYP_DISABLE(hcryp);
 c021412:	681a      	ldr	r2, [r3, #0]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c021414:	b168      	cbz	r0, c021432 <CRYP_GCMCCM_SetHeaderPhase+0x112>
        __HAL_CRYP_DISABLE(hcryp);
 c021416:	f022 0201 	bic.w	r2, r2, #1
 c02141a:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 c02141c:	6d63      	ldr	r3, [r4, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 c02141e:	2001      	movs	r0, #1
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 c021420:	f043 0310 	orr.w	r3, r3, #16
 c021424:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hcryp);
 c021426:	2300      	movs	r3, #0
        hcryp->State = HAL_CRYP_STATE_READY;
 c021428:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
        __HAL_UNLOCK(hcryp);
 c02142c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 c021430:	e7c1      	b.n	c0213b6 <CRYP_GCMCCM_SetHeaderPhase+0x96>
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 c021432:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 c021436:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 c021438:	3604      	adds	r6, #4
 c02143a:	e7b9      	b.n	c0213b0 <CRYP_GCMCCM_SetHeaderPhase+0x90>
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 c02143c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 c02143e:	69a1      	ldr	r1, [r4, #24]
 c021440:	b292      	uxth	r2, r2
 c021442:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c021446:	4620      	mov	r0, r4
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 c021448:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 c02144a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 c02144c:	3201      	adds	r2, #1
 c02144e:	b292      	uxth	r2, r2
 c021450:	87a2      	strh	r2, [r4, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 c021452:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 c021454:	b292      	uxth	r2, r2
 c021456:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 c02145a:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 c02145c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 c02145e:	3201      	adds	r2, #1
 c021460:	b292      	uxth	r2, r2
 c021462:	87a2      	strh	r2, [r4, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 c021464:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 c021466:	b292      	uxth	r2, r2
 c021468:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 c02146c:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 c02146e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 c021470:	3201      	adds	r2, #1
 c021472:	b292      	uxth	r2, r2
 c021474:	87a2      	strh	r2, [r4, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 c021476:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 c021478:	b292      	uxth	r2, r2
 c02147a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c02147e:	4639      	mov	r1, r7
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 c021480:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 c021482:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 c021484:	3301      	adds	r3, #1
 c021486:	b29b      	uxth	r3, r3
 c021488:	87a3      	strh	r3, [r4, #60]	; 0x3c
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c02148a:	f7ff ff32 	bl	c0212f2 <CRYP_WaitOnCCFlag>
 c02148e:	6823      	ldr	r3, [r4, #0]
          __HAL_CRYP_DISABLE(hcryp);
 c021490:	681a      	ldr	r2, [r3, #0]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c021492:	2800      	cmp	r0, #0
 c021494:	d1bf      	bne.n	c021416 <CRYP_GCMCCM_SetHeaderPhase+0xf6>
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 c021496:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 c02149a:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 c02149c:	3604      	adds	r6, #4
 c02149e:	e768      	b.n	c021372 <CRYP_GCMCCM_SetHeaderPhase+0x52>
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 c0214a0:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 c0214a2:	69a6      	ldr	r6, [r4, #24]
 c0214a4:	b280      	uxth	r0, r0
 c0214a6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 c0214aa:	3101      	adds	r1, #1
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 c0214ac:	6098      	str	r0, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 c0214ae:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 c0214b0:	3001      	adds	r0, #1
 c0214b2:	b280      	uxth	r0, r0
 c0214b4:	87a0      	strh	r0, [r4, #60]	; 0x3c
 c0214b6:	e762      	b.n	c02137e <CRYP_GCMCCM_SetHeaderPhase+0x5e>
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 c0214b8:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 c0214ba:	69a0      	ldr	r0, [r4, #24]
 c0214bc:	b289      	uxth	r1, r1
 c0214be:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
         tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 c0214c2:	6860      	ldr	r0, [r4, #4]
         loopcounter++;
 c0214c4:	3201      	adds	r2, #1
         tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 c0214c6:	eb05 0540 	add.w	r5, r5, r0, lsl #1
 c0214ca:	a80c      	add	r0, sp, #48	; 0x30
 c0214cc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 c0214d0:	f855 0c30 	ldr.w	r0, [r5, #-48]
 c0214d4:	4001      	ands	r1, r0
         hcryp->Instance->DINR = tmp;
 c0214d6:	6099      	str	r1, [r3, #8]
           hcryp->Instance->DINR = 0x0U;
 c0214d8:	2100      	movs	r1, #0
         while (loopcounter < 4U)
 c0214da:	2a04      	cmp	r2, #4
 c0214dc:	f43f af5a 	beq.w	c021394 <CRYP_GCMCCM_SetHeaderPhase+0x74>
           hcryp->Instance->DINR = 0x0U;
 c0214e0:	6099      	str	r1, [r3, #8]
           loopcounter++;
 c0214e2:	3201      	adds	r2, #1
 c0214e4:	e7f9      	b.n	c0214da <CRYP_GCMCCM_SetHeaderPhase+0x1ba>
        __HAL_CRYP_DISABLE(hcryp);
 c0214e6:	681a      	ldr	r2, [r3, #0]
 c0214e8:	e795      	b.n	c021416 <CRYP_GCMCCM_SetHeaderPhase+0xf6>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 c0214ea:	6861      	ldr	r1, [r4, #4]
 c0214ec:	f022 0206 	bic.w	r2, r2, #6
 c0214f0:	430a      	orrs	r2, r1
 c0214f2:	601a      	str	r2, [r3, #0]
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 c0214f4:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 c0214f6:	4628      	mov	r0, r5
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 c0214f8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 c0214fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c021500:	601a      	str	r2, [r3, #0]
    __HAL_CRYP_ENABLE(hcryp);
 c021502:	681a      	ldr	r2, [r3, #0]
 c021504:	f042 0201 	orr.w	r2, r2, #1
 c021508:	601a      	str	r2, [r3, #0]
 c02150a:	e754      	b.n	c0213b6 <CRYP_GCMCCM_SetHeaderPhase+0x96>
 c02150c:	0c035078 	.word	0x0c035078

0c021510 <HAL_CRYP_SetConfig>:
{
 c021510:	b570      	push	{r4, r5, r6, lr}
  if ((hcryp == NULL) || (pConf == NULL))
 c021512:	2800      	cmp	r0, #0
 c021514:	d041      	beq.n	c02159a <HAL_CRYP_SetConfig+0x8a>
 c021516:	2900      	cmp	r1, #0
 c021518:	d03f      	beq.n	c02159a <HAL_CRYP_SetConfig+0x8a>
  if (hcryp->State == HAL_CRYP_STATE_READY)
 c02151a:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
 c02151e:	b2d2      	uxtb	r2, r2
 c021520:	2a01      	cmp	r2, #1
 c021522:	d133      	bne.n	c02158c <HAL_CRYP_SetConfig+0x7c>
    hcryp->State = HAL_CRYP_STATE_BUSY;
 c021524:	2302      	movs	r3, #2
    __HAL_LOCK(hcryp);
 c021526:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
    hcryp->State = HAL_CRYP_STATE_BUSY;
 c02152a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    __HAL_LOCK(hcryp);
 c02152e:	2c01      	cmp	r4, #1
 c021530:	d02a      	beq.n	c021588 <HAL_CRYP_SetConfig+0x78>
    hcryp->Init.pKey            = pConf->pKey;
 c021532:	688c      	ldr	r4, [r1, #8]
    hcryp->Init.DataType        = pConf->DataType;
 c021534:	680b      	ldr	r3, [r1, #0]
    hcryp->Init.pKey            = pConf->pKey;
 c021536:	60c4      	str	r4, [r0, #12]
    hcryp->Init.pInitVect       = pConf->pInitVect;
 c021538:	68cc      	ldr	r4, [r1, #12]
    hcryp->Init.Algorithm       = pConf->Algorithm;
 c02153a:	690e      	ldr	r6, [r1, #16]
    hcryp->Init.KeySize         = pConf->KeySize;
 c02153c:	684d      	ldr	r5, [r1, #4]
    hcryp->Init.pInitVect       = pConf->pInitVect;
 c02153e:	6104      	str	r4, [r0, #16]
    hcryp->Init.Header          = pConf->Header;
 c021540:	694c      	ldr	r4, [r1, #20]
    hcryp->Init.DataType        = pConf->DataType;
 c021542:	6043      	str	r3, [r0, #4]
    hcryp->Init.Header          = pConf->Header;
 c021544:	6184      	str	r4, [r0, #24]
    hcryp->Init.HeaderSize      = pConf->HeaderSize;
 c021546:	698c      	ldr	r4, [r1, #24]
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 c021548:	4333      	orrs	r3, r6
    hcryp->Init.HeaderSize      = pConf->HeaderSize;
 c02154a:	61c4      	str	r4, [r0, #28]
    hcryp->Init.B0              = pConf->B0;
 c02154c:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 c02154e:	432b      	orrs	r3, r5
    hcryp->Init.B0              = pConf->B0;
 c021550:	6204      	str	r4, [r0, #32]
    hcryp->Init.DataWidthUnit   = pConf->DataWidthUnit;
 c021552:	6a0c      	ldr	r4, [r1, #32]
    hcryp->Init.Algorithm       = pConf->Algorithm;
 c021554:	6146      	str	r6, [r0, #20]
    hcryp->Init.DataWidthUnit   = pConf->DataWidthUnit;
 c021556:	6244      	str	r4, [r0, #36]	; 0x24
    hcryp->Init.HeaderWidthUnit = pConf->HeaderWidthUnit;
 c021558:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    hcryp->Init.KeyIVConfigSkip = pConf->KeyIVConfigSkip;
 c02155a:	6a89      	ldr	r1, [r1, #40]	; 0x28
    hcryp->Init.HeaderWidthUnit = pConf->HeaderWidthUnit;
 c02155c:	6284      	str	r4, [r0, #40]	; 0x28
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 c02155e:	6804      	ldr	r4, [r0, #0]
    hcryp->Init.KeyIVConfigSkip = pConf->KeyIVConfigSkip;
 c021560:	62c1      	str	r1, [r0, #44]	; 0x2c
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 c021562:	6821      	ldr	r1, [r4, #0]
    hcryp->Init.KeySize         = pConf->KeySize;
 c021564:	6085      	str	r5, [r0, #8]
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 c021566:	f421 21a0 	bic.w	r1, r1, #327680	; 0x50000
 c02156a:	f021 0166 	bic.w	r1, r1, #102	; 0x66
 c02156e:	430b      	orrs	r3, r1
 c021570:	6023      	str	r3, [r4, #0]
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_ERR_CLEAR);
 c021572:	6823      	ldr	r3, [r4, #0]
 c021574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c021578:	6023      	str	r3, [r4, #0]
    __HAL_UNLOCK(hcryp);
 c02157a:	2300      	movs	r3, #0
    hcryp->Phase = CRYP_PHASE_READY;
 c02157c:	6442      	str	r2, [r0, #68]	; 0x44
    hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 c02157e:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_UNLOCK(hcryp);
 c021580:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    hcryp->State = HAL_CRYP_STATE_READY;
 c021584:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
    __HAL_LOCK(hcryp);
 c021588:	4618      	mov	r0, r3
 c02158a:	e007      	b.n	c02159c <HAL_CRYP_SetConfig+0x8c>
    __HAL_UNLOCK(hcryp);
 c02158c:	2300      	movs	r3, #0
 c02158e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 c021592:	6d43      	ldr	r3, [r0, #84]	; 0x54
 c021594:	f043 0308 	orr.w	r3, r3, #8
 c021598:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 c02159a:	2001      	movs	r0, #1
}
 c02159c:	bd70      	pop	{r4, r5, r6, pc}

0c02159e <HAL_CRYP_MspInit>:
}
 c02159e:	4770      	bx	lr

0c0215a0 <HAL_CRYP_Init>:
{
 c0215a0:	b510      	push	{r4, lr}
  if (hcryp == NULL)
 c0215a2:	4604      	mov	r4, r0
 c0215a4:	b1e8      	cbz	r0, c0215e2 <HAL_CRYP_Init+0x42>
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 c0215a6:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 c0215aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 c0215ae:	b91b      	cbnz	r3, c0215b8 <HAL_CRYP_Init+0x18>
    hcryp->Lock = HAL_UNLOCKED;
 c0215b0:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_CRYP_MspInit(hcryp);
 c0215b4:	f7ff fff3 	bl	c02159e <HAL_CRYP_MspInit>
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 c0215b8:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 c0215bc:	6821      	ldr	r1, [r4, #0]
 c0215be:	4303      	orrs	r3, r0
 c0215c0:	680a      	ldr	r2, [r1, #0]
 c0215c2:	6960      	ldr	r0, [r4, #20]
 c0215c4:	f422 22a0 	bic.w	r2, r2, #327680	; 0x50000
 c0215c8:	4303      	orrs	r3, r0
 c0215ca:	f022 0266 	bic.w	r2, r2, #102	; 0x66
 c0215ce:	4313      	orrs	r3, r2
 c0215d0:	600b      	str	r3, [r1, #0]
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 c0215d2:	2000      	movs	r0, #0
  hcryp->State = HAL_CRYP_STATE_READY;
 c0215d4:	2301      	movs	r3, #1
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 c0215d6:	6560      	str	r0, [r4, #84]	; 0x54
  hcryp->KeyIVConfig = 0U;
 c0215d8:	65a0      	str	r0, [r4, #88]	; 0x58
  hcryp->State = HAL_CRYP_STATE_READY;
 c0215da:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hcryp->Phase = CRYP_PHASE_READY;
 c0215de:	6463      	str	r3, [r4, #68]	; 0x44
}
 c0215e0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 c0215e2:	2001      	movs	r0, #1
 c0215e4:	e7fc      	b.n	c0215e0 <HAL_CRYP_Init+0x40>

0c0215e6 <HAL_CRYP_MspDeInit>:
 c0215e6:	4770      	bx	lr

0c0215e8 <HAL_CRYP_DeInit>:
{
 c0215e8:	b538      	push	{r3, r4, r5, lr}
  if (hcryp == NULL)
 c0215ea:	4605      	mov	r5, r0
 c0215ec:	2401      	movs	r4, #1
 c0215ee:	b180      	cbz	r0, c021612 <HAL_CRYP_DeInit+0x2a>
  hcryp->Phase = CRYP_PHASE_READY;
 c0215f0:	6444      	str	r4, [r0, #68]	; 0x44
  hcryp->CrypInCount = 0;
 c0215f2:	2400      	movs	r4, #0
  __HAL_CRYP_DISABLE(hcryp);
 c0215f4:	6802      	ldr	r2, [r0, #0]
  hcryp->CrypInCount = 0;
 c0215f6:	87c4      	strh	r4, [r0, #62]	; 0x3e
  hcryp->CrypOutCount = 0;
 c0215f8:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
  hcryp->CrypHeaderCount = 0;
 c0215fc:	8784      	strh	r4, [r0, #60]	; 0x3c
  __HAL_CRYP_DISABLE(hcryp);
 c0215fe:	6813      	ldr	r3, [r2, #0]
 c021600:	f023 0301 	bic.w	r3, r3, #1
 c021604:	6013      	str	r3, [r2, #0]
  HAL_CRYP_MspDeInit(hcryp);
 c021606:	f7ff ffee 	bl	c0215e6 <HAL_CRYP_MspDeInit>
  hcryp->State = HAL_CRYP_STATE_RESET;
 c02160a:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
  __HAL_UNLOCK(hcryp);
 c02160e:	f885 4050 	strb.w	r4, [r5, #80]	; 0x50
    return HAL_ERROR;
 c021612:	4620      	mov	r0, r4
}
 c021614:	bd38      	pop	{r3, r4, r5, pc}

0c021616 <HAL_CRYP_ErrorCallback>:
 c021616:	4770      	bx	lr

0c021618 <CRYP_AES_ProcessData>:
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 c021618:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
{
 c02161a:	b530      	push	{r4, r5, lr}
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 c02161c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 c02161e:	b29b      	uxth	r3, r3
 c021620:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 c021624:	6802      	ldr	r2, [r0, #0]
{
 c021626:	b085      	sub	sp, #20
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 c021628:	6093      	str	r3, [r2, #8]
  hcryp->CrypInCount++;
 c02162a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
{
 c02162c:	4604      	mov	r4, r0
  hcryp->CrypInCount++;
 c02162e:	3301      	adds	r3, #1
 c021630:	b29b      	uxth	r3, r3
 c021632:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 c021634:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 c021636:	b29b      	uxth	r3, r3
 c021638:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 c02163c:	6093      	str	r3, [r2, #8]
  hcryp->CrypInCount++;
 c02163e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 c021640:	3301      	adds	r3, #1
 c021642:	b29b      	uxth	r3, r3
 c021644:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 c021646:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 c021648:	b29b      	uxth	r3, r3
 c02164a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 c02164e:	6093      	str	r3, [r2, #8]
  hcryp->CrypInCount++;
 c021650:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 c021652:	3301      	adds	r3, #1
 c021654:	b29b      	uxth	r3, r3
 c021656:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 c021658:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 c02165a:	b29b      	uxth	r3, r3
 c02165c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 c021660:	6093      	str	r3, [r2, #8]
  hcryp->CrypInCount++;
 c021662:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 c021664:	3301      	adds	r3, #1
 c021666:	b29b      	uxth	r3, r3
 c021668:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c02166a:	f7ff fe42 	bl	c0212f2 <CRYP_WaitOnCCFlag>
 c02166e:	b188      	cbz	r0, c021694 <CRYP_AES_ProcessData+0x7c>
    __HAL_CRYP_DISABLE(hcryp);
 c021670:	6822      	ldr	r2, [r4, #0]
    HAL_CRYP_ErrorCallback(hcryp);
 c021672:	4620      	mov	r0, r4
    __HAL_CRYP_DISABLE(hcryp);
 c021674:	6813      	ldr	r3, [r2, #0]
 c021676:	f023 0301 	bic.w	r3, r3, #1
 c02167a:	6013      	str	r3, [r2, #0]
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 c02167c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 c02167e:	f043 0310 	orr.w	r3, r3, #16
 c021682:	6563      	str	r3, [r4, #84]	; 0x54
    hcryp->State = HAL_CRYP_STATE_READY;
 c021684:	2301      	movs	r3, #1
 c021686:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    __HAL_UNLOCK(hcryp);
 c02168a:	2300      	movs	r3, #0
 c02168c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_CRYP_ErrorCallback(hcryp);
 c021690:	f7ff ffc1 	bl	c021616 <HAL_CRYP_ErrorCallback>
  i= 0U;
 c021694:	2100      	movs	r1, #0
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 c021696:	6823      	ldr	r3, [r4, #0]
 c021698:	681a      	ldr	r2, [r3, #0]
 c02169a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 c02169e:	601a      	str	r2, [r3, #0]
    temp[i] = hcryp->Instance->DOUTR;
 c0216a0:	68da      	ldr	r2, [r3, #12]
 c0216a2:	9200      	str	r2, [sp, #0]
 c0216a4:	68da      	ldr	r2, [r3, #12]
 c0216a6:	9201      	str	r2, [sp, #4]
 c0216a8:	68da      	ldr	r2, [r3, #12]
 c0216aa:	68db      	ldr	r3, [r3, #12]
 c0216ac:	9202      	str	r2, [sp, #8]
 c0216ae:	9303      	str	r3, [sp, #12]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 c0216b0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 c0216b4:	3303      	adds	r3, #3
 c0216b6:	089b      	lsrs	r3, r3, #2
 c0216b8:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 c0216bc:	4293      	cmp	r3, r2
 c0216be:	d901      	bls.n	c0216c4 <CRYP_AES_ProcessData+0xac>
 c0216c0:	2904      	cmp	r1, #4
 c0216c2:	d101      	bne.n	c0216c8 <CRYP_AES_ProcessData+0xb0>
}
 c0216c4:	b005      	add	sp, #20
 c0216c6:	bd30      	pop	{r4, r5, pc}
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 c0216c8:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 c0216cc:	f85d 5021 	ldr.w	r5, [sp, r1, lsl #2]
 c0216d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 c0216d2:	b292      	uxth	r2, r2
 c0216d4:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    hcryp->CrypOutCount++;
 c0216d8:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    i++;
 c0216dc:	3101      	adds	r1, #1
    hcryp->CrypOutCount++;
 c0216de:	3201      	adds	r2, #1
 c0216e0:	b292      	uxth	r2, r2
 c0216e2:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
 c0216e6:	e7e7      	b.n	c0216b8 <CRYP_AES_ProcessData+0xa0>

0c0216e8 <CRYP_AESCCM_Process>:
{
 c0216e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 c0216ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 c0216ec:	b085      	sub	sp, #20
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 c0216ee:	2b01      	cmp	r3, #1
{
 c0216f0:	4604      	mov	r4, r0
 c0216f2:	460e      	mov	r6, r1
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 c0216f4:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 c0216f8:	d11f      	bne.n	c02173a <CRYP_AESCCM_Process+0x52>
    if (hcryp->KeyIVConfig == 1U)
 c0216fa:	6d82      	ldr	r2, [r0, #88]	; 0x58
 c0216fc:	2a01      	cmp	r2, #1
 c0216fe:	d11b      	bne.n	c021738 <CRYP_AESCCM_Process+0x50>
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 c021700:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 c021702:	442b      	add	r3, r5
 c021704:	65c3      	str	r3, [r0, #92]	; 0x5c
  if ((hcryp->Size % 16U) != 0U)
 c021706:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 c02170a:	08ad      	lsrs	r5, r5, #2
  if ((hcryp->Size % 16U) != 0U)
 c02170c:	0718      	lsls	r0, r3, #28
    wordsize = ((wordsize / 4U) * 4U) ;
 c02170e:	bf18      	it	ne
 c021710:	f025 0503 	bicne.w	r5, r5, #3
  tickstart = HAL_GetTick();
 c021714:	f7ff fdc6 	bl	c0212a4 <HAL_GetTick>
 c021718:	4607      	mov	r7, r0
    incount = hcryp->CrypInCount;
 c02171a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    outcount = hcryp->CrypOutCount;
 c02171c:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    incount = hcryp->CrypInCount;
 c021720:	b292      	uxth	r2, r2
  while ((incount < wordsize) && (outcount < wordsize))
 c021722:	4295      	cmp	r5, r2
    outcount = hcryp->CrypOutCount;
 c021724:	b29b      	uxth	r3, r3
  while ((incount < wordsize) && (outcount < wordsize))
 c021726:	d901      	bls.n	c02172c <CRYP_AESCCM_Process+0x44>
 c021728:	429d      	cmp	r5, r3
 c02172a:	d848      	bhi.n	c0217be <CRYP_AESCCM_Process+0xd6>
  if ((hcryp->Size % 16U) != 0U)
 c02172c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 c021730:	071a      	lsls	r2, r3, #28
 c021732:	d161      	bne.n	c0217f8 <CRYP_AESCCM_Process+0x110>
  return HAL_OK;
 c021734:	2000      	movs	r0, #0
 c021736:	e027      	b.n	c021788 <CRYP_AESCCM_Process+0xa0>
      hcryp->KeyIVConfig = 1U;
 c021738:	6583      	str	r3, [r0, #88]	; 0x58
    hcryp->CrypHeaderCount = 0U;
 c02173a:	2700      	movs	r7, #0
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 c02173c:	6822      	ldr	r2, [r4, #0]
    hcryp->CrypHeaderCount = 0U;
 c02173e:	87a7      	strh	r7, [r4, #60]	; 0x3c
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 c021740:	6813      	ldr	r3, [r2, #0]
    hcryp->SizesSum = hcryp->Size;
 c021742:	65e5      	str	r5, [r4, #92]	; 0x5c
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 c021744:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 c021748:	6013      	str	r3, [r2, #0]
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 c02174a:	68a1      	ldr	r1, [r4, #8]
 c02174c:	4620      	mov	r0, r4
 c02174e:	f7ff fdaf 	bl	c0212b0 <CRYP_SetKey>
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 c021752:	6a22      	ldr	r2, [r4, #32]
 c021754:	6823      	ldr	r3, [r4, #0]
 c021756:	6811      	ldr	r1, [r2, #0]
 c021758:	62d9      	str	r1, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 c02175a:	6851      	ldr	r1, [r2, #4]
 c02175c:	6299      	str	r1, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 c02175e:	6891      	ldr	r1, [r2, #8]
 c021760:	6259      	str	r1, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 c021762:	68d2      	ldr	r2, [r2, #12]
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c021764:	4631      	mov	r1, r6
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 c021766:	621a      	str	r2, [r3, #32]
    __HAL_CRYP_ENABLE(hcryp);
 c021768:	681a      	ldr	r2, [r3, #0]
 c02176a:	f042 0201 	orr.w	r2, r2, #1
 c02176e:	601a      	str	r2, [r3, #0]
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c021770:	f7ff fdbf 	bl	c0212f2 <CRYP_WaitOnCCFlag>
 c021774:	b150      	cbz	r0, c02178c <CRYP_AESCCM_Process+0xa4>
      hcryp->State = HAL_CRYP_STATE_READY;
 c021776:	2001      	movs	r0, #1
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 c021778:	6d63      	ldr	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hcryp);
 c02177a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 c02177e:	f043 0310 	orr.w	r3, r3, #16
 c021782:	6563      	str	r3, [r4, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 c021784:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 c021788:	b005      	add	sp, #20
 c02178a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 c02178c:	6822      	ldr	r2, [r4, #0]
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 c02178e:	4631      	mov	r1, r6
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 c021790:	6813      	ldr	r3, [r2, #0]
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 c021792:	4620      	mov	r0, r4
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 c021794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c021798:	6013      	str	r3, [r2, #0]
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 c02179a:	f7ff fdc1 	bl	c021320 <CRYP_GCMCCM_SetHeaderPhase>
 c02179e:	2800      	cmp	r0, #0
 c0217a0:	d17c      	bne.n	c02189c <CRYP_AESCCM_Process+0x1b4>
    hcryp->Phase = CRYP_PHASE_PROCESS;
 c0217a2:	2302      	movs	r3, #2
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 c0217a4:	6822      	ldr	r2, [r4, #0]
    hcryp->Phase = CRYP_PHASE_PROCESS;
 c0217a6:	6463      	str	r3, [r4, #68]	; 0x44
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 c0217a8:	6813      	ldr	r3, [r2, #0]
 c0217aa:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 c0217ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c0217b2:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 c0217b4:	6813      	ldr	r3, [r2, #0]
 c0217b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 c0217ba:	6013      	str	r3, [r2, #0]
 c0217bc:	e7a3      	b.n	c021706 <CRYP_AESCCM_Process+0x1e>
    CRYP_AES_ProcessData(hcryp, Timeout);
 c0217be:	4631      	mov	r1, r6
 c0217c0:	4620      	mov	r0, r4
 c0217c2:	f7ff ff29 	bl	c021618 <CRYP_AES_ProcessData>
    if (Timeout != HAL_MAX_DELAY)
 c0217c6:	1c71      	adds	r1, r6, #1
 c0217c8:	d0a7      	beq.n	c02171a <CRYP_AESCCM_Process+0x32>
      if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 c0217ca:	f7ff fd6b 	bl	c0212a4 <HAL_GetTick>
 c0217ce:	1bc0      	subs	r0, r0, r7
 c0217d0:	42b0      	cmp	r0, r6
 c0217d2:	d801      	bhi.n	c0217d8 <CRYP_AESCCM_Process+0xf0>
 c0217d4:	2e00      	cmp	r6, #0
 c0217d6:	d1a0      	bne.n	c02171a <CRYP_AESCCM_Process+0x32>
        __HAL_CRYP_DISABLE(hcryp);
 c0217d8:	6822      	ldr	r2, [r4, #0]
 c0217da:	6813      	ldr	r3, [r2, #0]
 c0217dc:	f023 0301 	bic.w	r3, r3, #1
 c0217e0:	6013      	str	r3, [r2, #0]
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 c0217e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 c0217e4:	2001      	movs	r0, #1
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 c0217e6:	f043 0310 	orr.w	r3, r3, #16
 c0217ea:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hcryp);
 c0217ec:	2300      	movs	r3, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 c0217ee:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 c0217f2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      return HAL_ERROR;
 c0217f6:	e7c7      	b.n	c021788 <CRYP_AESCCM_Process+0xa0>
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 c0217f8:	2500      	movs	r5, #0
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 c0217fa:	091a      	lsrs	r2, r3, #4
 c0217fc:	3201      	adds	r2, #1
 c0217fe:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 c021802:	6822      	ldr	r2, [r4, #0]
 c021804:	6811      	ldr	r1, [r2, #0]
 c021806:	f001 0118 	and.w	r1, r1, #24
 c02180a:	2910      	cmp	r1, #16
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 c02180c:	bf01      	itttt	eq
 c02180e:	6811      	ldreq	r1, [r2, #0]
 c021810:	f421 0170 	biceq.w	r1, r1, #15728640	; 0xf00000
 c021814:	ea41 5103 	orreq.w	r1, r1, r3, lsl #20
 c021818:	6011      	streq	r1, [r2, #0]
 c02181a:	f1c3 0110 	rsb	r1, r3, #16
 c02181e:	0889      	lsrs	r1, r1, #2
    if ((npblb % 4U) == 0U)
 c021820:	079b      	lsls	r3, r3, #30
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 c021822:	bf18      	it	ne
 c021824:	3101      	addne	r1, #1
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 c021826:	428d      	cmp	r5, r1
 c021828:	d129      	bne.n	c02187e <CRYP_AESCCM_Process+0x196>
 c02182a:	462b      	mov	r3, r5
      hcryp->Instance->DINR  = 0U;
 c02182c:	2100      	movs	r1, #0
    while (loopcounter < 4U)
 c02182e:	2b03      	cmp	r3, #3
 c021830:	d931      	bls.n	c021896 <CRYP_AESCCM_Process+0x1ae>
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c021832:	4631      	mov	r1, r6
 c021834:	4620      	mov	r0, r4
 c021836:	f7ff fd5c 	bl	c0212f2 <CRYP_WaitOnCCFlag>
 c02183a:	2800      	cmp	r0, #0
 c02183c:	d1d1      	bne.n	c0217e2 <CRYP_AESCCM_Process+0xfa>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 c02183e:	6823      	ldr	r3, [r4, #0]
 c021840:	681a      	ldr	r2, [r3, #0]
 c021842:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 c021846:	601a      	str	r2, [r3, #0]
      temp[loopcounter] = hcryp->Instance->DOUTR;
 c021848:	68da      	ldr	r2, [r3, #12]
 c02184a:	9200      	str	r2, [sp, #0]
 c02184c:	68da      	ldr	r2, [r3, #12]
 c02184e:	9201      	str	r2, [sp, #4]
 c021850:	68da      	ldr	r2, [r3, #12]
 c021852:	68db      	ldr	r3, [r3, #12]
 c021854:	9202      	str	r2, [sp, #8]
 c021856:	9303      	str	r3, [sp, #12]
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 c021858:	4285      	cmp	r5, r0
 c02185a:	f43f af6b 	beq.w	c021734 <CRYP_AESCCM_Process+0x4c>
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 c02185e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 c021862:	f85d 1020 	ldr.w	r1, [sp, r0, lsl #2]
 c021866:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 c021868:	b29b      	uxth	r3, r3
 c02186a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      hcryp->CrypOutCount++;
 c02186e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 c021872:	3001      	adds	r0, #1
      hcryp->CrypOutCount++;
 c021874:	3301      	adds	r3, #1
 c021876:	b29b      	uxth	r3, r3
 c021878:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 c02187c:	e7ec      	b.n	c021858 <CRYP_AESCCM_Process+0x170>
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 c02187e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 c021880:	6b60      	ldr	r0, [r4, #52]	; 0x34
 c021882:	b29b      	uxth	r3, r3
 c021884:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 c021888:	3501      	adds	r5, #1
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 c02188a:	6093      	str	r3, [r2, #8]
      hcryp->CrypInCount++;
 c02188c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 c02188e:	3301      	adds	r3, #1
 c021890:	b29b      	uxth	r3, r3
 c021892:	87e3      	strh	r3, [r4, #62]	; 0x3e
 c021894:	e7c7      	b.n	c021826 <CRYP_AESCCM_Process+0x13e>
      hcryp->Instance->DINR  = 0U;
 c021896:	6091      	str	r1, [r2, #8]
      loopcounter++;
 c021898:	3301      	adds	r3, #1
 c02189a:	e7c8      	b.n	c02182e <CRYP_AESCCM_Process+0x146>
      return HAL_ERROR;
 c02189c:	2001      	movs	r0, #1
 c02189e:	e773      	b.n	c021788 <CRYP_AESCCM_Process+0xa0>

0c0218a0 <CRYP_AESGCM_Process>:
{
 c0218a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 c0218a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 c0218a4:	b085      	sub	sp, #20
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 c0218a6:	2b01      	cmp	r3, #1
{
 c0218a8:	4604      	mov	r4, r0
 c0218aa:	460e      	mov	r6, r1
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 c0218ac:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 c0218b0:	d11f      	bne.n	c0218f2 <CRYP_AESGCM_Process+0x52>
    if (hcryp->KeyIVConfig == 1U)
 c0218b2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 c0218b4:	2a01      	cmp	r2, #1
 c0218b6:	d11b      	bne.n	c0218f0 <CRYP_AESGCM_Process+0x50>
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 c0218b8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 c0218ba:	442b      	add	r3, r5
 c0218bc:	65c3      	str	r3, [r0, #92]	; 0x5c
  if ((hcryp->Size % 16U) != 0U)
 c0218be:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 c0218c2:	08ad      	lsrs	r5, r5, #2
  if ((hcryp->Size % 16U) != 0U)
 c0218c4:	0718      	lsls	r0, r3, #28
    wordsize = ((wordsize / 4U) * 4U) ;
 c0218c6:	bf18      	it	ne
 c0218c8:	f025 0503 	bicne.w	r5, r5, #3
  tickstart = HAL_GetTick();
 c0218cc:	f7ff fcea 	bl	c0212a4 <HAL_GetTick>
 c0218d0:	4607      	mov	r7, r0
    incount = hcryp->CrypInCount;
 c0218d2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    outcount = hcryp->CrypOutCount;
 c0218d4:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    incount = hcryp->CrypInCount;
 c0218d8:	b292      	uxth	r2, r2
  while ((incount < wordsize) && (outcount < wordsize))
 c0218da:	4295      	cmp	r5, r2
    outcount = hcryp->CrypOutCount;
 c0218dc:	b29b      	uxth	r3, r3
  while ((incount < wordsize) && (outcount < wordsize))
 c0218de:	d901      	bls.n	c0218e4 <CRYP_AESGCM_Process+0x44>
 c0218e0:	429d      	cmp	r5, r3
 c0218e2:	d849      	bhi.n	c021978 <CRYP_AESGCM_Process+0xd8>
  if ((hcryp->Size % 16U) != 0U)
 c0218e4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 c0218e8:	071a      	lsls	r2, r3, #28
 c0218ea:	d162      	bne.n	c0219b2 <CRYP_AESGCM_Process+0x112>
  return HAL_OK;
 c0218ec:	2000      	movs	r0, #0
 c0218ee:	e027      	b.n	c021940 <CRYP_AESGCM_Process+0xa0>
      hcryp->KeyIVConfig = 1U;
 c0218f0:	6583      	str	r3, [r0, #88]	; 0x58
    hcryp->CrypHeaderCount = 0U;
 c0218f2:	2700      	movs	r7, #0
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 c0218f4:	6822      	ldr	r2, [r4, #0]
    hcryp->CrypHeaderCount = 0U;
 c0218f6:	87a7      	strh	r7, [r4, #60]	; 0x3c
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 c0218f8:	6813      	ldr	r3, [r2, #0]
    hcryp->SizesSum = hcryp->Size;
 c0218fa:	65e5      	str	r5, [r4, #92]	; 0x5c
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 c0218fc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 c021900:	6013      	str	r3, [r2, #0]
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 c021902:	68a1      	ldr	r1, [r4, #8]
 c021904:	4620      	mov	r0, r4
 c021906:	f7ff fcd3 	bl	c0212b0 <CRYP_SetKey>
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 c02190a:	6922      	ldr	r2, [r4, #16]
 c02190c:	6823      	ldr	r3, [r4, #0]
 c02190e:	6811      	ldr	r1, [r2, #0]
 c021910:	62d9      	str	r1, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 c021912:	6851      	ldr	r1, [r2, #4]
 c021914:	6299      	str	r1, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 c021916:	6891      	ldr	r1, [r2, #8]
 c021918:	6259      	str	r1, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 c02191a:	68d2      	ldr	r2, [r2, #12]
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c02191c:	4631      	mov	r1, r6
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 c02191e:	621a      	str	r2, [r3, #32]
    __HAL_CRYP_ENABLE(hcryp);
 c021920:	681a      	ldr	r2, [r3, #0]
 c021922:	f042 0201 	orr.w	r2, r2, #1
 c021926:	601a      	str	r2, [r3, #0]
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c021928:	f7ff fce3 	bl	c0212f2 <CRYP_WaitOnCCFlag>
 c02192c:	b150      	cbz	r0, c021944 <CRYP_AESGCM_Process+0xa4>
      hcryp->State = HAL_CRYP_STATE_READY;
 c02192e:	2001      	movs	r0, #1
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 c021930:	6d63      	ldr	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hcryp);
 c021932:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 c021936:	f043 0310 	orr.w	r3, r3, #16
 c02193a:	6563      	str	r3, [r4, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 c02193c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 c021940:	b005      	add	sp, #20
 c021942:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 c021944:	6822      	ldr	r2, [r4, #0]
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 c021946:	4631      	mov	r1, r6
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 c021948:	6813      	ldr	r3, [r2, #0]
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 c02194a:	4620      	mov	r0, r4
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 c02194c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c021950:	6013      	str	r3, [r2, #0]
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 c021952:	f7ff fce5 	bl	c021320 <CRYP_GCMCCM_SetHeaderPhase>
 c021956:	2800      	cmp	r0, #0
 c021958:	f040 8085 	bne.w	c021a66 <CRYP_AESGCM_Process+0x1c6>
    hcryp->Phase = CRYP_PHASE_PROCESS;
 c02195c:	2302      	movs	r3, #2
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 c02195e:	6822      	ldr	r2, [r4, #0]
    hcryp->Phase = CRYP_PHASE_PROCESS;
 c021960:	6463      	str	r3, [r4, #68]	; 0x44
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 c021962:	6813      	ldr	r3, [r2, #0]
 c021964:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 c021968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c02196c:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 c02196e:	6813      	ldr	r3, [r2, #0]
 c021970:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 c021974:	6013      	str	r3, [r2, #0]
 c021976:	e7a2      	b.n	c0218be <CRYP_AESGCM_Process+0x1e>
    CRYP_AES_ProcessData(hcryp, Timeout);
 c021978:	4631      	mov	r1, r6
 c02197a:	4620      	mov	r0, r4
 c02197c:	f7ff fe4c 	bl	c021618 <CRYP_AES_ProcessData>
    if (Timeout != HAL_MAX_DELAY)
 c021980:	1c71      	adds	r1, r6, #1
 c021982:	d0a6      	beq.n	c0218d2 <CRYP_AESGCM_Process+0x32>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 c021984:	f7ff fc8e 	bl	c0212a4 <HAL_GetTick>
 c021988:	1bc0      	subs	r0, r0, r7
 c02198a:	42b0      	cmp	r0, r6
 c02198c:	d801      	bhi.n	c021992 <CRYP_AESGCM_Process+0xf2>
 c02198e:	2e00      	cmp	r6, #0
 c021990:	d19f      	bne.n	c0218d2 <CRYP_AESGCM_Process+0x32>
        __HAL_CRYP_DISABLE(hcryp);
 c021992:	6822      	ldr	r2, [r4, #0]
        hcryp->State = HAL_CRYP_STATE_READY;
 c021994:	2001      	movs	r0, #1
        __HAL_CRYP_DISABLE(hcryp);
 c021996:	6813      	ldr	r3, [r2, #0]
 c021998:	f023 0301 	bic.w	r3, r3, #1
 c02199c:	6013      	str	r3, [r2, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 c02199e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 c0219a0:	f043 0310 	orr.w	r3, r3, #16
 c0219a4:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hcryp);
 c0219a6:	2300      	movs	r3, #0
        hcryp->State = HAL_CRYP_STATE_READY;
 c0219a8:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
        __HAL_UNLOCK(hcryp);
 c0219ac:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 c0219b0:	e7c6      	b.n	c021940 <CRYP_AESGCM_Process+0xa0>
    for (index = 0U; index < lastwordsize; index ++)
 c0219b2:	2500      	movs	r5, #0
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 c0219b4:	091a      	lsrs	r2, r3, #4
 c0219b6:	3201      	adds	r2, #1
 c0219b8:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 c0219bc:	6822      	ldr	r2, [r4, #0]
 c0219be:	6811      	ldr	r1, [r2, #0]
 c0219c0:	f011 0f18 	tst.w	r1, #24
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 c0219c4:	bf01      	itttt	eq
 c0219c6:	6811      	ldreq	r1, [r2, #0]
 c0219c8:	f421 0170 	biceq.w	r1, r1, #15728640	; 0xf00000
 c0219cc:	ea41 5103 	orreq.w	r1, r1, r3, lsl #20
 c0219d0:	6011      	streq	r1, [r2, #0]
 c0219d2:	f1c3 0110 	rsb	r1, r3, #16
 c0219d6:	0889      	lsrs	r1, r1, #2
    if ((npblb % 4U) == 0U)
 c0219d8:	079b      	lsls	r3, r3, #30
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 c0219da:	bf18      	it	ne
 c0219dc:	3101      	addne	r1, #1
    for (index = 0U; index < lastwordsize; index ++)
 c0219de:	428d      	cmp	r5, r1
 c0219e0:	d132      	bne.n	c021a48 <CRYP_AESGCM_Process+0x1a8>
 c0219e2:	462b      	mov	r3, r5
      hcryp->Instance->DINR  = 0U;
 c0219e4:	2100      	movs	r1, #0
    while (index < 4U)
 c0219e6:	2b03      	cmp	r3, #3
 c0219e8:	d93a      	bls.n	c021a60 <CRYP_AESGCM_Process+0x1c0>
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c0219ea:	4631      	mov	r1, r6
 c0219ec:	4620      	mov	r0, r4
 c0219ee:	f7ff fc80 	bl	c0212f2 <CRYP_WaitOnCCFlag>
 c0219f2:	b140      	cbz	r0, c021a06 <CRYP_AESGCM_Process+0x166>
      hcryp->State = HAL_CRYP_STATE_READY;
 c0219f4:	2301      	movs	r3, #1
 c0219f6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 c0219fa:	2300      	movs	r3, #0
      HAL_CRYP_ErrorCallback(hcryp);
 c0219fc:	4620      	mov	r0, r4
      __HAL_UNLOCK(hcryp);
 c0219fe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      HAL_CRYP_ErrorCallback(hcryp);
 c021a02:	f7ff fe08 	bl	c021616 <HAL_CRYP_ErrorCallback>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 c021a06:	6823      	ldr	r3, [r4, #0]
 c021a08:	681a      	ldr	r2, [r3, #0]
 c021a0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 c021a0e:	601a      	str	r2, [r3, #0]
      temp[index] = hcryp->Instance->DOUTR;
 c021a10:	68da      	ldr	r2, [r3, #12]
 c021a12:	9200      	str	r2, [sp, #0]
 c021a14:	68da      	ldr	r2, [r3, #12]
 c021a16:	9201      	str	r2, [sp, #4]
 c021a18:	68da      	ldr	r2, [r3, #12]
 c021a1a:	68db      	ldr	r3, [r3, #12]
 c021a1c:	9202      	str	r2, [sp, #8]
    for (index = 0U; index < lastwordsize; index++)
 c021a1e:	2200      	movs	r2, #0
      temp[index] = hcryp->Instance->DOUTR;
 c021a20:	9303      	str	r3, [sp, #12]
    for (index = 0U; index < lastwordsize; index++)
 c021a22:	4295      	cmp	r5, r2
 c021a24:	f43f af62 	beq.w	c0218ec <CRYP_AESGCM_Process+0x4c>
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 c021a28:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 c021a2c:	f85d 0022 	ldr.w	r0, [sp, r2, lsl #2]
 c021a30:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 c021a32:	b29b      	uxth	r3, r3
 c021a34:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      hcryp->CrypOutCount++;
 c021a38:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    for (index = 0U; index < lastwordsize; index++)
 c021a3c:	3201      	adds	r2, #1
      hcryp->CrypOutCount++;
 c021a3e:	3301      	adds	r3, #1
 c021a40:	b29b      	uxth	r3, r3
 c021a42:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 c021a46:	e7ec      	b.n	c021a22 <CRYP_AESGCM_Process+0x182>
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 c021a48:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 c021a4a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 c021a4c:	b29b      	uxth	r3, r3
 c021a4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    for (index = 0U; index < lastwordsize; index ++)
 c021a52:	3501      	adds	r5, #1
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 c021a54:	6093      	str	r3, [r2, #8]
      hcryp->CrypInCount++;
 c021a56:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 c021a58:	3301      	adds	r3, #1
 c021a5a:	b29b      	uxth	r3, r3
 c021a5c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 c021a5e:	e7be      	b.n	c0219de <CRYP_AESGCM_Process+0x13e>
      hcryp->Instance->DINR  = 0U;
 c021a60:	6091      	str	r1, [r2, #8]
      index++;
 c021a62:	3301      	adds	r3, #1
 c021a64:	e7bf      	b.n	c0219e6 <CRYP_AESGCM_Process+0x146>
      return HAL_ERROR;
 c021a66:	2001      	movs	r0, #1
 c021a68:	e76a      	b.n	c021940 <CRYP_AESGCM_Process+0xa0>
	...

0c021a6c <HAL_CRYP_Encrypt>:
{
 c021a6c:	b570      	push	{r4, r5, r6, lr}
  if (hcryp->State == HAL_CRYP_STATE_READY)
 c021a6e:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
{
 c021a72:	4604      	mov	r4, r0
  if (hcryp->State == HAL_CRYP_STATE_READY)
 c021a74:	b2ed      	uxtb	r5, r5
 c021a76:	2d01      	cmp	r5, #1
 c021a78:	d176      	bne.n	c021b68 <HAL_CRYP_Encrypt+0xfc>
    hcryp->State = HAL_CRYP_STATE_BUSY;
 c021a7a:	2002      	movs	r0, #2
    __HAL_LOCK(hcryp);
 c021a7c:	f894 6050 	ldrb.w	r6, [r4, #80]	; 0x50
    hcryp->State = HAL_CRYP_STATE_BUSY;
 c021a80:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    __HAL_LOCK(hcryp);
 c021a84:	2e01      	cmp	r6, #1
 c021a86:	d069      	beq.n	c021b5c <HAL_CRYP_Encrypt+0xf0>
    hcryp->CrypInCount = 0U;
 c021a88:	2000      	movs	r0, #0
    hcryp->pCrypOutBuffPtr = Output;
 c021a8a:	e9c4 130d 	strd	r1, r3, [r4, #52]	; 0x34
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 c021a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hcryp->CrypInCount = 0U;
 c021a90:	87e0      	strh	r0, [r4, #62]	; 0x3e
    __HAL_LOCK(hcryp);
 c021a92:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    hcryp->CrypOutCount = 0U;
 c021a96:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 c021a9a:	b903      	cbnz	r3, c021a9e <HAL_CRYP_Encrypt+0x32>
      hcryp->Size = Size * 4U;
 c021a9c:	0092      	lsls	r2, r2, #2
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 c021a9e:	6823      	ldr	r3, [r4, #0]
      hcryp->Size = Size;
 c021aa0:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 c021aa4:	681a      	ldr	r2, [r3, #0]
 c021aa6:	f022 0218 	bic.w	r2, r2, #24
 c021aaa:	601a      	str	r2, [r3, #0]
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 c021aac:	681a      	ldr	r2, [r3, #0]
 c021aae:	4b30      	ldr	r3, [pc, #192]	; (c021b70 <HAL_CRYP_Encrypt+0x104>)
 c021ab0:	4013      	ands	r3, r2
    switch (algo)
 c021ab2:	2b40      	cmp	r3, #64	; 0x40
 c021ab4:	d003      	beq.n	c021abe <HAL_CRYP_Encrypt+0x52>
 c021ab6:	d83b      	bhi.n	c021b30 <HAL_CRYP_Encrypt+0xc4>
 c021ab8:	b10b      	cbz	r3, c021abe <HAL_CRYP_Encrypt+0x52>
 c021aba:	2b20      	cmp	r3, #32
 c021abc:	d13d      	bne.n	c021b3a <HAL_CRYP_Encrypt+0xce>
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 c021abe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 c021ac0:	2b01      	cmp	r3, #1
 c021ac2:	d103      	bne.n	c021acc <HAL_CRYP_Encrypt+0x60>
    if (hcryp->KeyIVConfig == 1U)
 c021ac4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 c021ac6:	2a01      	cmp	r2, #1
 c021ac8:	d010      	beq.n	c021aec <HAL_CRYP_Encrypt+0x80>
      hcryp->KeyIVConfig = 1U;
 c021aca:	65a3      	str	r3, [r4, #88]	; 0x58
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 c021acc:	68a1      	ldr	r1, [r4, #8]
 c021ace:	4620      	mov	r0, r4
 c021ad0:	f7ff fbee 	bl	c0212b0 <CRYP_SetKey>
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 c021ad4:	6963      	ldr	r3, [r4, #20]
 c021ad6:	b14b      	cbz	r3, c021aec <HAL_CRYP_Encrypt+0x80>
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 c021ad8:	6922      	ldr	r2, [r4, #16]
 c021ada:	6823      	ldr	r3, [r4, #0]
 c021adc:	6811      	ldr	r1, [r2, #0]
 c021ade:	62d9      	str	r1, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 c021ae0:	6851      	ldr	r1, [r2, #4]
 c021ae2:	6299      	str	r1, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 c021ae4:	6891      	ldr	r1, [r2, #8]
 c021ae6:	6259      	str	r1, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 c021ae8:	68d2      	ldr	r2, [r2, #12]
 c021aea:	621a      	str	r2, [r3, #32]
  hcryp->Phase = CRYP_PHASE_PROCESS;
 c021aec:	2302      	movs	r3, #2
  __HAL_CRYP_ENABLE(hcryp);
 c021aee:	6822      	ldr	r2, [r4, #0]
  hcryp->Phase = CRYP_PHASE_PROCESS;
 c021af0:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_CRYP_ENABLE(hcryp);
 c021af2:	6813      	ldr	r3, [r2, #0]
 c021af4:	f043 0301 	orr.w	r3, r3, #1
 c021af8:	6013      	str	r3, [r2, #0]
    incount = hcryp->CrypInCount;
 c021afa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 c021afc:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    incount = hcryp->CrypInCount;
 c021b00:	b292      	uxth	r2, r2
    outcount = hcryp->CrypOutCount;
 c021b02:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 c021b06:	0889      	lsrs	r1, r1, #2
 c021b08:	4291      	cmp	r1, r2
    outcount = hcryp->CrypOutCount;
 c021b0a:	b29b      	uxth	r3, r3
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 c021b0c:	d901      	bls.n	c021b12 <HAL_CRYP_Encrypt+0xa6>
 c021b0e:	4299      	cmp	r1, r3
 c021b10:	d819      	bhi.n	c021b46 <HAL_CRYP_Encrypt+0xda>
  __HAL_CRYP_DISABLE(hcryp);
 c021b12:	6822      	ldr	r2, [r4, #0]
 c021b14:	6813      	ldr	r3, [r2, #0]
 c021b16:	f023 0301 	bic.w	r3, r3, #1
 c021b1a:	6013      	str	r3, [r2, #0]
  hcryp->State = HAL_CRYP_STATE_READY;
 c021b1c:	2301      	movs	r3, #1
 c021b1e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      hcryp->State = HAL_CRYP_STATE_READY;
 c021b22:	2301      	movs	r3, #1
      __HAL_UNLOCK(hcryp);
 c021b24:	2000      	movs	r0, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 c021b26:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 c021b2a:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
 c021b2e:	e015      	b.n	c021b5c <HAL_CRYP_Encrypt+0xf0>
    switch (algo)
 c021b30:	2b60      	cmp	r3, #96	; 0x60
 c021b32:	d00d      	beq.n	c021b50 <HAL_CRYP_Encrypt+0xe4>
 c021b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c021b38:	d011      	beq.n	c021b5e <HAL_CRYP_Encrypt+0xf2>
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 c021b3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 c021b3c:	f043 0320 	orr.w	r3, r3, #32
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 c021b40:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 c021b42:	2001      	movs	r0, #1
 c021b44:	e00a      	b.n	c021b5c <HAL_CRYP_Encrypt+0xf0>
    CRYP_AES_ProcessData(hcryp, Timeout);
 c021b46:	9904      	ldr	r1, [sp, #16]
 c021b48:	4620      	mov	r0, r4
 c021b4a:	f7ff fd65 	bl	c021618 <CRYP_AES_ProcessData>
 c021b4e:	e7d4      	b.n	c021afa <HAL_CRYP_Encrypt+0x8e>
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 c021b50:	9904      	ldr	r1, [sp, #16]
 c021b52:	4620      	mov	r0, r4
 c021b54:	f7ff fea4 	bl	c0218a0 <CRYP_AESGCM_Process>
    if (status == HAL_OK)
 c021b58:	2800      	cmp	r0, #0
 c021b5a:	d0e2      	beq.n	c021b22 <HAL_CRYP_Encrypt+0xb6>
}
 c021b5c:	bd70      	pop	{r4, r5, r6, pc}
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 c021b5e:	9904      	ldr	r1, [sp, #16]
 c021b60:	4620      	mov	r0, r4
 c021b62:	f7ff fdc1 	bl	c0216e8 <CRYP_AESCCM_Process>
        break;
 c021b66:	e7f7      	b.n	c021b58 <HAL_CRYP_Encrypt+0xec>
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 c021b68:	6d43      	ldr	r3, [r0, #84]	; 0x54
 c021b6a:	f043 0308 	orr.w	r3, r3, #8
 c021b6e:	e7e7      	b.n	c021b40 <HAL_CRYP_Encrypt+0xd4>
 c021b70:	00010060 	.word	0x00010060

0c021b74 <HAL_CRYP_Decrypt>:
{
 c021b74:	b570      	push	{r4, r5, r6, lr}
  if (hcryp->State == HAL_CRYP_STATE_READY)
 c021b76:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
{
 c021b7a:	4604      	mov	r4, r0
  if (hcryp->State == HAL_CRYP_STATE_READY)
 c021b7c:	b2ed      	uxtb	r5, r5
 c021b7e:	2d01      	cmp	r5, #1
 c021b80:	f040 80b4 	bne.w	c021cec <HAL_CRYP_Decrypt+0x178>
    hcryp->State = HAL_CRYP_STATE_BUSY;
 c021b84:	2002      	movs	r0, #2
    __HAL_LOCK(hcryp);
 c021b86:	f894 6050 	ldrb.w	r6, [r4, #80]	; 0x50
    hcryp->State = HAL_CRYP_STATE_BUSY;
 c021b8a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    __HAL_LOCK(hcryp);
 c021b8e:	2e01      	cmp	r6, #1
 c021b90:	d04b      	beq.n	c021c2a <HAL_CRYP_Decrypt+0xb6>
    hcryp->CrypInCount = 0U;
 c021b92:	2000      	movs	r0, #0
    hcryp->pCrypOutBuffPtr = Output;
 c021b94:	e9c4 130d 	strd	r1, r3, [r4, #52]	; 0x34
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 c021b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hcryp->CrypInCount = 0U;
 c021b9a:	87e0      	strh	r0, [r4, #62]	; 0x3e
    __HAL_LOCK(hcryp);
 c021b9c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    hcryp->CrypOutCount = 0U;
 c021ba0:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 c021ba4:	b903      	cbnz	r3, c021ba8 <HAL_CRYP_Decrypt+0x34>
      hcryp->Size = Size * 4U;
 c021ba6:	0092      	lsls	r2, r2, #2
      hcryp->Size = Size;
 c021ba8:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 c021bac:	6822      	ldr	r2, [r4, #0]
 c021bae:	6813      	ldr	r3, [r2, #0]
 c021bb0:	f023 0318 	bic.w	r3, r3, #24
 c021bb4:	f043 0310 	orr.w	r3, r3, #16
 c021bb8:	6013      	str	r3, [r2, #0]
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 c021bba:	6811      	ldr	r1, [r2, #0]
 c021bbc:	4b4d      	ldr	r3, [pc, #308]	; (c021cf4 <HAL_CRYP_Decrypt+0x180>)
 c021bbe:	400b      	ands	r3, r1
    switch (algo)
 c021bc0:	2b40      	cmp	r3, #64	; 0x40
 c021bc2:	d003      	beq.n	c021bcc <HAL_CRYP_Decrypt+0x58>
 c021bc4:	d832      	bhi.n	c021c2c <HAL_CRYP_Decrypt+0xb8>
 c021bc6:	b10b      	cbz	r3, c021bcc <HAL_CRYP_Decrypt+0x58>
 c021bc8:	2b20      	cmp	r3, #32
 c021bca:	d134      	bne.n	c021c36 <HAL_CRYP_Decrypt+0xc2>
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 c021bcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 c021bce:	2b01      	cmp	r3, #1
 c021bd0:	d103      	bne.n	c021bda <HAL_CRYP_Decrypt+0x66>
    if (hcryp->KeyIVConfig == 1U)
 c021bd2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 c021bd4:	2901      	cmp	r1, #1
 c021bd6:	d049      	beq.n	c021c6c <HAL_CRYP_Decrypt+0xf8>
      hcryp->KeyIVConfig = 1U;
 c021bd8:	65a3      	str	r3, [r4, #88]	; 0x58
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 c021bda:	6963      	ldr	r3, [r4, #20]
 c021bdc:	68a1      	ldr	r1, [r4, #8]
 c021bde:	2b40      	cmp	r3, #64	; 0x40
 c021be0:	d06f      	beq.n	c021cc2 <HAL_CRYP_Decrypt+0x14e>
      if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 c021be2:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 c021be6:	2d00      	cmp	r5, #0
 c021be8:	d162      	bne.n	c021cb0 <HAL_CRYP_Decrypt+0x13c>
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 c021bea:	6813      	ldr	r3, [r2, #0]
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 c021bec:	4620      	mov	r0, r4
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 c021bee:	f023 0318 	bic.w	r3, r3, #24
 c021bf2:	f043 0308 	orr.w	r3, r3, #8
 c021bf6:	6013      	str	r3, [r2, #0]
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 c021bf8:	f7ff fb5a 	bl	c0212b0 <CRYP_SetKey>
        __HAL_CRYP_ENABLE(hcryp);
 c021bfc:	6822      	ldr	r2, [r4, #0]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c021bfe:	9904      	ldr	r1, [sp, #16]
        __HAL_CRYP_ENABLE(hcryp);
 c021c00:	6813      	ldr	r3, [r2, #0]
 c021c02:	f043 0301 	orr.w	r3, r3, #1
 c021c06:	6013      	str	r3, [r2, #0]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c021c08:	f7ff fb73 	bl	c0212f2 <CRYP_WaitOnCCFlag>
 c021c0c:	6823      	ldr	r3, [r4, #0]
          __HAL_CRYP_DISABLE(hcryp);
 c021c0e:	681a      	ldr	r2, [r3, #0]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 c021c10:	b1b8      	cbz	r0, c021c42 <HAL_CRYP_Decrypt+0xce>
          hcryp->State = HAL_CRYP_STATE_READY;
 c021c12:	2001      	movs	r0, #1
          __HAL_CRYP_DISABLE(hcryp);
 c021c14:	f022 0201 	bic.w	r2, r2, #1
 c021c18:	601a      	str	r2, [r3, #0]
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 c021c1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
          __HAL_UNLOCK(hcryp);
 c021c1c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 c021c20:	f043 0310 	orr.w	r3, r3, #16
 c021c24:	6563      	str	r3, [r4, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 c021c26:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 c021c2a:	bd70      	pop	{r4, r5, r6, pc}
    switch (algo)
 c021c2c:	2b60      	cmp	r3, #96	; 0x60
 c021c2e:	d051      	beq.n	c021cd4 <HAL_CRYP_Decrypt+0x160>
 c021c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c021c34:	d055      	beq.n	c021ce2 <HAL_CRYP_Decrypt+0x16e>
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 c021c36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 c021c38:	f043 0320 	orr.w	r3, r3, #32
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 c021c3c:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 c021c3e:	2001      	movs	r0, #1
 c021c40:	e7f3      	b.n	c021c2a <HAL_CRYP_Decrypt+0xb6>
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 c021c42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 c021c46:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 c021c48:	681a      	ldr	r2, [r3, #0]
 c021c4a:	f022 0218 	bic.w	r2, r2, #24
 c021c4e:	f042 0210 	orr.w	r2, r2, #16
 c021c52:	601a      	str	r2, [r3, #0]
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 c021c54:	6963      	ldr	r3, [r4, #20]
 c021c56:	b14b      	cbz	r3, c021c6c <HAL_CRYP_Decrypt+0xf8>
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 c021c58:	6922      	ldr	r2, [r4, #16]
 c021c5a:	6823      	ldr	r3, [r4, #0]
 c021c5c:	6811      	ldr	r1, [r2, #0]
 c021c5e:	62d9      	str	r1, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 c021c60:	6851      	ldr	r1, [r2, #4]
 c021c62:	6299      	str	r1, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 c021c64:	6891      	ldr	r1, [r2, #8]
 c021c66:	6259      	str	r1, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 c021c68:	68d2      	ldr	r2, [r2, #12]
 c021c6a:	621a      	str	r2, [r3, #32]
  hcryp->Phase = CRYP_PHASE_PROCESS;
 c021c6c:	2302      	movs	r3, #2
  __HAL_CRYP_ENABLE(hcryp);
 c021c6e:	6822      	ldr	r2, [r4, #0]
  hcryp->Phase = CRYP_PHASE_PROCESS;
 c021c70:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_CRYP_ENABLE(hcryp);
 c021c72:	6813      	ldr	r3, [r2, #0]
 c021c74:	f043 0301 	orr.w	r3, r3, #1
 c021c78:	6013      	str	r3, [r2, #0]
    incount = hcryp->CrypInCount;
 c021c7a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 c021c7c:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    incount = hcryp->CrypInCount;
 c021c80:	b292      	uxth	r2, r2
    outcount = hcryp->CrypOutCount;
 c021c82:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 c021c86:	0889      	lsrs	r1, r1, #2
 c021c88:	4291      	cmp	r1, r2
    outcount = hcryp->CrypOutCount;
 c021c8a:	b29b      	uxth	r3, r3
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 c021c8c:	d901      	bls.n	c021c92 <HAL_CRYP_Decrypt+0x11e>
 c021c8e:	4299      	cmp	r1, r3
 c021c90:	d81b      	bhi.n	c021cca <HAL_CRYP_Decrypt+0x156>
  __HAL_CRYP_DISABLE(hcryp);
 c021c92:	6822      	ldr	r2, [r4, #0]
 c021c94:	6813      	ldr	r3, [r2, #0]
 c021c96:	f023 0301 	bic.w	r3, r3, #1
 c021c9a:	6013      	str	r3, [r2, #0]
  hcryp->State = HAL_CRYP_STATE_READY;
 c021c9c:	2301      	movs	r3, #1
 c021c9e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      hcryp->State = HAL_CRYP_STATE_READY;
 c021ca2:	2301      	movs	r3, #1
      __HAL_UNLOCK(hcryp);
 c021ca4:	2000      	movs	r0, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 c021ca6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 c021caa:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
 c021cae:	e7bc      	b.n	c021c2a <HAL_CRYP_Decrypt+0xb6>
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 c021cb0:	4620      	mov	r0, r4
 c021cb2:	f7ff fafd 	bl	c0212b0 <CRYP_SetKey>
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 c021cb6:	6822      	ldr	r2, [r4, #0]
 c021cb8:	6813      	ldr	r3, [r2, #0]
 c021cba:	f043 0318 	orr.w	r3, r3, #24
 c021cbe:	6013      	str	r3, [r2, #0]
 c021cc0:	e7c8      	b.n	c021c54 <HAL_CRYP_Decrypt+0xe0>
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 c021cc2:	4620      	mov	r0, r4
 c021cc4:	f7ff faf4 	bl	c0212b0 <CRYP_SetKey>
 c021cc8:	e7c4      	b.n	c021c54 <HAL_CRYP_Decrypt+0xe0>
    CRYP_AES_ProcessData(hcryp, Timeout);
 c021cca:	9904      	ldr	r1, [sp, #16]
 c021ccc:	4620      	mov	r0, r4
 c021cce:	f7ff fca3 	bl	c021618 <CRYP_AES_ProcessData>
 c021cd2:	e7d2      	b.n	c021c7a <HAL_CRYP_Decrypt+0x106>
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 c021cd4:	9904      	ldr	r1, [sp, #16]
 c021cd6:	4620      	mov	r0, r4
 c021cd8:	f7ff fde2 	bl	c0218a0 <CRYP_AESGCM_Process>
    if (status == HAL_OK)
 c021cdc:	2800      	cmp	r0, #0
 c021cde:	d1a4      	bne.n	c021c2a <HAL_CRYP_Decrypt+0xb6>
 c021ce0:	e7df      	b.n	c021ca2 <HAL_CRYP_Decrypt+0x12e>
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 c021ce2:	9904      	ldr	r1, [sp, #16]
 c021ce4:	4620      	mov	r0, r4
 c021ce6:	f7ff fcff 	bl	c0216e8 <CRYP_AESCCM_Process>
        break;
 c021cea:	e7f7      	b.n	c021cdc <HAL_CRYP_Decrypt+0x168>
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 c021cec:	6d43      	ldr	r3, [r0, #84]	; 0x54
 c021cee:	f043 0308 	orr.w	r3, r3, #8
 c021cf2:	e7a3      	b.n	c021c3c <HAL_CRYP_Decrypt+0xc8>
 c021cf4:	00010060 	.word	0x00010060

0c021cf8 <HAL_CRYPEx_AESGCM_GenerateAuthTAG>:
  * @param  AuthTag Pointer to the authentication buffer
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_AESGCM_GenerateAuthTAG(CRYP_HandleTypeDef *hcryp, uint32_t *AuthTag, uint32_t Timeout)
{
 c021cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  /* Assume first Init.HeaderSize is in words */
  uint64_t headerlength = (uint64_t)hcryp->Init.HeaderSize * 32U; /* Header length in bits */
 c021cfc:	69c5      	ldr	r5, [r0, #28]
{
 c021cfe:	4690      	mov	r8, r2
  uint64_t inputlength = (uint64_t)hcryp->SizesSum * 8U; /* Input length in bits */
  uint32_t tagaddr = (uint32_t)AuthTag;

  /* Correct headerlength if Init.HeaderSize is actually in bytes */
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_BYTE)
 c021d00:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
 c021d02:	4604      	mov	r4, r0
  {
    headerlength /= 4U;
  }

  if (hcryp->State == HAL_CRYP_STATE_READY)
 c021d04:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_BYTE)
 c021d08:	2a01      	cmp	r2, #1
  uint64_t headerlength = (uint64_t)hcryp->Init.HeaderSize * 32U; /* Header length in bits */
 c021d0a:	ea4f 63d5 	mov.w	r3, r5, lsr #27
 c021d0e:	ea4f 1545 	mov.w	r5, r5, lsl #5
    headerlength /= 4U;
 c021d12:	bf08      	it	eq
 c021d14:	08ad      	lsreq	r5, r5, #2
  if (hcryp->State == HAL_CRYP_STATE_READY)
 c021d16:	b2c6      	uxtb	r6, r0
    headerlength /= 4U;
 c021d18:	bf08      	it	eq
 c021d1a:	ea45 7583 	orreq.w	r5, r5, r3, lsl #30
  if (hcryp->State == HAL_CRYP_STATE_READY)
 c021d1e:	2e01      	cmp	r6, #1
{
 c021d20:	460f      	mov	r7, r1
  if (hcryp->State == HAL_CRYP_STATE_READY)
 c021d22:	d166      	bne.n	c021df2 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xfa>
  {
    /* Process locked */
    __HAL_LOCK(hcryp);
 c021d24:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 c021d28:	2002      	movs	r0, #2
 c021d2a:	2b01      	cmp	r3, #1
 c021d2c:	d05f      	beq.n	c021dee <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xf6>

    /* Change the CRYP peripheral state */
    hcryp->State = HAL_CRYP_STATE_BUSY;

    /* Check if initialization phase has already been performed */
    if (hcryp->Phase == CRYPEx_PHASE_PROCESS)
 c021d2e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  uint64_t inputlength = (uint64_t)hcryp->SizesSum * 8U; /* Input length in bits */
 c021d30:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    if (hcryp->Phase == CRYPEx_PHASE_PROCESS)
 c021d32:	4281      	cmp	r1, r0
    __HAL_LOCK(hcryp);
 c021d34:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
    hcryp->State = HAL_CRYP_STATE_BUSY;
 c021d38:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
 c021d3c:	6823      	ldr	r3, [r4, #0]
    if (hcryp->Phase == CRYPEx_PHASE_PROCESS)
 c021d3e:	d12d      	bne.n	c021d9c <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xa4>
    {
      /* Change the CRYP phase */
      hcryp->Phase = CRYPEx_PHASE_FINAL;
 c021d40:	2103      	movs	r1, #3
 c021d42:	6461      	str	r1, [r4, #68]	; 0x44
      __HAL_UNLOCK(hcryp);
      return HAL_ERROR;
    }

    /* Select final phase */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_FINAL);
 c021d44:	6819      	ldr	r1, [r3, #0]
  uint64_t inputlength = (uint64_t)hcryp->SizesSum * 8U; /* Input length in bits */
 c021d46:	00d2      	lsls	r2, r2, #3
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_FINAL);
 c021d48:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 c021d4c:	6019      	str	r1, [r3, #0]

    /* Set the encrypt operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 c021d4e:	6819      	ldr	r1, [r3, #0]
 c021d50:	f021 0118 	bic.w	r1, r1, #24
 c021d54:	6019      	str	r1, [r3, #0]

    /*TinyAES peripheral from V3.1.1 : data has to be inserted normally (no swapping)*/
    /* Write into the AES_DINR register the number of bits in header (64 bits)
    followed by the number of bits in the payload */

    hcryp->Instance->DINR = 0U;
 c021d56:	2100      	movs	r1, #0
 c021d58:	6099      	str	r1, [r3, #8]
    hcryp->Instance->DINR = (uint32_t)(headerlength);
 c021d5a:	609d      	str	r5, [r3, #8]
    hcryp->Instance->DINR = 0U;
 c021d5c:	6099      	str	r1, [r3, #8]
    hcryp->Instance->DINR = (uint32_t)(inputlength);
 c021d5e:	609a      	str	r2, [r3, #8]

    /* Wait for CCF flag to be raised */
    tickstart = HAL_GetTick();
 c021d60:	f7ff faa0 	bl	c0212a4 <HAL_GetTick>
 c021d64:	4605      	mov	r5, r0
    while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 c021d66:	6823      	ldr	r3, [r4, #0]
 c021d68:	685a      	ldr	r2, [r3, #4]
 c021d6a:	07d2      	lsls	r2, r2, #31
 c021d6c:	d525      	bpl.n	c021dba <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xc2>
        }
      }
    }

    /* Read the authentication TAG in the output FIFO */
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 c021d6e:	68da      	ldr	r2, [r3, #12]

    /* Change the CRYP peripheral state */
    hcryp->State = HAL_CRYP_STATE_READY;

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 c021d70:	2000      	movs	r0, #0
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 c021d72:	603a      	str	r2, [r7, #0]
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 c021d74:	68da      	ldr	r2, [r3, #12]
 c021d76:	607a      	str	r2, [r7, #4]
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 c021d78:	68da      	ldr	r2, [r3, #12]
 c021d7a:	60ba      	str	r2, [r7, #8]
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 c021d7c:	68da      	ldr	r2, [r3, #12]
 c021d7e:	60fa      	str	r2, [r7, #12]
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 c021d80:	681a      	ldr	r2, [r3, #0]
 c021d82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 c021d86:	601a      	str	r2, [r3, #0]
    __HAL_CRYP_DISABLE(hcryp);
 c021d88:	681a      	ldr	r2, [r3, #0]
 c021d8a:	f022 0201 	bic.w	r2, r2, #1
 c021d8e:	601a      	str	r2, [r3, #0]
    hcryp->State = HAL_CRYP_STATE_READY;
 c021d90:	2301      	movs	r3, #1
    __HAL_UNLOCK(hcryp);
 c021d92:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    hcryp->State = HAL_CRYP_STATE_READY;
 c021d96:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
    return HAL_ERROR;
  }
  /* Return function status */
  return HAL_OK;
 c021d9a:	e028      	b.n	c021dee <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xf6>
      __HAL_CRYP_DISABLE(hcryp);
 c021d9c:	681a      	ldr	r2, [r3, #0]
 c021d9e:	f022 0201 	bic.w	r2, r2, #1
 c021da2:	601a      	str	r2, [r3, #0]
      hcryp->ErrorCode |= HAL_CRYP_ERROR_AUTH_TAG_SEQUENCE;
 c021da4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 c021da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c021daa:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hcryp);
 c021dac:	2300      	movs	r3, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 c021dae:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 c021db2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
 c021db6:	2001      	movs	r0, #1
 c021db8:	e019      	b.n	c021dee <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xf6>
      if (Timeout != HAL_MAX_DELAY)
 c021dba:	f1b8 3fff 	cmp.w	r8, #4294967295
 c021dbe:	d0d3      	beq.n	c021d68 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x70>
        if (((HAL_GetTick() - tickstart) > Timeout)||(Timeout == 0U))
 c021dc0:	f7ff fa70 	bl	c0212a4 <HAL_GetTick>
 c021dc4:	1b40      	subs	r0, r0, r5
 c021dc6:	4540      	cmp	r0, r8
 c021dc8:	d802      	bhi.n	c021dd0 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xd8>
 c021dca:	f1b8 0f00 	cmp.w	r8, #0
 c021dce:	d1ca      	bne.n	c021d66 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x6e>
          __HAL_CRYP_DISABLE(hcryp);
 c021dd0:	6822      	ldr	r2, [r4, #0]
          hcryp->State = HAL_CRYP_STATE_READY;
 c021dd2:	2001      	movs	r0, #1
          __HAL_CRYP_DISABLE(hcryp);
 c021dd4:	6813      	ldr	r3, [r2, #0]
 c021dd6:	f023 0301 	bic.w	r3, r3, #1
 c021dda:	6013      	str	r3, [r2, #0]
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 c021ddc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 c021dde:	f043 0310 	orr.w	r3, r3, #16
 c021de2:	6563      	str	r3, [r4, #84]	; 0x54
          __HAL_UNLOCK(hcryp);
 c021de4:	2300      	movs	r3, #0
          hcryp->State = HAL_CRYP_STATE_READY;
 c021de6:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hcryp);
 c021dea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 c021dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 c021df2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 c021df4:	f043 0308 	orr.w	r3, r3, #8
 c021df8:	6563      	str	r3, [r4, #84]	; 0x54
 c021dfa:	e7dc      	b.n	c021db6 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xbe>

0c021dfc <HAL_CRYPEx_AESCCM_GenerateAuthTAG>:
  * @param  AuthTag Pointer to the authentication buffer
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_AESCCM_GenerateAuthTAG(CRYP_HandleTypeDef *hcryp, uint32_t *AuthTag, uint32_t Timeout)
{
 c021dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c021dfe:	4604      	mov	r4, r0
  uint32_t tagaddr = (uint32_t)AuthTag;
  uint32_t tickstart;

  if (hcryp->State == HAL_CRYP_STATE_READY)
 c021e00:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
{
 c021e04:	460d      	mov	r5, r1
  if (hcryp->State == HAL_CRYP_STATE_READY)
 c021e06:	b2c0      	uxtb	r0, r0
 c021e08:	2801      	cmp	r0, #1
{
 c021e0a:	4616      	mov	r6, r2
  if (hcryp->State == HAL_CRYP_STATE_READY)
 c021e0c:	d15a      	bne.n	c021ec4 <HAL_CRYPEx_AESCCM_GenerateAuthTAG+0xc8>
  {
    /* Process locked */
    __HAL_LOCK(hcryp);
 c021e0e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 c021e12:	2b01      	cmp	r3, #1
 c021e14:	d05a      	beq.n	c021ecc <HAL_CRYPEx_AESCCM_GenerateAuthTAG+0xd0>

    /* Disable interrupts in case they were kept enabled to proceed
       a single message in several iterations */
    __HAL_CRYP_DISABLE_IT(hcryp, CRYP_IT_CCFIE | CRYP_IT_ERRIE);
 c021e16:	6823      	ldr	r3, [r4, #0]
    __HAL_LOCK(hcryp);
 c021e18:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    __HAL_CRYP_DISABLE_IT(hcryp, CRYP_IT_CCFIE | CRYP_IT_ERRIE);
 c021e1c:	681a      	ldr	r2, [r3, #0]
 c021e1e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 c021e22:	601a      	str	r2, [r3, #0]

    /* Change the CRYP peripheral state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 c021e24:	2202      	movs	r2, #2
 c021e26:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51

    /* Check if initialization phase has already been performed */
    if (hcryp->Phase == CRYPEx_PHASE_PROCESS)
 c021e2a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 c021e2c:	2a02      	cmp	r2, #2
 c021e2e:	d127      	bne.n	c021e80 <HAL_CRYPEx_AESCCM_GenerateAuthTAG+0x84>
    {
      /* Change the CRYP phase */
      hcryp->Phase = CRYPEx_PHASE_FINAL;
 c021e30:	2203      	movs	r2, #3
 c021e32:	6462      	str	r2, [r4, #68]	; 0x44
      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
      return HAL_ERROR;
    }
    /* Select final phase */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_FINAL);
 c021e34:	681a      	ldr	r2, [r3, #0]
 c021e36:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 c021e3a:	601a      	str	r2, [r3, #0]

    /* Set encrypt  operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 c021e3c:	681a      	ldr	r2, [r3, #0]
 c021e3e:	f022 0218 	bic.w	r2, r2, #24
 c021e42:	601a      	str	r2, [r3, #0]

    /* Wait for CCF flag to be raised */
    tickstart = HAL_GetTick();
 c021e44:	f7ff fa2e 	bl	c0212a4 <HAL_GetTick>
 c021e48:	4607      	mov	r7, r0
    while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 c021e4a:	6823      	ldr	r3, [r4, #0]
 c021e4c:	685a      	ldr	r2, [r3, #4]
 c021e4e:	07d2      	lsls	r2, r2, #31
 c021e50:	d524      	bpl.n	c021e9c <HAL_CRYPEx_AESCCM_GenerateAuthTAG+0xa0>
        }
      }
    }

    /* Read the authentication TAG in the output FIFO */
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 c021e52:	68da      	ldr	r2, [r3, #12]

    /* Change the CRYP peripheral state */
    hcryp->State = HAL_CRYP_STATE_READY;

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 c021e54:	2000      	movs	r0, #0
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 c021e56:	602a      	str	r2, [r5, #0]
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 c021e58:	68da      	ldr	r2, [r3, #12]
 c021e5a:	606a      	str	r2, [r5, #4]
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 c021e5c:	68da      	ldr	r2, [r3, #12]
 c021e5e:	60aa      	str	r2, [r5, #8]
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 c021e60:	68da      	ldr	r2, [r3, #12]
 c021e62:	60ea      	str	r2, [r5, #12]
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 c021e64:	681a      	ldr	r2, [r3, #0]
 c021e66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 c021e6a:	601a      	str	r2, [r3, #0]
    hcryp->State = HAL_CRYP_STATE_READY;
 c021e6c:	2201      	movs	r2, #1
 c021e6e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51

    /* Disable CRYP  */
    __HAL_CRYP_DISABLE(hcryp);
 c021e72:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hcryp);
 c021e74:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    __HAL_CRYP_DISABLE(hcryp);
 c021e78:	f022 0201 	bic.w	r2, r2, #1
 c021e7c:	601a      	str	r2, [r3, #0]
    /* Busy error code field */
    hcryp->ErrorCode = HAL_CRYP_ERROR_BUSY;
    return HAL_ERROR;
  }
  /* Return function status */
  return HAL_OK;
 c021e7e:	e00c      	b.n	c021e9a <HAL_CRYPEx_AESCCM_GenerateAuthTAG+0x9e>
      __HAL_CRYP_DISABLE(hcryp);
 c021e80:	681a      	ldr	r2, [r3, #0]
 c021e82:	f022 0201 	bic.w	r2, r2, #1
 c021e86:	601a      	str	r2, [r3, #0]
      hcryp->ErrorCode |= HAL_CRYP_ERROR_AUTH_TAG_SEQUENCE;
 c021e88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 c021e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c021e8e:	6563      	str	r3, [r4, #84]	; 0x54
          __HAL_UNLOCK(hcryp);
 c021e90:	2300      	movs	r3, #0
          hcryp->State = HAL_CRYP_STATE_READY;
 c021e92:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hcryp);
 c021e96:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 c021e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 c021e9c:	1c71      	adds	r1, r6, #1
 c021e9e:	d0d5      	beq.n	c021e4c <HAL_CRYPEx_AESCCM_GenerateAuthTAG+0x50>
        if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 c021ea0:	f7ff fa00 	bl	c0212a4 <HAL_GetTick>
 c021ea4:	1bc0      	subs	r0, r0, r7
 c021ea6:	42b0      	cmp	r0, r6
 c021ea8:	d801      	bhi.n	c021eae <HAL_CRYPEx_AESCCM_GenerateAuthTAG+0xb2>
 c021eaa:	2e00      	cmp	r6, #0
 c021eac:	d1cd      	bne.n	c021e4a <HAL_CRYPEx_AESCCM_GenerateAuthTAG+0x4e>
          __HAL_CRYP_DISABLE(hcryp);
 c021eae:	6822      	ldr	r2, [r4, #0]
          hcryp->State = HAL_CRYP_STATE_READY;
 c021eb0:	2001      	movs	r0, #1
          __HAL_CRYP_DISABLE(hcryp);
 c021eb2:	6813      	ldr	r3, [r2, #0]
 c021eb4:	f023 0301 	bic.w	r3, r3, #1
 c021eb8:	6013      	str	r3, [r2, #0]
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 c021eba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 c021ebc:	f043 0310 	orr.w	r3, r3, #16
 c021ec0:	6563      	str	r3, [r4, #84]	; 0x54
 c021ec2:	e7e5      	b.n	c021e90 <HAL_CRYPEx_AESCCM_GenerateAuthTAG+0x94>
    hcryp->ErrorCode = HAL_CRYP_ERROR_BUSY;
 c021ec4:	2308      	movs	r3, #8
    return HAL_ERROR;
 c021ec6:	2001      	movs	r0, #1
    hcryp->ErrorCode = HAL_CRYP_ERROR_BUSY;
 c021ec8:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 c021eca:	e7e6      	b.n	c021e9a <HAL_CRYPEx_AESCCM_GenerateAuthTAG+0x9e>
    __HAL_LOCK(hcryp);
 c021ecc:	2002      	movs	r0, #2
 c021ece:	e7e4      	b.n	c021e9a <HAL_CRYPEx_AESCCM_GenerateAuthTAG+0x9e>

0c021ed0 <FLASH_Program_DoubleWord>:
  __IO uint32_t *reg;
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c021ed0:	490b      	ldr	r1, [pc, #44]	; (c021f00 <FLASH_Program_DoubleWord+0x30>)
{
 c021ed2:	b530      	push	{r4, r5, lr}
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c021ed4:	688d      	ldr	r5, [r1, #8]
 c021ed6:	4c0b      	ldr	r4, [pc, #44]	; (c021f04 <FLASH_Program_DoubleWord+0x34>)
 c021ed8:	490b      	ldr	r1, [pc, #44]	; (c021f08 <FLASH_Program_DoubleWord+0x38>)
 c021eda:	ea31 0125 	bics.w	r1, r1, r5, asr #32
 c021ede:	bf28      	it	cs
 c021ee0:	4621      	movcs	r1, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 c021ee2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 c021ee6:	b672      	cpsid	i
  /* Disable interrupts to avoid any interruption during the double word programming */
  primask_bit = __get_PRIMASK();
  __disable_irq();

  /* Set PG bit */
  SET_BIT((*reg), FLASH_NSCR_NSPG);
 c021ee8:	680c      	ldr	r4, [r1, #0]
 c021eea:	f044 0401 	orr.w	r4, r4, #1
 c021eee:	600c      	str	r4, [r1, #0]

  /* Program first word */
  *(uint32_t*)Address = (uint32_t)Data;
 c021ef0:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 c021ef2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t*)(Address+4U) = (uint32_t)(Data >> 32U);
 c021ef6:	6043      	str	r3, [r0, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 c021ef8:	f385 8810 	msr	PRIMASK, r5

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 c021efc:	bd30      	pop	{r4, r5, pc}
 c021efe:	bf00      	nop
 c021f00:	30035b24 	.word	0x30035b24
 c021f04:	40022028 	.word	0x40022028
 c021f08:	5002202c 	.word	0x5002202c

0c021f0c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 c021f0c:	4b0d      	ldr	r3, [pc, #52]	; (c021f44 <HAL_FLASH_Unlock+0x38>)
 c021f0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 c021f10:	2a00      	cmp	r2, #0
 c021f12:	461a      	mov	r2, r3
 c021f14:	db04      	blt.n	c021f20 <HAL_FLASH_Unlock+0x14>
    if(READ_BIT(FLASH->SECCR, FLASH_SECCR_SECLOCK) != 0u)
 c021f16:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 c021f18:	2b00      	cmp	r3, #0
 c021f1a:	db0b      	blt.n	c021f34 <HAL_FLASH_Unlock+0x28>
 c021f1c:	2000      	movs	r0, #0
 c021f1e:	4770      	bx	lr
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 c021f20:	4909      	ldr	r1, [pc, #36]	; (c021f48 <HAL_FLASH_Unlock+0x3c>)
 c021f22:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 c021f24:	f101 3188 	add.w	r1, r1, #2290649224	; 0x88888888
 c021f28:	6099      	str	r1, [r3, #8]
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 c021f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c021f2c:	2b00      	cmp	r3, #0
 c021f2e:	daf2      	bge.n	c021f16 <HAL_FLASH_Unlock+0xa>
      status = HAL_ERROR;
 c021f30:	2001      	movs	r0, #1
}
 c021f32:	4770      	bx	lr
      WRITE_REG(FLASH->SECKEYR, FLASH_KEY1);
 c021f34:	4b04      	ldr	r3, [pc, #16]	; (c021f48 <HAL_FLASH_Unlock+0x3c>)
 c021f36:	60d3      	str	r3, [r2, #12]
      WRITE_REG(FLASH->SECKEYR, FLASH_KEY2);
 c021f38:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 c021f3c:	60d3      	str	r3, [r2, #12]
      if (READ_BIT(FLASH->SECCR, FLASH_SECCR_SECLOCK) != 0u)
 c021f3e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
      status = HAL_ERROR;
 c021f40:	0fc0      	lsrs	r0, r0, #31
 c021f42:	4770      	bx	lr
 c021f44:	50022000 	.word	0x50022000
 c021f48:	45670123 	.word	0x45670123

0c021f4c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK);
 c021f4c:	4b08      	ldr	r3, [pc, #32]	; (c021f70 <HAL_FLASH_Lock+0x24>)
 c021f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 c021f50:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 c021f54:	629a      	str	r2, [r3, #40]	; 0x28
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 c021f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 c021f58:	2a00      	cmp	r2, #0
    SET_BIT(FLASH->SECCR, FLASH_SECCR_SECLOCK);
 c021f5a:	bfbf      	itttt	lt
 c021f5c:	6ada      	ldrlt	r2, [r3, #44]	; 0x2c
    status = HAL_OK;
 c021f5e:	2000      	movlt	r0, #0
    SET_BIT(FLASH->SECCR, FLASH_SECCR_SECLOCK);
 c021f60:	f042 4200 	orrlt.w	r2, r2, #2147483648	; 0x80000000
 c021f64:	62da      	strlt	r2, [r3, #44]	; 0x2c
    if (READ_BIT(FLASH->SECCR, FLASH_SECCR_SECLOCK) != 0u)
 c021f66:	bfb4      	ite	lt
 c021f68:	6adb      	ldrlt	r3, [r3, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_ERROR;
 c021f6a:	2001      	movge	r0, #1
}
 c021f6c:	4770      	bx	lr
 c021f6e:	bf00      	nop
 c021f70:	50022000 	.word	0x50022000

0c021f74 <FLASH_WaitForLastOperation>:
{
 c021f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 c021f76:	4d1a      	ldr	r5, [pc, #104]	; (c021fe0 <FLASH_WaitForLastOperation+0x6c>)
{
 c021f78:	4606      	mov	r6, r0
  uint32_t timeout = HAL_GetTick() + Timeout;
 c021f7a:	f7ff f993 	bl	c0212a4 <HAL_GetTick>
 c021f7e:	462c      	mov	r4, r5
 c021f80:	1987      	adds	r7, r0, r6
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 c021f82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 c021f84:	03da      	lsls	r2, r3, #15
 c021f86:	d41a      	bmi.n	c021fbe <FLASH_WaitForLastOperation+0x4a>
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 c021f88:	4b16      	ldr	r3, [pc, #88]	; (c021fe4 <FLASH_WaitForLastOperation+0x70>)
 c021f8a:	4a17      	ldr	r2, [pc, #92]	; (c021fe8 <FLASH_WaitForLastOperation+0x74>)
 c021f8c:	6898      	ldr	r0, [r3, #8]
 c021f8e:	4917      	ldr	r1, [pc, #92]	; (c021fec <FLASH_WaitForLastOperation+0x78>)
 c021f90:	ea31 0120 	bics.w	r1, r1, r0, asr #32
 c021f94:	bf28      	it	cs
 c021f96:	4611      	movcs	r1, r2
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 c021f98:	680a      	ldr	r2, [r1, #0]
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
 c021f9a:	6a20      	ldr	r0, [r4, #32]
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 c021f9c:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
 c021fa0:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
  if(error != 0u)
 c021fa4:	4302      	orrs	r2, r0
 c021fa6:	d012      	beq.n	c021fce <FLASH_WaitForLastOperation+0x5a>
    pFlash.ErrorCode |= error;
 c021fa8:	6858      	ldr	r0, [r3, #4]
 c021faa:	4310      	orrs	r0, r2
 c021fac:	6058      	str	r0, [r3, #4]
    if ((error & FLASH_FLAG_OPTWERR) != 0U)
 c021fae:	0493      	lsls	r3, r2, #18
    (*reg_sr) = error;
 c021fb0:	600a      	str	r2, [r1, #0]
    if ((error & FLASH_FLAG_OPTWERR) != 0U)
 c021fb2:	d502      	bpl.n	c021fba <FLASH_WaitForLastOperation+0x46>
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
 c021fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c021fb8:	6223      	str	r3, [r4, #32]
    return HAL_ERROR;
 c021fba:	2001      	movs	r0, #1
 c021fbc:	e00e      	b.n	c021fdc <FLASH_WaitForLastOperation+0x68>
    if(Timeout != HAL_MAX_DELAY)
 c021fbe:	1c71      	adds	r1, r6, #1
 c021fc0:	d0df      	beq.n	c021f82 <FLASH_WaitForLastOperation+0xe>
      if(HAL_GetTick() >= timeout)
 c021fc2:	f7ff f96f 	bl	c0212a4 <HAL_GetTick>
 c021fc6:	42b8      	cmp	r0, r7
 c021fc8:	d3db      	bcc.n	c021f82 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 c021fca:	2003      	movs	r0, #3
 c021fcc:	e006      	b.n	c021fdc <FLASH_WaitForLastOperation+0x68>
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 c021fce:	6808      	ldr	r0, [r1, #0]
 c021fd0:	f010 0001 	ands.w	r0, r0, #1
 c021fd4:	d002      	beq.n	c021fdc <FLASH_WaitForLastOperation+0x68>
    (*reg_sr) = FLASH_FLAG_EOP;
 c021fd6:	2301      	movs	r3, #1
  return HAL_OK;
 c021fd8:	4610      	mov	r0, r2
    (*reg_sr) = FLASH_FLAG_EOP;
 c021fda:	600b      	str	r3, [r1, #0]
}
 c021fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c021fde:	bf00      	nop
 c021fe0:	50022000 	.word	0x50022000
 c021fe4:	30035b24 	.word	0x30035b24
 c021fe8:	40022020 	.word	0x40022020
 c021fec:	50022024 	.word	0x50022024

0c021ff0 <HAL_FLASH_Program>:
{
 c021ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 c021ff4:	4c16      	ldr	r4, [pc, #88]	; (c022050 <HAL_FLASH_Program+0x60>)
{
 c021ff6:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 c021ff8:	7823      	ldrb	r3, [r4, #0]
{
 c021ffa:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 c021ffc:	2b01      	cmp	r3, #1
{
 c021ffe:	4688      	mov	r8, r1
 c022000:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 c022002:	d023      	beq.n	c02204c <HAL_FLASH_Program+0x5c>
 c022004:	2301      	movs	r3, #1
 c022006:	7023      	strb	r3, [r4, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 c022008:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 c02200a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 c02200e:	6063      	str	r3, [r4, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 c022010:	f7ff ffb0 	bl	c021f74 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 c022014:	b9b0      	cbnz	r0, c022044 <HAL_FLASH_Program+0x54>
    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c022016:	4a0f      	ldr	r2, [pc, #60]	; (c022054 <HAL_FLASH_Program+0x64>)
 c022018:	4b0f      	ldr	r3, [pc, #60]	; (c022058 <HAL_FLASH_Program+0x68>)
    pFlash.ProcedureOnGoing = TypeProgram;
 c02201a:	60a5      	str	r5, [r4, #8]
    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c02201c:	ea32 0525 	bics.w	r5, r2, r5, asr #32
 c022020:	bf28      	it	cs
 c022022:	461d      	movcs	r5, r3
    FLASH_Program_DoubleWord(Address, Data);
 c022024:	4640      	mov	r0, r8
 c022026:	4632      	mov	r2, r6
 c022028:	463b      	mov	r3, r7
 c02202a:	f7ff ff51 	bl	c021ed0 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 c02202e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c022032:	f7ff ff9f 	bl	c021f74 <FLASH_WaitForLastOperation>
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 c022036:	68a2      	ldr	r2, [r4, #8]
 c022038:	682b      	ldr	r3, [r5, #0]
 c02203a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 c02203e:	ea23 0302 	bic.w	r3, r3, r2
 c022042:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(&pFlash);
 c022044:	2300      	movs	r3, #0
 c022046:	7023      	strb	r3, [r4, #0]
}
 c022048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(&pFlash);
 c02204c:	2002      	movs	r0, #2
 c02204e:	e7fb      	b.n	c022048 <HAL_FLASH_Program+0x58>
 c022050:	30035b24 	.word	0x30035b24
 c022054:	5002202c 	.word	0x5002202c
 c022058:	40022028 	.word	0x40022028

0c02205c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 c02205c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 c02205e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 c022062:	b672      	cpsid	i
  primask_bit = __get_PRIMASK();
  __disable_irq();
#endif
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c022064:	4b12      	ldr	r3, [pc, #72]	; (c0220b0 <FLASH_MassErase+0x54>)
 c022066:	4a13      	ldr	r2, [pc, #76]	; (c0220b4 <FLASH_MassErase+0x58>)
 c022068:	689c      	ldr	r4, [r3, #8]
 c02206a:	4b13      	ldr	r3, [pc, #76]	; (c0220b8 <FLASH_MassErase+0x5c>)
 c02206c:	ea33 0324 	bics.w	r3, r3, r4, asr #32
 c022070:	bf28      	it	cs
 c022072:	4613      	movcs	r3, r2

  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 c022074:	4a11      	ldr	r2, [pc, #68]	; (c0220bc <FLASH_MassErase+0x60>)
 c022076:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c022078:	0252      	lsls	r2, r2, #9
 c02207a:	d512      	bpl.n	c0220a2 <FLASH_MassErase+0x46>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 c02207c:	07c4      	lsls	r4, r0, #31
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER1);
 c02207e:	bf42      	ittt	mi
 c022080:	681a      	ldrmi	r2, [r3, #0]
 c022082:	f042 0204 	orrmi.w	r2, r2, #4
 c022086:	601a      	strmi	r2, [r3, #0]
    }

    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 c022088:	0782      	lsls	r2, r0, #30
 c02208a:	d503      	bpl.n	c022094 <FLASH_MassErase+0x38>
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER2);
 c02208c:	681a      	ldr	r2, [r3, #0]
 c02208e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    }
  }
  else
  {
    SET_BIT((*reg), (FLASH_NSCR_NSMER1 | FLASH_NSCR_NSMER2));
 c022092:	601a      	str	r2, [r3, #0]
  }

  /* Proceed to erase all sectors */
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 c022094:	681a      	ldr	r2, [r3, #0]
 c022096:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 c02209a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 c02209c:	f381 8810 	msr	PRIMASK, r1

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 c0220a0:	bd10      	pop	{r4, pc}
    SET_BIT((*reg), (FLASH_NSCR_NSMER1 | FLASH_NSCR_NSMER2));
 c0220a2:	681a      	ldr	r2, [r3, #0]
 c0220a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 c0220a8:	f042 0204 	orr.w	r2, r2, #4
 c0220ac:	e7f1      	b.n	c022092 <FLASH_MassErase+0x36>
 c0220ae:	bf00      	nop
 c0220b0:	30035b24 	.word	0x30035b24
 c0220b4:	40022028 	.word	0x40022028
 c0220b8:	5002202c 	.word	0x5002202c
 c0220bc:	50022000 	.word	0x50022000

0c0220c0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 c0220c0:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 c0220c2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 c0220c6:	b672      	cpsid	i
  primask_bit = __get_PRIMASK();
  __disable_irq();
#endif

  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c0220c8:	4b13      	ldr	r3, [pc, #76]	; (c022118 <FLASH_PageErase+0x58>)
 c0220ca:	4a14      	ldr	r2, [pc, #80]	; (c02211c <FLASH_PageErase+0x5c>)
 c0220cc:	689d      	ldr	r5, [r3, #8]
 c0220ce:	4b14      	ldr	r3, [pc, #80]	; (c022120 <FLASH_PageErase+0x60>)
 c0220d0:	ea33 0325 	bics.w	r3, r3, r5, asr #32
 c0220d4:	bf28      	it	cs
 c0220d6:	4613      	movcs	r3, r2

  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 c0220d8:	4a12      	ldr	r2, [pc, #72]	; (c022124 <FLASH_PageErase+0x64>)
 c0220da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c0220dc:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  {
    CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 c0220e0:	681a      	ldr	r2, [r3, #0]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 c0220e2:	d113      	bne.n	c02210c <FLASH_PageErase+0x4c>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 c0220e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT((*reg), FLASH_NSCR_NSBKER);
 c0220e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg), (FLASH_NSCR_NSPNB | FLASH_NSCR_NSPER), ((Page << FLASH_NSCR_NSPNB_Pos) | FLASH_NSCR_NSPER));
 c0220ea:	681a      	ldr	r2, [r3, #0]
 c0220ec:	00c0      	lsls	r0, r0, #3
 c0220ee:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 c0220f2:	f022 0202 	bic.w	r2, r2, #2
 c0220f6:	f040 0002 	orr.w	r0, r0, #2
 c0220fa:	4310      	orrs	r0, r2
 c0220fc:	6018      	str	r0, [r3, #0]
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 c0220fe:	681a      	ldr	r2, [r3, #0]
 c022100:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 c022104:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 c022106:	f384 8810 	msr	PRIMASK, r4

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 c02210a:	bd30      	pop	{r4, r5, pc}
    if((Banks & FLASH_BANK_1) != 0U)
 c02210c:	07c9      	lsls	r1, r1, #31
 c02210e:	d4e9      	bmi.n	c0220e4 <FLASH_PageErase+0x24>
      SET_BIT((*reg), FLASH_NSCR_NSBKER);
 c022110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 c022114:	e7e8      	b.n	c0220e8 <FLASH_PageErase+0x28>
 c022116:	bf00      	nop
 c022118:	30035b24 	.word	0x30035b24
 c02211c:	40022028 	.word	0x40022028
 c022120:	5002202c 	.word	0x5002202c
 c022124:	50022000 	.word	0x50022000

0c022128 <HAL_FLASHEx_Erase>:
{
 c022128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 c02212c:	4c26      	ldr	r4, [pc, #152]	; (c0221c8 <HAL_FLASHEx_Erase+0xa0>)
{
 c02212e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 c022130:	7823      	ldrb	r3, [r4, #0]
{
 c022132:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 c022134:	2b01      	cmp	r3, #1
 c022136:	d045      	beq.n	c0221c4 <HAL_FLASHEx_Erase+0x9c>
 c022138:	2301      	movs	r3, #1
 c02213a:	7023      	strb	r3, [r4, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 c02213c:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 c02213e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 c022142:	6063      	str	r3, [r4, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 c022144:	f7ff ff16 	bl	c021f74 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 c022148:	4606      	mov	r6, r0
 c02214a:	b9f0      	cbnz	r0, c02218a <HAL_FLASHEx_Erase+0x62>
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 c02214c:	682b      	ldr	r3, [r5, #0]
    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c02214e:	4a1f      	ldr	r2, [pc, #124]	; (c0221cc <HAL_FLASHEx_Erase+0xa4>)
 c022150:	491f      	ldr	r1, [pc, #124]	; (c0221d0 <HAL_FLASHEx_Erase+0xa8>)
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 c022152:	60a3      	str	r3, [r4, #8]
    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c022154:	ea31 0823 	bics.w	r8, r1, r3, asr #32
 c022158:	bf28      	it	cs
 c02215a:	4690      	movcs	r8, r2
    if ((pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 c02215c:	f248 0204 	movw	r2, #32772	; 0x8004
 c022160:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 c022164:	4293      	cmp	r3, r2
 c022166:	d115      	bne.n	c022194 <HAL_FLASHEx_Erase+0x6c>
      FLASH_MassErase(pEraseInit->Banks);
 c022168:	6868      	ldr	r0, [r5, #4]
 c02216a:	f7ff ff77 	bl	c02205c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 c02216e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c022172:	f7ff feff 	bl	c021f74 <FLASH_WaitForLastOperation>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 c022176:	4606      	mov	r6, r0
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 c022178:	68a2      	ldr	r2, [r4, #8]
 c02217a:	f8d8 3000 	ldr.w	r3, [r8]
 c02217e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 c022182:	ea23 0302 	bic.w	r3, r3, r2
 c022186:	f8c8 3000 	str.w	r3, [r8]
  __HAL_UNLOCK(&pFlash);
 c02218a:	2300      	movs	r3, #0
 c02218c:	7023      	strb	r3, [r4, #0]
}
 c02218e:	4630      	mov	r0, r6
 c022190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      *PageError = 0xFFFFFFFFU;
 c022194:	f04f 33ff 	mov.w	r3, #4294967295
 c022198:	f8c9 3000 	str.w	r3, [r9]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 c02219c:	68af      	ldr	r7, [r5, #8]
 c02219e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 c0221a2:	4413      	add	r3, r2
 c0221a4:	42bb      	cmp	r3, r7
 c0221a6:	d9e7      	bls.n	c022178 <HAL_FLASHEx_Erase+0x50>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 c0221a8:	4638      	mov	r0, r7
 c0221aa:	6869      	ldr	r1, [r5, #4]
 c0221ac:	f7ff ff88 	bl	c0220c0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 c0221b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c0221b4:	f7ff fede 	bl	c021f74 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 c0221b8:	b110      	cbz	r0, c0221c0 <HAL_FLASHEx_Erase+0x98>
          *PageError = page_index;
 c0221ba:	f8c9 7000 	str.w	r7, [r9]
 c0221be:	e7da      	b.n	c022176 <HAL_FLASHEx_Erase+0x4e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 c0221c0:	3701      	adds	r7, #1
 c0221c2:	e7ec      	b.n	c02219e <HAL_FLASHEx_Erase+0x76>
  __HAL_LOCK(&pFlash);
 c0221c4:	2602      	movs	r6, #2
 c0221c6:	e7e2      	b.n	c02218e <HAL_FLASHEx_Erase+0x66>
 c0221c8:	30035b24 	.word	0x30035b24
 c0221cc:	40022028 	.word	0x40022028
 c0221d0:	5002202c 	.word	0x5002202c

0c0221d4 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0U;
 c0221d4:	2300      	movs	r3, #0
{
 c0221d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
        EXTI->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 c0221da:	4a5f      	ldr	r2, [pc, #380]	; (c022358 <HAL_GPIO_Init+0x184>)
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0221dc:	f8d1 8000 	ldr.w	r8, [r1]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c0221e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; c022360 <HAL_GPIO_Init+0x18c>
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0221e4:	fa38 f403 	lsrs.w	r4, r8, r3
 c0221e8:	d101      	bne.n	c0221ee <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 c0221ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c0221ee:	f04f 0c01 	mov.w	ip, #1
 c0221f2:	fa0c fc03 	lsl.w	ip, ip, r3
    if(iocurrent != 0U)
 c0221f6:	ea1c 0608 	ands.w	r6, ip, r8
 c0221fa:	f000 809f 	beq.w	c02233c <HAL_GPIO_Init+0x168>
 c0221fe:	2503      	movs	r5, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c022200:	684c      	ldr	r4, [r1, #4]
 c022202:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 c022206:	f024 0a10 	bic.w	sl, r4, #16
 c02220a:	f10a 37ff 	add.w	r7, sl, #4294967295
 c02220e:	fa05 f50e 	lsl.w	r5, r5, lr
 c022212:	2f01      	cmp	r7, #1
 c022214:	ea6f 0505 	mvn.w	r5, r5
 c022218:	d811      	bhi.n	c02223e <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 c02221a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c02221c:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 c022220:	68cf      	ldr	r7, [r1, #12]
 c022222:	fa07 f70e 	lsl.w	r7, r7, lr
 c022226:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 c02222a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 c02222c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c02222e:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c022232:	f3c4 1700 	ubfx	r7, r4, #4, #1
 c022236:	409f      	lsls	r7, r3
 c022238:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 c02223c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 c02223e:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c022240:	f1ba 0f02 	cmp.w	sl, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c022244:	ea07 0c05 	and.w	ip, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c022248:	688f      	ldr	r7, [r1, #8]
 c02224a:	fa07 f70e 	lsl.w	r7, r7, lr
 c02224e:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->PUPDR = temp;
 c022252:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c022254:	d116      	bne.n	c022284 <HAL_GPIO_Init+0xb0>
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c022256:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3U];
 c02225a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 c02225e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c022262:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 c022266:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c02226a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 c02226e:	fa0c fc0b 	lsl.w	ip, ip, fp
 c022272:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c022276:	690f      	ldr	r7, [r1, #16]
 c022278:	fa07 f70b 	lsl.w	r7, r7, fp
 c02227c:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 c022280:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 c022284:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c022286:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c022288:	f004 0703 	and.w	r7, r4, #3
 c02228c:	fa07 fe0e 	lsl.w	lr, r7, lr
 c022290:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 c022294:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c022296:	00e5      	lsls	r5, r4, #3
 c022298:	d550      	bpl.n	c02233c <HAL_GPIO_Init+0x168>
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c02229a:	f04f 0c0f 	mov.w	ip, #15
 c02229e:	f023 0703 	bic.w	r7, r3, #3
 c0222a2:	f107 47a0 	add.w	r7, r7, #1342177280	; 0x50000000
 c0222a6:	f507 373d 	add.w	r7, r7, #193536	; 0x2f400
 c0222aa:	f003 0e03 	and.w	lr, r3, #3
        temp = EXTI->EXTICR[position >> 2U];
 c0222ae:	6e3d      	ldr	r5, [r7, #96]	; 0x60
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c0222b0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 c0222b4:	fa0c fc0e 	lsl.w	ip, ip, lr
 c0222b8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c0222bc:	4d27      	ldr	r5, [pc, #156]	; (c02235c <HAL_GPIO_Init+0x188>)
 c0222be:	42a8      	cmp	r0, r5
 c0222c0:	d03e      	beq.n	c022340 <HAL_GPIO_Init+0x16c>
 c0222c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 c0222c6:	42a8      	cmp	r0, r5
 c0222c8:	d03c      	beq.n	c022344 <HAL_GPIO_Init+0x170>
 c0222ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 c0222ce:	42a8      	cmp	r0, r5
 c0222d0:	d03a      	beq.n	c022348 <HAL_GPIO_Init+0x174>
 c0222d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 c0222d6:	42a8      	cmp	r0, r5
 c0222d8:	d038      	beq.n	c02234c <HAL_GPIO_Init+0x178>
 c0222da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 c0222de:	42a8      	cmp	r0, r5
 c0222e0:	d036      	beq.n	c022350 <HAL_GPIO_Init+0x17c>
 c0222e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 c0222e6:	42a8      	cmp	r0, r5
 c0222e8:	d034      	beq.n	c022354 <HAL_GPIO_Init+0x180>
 c0222ea:	4548      	cmp	r0, r9
 c0222ec:	bf14      	ite	ne
 c0222ee:	2507      	movne	r5, #7
 c0222f0:	2506      	moveq	r5, #6
 c0222f2:	fa05 f50e 	lsl.w	r5, r5, lr
 c0222f6:	ea45 050c 	orr.w	r5, r5, ip
        EXTI->EXTICR[position >> 2U] = temp;
 c0222fa:	663d      	str	r5, [r7, #96]	; 0x60
        temp &= ~(iocurrent);
 c0222fc:	43f7      	mvns	r7, r6
        temp = EXTI->IMR1;
 c0222fe:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c022302:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 c022306:	bf0c      	ite	eq
 c022308:	403d      	andeq	r5, r7
          temp |= iocurrent;
 c02230a:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 c02230c:	f8c2 5080 	str.w	r5, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 c022310:	f8d2 5084 	ldr.w	r5, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c022314:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 c022318:	bf0c      	ite	eq
 c02231a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 c02231c:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 c02231e:	f8c2 5084 	str.w	r5, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 c022322:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c022324:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 c022328:	bf0c      	ite	eq
 c02232a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 c02232c:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 c02232e:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 c022330:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c022332:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 c022334:	bf54      	ite	pl
 c022336:	403d      	andpl	r5, r7
          temp |= iocurrent;
 c022338:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 c02233a:	6055      	str	r5, [r2, #4]
    position++;
 c02233c:	3301      	adds	r3, #1
 c02233e:	e751      	b.n	c0221e4 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c022340:	2500      	movs	r5, #0
 c022342:	e7d6      	b.n	c0222f2 <HAL_GPIO_Init+0x11e>
 c022344:	2501      	movs	r5, #1
 c022346:	e7d4      	b.n	c0222f2 <HAL_GPIO_Init+0x11e>
 c022348:	2502      	movs	r5, #2
 c02234a:	e7d2      	b.n	c0222f2 <HAL_GPIO_Init+0x11e>
 c02234c:	2503      	movs	r5, #3
 c02234e:	e7d0      	b.n	c0222f2 <HAL_GPIO_Init+0x11e>
 c022350:	2504      	movs	r5, #4
 c022352:	e7ce      	b.n	c0222f2 <HAL_GPIO_Init+0x11e>
 c022354:	2505      	movs	r5, #5
 c022356:	e7cc      	b.n	c0222f2 <HAL_GPIO_Init+0x11e>
 c022358:	5002f400 	.word	0x5002f400
 c02235c:	52020000 	.word	0x52020000
 c022360:	52021800 	.word	0x52021800

0c022364 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
                                                       uint32_t PeriphAttributes)
{
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c022364:	f5b1 7f41 	cmp.w	r1, #772	; 0x304
{
 c022368:	b510      	push	{r4, lr}
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c02236a:	d267      	bcs.n	c02243c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xd8>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c02236c:	0f04      	lsrs	r4, r0, #28
 c02236e:	f000 021f 	and.w	r2, r0, #31
 c022372:	eb02 1344 	add.w	r3, r2, r4, lsl #5
 c022376:	2b32      	cmp	r3, #50	; 0x32
 c022378:	d860      	bhi.n	c02243c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xd8>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c02237a:	0680      	lsls	r0, r0, #26
 c02237c:	d535      	bpl.n	c0223ea <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x86>
 c02237e:	2b00      	cmp	r3, #0
 c022380:	d15c      	bne.n	c02243c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xd8>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c022382:	f240 1201 	movw	r2, #257	; 0x101
 c022386:	438a      	bics	r2, r1
 c022388:	d11b      	bne.n	c0223c2 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x5e>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c02238a:	4a2d      	ldr	r2, [pc, #180]	; (c022440 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xdc>)
 c02238c:	6913      	ldr	r3, [r2, #16]
 c02238e:	f04f 33ff 	mov.w	r3, #4294967295
 c022392:	6113      	str	r3, [r2, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c022394:	6953      	ldr	r3, [r2, #20]
 c022396:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c02239a:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c02239e:	6153      	str	r3, [r2, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c0223a0:	f240 2302 	movw	r3, #514	; 0x202
 c0223a4:	438b      	bics	r3, r1
 c0223a6:	d115      	bne.n	c0223d4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x70>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c0223a8:	4a25      	ldr	r2, [pc, #148]	; (c022440 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xdc>)
 c0223aa:	6a13      	ldr	r3, [r2, #32]
 c0223ac:	f04f 33ff 	mov.w	r3, #4294967295
 c0223b0:	6213      	str	r3, [r2, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c0223b2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 c0223b4:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c0223b8:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 c0223bc:	6253      	str	r3, [r2, #36]	; 0x24
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c0223be:	2000      	movs	r0, #0
 c0223c0:	e012      	b.n	c0223e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x84>
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c0223c2:	05ca      	lsls	r2, r1, #23
 c0223c4:	d5ec      	bpl.n	c0223a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x3c>
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c0223c6:	4a1e      	ldr	r2, [pc, #120]	; (c022440 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xdc>)
 c0223c8:	6910      	ldr	r0, [r2, #16]
 c0223ca:	6113      	str	r3, [r2, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c0223cc:	6953      	ldr	r3, [r2, #20]
 c0223ce:	0cdb      	lsrs	r3, r3, #19
 c0223d0:	04db      	lsls	r3, r3, #19
 c0223d2:	e7e4      	b.n	c02239e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x3a>
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c0223d4:	058c      	lsls	r4, r1, #22
 c0223d6:	d5f2      	bpl.n	c0223be <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x5a>
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c0223d8:	2000      	movs	r0, #0
 c0223da:	4a19      	ldr	r2, [pc, #100]	; (c022440 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xdc>)
 c0223dc:	6a13      	ldr	r3, [r2, #32]
 c0223de:	6210      	str	r0, [r2, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c0223e0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 c0223e2:	0cdb      	lsrs	r3, r3, #19
 c0223e4:	04db      	lsls	r3, r3, #19
 c0223e6:	6253      	str	r3, [r2, #36]	; 0x24
}
 c0223e8:	bd10      	pop	{r4, pc}
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c0223ea:	f240 1001 	movw	r0, #257	; 0x101
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0223ee:	4b15      	ldr	r3, [pc, #84]	; (c022444 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xe0>)
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c0223f0:	4388      	bics	r0, r1
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0223f2:	4423      	add	r3, r4
 c0223f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c0223f8:	d10f      	bne.n	c02241a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xb6>
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0223fa:	2001      	movs	r0, #1
 c0223fc:	681c      	ldr	r4, [r3, #0]
 c0223fe:	4090      	lsls	r0, r2
 c022400:	4320      	orrs	r0, r4
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c022402:	6018      	str	r0, [r3, #0]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c022404:	f240 2002 	movw	r0, #514	; 0x202
 c022408:	4388      	bics	r0, r1
 c02240a:	d10e      	bne.n	c02242a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xc6>
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c02240c:	2101      	movs	r1, #1
 c02240e:	6918      	ldr	r0, [r3, #16]
 c022410:	fa01 f202 	lsl.w	r2, r1, r2
 c022414:	4302      	orrs	r2, r0
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c022416:	611a      	str	r2, [r3, #16]
 c022418:	e7d1      	b.n	c0223be <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x5a>
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c02241a:	05c8      	lsls	r0, r1, #23
 c02241c:	d5f2      	bpl.n	c022404 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xa0>
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c02241e:	2401      	movs	r4, #1
 c022420:	6818      	ldr	r0, [r3, #0]
 c022422:	4094      	lsls	r4, r2
 c022424:	ea20 0004 	bic.w	r0, r0, r4
 c022428:	e7eb      	b.n	c022402 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9e>
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c02242a:	0589      	lsls	r1, r1, #22
 c02242c:	d5c7      	bpl.n	c0223be <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x5a>
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c02242e:	2001      	movs	r0, #1
 c022430:	6919      	ldr	r1, [r3, #16]
 c022432:	fa00 f202 	lsl.w	r2, r0, r2
 c022436:	ea21 0202 	bic.w	r2, r1, r2
 c02243a:	e7ec      	b.n	c022416 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xb2>
    return HAL_ERROR;
 c02243c:	2001      	movs	r0, #1
 c02243e:	e7d3      	b.n	c0223e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x84>
 c022440:	50032400 	.word	0x50032400
 c022444:	1400c904 	.word	0x1400c904

0c022448 <HAL_GTZC_MPCBB_ConfigMem>:
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c022448:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 c02244c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
{
 c022450:	b530      	push	{r4, r5, lr}
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c022452:	d002      	beq.n	c02245a <HAL_GTZC_MPCBB_ConfigMem+0x12>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c022454:	4b19      	ldr	r3, [pc, #100]	; (c0224bc <HAL_GTZC_MPCBB_ConfigMem+0x74>)
 c022456:	4298      	cmp	r0, r3
 c022458:	d12e      	bne.n	c0224b8 <HAL_GTZC_MPCBB_ConfigMem+0x70>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c02245a:	680b      	ldr	r3, [r1, #0]
 c02245c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 c022460:	d12a      	bne.n	c0224b8 <HAL_GTZC_MPCBB_ConfigMem+0x70>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c022462:	684c      	ldr	r4, [r1, #4]
 c022464:	f034 4280 	bics.w	r2, r4, #1073741824	; 0x40000000
 c022468:	d126      	bne.n	c0224b8 <HAL_GTZC_MPCBB_ConfigMem+0x70>
  reg_value = pMPCBB_desc->InvertSecureState;
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c02246a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 c02246e:	4814      	ldr	r0, [pc, #80]	; (c0224c0 <HAL_GTZC_MPCBB_ConfigMem+0x78>)
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c022470:	ea44 0403 	orr.w	r4, r4, r3
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c022474:	4b13      	ldr	r3, [pc, #76]	; (c0224c4 <HAL_GTZC_MPCBB_ConfigMem+0x7c>)
 c022476:	bf18      	it	ne
 c022478:	4603      	movne	r3, r0
    mpcbb_ptr = GTZC_MPCBB2_S;
    mem_size = GTZC_MEM_SIZE(SRAM2);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c02247a:	6818      	ldr	r0, [r3, #0]
 c02247c:	f101 0108 	add.w	r1, r1, #8
 c022480:	f020 4040 	bic.w	r0, r0, #3221225472	; 0xc0000000
 c022484:	ea40 0004 	orr.w	r0, r0, r4
 c022488:	6018      	str	r0, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c02248a:	bf15      	itete	ne
 c02248c:	f06f 00ff 	mvnne.w	r0, #255	; 0xff
 c022490:	f04f 407f 	moveq.w	r0, #4278190080	; 0xff000000
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c022494:	2408      	movne	r4, #8
 c022496:	2418      	moveq	r4, #24
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c022498:	691d      	ldr	r5, [r3, #16]
 c02249a:	4028      	ands	r0, r5
 c02249c:	6e0d      	ldr	r5, [r1, #96]	; 0x60
 c02249e:	4328      	orrs	r0, r5
 c0224a0:	6118      	str	r0, [r3, #16]

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
  for (i = 0U; i < size_in_superblocks; i++)
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c0224a2:	f102 0040 	add.w	r0, r2, #64	; 0x40
 c0224a6:	f851 5b04 	ldr.w	r5, [r1], #4
  for (i = 0U; i < size_in_superblocks; i++)
 c0224aa:	3201      	adds	r2, #1
 c0224ac:	4294      	cmp	r4, r2
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c0224ae:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c0224b2:	d1f6      	bne.n	c0224a2 <HAL_GTZC_MPCBB_ConfigMem+0x5a>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
 c0224b4:	2000      	movs	r0, #0
}
 c0224b6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 c0224b8:	2001      	movs	r0, #1
 c0224ba:	e7fc      	b.n	c0224b6 <HAL_GTZC_MPCBB_ConfigMem+0x6e>
 c0224bc:	20030000 	.word	0x20030000
 c0224c0:	50033000 	.word	0x50033000
 c0224c4:	50032c00 	.word	0x50032c00

0c0224c8 <HAL_GTZC_MPCBB_GetConfigMem>:
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if (!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0224c8:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 c0224cc:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
{
 c0224d0:	b510      	push	{r4, lr}
  if (!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0224d2:	d021      	beq.n	c022518 <HAL_GTZC_MPCBB_GetConfigMem+0x50>
      && !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c0224d4:	4b13      	ldr	r3, [pc, #76]	; (c022524 <HAL_GTZC_MPCBB_GetConfigMem+0x5c>)
 c0224d6:	4298      	cmp	r0, r3
 c0224d8:	d122      	bne.n	c022520 <HAL_GTZC_MPCBB_GetConfigMem+0x58>
    mem_size = GTZC_MEM_SIZE(SRAM1);
  }
  else
  {
    mpcbb_ptr = GTZC_MPCBB2_S;
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c0224da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    mpcbb_ptr = GTZC_MPCBB2_S;
 c0224de:	4812      	ldr	r0, [pc, #72]	; (c022528 <HAL_GTZC_MPCBB_GetConfigMem+0x60>)
  }

  /* read configuration and lock register information */
  reg_value = READ_REG(mpcbb_ptr->CR);
 c0224e0:	6802      	ldr	r2, [r0, #0]
  pMPCBB_desc->InvertSecureState = (reg_value & GTZC_MPCBB_CR_INVSECSTATE_Msk);
  pMPCBB_desc->SecureRWIllegalMode = (reg_value & GTZC_MPCBB_CR_SRWILADIS_Msk);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c0224e2:	0b5b      	lsrs	r3, r3, #13
  pMPCBB_desc->InvertSecureState = (reg_value & GTZC_MPCBB_CR_INVSECSTATE_Msk);
 c0224e4:	f002 4480 	and.w	r4, r2, #1073741824	; 0x40000000
 c0224e8:	604c      	str	r4, [r1, #4]
  /* limitation: code not portable with memory > 256K */
  pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0] = READ_REG(mpcbb_ptr->LCKVTR1)& size_mask;
 c0224ea:	f04f 34ff 	mov.w	r4, #4294967295
  pMPCBB_desc->SecureRWIllegalMode = (reg_value & GTZC_MPCBB_CR_SRWILADIS_Msk);
 c0224ee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 c0224f2:	600a      	str	r2, [r1, #0]
  pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0] = READ_REG(mpcbb_ptr->LCKVTR1)& size_mask;
 c0224f4:	6902      	ldr	r2, [r0, #16]
 c0224f6:	409c      	lsls	r4, r3
 c0224f8:	ea22 0204 	bic.w	r2, r2, r4
 c0224fc:	668a      	str	r2, [r1, #104]	; 0x68

  /* read vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
  for (i = 0U; i < size_in_superblocks; i++)
 c0224fe:	2200      	movs	r2, #0
 c022500:	3108      	adds	r1, #8
  {
    pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i] = mpcbb_ptr->VCTR[i];
 c022502:	f102 0440 	add.w	r4, r2, #64	; 0x40
 c022506:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c02250a:	3201      	adds	r2, #1
 c02250c:	4293      	cmp	r3, r2
    pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i] = mpcbb_ptr->VCTR[i];
 c02250e:	f841 4b04 	str.w	r4, [r1], #4
  for (i = 0U; i < size_in_superblocks; i++)
 c022512:	d1f6      	bne.n	c022502 <HAL_GTZC_MPCBB_GetConfigMem+0x3a>
  }

  return HAL_OK;
 c022514:	2000      	movs	r0, #0
}
 c022516:	bd10      	pop	{r4, pc}
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c022518:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    mpcbb_ptr = GTZC_MPCBB1_S;
 c02251c:	4803      	ldr	r0, [pc, #12]	; (c02252c <HAL_GTZC_MPCBB_GetConfigMem+0x64>)
 c02251e:	e7df      	b.n	c0224e0 <HAL_GTZC_MPCBB_GetConfigMem+0x18>
    return HAL_ERROR;
 c022520:	2001      	movs	r0, #1
 c022522:	e7f8      	b.n	c022516 <HAL_GTZC_MPCBB_GetConfigMem+0x4e>
 c022524:	20030000 	.word	0x20030000
 c022528:	50033000 	.word	0x50033000
 c02252c:	50032c00 	.word	0x50032c00

0c022530 <HAL_GTZC_TZIC_EnableIT>:
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId.
  *         Use GTZC_PERIPH_ALL to select all peripherals.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZIC_EnableIT(uint32_t PeriphId)
{
 c022530:	b510      	push	{r4, lr}
  uint32_t register_address;

  /* check entry parameters */
  if ((HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZIC_PERIPH_NUMBER)
 c022532:	0f03      	lsrs	r3, r0, #28
 c022534:	f000 041f 	and.w	r4, r0, #31
 c022538:	eb04 1143 	add.w	r1, r4, r3, lsl #5
 c02253c:	2947      	cmp	r1, #71	; 0x47
 c02253e:	d819      	bhi.n	c022574 <HAL_GTZC_TZIC_EnableIT+0x44>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c022540:	f010 0020 	ands.w	r0, r0, #32
 c022544:	d00b      	beq.n	c02255e <HAL_GTZC_TZIC_EnableIT+0x2e>
 c022546:	b9a9      	cbnz	r1, c022574 <HAL_GTZC_TZIC_EnableIT+0x44>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
  {
    /* same configuration is applied to all peripherals */
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c022548:	f04f 32ff 	mov.w	r2, #4294967295
 c02254c:	4b0a      	ldr	r3, [pc, #40]	; (c022578 <HAL_GTZC_TZIC_EnableIT+0x48>)
    /* common case where only one peripheral is configured */
    register_address = (uint32_t) &(GTZC_TZIC->IER1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
  }

  return HAL_OK;
 c02254e:	4608      	mov	r0, r1
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c022550:	601a      	str	r2, [r3, #0]
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
 c022552:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 c022556:	605a      	str	r2, [r3, #4]
    WRITE_REG(GTZC_TZIC->IER3, TZIC_IER3_ALL);
 c022558:	22ff      	movs	r2, #255	; 0xff
 c02255a:	609a      	str	r2, [r3, #8]
}
 c02255c:	bd10      	pop	{r4, pc}
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c02255e:	2201      	movs	r2, #1
    register_address = (uint32_t) &(GTZC_TZIC->IER1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c022560:	f103 53a0 	add.w	r3, r3, #335544320	; 0x14000000
 c022564:	f503 434a 	add.w	r3, r3, #51712	; 0xca00
 c022568:	009b      	lsls	r3, r3, #2
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c02256a:	6819      	ldr	r1, [r3, #0]
 c02256c:	40a2      	lsls	r2, r4
 c02256e:	430a      	orrs	r2, r1
 c022570:	601a      	str	r2, [r3, #0]
 c022572:	e7f3      	b.n	c02255c <HAL_GTZC_TZIC_EnableIT+0x2c>
    return HAL_ERROR;
 c022574:	2001      	movs	r0, #1
 c022576:	e7f1      	b.n	c02255c <HAL_GTZC_TZIC_EnableIT+0x2c>
 c022578:	50032800 	.word	0x50032800

0c02257c <HASH_WriteData>:
  *         processing is suspended when possible and the Peripheral feeding point reached at
  *         suspension time is stored in the handle for resumption later on.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WriteData(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size)
{
 c02257c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t buffercounter;
  __IO uint32_t inputaddr = (uint32_t) pInBuffer;

  for(buffercounter = 0U; buffercounter < Size; buffercounter+=4U)
 c02257e:	2400      	movs	r4, #0
  __IO uint32_t inputaddr = (uint32_t) pInBuffer;
 c022580:	9101      	str	r1, [sp, #4]
  {
    /* Write input data 4 bytes at a time */
    HASH->DIN = *(uint32_t*)inputaddr;
 c022582:	491c      	ldr	r1, [pc, #112]	; (c0225f4 <HASH_WriteData+0x78>)
  for(buffercounter = 0U; buffercounter < Size; buffercounter+=4U)
 c022584:	4294      	cmp	r4, r2
 c022586:	d220      	bcs.n	c0225ca <HASH_WriteData+0x4e>
    HASH->DIN = *(uint32_t*)inputaddr;
 c022588:	9b01      	ldr	r3, [sp, #4]
 c02258a:	1d25      	adds	r5, r4, #4
 c02258c:	681b      	ldr	r3, [r3, #0]
 c02258e:	604b      	str	r3, [r1, #4]
    inputaddr+=4U;
 c022590:	9b01      	ldr	r3, [sp, #4]
 c022592:	3304      	adds	r3, #4
 c022594:	9301      	str	r3, [sp, #4]

    /* If the suspension flag has been raised and if the processing is not about
    to end, suspend processing */
    if ((hhash->SuspendRequest == HAL_HASH_SUSPEND) && ((buffercounter+4U) < Size))
 c022596:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 c02259a:	2b01      	cmp	r3, #1
 c02259c:	d128      	bne.n	c0225f0 <HASH_WriteData+0x74>
 c02259e:	4295      	cmp	r5, r2
 c0225a0:	d226      	bcs.n	c0225f0 <HASH_WriteData+0x74>
    {
      /* Wait for DINIS = 1, which occurs when 16 32-bit locations are free
      in the input buffer */
      if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))
 c0225a2:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 c0225a4:	07f6      	lsls	r6, r6, #31
 c0225a6:	d523      	bpl.n	c0225f0 <HASH_WriteData+0x74>
      {
        /* Reset SuspendRequest */
        hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 c0225a8:	2500      	movs	r5, #0

        /* Depending whether the key or the input data were fed to the Peripheral, the feeding point
        reached at suspension time is not saved in the same handle fields */
        if ((hhash->Phase == HAL_HASH_PHASE_PROCESS) || (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2))
 c0225aa:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
        hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 c0225ae:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
        if ((hhash->Phase == HAL_HASH_PHASE_PROCESS) || (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2))
 c0225b2:	2902      	cmp	r1, #2
 c0225b4:	d001      	beq.n	c0225ba <HASH_WriteData+0x3e>
 c0225b6:	2904      	cmp	r1, #4
 c0225b8:	d109      	bne.n	c0225ce <HASH_WriteData+0x52>
        {
          /* Save current reading and writing locations of Input and Output buffers */
          hhash->pHashInBuffPtr =  (uint8_t *)inputaddr;
 c0225ba:	9b01      	ldr	r3, [sp, #4]
          /* Save the number of bytes that remain to be processed at this point */
          hhash->HashInCount    =  Size - (buffercounter + 4U);
 c0225bc:	3a04      	subs	r2, #4
 c0225be:	1b12      	subs	r2, r2, r4
          hhash->pHashInBuffPtr =  (uint8_t *)inputaddr;
 c0225c0:	60c3      	str	r3, [r0, #12]
          hhash->HashInCount    =  Size - (buffercounter + 4U);
 c0225c2:	6202      	str	r2, [r0, #32]
          __HAL_UNLOCK(hhash);
          return HAL_ERROR;
        }

        /* Set the HASH state to Suspended and exit to stop entering data */
        hhash->State = HAL_HASH_STATE_SUSPENDED;
 c0225c4:	2308      	movs	r3, #8
 c0225c6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      } /* if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))  */
    } /* if ((hhash->SuspendRequest == HAL_HASH_SUSPEND) && ((buffercounter+4) < Size)) */
  }   /* for(buffercounter = 0; buffercounter < Size; buffercounter+=4)                 */

  /* At this point, all the data have been entered to the Peripheral: exit */
  return  HAL_OK;
 c0225ca:	2000      	movs	r0, #0
 c0225cc:	e00e      	b.n	c0225ec <HASH_WriteData+0x70>
        else if ((hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_1) || (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3))
 c0225ce:	2903      	cmp	r1, #3
 c0225d0:	d001      	beq.n	c0225d6 <HASH_WriteData+0x5a>
 c0225d2:	2905      	cmp	r1, #5
 c0225d4:	d105      	bne.n	c0225e2 <HASH_WriteData+0x66>
          hhash->pHashKeyBuffPtr  =  (uint8_t *)inputaddr;
 c0225d6:	9b01      	ldr	r3, [sp, #4]
          hhash->HashKeyCount  =  Size - (buffercounter + 4U);
 c0225d8:	3a04      	subs	r2, #4
 c0225da:	1b12      	subs	r2, r2, r4
          hhash->pHashKeyBuffPtr  =  (uint8_t *)inputaddr;
 c0225dc:	6143      	str	r3, [r0, #20]
          hhash->HashKeyCount  =  Size - (buffercounter + 4U);
 c0225de:	6282      	str	r2, [r0, #40]	; 0x28
 c0225e0:	e7f0      	b.n	c0225c4 <HASH_WriteData+0x48>
          hhash->State = HAL_HASH_STATE_READY;
 c0225e2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
          __HAL_UNLOCK(hhash);
 c0225e6:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
          return HAL_ERROR;
 c0225ea:	4618      	mov	r0, r3
}
 c0225ec:	b002      	add	sp, #8
 c0225ee:	bd70      	pop	{r4, r5, r6, pc}
{
 c0225f0:	462c      	mov	r4, r5
 c0225f2:	e7c7      	b.n	c022584 <HASH_WriteData+0x8>
 c0225f4:	520c0400 	.word	0x520c0400

0c0225f8 <HASH_GetDigest>:
  */
static void HASH_GetDigest(uint8_t *pMsgDigest, uint8_t Size)
{
  uint32_t msgdigest = (uint32_t)pMsgDigest;

  switch(Size)
 c0225f8:	2914      	cmp	r1, #20
 c0225fa:	d016      	beq.n	c02262a <HASH_GetDigest+0x32>
 c0225fc:	d802      	bhi.n	c022604 <HASH_GetDigest+0xc>
 c0225fe:	2910      	cmp	r1, #16
 c022600:	d005      	beq.n	c02260e <HASH_GetDigest+0x16>
 c022602:	4770      	bx	lr
 c022604:	291c      	cmp	r1, #28
 c022606:	d021      	beq.n	c02264c <HASH_GetDigest+0x54>
 c022608:	2920      	cmp	r1, #32
 c02260a:	d037      	beq.n	c02267c <HASH_GetDigest+0x84>
 c02260c:	4770      	bx	lr
  {
    /* Read the message digest */
    case 16:  /* MD5 */
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 c02260e:	4b29      	ldr	r3, [pc, #164]	; (c0226b4 <HASH_GetDigest+0xbc>)
 c022610:	68da      	ldr	r2, [r3, #12]
  return __builtin_bswap32(value);
 c022612:	ba12      	rev	r2, r2
 c022614:	6002      	str	r2, [r0, #0]
      msgdigest+=4U;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 c022616:	691a      	ldr	r2, [r3, #16]
 c022618:	ba12      	rev	r2, r2
 c02261a:	6042      	str	r2, [r0, #4]
      msgdigest+=4U;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 c02261c:	695a      	ldr	r2, [r3, #20]
 c02261e:	ba12      	rev	r2, r2
 c022620:	6082      	str	r2, [r0, #8]
      msgdigest+=4U;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 c022622:	699b      	ldr	r3, [r3, #24]
 c022624:	ba1b      	rev	r3, r3
 c022626:	60c3      	str	r3, [r0, #12]
    break;
 c022628:	4770      	bx	lr
    case 20:  /* SHA1 */
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 c02262a:	4b22      	ldr	r3, [pc, #136]	; (c0226b4 <HASH_GetDigest+0xbc>)
 c02262c:	68da      	ldr	r2, [r3, #12]
 c02262e:	ba12      	rev	r2, r2
 c022630:	6002      	str	r2, [r0, #0]
      msgdigest+=4U;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 c022632:	691a      	ldr	r2, [r3, #16]
 c022634:	ba12      	rev	r2, r2
 c022636:	6042      	str	r2, [r0, #4]
      msgdigest+=4U;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 c022638:	695a      	ldr	r2, [r3, #20]
 c02263a:	ba12      	rev	r2, r2
 c02263c:	6082      	str	r2, [r0, #8]
      msgdigest+=4U;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 c02263e:	699a      	ldr	r2, [r3, #24]
 c022640:	ba12      	rev	r2, r2
 c022642:	60c2      	str	r2, [r0, #12]
      msgdigest+=4U;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 c022644:	69db      	ldr	r3, [r3, #28]
 c022646:	ba1b      	rev	r3, r3
 c022648:	6103      	str	r3, [r0, #16]
    break;
 c02264a:	4770      	bx	lr
  case 28:  /* SHA224 */
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 c02264c:	4b19      	ldr	r3, [pc, #100]	; (c0226b4 <HASH_GetDigest+0xbc>)
 c02264e:	68da      	ldr	r2, [r3, #12]
 c022650:	ba12      	rev	r2, r2
 c022652:	6002      	str	r2, [r0, #0]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 c022654:	691a      	ldr	r2, [r3, #16]
 c022656:	ba12      	rev	r2, r2
 c022658:	6042      	str	r2, [r0, #4]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 c02265a:	695a      	ldr	r2, [r3, #20]
 c02265c:	ba12      	rev	r2, r2
 c02265e:	6082      	str	r2, [r0, #8]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 c022660:	699a      	ldr	r2, [r3, #24]
 c022662:	ba12      	rev	r2, r2
 c022664:	60c2      	str	r2, [r0, #12]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 c022666:	69db      	ldr	r3, [r3, #28]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 c022668:	4a13      	ldr	r2, [pc, #76]	; (c0226b8 <HASH_GetDigest+0xc0>)
 c02266a:	ba1b      	rev	r3, r3
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 c02266c:	6103      	str	r3, [r0, #16]
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 c02266e:	6953      	ldr	r3, [r2, #20]
 c022670:	ba1b      	rev	r3, r3
 c022672:	6143      	str	r3, [r0, #20]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 c022674:	6993      	ldr	r3, [r2, #24]
 c022676:	ba1b      	rev	r3, r3
 c022678:	6183      	str	r3, [r0, #24]
    break;
 c02267a:	4770      	bx	lr
  case 32:   /* SHA256 */
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 c02267c:	4b0d      	ldr	r3, [pc, #52]	; (c0226b4 <HASH_GetDigest+0xbc>)
 c02267e:	68da      	ldr	r2, [r3, #12]
 c022680:	ba12      	rev	r2, r2
 c022682:	6002      	str	r2, [r0, #0]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 c022684:	691a      	ldr	r2, [r3, #16]
 c022686:	ba12      	rev	r2, r2
 c022688:	6042      	str	r2, [r0, #4]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 c02268a:	695a      	ldr	r2, [r3, #20]
 c02268c:	ba12      	rev	r2, r2
 c02268e:	6082      	str	r2, [r0, #8]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 c022690:	699a      	ldr	r2, [r3, #24]
 c022692:	ba12      	rev	r2, r2
 c022694:	60c2      	str	r2, [r0, #12]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 c022696:	69db      	ldr	r3, [r3, #28]
 c022698:	ba1b      	rev	r3, r3
 c02269a:	6103      	str	r3, [r0, #16]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 c02269c:	4b06      	ldr	r3, [pc, #24]	; (c0226b8 <HASH_GetDigest+0xc0>)
 c02269e:	695a      	ldr	r2, [r3, #20]
 c0226a0:	ba12      	rev	r2, r2
 c0226a2:	6142      	str	r2, [r0, #20]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 c0226a4:	699a      	ldr	r2, [r3, #24]
 c0226a6:	ba12      	rev	r2, r2
 c0226a8:	6182      	str	r2, [r0, #24]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 c0226aa:	69db      	ldr	r3, [r3, #28]
 c0226ac:	ba1b      	rev	r3, r3
 c0226ae:	61c3      	str	r3, [r0, #28]
    break;
    default:
    break;
  }
}
 c0226b0:	4770      	bx	lr
 c0226b2:	bf00      	nop
 c0226b4:	520c0400 	.word	0x520c0400
 c0226b8:	520c0710 	.word	0x520c0710

0c0226bc <HASH_WaitOnFlagUntilTimeout>:
  * @param  Status the Flag status (SET or RESET).
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WaitOnFlagUntilTimeout(HASH_HandleTypeDef *hhash, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 c0226bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c0226c0:	4604      	mov	r4, r0
 c0226c2:	460e      	mov	r6, r1
 c0226c4:	4691      	mov	r9, r2
 c0226c6:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 c0226c8:	f7fe fdec 	bl	c0212a4 <HAL_GetTick>
 c0226cc:	4f16      	ldr	r7, [pc, #88]	; (c022728 <HASH_WaitOnFlagUntilTimeout+0x6c>)
 c0226ce:	4680      	mov	r8, r0

  /* Wait until flag is set */
  if(Status == RESET)
 c0226d0:	f1b9 0f00 	cmp.w	r9, #0
 c0226d4:	d021      	beq.n	c02271a <HASH_WaitOnFlagUntilTimeout+0x5e>
      }
    }
  }
  else
  {
    while(__HAL_HASH_GET_FLAG(Flag) != RESET)
 c0226d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0226d8:	ea36 0303 	bics.w	r3, r6, r3
 c0226dc:	d121      	bne.n	c022722 <HASH_WaitOnFlagUntilTimeout+0x66>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 c0226de:	1c6b      	adds	r3, r5, #1
 c0226e0:	d0f9      	beq.n	c0226d6 <HASH_WaitOnFlagUntilTimeout+0x1a>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 c0226e2:	f7fe fddf 	bl	c0212a4 <HAL_GetTick>
 c0226e6:	eba0 0008 	sub.w	r0, r0, r8
 c0226ea:	42a8      	cmp	r0, r5
 c0226ec:	d80b      	bhi.n	c022706 <HASH_WaitOnFlagUntilTimeout+0x4a>
 c0226ee:	2d00      	cmp	r5, #0
 c0226f0:	d1f1      	bne.n	c0226d6 <HASH_WaitOnFlagUntilTimeout+0x1a>
 c0226f2:	e008      	b.n	c022706 <HASH_WaitOnFlagUntilTimeout+0x4a>
      if(Timeout != HAL_MAX_DELAY)
 c0226f4:	1c6a      	adds	r2, r5, #1
 c0226f6:	d010      	beq.n	c02271a <HASH_WaitOnFlagUntilTimeout+0x5e>
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 c0226f8:	f7fe fdd4 	bl	c0212a4 <HAL_GetTick>
 c0226fc:	eba0 0008 	sub.w	r0, r0, r8
 c022700:	42a8      	cmp	r0, r5
 c022702:	d800      	bhi.n	c022706 <HASH_WaitOnFlagUntilTimeout+0x4a>
 c022704:	b94d      	cbnz	r5, c02271a <HASH_WaitOnFlagUntilTimeout+0x5e>
        {
          /* Set State to Ready to be able to restart later on */
          hhash->State  = HAL_HASH_STATE_READY;
 c022706:	2301      	movs	r3, #1
          /* Store time out issue in handle status */
          hhash->Status = HAL_TIMEOUT;
 c022708:	2003      	movs	r0, #3
          hhash->State  = HAL_HASH_STATE_READY;
 c02270a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hhash);
 c02270e:	2300      	movs	r3, #0
          hhash->Status = HAL_TIMEOUT;
 c022710:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hhash);
 c022714:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

          return HAL_TIMEOUT;
 c022718:	e004      	b.n	c022724 <HASH_WaitOnFlagUntilTimeout+0x68>
    while(__HAL_HASH_GET_FLAG(Flag) == RESET)
 c02271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c02271c:	ea36 0303 	bics.w	r3, r6, r3
 c022720:	d1e8      	bne.n	c0226f4 <HASH_WaitOnFlagUntilTimeout+0x38>
        }
      }
    }
  }
  return HAL_OK;
 c022722:	2000      	movs	r0, #0
}
 c022724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c022728:	520c0400 	.word	0x520c0400

0c02272c <HAL_HASH_MspInit>:
}
 c02272c:	4770      	bx	lr
	...

0c022730 <HAL_HASH_Init>:
{
 c022730:	b538      	push	{r3, r4, r5, lr}
  if(hhash == NULL)
 c022732:	4604      	mov	r4, r0
 c022734:	b340      	cbz	r0, c022788 <HAL_HASH_Init+0x58>
  if(hhash->State == HAL_HASH_STATE_RESET)
 c022736:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 c02273a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 c02273e:	b91b      	cbnz	r3, c022748 <HAL_HASH_Init+0x18>
    hhash->Lock = HAL_UNLOCKED;
 c022740:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_HASH_MspInit(hhash);
 c022744:	f7ff fff2 	bl	c02272c <HAL_HASH_MspInit>
  hhash->HashInCount = 0;
 c022748:	2000      	movs	r0, #0
  hhash->State = HAL_HASH_STATE_BUSY;
 c02274a:	2302      	movs	r3, #2
  hhash->Phase = HAL_HASH_PHASE_READY;
 c02274c:	2101      	movs	r1, #1
  MODIFY_REG(HASH->CR, HASH_CR_DATATYPE, hhash->Init.DataType);
 c02274e:	4a0f      	ldr	r2, [pc, #60]	; (c02278c <HAL_HASH_Init+0x5c>)
  hhash->State = HAL_HASH_STATE_BUSY;
 c022750:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hhash->HashBuffSize = 0;
 c022754:	61e0      	str	r0, [r4, #28]
  hhash->HashInCount = 0;
 c022756:	6220      	str	r0, [r4, #32]
  hhash->HashITCounter = 0;
 c022758:	6260      	str	r0, [r4, #36]	; 0x24
  hhash->NbWordsAlreadyPushed = 0;
 c02275a:	63a0      	str	r0, [r4, #56]	; 0x38
  MODIFY_REG(HASH->CR, HASH_CR_DATATYPE, hhash->Init.DataType);
 c02275c:	6813      	ldr	r3, [r2, #0]
 c02275e:	6825      	ldr	r5, [r4, #0]
 c022760:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 c022764:	432b      	orrs	r3, r5
  hhash->DigestCalculationDisable = RESET;
 c022766:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
  hhash->Phase = HAL_HASH_PHASE_READY;
 c02276a:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 c02276e:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  MODIFY_REG(HASH->CR, HASH_CR_DATATYPE, hhash->Init.DataType);
 c022772:	6013      	str	r3, [r2, #0]
__HAL_HASH_RESET_MDMAT();
 c022774:	6813      	ldr	r3, [r2, #0]
 c022776:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 c02277a:	6013      	str	r3, [r2, #0]
  hhash->State = HAL_HASH_STATE_READY;
 c02277c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  hhash->Status = HAL_OK;
 c022780:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 c022784:	63e0      	str	r0, [r4, #60]	; 0x3c
}
 c022786:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 c022788:	2001      	movs	r0, #1
 c02278a:	e7fc      	b.n	c022786 <HAL_HASH_Init+0x56>
 c02278c:	520c0400 	.word	0x520c0400

0c022790 <HAL_HASH_MspDeInit>:
 c022790:	4770      	bx	lr

0c022792 <HAL_HASH_DeInit>:
{
 c022792:	b538      	push	{r3, r4, r5, lr}
  if(hhash == NULL)
 c022794:	4605      	mov	r5, r0
 c022796:	2401      	movs	r4, #1
 c022798:	b190      	cbz	r0, c0227c0 <HAL_HASH_DeInit+0x2e>
  hhash->State = HAL_HASH_STATE_BUSY;
 c02279a:	2302      	movs	r3, #2
  hhash->Phase = HAL_HASH_PHASE_READY;
 c02279c:	f880 402d 	strb.w	r4, [r0, #45]	; 0x2d
  hhash->HashInCount = 0;
 c0227a0:	2400      	movs	r4, #0
  hhash->State = HAL_HASH_STATE_BUSY;
 c0227a2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hhash->HashBuffSize = 0;
 c0227a6:	61c4      	str	r4, [r0, #28]
  hhash->HashInCount = 0;
 c0227a8:	6204      	str	r4, [r0, #32]
  hhash->DigestCalculationDisable = RESET;
 c0227aa:	f880 4037 	strb.w	r4, [r0, #55]	; 0x37
  hhash->HashITCounter = 0;
 c0227ae:	6244      	str	r4, [r0, #36]	; 0x24
  HAL_HASH_MspDeInit(hhash);
 c0227b0:	f7ff ffee 	bl	c022790 <HAL_HASH_MspDeInit>
  hhash->State = HAL_HASH_STATE_RESET;
 c0227b4:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hhash->Status = HAL_OK;
 c0227b8:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 c0227bc:	63ec      	str	r4, [r5, #60]	; 0x3c
  hhash->Accumulation = 0U;
 c0227be:	642c      	str	r4, [r5, #64]	; 0x40
    return HAL_ERROR;
 c0227c0:	4620      	mov	r0, r4
}
 c0227c2:	bd38      	pop	{r3, r4, r5, pc}

0c0227c4 <HAL_HASH_ContextSaving>:
  *(uint32_t*)(mem_ptr) = READ_BIT(HASH->IMR,HASH_IT_DINI|HASH_IT_DCI);
 c0227c4:	4b0e      	ldr	r3, [pc, #56]	; (c022800 <HAL_HASH_ContextSaving+0x3c>)
{
 c0227c6:	b530      	push	{r4, r5, lr}
  *(uint32_t*)(mem_ptr) = READ_BIT(HASH->IMR,HASH_IT_DINI|HASH_IT_DCI);
 c0227c8:	6a1a      	ldr	r2, [r3, #32]
    *(uint32_t*)(mem_ptr) = *(uint32_t*)(csr_ptr);
 c0227ca:	480e      	ldr	r0, [pc, #56]	; (c022804 <HAL_HASH_ContextSaving+0x40>)
  *(uint32_t*)(mem_ptr) = READ_BIT(HASH->IMR,HASH_IT_DINI|HASH_IT_DCI);
 c0227cc:	f002 0203 	and.w	r2, r2, #3
 c0227d0:	600a      	str	r2, [r1, #0]
  *(uint32_t*)(mem_ptr) = READ_BIT(HASH->STR,HASH_STR_NBLW);
 c0227d2:	689a      	ldr	r2, [r3, #8]
 c0227d4:	f002 021f 	and.w	r2, r2, #31
 c0227d8:	604a      	str	r2, [r1, #4]
  *(uint32_t*)(mem_ptr) = READ_BIT(HASH->CR,HASH_CR_DMAE|HASH_CR_DATATYPE|HASH_CR_MODE|HASH_CR_ALGO|HASH_CR_LKEY|HASH_CR_MDMAT);
 c0227da:	681b      	ldr	r3, [r3, #0]
  for (i = HASH_NUMBER_OF_CSR_REGISTERS; i >0U; i--)
 c0227dc:	4a0a      	ldr	r2, [pc, #40]	; (c022808 <HAL_HASH_ContextSaving+0x44>)
  *(uint32_t*)(mem_ptr) = READ_BIT(HASH->CR,HASH_CR_DMAE|HASH_CR_DATATYPE|HASH_CR_MODE|HASH_CR_ALGO|HASH_CR_LKEY|HASH_CR_MDMAT);
 c0227de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 c0227e2:	f423 037a 	bic.w	r3, r3, #16384000	; 0xfa0000
 c0227e6:	f423 435f 	bic.w	r3, r3, #57088	; 0xdf00
 c0227ea:	f023 0307 	bic.w	r3, r3, #7
 c0227ee:	608b      	str	r3, [r1, #8]
  uint32_t csr_ptr = (uint32_t)HASH->CSR;
 c0227f0:	4b06      	ldr	r3, [pc, #24]	; (c02280c <HAL_HASH_ContextSaving+0x48>)
    *(uint32_t*)(mem_ptr) = *(uint32_t*)(csr_ptr);
 c0227f2:	681d      	ldr	r5, [r3, #0]
 c0227f4:	18cc      	adds	r4, r1, r3
    csr_ptr+=4U;
 c0227f6:	3304      	adds	r3, #4
  for (i = HASH_NUMBER_OF_CSR_REGISTERS; i >0U; i--)
 c0227f8:	4293      	cmp	r3, r2
    *(uint32_t*)(mem_ptr) = *(uint32_t*)(csr_ptr);
 c0227fa:	5025      	str	r5, [r4, r0]
  for (i = HASH_NUMBER_OF_CSR_REGISTERS; i >0U; i--)
 c0227fc:	d1f9      	bne.n	c0227f2 <HAL_HASH_ContextSaving+0x2e>
}
 c0227fe:	bd30      	pop	{r4, r5, pc}
 c022800:	520c0400 	.word	0x520c0400
 c022804:	adf3fb14 	.word	0xadf3fb14
 c022808:	520c05d0 	.word	0x520c05d0
 c02280c:	520c04f8 	.word	0x520c04f8

0c022810 <HAL_HASH_ContextRestoring>:
  WRITE_REG(HASH->IMR, (*(uint32_t*)(mem_ptr)));
 c022810:	4b0c      	ldr	r3, [pc, #48]	; (c022844 <HAL_HASH_ContextRestoring+0x34>)
 c022812:	680a      	ldr	r2, [r1, #0]
{
 c022814:	b510      	push	{r4, lr}
  WRITE_REG(HASH->IMR, (*(uint32_t*)(mem_ptr)));
 c022816:	621a      	str	r2, [r3, #32]
  WRITE_REG(HASH->STR, (*(uint32_t*)(mem_ptr)));
 c022818:	684a      	ldr	r2, [r1, #4]
    WRITE_REG((*(uint32_t*)(csr_ptr)), (*(uint32_t*)(mem_ptr)));
 c02281a:	4c0b      	ldr	r4, [pc, #44]	; (c022848 <HAL_HASH_ContextRestoring+0x38>)
  WRITE_REG(HASH->STR, (*(uint32_t*)(mem_ptr)));
 c02281c:	609a      	str	r2, [r3, #8]
  WRITE_REG(HASH->CR, (*(uint32_t*)(mem_ptr)));
 c02281e:	688a      	ldr	r2, [r1, #8]
  uint32_t csr_ptr = (uint32_t)HASH->CSR;
 c022820:	33f8      	adds	r3, #248	; 0xf8
  WRITE_REG(HASH->CR, (*(uint32_t*)(mem_ptr)));
 c022822:	f843 2cf8 	str.w	r2, [r3, #-248]
  __HAL_HASH_INIT();
 c022826:	f853 2cf8 	ldr.w	r2, [r3, #-248]
 c02282a:	f042 0204 	orr.w	r2, r2, #4
 c02282e:	f843 2cf8 	str.w	r2, [r3, #-248]
  for (i = HASH_NUMBER_OF_CSR_REGISTERS; i >0U; i--)
 c022832:	4a06      	ldr	r2, [pc, #24]	; (c02284c <HAL_HASH_ContextRestoring+0x3c>)
    WRITE_REG((*(uint32_t*)(csr_ptr)), (*(uint32_t*)(mem_ptr)));
 c022834:	18c8      	adds	r0, r1, r3
 c022836:	5900      	ldr	r0, [r0, r4]
 c022838:	f843 0b04 	str.w	r0, [r3], #4
  for (i = HASH_NUMBER_OF_CSR_REGISTERS; i >0U; i--)
 c02283c:	4293      	cmp	r3, r2
 c02283e:	d1f9      	bne.n	c022834 <HAL_HASH_ContextRestoring+0x24>
}
 c022840:	bd10      	pop	{r4, pc}
 c022842:	bf00      	nop
 c022844:	520c0400 	.word	0x520c0400
 c022848:	adf3fb14 	.word	0xadf3fb14
 c02284c:	520c05d0 	.word	0x520c05d0

0c022850 <HASH_Start>:
  * @param  Timeout Timeout value.
  * @param  Algorithm HASH algorithm.
  * @retval HAL status
  */
HAL_StatusTypeDef HASH_Start(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer, uint32_t Timeout, uint32_t Algorithm)
{
 c022850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c022852:	461f      	mov	r7, r3
  uint8_t *pInBuffer_tmp;  /* input data address, input parameter of HASH_WriteData()         */
  uint32_t Size_tmp; /* input data size (in bytes), input parameter of HASH_WriteData() */
  HAL_HASH_StateTypeDef State_tmp = hhash->State;
 c022854:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 c022858:	4604      	mov	r4, r0
  HAL_HASH_StateTypeDef State_tmp = hhash->State;
 c02285a:	b2db      	uxtb	r3, r3


  /* Initiate HASH processing in case of start or resumption */
if((State_tmp == HAL_HASH_STATE_READY) || (State_tmp == HAL_HASH_STATE_SUSPENDED))
 c02285c:	2b01      	cmp	r3, #1
 c02285e:	d001      	beq.n	c022864 <HASH_Start+0x14>
 c022860:	2b08      	cmp	r3, #8
 c022862:	d17b      	bne.n	c02295c <HASH_Start+0x10c>
  {
    /* Check input parameters */
    if ((pInBuffer == NULL) || (pOutBuffer == NULL))
 c022864:	b101      	cbz	r1, c022868 <HASH_Start+0x18>
 c022866:	b927      	cbnz	r7, c022872 <HASH_Start+0x22>
    {
      hhash->State = HAL_HASH_STATE_READY;
 c022868:	2501      	movs	r5, #1
 c02286a:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  }
  else
  {
    return HAL_BUSY;
  }
}
 c02286e:	4628      	mov	r0, r5
 c022870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hhash);
 c022872:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 c022876:	2b01      	cmp	r3, #1
 c022878:	d070      	beq.n	c02295c <HASH_Start+0x10c>
 c02287a:	2501      	movs	r5, #1
    if(hhash->Phase == HAL_HASH_PHASE_READY)
 c02287c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    __HAL_LOCK(hhash);
 c022880:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    if(hhash->Phase == HAL_HASH_PHASE_READY)
 c022884:	42ab      	cmp	r3, r5
 c022886:	d147      	bne.n	c022918 <HASH_Start+0xc8>
      hhash->State = HAL_HASH_STATE_BUSY;
 c022888:	2602      	movs	r6, #2
      MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_CR_INIT);
 c02288a:	4d36      	ldr	r5, [pc, #216]	; (c022964 <HASH_Start+0x114>)
      hhash->State = HAL_HASH_STATE_BUSY;
 c02288c:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
      MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_CR_INIT);
 c022890:	682b      	ldr	r3, [r5, #0]
 c022892:	9807      	ldr	r0, [sp, #28]
 c022894:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 c022898:	f023 03c4 	bic.w	r3, r3, #196	; 0xc4
 c02289c:	f043 0304 	orr.w	r3, r3, #4
 c0228a0:	4303      	orrs	r3, r0
 c0228a2:	602b      	str	r3, [r5, #0]
      __HAL_HASH_SET_NBVALIDBITS(Size);
 c0228a4:	68a8      	ldr	r0, [r5, #8]
 c0228a6:	f002 0303 	and.w	r3, r2, #3
 c0228aa:	f020 001f 	bic.w	r0, r0, #31
 c0228ae:	ea40 03c3 	orr.w	r3, r0, r3, lsl #3
 c0228b2:	60ab      	str	r3, [r5, #8]
      hhash->Phase = HAL_HASH_PHASE_PROCESS;
 c0228b4:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    hhash->Status = HASH_WriteData(hhash, pInBuffer_tmp, Size_tmp);
 c0228b8:	4620      	mov	r0, r4
 c0228ba:	f7ff fe5f 	bl	c02257c <HASH_WriteData>
 c0228be:	4605      	mov	r5, r0
 c0228c0:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 c0228c4:	2800      	cmp	r0, #0
 c0228c6:	d1d2      	bne.n	c02286e <HASH_Start+0x1e>
    if (hhash->State != HAL_HASH_STATE_SUSPENDED)
 c0228c8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 c0228cc:	2b08      	cmp	r3, #8
 c0228ce:	d03d      	beq.n	c02294c <HASH_Start+0xfc>
      __HAL_HASH_START_DIGEST();
 c0228d0:	4e24      	ldr	r6, [pc, #144]	; (c022964 <HASH_Start+0x114>)
      if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_DCIS, RESET, Timeout) != HAL_OK)
 c0228d2:	4602      	mov	r2, r0
      __HAL_HASH_START_DIGEST();
 c0228d4:	68b3      	ldr	r3, [r6, #8]
      if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_DCIS, RESET, Timeout) != HAL_OK)
 c0228d6:	2102      	movs	r1, #2
      __HAL_HASH_START_DIGEST();
 c0228d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c0228dc:	60b3      	str	r3, [r6, #8]
      if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_DCIS, RESET, Timeout) != HAL_OK)
 c0228de:	9b06      	ldr	r3, [sp, #24]
 c0228e0:	4620      	mov	r0, r4
 c0228e2:	f7ff feeb 	bl	c0226bc <HASH_WaitOnFlagUntilTimeout>
 c0228e6:	2800      	cmp	r0, #0
 c0228e8:	d13a      	bne.n	c022960 <HASH_Start+0x110>
      HASH_GetDigest(pOutBuffer, HASH_DIGEST_LENGTH());
 c0228ea:	6832      	ldr	r2, [r6, #0]
 c0228ec:	4b1e      	ldr	r3, [pc, #120]	; (c022968 <HASH_Start+0x118>)
 c0228ee:	421a      	tst	r2, r3
 c0228f0:	d030      	beq.n	c022954 <HASH_Start+0x104>
 c0228f2:	6832      	ldr	r2, [r6, #0]
 c0228f4:	401a      	ands	r2, r3
 c0228f6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 c0228fa:	d02d      	beq.n	c022958 <HASH_Start+0x108>
 c0228fc:	6832      	ldr	r2, [r6, #0]
 c0228fe:	4393      	bics	r3, r2
 c022900:	bf0c      	ite	eq
 c022902:	2120      	moveq	r1, #32
 c022904:	2110      	movne	r1, #16
 c022906:	4638      	mov	r0, r7
 c022908:	f7ff fe76 	bl	c0225f8 <HASH_GetDigest>
      hhash->State = HAL_HASH_STATE_READY;
 c02290c:	2301      	movs	r3, #1
 c02290e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      hhash->Phase = HAL_HASH_PHASE_READY;
 c022912:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 c022916:	e019      	b.n	c02294c <HASH_Start+0xfc>
    else if (hhash->Phase == HAL_HASH_PHASE_PROCESS)
 c022918:	2b02      	cmp	r3, #2
 c02291a:	d115      	bne.n	c022948 <HASH_Start+0xf8>
      if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 c02291c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 c022920:	2b08      	cmp	r3, #8
        __HAL_HASH_SET_NBVALIDBITS(Size);
 c022922:	bf1d      	ittte	ne
 c022924:	4d0f      	ldrne	r5, [pc, #60]	; (c022964 <HASH_Start+0x114>)
 c022926:	f002 0303 	andne.w	r3, r2, #3
 c02292a:	68a8      	ldrne	r0, [r5, #8]
        Size_tmp = hhash->HashInCount;
 c02292c:	6a22      	ldreq	r2, [r4, #32]
        __HAL_HASH_SET_NBVALIDBITS(Size);
 c02292e:	bf1e      	ittt	ne
 c022930:	f020 001f 	bicne.w	r0, r0, #31
 c022934:	ea40 03c3 	orrne.w	r3, r0, r3, lsl #3
 c022938:	60ab      	strne	r3, [r5, #8]
      hhash->State = HAL_HASH_STATE_BUSY;
 c02293a:	f04f 0302 	mov.w	r3, #2
        pInBuffer_tmp = hhash->pHashInBuffPtr;
 c02293e:	bf08      	it	eq
 c022940:	68e1      	ldreq	r1, [r4, #12]
      hhash->State = HAL_HASH_STATE_BUSY;
 c022942:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 c022946:	e7b7      	b.n	c0228b8 <HASH_Start+0x68>
      hhash->State = HAL_HASH_STATE_READY;
 c022948:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
    __HAL_UNLOCK(hhash);
 c02294c:	2300      	movs	r3, #0
 c02294e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 c022952:	e78c      	b.n	c02286e <HASH_Start+0x1e>
      HASH_GetDigest(pOutBuffer, HASH_DIGEST_LENGTH());
 c022954:	2114      	movs	r1, #20
 c022956:	e7d6      	b.n	c022906 <HASH_Start+0xb6>
 c022958:	211c      	movs	r1, #28
 c02295a:	e7d4      	b.n	c022906 <HASH_Start+0xb6>
    return HAL_BUSY;
 c02295c:	2502      	movs	r5, #2
 c02295e:	e786      	b.n	c02286e <HASH_Start+0x1e>
        return HAL_TIMEOUT;
 c022960:	2503      	movs	r5, #3
 c022962:	e784      	b.n	c02286e <HASH_Start+0x1e>
 c022964:	520c0400 	.word	0x520c0400
 c022968:	00040080 	.word	0x00040080

0c02296c <HAL_HASH_SHA1_Start>:
{
 c02296c:	b513      	push	{r0, r1, r4, lr}
  return HASH_Start(hhash, pInBuffer, Size, pOutBuffer, Timeout, HASH_ALGOSELECTION_SHA1);
 c02296e:	2400      	movs	r4, #0
 c022970:	9401      	str	r4, [sp, #4]
 c022972:	9c04      	ldr	r4, [sp, #16]
 c022974:	9400      	str	r4, [sp, #0]
 c022976:	f7ff ff6b 	bl	c022850 <HASH_Start>
}
 c02297a:	b002      	add	sp, #8
 c02297c:	bd10      	pop	{r4, pc}

0c02297e <HAL_HASH_SHA1_Accmlt_End>:
 c02297e:	f7ff bff5 	b.w	c02296c <HAL_HASH_SHA1_Start>
	...

0c022984 <HASH_Accumulate>:
  * @param  Size length of the input buffer in bytes, must be a multiple of 4.
  * @param  Algorithm HASH algorithm.
  * @retval HAL status
  */
HAL_StatusTypeDef HASH_Accumulate(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint32_t Algorithm)
{
 c022984:	b538      	push	{r3, r4, r5, lr}
  uint8_t *pInBuffer_tmp;   /* input data address, input parameter of HASH_WriteData()         */
  uint32_t Size_tmp;  /* input data size (in bytes), input parameter of HASH_WriteData() */
  HAL_HASH_StateTypeDef State_tmp = hhash->State;
 c022986:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
{
 c02298a:	4604      	mov	r4, r0

  /* Make sure the input buffer size (in bytes) is a multiple of 4 */
  if ((Size % 4U) != 0U)
 c02298c:	0790      	lsls	r0, r2, #30
  HAL_HASH_StateTypeDef State_tmp = hhash->State;
 c02298e:	b2ed      	uxtb	r5, r5
  if ((Size % 4U) != 0U)
 c022990:	d13d      	bne.n	c022a0e <HASH_Accumulate+0x8a>
  {
    return  HAL_ERROR;
  }

  /* Initiate HASH processing in case of start or resumption */
if((State_tmp == HAL_HASH_STATE_READY) || (State_tmp == HAL_HASH_STATE_SUSPENDED))
 c022992:	2d01      	cmp	r5, #1
 c022994:	d001      	beq.n	c02299a <HASH_Accumulate+0x16>
 c022996:	2d08      	cmp	r5, #8
 c022998:	d13b      	bne.n	c022a12 <HASH_Accumulate+0x8e>
  {
    /* Check input parameters */
    if ((pInBuffer == NULL) || (Size == 0U))
 c02299a:	b101      	cbz	r1, c02299e <HASH_Accumulate+0x1a>
 c02299c:	b91a      	cbnz	r2, c0229a6 <HASH_Accumulate+0x22>
    {
      hhash->State = HAL_HASH_STATE_READY;
 c02299e:	2001      	movs	r0, #1
 c0229a0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  {
    return HAL_BUSY;
  }


}
 c0229a4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hhash);
 c0229a6:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 c0229aa:	2801      	cmp	r0, #1
 c0229ac:	d031      	beq.n	c022a12 <HASH_Accumulate+0x8e>
 c0229ae:	2001      	movs	r0, #1
 c0229b0:	2502      	movs	r5, #2
 c0229b2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 c0229b6:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
      hhash->State = HAL_HASH_STATE_BUSY;
 c0229ba:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 c0229be:	2808      	cmp	r0, #8
 c0229c0:	d113      	bne.n	c0229ea <HASH_Accumulate+0x66>
      pInBuffer_tmp = hhash->pHashInBuffPtr;  /* pInBuffer_tmp is set to the input data address */
 c0229c2:	68e1      	ldr	r1, [r4, #12]
      Size_tmp = hhash->HashInCount;          /* Size_tmp contains the input data size in bytes */
 c0229c4:	6a22      	ldr	r2, [r4, #32]
    hhash->Status = HASH_WriteData(hhash, pInBuffer_tmp, Size_tmp);
 c0229c6:	4620      	mov	r0, r4
 c0229c8:	f7ff fdd8 	bl	c02257c <HASH_WriteData>
 c0229cc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 c0229d0:	2800      	cmp	r0, #0
 c0229d2:	d1e7      	bne.n	c0229a4 <HASH_Accumulate+0x20>
    if (hhash->State != HAL_HASH_STATE_SUSPENDED)
 c0229d4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 c0229d8:	2b08      	cmp	r3, #8
      hhash->State = HAL_HASH_STATE_READY;
 c0229da:	bf1c      	itt	ne
 c0229dc:	2301      	movne	r3, #1
 c0229de:	f884 3035 	strbne.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hhash);
 c0229e2:	2300      	movs	r3, #0
 c0229e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 c0229e8:	e7dc      	b.n	c0229a4 <HASH_Accumulate+0x20>
      if(hhash->Phase == HAL_HASH_PHASE_READY)
 c0229ea:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 c0229ee:	2801      	cmp	r0, #1
 c0229f0:	d109      	bne.n	c022a06 <HASH_Accumulate+0x82>
        MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_CR_INIT);
 c0229f2:	4d09      	ldr	r5, [pc, #36]	; (c022a18 <HASH_Accumulate+0x94>)
 c0229f4:	6828      	ldr	r0, [r5, #0]
 c0229f6:	f420 20a0 	bic.w	r0, r0, #327680	; 0x50000
 c0229fa:	f020 00c4 	bic.w	r0, r0, #196	; 0xc4
 c0229fe:	f040 0004 	orr.w	r0, r0, #4
 c022a02:	4303      	orrs	r3, r0
 c022a04:	602b      	str	r3, [r5, #0]
      hhash->Phase = HAL_HASH_PHASE_PROCESS;
 c022a06:	2302      	movs	r3, #2
 c022a08:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 c022a0c:	e7db      	b.n	c0229c6 <HASH_Accumulate+0x42>
    return  HAL_ERROR;
 c022a0e:	2001      	movs	r0, #1
 c022a10:	e7c8      	b.n	c0229a4 <HASH_Accumulate+0x20>
    return HAL_BUSY;
 c022a12:	2002      	movs	r0, #2
 c022a14:	e7c6      	b.n	c0229a4 <HASH_Accumulate+0x20>
 c022a16:	bf00      	nop
 c022a18:	520c0400 	.word	0x520c0400

0c022a1c <HAL_HASH_SHA1_Accmlt>:
  return  HASH_Accumulate(hhash, pInBuffer, Size,HASH_ALGOSELECTION_SHA1);
 c022a1c:	2300      	movs	r3, #0
 c022a1e:	f7ff bfb1 	b.w	c022984 <HASH_Accumulate>

0c022a22 <HAL_HASHEx_SHA224_Start>:
  * @param  pOutBuffer pointer to the computed digest. Digest size is 28 bytes.
  * @param  Timeout Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASHEx_SHA224_Start(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer, uint32_t Timeout)
{
 c022a22:	b513      	push	{r0, r1, r4, lr}
  return HASH_Start(hhash, pInBuffer, Size, pOutBuffer, Timeout, HASH_ALGOSELECTION_SHA224);
 c022a24:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 c022a28:	9401      	str	r4, [sp, #4]
 c022a2a:	9c04      	ldr	r4, [sp, #16]
 c022a2c:	9400      	str	r4, [sp, #0]
 c022a2e:	f7ff ff0f 	bl	c022850 <HASH_Start>
}
 c022a32:	b002      	add	sp, #8
 c022a34:	bd10      	pop	{r4, pc}

0c022a36 <HAL_HASHEx_SHA224_Accmlt>:
  * @param  Size length of the input buffer in bytes, must be a multiple of 4.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASHEx_SHA224_Accmlt(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size)
{
  return  HASH_Accumulate(hhash, pInBuffer, Size,HASH_ALGOSELECTION_SHA224);
 c022a36:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 c022a3a:	f7ff bfa3 	b.w	c022984 <HASH_Accumulate>

0c022a3e <HAL_HASHEx_SHA224_Accmlt_End>:
 c022a3e:	f7ff bff0 	b.w	c022a22 <HAL_HASHEx_SHA224_Start>
	...

0c022a44 <HAL_HASHEx_SHA256_Start>:
  * @param  pOutBuffer pointer to the computed digest. Digest size is 32 bytes.
  * @param  Timeout Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASHEx_SHA256_Start(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer, uint32_t Timeout)
{
 c022a44:	b513      	push	{r0, r1, r4, lr}
  return HASH_Start(hhash, pInBuffer, Size, pOutBuffer, Timeout, HASH_ALGOSELECTION_SHA256);
 c022a46:	4c04      	ldr	r4, [pc, #16]	; (c022a58 <HAL_HASHEx_SHA256_Start+0x14>)
 c022a48:	9401      	str	r4, [sp, #4]
 c022a4a:	9c04      	ldr	r4, [sp, #16]
 c022a4c:	9400      	str	r4, [sp, #0]
 c022a4e:	f7ff feff 	bl	c022850 <HASH_Start>
}
 c022a52:	b002      	add	sp, #8
 c022a54:	bd10      	pop	{r4, pc}
 c022a56:	bf00      	nop
 c022a58:	00040080 	.word	0x00040080

0c022a5c <HAL_HASHEx_SHA256_Accmlt>:
  * @param  Size length of the input buffer in bytes, must be a multiple of 4.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASHEx_SHA256_Accmlt(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size)
{
  return  HASH_Accumulate(hhash, pInBuffer, Size,HASH_ALGOSELECTION_SHA256);
 c022a5c:	4b01      	ldr	r3, [pc, #4]	; (c022a64 <HAL_HASHEx_SHA256_Accmlt+0x8>)
 c022a5e:	f7ff bf91 	b.w	c022984 <HASH_Accumulate>
 c022a62:	bf00      	nop
 c022a64:	00040080 	.word	0x00040080

0c022a68 <HAL_HASHEx_SHA256_Accmlt_End>:
 c022a68:	f7ff bfec 	b.w	c022a44 <HAL_HASHEx_SHA256_Start>

0c022a6c <HAL_PKA_MspInit>:
  UNUSED(hpka);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PKA_MspInit can be implemented in the user file
   */
}
 c022a6c:	4770      	bx	lr

0c022a6e <HAL_PKA_Init>:
{
 c022a6e:	b570      	push	{r4, r5, r6, lr}
  if (hpka != NULL)
 c022a70:	4604      	mov	r4, r0
 c022a72:	b310      	cbz	r0, c022aba <HAL_PKA_Init+0x4c>
    if (hpka->State == HAL_PKA_STATE_RESET)
 c022a74:	7903      	ldrb	r3, [r0, #4]
 c022a76:	b90b      	cbnz	r3, c022a7c <HAL_PKA_Init+0xe>
      HAL_PKA_MspInit(hpka);
 c022a78:	f7ff fff8 	bl	c022a6c <HAL_PKA_MspInit>
    hpka->State = HAL_PKA_STATE_BUSY;
 c022a7c:	2302      	movs	r3, #2
 c022a7e:	7123      	strb	r3, [r4, #4]
    tickstart = HAL_GetTick();
 c022a80:	f7fe fc10 	bl	c0212a4 <HAL_GetTick>
      hpka->Instance->CR = PKA_CR_EN;
 c022a84:	2601      	movs	r6, #1
    tickstart = HAL_GetTick();
 c022a86:	4605      	mov	r5, r0
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
 c022a88:	6823      	ldr	r3, [r4, #0]
 c022a8a:	681a      	ldr	r2, [r3, #0]
 c022a8c:	07d2      	lsls	r2, r2, #31
 c022a8e:	d508      	bpl.n	c022aa2 <HAL_PKA_Init+0x34>
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 c022a90:	689a      	ldr	r2, [r3, #8]
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 c022a92:	2000      	movs	r0, #0
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 c022a94:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 c022a98:	609a      	str	r2, [r3, #8]
      hpka->State = HAL_PKA_STATE_READY;
 c022a9a:	2301      	movs	r3, #1
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 c022a9c:	60a0      	str	r0, [r4, #8]
      hpka->State = HAL_PKA_STATE_READY;
 c022a9e:	7123      	strb	r3, [r4, #4]
 c022aa0:	e00c      	b.n	c022abc <HAL_PKA_Init+0x4e>
      hpka->Instance->CR = PKA_CR_EN;
 c022aa2:	601e      	str	r6, [r3, #0]
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
 c022aa4:	f7fe fbfe 	bl	c0212a4 <HAL_GetTick>
 c022aa8:	1b40      	subs	r0, r0, r5
 c022aaa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 c022aae:	d9eb      	bls.n	c022a88 <HAL_PKA_Init+0x1a>
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
 c022ab0:	2304      	movs	r3, #4
      hpka->State = HAL_PKA_STATE_ERROR;
 c022ab2:	2003      	movs	r0, #3
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
 c022ab4:	60a3      	str	r3, [r4, #8]
      hpka->State = HAL_PKA_STATE_ERROR;
 c022ab6:	7120      	strb	r0, [r4, #4]
  return err;
 c022ab8:	e000      	b.n	c022abc <HAL_PKA_Init+0x4e>
    err = HAL_ERROR;
 c022aba:	2001      	movs	r0, #1
}
 c022abc:	bd70      	pop	{r4, r5, r6, pc}

0c022abe <HAL_PKA_MspDeInit>:
 c022abe:	4770      	bx	lr

0c022ac0 <HAL_PKA_DeInit>:
{
 c022ac0:	b538      	push	{r3, r4, r5, lr}
  if (hpka != NULL)
 c022ac2:	4605      	mov	r5, r0
 c022ac4:	b170      	cbz	r0, c022ae4 <HAL_PKA_DeInit+0x24>
    hpka->State = HAL_PKA_STATE_BUSY;
 c022ac6:	2302      	movs	r3, #2
    hpka->Instance->CR = 0;
 c022ac8:	2400      	movs	r4, #0
    hpka->State = HAL_PKA_STATE_BUSY;
 c022aca:	7103      	strb	r3, [r0, #4]
    hpka->Instance->CR = 0;
 c022acc:	6803      	ldr	r3, [r0, #0]
 c022ace:	601c      	str	r4, [r3, #0]
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 c022ad0:	689a      	ldr	r2, [r3, #8]
 c022ad2:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 c022ad6:	609a      	str	r2, [r3, #8]
    HAL_PKA_MspDeInit(hpka);
 c022ad8:	f7ff fff1 	bl	c022abe <HAL_PKA_MspDeInit>
  HAL_StatusTypeDef err = HAL_OK;
 c022adc:	4620      	mov	r0, r4
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 c022ade:	60ac      	str	r4, [r5, #8]
    hpka->State = HAL_PKA_STATE_RESET;
 c022ae0:	712c      	strb	r4, [r5, #4]
}
 c022ae2:	bd38      	pop	{r3, r4, r5, pc}
    err = HAL_ERROR;
 c022ae4:	2001      	movs	r0, #1
 c022ae6:	e7fc      	b.n	c022ae2 <HAL_PKA_DeInit+0x22>

0c022ae8 <HAL_PKA_ECDSAVerif_IsValidSignature>:
  * @retval 1 if signature is verified, 0 in other case
  */
uint32_t HAL_PKA_ECDSAVerif_IsValidSignature(PKA_HandleTypeDef const *const hpka)
{
  /* Invert the state of the PKA RAM bit containing the result of the operation */
  return (hpka->Instance->RAM[PKA_ECDSA_VERIF_OUT_RESULT] == 0UL) ? 1UL : 0UL;
 c022ae8:	6803      	ldr	r3, [r0, #0]
 c022aea:	f8d3 05b0 	ldr.w	r0, [r3, #1456]	; 0x5b0
}
 c022aee:	fab0 f080 	clz	r0, r0
 c022af2:	0940      	lsrs	r0, r0, #5
 c022af4:	4770      	bx	lr

0c022af6 <HAL_PKA_PointCheck_IsOnCurve>:
  * @retval 1 if point is on curve, 0 in other case
  */
uint32_t HAL_PKA_PointCheck_IsOnCurve(PKA_HandleTypeDef const *const hpka)
{
  /* Invert the value of the PKA RAM containing the result of the operation */
  return (hpka->Instance->RAM[PKA_POINT_CHECK_OUT_ERROR] == 0UL) ? 1UL : 0UL;
 c022af6:	6803      	ldr	r3, [r0, #0]
 c022af8:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
 c022afc:	fab0 f080 	clz	r0, r0
 c022b00:	0940      	lsrs	r0, r0, #5
 c022b02:	4770      	bx	lr

0c022b04 <PKA_PollEndOfOperation>:
  * @param  Timeout Timeout duration in millisecond.
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
HAL_StatusTypeDef PKA_PollEndOfOperation(PKA_HandleTypeDef *hpka, uint32_t Timeout, uint32_t Tickstart)
{
 c022b04:	b570      	push	{r4, r5, r6, lr}
 c022b06:	4605      	mov	r5, r0
 c022b08:	460c      	mov	r4, r1
 c022b0a:	4616      	mov	r6, r2
  /* Wait for the end of operation or timeout */
  while ((hpka->Instance->SR & PKA_SR_PROCENDF) == 0UL)
 c022b0c:	6829      	ldr	r1, [r5, #0]
 c022b0e:	684b      	ldr	r3, [r1, #4]
 c022b10:	039b      	lsls	r3, r3, #14
 c022b12:	d501      	bpl.n	c022b18 <PKA_PollEndOfOperation+0x14>
      {
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 c022b14:	2000      	movs	r0, #0
}
 c022b16:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 c022b18:	1c62      	adds	r2, r4, #1
 c022b1a:	d0f8      	beq.n	c022b0e <PKA_PollEndOfOperation+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0UL))
 c022b1c:	f7fe fbc2 	bl	c0212a4 <HAL_GetTick>
 c022b20:	1b80      	subs	r0, r0, r6
 c022b22:	42a0      	cmp	r0, r4
 c022b24:	d801      	bhi.n	c022b2a <PKA_PollEndOfOperation+0x26>
 c022b26:	2c00      	cmp	r4, #0
 c022b28:	d1f0      	bne.n	c022b0c <PKA_PollEndOfOperation+0x8>
        return HAL_TIMEOUT;
 c022b2a:	2003      	movs	r0, #3
 c022b2c:	e7f3      	b.n	c022b16 <PKA_PollEndOfOperation+0x12>

0c022b2e <PKA_CheckError>:
uint32_t PKA_CheckError(PKA_HandleTypeDef *hpka, uint32_t mode)
{
  uint32_t err = HAL_PKA_ERROR_NONE;

  /* Check RAMERR error */
  if (__HAL_PKA_GET_FLAG(hpka, PKA_FLAG_RAMERR) == SET)
 c022b2e:	6803      	ldr	r3, [r0, #0]
 c022b30:	685a      	ldr	r2, [r3, #4]
  {
    err |= HAL_PKA_ERROR_RAMERR;
 c022b32:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 c022b36:	bf0c      	ite	eq
 c022b38:	2000      	moveq	r0, #0
 c022b3a:	2002      	movne	r0, #2
  }

  /* Check ADDRERR error */
  if (__HAL_PKA_GET_FLAG(hpka, PKA_FLAG_ADDRERR) == SET)
 c022b3c:	685a      	ldr	r2, [r3, #4]
 c022b3e:	02d2      	lsls	r2, r2, #11
  {
    err |= HAL_PKA_ERROR_ADDRERR;
 c022b40:	bf48      	it	mi
 c022b42:	f040 0001 	orrmi.w	r0, r0, #1
  }

  /* Check the operation success in case of ECDSA signature */
  if (mode == PKA_MODE_ECDSA_SIGNATURE)
 c022b46:	2924      	cmp	r1, #36	; 0x24
 c022b48:	d104      	bne.n	c022b54 <PKA_CheckError+0x26>
  {
    /* If error output result is different from 0, ecsa sign operation need to be repeated */
    if (hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_ERROR] != 0UL)
 c022b4a:	f8d3 3ee8 	ldr.w	r3, [r3, #3816]	; 0xee8
 c022b4e:	b10b      	cbz	r3, c022b54 <PKA_CheckError+0x26>
    {
      err |= HAL_PKA_ERROR_OPERATION;
 c022b50:	f040 0008 	orr.w	r0, r0, #8
    }
  }

  return err;
}
 c022b54:	4770      	bx	lr

0c022b56 <PKA_GetOptBitSize_u8>:
  if (value == 0U)
 c022b56:	b129      	cbz	r1, c022b64 <PKA_GetOptBitSize_u8+0xe>
  return __builtin_clz(value);
 c022b58:	fab1 f181 	clz	r1, r1
{
  uint32_t position;

  position = 32UL - __CLZ(msb);

  return (((byteNumber - 1UL) * 8UL) + position);
 c022b5c:	ebc1 00c0 	rsb	r0, r1, r0, lsl #3
}
 c022b60:	3018      	adds	r0, #24
 c022b62:	4770      	bx	lr
    return 32U;
 c022b64:	2120      	movs	r1, #32
 c022b66:	e7f9      	b.n	c022b5c <PKA_GetOptBitSize_u8+0x6>

0c022b68 <PKA_Memcpy_u32_to_u8>:
  * @param  src Pointer to source
  * @param  n Number of uint8_t to copy
  * @retval dst
  */
void PKA_Memcpy_u32_to_u8(uint8_t dst[], __IO const uint32_t src[], size_t n)
{
 c022b68:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (dst != NULL)
 c022b6a:	b170      	cbz	r0, c022b8a <PKA_Memcpy_u32_to_u8+0x22>
  {
    if (src != NULL)
 c022b6c:	b169      	cbz	r1, c022b8a <PKA_Memcpy_u32_to_u8+0x22>
 c022b6e:	460c      	mov	r4, r1
    {
      uint32_t index_uint32_t = 0UL; /* This index is used outside of the loop */

      for (; index_uint32_t < (n / 4UL); index_uint32_t++)
 c022b70:	0893      	lsrs	r3, r2, #2
 c022b72:	1885      	adds	r5, r0, r2
 c022b74:	eb01 0783 	add.w	r7, r1, r3, lsl #2
 c022b78:	42a7      	cmp	r7, r4
 c022b7a:	d107      	bne.n	c022b8c <PKA_Memcpy_u32_to_u8+0x24>
        dst[index_uint8_t + 1UL] = (uint8_t)((src[index_uint32_t] & 0x00FF0000U) >> 16UL);
        dst[index_uint8_t + 0UL] = (uint8_t)((src[index_uint32_t] & 0xFF000000U) >> 24UL);
      }

      /* Manage the buffers not aligned on uint32_t */
      if ((n % 4UL) == 1UL)
 c022b7c:	f002 0203 	and.w	r2, r2, #3
 c022b80:	2a01      	cmp	r2, #1
 c022b82:	d114      	bne.n	c022bae <PKA_Memcpy_u32_to_u8+0x46>
      {
        dst[0UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 c022b84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      }
      else if ((n % 4UL) == 3UL)
      {
        dst[2UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
        dst[1UL] = (uint8_t)((src[index_uint32_t] & 0x0000FF00U) >> 8UL);
        dst[0UL] = (uint8_t)((src[index_uint32_t] & 0x00FF0000U) >> 16UL);
 c022b88:	7003      	strb	r3, [r0, #0]
      {
        /* The last element is already handle in the loop */
      }
    }
  }
}
 c022b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dst[index_uint8_t + 3UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 c022b8c:	6826      	ldr	r6, [r4, #0]
 c022b8e:	f805 6c01 	strb.w	r6, [r5, #-1]
        dst[index_uint8_t + 2UL] = (uint8_t)((src[index_uint32_t] & 0x0000FF00U) >> 8UL);
 c022b92:	6826      	ldr	r6, [r4, #0]
 c022b94:	0a36      	lsrs	r6, r6, #8
 c022b96:	f805 6c02 	strb.w	r6, [r5, #-2]
        dst[index_uint8_t + 1UL] = (uint8_t)((src[index_uint32_t] & 0x00FF0000U) >> 16UL);
 c022b9a:	6826      	ldr	r6, [r4, #0]
 c022b9c:	0c36      	lsrs	r6, r6, #16
 c022b9e:	f805 6c03 	strb.w	r6, [r5, #-3]
        dst[index_uint8_t + 0UL] = (uint8_t)((src[index_uint32_t] & 0xFF000000U) >> 24UL);
 c022ba2:	f854 6b04 	ldr.w	r6, [r4], #4
 c022ba6:	0e36      	lsrs	r6, r6, #24
 c022ba8:	f805 6d04 	strb.w	r6, [r5, #-4]!
 c022bac:	e7e4      	b.n	c022b78 <PKA_Memcpy_u32_to_u8+0x10>
      else if ((n % 4UL) == 2UL)
 c022bae:	2a02      	cmp	r2, #2
 c022bb0:	d106      	bne.n	c022bc0 <PKA_Memcpy_u32_to_u8+0x58>
        dst[1UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 c022bb2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 c022bb6:	7042      	strb	r2, [r0, #1]
        dst[0UL] = (uint8_t)((src[index_uint32_t] & 0x0000FF00U) >> 8UL);
 c022bb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 c022bbc:	0a1b      	lsrs	r3, r3, #8
 c022bbe:	e7e3      	b.n	c022b88 <PKA_Memcpy_u32_to_u8+0x20>
      else if ((n % 4UL) == 3UL)
 c022bc0:	2a03      	cmp	r2, #3
 c022bc2:	d1e2      	bne.n	c022b8a <PKA_Memcpy_u32_to_u8+0x22>
        dst[2UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 c022bc4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 c022bc8:	7082      	strb	r2, [r0, #2]
        dst[1UL] = (uint8_t)((src[index_uint32_t] & 0x0000FF00U) >> 8UL);
 c022bca:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 c022bce:	0a12      	lsrs	r2, r2, #8
 c022bd0:	7042      	strb	r2, [r0, #1]
        dst[0UL] = (uint8_t)((src[index_uint32_t] & 0x00FF0000U) >> 16UL);
 c022bd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 c022bd6:	0c1b      	lsrs	r3, r3, #16
 c022bd8:	e7d6      	b.n	c022b88 <PKA_Memcpy_u32_to_u8+0x20>

0c022bda <HAL_PKA_ModExp_GetResult>:
{
 c022bda:	460b      	mov	r3, r1
  size = (hpka->Instance->RAM[PKA_MODULAR_EXP_IN_OP_NB_BITS] + 7UL) / 8UL;
 c022bdc:	6801      	ldr	r1, [r0, #0]
  PKA_Memcpy_u32_to_u8(pRes, &hpka->Instance->RAM[PKA_MODULAR_EXP_OUT_SM_ALGO_ACC1], size);
 c022bde:	4618      	mov	r0, r3
  size = (hpka->Instance->RAM[PKA_MODULAR_EXP_IN_OP_NB_BITS] + 7UL) / 8UL;
 c022be0:	f8d1 2404 	ldr.w	r2, [r1, #1028]	; 0x404
  PKA_Memcpy_u32_to_u8(pRes, &hpka->Instance->RAM[PKA_MODULAR_EXP_OUT_SM_ALGO_ACC1], size);
 c022be4:	f201 7124 	addw	r1, r1, #1828	; 0x724
  size = (hpka->Instance->RAM[PKA_MODULAR_EXP_IN_OP_NB_BITS] + 7UL) / 8UL;
 c022be8:	3207      	adds	r2, #7
  PKA_Memcpy_u32_to_u8(pRes, &hpka->Instance->RAM[PKA_MODULAR_EXP_OUT_SM_ALGO_ACC1], size);
 c022bea:	08d2      	lsrs	r2, r2, #3
 c022bec:	f7ff bfbc 	b.w	c022b68 <PKA_Memcpy_u32_to_u8>

0c022bf0 <HAL_PKA_ECDSASign_GetResult>:
{
 c022bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size = (hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_MOD_NB_BITS] + 7UL) / 8UL;
 c022bf2:	6803      	ldr	r3, [r0, #0]
{
 c022bf4:	4605      	mov	r5, r0
  size = (hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_MOD_NB_BITS] + 7UL) / 8UL;
 c022bf6:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
{
 c022bfa:	4616      	mov	r6, r2
  size = (hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_MOD_NB_BITS] + 7UL) / 8UL;
 c022bfc:	3407      	adds	r4, #7
 c022bfe:	08e4      	lsrs	r4, r4, #3
  if (out != NULL)
 c022c00:	460f      	mov	r7, r1
 c022c02:	b161      	cbz	r1, c022c1e <HAL_PKA_ECDSASign_GetResult+0x2e>
    PKA_Memcpy_u32_to_u8(out->RSign, &hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_SIGNATURE_R], size);
 c022c04:	4622      	mov	r2, r4
 c022c06:	f503 61e0 	add.w	r1, r3, #1792	; 0x700
 c022c0a:	6838      	ldr	r0, [r7, #0]
 c022c0c:	f7ff ffac 	bl	c022b68 <PKA_Memcpy_u32_to_u8>
    PKA_Memcpy_u32_to_u8(out->SSign, &hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_SIGNATURE_S], size);
 c022c10:	6829      	ldr	r1, [r5, #0]
 c022c12:	4622      	mov	r2, r4
 c022c14:	f201 7154 	addw	r1, r1, #1876	; 0x754
 c022c18:	6878      	ldr	r0, [r7, #4]
 c022c1a:	f7ff ffa5 	bl	c022b68 <PKA_Memcpy_u32_to_u8>
  if (outExt != NULL)
 c022c1e:	b18e      	cbz	r6, c022c44 <HAL_PKA_ECDSASign_GetResult+0x54>
    PKA_Memcpy_u32_to_u8(outExt->ptX, &hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_FINAL_POINT_X], size);
 c022c20:	6829      	ldr	r1, [r5, #0]
 c022c22:	4622      	mov	r2, r4
 c022c24:	f501 5181 	add.w	r1, r1, #4128	; 0x1020
 c022c28:	6830      	ldr	r0, [r6, #0]
 c022c2a:	311c      	adds	r1, #28
 c022c2c:	f7ff ff9c 	bl	c022b68 <PKA_Memcpy_u32_to_u8>
    PKA_Memcpy_u32_to_u8(outExt->ptY, &hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_FINAL_POINT_Y], size);
 c022c30:	6829      	ldr	r1, [r5, #0]
 c022c32:	4622      	mov	r2, r4
 c022c34:	f501 5184 	add.w	r1, r1, #4224	; 0x1080
 c022c38:	6870      	ldr	r0, [r6, #4]
 c022c3a:	3110      	adds	r1, #16
}
 c022c3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PKA_Memcpy_u32_to_u8(outExt->ptY, &hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_FINAL_POINT_Y], size);
 c022c40:	f7ff bf92 	b.w	c022b68 <PKA_Memcpy_u32_to_u8>
}
 c022c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0c022c46 <HAL_PKA_ECCMul_GetResult>:
  size = (hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_OP_NB_BITS] + 7UL) / 8UL;
 c022c46:	6803      	ldr	r3, [r0, #0]
{
 c022c48:	b570      	push	{r4, r5, r6, lr}
 c022c4a:	4606      	mov	r6, r0
  size = (hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_OP_NB_BITS] + 7UL) / 8UL;
 c022c4c:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
  if (out != NULL)
 c022c50:	460d      	mov	r5, r1
 c022c52:	b181      	cbz	r1, c022c76 <HAL_PKA_ECCMul_GetResult+0x30>
  size = (hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_OP_NB_BITS] + 7UL) / 8UL;
 c022c54:	3407      	adds	r4, #7
 c022c56:	08e4      	lsrs	r4, r4, #3
    PKA_Memcpy_u32_to_u8(out->ptX, &hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_OUT_RESULT_X], size);
 c022c58:	4622      	mov	r2, r4
 c022c5a:	6828      	ldr	r0, [r5, #0]
 c022c5c:	f203 515c 	addw	r1, r3, #1372	; 0x55c
 c022c60:	f7ff ff82 	bl	c022b68 <PKA_Memcpy_u32_to_u8>
    PKA_Memcpy_u32_to_u8(out->ptY, &hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_OUT_RESULT_Y], size);
 c022c64:	6831      	ldr	r1, [r6, #0]
 c022c66:	4622      	mov	r2, r4
 c022c68:	6868      	ldr	r0, [r5, #4]
 c022c6a:	f501 61b6 	add.w	r1, r1, #1456	; 0x5b0
}
 c022c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PKA_Memcpy_u32_to_u8(out->ptY, &hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_OUT_RESULT_Y], size);
 c022c72:	f7ff bf79 	b.w	c022b68 <PKA_Memcpy_u32_to_u8>
}
 c022c76:	bd70      	pop	{r4, r5, r6, pc}

0c022c78 <PKA_Memcpy_u8_to_u32>:
  * @param  src Pointer to source
  * @param  n Number of uint8_t to copy (must be multiple of 4)
  * @retval dst
  */
void PKA_Memcpy_u8_to_u32(__IO uint32_t dst[], const uint8_t src[], size_t n)
{
 c022c78:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (dst != NULL)
 c022c7a:	b188      	cbz	r0, c022ca0 <PKA_Memcpy_u8_to_u32+0x28>
  {
    if (src != NULL)
 c022c7c:	b181      	cbz	r1, c022ca0 <PKA_Memcpy_u8_to_u32+0x28>
 c022c7e:	4607      	mov	r7, r0
    {
      uint32_t index = 0UL; /* This index is used outside of the loop */

      for (; index < (n / 4UL); index++)
 c022c80:	0895      	lsrs	r5, r2, #2
 c022c82:	00ab      	lsls	r3, r5, #2
 c022c84:	188e      	adds	r6, r1, r2
 c022c86:	eb03 0c00 	add.w	ip, r3, r0
 c022c8a:	45bc      	cmp	ip, r7
 c022c8c:	d109      	bne.n	c022ca2 <PKA_Memcpy_u8_to_u32+0x2a>
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL) \
                     | ((uint32_t)src[(n - (index * 4UL) - 4UL)] << 24UL);
      }

      /* Manage the buffers not aligned on uint32_t */
      if ((n % 4UL) == 1UL)
 c022c8e:	f002 0403 	and.w	r4, r2, #3
 c022c92:	2c01      	cmp	r4, #1
 c022c94:	d117      	bne.n	c022cc6 <PKA_Memcpy_u8_to_u32+0x4e>
      {
        dst[index] = (uint32_t)src[(n - (index * 4UL) - 1UL)];
 c022c96:	3a01      	subs	r2, #1
 c022c98:	1ad2      	subs	r2, r2, r3
 c022c9a:	5c8b      	ldrb	r3, [r1, r2]
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL);
      }
      else if ((n % 4UL) == 3UL)
      {
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 c022c9c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
      {
        /* The last element is already handle in the loop */
      }
    }
  }
}
 c022ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL) \
 c022ca2:	f816 4c03 	ldrb.w	r4, [r6, #-3]
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL) \
 c022ca6:	f816 ec02 	ldrb.w	lr, [r6, #-2]
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL) \
 c022caa:	0424      	lsls	r4, r4, #16
 c022cac:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 c022cb0:	f816 ec01 	ldrb.w	lr, [r6, #-1]
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL) \
 c022cb4:	ea44 040e 	orr.w	r4, r4, lr
                     | ((uint32_t)src[(n - (index * 4UL) - 4UL)] << 24UL);
 c022cb8:	f816 ed04 	ldrb.w	lr, [r6, #-4]!
 c022cbc:	ea44 640e 	orr.w	r4, r4, lr, lsl #24
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 c022cc0:	f847 4b04 	str.w	r4, [r7], #4
 c022cc4:	e7e1      	b.n	c022c8a <PKA_Memcpy_u8_to_u32+0x12>
      else if ((n % 4UL) == 2UL)
 c022cc6:	2c02      	cmp	r4, #2
 c022cc8:	d108      	bne.n	c022cdc <PKA_Memcpy_u8_to_u32+0x64>
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 c022cca:	1ad2      	subs	r2, r2, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL);
 c022ccc:	440a      	add	r2, r1
 c022cce:	f812 1c02 	ldrb.w	r1, [r2, #-2]
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 c022cd2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL);
 c022cd6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 c022cda:	e7df      	b.n	c022c9c <PKA_Memcpy_u8_to_u32+0x24>
      else if ((n % 4UL) == 3UL)
 c022cdc:	2c03      	cmp	r4, #3
 c022cde:	d1df      	bne.n	c022ca0 <PKA_Memcpy_u8_to_u32+0x28>
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 c022ce0:	1ad2      	subs	r2, r2, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL) \
 c022ce2:	440a      	add	r2, r1
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL);
 c022ce4:	f812 3c03 	ldrb.w	r3, [r2, #-3]
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL) \
 c022ce8:	f812 1c02 	ldrb.w	r1, [r2, #-2]
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL);
 c022cec:	041b      	lsls	r3, r3, #16
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 c022cee:	f812 2c01 	ldrb.w	r2, [r2, #-1]
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL);
 c022cf2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 c022cf6:	4313      	orrs	r3, r2
 c022cf8:	e7d0      	b.n	c022c9c <PKA_Memcpy_u8_to_u32+0x24>

0c022cfa <PKA_Process>:
HAL_StatusTypeDef PKA_Process(PKA_HandleTypeDef *hpka, uint32_t mode, uint32_t Timeout)
{
  HAL_StatusTypeDef err = HAL_OK;
  uint32_t tickstart;

  if (hpka->State == HAL_PKA_STATE_READY)
 c022cfa:	7903      	ldrb	r3, [r0, #4]
{
 c022cfc:	b570      	push	{r4, r5, r6, lr}
  if (hpka->State == HAL_PKA_STATE_READY)
 c022cfe:	2b01      	cmp	r3, #1
{
 c022d00:	4604      	mov	r4, r0
 c022d02:	460d      	mov	r5, r1
 c022d04:	4616      	mov	r6, r2
  if (hpka->State == HAL_PKA_STATE_READY)
 c022d06:	d138      	bne.n	c022d7a <PKA_Process+0x80>
  {
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 c022d08:	2302      	movs	r3, #2
 c022d0a:	7103      	strb	r3, [r0, #4]

    /* Clear any pending error */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 c022d0c:	2300      	movs	r3, #0
 c022d0e:	6083      	str	r3, [r0, #8]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 c022d10:	f7fe fac8 	bl	c0212a4 <HAL_GetTick>

    /* Set the mode and deactivate the interrupts */
    MODIFY_REG(hpka->Instance->CR, PKA_CR_MODE | PKA_CR_PROCENDIE | PKA_CR_RAMERRIE | PKA_CR_ADDRERRIE, mode << PKA_CR_MODE_Pos);
 c022d14:	6822      	ldr	r2, [r4, #0]

    /* Start the computation */
    hpka->Instance->CR |= PKA_CR_START;

    /* Wait for the end of operation or timeout */
    if (PKA_PollEndOfOperation(hpka, Timeout, tickstart) != HAL_OK)
 c022d16:	4631      	mov	r1, r6
    MODIFY_REG(hpka->Instance->CR, PKA_CR_MODE | PKA_CR_PROCENDIE | PKA_CR_RAMERRIE | PKA_CR_ADDRERRIE, mode << PKA_CR_MODE_Pos);
 c022d18:	6813      	ldr	r3, [r2, #0]
 c022d1a:	f423 13d1 	bic.w	r3, r3, #1712128	; 0x1a2000
 c022d1e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 c022d22:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 c022d26:	6013      	str	r3, [r2, #0]
    hpka->Instance->CR |= PKA_CR_START;
 c022d28:	6813      	ldr	r3, [r2, #0]
 c022d2a:	f043 0302 	orr.w	r3, r3, #2
 c022d2e:	6013      	str	r3, [r2, #0]
    if (PKA_PollEndOfOperation(hpka, Timeout, tickstart) != HAL_OK)
 c022d30:	4602      	mov	r2, r0
 c022d32:	4620      	mov	r0, r4
 c022d34:	f7ff fee6 	bl	c022b04 <PKA_PollEndOfOperation>
 c022d38:	b160      	cbz	r0, c022d54 <PKA_Process+0x5a>
    {
      /* Abort any ongoing operation */
      CLEAR_BIT(hpka->Instance->CR, PKA_CR_EN);
 c022d3a:	6823      	ldr	r3, [r4, #0]
 c022d3c:	681a      	ldr	r2, [r3, #0]
 c022d3e:	f022 0201 	bic.w	r2, r2, #1
 c022d42:	601a      	str	r2, [r3, #0]

      hpka->ErrorCode |= HAL_PKA_ERROR_TIMEOUT;
 c022d44:	68a2      	ldr	r2, [r4, #8]
 c022d46:	f042 0204 	orr.w	r2, r2, #4
 c022d4a:	60a2      	str	r2, [r4, #8]

      /* Make ready for the next operation */
      SET_BIT(hpka->Instance->CR, PKA_CR_EN);
 c022d4c:	681a      	ldr	r2, [r3, #0]
 c022d4e:	f042 0201 	orr.w	r2, r2, #1
 c022d52:	601a      	str	r2, [r3, #0]
    }

    /* Check error */
    hpka->ErrorCode |= PKA_CheckError(hpka, mode);
 c022d54:	4629      	mov	r1, r5
 c022d56:	4620      	mov	r0, r4
 c022d58:	f7ff fee9 	bl	c022b2e <PKA_CheckError>
 c022d5c:	68a3      	ldr	r3, [r4, #8]

    /* Clear all flags */
    hpka->Instance->CLRFR |= (PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 c022d5e:	6822      	ldr	r2, [r4, #0]
    hpka->ErrorCode |= PKA_CheckError(hpka, mode);
 c022d60:	4318      	orrs	r0, r3
 c022d62:	60a0      	str	r0, [r4, #8]
    hpka->Instance->CLRFR |= (PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 c022d64:	6893      	ldr	r3, [r2, #8]
 c022d66:	f443 13d0 	orr.w	r3, r3, #1703936	; 0x1a0000
 c022d6a:	6093      	str	r3, [r2, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 c022d6c:	2301      	movs	r3, #1
 c022d6e:	7123      	strb	r3, [r4, #4]

    /* Manage the result based on encountered errors */
    if (hpka->ErrorCode != HAL_PKA_ERROR_NONE)
 c022d70:	68a0      	ldr	r0, [r4, #8]
    {
      err = HAL_ERROR;
 c022d72:	3000      	adds	r0, #0
 c022d74:	bf18      	it	ne
 c022d76:	2001      	movne	r0, #1
  else
  {
    err = HAL_ERROR;
  }
  return err;
}
 c022d78:	bd70      	pop	{r4, r5, r6, pc}
    err = HAL_ERROR;
 c022d7a:	2001      	movs	r0, #1
 c022d7c:	e7fc      	b.n	c022d78 <PKA_Process+0x7e>

0c022d7e <PKA_ModExp_Set>:
  * @brief  Set input parameters.
  * @param  hpka PKA handle
  * @param  in Input information
  */
void PKA_ModExp_Set(PKA_HandleTypeDef *hpka, PKA_ModExpInTypeDef *in)
{
 c022d7e:	b570      	push	{r4, r5, r6, lr}
 c022d80:	460c      	mov	r4, r1
 c022d82:	4606      	mov	r6, r0
  /* Get the number of bit of the exponent */
  hpka->Instance->RAM[PKA_MODULAR_EXP_IN_EXP_NB_BITS] = PKA_GetBitSize_u8(in->expSize);

  /* Move the input parameters pOp1 to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_MODULAR_EXP_IN_EXPONENT_BASE], in->pOp1, in->OpSize);
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_MODULAR_EXP_IN_EXPONENT_BASE + (in->OpSize / 4UL));
 c022d84:	2500      	movs	r5, #0
  hpka->Instance->RAM[PKA_MODULAR_EXP_IN_OP_NB_BITS] = PKA_GetBitSize_u8(in->OpSize);
 c022d86:	684a      	ldr	r2, [r1, #4]
 c022d88:	6800      	ldr	r0, [r0, #0]
  return byteNumber * 8UL;
 c022d8a:	00d3      	lsls	r3, r2, #3
  hpka->Instance->RAM[PKA_MODULAR_EXP_IN_OP_NB_BITS] = PKA_GetBitSize_u8(in->OpSize);
 c022d8c:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  return byteNumber * 8UL;
 c022d90:	680b      	ldr	r3, [r1, #0]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_MODULAR_EXP_IN_EXPONENT_BASE], in->pOp1, in->OpSize);
 c022d92:	68c9      	ldr	r1, [r1, #12]
  return byteNumber * 8UL;
 c022d94:	00db      	lsls	r3, r3, #3
  hpka->Instance->RAM[PKA_MODULAR_EXP_IN_EXP_NB_BITS] = PKA_GetBitSize_u8(in->expSize);
 c022d96:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_MODULAR_EXP_IN_EXPONENT_BASE], in->pOp1, in->OpSize);
 c022d9a:	f600 2044 	addw	r0, r0, #2628	; 0xa44
 c022d9e:	f7ff ff6b 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_MODULAR_EXP_IN_EXPONENT_BASE + (in->OpSize / 4UL));
 c022da2:	6863      	ldr	r3, [r4, #4]
 c022da4:	6830      	ldr	r0, [r6, #0]
 c022da6:	089b      	lsrs	r3, r3, #2
 c022da8:	f203 2391 	addw	r3, r3, #657	; 0x291
 c022dac:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

  /* Move the exponent to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_MODULAR_EXP_IN_EXPONENT], in->pExp, in->expSize);
 c022db0:	6822      	ldr	r2, [r4, #0]
 c022db2:	68a1      	ldr	r1, [r4, #8]
 c022db4:	f500 603d 	add.w	r0, r0, #3024	; 0xbd0
 c022db8:	f7ff ff5e 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_MODULAR_EXP_IN_EXPONENT + (in->expSize / 4UL));
 c022dbc:	6823      	ldr	r3, [r4, #0]
 c022dbe:	6830      	ldr	r0, [r6, #0]
 c022dc0:	089b      	lsrs	r3, r3, #2
 c022dc2:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 c022dc6:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

  /* Move the modulus to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_MODULAR_EXP_IN_MODULUS], in->pMod, in->OpSize);
 c022dca:	6862      	ldr	r2, [r4, #4]
 c022dcc:	6921      	ldr	r1, [r4, #16]
 c022dce:	f600 505c 	addw	r0, r0, #3420	; 0xd5c
 c022dd2:	f7ff ff51 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_MODULAR_EXP_IN_MODULUS + (in->OpSize / 4UL));
 c022dd6:	6863      	ldr	r3, [r4, #4]
 c022dd8:	6832      	ldr	r2, [r6, #0]
 c022dda:	089b      	lsrs	r3, r3, #2
 c022ddc:	f203 3357 	addw	r3, r3, #855	; 0x357
 c022de0:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
}
 c022de4:	bd70      	pop	{r4, r5, r6, pc}

0c022de6 <HAL_PKA_ModExp>:
{
 c022de6:	b538      	push	{r3, r4, r5, lr}
 c022de8:	4604      	mov	r4, r0
 c022dea:	4615      	mov	r5, r2
  PKA_ModExp_Set(hpka, in);
 c022dec:	f7ff ffc7 	bl	c022d7e <PKA_ModExp_Set>
  return PKA_Process(hpka, PKA_MODE_MODULAR_EXP, Timeout);
 c022df0:	462a      	mov	r2, r5
 c022df2:	4620      	mov	r0, r4
}
 c022df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return PKA_Process(hpka, PKA_MODE_MODULAR_EXP, Timeout);
 c022df8:	2100      	movs	r1, #0
 c022dfa:	f7ff bf7e 	b.w	c022cfa <PKA_Process>

0c022dfe <PKA_ECDSASign_Set>:
  * @brief  Set input parameters.
  * @param  hpka PKA handle
  * @param  in Input information
  */
void PKA_ECDSASign_Set(PKA_HandleTypeDef *hpka, PKA_ECDSASignInTypeDef *in)
{
 c022dfe:	b570      	push	{r4, r5, r6, lr}
 c022e00:	460c      	mov	r4, r1
  /* Get the prime order n length */
  hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_ORDER_NB_BITS] = PKA_GetOptBitSize_u8(in->primeOrderSize, *(in->primeOrder));
 c022e02:	6a8a      	ldr	r2, [r1, #40]	; 0x28
{
 c022e04:	4605      	mov	r5, r0
  hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_ORDER_NB_BITS] = PKA_GetOptBitSize_u8(in->primeOrderSize, *(in->primeOrder));
 c022e06:	6803      	ldr	r3, [r0, #0]
 c022e08:	7811      	ldrb	r1, [r2, #0]
 c022e0a:	6820      	ldr	r0, [r4, #0]
 c022e0c:	f7ff fea3 	bl	c022b56 <PKA_GetOptBitSize_u8>

  /* Get the modulus p length */
  hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 c022e10:	6862      	ldr	r2, [r4, #4]
 c022e12:	6921      	ldr	r1, [r4, #16]
  hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_ORDER_NB_BITS] = PKA_GetOptBitSize_u8(in->primeOrderSize, *(in->primeOrder));
 c022e14:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 c022e18:	7809      	ldrb	r1, [r1, #0]
 c022e1a:	4610      	mov	r0, r2
 c022e1c:	f7ff fe9b 	bl	c022b56 <PKA_GetOptBitSize_u8>
  /* Get the coefficient a sign */
  hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_A_COEFF_SIGN] = in->coefSign;

  /* Move the input parameters coefficient |a| to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_A_COEFF], in->coef, in->modulusSize);
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_SIGN_IN_A_COEFF + ((in->modulusSize + 3UL) / 4UL));
 c022e20:	2600      	movs	r6, #0
  hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_A_COEFF_SIGN] = in->coefSign;
 c022e22:	68a1      	ldr	r1, [r4, #8]
  hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 c022e24:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_A_COEFF_SIGN] = in->coefSign;
 c022e28:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_A_COEFF], in->coef, in->modulusSize);
 c022e2c:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 c022e30:	68e1      	ldr	r1, [r4, #12]
 c022e32:	f7ff ff21 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_SIGN_IN_A_COEFF + ((in->modulusSize + 3UL) / 4UL));
 c022e36:	6862      	ldr	r2, [r4, #4]
 c022e38:	6828      	ldr	r0, [r5, #0]
 c022e3a:	1cd3      	adds	r3, r2, #3
 c022e3c:	089b      	lsrs	r3, r3, #2
 c022e3e:	f203 1303 	addw	r3, r3, #259	; 0x103
 c022e42:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters modulus value p to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_MOD_GF], in->modulus, in->modulusSize);
 c022e46:	6921      	ldr	r1, [r4, #16]
 c022e48:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 c022e4c:	f7ff ff14 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_SIGN_IN_MOD_GF + ((in->modulusSize + 3UL) / 4UL));
 c022e50:	6863      	ldr	r3, [r4, #4]
 c022e52:	6828      	ldr	r0, [r5, #0]
 c022e54:	3303      	adds	r3, #3
 c022e56:	089b      	lsrs	r3, r3, #2
 c022e58:	f503 738c 	add.w	r3, r3, #280	; 0x118
 c022e5c:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters integer k to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_K], in->integer, in->primeOrderSize);
 c022e60:	6822      	ldr	r2, [r4, #0]
 c022e62:	6961      	ldr	r1, [r4, #20]
 c022e64:	f500 60a1 	add.w	r0, r0, #1288	; 0x508
 c022e68:	f7ff ff06 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_SIGN_IN_K + ((in->primeOrderSize + 3UL) / 4UL));
 c022e6c:	6823      	ldr	r3, [r4, #0]
 c022e6e:	6828      	ldr	r0, [r5, #0]
 c022e70:	3303      	adds	r3, #3
 c022e72:	089b      	lsrs	r3, r3, #2
 c022e74:	f503 73a1 	add.w	r3, r3, #322	; 0x142
 c022e78:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters base point G coordinate x to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_INITIAL_POINT_X], in->basePointX, in->modulusSize);
 c022e7c:	6862      	ldr	r2, [r4, #4]
 c022e7e:	69a1      	ldr	r1, [r4, #24]
 c022e80:	f200 505c 	addw	r0, r0, #1372	; 0x55c
 c022e84:	f7ff fef8 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_SIGN_IN_INITIAL_POINT_X + ((in->modulusSize + 3UL) / 4UL));
 c022e88:	6862      	ldr	r2, [r4, #4]
 c022e8a:	6828      	ldr	r0, [r5, #0]
 c022e8c:	1cd3      	adds	r3, r2, #3
 c022e8e:	089b      	lsrs	r3, r3, #2
 c022e90:	f203 1357 	addw	r3, r3, #343	; 0x157
 c022e94:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters base point G coordinate y to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_INITIAL_POINT_Y], in->basePointY, in->modulusSize);
 c022e98:	69e1      	ldr	r1, [r4, #28]
 c022e9a:	f500 60b6 	add.w	r0, r0, #1456	; 0x5b0
 c022e9e:	f7ff feeb 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_SIGN_IN_INITIAL_POINT_Y + ((in->modulusSize + 3UL) / 4UL));
 c022ea2:	6863      	ldr	r3, [r4, #4]
 c022ea4:	6828      	ldr	r0, [r5, #0]
 c022ea6:	3303      	adds	r3, #3
 c022ea8:	089b      	lsrs	r3, r3, #2
 c022eaa:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 c022eae:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters hash of message z to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_HASH_E], in->hash, in->primeOrderSize);
 c022eb2:	6822      	ldr	r2, [r4, #0]
 c022eb4:	6a21      	ldr	r1, [r4, #32]
 c022eb6:	f600 50e8 	addw	r0, r0, #3560	; 0xde8
 c022eba:	f7ff fedd 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_SIGN_IN_HASH_E + ((in->primeOrderSize + 3UL) / 4UL));
 c022ebe:	6822      	ldr	r2, [r4, #0]
 c022ec0:	6828      	ldr	r0, [r5, #0]
 c022ec2:	1cd3      	adds	r3, r2, #3
 c022ec4:	089b      	lsrs	r3, r3, #2
 c022ec6:	f203 337a 	addw	r3, r3, #890	; 0x37a
 c022eca:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters private key d to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_PRIVATE_KEY_D], in->privateKey, in->primeOrderSize);
 c022ece:	6a61      	ldr	r1, [r4, #36]	; 0x24
 c022ed0:	f600 603c 	addw	r0, r0, #3644	; 0xe3c
 c022ed4:	f7ff fed0 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_SIGN_IN_PRIVATE_KEY_D + ((in->primeOrderSize + 3UL) / 4UL));
 c022ed8:	6822      	ldr	r2, [r4, #0]
 c022eda:	6828      	ldr	r0, [r5, #0]
 c022edc:	1cd3      	adds	r3, r2, #3
 c022ede:	089b      	lsrs	r3, r3, #2
 c022ee0:	f203 338f 	addw	r3, r3, #911	; 0x38f
 c022ee4:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters prime order n to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_SIGN_IN_ORDER_N], in->primeOrder, in->primeOrderSize);
 c022ee8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 c022eea:	f600 6094 	addw	r0, r0, #3732	; 0xe94
 c022eee:	f7ff fec3 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_SIGN_IN_ORDER_N + ((in->primeOrderSize + 3UL) / 4UL));
 c022ef2:	6823      	ldr	r3, [r4, #0]
 c022ef4:	682a      	ldr	r2, [r5, #0]
 c022ef6:	3303      	adds	r3, #3
 c022ef8:	089b      	lsrs	r3, r3, #2
 c022efa:	f203 33a5 	addw	r3, r3, #933	; 0x3a5
 c022efe:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
}
 c022f02:	bd70      	pop	{r4, r5, r6, pc}

0c022f04 <HAL_PKA_ECDSASign>:
{
 c022f04:	b538      	push	{r3, r4, r5, lr}
 c022f06:	4604      	mov	r4, r0
 c022f08:	4615      	mov	r5, r2
  PKA_ECDSASign_Set(hpka, in);
 c022f0a:	f7ff ff78 	bl	c022dfe <PKA_ECDSASign_Set>
  return PKA_Process(hpka, PKA_MODE_ECDSA_SIGNATURE, Timeout);
 c022f0e:	462a      	mov	r2, r5
 c022f10:	4620      	mov	r0, r4
}
 c022f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return PKA_Process(hpka, PKA_MODE_ECDSA_SIGNATURE, Timeout);
 c022f16:	2124      	movs	r1, #36	; 0x24
 c022f18:	f7ff beef 	b.w	c022cfa <PKA_Process>

0c022f1c <PKA_ECDSAVerif_Set>:
  * @brief  Set input parameters.
  * @param  hpka PKA handle
  * @param  in Input information
  */
void PKA_ECDSAVerif_Set(PKA_HandleTypeDef *hpka, PKA_ECDSAVerifInTypeDef *in)
{
 c022f1c:	b570      	push	{r4, r5, r6, lr}
 c022f1e:	460c      	mov	r4, r1
  /* Get the prime order n length */
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_ORDER_NB_BITS] = PKA_GetOptBitSize_u8(in->primeOrderSize, *(in->primeOrder));
 c022f20:	6b0a      	ldr	r2, [r1, #48]	; 0x30
{
 c022f22:	4605      	mov	r5, r0
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_ORDER_NB_BITS] = PKA_GetOptBitSize_u8(in->primeOrderSize, *(in->primeOrder));
 c022f24:	6803      	ldr	r3, [r0, #0]
 c022f26:	7811      	ldrb	r1, [r2, #0]
 c022f28:	6820      	ldr	r0, [r4, #0]
 c022f2a:	f7ff fe14 	bl	c022b56 <PKA_GetOptBitSize_u8>

  /* Get the modulus p length */
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 c022f2e:	6862      	ldr	r2, [r4, #4]
 c022f30:	6921      	ldr	r1, [r4, #16]
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_ORDER_NB_BITS] = PKA_GetOptBitSize_u8(in->primeOrderSize, *(in->primeOrder));
 c022f32:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 c022f36:	7809      	ldrb	r1, [r1, #0]
 c022f38:	4610      	mov	r0, r2
 c022f3a:	f7ff fe0c 	bl	c022b56 <PKA_GetOptBitSize_u8>
  /* Get the coefficient a sign */
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_A_COEFF_SIGN] = in->coefSign;

  /* Move the input parameters coefficient |a| to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_A_COEFF], in->coef, in->modulusSize);
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_A_COEFF + ((in->modulusSize + 3UL) / 4UL));
 c022f3e:	2600      	movs	r6, #0
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_A_COEFF_SIGN] = in->coefSign;
 c022f40:	68a1      	ldr	r1, [r4, #8]
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 c022f42:	f8c3 04b4 	str.w	r0, [r3, #1204]	; 0x4b4
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_A_COEFF_SIGN] = in->coefSign;
 c022f46:	f8c3 145c 	str.w	r1, [r3, #1116]	; 0x45c
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_A_COEFF], in->coef, in->modulusSize);
 c022f4a:	f503 608c 	add.w	r0, r3, #1120	; 0x460
 c022f4e:	68e1      	ldr	r1, [r4, #12]
 c022f50:	f7ff fe92 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_A_COEFF + ((in->modulusSize + 3UL) / 4UL));
 c022f54:	6862      	ldr	r2, [r4, #4]
 c022f56:	6828      	ldr	r0, [r5, #0]
 c022f58:	1cd3      	adds	r3, r2, #3
 c022f5a:	089b      	lsrs	r3, r3, #2
 c022f5c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 c022f60:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters modulus value p to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_MOD_GF], in->modulus, in->modulusSize);
 c022f64:	6921      	ldr	r1, [r4, #16]
 c022f66:	f500 6097 	add.w	r0, r0, #1208	; 0x4b8
 c022f6a:	f7ff fe85 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_MOD_GF + ((in->modulusSize + 3UL) / 4UL));
 c022f6e:	6862      	ldr	r2, [r4, #4]
 c022f70:	6828      	ldr	r0, [r5, #0]
 c022f72:	1cd3      	adds	r3, r2, #3
 c022f74:	089b      	lsrs	r3, r3, #2
 c022f76:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 c022f7a:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters base point G coordinate x to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_INITIAL_POINT_X], in->basePointX, in->modulusSize);
 c022f7e:	6961      	ldr	r1, [r4, #20]
 c022f80:	f500 60bd 	add.w	r0, r0, #1512	; 0x5e8
 c022f84:	f7ff fe78 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_INITIAL_POINT_X + ((in->modulusSize + 3UL) / 4UL));
 c022f88:	6862      	ldr	r2, [r4, #4]
 c022f8a:	6828      	ldr	r0, [r5, #0]
 c022f8c:	1cd3      	adds	r3, r2, #3
 c022f8e:	089b      	lsrs	r3, r3, #2
 c022f90:	f503 73bd 	add.w	r3, r3, #378	; 0x17a
 c022f94:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters base point G coordinate y to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_INITIAL_POINT_Y], in->basePointY, in->modulusSize);
 c022f98:	69a1      	ldr	r1, [r4, #24]
 c022f9a:	f200 603c 	addw	r0, r0, #1596	; 0x63c
 c022f9e:	f7ff fe6b 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_INITIAL_POINT_Y + ((in->modulusSize + 3UL) / 4UL));
 c022fa2:	6862      	ldr	r2, [r4, #4]
 c022fa4:	6828      	ldr	r0, [r5, #0]
 c022fa6:	1cd3      	adds	r3, r2, #3
 c022fa8:	089b      	lsrs	r3, r3, #2
 c022faa:	f203 138f 	addw	r3, r3, #399	; 0x18f
 c022fae:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters public-key curve point Q coordinate xQ to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_X], in->pPubKeyCurvePtX, in->modulusSize);
 c022fb2:	69e1      	ldr	r1, [r4, #28]
 c022fb4:	f500 6074 	add.w	r0, r0, #3904	; 0xf40
 c022fb8:	f7ff fe5e 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_X + ((in->modulusSize + 3UL) / 4UL));
 c022fbc:	6862      	ldr	r2, [r4, #4]
 c022fbe:	6828      	ldr	r0, [r5, #0]
 c022fc0:	1cd3      	adds	r3, r2, #3
 c022fc2:	089b      	lsrs	r3, r3, #2
 c022fc4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 c022fc8:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters public-key curve point Q coordinate xQ to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_Y], in->pPubKeyCurvePtY, in->modulusSize);
 c022fcc:	6a21      	ldr	r1, [r4, #32]
 c022fce:	f600 7094 	addw	r0, r0, #3988	; 0xf94
 c022fd2:	f7ff fe51 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_Y + ((in->modulusSize + 3UL) / 4UL));
 c022fd6:	6863      	ldr	r3, [r4, #4]
 c022fd8:	6828      	ldr	r0, [r5, #0]
 c022fda:	3303      	adds	r3, #3
 c022fdc:	089b      	lsrs	r3, r3, #2
 c022fde:	f203 33e5 	addw	r3, r3, #997	; 0x3e5
 c022fe2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters signature part r to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_SIGNATURE_R], in->RSign, in->primeOrderSize);
 c022fe6:	f500 5084 	add.w	r0, r0, #4224	; 0x1080
 c022fea:	6822      	ldr	r2, [r4, #0]
 c022fec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 c022fee:	3018      	adds	r0, #24
 c022ff0:	f7ff fe42 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_SIGNATURE_R + ((in->primeOrderSize + 3UL) / 4UL));
 c022ff4:	6822      	ldr	r2, [r4, #0]
 c022ff6:	6828      	ldr	r0, [r5, #0]
 c022ff8:	1cd3      	adds	r3, r2, #3
 c022ffa:	089b      	lsrs	r3, r3, #2
 c022ffc:	f203 4326 	addw	r3, r3, #1062	; 0x426
 c023000:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters signature part s to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_SIGNATURE_S], in->SSign, in->primeOrderSize);
 c023004:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 c023006:	f600 2044 	addw	r0, r0, #2628	; 0xa44
 c02300a:	f7ff fe35 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_SIGNATURE_S + ((in->primeOrderSize + 3UL) / 4UL));
 c02300e:	6822      	ldr	r2, [r4, #0]
 c023010:	6828      	ldr	r0, [r5, #0]
 c023012:	1cd3      	adds	r3, r2, #3
 c023014:	089b      	lsrs	r3, r3, #2
 c023016:	f203 2391 	addw	r3, r3, #657	; 0x291
 c02301a:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters hash of message z to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_HASH_E], in->hash, in->primeOrderSize);
 c02301e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 c023020:	f600 70e8 	addw	r0, r0, #4072	; 0xfe8
 c023024:	f7ff fe28 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_HASH_E + ((in->primeOrderSize + 3UL) / 4UL));
 c023028:	6822      	ldr	r2, [r4, #0]
 c02302a:	6828      	ldr	r0, [r5, #0]
 c02302c:	1cd3      	adds	r3, r2, #3
 c02302e:	089b      	lsrs	r3, r3, #2
 c023030:	f203 33fa 	addw	r3, r3, #1018	; 0x3fa
 c023034:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters curve prime order n to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_ORDER_N], in->primeOrder, in->primeOrderSize);
 c023038:	6b21      	ldr	r1, [r4, #48]	; 0x30
 c02303a:	f600 505c 	addw	r0, r0, #3420	; 0xd5c
 c02303e:	f7ff fe1b 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_ORDER_N + ((in->primeOrderSize + 3UL) / 4UL));
 c023042:	6823      	ldr	r3, [r4, #0]
 c023044:	682a      	ldr	r2, [r5, #0]
 c023046:	3303      	adds	r3, #3
 c023048:	089b      	lsrs	r3, r3, #2
 c02304a:	f203 3357 	addw	r3, r3, #855	; 0x357
 c02304e:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
}
 c023052:	bd70      	pop	{r4, r5, r6, pc}

0c023054 <HAL_PKA_ECDSAVerif>:
{
 c023054:	b538      	push	{r3, r4, r5, lr}
 c023056:	4604      	mov	r4, r0
 c023058:	4615      	mov	r5, r2
  PKA_ECDSAVerif_Set(hpka, in);
 c02305a:	f7ff ff5f 	bl	c022f1c <PKA_ECDSAVerif_Set>
  return PKA_Process(hpka, PKA_MODE_ECDSA_VERIFICATION, Timeout);
 c02305e:	462a      	mov	r2, r5
 c023060:	4620      	mov	r0, r4
}
 c023062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return PKA_Process(hpka, PKA_MODE_ECDSA_VERIFICATION, Timeout);
 c023066:	2126      	movs	r1, #38	; 0x26
 c023068:	f7ff be47 	b.w	c022cfa <PKA_Process>

0c02306c <PKA_RSACRTExp_Set>:
  * @brief  Set input parameters.
  * @param  hpka PKA handle
  * @param  in Input information
  */
void PKA_RSACRTExp_Set(PKA_HandleTypeDef *hpka, PKA_RSACRTExpInTypeDef *in)
{
 c02306c:	b570      	push	{r4, r5, r6, lr}
 c02306e:	460c      	mov	r4, r1
 c023070:	4605      	mov	r5, r0
  /* Get the operand length M */
  hpka->Instance->RAM[PKA_RSA_CRT_EXP_IN_MOD_NB_BITS] = PKA_GetBitSize_u8(in->size);

  /* Move the input parameters operand dP to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_RSA_CRT_EXP_IN_DP_CRT], in->pOpDp, in->size / 2UL);
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_RSA_CRT_EXP_IN_DP_CRT + (in->size / 8UL));
 c023072:	2600      	movs	r6, #0
  hpka->Instance->RAM[PKA_RSA_CRT_EXP_IN_MOD_NB_BITS] = PKA_GetBitSize_u8(in->size);
 c023074:	680a      	ldr	r2, [r1, #0]
 c023076:	6800      	ldr	r0, [r0, #0]
  return byteNumber * 8UL;
 c023078:	00d3      	lsls	r3, r2, #3
  hpka->Instance->RAM[PKA_RSA_CRT_EXP_IN_MOD_NB_BITS] = PKA_GetBitSize_u8(in->size);
 c02307a:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_RSA_CRT_EXP_IN_DP_CRT], in->pOpDp, in->size / 2UL);
 c02307e:	0852      	lsrs	r2, r2, #1
 c023080:	6849      	ldr	r1, [r1, #4]
 c023082:	f200 605c 	addw	r0, r0, #1628	; 0x65c
 c023086:	f7ff fdf7 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_RSA_CRT_EXP_IN_DP_CRT + (in->size / 8UL));
 c02308a:	6822      	ldr	r2, [r4, #0]
 c02308c:	6828      	ldr	r0, [r5, #0]
 c02308e:	08d3      	lsrs	r3, r2, #3
 c023090:	f203 1397 	addw	r3, r3, #407	; 0x197
 c023094:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters operand dQ to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_RSA_CRT_EXP_IN_DQ_CRT], in->pOpDq, in->size / 2UL);
 c023098:	0852      	lsrs	r2, r2, #1
 c02309a:	68a1      	ldr	r1, [r4, #8]
 c02309c:	f500 603d 	add.w	r0, r0, #3024	; 0xbd0
 c0230a0:	f7ff fdea 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_RSA_CRT_EXP_IN_DQ_CRT + (in->size / 8UL));
 c0230a4:	6822      	ldr	r2, [r4, #0]
 c0230a6:	6828      	ldr	r0, [r5, #0]
 c0230a8:	08d3      	lsrs	r3, r2, #3
 c0230aa:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 c0230ae:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters operand qinv to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_RSA_CRT_EXP_IN_QINV_CRT], in->pOpQinv, in->size / 2UL);
 c0230b2:	0852      	lsrs	r2, r2, #1
 c0230b4:	68e1      	ldr	r1, [r4, #12]
 c0230b6:	f200 70ec 	addw	r0, r0, #2028	; 0x7ec
 c0230ba:	f7ff fddd 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_RSA_CRT_EXP_IN_QINV_CRT + (in->size / 8UL));
 c0230be:	6822      	ldr	r2, [r4, #0]
 c0230c0:	6828      	ldr	r0, [r5, #0]
 c0230c2:	08d3      	lsrs	r3, r2, #3
 c0230c4:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 c0230c8:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters prime p to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_RSA_CRT_EXP_IN_PRIME_P], in->pPrimeP, in->size / 2UL);
 c0230cc:	0852      	lsrs	r2, r2, #1
 c0230ce:	6921      	ldr	r1, [r4, #16]
 c0230d0:	f600 107c 	addw	r0, r0, #2428	; 0x97c
 c0230d4:	f7ff fdd0 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_RSA_CRT_EXP_IN_PRIME_P + (in->size / 8UL));
 c0230d8:	6822      	ldr	r2, [r4, #0]
 c0230da:	6828      	ldr	r0, [r5, #0]
 c0230dc:	08d3      	lsrs	r3, r2, #3
 c0230de:	f203 235f 	addw	r3, r3, #607	; 0x25f
 c0230e2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters prime q to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_RSA_CRT_EXP_IN_PRIME_Q], in->pPrimeQ, in->size / 2UL);
 c0230e6:	0852      	lsrs	r2, r2, #1
 c0230e8:	6961      	ldr	r1, [r4, #20]
 c0230ea:	f600 505c 	addw	r0, r0, #3420	; 0xd5c
 c0230ee:	f7ff fdc3 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_RSA_CRT_EXP_IN_PRIME_Q + (in->size / 8UL));
 c0230f2:	6822      	ldr	r2, [r4, #0]
 c0230f4:	6828      	ldr	r0, [r5, #0]
 c0230f6:	08d3      	lsrs	r3, r2, #3
 c0230f8:	f203 3357 	addw	r3, r3, #855	; 0x357
 c0230fc:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters operand A to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_RSA_CRT_EXP_IN_EXPONENT_BASE], in->popA, in->size);
 c023100:	69a1      	ldr	r1, [r4, #24]
 c023102:	f600 60ec 	addw	r0, r0, #3820	; 0xeec
 c023106:	f7ff fdb7 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_RSA_CRT_EXP_IN_EXPONENT_BASE + (in->size / 4UL));
 c02310a:	6823      	ldr	r3, [r4, #0]
 c02310c:	682a      	ldr	r2, [r5, #0]
 c02310e:	089b      	lsrs	r3, r3, #2
 c023110:	f203 33bb 	addw	r3, r3, #955	; 0x3bb
 c023114:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
}
 c023118:	bd70      	pop	{r4, r5, r6, pc}

0c02311a <HAL_PKA_RSACRTExp>:
{
 c02311a:	b538      	push	{r3, r4, r5, lr}
 c02311c:	4604      	mov	r4, r0
 c02311e:	4615      	mov	r5, r2
  PKA_RSACRTExp_Set(hpka, in);
 c023120:	f7ff ffa4 	bl	c02306c <PKA_RSACRTExp_Set>
  return PKA_Process(hpka, PKA_MODE_RSA_CRT_EXP, Timeout);
 c023124:	462a      	mov	r2, r5
 c023126:	4620      	mov	r0, r4
}
 c023128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return PKA_Process(hpka, PKA_MODE_RSA_CRT_EXP, Timeout);
 c02312c:	2107      	movs	r1, #7
 c02312e:	f7ff bde4 	b.w	c022cfa <PKA_Process>

0c023132 <PKA_PointCheck_Set>:
  * @brief  Set input parameters.
  * @param  hpka PKA handle
  * @param  in Input information
  */
void PKA_PointCheck_Set(PKA_HandleTypeDef *hpka, PKA_PointCheckInTypeDef *in)
{
 c023132:	b570      	push	{r4, r5, r6, lr}
  /* Get the modulus length */
  hpka->Instance->RAM[PKA_POINT_CHECK_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 c023134:	680a      	ldr	r2, [r1, #0]
{
 c023136:	460c      	mov	r4, r1
  hpka->Instance->RAM[PKA_POINT_CHECK_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 c023138:	6909      	ldr	r1, [r1, #16]
 c02313a:	6803      	ldr	r3, [r0, #0]
{
 c02313c:	4605      	mov	r5, r0
  hpka->Instance->RAM[PKA_POINT_CHECK_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 c02313e:	7809      	ldrb	r1, [r1, #0]
 c023140:	4610      	mov	r0, r2
 c023142:	f7ff fd08 	bl	c022b56 <PKA_GetOptBitSize_u8>
  /* Get the coefficient a sign */
  hpka->Instance->RAM[PKA_POINT_CHECK_IN_A_COEFF_SIGN] = in->coefSign;

  /* Move the input parameters coefficient |a| to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_POINT_CHECK_IN_A_COEFF], in->coefA, in->modulusSize);
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_POINT_CHECK_IN_A_COEFF + ((in->modulusSize + 3UL) / 4UL));
 c023146:	2600      	movs	r6, #0
  hpka->Instance->RAM[PKA_POINT_CHECK_IN_A_COEFF_SIGN] = in->coefSign;
 c023148:	6861      	ldr	r1, [r4, #4]
  hpka->Instance->RAM[PKA_POINT_CHECK_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 c02314a:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  hpka->Instance->RAM[PKA_POINT_CHECK_IN_A_COEFF_SIGN] = in->coefSign;
 c02314e:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_POINT_CHECK_IN_A_COEFF], in->coefA, in->modulusSize);
 c023152:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 c023156:	68a1      	ldr	r1, [r4, #8]
 c023158:	f7ff fd8e 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_POINT_CHECK_IN_A_COEFF + ((in->modulusSize + 3UL) / 4UL));
 c02315c:	6822      	ldr	r2, [r4, #0]
 c02315e:	6828      	ldr	r0, [r5, #0]
 c023160:	1cd3      	adds	r3, r2, #3
 c023162:	089b      	lsrs	r3, r3, #2
 c023164:	f203 1303 	addw	r3, r3, #259	; 0x103
 c023168:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters coefficient b to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_POINT_CHECK_IN_B_COEFF], in->coefB, in->modulusSize);
 c02316c:	68e1      	ldr	r1, [r4, #12]
 c02316e:	f200 70fc 	addw	r0, r0, #2044	; 0x7fc
 c023172:	f7ff fd81 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_POINT_CHECK_IN_B_COEFF + ((in->modulusSize + 3UL) / 4UL));
 c023176:	6822      	ldr	r2, [r4, #0]
 c023178:	6828      	ldr	r0, [r5, #0]
 c02317a:	1cd3      	adds	r3, r2, #3
 c02317c:	089b      	lsrs	r3, r3, #2
 c02317e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 c023182:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters modulus value p to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_POINT_CHECK_IN_MOD_GF], in->modulus, in->modulusSize);
 c023186:	6921      	ldr	r1, [r4, #16]
 c023188:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 c02318c:	f7ff fd74 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_POINT_CHECK_IN_MOD_GF + ((in->modulusSize + 3UL) / 4UL));
 c023190:	6822      	ldr	r2, [r4, #0]
 c023192:	6828      	ldr	r0, [r5, #0]
 c023194:	1cd3      	adds	r3, r2, #3
 c023196:	089b      	lsrs	r3, r3, #2
 c023198:	f503 738c 	add.w	r3, r3, #280	; 0x118
 c02319c:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters Point P coordinate x to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_POINT_CHECK_IN_INITIAL_POINT_X], in->pointX, in->modulusSize);
 c0231a0:	6961      	ldr	r1, [r4, #20]
 c0231a2:	f200 505c 	addw	r0, r0, #1372	; 0x55c
 c0231a6:	f7ff fd67 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_POINT_CHECK_IN_INITIAL_POINT_X + ((in->modulusSize + 3UL) / 4UL));
 c0231aa:	6822      	ldr	r2, [r4, #0]
 c0231ac:	6828      	ldr	r0, [r5, #0]
 c0231ae:	1cd3      	adds	r3, r2, #3
 c0231b0:	089b      	lsrs	r3, r3, #2
 c0231b2:	f203 1357 	addw	r3, r3, #343	; 0x157
 c0231b6:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

  /* Move the input parameters Point P coordinate y to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_POINT_CHECK_IN_INITIAL_POINT_Y], in->pointY, in->modulusSize);
 c0231ba:	69a1      	ldr	r1, [r4, #24]
 c0231bc:	f500 60b6 	add.w	r0, r0, #1456	; 0x5b0
 c0231c0:	f7ff fd5a 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_POINT_CHECK_IN_INITIAL_POINT_Y + ((in->modulusSize + 3UL) / 4UL));
 c0231c4:	6823      	ldr	r3, [r4, #0]
 c0231c6:	682a      	ldr	r2, [r5, #0]
 c0231c8:	3303      	adds	r3, #3
 c0231ca:	089b      	lsrs	r3, r3, #2
 c0231cc:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 c0231d0:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
}
 c0231d4:	bd70      	pop	{r4, r5, r6, pc}

0c0231d6 <HAL_PKA_PointCheck>:
{
 c0231d6:	b538      	push	{r3, r4, r5, lr}
 c0231d8:	4604      	mov	r4, r0
 c0231da:	4615      	mov	r5, r2
  PKA_PointCheck_Set(hpka, in);
 c0231dc:	f7ff ffa9 	bl	c023132 <PKA_PointCheck_Set>
  return PKA_Process(hpka, PKA_MODE_POINT_CHECK, Timeout);
 c0231e0:	462a      	mov	r2, r5
 c0231e2:	4620      	mov	r0, r4
}
 c0231e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return PKA_Process(hpka, PKA_MODE_POINT_CHECK, Timeout);
 c0231e8:	2128      	movs	r1, #40	; 0x28
 c0231ea:	f7ff bd86 	b.w	c022cfa <PKA_Process>

0c0231ee <PKA_ECCMul_Set>:
  * @brief  Set input parameters.
  * @param  hpka PKA handle
  * @param  in Input information
  */
void PKA_ECCMul_Set(PKA_HandleTypeDef *hpka, PKA_ECCMulInTypeDef *in)
{
 c0231ee:	b570      	push	{r4, r5, r6, lr}
 c0231f0:	460c      	mov	r4, r1
  /* Get the scalar multiplier k length */
  hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_EXP_NB_BITS] = PKA_GetOptBitSize_u8(in->scalarMulSize, *(in->scalarMul));
 c0231f2:	69ca      	ldr	r2, [r1, #28]
 c0231f4:	6803      	ldr	r3, [r0, #0]
 c0231f6:	7811      	ldrb	r1, [r2, #0]
{
 c0231f8:	4606      	mov	r6, r0
  hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_EXP_NB_BITS] = PKA_GetOptBitSize_u8(in->scalarMulSize, *(in->scalarMul));
 c0231fa:	6820      	ldr	r0, [r4, #0]
 c0231fc:	f7ff fcab 	bl	c022b56 <PKA_GetOptBitSize_u8>

  /* Get the modulus length */
  hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_OP_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 c023200:	6862      	ldr	r2, [r4, #4]
 c023202:	6921      	ldr	r1, [r4, #16]
  hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_EXP_NB_BITS] = PKA_GetOptBitSize_u8(in->scalarMulSize, *(in->scalarMul));
 c023204:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_OP_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 c023208:	7809      	ldrb	r1, [r1, #0]
 c02320a:	4610      	mov	r0, r2
 c02320c:	f7ff fca3 	bl	c022b56 <PKA_GetOptBitSize_u8>
  /* Get the coefficient a sign */
  hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_A_COEFF_SIGN] = in->coefSign;

  /* Move the input parameters coefficient |a| to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_A_COEFF], in->coefA, in->modulusSize);
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECC_SCALAR_MUL_IN_A_COEFF + ((in->modulusSize + 3UL) / 4UL));
 c023210:	2500      	movs	r5, #0
  hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_A_COEFF_SIGN] = in->coefSign;
 c023212:	68a1      	ldr	r1, [r4, #8]
  hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_OP_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 c023214:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_A_COEFF_SIGN] = in->coefSign;
 c023218:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_A_COEFF], in->coefA, in->modulusSize);
 c02321c:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 c023220:	68e1      	ldr	r1, [r4, #12]
 c023222:	f7ff fd29 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECC_SCALAR_MUL_IN_A_COEFF + ((in->modulusSize + 3UL) / 4UL));
 c023226:	6862      	ldr	r2, [r4, #4]
 c023228:	6830      	ldr	r0, [r6, #0]
 c02322a:	1cd3      	adds	r3, r2, #3
 c02322c:	089b      	lsrs	r3, r3, #2
 c02322e:	f203 1303 	addw	r3, r3, #259	; 0x103
 c023232:	f840 5023 	str.w	r5, [r0, r3, lsl #2]


  /* Move the input parameters modulus value p to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_MOD_GF], in->modulus, in->modulusSize);
 c023236:	6921      	ldr	r1, [r4, #16]
 c023238:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 c02323c:	f7ff fd1c 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECC_SCALAR_MUL_IN_MOD_GF + ((in->modulusSize + 3UL) / 4UL));
 c023240:	6863      	ldr	r3, [r4, #4]
 c023242:	6830      	ldr	r0, [r6, #0]
 c023244:	3303      	adds	r3, #3
 c023246:	089b      	lsrs	r3, r3, #2
 c023248:	f503 738c 	add.w	r3, r3, #280	; 0x118
 c02324c:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

  /* Move the input parameters scalar multiplier k to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECC_SCALAR_MUL_IN_K], in->scalarMul, in->scalarMulSize);
 c023250:	6822      	ldr	r2, [r4, #0]
 c023252:	69e1      	ldr	r1, [r4, #28]
 c023254:	f500 60a1 	add.w	r0, r0, #1288	; 0x508
 c023258:	f7ff fd0e 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECC_SCALAR_MUL_IN_K + ((in->scalarMulSize + 3UL) / 4UL));
 c02325c:	6823      	ldr	r3, [r4, #0]
 c02325e:	6830      	ldr	r0, [r6, #0]
 c023260:	3303      	adds	r3, #3
 c023262:	089b      	lsrs	r3, r3, #2
 c023264:	f503 73a1 	add.w	r3, r3, #322	; 0x142
 c023268:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

  /* Move the input parameters Point P coordinate x to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_POINT_CHECK_IN_INITIAL_POINT_X], in->pointX, in->modulusSize);
 c02326c:	6862      	ldr	r2, [r4, #4]
 c02326e:	6961      	ldr	r1, [r4, #20]
 c023270:	f200 505c 	addw	r0, r0, #1372	; 0x55c
 c023274:	f7ff fd00 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_POINT_CHECK_IN_INITIAL_POINT_X + ((in->modulusSize + 3UL) / 4UL));
 c023278:	6862      	ldr	r2, [r4, #4]
 c02327a:	6830      	ldr	r0, [r6, #0]
 c02327c:	1cd3      	adds	r3, r2, #3
 c02327e:	089b      	lsrs	r3, r3, #2
 c023280:	f203 1357 	addw	r3, r3, #343	; 0x157
 c023284:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

  /* Move the input parameters Point P coordinate y to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_POINT_CHECK_IN_INITIAL_POINT_Y], in->pointY, in->modulusSize);
 c023288:	69a1      	ldr	r1, [r4, #24]
 c02328a:	f500 60b6 	add.w	r0, r0, #1456	; 0x5b0
 c02328e:	f7ff fcf3 	bl	c022c78 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_POINT_CHECK_IN_INITIAL_POINT_Y + ((in->modulusSize + 3UL) / 4UL));
 c023292:	6863      	ldr	r3, [r4, #4]
 c023294:	6832      	ldr	r2, [r6, #0]
 c023296:	3303      	adds	r3, #3
 c023298:	089b      	lsrs	r3, r3, #2
 c02329a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 c02329e:	f842 5023 	str.w	r5, [r2, r3, lsl #2]

}
 c0232a2:	bd70      	pop	{r4, r5, r6, pc}

0c0232a4 <HAL_PKA_ECCMul>:
{
 c0232a4:	b538      	push	{r3, r4, r5, lr}
 c0232a6:	4604      	mov	r4, r0
 c0232a8:	4615      	mov	r5, r2
  PKA_ECCMul_Set(hpka, in);
 c0232aa:	f7ff ffa0 	bl	c0231ee <PKA_ECCMul_Set>
  return PKA_Process(hpka, PKA_MODE_ECC_MUL, Timeout);
 c0232ae:	462a      	mov	r2, r5
 c0232b0:	4620      	mov	r0, r4
}
 c0232b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return PKA_Process(hpka, PKA_MODE_ECC_MUL, Timeout);
 c0232b6:	2120      	movs	r1, #32
 c0232b8:	f7ff bd1f 	b.w	c022cfa <PKA_Process>

0c0232bc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0232bc:	4a24      	ldr	r2, [pc, #144]	; (c023350 <HAL_RCC_GetSysClockFreq+0x94>)
 c0232be:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0232c0:	68d1      	ldr	r1, [r2, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c0232c2:	f013 030c 	ands.w	r3, r3, #12
 c0232c6:	d005      	beq.n	c0232d4 <HAL_RCC_GetSysClockFreq+0x18>
 c0232c8:	2b0c      	cmp	r3, #12
 c0232ca:	d116      	bne.n	c0232fa <HAL_RCC_GetSysClockFreq+0x3e>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0232cc:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c0232d0:	2901      	cmp	r1, #1
 c0232d2:	d119      	bne.n	c023308 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c0232d4:	6811      	ldr	r1, [r2, #0]
 c0232d6:	0709      	lsls	r1, r1, #28
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c0232d8:	bf54      	ite	pl
 c0232da:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0232de:	6812      	ldrmi	r2, [r2, #0]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c0232e0:	491c      	ldr	r1, [pc, #112]	; (c023354 <HAL_RCC_GetSysClockFreq+0x98>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c0232e2:	bf54      	ite	pl
 c0232e4:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0232e8:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 c0232ec:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0232f0:	b113      	cbz	r3, c0232f8 <HAL_RCC_GetSysClockFreq+0x3c>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0232f2:	2b0c      	cmp	r3, #12
 c0232f4:	d009      	beq.n	c02330a <HAL_RCC_GetSysClockFreq+0x4e>
 c0232f6:	2000      	movs	r0, #0
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
    sysclockfreq = pllvco / pllr;
  }

  return sysclockfreq;
}
 c0232f8:	4770      	bx	lr
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c0232fa:	2b04      	cmp	r3, #4
 c0232fc:	d026      	beq.n	c02334c <HAL_RCC_GetSysClockFreq+0x90>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c0232fe:	2b08      	cmp	r3, #8
 c023300:	4815      	ldr	r0, [pc, #84]	; (c023358 <HAL_RCC_GetSysClockFreq+0x9c>)
 c023302:	bf18      	it	ne
 c023304:	2000      	movne	r0, #0
 c023306:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c023308:	2000      	movs	r0, #0
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c02330a:	4a11      	ldr	r2, [pc, #68]	; (c023350 <HAL_RCC_GetSysClockFreq+0x94>)
 c02330c:	68d1      	ldr	r1, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c02330e:	68d3      	ldr	r3, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c023310:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c023314:	f3c3 1303 	ubfx	r3, r3, #4, #4
    switch (pllsource)
 c023318:	2902      	cmp	r1, #2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c02331a:	f103 0301 	add.w	r3, r3, #1
    switch (pllsource)
 c02331e:	d005      	beq.n	c02332c <HAL_RCC_GetSysClockFreq+0x70>
 c023320:	2903      	cmp	r1, #3
 c023322:	d003      	beq.n	c02332c <HAL_RCC_GetSysClockFreq+0x70>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c023324:	68d2      	ldr	r2, [r2, #12]
 c023326:	f3c2 2206 	ubfx	r2, r2, #8, #7
 c02332a:	e003      	b.n	c023334 <HAL_RCC_GetSysClockFreq+0x78>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c02332c:	68d2      	ldr	r2, [r2, #12]
 c02332e:	480a      	ldr	r0, [pc, #40]	; (c023358 <HAL_RCC_GetSysClockFreq+0x9c>)
 c023330:	f3c2 2206 	ubfx	r2, r2, #8, #7
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c023334:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c023338:	4b05      	ldr	r3, [pc, #20]	; (c023350 <HAL_RCC_GetSysClockFreq+0x94>)
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c02333a:	4350      	muls	r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c02333c:	68db      	ldr	r3, [r3, #12]
 c02333e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 c023342:	3301      	adds	r3, #1
 c023344:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 c023346:	fbb0 f0f3 	udiv	r0, r0, r3
 c02334a:	4770      	bx	lr
 c02334c:	4802      	ldr	r0, [pc, #8]	; (c023358 <HAL_RCC_GetSysClockFreq+0x9c>)
 c02334e:	4770      	bx	lr
 c023350:	50021000 	.word	0x50021000
 c023354:	0c035024 	.word	0x0c035024
 c023358:	00f42400 	.word	0x00f42400

0c02335c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c02335c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c02335e:	f7ff ffad 	bl	c0232bc <HAL_RCC_GetSysClockFreq>
 c023362:	4b04      	ldr	r3, [pc, #16]	; (c023374 <HAL_RCC_GetHCLKFreq+0x18>)
 c023364:	4a04      	ldr	r2, [pc, #16]	; (c023378 <HAL_RCC_GetHCLKFreq+0x1c>)
 c023366:	689b      	ldr	r3, [r3, #8]
 c023368:	f3c3 1303 	ubfx	r3, r3, #4, #4
 c02336c:	5cd3      	ldrb	r3, [r2, r3]
}
 c02336e:	40d8      	lsrs	r0, r3
 c023370:	bd08      	pop	{r3, pc}
 c023372:	bf00      	nop
 c023374:	50021000 	.word	0x50021000
 c023378:	0c03500c 	.word	0x0c03500c

0c02337c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c02337c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c02337e:	f7ff ffed 	bl	c02335c <HAL_RCC_GetHCLKFreq>
 c023382:	4b04      	ldr	r3, [pc, #16]	; (c023394 <HAL_RCC_GetPCLK1Freq+0x18>)
 c023384:	4a04      	ldr	r2, [pc, #16]	; (c023398 <HAL_RCC_GetPCLK1Freq+0x1c>)
 c023386:	689b      	ldr	r3, [r3, #8]
 c023388:	f3c3 2302 	ubfx	r3, r3, #8, #3
 c02338c:	5cd3      	ldrb	r3, [r2, r3]
}
 c02338e:	40d8      	lsrs	r0, r3
 c023390:	bd08      	pop	{r3, pc}
 c023392:	bf00      	nop
 c023394:	50021000 	.word	0x50021000
 c023398:	0c03501c 	.word	0x0c03501c

0c02339c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c02339c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c02339e:	f7ff ffdd 	bl	c02335c <HAL_RCC_GetHCLKFreq>
 c0233a2:	4b04      	ldr	r3, [pc, #16]	; (c0233b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 c0233a4:	4a04      	ldr	r2, [pc, #16]	; (c0233b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 c0233a6:	689b      	ldr	r3, [r3, #8]
 c0233a8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 c0233ac:	5cd3      	ldrb	r3, [r2, r3]
}
 c0233ae:	40d8      	lsrs	r0, r3
 c0233b0:	bd08      	pop	{r3, pc}
 c0233b2:	bf00      	nop
 c0233b4:	50021000 	.word	0x50021000
 c0233b8:	0c03501c 	.word	0x0c03501c

0c0233bc <HAL_RNG_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 c0233bc:	4770      	bx	lr
	...

0c0233c0 <HAL_RNG_Init>:
{
 c0233c0:	b538      	push	{r3, r4, r5, lr}
  if (hrng == NULL)
 c0233c2:	4604      	mov	r4, r0
 c0233c4:	2800      	cmp	r0, #0
 c0233c6:	d030      	beq.n	c02342a <HAL_RNG_Init+0x6a>
  if (hrng->State == HAL_RNG_STATE_RESET)
 c0233c8:	7a43      	ldrb	r3, [r0, #9]
 c0233ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 c0233ce:	b913      	cbnz	r3, c0233d6 <HAL_RNG_Init+0x16>
    hrng->Lock = HAL_UNLOCKED;
 c0233d0:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 c0233d2:	f7ff fff3 	bl	c0233bc <HAL_RNG_MspInit>
  hrng->State = HAL_RNG_STATE_BUSY;
 c0233d6:	2302      	movs	r3, #2
 c0233d8:	7263      	strb	r3, [r4, #9]
  __HAL_RNG_DISABLE(hrng);
 c0233da:	6823      	ldr	r3, [r4, #0]
 c0233dc:	681a      	ldr	r2, [r3, #0]
 c0233de:	f022 0204 	bic.w	r2, r2, #4
 c0233e2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 c0233e4:	6819      	ldr	r1, [r3, #0]
 c0233e6:	6862      	ldr	r2, [r4, #4]
 c0233e8:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 c0233ec:	f021 0120 	bic.w	r1, r1, #32
 c0233f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 c0233f4:	430a      	orrs	r2, r1
 c0233f6:	601a      	str	r2, [r3, #0]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 c0233f8:	4a21      	ldr	r2, [pc, #132]	; (c023480 <HAL_RNG_Init+0xc0>)
 c0233fa:	611a      	str	r2, [r3, #16]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 c0233fc:	f24a 22b3 	movw	r2, #41651	; 0xa2b3
 c023400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 c023402:	681a      	ldr	r2, [r3, #0]
 c023404:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 c023408:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 c02340a:	f7fd ff4b 	bl	c0212a4 <HAL_GetTick>
 c02340e:	4605      	mov	r5, r0
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 c023410:	6823      	ldr	r3, [r4, #0]
 c023412:	681a      	ldr	r2, [r3, #0]
 c023414:	0051      	lsls	r1, r2, #1
 c023416:	d40a      	bmi.n	c02342e <HAL_RNG_Init+0x6e>
  __HAL_RNG_ENABLE(hrng);
 c023418:	681a      	ldr	r2, [r3, #0]
 c02341a:	f042 0204 	orr.w	r2, r2, #4
 c02341e:	601a      	str	r2, [r3, #0]
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 c023420:	685b      	ldr	r3, [r3, #4]
 c023422:	065a      	lsls	r2, r3, #25
 c023424:	d511      	bpl.n	c02344a <HAL_RNG_Init+0x8a>
    hrng->State = HAL_RNG_STATE_ERROR;
 c023426:	2304      	movs	r3, #4
 c023428:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 c02342a:	2001      	movs	r0, #1
 c02342c:	e00c      	b.n	c023448 <HAL_RNG_Init+0x88>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 c02342e:	f7fd ff39 	bl	c0212a4 <HAL_GetTick>
 c023432:	1b40      	subs	r0, r0, r5
 c023434:	2802      	cmp	r0, #2
 c023436:	d9eb      	bls.n	c023410 <HAL_RNG_Init+0x50>
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 c023438:	6823      	ldr	r3, [r4, #0]
 c02343a:	681b      	ldr	r3, [r3, #0]
 c02343c:	0058      	lsls	r0, r3, #1
 c02343e:	d5e7      	bpl.n	c023410 <HAL_RNG_Init+0x50>
        hrng->State = HAL_RNG_STATE_READY;
 c023440:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c023442:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_READY;
 c023444:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c023446:	60e3      	str	r3, [r4, #12]
}
 c023448:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 c02344a:	f7fd ff2b 	bl	c0212a4 <HAL_GetTick>
 c02344e:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 c023450:	6823      	ldr	r3, [r4, #0]
 c023452:	6858      	ldr	r0, [r3, #4]
 c023454:	f010 0004 	ands.w	r0, r0, #4
 c023458:	d103      	bne.n	c023462 <HAL_RNG_Init+0xa2>
  hrng->State = HAL_RNG_STATE_READY;
 c02345a:	2301      	movs	r3, #1
 c02345c:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 c02345e:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 c023460:	e7f2      	b.n	c023448 <HAL_RNG_Init+0x88>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 c023462:	f7fd ff1f 	bl	c0212a4 <HAL_GetTick>
 c023466:	1b40      	subs	r0, r0, r5
 c023468:	2802      	cmp	r0, #2
 c02346a:	d9f1      	bls.n	c023450 <HAL_RNG_Init+0x90>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 c02346c:	6823      	ldr	r3, [r4, #0]
 c02346e:	685b      	ldr	r3, [r3, #4]
 c023470:	075b      	lsls	r3, r3, #29
 c023472:	d5ed      	bpl.n	c023450 <HAL_RNG_Init+0x90>
        hrng->State = HAL_RNG_STATE_ERROR;
 c023474:	2304      	movs	r3, #4
 c023476:	7263      	strb	r3, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c023478:	2302      	movs	r3, #2
 c02347a:	60e3      	str	r3, [r4, #12]
 c02347c:	e7d5      	b.n	c02342a <HAL_RNG_Init+0x6a>
 c02347e:	bf00      	nop
 c023480:	17590abc 	.word	0x17590abc

0c023484 <HAL_RNG_MspDeInit>:
 c023484:	4770      	bx	lr

0c023486 <HAL_RNG_DeInit>:
{
 c023486:	b570      	push	{r4, r5, r6, lr}
  if (hrng == NULL)
 c023488:	4605      	mov	r5, r0
 c02348a:	2800      	cmp	r0, #0
 c02348c:	d034      	beq.n	c0234f8 <HAL_RNG_DeInit+0x72>
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, RNG_CED_ENABLE | RNG_CR_CONDRST);
 c02348e:	6802      	ldr	r2, [r0, #0]
 c023490:	6813      	ldr	r3, [r2, #0]
 c023492:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 c023496:	f023 0320 	bic.w	r3, r3, #32
 c02349a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 c02349e:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 c0234a0:	6813      	ldr	r3, [r2, #0]
 c0234a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 c0234a6:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 c0234a8:	f7fd fefc 	bl	c0212a4 <HAL_GetTick>
 c0234ac:	4606      	mov	r6, r0
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 c0234ae:	682b      	ldr	r3, [r5, #0]
 c0234b0:	681c      	ldr	r4, [r3, #0]
 c0234b2:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 c0234b6:	d10f      	bne.n	c0234d8 <HAL_RNG_DeInit+0x52>
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 c0234b8:	681a      	ldr	r2, [r3, #0]
  HAL_RNG_MspDeInit(hrng);
 c0234ba:	4628      	mov	r0, r5
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 c0234bc:	f022 020c 	bic.w	r2, r2, #12
 c0234c0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 c0234c2:	685a      	ldr	r2, [r3, #4]
 c0234c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 c0234c8:	605a      	str	r2, [r3, #4]
  HAL_RNG_MspDeInit(hrng);
 c0234ca:	f7ff ffdb 	bl	c023484 <HAL_RNG_MspDeInit>
  hrng->State = HAL_RNG_STATE_RESET;
 c0234ce:	726c      	strb	r4, [r5, #9]
  __HAL_UNLOCK(hrng);
 c0234d0:	722c      	strb	r4, [r5, #8]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 c0234d2:	60ec      	str	r4, [r5, #12]
  return HAL_OK;
 c0234d4:	4620      	mov	r0, r4
 c0234d6:	e00e      	b.n	c0234f6 <HAL_RNG_DeInit+0x70>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 c0234d8:	f7fd fee4 	bl	c0212a4 <HAL_GetTick>
 c0234dc:	1b80      	subs	r0, r0, r6
 c0234de:	2802      	cmp	r0, #2
 c0234e0:	d9e5      	bls.n	c0234ae <HAL_RNG_DeInit+0x28>
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 c0234e2:	682b      	ldr	r3, [r5, #0]
 c0234e4:	681b      	ldr	r3, [r3, #0]
 c0234e6:	005b      	lsls	r3, r3, #1
 c0234e8:	d5e1      	bpl.n	c0234ae <HAL_RNG_DeInit+0x28>
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c0234ea:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_READY;
 c0234ec:	2001      	movs	r0, #1
 c0234ee:	7268      	strb	r0, [r5, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c0234f0:	60eb      	str	r3, [r5, #12]
        __HAL_UNLOCK(hrng);
 c0234f2:	2300      	movs	r3, #0
 c0234f4:	722b      	strb	r3, [r5, #8]
}
 c0234f6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 c0234f8:	2001      	movs	r0, #1
 c0234fa:	e7fc      	b.n	c0234f6 <HAL_RNG_DeInit+0x70>

0c0234fc <HAL_RNG_ErrorCallback>:
 c0234fc:	4770      	bx	lr

0c0234fe <RNG_RecoverSeedError>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
  __IO uint32_t count = 0U;
 c0234fe:	2300      	movs	r3, #0
{
 c023500:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t count = 0U;
 c023502:	9301      	str	r3, [sp, #4]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 c023504:	6803      	ldr	r3, [r0, #0]
 c023506:	685a      	ldr	r2, [r3, #4]
 c023508:	0752      	lsls	r2, r2, #29
 c02350a:	d409      	bmi.n	c023520 <RNG_RecoverSeedError+0x22>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 c02350c:	685a      	ldr	r2, [r3, #4]
 c02350e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c023512:	605a      	str	r2, [r3, #4]
      }
    }
    while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 c023514:	68c3      	ldr	r3, [r0, #12]
 c023516:	f023 0308 	bic.w	r3, r3, #8
 c02351a:	60c3      	str	r3, [r0, #12]
  return HAL_OK;
 c02351c:	2000      	movs	r0, #0
 c02351e:	e018      	b.n	c023552 <RNG_RecoverSeedError+0x54>
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 c023520:	681a      	ldr	r2, [r3, #0]
 c023522:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 c023526:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 c023528:	681a      	ldr	r2, [r3, #0]
 c02352a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 c02352e:	601a      	str	r2, [r3, #0]
    count = RNG_TIMEOUT_VALUE;
 c023530:	2202      	movs	r2, #2
 c023532:	9201      	str	r2, [sp, #4]
      count-- ;
 c023534:	9a01      	ldr	r2, [sp, #4]
 c023536:	3a01      	subs	r2, #1
 c023538:	9201      	str	r2, [sp, #4]
      if (count == 0U)
 c02353a:	9a01      	ldr	r2, [sp, #4]
 c02353c:	b95a      	cbnz	r2, c023556 <RNG_RecoverSeedError+0x58>
        hrng->State = HAL_RNG_STATE_READY;
 c02353e:	2401      	movs	r4, #1
 c023540:	7244      	strb	r4, [r0, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 c023542:	68c3      	ldr	r3, [r0, #12]
        __HAL_UNLOCK(hrng);
 c023544:	7202      	strb	r2, [r0, #8]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 c023546:	f043 0302 	orr.w	r3, r3, #2
 c02354a:	60c3      	str	r3, [r0, #12]
        HAL_RNG_ErrorCallback(hrng);
 c02354c:	f7ff ffd6 	bl	c0234fc <HAL_RNG_ErrorCallback>
        return HAL_ERROR;
 c023550:	4620      	mov	r0, r4
}
 c023552:	b002      	add	sp, #8
 c023554:	bd10      	pop	{r4, pc}
    while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 c023556:	681a      	ldr	r2, [r3, #0]
 c023558:	0054      	lsls	r4, r2, #1
 c02355a:	d4eb      	bmi.n	c023534 <RNG_RecoverSeedError+0x36>
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 c02355c:	685a      	ldr	r2, [r3, #4]
 c02355e:	0651      	lsls	r1, r2, #25
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 c023560:	bf42      	ittt	mi
 c023562:	685a      	ldrmi	r2, [r3, #4]
 c023564:	f022 0240 	bicmi.w	r2, r2, #64	; 0x40
 c023568:	605a      	strmi	r2, [r3, #4]
    count = RNG_TIMEOUT_VALUE;
 c02356a:	2202      	movs	r2, #2
 c02356c:	9201      	str	r2, [sp, #4]
      count-- ;
 c02356e:	9a01      	ldr	r2, [sp, #4]
 c023570:	3a01      	subs	r2, #1
 c023572:	9201      	str	r2, [sp, #4]
      if (count == 0U)
 c023574:	9a01      	ldr	r2, [sp, #4]
 c023576:	2a00      	cmp	r2, #0
 c023578:	d0e1      	beq.n	c02353e <RNG_RecoverSeedError+0x40>
    while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 c02357a:	685a      	ldr	r2, [r3, #4]
 c02357c:	0752      	lsls	r2, r2, #29
 c02357e:	d4f6      	bmi.n	c02356e <RNG_RecoverSeedError+0x70>
 c023580:	e7c8      	b.n	c023514 <RNG_RecoverSeedError+0x16>

0c023582 <HAL_RNG_GenerateRandomNumber>:
{
 c023582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrng);
 c023584:	7a03      	ldrb	r3, [r0, #8]
{
 c023586:	4605      	mov	r5, r0
  __HAL_LOCK(hrng);
 c023588:	2b01      	cmp	r3, #1
{
 c02358a:	460e      	mov	r6, r1
  __HAL_LOCK(hrng);
 c02358c:	d03e      	beq.n	c02360c <HAL_RNG_GenerateRandomNumber+0x8a>
 c02358e:	2401      	movs	r4, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 c023590:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 c023592:	7204      	strb	r4, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 c023594:	42a3      	cmp	r3, r4
 c023596:	d136      	bne.n	c023606 <HAL_RNG_GenerateRandomNumber+0x84>
    hrng->State = HAL_RNG_STATE_BUSY;
 c023598:	2302      	movs	r3, #2
 c02359a:	7243      	strb	r3, [r0, #9]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 c02359c:	6803      	ldr	r3, [r0, #0]
 c02359e:	685c      	ldr	r4, [r3, #4]
 c0235a0:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 c0235a4:	d006      	beq.n	c0235b4 <HAL_RNG_GenerateRandomNumber+0x32>
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 c0235a6:	2308      	movs	r3, #8
 c0235a8:	60c3      	str	r3, [r0, #12]
      status = RNG_RecoverSeedError(hrng);
 c0235aa:	f7ff ffa8 	bl	c0234fe <RNG_RecoverSeedError>
      if (status == HAL_ERROR)
 c0235ae:	2801      	cmp	r0, #1
      status = RNG_RecoverSeedError(hrng);
 c0235b0:	4604      	mov	r4, r0
      if (status == HAL_ERROR)
 c0235b2:	d026      	beq.n	c023602 <HAL_RNG_GenerateRandomNumber+0x80>
    tickstart = HAL_GetTick();
 c0235b4:	f7fd fe76 	bl	c0212a4 <HAL_GetTick>
 c0235b8:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 c0235ba:	682b      	ldr	r3, [r5, #0]
 c0235bc:	685a      	ldr	r2, [r3, #4]
 c0235be:	07d0      	lsls	r0, r2, #31
 c0235c0:	d510      	bpl.n	c0235e4 <HAL_RNG_GenerateRandomNumber+0x62>
    hrng->RandomNumber = hrng->Instance->DR;
 c0235c2:	689a      	ldr	r2, [r3, #8]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 c0235c4:	6859      	ldr	r1, [r3, #4]
    hrng->RandomNumber = hrng->Instance->DR;
 c0235c6:	612a      	str	r2, [r5, #16]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 c0235c8:	0649      	lsls	r1, r1, #25
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 c0235ca:	bf43      	ittte	mi
 c0235cc:	2208      	movmi	r2, #8
 c0235ce:	60ea      	strmi	r2, [r5, #12]
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 c0235d0:	685a      	ldrmi	r2, [r3, #4]
      *random32bit = hrng->RandomNumber;
 c0235d2:	6032      	strpl	r2, [r6, #0]
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 c0235d4:	bf44      	itt	mi
 c0235d6:	f022 0201 	bicmi.w	r2, r2, #1
 c0235da:	605a      	strmi	r2, [r3, #4]
    hrng->State = HAL_RNG_STATE_READY;
 c0235dc:	2301      	movs	r3, #1
 c0235de:	726b      	strb	r3, [r5, #9]
  __HAL_UNLOCK(hrng);
 c0235e0:	2300      	movs	r3, #0
 c0235e2:	e00d      	b.n	c023600 <HAL_RNG_GenerateRandomNumber+0x7e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 c0235e4:	f7fd fe5e 	bl	c0212a4 <HAL_GetTick>
 c0235e8:	1bc0      	subs	r0, r0, r7
 c0235ea:	2802      	cmp	r0, #2
 c0235ec:	d9e5      	bls.n	c0235ba <HAL_RNG_GenerateRandomNumber+0x38>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 c0235ee:	682b      	ldr	r3, [r5, #0]
 c0235f0:	685b      	ldr	r3, [r3, #4]
 c0235f2:	f013 0301 	ands.w	r3, r3, #1
 c0235f6:	d1e0      	bne.n	c0235ba <HAL_RNG_GenerateRandomNumber+0x38>
          hrng->State = HAL_RNG_STATE_READY;
 c0235f8:	2401      	movs	r4, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c0235fa:	2202      	movs	r2, #2
          hrng->State = HAL_RNG_STATE_READY;
 c0235fc:	726c      	strb	r4, [r5, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c0235fe:	60ea      	str	r2, [r5, #12]
  __HAL_UNLOCK(hrng);
 c023600:	722b      	strb	r3, [r5, #8]
}
 c023602:	4620      	mov	r0, r4
 c023604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 c023606:	2304      	movs	r3, #4
 c023608:	60c3      	str	r3, [r0, #12]
 c02360a:	e7e9      	b.n	c0235e0 <HAL_RNG_GenerateRandomNumber+0x5e>
  __HAL_LOCK(hrng);
 c02360c:	2402      	movs	r4, #2
 c02360e:	e7f8      	b.n	c023602 <HAL_RNG_GenerateRandomNumber+0x80>

0c023610 <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 c023610:	4770      	bx	lr

0c023612 <HAL_UART_RxCpltCallback>:
 c023612:	4770      	bx	lr

0c023614 <HAL_UART_ErrorCallback>:
 c023614:	4770      	bx	lr

0c023616 <HAL_UARTEx_RxEventCallback>:
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 c023616:	4770      	bx	lr

0c023618 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c023618:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 c02361c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c02361e:	2a22      	cmp	r2, #34	; 0x22
{
 c023620:	4604      	mov	r4, r0
 c023622:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c023624:	d130      	bne.n	c023688 <UART_RxISR_8BIT+0x70>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 c023626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 c023628:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
 c02362c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 c02362e:	400b      	ands	r3, r1
 c023630:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 c023632:	6d83      	ldr	r3, [r0, #88]	; 0x58
 c023634:	3301      	adds	r3, #1
 c023636:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 c023638:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 c02363c:	3b01      	subs	r3, #1
 c02363e:	b29b      	uxth	r3, r3
 c023640:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 c023644:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 c023648:	b292      	uxth	r2, r2
 c02364a:	b9ca      	cbnz	r2, c023680 <UART_RxISR_8BIT+0x68>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c02364c:	6803      	ldr	r3, [r0, #0]
 c02364e:	6819      	ldr	r1, [r3, #0]
 c023650:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 c023654:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c023656:	6899      	ldr	r1, [r3, #8]
 c023658:	f021 0101 	bic.w	r1, r1, #1
 c02365c:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 c02365e:	2120      	movs	r1, #32
 c023660:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 c023664:	6702      	str	r2, [r0, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 c023666:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 c023668:	2a01      	cmp	r2, #1
 c02366a:	d10a      	bne.n	c023682 <UART_RxISR_8BIT+0x6a>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c02366c:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 c02366e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c023672:	f022 0210 	bic.w	r2, r2, #16
 c023676:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 c023678:	f7ff ffcd 	bl	c023616 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c02367c:	2300      	movs	r3, #0
 c02367e:	66e3      	str	r3, [r4, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 c023680:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 c023682:	f7ff ffc6 	bl	c023612 <HAL_UART_RxCpltCallback>
 c023686:	e7f9      	b.n	c02367c <UART_RxISR_8BIT+0x64>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 c023688:	699a      	ldr	r2, [r3, #24]
 c02368a:	f042 0208 	orr.w	r2, r2, #8
 c02368e:	619a      	str	r2, [r3, #24]
}
 c023690:	e7f6      	b.n	c023680 <UART_RxISR_8BIT+0x68>

0c023692 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c023692:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 c023696:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c023698:	2a22      	cmp	r2, #34	; 0x22
{
 c02369a:	4604      	mov	r4, r0
 c02369c:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c02369e:	d12e      	bne.n	c0236fe <UART_RxISR_16BIT+0x6c>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 c0236a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 c0236a2:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 c0236a6:	4011      	ands	r1, r2
 c0236a8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 c0236aa:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 c0236ae:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 c0236b0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 c0236b4:	3a01      	subs	r2, #1
 c0236b6:	b292      	uxth	r2, r2
 c0236b8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 c0236bc:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 c0236c0:	b292      	uxth	r2, r2
 c0236c2:	b9c2      	cbnz	r2, c0236f6 <UART_RxISR_16BIT+0x64>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c0236c4:	6819      	ldr	r1, [r3, #0]
 c0236c6:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 c0236ca:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c0236cc:	6899      	ldr	r1, [r3, #8]
 c0236ce:	f021 0101 	bic.w	r1, r1, #1
 c0236d2:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 c0236d4:	2120      	movs	r1, #32
 c0236d6:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 c0236da:	6702      	str	r2, [r0, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 c0236dc:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 c0236de:	2a01      	cmp	r2, #1
 c0236e0:	d10a      	bne.n	c0236f8 <UART_RxISR_16BIT+0x66>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c0236e2:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 c0236e4:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c0236e8:	f022 0210 	bic.w	r2, r2, #16
 c0236ec:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 c0236ee:	f7ff ff92 	bl	c023616 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c0236f2:	2300      	movs	r3, #0
 c0236f4:	66e3      	str	r3, [r4, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 c0236f6:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 c0236f8:	f7ff ff8b 	bl	c023612 <HAL_UART_RxCpltCallback>
 c0236fc:	e7f9      	b.n	c0236f2 <UART_RxISR_16BIT+0x60>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 c0236fe:	699a      	ldr	r2, [r3, #24]
 c023700:	f042 0208 	orr.w	r2, r2, #8
 c023704:	619a      	str	r2, [r3, #24]
}
 c023706:	e7f6      	b.n	c0236f6 <UART_RxISR_16BIT+0x64>

0c023708 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 c023708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 c02370c:	6803      	ldr	r3, [r0, #0]
{
 c02370e:	4604      	mov	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 c023710:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 c023712:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 c023716:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c023718:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 c02371c:	2a22      	cmp	r2, #34	; 0x22
 c02371e:	f040 8085 	bne.w	c02382c <UART_RxISR_8BIT_FIFOEN+0x124>
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 c023722:	2700      	movs	r7, #0
  uint16_t  uhMask = huart->Mask;
 c023724:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
    nb_rx_data = huart->NbRxDataToProcess;
 c023728:	f8b0 a068 	ldrh.w	sl, [r0, #104]	; 0x68
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c02372c:	f8df b10c 	ldr.w	fp, [pc, #268]	; c02383c <UART_RxISR_8BIT_FIFOEN+0x134>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 c023730:	f006 0601 	and.w	r6, r6, #1
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 c023734:	f1ba 0f00 	cmp.w	sl, #0
 c023738:	d001      	beq.n	c02373e <UART_RxISR_8BIT_FIFOEN+0x36>
 c02373a:	06ab      	lsls	r3, r5, #26
 c02373c:	d414      	bmi.n	c023768 <UART_RxISR_8BIT_FIFOEN+0x60>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 c02373e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 c023742:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 c023744:	b173      	cbz	r3, c023764 <UART_RxISR_8BIT_FIFOEN+0x5c>
 c023746:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 c02374a:	429a      	cmp	r2, r3
 c02374c:	d90a      	bls.n	c023764 <UART_RxISR_8BIT_FIFOEN+0x5c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 c02374e:	6823      	ldr	r3, [r4, #0]
 c023750:	689a      	ldr	r2, [r3, #8]
 c023752:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 c023756:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 c023758:	4a37      	ldr	r2, [pc, #220]	; (c023838 <UART_RxISR_8BIT_FIFOEN+0x130>)
 c02375a:	6722      	str	r2, [r4, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 c02375c:	681a      	ldr	r2, [r3, #0]
 c02375e:	f042 0220 	orr.w	r2, r2, #32
 c023762:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 c023764:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 c023768:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 c02376a:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 c02376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 c02376e:	ea03 0308 	and.w	r3, r3, r8
 c023772:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 c023774:	6da3      	ldr	r3, [r4, #88]	; 0x58
 c023776:	3301      	adds	r3, #1
 c023778:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 c02377a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 c02377e:	3b01      	subs	r3, #1
 c023780:	b29b      	uxth	r3, r3
 c023782:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 c023786:	6823      	ldr	r3, [r4, #0]
 c023788:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 c02378a:	076a      	lsls	r2, r5, #29
 c02378c:	d02a      	beq.n	c0237e4 <UART_RxISR_8BIT_FIFOEN+0xdc>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 c02378e:	07e8      	lsls	r0, r5, #31
 c023790:	d50a      	bpl.n	c0237a8 <UART_RxISR_8BIT_FIFOEN+0xa0>
 c023792:	f419 7f80 	tst.w	r9, #256	; 0x100
 c023796:	d007      	beq.n	c0237a8 <UART_RxISR_8BIT_FIFOEN+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 c023798:	2201      	movs	r2, #1
 c02379a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 c02379c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 c0237a0:	f042 0201 	orr.w	r2, r2, #1
 c0237a4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 c0237a8:	07a9      	lsls	r1, r5, #30
 c0237aa:	d508      	bpl.n	c0237be <UART_RxISR_8BIT_FIFOEN+0xb6>
 c0237ac:	b13e      	cbz	r6, c0237be <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 c0237ae:	2202      	movs	r2, #2
 c0237b0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 c0237b2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 c0237b6:	f042 0204 	orr.w	r2, r2, #4
 c0237ba:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 c0237be:	076a      	lsls	r2, r5, #29
 c0237c0:	d508      	bpl.n	c0237d4 <UART_RxISR_8BIT_FIFOEN+0xcc>
 c0237c2:	b13e      	cbz	r6, c0237d4 <UART_RxISR_8BIT_FIFOEN+0xcc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 c0237c4:	2204      	movs	r2, #4
 c0237c6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 c0237c8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 c0237cc:	f043 0302 	orr.w	r3, r3, #2
 c0237d0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 c0237d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 c0237d8:	b123      	cbz	r3, c0237e4 <UART_RxISR_8BIT_FIFOEN+0xdc>
          HAL_UART_ErrorCallback(huart);
 c0237da:	4620      	mov	r0, r4
 c0237dc:	f7ff ff1a 	bl	c023614 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0237e0:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 c0237e4:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 c0237e8:	b292      	uxth	r2, r2
 c0237ea:	2a00      	cmp	r2, #0
 c0237ec:	d1a2      	bne.n	c023734 <UART_RxISR_8BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 c0237ee:	6823      	ldr	r3, [r4, #0]
 c0237f0:	6819      	ldr	r1, [r3, #0]
 c0237f2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 c0237f6:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c0237f8:	6899      	ldr	r1, [r3, #8]
 c0237fa:	ea01 010b 	and.w	r1, r1, fp
 c0237fe:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 c023800:	2120      	movs	r1, #32
 c023802:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 c023806:	6722      	str	r2, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 c023808:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 c02380a:	2a01      	cmp	r2, #1
 c02380c:	d10a      	bne.n	c023824 <UART_RxISR_8BIT_FIFOEN+0x11c>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c02380e:	681a      	ldr	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 c023810:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c023814:	f022 0210 	bic.w	r2, r2, #16
 c023818:	601a      	str	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 c02381a:	4620      	mov	r0, r4
 c02381c:	f7ff fefb 	bl	c023616 <HAL_UARTEx_RxEventCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c023820:	66e7      	str	r7, [r4, #108]	; 0x6c
 c023822:	e787      	b.n	c023734 <UART_RxISR_8BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 c023824:	4620      	mov	r0, r4
 c023826:	f7ff fef4 	bl	c023612 <HAL_UART_RxCpltCallback>
 c02382a:	e7f9      	b.n	c023820 <UART_RxISR_8BIT_FIFOEN+0x118>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 c02382c:	699a      	ldr	r2, [r3, #24]
 c02382e:	f042 0208 	orr.w	r2, r2, #8
 c023832:	619a      	str	r2, [r3, #24]
}
 c023834:	e796      	b.n	c023764 <UART_RxISR_8BIT_FIFOEN+0x5c>
 c023836:	bf00      	nop
 c023838:	0c023619 	.word	0x0c023619
 c02383c:	effffffe 	.word	0xeffffffe

0c023840 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 c023840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 c023844:	6803      	ldr	r3, [r0, #0]
{
 c023846:	4604      	mov	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 c023848:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 c02384a:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 c02384e:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c023850:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 c023854:	2a22      	cmp	r2, #34	; 0x22
 c023856:	f040 8083 	bne.w	c023960 <UART_RxISR_16BIT_FIFOEN+0x120>
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 c02385a:	2700      	movs	r7, #0
  uint16_t  uhMask = huart->Mask;
 c02385c:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
    nb_rx_data = huart->NbRxDataToProcess;
 c023860:	f8b0 a068 	ldrh.w	sl, [r0, #104]	; 0x68
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c023864:	f8df b108 	ldr.w	fp, [pc, #264]	; c023970 <UART_RxISR_16BIT_FIFOEN+0x130>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 c023868:	f006 0601 	and.w	r6, r6, #1
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 c02386c:	f1ba 0f00 	cmp.w	sl, #0
 c023870:	d001      	beq.n	c023876 <UART_RxISR_16BIT_FIFOEN+0x36>
 c023872:	06ab      	lsls	r3, r5, #26
 c023874:	d414      	bmi.n	c0238a0 <UART_RxISR_16BIT_FIFOEN+0x60>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 c023876:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 c02387a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 c02387c:	b173      	cbz	r3, c02389c <UART_RxISR_16BIT_FIFOEN+0x5c>
 c02387e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 c023882:	429a      	cmp	r2, r3
 c023884:	d90a      	bls.n	c02389c <UART_RxISR_16BIT_FIFOEN+0x5c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 c023886:	6823      	ldr	r3, [r4, #0]
 c023888:	689a      	ldr	r2, [r3, #8]
 c02388a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 c02388e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 c023890:	4a36      	ldr	r2, [pc, #216]	; (c02396c <UART_RxISR_16BIT_FIFOEN+0x12c>)
 c023892:	6722      	str	r2, [r4, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 c023894:	681a      	ldr	r2, [r3, #0]
 c023896:	f042 0220 	orr.w	r2, r2, #32
 c02389a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 c02389c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 c0238a0:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 c0238a2:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 c0238a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 c0238a6:	ea08 0101 	and.w	r1, r8, r1
 c0238aa:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 c0238ae:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 c0238b0:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 c0238b4:	3a01      	subs	r2, #1
 c0238b6:	b292      	uxth	r2, r2
 c0238b8:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 c0238bc:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 c0238be:	076a      	lsls	r2, r5, #29
 c0238c0:	d02a      	beq.n	c023918 <UART_RxISR_16BIT_FIFOEN+0xd8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 c0238c2:	07e8      	lsls	r0, r5, #31
 c0238c4:	d50a      	bpl.n	c0238dc <UART_RxISR_16BIT_FIFOEN+0x9c>
 c0238c6:	f419 7f80 	tst.w	r9, #256	; 0x100
 c0238ca:	d007      	beq.n	c0238dc <UART_RxISR_16BIT_FIFOEN+0x9c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 c0238cc:	2201      	movs	r2, #1
 c0238ce:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 c0238d0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 c0238d4:	f042 0201 	orr.w	r2, r2, #1
 c0238d8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 c0238dc:	07a9      	lsls	r1, r5, #30
 c0238de:	d508      	bpl.n	c0238f2 <UART_RxISR_16BIT_FIFOEN+0xb2>
 c0238e0:	b13e      	cbz	r6, c0238f2 <UART_RxISR_16BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 c0238e2:	2202      	movs	r2, #2
 c0238e4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 c0238e6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 c0238ea:	f042 0204 	orr.w	r2, r2, #4
 c0238ee:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 c0238f2:	076a      	lsls	r2, r5, #29
 c0238f4:	d508      	bpl.n	c023908 <UART_RxISR_16BIT_FIFOEN+0xc8>
 c0238f6:	b13e      	cbz	r6, c023908 <UART_RxISR_16BIT_FIFOEN+0xc8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 c0238f8:	2204      	movs	r2, #4
 c0238fa:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 c0238fc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 c023900:	f043 0302 	orr.w	r3, r3, #2
 c023904:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 c023908:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 c02390c:	b123      	cbz	r3, c023918 <UART_RxISR_16BIT_FIFOEN+0xd8>
          HAL_UART_ErrorCallback(huart);
 c02390e:	4620      	mov	r0, r4
 c023910:	f7ff fe80 	bl	c023614 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 c023914:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 c023918:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 c02391c:	b292      	uxth	r2, r2
 c02391e:	2a00      	cmp	r2, #0
 c023920:	d1a4      	bne.n	c02386c <UART_RxISR_16BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 c023922:	6823      	ldr	r3, [r4, #0]
 c023924:	6819      	ldr	r1, [r3, #0]
 c023926:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 c02392a:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c02392c:	6899      	ldr	r1, [r3, #8]
 c02392e:	ea01 010b 	and.w	r1, r1, fp
 c023932:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 c023934:	2120      	movs	r1, #32
 c023936:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 c02393a:	6722      	str	r2, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 c02393c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 c02393e:	2a01      	cmp	r2, #1
 c023940:	d10a      	bne.n	c023958 <UART_RxISR_16BIT_FIFOEN+0x118>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c023942:	681a      	ldr	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 c023944:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c023948:	f022 0210 	bic.w	r2, r2, #16
 c02394c:	601a      	str	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 c02394e:	4620      	mov	r0, r4
 c023950:	f7ff fe61 	bl	c023616 <HAL_UARTEx_RxEventCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c023954:	66e7      	str	r7, [r4, #108]	; 0x6c
 c023956:	e789      	b.n	c02386c <UART_RxISR_16BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 c023958:	4620      	mov	r0, r4
 c02395a:	f7ff fe5a 	bl	c023612 <HAL_UART_RxCpltCallback>
 c02395e:	e7f9      	b.n	c023954 <UART_RxISR_16BIT_FIFOEN+0x114>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 c023960:	699a      	ldr	r2, [r3, #24]
 c023962:	f042 0208 	orr.w	r2, r2, #8
 c023966:	619a      	str	r2, [r3, #24]
}
 c023968:	e798      	b.n	c02389c <UART_RxISR_16BIT_FIFOEN+0x5c>
 c02396a:	bf00      	nop
 c02396c:	0c023693 	.word	0x0c023693
 c023970:	effffffe 	.word	0xeffffffe

0c023974 <UART_SetConfig>:
{
 c023974:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 c023978:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c02397a:	6921      	ldr	r1, [r4, #16]
 c02397c:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 c02397e:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c023980:	430a      	orrs	r2, r1
 c023982:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c023984:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c023986:	69c0      	ldr	r0, [r0, #28]
 c023988:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c02398a:	49a6      	ldr	r1, [pc, #664]	; (c023c24 <UART_SetConfig+0x2b0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c02398c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c02398e:	4029      	ands	r1, r5
 c023990:	430a      	orrs	r2, r1
 c023992:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c023994:	685a      	ldr	r2, [r3, #4]
 c023996:	68e1      	ldr	r1, [r4, #12]
 c023998:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 c02399c:	430a      	orrs	r2, r1
 c02399e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c0239a0:	4aa1      	ldr	r2, [pc, #644]	; (c023c28 <UART_SetConfig+0x2b4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c0239a2:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c0239a4:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 c0239a6:	bf1c      	itt	ne
 c0239a8:	6a22      	ldrne	r2, [r4, #32]
 c0239aa:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c0239ac:	689a      	ldr	r2, [r3, #8]
 c0239ae:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 c0239b2:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 c0239b6:	430a      	orrs	r2, r1
 c0239b8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c0239ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c0239bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 c0239be:	f022 020f 	bic.w	r2, r2, #15
 c0239c2:	430a      	orrs	r2, r1
 c0239c4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 c0239c6:	4a99      	ldr	r2, [pc, #612]	; (c023c2c <UART_SetConfig+0x2b8>)
 c0239c8:	4293      	cmp	r3, r2
 c0239ca:	d117      	bne.n	c0239fc <UART_SetConfig+0x88>
 c0239cc:	4b98      	ldr	r3, [pc, #608]	; (c023c30 <UART_SetConfig+0x2bc>)
 c0239ce:	4a99      	ldr	r2, [pc, #612]	; (c023c34 <UART_SetConfig+0x2c0>)
 c0239d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0239d4:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c0239d8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 c0239dc:	5cd3      	ldrb	r3, [r2, r3]
 c0239de:	f040 80a8 	bne.w	c023b32 <UART_SetConfig+0x1be>
    switch (clocksource)
 c0239e2:	2b08      	cmp	r3, #8
 c0239e4:	d839      	bhi.n	c023a5a <UART_SetConfig+0xe6>
 c0239e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 c0239ea:	00fa      	.short	0x00fa
 c0239ec:	00a2009c 	.word	0x00a2009c
 c0239f0:	00ee0038 	.word	0x00ee0038
 c0239f4:	00380038 	.word	0x00380038
 c0239f8:	009f0038 	.word	0x009f0038
  UART_GETCLOCKSOURCE(huart, clocksource);
 c0239fc:	4a8e      	ldr	r2, [pc, #568]	; (c023c38 <UART_SetConfig+0x2c4>)
 c0239fe:	4293      	cmp	r3, r2
 c023a00:	d106      	bne.n	c023a10 <UART_SetConfig+0x9c>
 c023a02:	4b8b      	ldr	r3, [pc, #556]	; (c023c30 <UART_SetConfig+0x2bc>)
 c023a04:	4a8d      	ldr	r2, [pc, #564]	; (c023c3c <UART_SetConfig+0x2c8>)
 c023a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c023a0a:	f003 030c 	and.w	r3, r3, #12
 c023a0e:	e7e3      	b.n	c0239d8 <UART_SetConfig+0x64>
 c023a10:	4a8b      	ldr	r2, [pc, #556]	; (c023c40 <UART_SetConfig+0x2cc>)
 c023a12:	4293      	cmp	r3, r2
 c023a14:	d123      	bne.n	c023a5e <UART_SetConfig+0xea>
 c023a16:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 c023a1a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 c023a1e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 c023a22:	2a10      	cmp	r2, #16
 c023a24:	f000 80c6 	beq.w	c023bb4 <UART_SetConfig+0x240>
 c023a28:	d811      	bhi.n	c023a4e <UART_SetConfig+0xda>
 c023a2a:	b9b2      	cbnz	r2, c023a5a <UART_SetConfig+0xe6>
  if (UART_INSTANCE_LOWPOWER(huart))
 c023a2c:	4a7e      	ldr	r2, [pc, #504]	; (c023c28 <UART_SetConfig+0x2b4>)
 c023a2e:	4293      	cmp	r3, r2
 c023a30:	f040 80d2 	bne.w	c023bd8 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetPCLK1Freq();
 c023a34:	f7ff fca2 	bl	c02337c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 c023a38:	2800      	cmp	r0, #0
 c023a3a:	d149      	bne.n	c023ad0 <UART_SetConfig+0x15c>
 c023a3c:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 c023a3e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 c023a42:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 c023a44:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 c023a46:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
}
 c023a4a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 c023a4e:	2a20      	cmp	r2, #32
 c023a50:	f000 80a2 	beq.w	c023b98 <UART_SetConfig+0x224>
 c023a54:	2a30      	cmp	r2, #48	; 0x30
 c023a56:	f000 80a7 	beq.w	c023ba8 <UART_SetConfig+0x234>
        ret = HAL_ERROR;
 c023a5a:	2001      	movs	r0, #1
 c023a5c:	e7ef      	b.n	c023a3e <UART_SetConfig+0xca>
  UART_GETCLOCKSOURCE(huart, clocksource);
 c023a5e:	4a79      	ldr	r2, [pc, #484]	; (c023c44 <UART_SetConfig+0x2d0>)
 c023a60:	4293      	cmp	r3, r2
 c023a62:	d10e      	bne.n	c023a82 <UART_SetConfig+0x10e>
 c023a64:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 c023a68:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 c023a6c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 c023a70:	2a40      	cmp	r2, #64	; 0x40
 c023a72:	f000 809f 	beq.w	c023bb4 <UART_SetConfig+0x240>
 c023a76:	d9d8      	bls.n	c023a2a <UART_SetConfig+0xb6>
 c023a78:	2a80      	cmp	r2, #128	; 0x80
 c023a7a:	f000 808d 	beq.w	c023b98 <UART_SetConfig+0x224>
 c023a7e:	2ac0      	cmp	r2, #192	; 0xc0
 c023a80:	e7e9      	b.n	c023a56 <UART_SetConfig+0xe2>
 c023a82:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c023a86:	d10f      	bne.n	c023aa8 <UART_SetConfig+0x134>
 c023a88:	4a69      	ldr	r2, [pc, #420]	; (c023c30 <UART_SetConfig+0x2bc>)
 c023a8a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 c023a8e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 c023a92:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 c023a96:	f000 808d 	beq.w	c023bb4 <UART_SetConfig+0x240>
 c023a9a:	d9c6      	bls.n	c023a2a <UART_SetConfig+0xb6>
 c023a9c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 c023aa0:	d07a      	beq.n	c023b98 <UART_SetConfig+0x224>
 c023aa2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 c023aa6:	e7d6      	b.n	c023a56 <UART_SetConfig+0xe2>
 c023aa8:	4a5f      	ldr	r2, [pc, #380]	; (c023c28 <UART_SetConfig+0x2b4>)
 c023aaa:	4293      	cmp	r3, r2
 c023aac:	d1d5      	bne.n	c023a5a <UART_SetConfig+0xe6>
 c023aae:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 c023ab2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 c023ab6:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 c023aba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 c023abe:	d079      	beq.n	c023bb4 <UART_SetConfig+0x240>
 c023ac0:	d9b3      	bls.n	c023a2a <UART_SetConfig+0xb6>
 c023ac2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 c023ac6:	d067      	beq.n	c023b98 <UART_SetConfig+0x224>
 c023ac8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 c023acc:	e7c3      	b.n	c023a56 <UART_SetConfig+0xe2>
        pclk = (uint32_t) HSI_VALUE;
 c023ace:	485e      	ldr	r0, [pc, #376]	; (c023c48 <UART_SetConfig+0x2d4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c023ad0:	4b5e      	ldr	r3, [pc, #376]	; (c023c4c <UART_SetConfig+0x2d8>)
 c023ad2:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c023ad4:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c023ad6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c023ada:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c023ade:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c023ae2:	4299      	cmp	r1, r3
 c023ae4:	d8b9      	bhi.n	c023a5a <UART_SetConfig+0xe6>
 c023ae6:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 c023aea:	d8b6      	bhi.n	c023a5a <UART_SetConfig+0xe6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c023aec:	2300      	movs	r3, #0
 c023aee:	2100      	movs	r1, #0
 c023af0:	f7f8 fba2 	bl	c01c238 <__aeabi_uldivmod>
 c023af4:	020f      	lsls	r7, r1, #8
 c023af6:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 c023afa:	0206      	lsls	r6, r0, #8
 c023afc:	0868      	lsrs	r0, r5, #1
 c023afe:	eb16 0b00 	adds.w	fp, r6, r0
 c023b02:	f147 0c00 	adc.w	ip, r7, #0
 c023b06:	462a      	mov	r2, r5
 c023b08:	2300      	movs	r3, #0
 c023b0a:	4658      	mov	r0, fp
 c023b0c:	4661      	mov	r1, ip
 c023b0e:	f7f8 fb93 	bl	c01c238 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c023b12:	4b4f      	ldr	r3, [pc, #316]	; (c023c50 <UART_SetConfig+0x2dc>)
 c023b14:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c023b18:	429a      	cmp	r2, r3
 c023b1a:	d89e      	bhi.n	c023a5a <UART_SetConfig+0xe6>
        huart->Instance->BRR = usartdiv;
 c023b1c:	6823      	ldr	r3, [r4, #0]
 c023b1e:	60d8      	str	r0, [r3, #12]
 c023b20:	e78c      	b.n	c023a3c <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK2Freq();
 c023b22:	f7ff fc3b 	bl	c02339c <HAL_RCC_GetPCLK2Freq>
        break;
 c023b26:	e05c      	b.n	c023be2 <UART_SetConfig+0x26e>
        pclk = (uint32_t) LSE_VALUE;
 c023b28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 c023b2c:	e05c      	b.n	c023be8 <UART_SetConfig+0x274>
        pclk = (uint32_t) HSI_VALUE;
 c023b2e:	4846      	ldr	r0, [pc, #280]	; (c023c48 <UART_SetConfig+0x2d4>)
 c023b30:	e05a      	b.n	c023be8 <UART_SetConfig+0x274>
    switch (clocksource)
 c023b32:	2b08      	cmp	r3, #8
 c023b34:	d891      	bhi.n	c023a5a <UART_SetConfig+0xe6>
 c023b36:	a201      	add	r2, pc, #4	; (adr r2, c023b3c <UART_SetConfig+0x1c8>)
 c023b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c023b3c:	0c023b61 	.word	0x0c023b61
 c023b40:	0c023b8d 	.word	0x0c023b8d
 c023b44:	0c023ba5 	.word	0x0c023ba5
 c023b48:	0c023a5b 	.word	0x0c023a5b
 c023b4c:	0c023b93 	.word	0x0c023b93
 c023b50:	0c023a5b 	.word	0x0c023a5b
 c023b54:	0c023a5b 	.word	0x0c023a5b
 c023b58:	0c023a5b 	.word	0x0c023a5b
 c023b5c:	0c023bd3 	.word	0x0c023bd3
        pclk = HAL_RCC_GetPCLK1Freq();
 c023b60:	f7ff fc0c 	bl	c02337c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 c023b64:	2800      	cmp	r0, #0
 c023b66:	f43f af69 	beq.w	c023a3c <UART_SetConfig+0xc8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c023b6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 c023b6c:	4a37      	ldr	r2, [pc, #220]	; (c023c4c <UART_SetConfig+0x2d8>)
 c023b6e:	6863      	ldr	r3, [r4, #4]
 c023b70:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 c023b74:	fbb0 f0f2 	udiv	r0, r0, r2
 c023b78:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 c023b7c:	fbb0 f0f3 	udiv	r0, r0, r3
 c023b80:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c023b82:	f1a0 0210 	sub.w	r2, r0, #16
 c023b86:	f64f 73ef 	movw	r3, #65519	; 0xffef
 c023b8a:	e7c5      	b.n	c023b18 <UART_SetConfig+0x1a4>
        pclk = HAL_RCC_GetPCLK2Freq();
 c023b8c:	f7ff fc06 	bl	c02339c <HAL_RCC_GetPCLK2Freq>
        break;
 c023b90:	e7e8      	b.n	c023b64 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 c023b92:	f7ff fb93 	bl	c0232bc <HAL_RCC_GetSysClockFreq>
        break;
 c023b96:	e7e5      	b.n	c023b64 <UART_SetConfig+0x1f0>
  if (UART_INSTANCE_LOWPOWER(huart))
 c023b98:	4a23      	ldr	r2, [pc, #140]	; (c023c28 <UART_SetConfig+0x2b4>)
 c023b9a:	4293      	cmp	r3, r2
 c023b9c:	d097      	beq.n	c023ace <UART_SetConfig+0x15a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c023b9e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 c023ba2:	d0c4      	beq.n	c023b2e <UART_SetConfig+0x1ba>
        pclk = (uint32_t) HSI_VALUE;
 c023ba4:	4828      	ldr	r0, [pc, #160]	; (c023c48 <UART_SetConfig+0x2d4>)
 c023ba6:	e7e0      	b.n	c023b6a <UART_SetConfig+0x1f6>
  if (UART_INSTANCE_LOWPOWER(huart))
 c023ba8:	4a1f      	ldr	r2, [pc, #124]	; (c023c28 <UART_SetConfig+0x2b4>)
 c023baa:	4293      	cmp	r3, r2
 c023bac:	d10e      	bne.n	c023bcc <UART_SetConfig+0x258>
        pclk = (uint32_t) LSE_VALUE;
 c023bae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 c023bb2:	e78d      	b.n	c023ad0 <UART_SetConfig+0x15c>
  if (UART_INSTANCE_LOWPOWER(huart))
 c023bb4:	4a1c      	ldr	r2, [pc, #112]	; (c023c28 <UART_SetConfig+0x2b4>)
 c023bb6:	4293      	cmp	r3, r2
 c023bb8:	d102      	bne.n	c023bc0 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetSysClockFreq();
 c023bba:	f7ff fb7f 	bl	c0232bc <HAL_RCC_GetSysClockFreq>
        break;
 c023bbe:	e73b      	b.n	c023a38 <UART_SetConfig+0xc4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c023bc0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 c023bc4:	d1e5      	bne.n	c023b92 <UART_SetConfig+0x21e>
        pclk = HAL_RCC_GetSysClockFreq();
 c023bc6:	f7ff fb79 	bl	c0232bc <HAL_RCC_GetSysClockFreq>
        break;
 c023bca:	e00a      	b.n	c023be2 <UART_SetConfig+0x26e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c023bcc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 c023bd0:	d00a      	beq.n	c023be8 <UART_SetConfig+0x274>
        pclk = (uint32_t) LSE_VALUE;
 c023bd2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 c023bd6:	e7c8      	b.n	c023b6a <UART_SetConfig+0x1f6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c023bd8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 c023bdc:	d1c0      	bne.n	c023b60 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK1Freq();
 c023bde:	f7ff fbcd 	bl	c02337c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 c023be2:	2800      	cmp	r0, #0
 c023be4:	f43f af2a 	beq.w	c023a3c <UART_SetConfig+0xc8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c023be8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 c023bea:	4b18      	ldr	r3, [pc, #96]	; (c023c4c <UART_SetConfig+0x2d8>)
 c023bec:	6862      	ldr	r2, [r4, #4]
 c023bee:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 c023bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 c023bf6:	0850      	lsrs	r0, r2, #1
 c023bf8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 c023bfc:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c023c00:	f64f 72ef 	movw	r2, #65519	; 0xffef
 c023c04:	b283      	uxth	r3, r0
 c023c06:	f1a3 0110 	sub.w	r1, r3, #16
 c023c0a:	4291      	cmp	r1, r2
 c023c0c:	f63f af25 	bhi.w	c023a5a <UART_SetConfig+0xe6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c023c10:	f020 000f 	bic.w	r0, r0, #15
 c023c14:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 c023c16:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c023c18:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 c023c1c:	4318      	orrs	r0, r3
 c023c1e:	60d0      	str	r0, [r2, #12]
 c023c20:	e70c      	b.n	c023a3c <UART_SetConfig+0xc8>
 c023c22:	bf00      	nop
 c023c24:	cfff69f3 	.word	0xcfff69f3
 c023c28:	50008000 	.word	0x50008000
 c023c2c:	50013800 	.word	0x50013800
 c023c30:	50021000 	.word	0x50021000
 c023c34:	0c0350a8 	.word	0x0c0350a8
 c023c38:	50004400 	.word	0x50004400
 c023c3c:	0c0350ac 	.word	0x0c0350ac
 c023c40:	50004800 	.word	0x50004800
 c023c44:	50004c00 	.word	0x50004c00
 c023c48:	00f42400 	.word	0x00f42400
 c023c4c:	0c0350ba 	.word	0x0c0350ba
 c023c50:	000ffcff 	.word	0x000ffcff

0c023c54 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c023c54:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 c023c56:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c023c58:	07da      	lsls	r2, r3, #31
 c023c5a:	d506      	bpl.n	c023c6a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c023c5c:	6801      	ldr	r1, [r0, #0]
 c023c5e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 c023c60:	684a      	ldr	r2, [r1, #4]
 c023c62:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 c023c66:	4322      	orrs	r2, r4
 c023c68:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c023c6a:	079c      	lsls	r4, r3, #30
 c023c6c:	d506      	bpl.n	c023c7c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c023c6e:	6801      	ldr	r1, [r0, #0]
 c023c70:	6b04      	ldr	r4, [r0, #48]	; 0x30
 c023c72:	684a      	ldr	r2, [r1, #4]
 c023c74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 c023c78:	4322      	orrs	r2, r4
 c023c7a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c023c7c:	0759      	lsls	r1, r3, #29
 c023c7e:	d506      	bpl.n	c023c8e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c023c80:	6801      	ldr	r1, [r0, #0]
 c023c82:	6b44      	ldr	r4, [r0, #52]	; 0x34
 c023c84:	684a      	ldr	r2, [r1, #4]
 c023c86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 c023c8a:	4322      	orrs	r2, r4
 c023c8c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c023c8e:	071a      	lsls	r2, r3, #28
 c023c90:	d506      	bpl.n	c023ca0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c023c92:	6801      	ldr	r1, [r0, #0]
 c023c94:	6b84      	ldr	r4, [r0, #56]	; 0x38
 c023c96:	684a      	ldr	r2, [r1, #4]
 c023c98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 c023c9c:	4322      	orrs	r2, r4
 c023c9e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c023ca0:	06dc      	lsls	r4, r3, #27
 c023ca2:	d506      	bpl.n	c023cb2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c023ca4:	6801      	ldr	r1, [r0, #0]
 c023ca6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 c023ca8:	688a      	ldr	r2, [r1, #8]
 c023caa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c023cae:	4322      	orrs	r2, r4
 c023cb0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c023cb2:	0699      	lsls	r1, r3, #26
 c023cb4:	d506      	bpl.n	c023cc4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c023cb6:	6801      	ldr	r1, [r0, #0]
 c023cb8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 c023cba:	688a      	ldr	r2, [r1, #8]
 c023cbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c023cc0:	4322      	orrs	r2, r4
 c023cc2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c023cc4:	065a      	lsls	r2, r3, #25
 c023cc6:	d510      	bpl.n	c023cea <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c023cc8:	6801      	ldr	r1, [r0, #0]
 c023cca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 c023ccc:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c023cce:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c023cd2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 c023cd6:	ea42 0204 	orr.w	r2, r2, r4
 c023cda:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c023cdc:	d105      	bne.n	c023cea <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c023cde:	684a      	ldr	r2, [r1, #4]
 c023ce0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 c023ce2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 c023ce6:	4322      	orrs	r2, r4
 c023ce8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c023cea:	061b      	lsls	r3, r3, #24
 c023cec:	d506      	bpl.n	c023cfc <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c023cee:	6802      	ldr	r2, [r0, #0]
 c023cf0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 c023cf2:	6853      	ldr	r3, [r2, #4]
 c023cf4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c023cf8:	430b      	orrs	r3, r1
 c023cfa:	6053      	str	r3, [r2, #4]
}
 c023cfc:	bd10      	pop	{r4, pc}

0c023cfe <UART_WaitOnFlagUntilTimeout>:
{
 c023cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c023d02:	4604      	mov	r4, r0
 c023d04:	460f      	mov	r7, r1
 c023d06:	4616      	mov	r6, r2
 c023d08:	4698      	mov	r8, r3
 c023d0a:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c023d0c:	6821      	ldr	r1, [r4, #0]
 c023d0e:	69ca      	ldr	r2, [r1, #28]
 c023d10:	ea37 0302 	bics.w	r3, r7, r2
 c023d14:	bf0c      	ite	eq
 c023d16:	2201      	moveq	r2, #1
 c023d18:	2200      	movne	r2, #0
 c023d1a:	42b2      	cmp	r2, r6
 c023d1c:	d001      	beq.n	c023d22 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 c023d1e:	2000      	movs	r0, #0
 c023d20:	e01a      	b.n	c023d58 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 c023d22:	1c68      	adds	r0, r5, #1
 c023d24:	d0f3      	beq.n	c023d0e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c023d26:	f7fd fabd 	bl	c0212a4 <HAL_GetTick>
 c023d2a:	eba0 0008 	sub.w	r0, r0, r8
 c023d2e:	42a8      	cmp	r0, r5
 c023d30:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c023d32:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c023d34:	d800      	bhi.n	c023d38 <UART_WaitOnFlagUntilTimeout+0x3a>
 c023d36:	b98d      	cbnz	r5, c023d5c <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c023d38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 c023d3c:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c023d3e:	6883      	ldr	r3, [r0, #8]
 c023d40:	f023 0301 	bic.w	r3, r3, #1
 c023d44:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 c023d46:	2320      	movs	r3, #32
 c023d48:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 c023d4c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 c023d50:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 c023d52:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 c023d54:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 c023d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c023d5c:	075a      	lsls	r2, r3, #29
 c023d5e:	d5d5      	bpl.n	c023d0c <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c023d60:	69c3      	ldr	r3, [r0, #28]
 c023d62:	051b      	lsls	r3, r3, #20
 c023d64:	d5d2      	bpl.n	c023d0c <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c023d66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 c023d6a:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c023d6c:	6803      	ldr	r3, [r0, #0]
 c023d6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 c023d72:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c023d74:	6883      	ldr	r3, [r0, #8]
 c023d76:	f023 0301 	bic.w	r3, r3, #1
 c023d7a:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 c023d7c:	2320      	movs	r3, #32
 c023d7e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 c023d82:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c023d86:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 c023d8a:	e7e1      	b.n	c023d50 <UART_WaitOnFlagUntilTimeout+0x52>

0c023d8c <HAL_UART_Transmit>:
{
 c023d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c023d90:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 c023d92:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 c023d96:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 c023d98:	2b20      	cmp	r3, #32
{
 c023d9a:	460e      	mov	r6, r1
 c023d9c:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 c023d9e:	d14f      	bne.n	c023e40 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 c023da0:	2900      	cmp	r1, #0
 c023da2:	d04b      	beq.n	c023e3c <HAL_UART_Transmit+0xb0>
 c023da4:	2a00      	cmp	r2, #0
 c023da6:	d049      	beq.n	c023e3c <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 c023da8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 c023dac:	2b01      	cmp	r3, #1
 c023dae:	d047      	beq.n	c023e40 <HAL_UART_Transmit+0xb4>
 c023db0:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c023db2:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 c023db4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c023db8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c023dba:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c023dbe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 c023dc2:	f7fd fa6f 	bl	c0212a4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c023dc6:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 c023dc8:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c023dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 c023dce:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 c023dd2:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c023dd6:	d103      	bne.n	c023de0 <HAL_UART_Transmit+0x54>
 c023dd8:	6923      	ldr	r3, [r4, #16]
 c023dda:	b90b      	cbnz	r3, c023de0 <HAL_UART_Transmit+0x54>
 c023ddc:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 c023dde:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 c023de0:	2300      	movs	r3, #0
 c023de2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 c023de6:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c023dea:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 c023dee:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c023df0:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 c023df2:	b942      	cbnz	r2, c023e06 <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c023df4:	2140      	movs	r1, #64	; 0x40
 c023df6:	4620      	mov	r0, r4
 c023df8:	f7ff ff81 	bl	c023cfe <UART_WaitOnFlagUntilTimeout>
 c023dfc:	b948      	cbnz	r0, c023e12 <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 c023dfe:	2320      	movs	r3, #32
 c023e00:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 c023e04:	e006      	b.n	c023e14 <HAL_UART_Transmit+0x88>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c023e06:	2200      	movs	r2, #0
 c023e08:	2180      	movs	r1, #128	; 0x80
 c023e0a:	4620      	mov	r0, r4
 c023e0c:	f7ff ff77 	bl	c023cfe <UART_WaitOnFlagUntilTimeout>
 c023e10:	b118      	cbz	r0, c023e1a <HAL_UART_Transmit+0x8e>
        return HAL_TIMEOUT;
 c023e12:	2003      	movs	r0, #3
}
 c023e14:	b003      	add	sp, #12
 c023e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c023e1a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 c023e1c:	b95e      	cbnz	r6, c023e36 <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c023e1e:	f835 3b02 	ldrh.w	r3, [r5], #2
 c023e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c023e26:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 c023e28:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 c023e2c:	3b01      	subs	r3, #1
 c023e2e:	b29b      	uxth	r3, r3
 c023e30:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 c023e34:	e7d7      	b.n	c023de6 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c023e36:	f816 3b01 	ldrb.w	r3, [r6], #1
 c023e3a:	e7f4      	b.n	c023e26 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 c023e3c:	2001      	movs	r0, #1
 c023e3e:	e7e9      	b.n	c023e14 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 c023e40:	2002      	movs	r0, #2
 c023e42:	e7e7      	b.n	c023e14 <HAL_UART_Transmit+0x88>

0c023e44 <UART_CheckIdleState>:
{
 c023e44:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c023e46:	2600      	movs	r6, #0
{
 c023e48:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c023e4a:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 c023e4e:	f7fd fa29 	bl	c0212a4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c023e52:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 c023e54:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c023e56:	681b      	ldr	r3, [r3, #0]
 c023e58:	071a      	lsls	r2, r3, #28
 c023e5a:	d418      	bmi.n	c023e8e <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c023e5c:	6823      	ldr	r3, [r4, #0]
 c023e5e:	681b      	ldr	r3, [r3, #0]
 c023e60:	075b      	lsls	r3, r3, #29
 c023e62:	d50a      	bpl.n	c023e7a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c023e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c023e68:	2200      	movs	r2, #0
 c023e6a:	9300      	str	r3, [sp, #0]
 c023e6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c023e70:	462b      	mov	r3, r5
 c023e72:	4620      	mov	r0, r4
 c023e74:	f7ff ff43 	bl	c023cfe <UART_WaitOnFlagUntilTimeout>
 c023e78:	b9a8      	cbnz	r0, c023ea6 <UART_CheckIdleState+0x62>
  huart->gState = HAL_UART_STATE_READY;
 c023e7a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c023e7c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 c023e7e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 c023e82:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 c023e86:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c023e8a:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 c023e8c:	e00c      	b.n	c023ea8 <UART_CheckIdleState+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c023e8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c023e92:	4632      	mov	r2, r6
 c023e94:	9300      	str	r3, [sp, #0]
 c023e96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c023e9a:	4603      	mov	r3, r0
 c023e9c:	4620      	mov	r0, r4
 c023e9e:	f7ff ff2e 	bl	c023cfe <UART_WaitOnFlagUntilTimeout>
 c023ea2:	2800      	cmp	r0, #0
 c023ea4:	d0da      	beq.n	c023e5c <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 c023ea6:	2003      	movs	r0, #3
}
 c023ea8:	b002      	add	sp, #8
 c023eaa:	bd70      	pop	{r4, r5, r6, pc}

0c023eac <HAL_UART_Init>:
{
 c023eac:	b510      	push	{r4, lr}
  if (huart == NULL)
 c023eae:	4604      	mov	r4, r0
 c023eb0:	b350      	cbz	r0, c023f08 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 c023eb2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 c023eb6:	b91b      	cbnz	r3, c023ec0 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 c023eb8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 c023ebc:	f7ff fba8 	bl	c023610 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 c023ec0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 c023ec2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 c023ec4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 c023ec8:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 c023eca:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 c023ecc:	f023 0301 	bic.w	r3, r3, #1
 c023ed0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 c023ed2:	f7ff fd4f 	bl	c023974 <UART_SetConfig>
 c023ed6:	2801      	cmp	r0, #1
 c023ed8:	d016      	beq.n	c023f08 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c023eda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 c023edc:	b113      	cbz	r3, c023ee4 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 c023ede:	4620      	mov	r0, r4
 c023ee0:	f7ff feb8 	bl	c023c54 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c023ee4:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 c023ee6:	4620      	mov	r0, r4
}
 c023ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c023eec:	685a      	ldr	r2, [r3, #4]
 c023eee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c023ef2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c023ef4:	689a      	ldr	r2, [r3, #8]
 c023ef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c023efa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 c023efc:	681a      	ldr	r2, [r3, #0]
 c023efe:	f042 0201 	orr.w	r2, r2, #1
 c023f02:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 c023f04:	f7ff bf9e 	b.w	c023e44 <UART_CheckIdleState>
}
 c023f08:	2001      	movs	r0, #1
 c023f0a:	bd10      	pop	{r4, pc}

0c023f0c <UART_Start_Receive_IT>:
  huart->RxISR       = NULL;
 c023f0c:	2300      	movs	r3, #0
{
 c023f0e:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 c023f10:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 c023f12:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 c023f14:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  UART_MASK_COMPUTATION(huart);
 c023f18:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  huart->RxXferCount = Size;
 c023f1c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 c023f20:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 c023f22:	d12e      	bne.n	c023f82 <UART_Start_Receive_IT+0x76>
 c023f24:	6903      	ldr	r3, [r0, #16]
 c023f26:	bb53      	cbnz	r3, c023f7e <UART_Start_Receive_IT+0x72>
 c023f28:	f240 13ff 	movw	r3, #511	; 0x1ff
 c023f2c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c023f30:	2300      	movs	r3, #0
 c023f32:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 c023f36:	2322      	movs	r3, #34	; 0x22
 c023f38:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c023f3c:	6803      	ldr	r3, [r0, #0]
 c023f3e:	689c      	ldr	r4, [r3, #8]
 c023f40:	f044 0401 	orr.w	r4, r4, #1
 c023f44:	609c      	str	r4, [r3, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 c023f46:	6e44      	ldr	r4, [r0, #100]	; 0x64
 c023f48:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 c023f4c:	d129      	bne.n	c023fa2 <UART_Start_Receive_IT+0x96>
 c023f4e:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 c023f52:	4294      	cmp	r4, r2
 c023f54:	d825      	bhi.n	c023fa2 <UART_Start_Receive_IT+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c023f56:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 c023f5a:	d120      	bne.n	c023f9e <UART_Start_Receive_IT+0x92>
 c023f5c:	6902      	ldr	r2, [r0, #16]
 c023f5e:	b9f2      	cbnz	r2, c023f9e <UART_Start_Receive_IT+0x92>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 c023f60:	4a18      	ldr	r2, [pc, #96]	; (c023fc4 <UART_Start_Receive_IT+0xb8>)
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 c023f62:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 c023f64:	2200      	movs	r2, #0
 c023f66:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 c023f6a:	681a      	ldr	r2, [r3, #0]
 c023f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c023f70:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 c023f72:	689a      	ldr	r2, [r3, #8]
 c023f74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 c023f78:	609a      	str	r2, [r3, #8]
}
 c023f7a:	2000      	movs	r0, #0
 c023f7c:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 c023f7e:	23ff      	movs	r3, #255	; 0xff
 c023f80:	e7d4      	b.n	c023f2c <UART_Start_Receive_IT+0x20>
 c023f82:	b921      	cbnz	r1, c023f8e <UART_Start_Receive_IT+0x82>
 c023f84:	6903      	ldr	r3, [r0, #16]
 c023f86:	2b00      	cmp	r3, #0
 c023f88:	d0f9      	beq.n	c023f7e <UART_Start_Receive_IT+0x72>
 c023f8a:	237f      	movs	r3, #127	; 0x7f
 c023f8c:	e7ce      	b.n	c023f2c <UART_Start_Receive_IT+0x20>
 c023f8e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 c023f92:	d1cb      	bne.n	c023f2c <UART_Start_Receive_IT+0x20>
 c023f94:	6903      	ldr	r3, [r0, #16]
 c023f96:	2b00      	cmp	r3, #0
 c023f98:	d0f7      	beq.n	c023f8a <UART_Start_Receive_IT+0x7e>
 c023f9a:	233f      	movs	r3, #63	; 0x3f
 c023f9c:	e7c6      	b.n	c023f2c <UART_Start_Receive_IT+0x20>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 c023f9e:	4a0a      	ldr	r2, [pc, #40]	; (c023fc8 <UART_Start_Receive_IT+0xbc>)
 c023fa0:	e7df      	b.n	c023f62 <UART_Start_Receive_IT+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c023fa2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 c023fa6:	d10b      	bne.n	c023fc0 <UART_Start_Receive_IT+0xb4>
 c023fa8:	6902      	ldr	r2, [r0, #16]
 c023faa:	b94a      	cbnz	r2, c023fc0 <UART_Start_Receive_IT+0xb4>
      huart->RxISR = UART_RxISR_16BIT;
 c023fac:	4a07      	ldr	r2, [pc, #28]	; (c023fcc <UART_Start_Receive_IT+0xc0>)
      huart->RxISR = UART_RxISR_8BIT;
 c023fae:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 c023fb0:	2200      	movs	r2, #0
 c023fb2:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 c023fb6:	681a      	ldr	r2, [r3, #0]
 c023fb8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 c023fbc:	601a      	str	r2, [r3, #0]
 c023fbe:	e7dc      	b.n	c023f7a <UART_Start_Receive_IT+0x6e>
      huart->RxISR = UART_RxISR_8BIT;
 c023fc0:	4a03      	ldr	r2, [pc, #12]	; (c023fd0 <UART_Start_Receive_IT+0xc4>)
 c023fc2:	e7f4      	b.n	c023fae <UART_Start_Receive_IT+0xa2>
 c023fc4:	0c023841 	.word	0x0c023841
 c023fc8:	0c023709 	.word	0x0c023709
 c023fcc:	0c023693 	.word	0x0c023693
 c023fd0:	0c023619 	.word	0x0c023619

0c023fd4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 c023fd4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 c023fd8:	b410      	push	{r4}
  if (huart->RxState == HAL_UART_STATE_READY)
 c023fda:	2b20      	cmp	r3, #32
 c023fdc:	d11b      	bne.n	c024016 <HAL_UART_Receive_IT+0x42>
    if ((pData == NULL) || (Size == 0U))
 c023fde:	b1b9      	cbz	r1, c024010 <HAL_UART_Receive_IT+0x3c>
 c023fe0:	b1b2      	cbz	r2, c024010 <HAL_UART_Receive_IT+0x3c>
    __HAL_LOCK(huart);
 c023fe2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 c023fe6:	2b01      	cmp	r3, #1
 c023fe8:	d015      	beq.n	c024016 <HAL_UART_Receive_IT+0x42>
 c023fea:	2301      	movs	r3, #1
 c023fec:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c023ff0:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 c023ff2:	4c0a      	ldr	r4, [pc, #40]	; (c02401c <HAL_UART_Receive_IT+0x48>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c023ff4:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 c023ff6:	6803      	ldr	r3, [r0, #0]
 c023ff8:	42a3      	cmp	r3, r4
 c023ffa:	d006      	beq.n	c02400a <HAL_UART_Receive_IT+0x36>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 c023ffc:	685c      	ldr	r4, [r3, #4]
 c023ffe:	0224      	lsls	r4, r4, #8
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 c024000:	bf42      	ittt	mi
 c024002:	681c      	ldrmi	r4, [r3, #0]
 c024004:	f044 6480 	orrmi.w	r4, r4, #67108864	; 0x4000000
 c024008:	601c      	strmi	r4, [r3, #0]
}
 c02400a:	bc10      	pop	{r4}
    return(UART_Start_Receive_IT(huart, pData, Size));
 c02400c:	f7ff bf7e 	b.w	c023f0c <UART_Start_Receive_IT>
      return HAL_ERROR;
 c024010:	2001      	movs	r0, #1
}
 c024012:	bc10      	pop	{r4}
 c024014:	4770      	bx	lr
    return HAL_BUSY;
 c024016:	2002      	movs	r0, #2
 c024018:	e7fb      	b.n	c024012 <HAL_UART_Receive_IT+0x3e>
 c02401a:	bf00      	nop
 c02401c:	50008000 	.word	0x50008000

0c024020 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
 c024020:	6803      	ldr	r3, [r0, #0]
{
 c024022:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 c024024:	1acd      	subs	r5, r1, r3
 c024026:	2d00      	cmp	r5, #0
 c024028:	dc02      	bgt.n	c024030 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 c02402a:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
 c02402e:	bd30      	pop	{r4, r5, pc}
    if( ( **p & 0x80 ) == 0 )
 c024030:	781c      	ldrb	r4, [r3, #0]
 c024032:	f014 0f80 	tst.w	r4, #128	; 0x80
 c024036:	d10a      	bne.n	c02404e <mbedtls_asn1_get_len+0x2e>
        *len = *(*p)++;
 c024038:	1c5c      	adds	r4, r3, #1
 c02403a:	6004      	str	r4, [r0, #0]
 c02403c:	781b      	ldrb	r3, [r3, #0]
 c02403e:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
 c024040:	6803      	ldr	r3, [r0, #0]
 c024042:	1ac9      	subs	r1, r1, r3
 c024044:	6813      	ldr	r3, [r2, #0]
 c024046:	428b      	cmp	r3, r1
 c024048:	d8ef      	bhi.n	c02402a <mbedtls_asn1_get_len+0xa>
    return( 0 );
 c02404a:	2000      	movs	r0, #0
 c02404c:	e7ef      	b.n	c02402e <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
 c02404e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 c024052:	3c01      	subs	r4, #1
 c024054:	2c03      	cmp	r4, #3
 c024056:	d827      	bhi.n	c0240a8 <mbedtls_asn1_get_len+0x88>
 c024058:	e8df f004 	tbb	[pc, r4]
 c02405c:	1e120902 	.word	0x1e120902
            if( ( end - *p ) < 2 )
 c024060:	2d01      	cmp	r5, #1
 c024062:	d0e2      	beq.n	c02402a <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
 c024064:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
 c024066:	3302      	adds	r3, #2
            *len = (*p)[1];
 c024068:	6014      	str	r4, [r2, #0]
            (*p) += 5;
 c02406a:	6003      	str	r3, [r0, #0]
            break;
 c02406c:	e7e8      	b.n	c024040 <mbedtls_asn1_get_len+0x20>
            if( ( end - *p ) < 3 )
 c02406e:	2d02      	cmp	r5, #2
 c024070:	dddb      	ble.n	c02402a <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 c024072:	f8b3 4001 	ldrh.w	r4, [r3, #1]
            (*p) += 3;
 c024076:	3303      	adds	r3, #3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 c024078:	ba64      	rev16	r4, r4
 c02407a:	b2a4      	uxth	r4, r4
 c02407c:	6014      	str	r4, [r2, #0]
 c02407e:	e7f4      	b.n	c02406a <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 4 )
 c024080:	2d03      	cmp	r5, #3
 c024082:	ddd2      	ble.n	c02402a <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 c024084:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
 c024086:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 c024088:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 c02408a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 c02408e:	78dd      	ldrb	r5, [r3, #3]
            (*p) += 4;
 c024090:	3304      	adds	r3, #4
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 c024092:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
 c024094:	6014      	str	r4, [r2, #0]
 c024096:	e7e8      	b.n	c02406a <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 5 )
 c024098:	2d04      	cmp	r5, #4
 c02409a:	ddc6      	ble.n	c02402a <mbedtls_asn1_get_len+0xa>
 c02409c:	f8d3 4001 	ldr.w	r4, [r3, #1]
            (*p) += 5;
 c0240a0:	3305      	adds	r3, #5
 c0240a2:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 c0240a4:	6014      	str	r4, [r2, #0]
 c0240a6:	e7e0      	b.n	c02406a <mbedtls_asn1_get_len+0x4a>
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 c0240a8:	f06f 0063 	mvn.w	r0, #99	; 0x63
 c0240ac:	e7bf      	b.n	c02402e <mbedtls_asn1_get_len+0xe>

0c0240ae <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 c0240ae:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 c0240b0:	6804      	ldr	r4, [r0, #0]
 c0240b2:	1b0e      	subs	r6, r1, r4
 c0240b4:	2e00      	cmp	r6, #0
 c0240b6:	dd07      	ble.n	c0240c8 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 c0240b8:	7826      	ldrb	r6, [r4, #0]
 c0240ba:	429e      	cmp	r6, r3
 c0240bc:	d108      	bne.n	c0240d0 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 c0240be:	3401      	adds	r4, #1
 c0240c0:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 c0240c2:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
 c0240c4:	f7ff bfac 	b.w	c024020 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 c0240c8:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
 c0240cc:	bc70      	pop	{r4, r5, r6}
 c0240ce:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 c0240d0:	f06f 0061 	mvn.w	r0, #97	; 0x61
 c0240d4:	e7fa      	b.n	c0240cc <mbedtls_asn1_get_tag+0x1e>

0c0240d6 <mbedtls_asn1_get_int>:
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 c0240d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c0240d8:	2302      	movs	r3, #2
{
 c0240da:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c0240dc:	aa01      	add	r2, sp, #4
{
 c0240de:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c0240e0:	f7ff ffe5 	bl	c0240ae <mbedtls_asn1_get_tag>
 c0240e4:	b968      	cbnz	r0, c024102 <mbedtls_asn1_get_int+0x2c>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 c0240e6:	9b01      	ldr	r3, [sp, #4]
 c0240e8:	3b01      	subs	r3, #1
 c0240ea:	2b03      	cmp	r3, #3
 c0240ec:	d814      	bhi.n	c024118 <mbedtls_asn1_get_int+0x42>
 c0240ee:	6823      	ldr	r3, [r4, #0]
 c0240f0:	f993 3000 	ldrsb.w	r3, [r3]
 c0240f4:	2b00      	cmp	r3, #0
 c0240f6:	db0f      	blt.n	c024118 <mbedtls_asn1_get_int+0x42>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 c0240f8:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 c0240fa:	9b01      	ldr	r3, [sp, #4]
 c0240fc:	1e5a      	subs	r2, r3, #1
 c0240fe:	9201      	str	r2, [sp, #4]
 c024100:	b90b      	cbnz	r3, c024106 <mbedtls_asn1_get_int+0x30>
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 c024102:	b003      	add	sp, #12
 c024104:	bd30      	pop	{r4, r5, pc}
        *val = ( *val << 8 ) | **p;
 c024106:	6823      	ldr	r3, [r4, #0]
 c024108:	6829      	ldr	r1, [r5, #0]
 c02410a:	f813 2b01 	ldrb.w	r2, [r3], #1
 c02410e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 c024112:	602a      	str	r2, [r5, #0]
        (*p)++;
 c024114:	6023      	str	r3, [r4, #0]
 c024116:	e7f0      	b.n	c0240fa <mbedtls_asn1_get_int+0x24>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 c024118:	f06f 0063 	mvn.w	r0, #99	; 0x63
 c02411c:	e7f1      	b.n	c024102 <mbedtls_asn1_get_int+0x2c>

0c02411e <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 c02411e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c024120:	2302      	movs	r3, #2
{
 c024122:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c024124:	aa01      	add	r2, sp, #4
{
 c024126:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c024128:	f7ff ffc1 	bl	c0240ae <mbedtls_asn1_get_tag>
 c02412c:	b940      	cbnz	r0, c024140 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 c02412e:	9a01      	ldr	r2, [sp, #4]
 c024130:	6821      	ldr	r1, [r4, #0]
 c024132:	4628      	mov	r0, r5
 c024134:	f000 feaa 	bl	c024e8c <mbedtls_mpi_read_binary>

    *p += len;
 c024138:	6823      	ldr	r3, [r4, #0]
 c02413a:	9a01      	ldr	r2, [sp, #4]
 c02413c:	4413      	add	r3, r2
 c02413e:	6023      	str	r3, [r4, #0]

    return( ret );
}
 c024140:	b003      	add	sp, #12
 c024142:	bd30      	pop	{r4, r5, pc}

0c024144 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 c024144:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 c024146:	2303      	movs	r3, #3
{
 c024148:	4604      	mov	r4, r0
 c02414a:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 c02414c:	f7ff ffaf 	bl	c0240ae <mbedtls_asn1_get_tag>
 c024150:	b958      	cbnz	r0, c02416a <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 c024152:	6813      	ldr	r3, [r2, #0]
 c024154:	1e5a      	subs	r2, r3, #1
 c024156:	2b01      	cmp	r3, #1
 c024158:	602a      	str	r2, [r5, #0]
 c02415a:	d904      	bls.n	c024166 <mbedtls_asn1_get_bitstring_null+0x22>
 c02415c:	6823      	ldr	r3, [r4, #0]
 c02415e:	1c5a      	adds	r2, r3, #1
 c024160:	6022      	str	r2, [r4, #0]
 c024162:	781b      	ldrb	r3, [r3, #0]
 c024164:	b10b      	cbz	r3, c02416a <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 c024166:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 c02416a:	bd38      	pop	{r3, r4, r5, pc}

0c02416c <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 c02416c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c024170:	4690      	mov	r8, r2
 c024172:	461f      	mov	r7, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 c024174:	aa01      	add	r2, sp, #4
 c024176:	2330      	movs	r3, #48	; 0x30
{
 c024178:	4604      	mov	r4, r0
 c02417a:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 c02417c:	f7ff ff97 	bl	c0240ae <mbedtls_asn1_get_tag>
 c024180:	4605      	mov	r5, r0
 c024182:	bb00      	cbnz	r0, c0241c6 <mbedtls_asn1_get_alg+0x5a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 c024184:	6826      	ldr	r6, [r4, #0]
 c024186:	eba9 0906 	sub.w	r9, r9, r6
 c02418a:	f1b9 0f00 	cmp.w	r9, #0
 c02418e:	dd37      	ble.n	c024200 <mbedtls_asn1_get_alg+0x94>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 c024190:	4642      	mov	r2, r8
 c024192:	7833      	ldrb	r3, [r6, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 c024194:	4620      	mov	r0, r4
    alg->tag = **p;
 c024196:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 c02419a:	9b01      	ldr	r3, [sp, #4]
 c02419c:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 c02419e:	4631      	mov	r1, r6
 c0241a0:	2306      	movs	r3, #6
 c0241a2:	f7ff ff84 	bl	c0240ae <mbedtls_asn1_get_tag>
 c0241a6:	4605      	mov	r5, r0
 c0241a8:	b968      	cbnz	r0, c0241c6 <mbedtls_asn1_get_alg+0x5a>
        return( ret );

    alg->p = *p;
 c0241aa:	6823      	ldr	r3, [r4, #0]
    *p += alg->len;
 c0241ac:	f8d8 2004 	ldr.w	r2, [r8, #4]
    alg->p = *p;
 c0241b0:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
 c0241b4:	6821      	ldr	r1, [r4, #0]
 c0241b6:	188b      	adds	r3, r1, r2

    if( *p == end )
 c0241b8:	42b3      	cmp	r3, r6
    *p += alg->len;
 c0241ba:	6023      	str	r3, [r4, #0]
    if( *p == end )
 c0241bc:	d107      	bne.n	c0241ce <mbedtls_asn1_get_alg+0x62>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
 c0241be:	210c      	movs	r1, #12
 c0241c0:	4638      	mov	r0, r7
 c0241c2:	f006 f86d 	bl	c02a2a0 <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 c0241c6:	4628      	mov	r0, r5
 c0241c8:	b003      	add	sp, #12
 c0241ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    params->tag = **p;
 c0241ce:	5c89      	ldrb	r1, [r1, r2]
 c0241d0:	463a      	mov	r2, r7
    (*p)++;
 c0241d2:	3301      	adds	r3, #1
    params->tag = **p;
 c0241d4:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 c0241d8:	4620      	mov	r0, r4
    (*p)++;
 c0241da:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 c0241dc:	4631      	mov	r1, r6
 c0241de:	f7ff ff1f 	bl	c024020 <mbedtls_asn1_get_len>
 c0241e2:	4605      	mov	r5, r0
 c0241e4:	2800      	cmp	r0, #0
 c0241e6:	d1ee      	bne.n	c0241c6 <mbedtls_asn1_get_alg+0x5a>
    params->p = *p;
 c0241e8:	6823      	ldr	r3, [r4, #0]
    *p += params->len;
 c0241ea:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
 c0241ec:	60bb      	str	r3, [r7, #8]
    *p += params->len;
 c0241ee:	6823      	ldr	r3, [r4, #0]
 c0241f0:	4413      	add	r3, r2
    if( *p != end )
 c0241f2:	42b3      	cmp	r3, r6
    *p += params->len;
 c0241f4:	6023      	str	r3, [r4, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 c0241f6:	bf0c      	ite	eq
 c0241f8:	4605      	moveq	r5, r0
 c0241fa:	f06f 0565 	mvnne.w	r5, #101	; 0x65
 c0241fe:	e7e2      	b.n	c0241c6 <mbedtls_asn1_get_alg+0x5a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 c024200:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 c024204:	e7df      	b.n	c0241c6 <mbedtls_asn1_get_alg+0x5a>

0c024206 <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
 c024206:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
 c024208:	2300      	movs	r3, #0
 c02420a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 c02420e:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
 c024210:	ab01      	add	r3, sp, #4
 c024212:	f7ff ffab 	bl	c02416c <mbedtls_asn1_get_alg>
 c024216:	b940      	cbnz	r0, c02422a <mbedtls_asn1_get_alg_null+0x24>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
 c024218:	9b01      	ldr	r3, [sp, #4]
 c02421a:	2b05      	cmp	r3, #5
 c02421c:	d000      	beq.n	c024220 <mbedtls_asn1_get_alg_null+0x1a>
 c02421e:	b93b      	cbnz	r3, c024230 <mbedtls_asn1_get_alg_null+0x2a>
 c024220:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 c024222:	2b00      	cmp	r3, #0
 c024224:	bf18      	it	ne
 c024226:	f06f 0067 	mvnne.w	r0, #103	; 0x67

    return( 0 );
}
 c02422a:	b005      	add	sp, #20
 c02422c:	f85d fb04 	ldr.w	pc, [sp], #4
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 c024230:	f06f 0067 	mvn.w	r0, #103	; 0x67
 c024234:	e7f9      	b.n	c02422a <mbedtls_asn1_get_alg_null+0x24>

0c024236 <mbedtls_asn1_write_len>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
 c024236:	6803      	ldr	r3, [r0, #0]
    if( len < 0x80 )
 c024238:	2a7f      	cmp	r2, #127	; 0x7f
 c02423a:	eba3 0101 	sub.w	r1, r3, r1
 c02423e:	d807      	bhi.n	c024250 <mbedtls_asn1_write_len+0x1a>
    {
        if( *p - start < 1 )
 c024240:	2900      	cmp	r1, #0
 c024242:	dd69      	ble.n	c024318 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 c024244:	1e59      	subs	r1, r3, #1
 c024246:	6001      	str	r1, [r0, #0]
 c024248:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 1 );
 c02424c:	2001      	movs	r0, #1
 c02424e:	4770      	bx	lr
    }

    if( len <= 0xFF )
 c024250:	2aff      	cmp	r2, #255	; 0xff
 c024252:	d80d      	bhi.n	c024270 <mbedtls_asn1_write_len+0x3a>
    {
        if( *p - start < 2 )
 c024254:	2901      	cmp	r1, #1
 c024256:	dd5f      	ble.n	c024318 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 c024258:	1e59      	subs	r1, r3, #1
 c02425a:	6001      	str	r1, [r0, #0]
 c02425c:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x81;
 c024260:	6803      	ldr	r3, [r0, #0]
 c024262:	1e5a      	subs	r2, r3, #1
 c024264:	6002      	str	r2, [r0, #0]
 c024266:	2281      	movs	r2, #129	; 0x81
        return( 2 );
 c024268:	2002      	movs	r0, #2
        *--(*p) = 0x81;
 c02426a:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 2 );
 c02426e:	4770      	bx	lr
    }

    if( len <= 0xFFFF )
 c024270:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 c024274:	d213      	bcs.n	c02429e <mbedtls_asn1_write_len+0x68>
    {
        if( *p - start < 3 )
 c024276:	2902      	cmp	r1, #2
 c024278:	dd4e      	ble.n	c024318 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 c02427a:	1e59      	subs	r1, r3, #1
 c02427c:	6001      	str	r1, [r0, #0]
 c02427e:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 c024282:	6803      	ldr	r3, [r0, #0]
 c024284:	0a12      	lsrs	r2, r2, #8
 c024286:	1e59      	subs	r1, r3, #1
 c024288:	6001      	str	r1, [r0, #0]
 c02428a:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x82;
 c02428e:	6803      	ldr	r3, [r0, #0]
 c024290:	1e5a      	subs	r2, r3, #1
 c024292:	6002      	str	r2, [r0, #0]
 c024294:	2282      	movs	r2, #130	; 0x82
        return( 3 );
 c024296:	2003      	movs	r0, #3
        *--(*p) = 0x82;
 c024298:	f803 2c01 	strb.w	r2, [r3, #-1]
 c02429c:	4770      	bx	lr
    }

    if( len <= 0xFFFFFF )
 c02429e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 c0242a2:	d219      	bcs.n	c0242d8 <mbedtls_asn1_write_len+0xa2>
    {
        if( *p - start < 4 )
 c0242a4:	2903      	cmp	r1, #3
 c0242a6:	dd37      	ble.n	c024318 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 c0242a8:	1e59      	subs	r1, r3, #1
 c0242aa:	6001      	str	r1, [r0, #0]
 c0242ac:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 c0242b0:	6803      	ldr	r3, [r0, #0]
 c0242b2:	1e59      	subs	r1, r3, #1
 c0242b4:	6001      	str	r1, [r0, #0]
 c0242b6:	0a11      	lsrs	r1, r2, #8
 c0242b8:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 c0242bc:	6803      	ldr	r3, [r0, #0]
 c0242be:	0c12      	lsrs	r2, r2, #16
 c0242c0:	1e59      	subs	r1, r3, #1
 c0242c2:	6001      	str	r1, [r0, #0]
 c0242c4:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x83;
 c0242c8:	6803      	ldr	r3, [r0, #0]
 c0242ca:	1e5a      	subs	r2, r3, #1
 c0242cc:	6002      	str	r2, [r0, #0]
 c0242ce:	2283      	movs	r2, #131	; 0x83
        return( 4 );
 c0242d0:	2004      	movs	r0, #4
        *--(*p) = 0x83;
 c0242d2:	f803 2c01 	strb.w	r2, [r3, #-1]
 c0242d6:	4770      	bx	lr

#if SIZE_MAX > 0xFFFFFFFF
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
 c0242d8:	2904      	cmp	r1, #4
 c0242da:	dd1d      	ble.n	c024318 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 c0242dc:	1e59      	subs	r1, r3, #1
 c0242de:	6001      	str	r1, [r0, #0]
 c0242e0:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 c0242e4:	6803      	ldr	r3, [r0, #0]
 c0242e6:	1e59      	subs	r1, r3, #1
 c0242e8:	6001      	str	r1, [r0, #0]
 c0242ea:	0a11      	lsrs	r1, r2, #8
 c0242ec:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 c0242f0:	6803      	ldr	r3, [r0, #0]
 c0242f2:	1e59      	subs	r1, r3, #1
 c0242f4:	6001      	str	r1, [r0, #0]
 c0242f6:	0c11      	lsrs	r1, r2, #16
 c0242f8:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 24 ) & 0xFF;
 c0242fc:	6803      	ldr	r3, [r0, #0]
 c0242fe:	0e12      	lsrs	r2, r2, #24
 c024300:	1e59      	subs	r1, r3, #1
 c024302:	6001      	str	r1, [r0, #0]
 c024304:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x84;
 c024308:	6803      	ldr	r3, [r0, #0]
 c02430a:	1e5a      	subs	r2, r3, #1
 c02430c:	6002      	str	r2, [r0, #0]
 c02430e:	2284      	movs	r2, #132	; 0x84
        return( 5 );
 c024310:	2005      	movs	r0, #5
        *--(*p) = 0x84;
 c024312:	f803 2c01 	strb.w	r2, [r3, #-1]
 c024316:	4770      	bx	lr
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 c024318:	f06f 006b 	mvn.w	r0, #107	; 0x6b
    }

#if SIZE_MAX > 0xFFFFFFFF
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
 c02431c:	4770      	bx	lr

0c02431e <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
 c02431e:	6803      	ldr	r3, [r0, #0]
 c024320:	1a59      	subs	r1, r3, r1
 c024322:	2900      	cmp	r1, #0
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
 c024324:	bfc1      	itttt	gt
 c024326:	f103 31ff 	addgt.w	r1, r3, #4294967295
 c02432a:	6001      	strgt	r1, [r0, #0]

    return( 1 );
 c02432c:	2001      	movgt	r0, #1
    *--(*p) = tag;
 c02432e:	f803 2c01 	strbgt.w	r2, [r3, #-1]
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 c024332:	bfd8      	it	le
 c024334:	f06f 006b 	mvnle.w	r0, #107	; 0x6b
}
 c024338:	4770      	bx	lr

0c02433a <mbedtls_asn1_write_raw_buffer>:

int mbedtls_asn1_write_raw_buffer( unsigned char **p, unsigned char *start,
                           const unsigned char *buf, size_t size )
{
 c02433a:	b538      	push	{r3, r4, r5, lr}
 c02433c:	461c      	mov	r4, r3
    size_t len = 0;

    if( *p < start || (size_t)( *p - start ) < size )
 c02433e:	6803      	ldr	r3, [r0, #0]
{
 c024340:	4615      	mov	r5, r2
    if( *p < start || (size_t)( *p - start ) < size )
 c024342:	428b      	cmp	r3, r1
 c024344:	d30b      	bcc.n	c02435e <mbedtls_asn1_write_raw_buffer+0x24>
 c024346:	1a5a      	subs	r2, r3, r1
 c024348:	42a2      	cmp	r2, r4
 c02434a:	d308      	bcc.n	c02435e <mbedtls_asn1_write_raw_buffer+0x24>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    len = size;
    (*p) -= len;
 c02434c:	1b1b      	subs	r3, r3, r4
 c02434e:	6003      	str	r3, [r0, #0]
    memcpy( *p, buf, len );
 c024350:	4622      	mov	r2, r4
 c024352:	4629      	mov	r1, r5
 c024354:	4618      	mov	r0, r3
 c024356:	f7f3 fb12 	bl	c01797e <memcpy>

    return( (int) len );
 c02435a:	4620      	mov	r0, r4
}
 c02435c:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 c02435e:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 c024362:	e7fb      	b.n	c02435c <mbedtls_asn1_write_raw_buffer+0x22>

0c024364 <mbedtls_asn1_write_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
 c024364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c024368:	4606      	mov	r6, r0
 c02436a:	460f      	mov	r7, r1
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
 c02436c:	4610      	mov	r0, r2
{
 c02436e:	4690      	mov	r8, r2
    len = mbedtls_mpi_size( X );
 c024370:	f000 fd52 	bl	c024e18 <mbedtls_mpi_size>

    if( *p < start || (size_t)( *p - start ) < len )
 c024374:	6831      	ldr	r1, [r6, #0]
    len = mbedtls_mpi_size( X );
 c024376:	4604      	mov	r4, r0
    if( *p < start || (size_t)( *p - start ) < len )
 c024378:	42b9      	cmp	r1, r7
 c02437a:	d204      	bcs.n	c024386 <mbedtls_asn1_write_mpi+0x22>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 c02437c:	f06f 056b 	mvn.w	r5, #107	; 0x6b

    ret = (int) len;

cleanup:
    return( ret );
}
 c024380:	4628      	mov	r0, r5
 c024382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *p < start || (size_t)( *p - start ) < len )
 c024386:	1bcb      	subs	r3, r1, r7
 c024388:	4283      	cmp	r3, r0
 c02438a:	d3f7      	bcc.n	c02437c <mbedtls_asn1_write_mpi+0x18>
    (*p) -= len;
 c02438c:	1a09      	subs	r1, r1, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 c02438e:	4602      	mov	r2, r0
    (*p) -= len;
 c024390:	6031      	str	r1, [r6, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 c024392:	4640      	mov	r0, r8
 c024394:	f000 fde7 	bl	c024f66 <mbedtls_mpi_write_binary>
 c024398:	4605      	mov	r5, r0
 c02439a:	2800      	cmp	r0, #0
 c02439c:	d1f0      	bne.n	c024380 <mbedtls_asn1_write_mpi+0x1c>
    if( X->s ==1 && **p & 0x80 )
 c02439e:	f8d8 3000 	ldr.w	r3, [r8]
 c0243a2:	2b01      	cmp	r3, #1
 c0243a4:	d10c      	bne.n	c0243c0 <mbedtls_asn1_write_mpi+0x5c>
 c0243a6:	6833      	ldr	r3, [r6, #0]
 c0243a8:	f993 2000 	ldrsb.w	r2, [r3]
 c0243ac:	2a00      	cmp	r2, #0
 c0243ae:	da07      	bge.n	c0243c0 <mbedtls_asn1_write_mpi+0x5c>
        if( *p - start < 1 )
 c0243b0:	1bda      	subs	r2, r3, r7
 c0243b2:	2a00      	cmp	r2, #0
 c0243b4:	dde2      	ble.n	c02437c <mbedtls_asn1_write_mpi+0x18>
        *--(*p) = 0x00;
 c0243b6:	1e5a      	subs	r2, r3, #1
 c0243b8:	6032      	str	r2, [r6, #0]
        len += 1;
 c0243ba:	3401      	adds	r4, #1
        *--(*p) = 0x00;
 c0243bc:	f803 0c01 	strb.w	r0, [r3, #-1]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 c0243c0:	4622      	mov	r2, r4
 c0243c2:	4639      	mov	r1, r7
 c0243c4:	4630      	mov	r0, r6
 c0243c6:	f7ff ff36 	bl	c024236 <mbedtls_asn1_write_len>
 c0243ca:	1e05      	subs	r5, r0, #0
 c0243cc:	dbd8      	blt.n	c024380 <mbedtls_asn1_write_mpi+0x1c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 c0243ce:	2202      	movs	r2, #2
 c0243d0:	4639      	mov	r1, r7
 c0243d2:	4630      	mov	r0, r6
 c0243d4:	f7ff ffa3 	bl	c02431e <mbedtls_asn1_write_tag>
 c0243d8:	2800      	cmp	r0, #0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 c0243da:	bfa6      	itte	ge
 c0243dc:	1964      	addge	r4, r4, r5
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 c0243de:	1905      	addge	r5, r0, r4
 c0243e0:	4605      	movlt	r5, r0
 c0243e2:	e7cd      	b.n	c024380 <mbedtls_asn1_write_mpi+0x1c>

0c0243e4 <mbedtls_asn1_write_oid>:
    return( (int) len );
}

int mbedtls_asn1_write_oid( unsigned char **p, unsigned char *start,
                    const char *oid, size_t oid_len )
{
 c0243e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0243e6:	4606      	mov	r6, r0
 c0243e8:	460f      	mov	r7, r1
    int ret;
    size_t len = 0;

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
 c0243ea:	f7ff ffa6 	bl	c02433a <mbedtls_asn1_write_raw_buffer>
 c0243ee:	1e04      	subs	r4, r0, #0
 c0243f0:	db11      	blt.n	c024416 <mbedtls_asn1_write_oid+0x32>
                                  (const unsigned char *) oid, oid_len ) );
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_len( p, start, len ) );
 c0243f2:	4622      	mov	r2, r4
 c0243f4:	4639      	mov	r1, r7
 c0243f6:	4630      	mov	r0, r6
 c0243f8:	f7ff ff1d 	bl	c024236 <mbedtls_asn1_write_len>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
 c0243fc:	4625      	mov	r5, r4
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_len( p, start, len ) );
 c0243fe:	1e04      	subs	r4, r0, #0
 c024400:	db09      	blt.n	c024416 <mbedtls_asn1_write_oid+0x32>
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OID ) );
 c024402:	2206      	movs	r2, #6
 c024404:	4639      	mov	r1, r7
 c024406:	4630      	mov	r0, r6
 c024408:	f7ff ff89 	bl	c02431e <mbedtls_asn1_write_tag>
 c02440c:	2800      	cmp	r0, #0
 c02440e:	bfb2      	itee	lt
 c024410:	4604      	movlt	r4, r0
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_len( p, start, len ) );
 c024412:	1964      	addge	r4, r4, r5
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OID ) );
 c024414:	1824      	addge	r4, r4, r0

    return( (int) len );
}
 c024416:	4620      	mov	r0, r4
 c024418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0c02441a <mbedtls_asn1_write_int>:

    return( (int) len );
}

int mbedtls_asn1_write_int( unsigned char **p, unsigned char *start, int val )
{
 c02441a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len = 0;

    if( *p - start < 1 )
 c02441c:	6803      	ldr	r3, [r0, #0]
{
 c02441e:	460f      	mov	r7, r1
    if( *p - start < 1 )
 c024420:	1a59      	subs	r1, r3, r1
 c024422:	2900      	cmp	r1, #0
{
 c024424:	4605      	mov	r5, r0
    if( *p - start < 1 )
 c024426:	dc03      	bgt.n	c024430 <mbedtls_asn1_write_int+0x16>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 c024428:	f06f 046b 	mvn.w	r4, #107	; 0x6b

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );

    return( (int) len );
}
 c02442c:	4620      	mov	r0, r4
 c02442e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *--(*p) = val;
 c024430:	1e59      	subs	r1, r3, #1
    if( val > 0 && **p & 0x80 )
 c024432:	2a00      	cmp	r2, #0
    *--(*p) = val;
 c024434:	6001      	str	r1, [r0, #0]
 c024436:	f803 2c01 	strb.w	r2, [r3, #-1]
    if( val > 0 && **p & 0x80 )
 c02443a:	dd1f      	ble.n	c02447c <mbedtls_asn1_write_int+0x62>
 c02443c:	6803      	ldr	r3, [r0, #0]
 c02443e:	f993 2000 	ldrsb.w	r2, [r3]
 c024442:	2a00      	cmp	r2, #0
 c024444:	da1a      	bge.n	c02447c <mbedtls_asn1_write_int+0x62>
        if( *p - start < 1 )
 c024446:	1bda      	subs	r2, r3, r7
 c024448:	2a00      	cmp	r2, #0
 c02444a:	dded      	ble.n	c024428 <mbedtls_asn1_write_int+0xe>
        *--(*p) = 0x00;
 c02444c:	1e5a      	subs	r2, r3, #1
 c02444e:	6002      	str	r2, [r0, #0]
 c024450:	2200      	movs	r2, #0
        len += 1;
 c024452:	2602      	movs	r6, #2
        *--(*p) = 0x00;
 c024454:	f803 2c01 	strb.w	r2, [r3, #-1]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 c024458:	4632      	mov	r2, r6
 c02445a:	4639      	mov	r1, r7
 c02445c:	4628      	mov	r0, r5
 c02445e:	f7ff feea 	bl	c024236 <mbedtls_asn1_write_len>
 c024462:	1e04      	subs	r4, r0, #0
 c024464:	dbe2      	blt.n	c02442c <mbedtls_asn1_write_int+0x12>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 c024466:	2202      	movs	r2, #2
 c024468:	4639      	mov	r1, r7
 c02446a:	4628      	mov	r0, r5
 c02446c:	f7ff ff57 	bl	c02431e <mbedtls_asn1_write_tag>
 c024470:	2800      	cmp	r0, #0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 c024472:	bfa6      	itte	ge
 c024474:	19a4      	addge	r4, r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 c024476:	1824      	addge	r4, r4, r0
 c024478:	4604      	movlt	r4, r0
 c02447a:	e7d7      	b.n	c02442c <mbedtls_asn1_write_int+0x12>
    len += 1;
 c02447c:	2601      	movs	r6, #1
 c02447e:	e7eb      	b.n	c024458 <mbedtls_asn1_write_int+0x3e>

0c024480 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 c024480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 c024484:	2700      	movs	r7, #0
 c024486:	463c      	mov	r4, r7
 c024488:	46bc      	mov	ip, r7
{
 c02448a:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 c02448e:	f8df 8110 	ldr.w	r8, [pc, #272]	; c0245a0 <mbedtls_base64_decode+0x120>
    for( i = n = j = 0; i < slen; i++ )
 c024492:	45f4      	cmp	ip, lr
 c024494:	4665      	mov	r5, ip
 c024496:	d229      	bcs.n	c0244ec <mbedtls_base64_decode+0x6c>
        while( i < slen && src[i] == ' ' )
 c024498:	5d5e      	ldrb	r6, [r3, r5]
 c02449a:	2e20      	cmp	r6, #32
 c02449c:	d023      	beq.n	c0244e6 <mbedtls_base64_decode+0x66>
        if( ( slen - i ) >= 2 &&
 c02449e:	ebae 0905 	sub.w	r9, lr, r5
 c0244a2:	f1b9 0f01 	cmp.w	r9, #1
 c0244a6:	d025      	beq.n	c0244f4 <mbedtls_base64_decode+0x74>
 c0244a8:	2e0d      	cmp	r6, #13
 c0244aa:	d123      	bne.n	c0244f4 <mbedtls_base64_decode+0x74>
            src[i] == '\r' && src[i + 1] == '\n' )
 c0244ac:	eb03 0905 	add.w	r9, r3, r5
 c0244b0:	f899 9001 	ldrb.w	r9, [r9, #1]
 c0244b4:	f1b9 0f0a 	cmp.w	r9, #10
        if( src[i] == '\n' )
 c0244b8:	d012      	beq.n	c0244e0 <mbedtls_base64_decode+0x60>
        if( x != 0 )
 c0244ba:	4565      	cmp	r5, ip
 c0244bc:	d16c      	bne.n	c024598 <mbedtls_base64_decode+0x118>
        if( src[i] == '=' && ++j > 2 )
 c0244be:	2e3d      	cmp	r6, #61	; 0x3d
 c0244c0:	d102      	bne.n	c0244c8 <mbedtls_base64_decode+0x48>
 c0244c2:	3701      	adds	r7, #1
 c0244c4:	2f02      	cmp	r7, #2
 c0244c6:	d867      	bhi.n	c024598 <mbedtls_base64_decode+0x118>
        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 c0244c8:	f016 0f80 	tst.w	r6, #128	; 0x80
 c0244cc:	d164      	bne.n	c024598 <mbedtls_base64_decode+0x118>
 c0244ce:	f818 6006 	ldrb.w	r6, [r8, r6]
 c0244d2:	2e7f      	cmp	r6, #127	; 0x7f
 c0244d4:	d060      	beq.n	c024598 <mbedtls_base64_decode+0x118>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 c0244d6:	2e3f      	cmp	r6, #63	; 0x3f
 c0244d8:	d801      	bhi.n	c0244de <mbedtls_base64_decode+0x5e>
 c0244da:	2f00      	cmp	r7, #0
 c0244dc:	d15c      	bne.n	c024598 <mbedtls_base64_decode+0x118>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 c0244de:	3401      	adds	r4, #1
    for( i = n = j = 0; i < slen; i++ )
 c0244e0:	f105 0c01 	add.w	ip, r5, #1
 c0244e4:	e7d5      	b.n	c024492 <mbedtls_base64_decode+0x12>
            ++i;
 c0244e6:	3501      	adds	r5, #1
        while( i < slen && src[i] == ' ' )
 c0244e8:	45ae      	cmp	lr, r5
 c0244ea:	d1d5      	bne.n	c024498 <mbedtls_base64_decode+0x18>
    }

    if( n == 0 )
 c0244ec:	b924      	cbnz	r4, c0244f8 <mbedtls_base64_decode+0x78>
    {
        *olen = 0;
 c0244ee:	6014      	str	r4, [r2, #0]
        }
    }

    *olen = p - dst;

    return( 0 );
 c0244f0:	2000      	movs	r0, #0
 c0244f2:	e021      	b.n	c024538 <mbedtls_base64_decode+0xb8>
        if( src[i] == '\n' )
 c0244f4:	2e0a      	cmp	r6, #10
 c0244f6:	e7df      	b.n	c0244b8 <mbedtls_base64_decode+0x38>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 c0244f8:	2606      	movs	r6, #6
 c0244fa:	f004 0c07 	and.w	ip, r4, #7
 c0244fe:	08e4      	lsrs	r4, r4, #3
 c024500:	fb06 fc0c 	mul.w	ip, r6, ip
 c024504:	4374      	muls	r4, r6
 c024506:	f10c 0c07 	add.w	ip, ip, #7
 c02450a:	1be4      	subs	r4, r4, r7
    n -= j;
 c02450c:	eb04 04dc 	add.w	r4, r4, ip, lsr #3
    if( dst == NULL || dlen < n )
 c024510:	b178      	cbz	r0, c024532 <mbedtls_base64_decode+0xb2>
 c024512:	428c      	cmp	r4, r1
 c024514:	d80d      	bhi.n	c024532 <mbedtls_base64_decode+0xb2>
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 c024516:	2700      	movs	r7, #0
    if( dst == NULL || dlen < n )
 c024518:	4601      	mov	r1, r0
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 c02451a:	2603      	movs	r6, #3
 c02451c:	463c      	mov	r4, r7
        j -= ( base64_dec_map[*src] == 64 );
 c02451e:	f8df e080 	ldr.w	lr, [pc, #128]	; c0245a0 <mbedtls_base64_decode+0x120>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 c024522:	f8df 8080 	ldr.w	r8, [pc, #128]	; c0245a4 <mbedtls_base64_decode+0x124>
 c024526:	441d      	add	r5, r3
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 c024528:	429d      	cmp	r5, r3
 c02452a:	d107      	bne.n	c02453c <mbedtls_base64_decode+0xbc>
    *olen = p - dst;
 c02452c:	1a09      	subs	r1, r1, r0
 c02452e:	6011      	str	r1, [r2, #0]
 c024530:	e7de      	b.n	c0244f0 <mbedtls_base64_decode+0x70>
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 c024532:	f06f 0029 	mvn.w	r0, #41	; 0x29
        *olen = n;
 c024536:	6014      	str	r4, [r2, #0]
}
 c024538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 c02453c:	f813 9b01 	ldrb.w	r9, [r3], #1
 c024540:	f1a9 0c0a 	sub.w	ip, r9, #10
 c024544:	fa5f fc8c 	uxtb.w	ip, ip
 c024548:	f1bc 0f16 	cmp.w	ip, #22
 c02454c:	d804      	bhi.n	c024558 <mbedtls_base64_decode+0xd8>
 c02454e:	fa28 fc0c 	lsr.w	ip, r8, ip
 c024552:	f01c 0f01 	tst.w	ip, #1
 c024556:	d1e7      	bne.n	c024528 <mbedtls_base64_decode+0xa8>
        j -= ( base64_dec_map[*src] == 64 );
 c024558:	f81e c009 	ldrb.w	ip, [lr, r9]
        if( ++n == 4 )
 c02455c:	3401      	adds	r4, #1
        j -= ( base64_dec_map[*src] == 64 );
 c02455e:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 c024562:	bf08      	it	eq
 c024564:	3e01      	subeq	r6, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 c024566:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
        if( ++n == 4 )
 c02456a:	2c04      	cmp	r4, #4
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 c02456c:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
        if( ++n == 4 )
 c024570:	d1da      	bne.n	c024528 <mbedtls_base64_decode+0xa8>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 c024572:	b17e      	cbz	r6, c024594 <mbedtls_base64_decode+0x114>
 c024574:	0c3c      	lsrs	r4, r7, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 c024576:	2e01      	cmp	r6, #1
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 c024578:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 c02457a:	d102      	bne.n	c024582 <mbedtls_base64_decode+0x102>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 c02457c:	3101      	adds	r1, #1
            n = 0;
 c02457e:	2400      	movs	r4, #0
 c024580:	e7d2      	b.n	c024528 <mbedtls_base64_decode+0xa8>
            if( j > 2 ) *p++ = (unsigned char)( x       );
 c024582:	2e02      	cmp	r6, #2
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 c024584:	ea4f 2417 	mov.w	r4, r7, lsr #8
 c024588:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 c02458a:	bf16      	itet	ne
 c02458c:	708f      	strbne	r7, [r1, #2]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 c02458e:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 c024590:	3103      	addne	r1, #3
 c024592:	e7f4      	b.n	c02457e <mbedtls_base64_decode+0xfe>
            n = 0;
 c024594:	4634      	mov	r4, r6
 c024596:	e7c7      	b.n	c024528 <mbedtls_base64_decode+0xa8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 c024598:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 c02459c:	e7cc      	b.n	c024538 <mbedtls_base64_decode+0xb8>
 c02459e:	bf00      	nop
 c0245a0:	0c0350d2 	.word	0x0c0350d2
 c0245a4:	00400009 	.word	0x00400009

0c0245a8 <mpi_get_digit>:
 */
static int mpi_get_digit( mbedtls_mpi_uint *d, int radix, char c )
{
    *d = 255;

    if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;
 c0245a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
{
 c0245ac:	b510      	push	{r4, lr}
    if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;
 c0245ae:	b2dc      	uxtb	r4, r3
 c0245b0:	2c09      	cmp	r4, #9
    *d = 255;
 c0245b2:	bf88      	it	hi
 c0245b4:	23ff      	movhi	r3, #255	; 0xff
    if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;
 c0245b6:	6003      	str	r3, [r0, #0]
    if( c >= 0x41 && c <= 0x46 ) *d = c - 0x37;
 c0245b8:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 c0245bc:	2b05      	cmp	r3, #5
 c0245be:	bf9c      	itt	ls
 c0245c0:	f1a2 0337 	subls.w	r3, r2, #55	; 0x37
 c0245c4:	6003      	strls	r3, [r0, #0]
    if( c >= 0x61 && c <= 0x66 ) *d = c - 0x57;
 c0245c6:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 c0245ca:	2b05      	cmp	r3, #5
 c0245cc:	bf9c      	itt	ls
 c0245ce:	3a57      	subls	r2, #87	; 0x57
 c0245d0:	6002      	strls	r2, [r0, #0]

    if( *d >= (mbedtls_mpi_uint) radix )
 c0245d2:	6803      	ldr	r3, [r0, #0]
 c0245d4:	428b      	cmp	r3, r1
        return( MBEDTLS_ERR_MPI_INVALID_CHARACTER );

    return( 0 );
}
 c0245d6:	bf2c      	ite	cs
 c0245d8:	f06f 0005 	mvncs.w	r0, #5
 c0245dc:	2000      	movcc	r0, #0
 c0245de:	bd10      	pop	{r4, pc}

0c0245e0 <mpi_sub_hlp>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 c0245e0:	2300      	movs	r3, #0
{
 c0245e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    for( i = c = 0; i < n; i++, s++, d++ )
 c0245e4:	461c      	mov	r4, r3
 c0245e6:	1f16      	subs	r6, r2, #4
 c0245e8:	4284      	cmp	r4, r0
 c0245ea:	d103      	bne.n	c0245f4 <mpi_sub_hlp+0x14>
 c0245ec:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 c0245f0:	b9bb      	cbnz	r3, c024622 <mpi_sub_hlp+0x42>
    {
        z = ( *d < c ); *d -= c;
        c = z; d++;
    }
}
 c0245f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        z = ( *d <  c );     *d -=  c;
 c0245f4:	f8d6 c004 	ldr.w	ip, [r6, #4]
 c0245f8:	ebac 0503 	sub.w	r5, ip, r3
 c0245fc:	f846 5f04 	str.w	r5, [r6, #4]!
        c = ( *d < *s ) + z; *d -= *s;
 c024600:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
    for( i = c = 0; i < n; i++, s++, d++ )
 c024604:	3401      	adds	r4, #1
        c = ( *d < *s ) + z; *d -= *s;
 c024606:	42bd      	cmp	r5, r7
 c024608:	bf2c      	ite	cs
 c02460a:	f04f 0e00 	movcs.w	lr, #0
 c02460e:	f04f 0e01 	movcc.w	lr, #1
 c024612:	1bed      	subs	r5, r5, r7
 c024614:	459c      	cmp	ip, r3
 c024616:	bf2c      	ite	cs
 c024618:	4673      	movcs	r3, lr
 c02461a:	f10e 0301 	addcc.w	r3, lr, #1
 c02461e:	6035      	str	r5, [r6, #0]
 c024620:	e7e2      	b.n	c0245e8 <mpi_sub_hlp+0x8>
        z = ( *d < c ); *d -= c;
 c024622:	6811      	ldr	r1, [r2, #0]
 c024624:	1ac8      	subs	r0, r1, r3
        c = z; d++;
 c024626:	4299      	cmp	r1, r3
        z = ( *d < c ); *d -= c;
 c024628:	f842 0b04 	str.w	r0, [r2], #4
        c = z; d++;
 c02462c:	bf2c      	ite	cs
 c02462e:	2300      	movcs	r3, #0
 c024630:	2301      	movcc	r3, #1
 c024632:	e7dd      	b.n	c0245f0 <mpi_sub_hlp+0x10>

0c024634 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 c024634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 c024638:	4684      	mov	ip, r0
 c02463a:	460d      	mov	r5, r1
    mbedtls_mpi_uint c = 0, t = 0;
 c02463c:	f04f 0e00 	mov.w	lr, #0
 c024640:	f102 0440 	add.w	r4, r2, #64	; 0x40
    for( ; i >= 16; i -= 16 )
 c024644:	f1bc 0f0f 	cmp.w	ip, #15
 c024648:	f854 8c40 	ldr.w	r8, [r4, #-64]
 c02464c:	f105 0540 	add.w	r5, r5, #64	; 0x40
 c024650:	f104 0440 	add.w	r4, r4, #64	; 0x40
 c024654:	f200 80ba 	bhi.w	c0247cc <mpi_mul_hlp+0x198>
 c024658:	f06f 040f 	mvn.w	r4, #15
 c02465c:	ea4f 1c10 	mov.w	ip, r0, lsr #4
 c024660:	fb04 000c 	mla	r0, r4, ip, r0
 c024664:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 c024668:	2807      	cmp	r0, #7
 c02466a:	eb01 050c 	add.w	r5, r1, ip
 c02466e:	eb02 040c 	add.w	r4, r2, ip
 c024672:	f240 8093 	bls.w	c02479c <mpi_mul_hlp+0x168>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 c024676:	f851 600c 	ldr.w	r6, [r1, ip]
    for( ; i >= 8; i -= 8 )
 c02467a:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
 c02467c:	fba3 6706 	umull	r6, r7, r3, r6
 c024680:	eb1e 0e06 	adds.w	lr, lr, r6
 c024684:	bf2c      	ite	cs
 c024686:	f04f 0901 	movcs.w	r9, #1
 c02468a:	f04f 0900 	movcc.w	r9, #0
 c02468e:	eb18 010e 	adds.w	r1, r8, lr
 c024692:	f842 100c 	str.w	r1, [r2, ip]
 c024696:	bf2c      	ite	cs
 c024698:	2201      	movcs	r2, #1
 c02469a:	2200      	movcc	r2, #0
 c02469c:	686e      	ldr	r6, [r5, #4]
 c02469e:	44b9      	add	r9, r7
 c0246a0:	fba3 6706 	umull	r6, r7, r3, r6
 c0246a4:	444a      	add	r2, r9
 c0246a6:	1992      	adds	r2, r2, r6
 c0246a8:	bf2c      	ite	cs
 c0246aa:	2101      	movcs	r1, #1
 c0246ac:	2100      	movcc	r1, #0
 c0246ae:	6866      	ldr	r6, [r4, #4]
 c0246b0:	eb01 0c07 	add.w	ip, r1, r7
 c0246b4:	1992      	adds	r2, r2, r6
 c0246b6:	f04f 0100 	mov.w	r1, #0
 c0246ba:	bf28      	it	cs
 c0246bc:	2101      	movcs	r1, #1
 c0246be:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
 c0246c0:	68ae      	ldr	r6, [r5, #8]
        MULADDC_CORE   MULADDC_CORE
 c0246c2:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
 c0246c4:	fba3 6706 	umull	r6, r7, r3, r6
 c0246c8:	1989      	adds	r1, r1, r6
 c0246ca:	bf2c      	ite	cs
 c0246cc:	2201      	movcs	r2, #1
 c0246ce:	2200      	movcc	r2, #0
 c0246d0:	68a6      	ldr	r6, [r4, #8]
 c0246d2:	eb02 0c07 	add.w	ip, r2, r7
 c0246d6:	1989      	adds	r1, r1, r6
 c0246d8:	f04f 0200 	mov.w	r2, #0
 c0246dc:	bf28      	it	cs
 c0246de:	2201      	movcs	r2, #1
 c0246e0:	60a1      	str	r1, [r4, #8]
 c0246e2:	68ee      	ldr	r6, [r5, #12]
 c0246e4:	4462      	add	r2, ip
 c0246e6:	fba3 6706 	umull	r6, r7, r3, r6
 c0246ea:	1992      	adds	r2, r2, r6
 c0246ec:	bf2c      	ite	cs
 c0246ee:	2101      	movcs	r1, #1
 c0246f0:	2100      	movcc	r1, #0
 c0246f2:	68e6      	ldr	r6, [r4, #12]
 c0246f4:	eb01 0c07 	add.w	ip, r1, r7
 c0246f8:	1992      	adds	r2, r2, r6
 c0246fa:	f04f 0100 	mov.w	r1, #0
 c0246fe:	bf28      	it	cs
 c024700:	2101      	movcs	r1, #1
 c024702:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
 c024704:	692e      	ldr	r6, [r5, #16]
        MULADDC_CORE   MULADDC_CORE
 c024706:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
 c024708:	fba3 6706 	umull	r6, r7, r3, r6
 c02470c:	1989      	adds	r1, r1, r6
 c02470e:	bf2c      	ite	cs
 c024710:	2201      	movcs	r2, #1
 c024712:	2200      	movcc	r2, #0
 c024714:	6926      	ldr	r6, [r4, #16]
 c024716:	eb02 0c07 	add.w	ip, r2, r7
 c02471a:	1989      	adds	r1, r1, r6
 c02471c:	f04f 0200 	mov.w	r2, #0
 c024720:	bf28      	it	cs
 c024722:	2201      	movcs	r2, #1
 c024724:	6121      	str	r1, [r4, #16]
 c024726:	696e      	ldr	r6, [r5, #20]
 c024728:	4462      	add	r2, ip
 c02472a:	fba3 6706 	umull	r6, r7, r3, r6
 c02472e:	1992      	adds	r2, r2, r6
 c024730:	bf2c      	ite	cs
 c024732:	2101      	movcs	r1, #1
 c024734:	2100      	movcc	r1, #0
 c024736:	6966      	ldr	r6, [r4, #20]
 c024738:	eb01 0c07 	add.w	ip, r1, r7
 c02473c:	1992      	adds	r2, r2, r6
 c02473e:	f04f 0100 	mov.w	r1, #0
 c024742:	bf28      	it	cs
 c024744:	2101      	movcs	r1, #1
 c024746:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
 c024748:	69ae      	ldr	r6, [r5, #24]
        MULADDC_CORE   MULADDC_CORE
 c02474a:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
 c02474c:	fba3 6706 	umull	r6, r7, r3, r6
 c024750:	1989      	adds	r1, r1, r6
 c024752:	bf2c      	ite	cs
 c024754:	2201      	movcs	r2, #1
 c024756:	2200      	movcc	r2, #0
 c024758:	69a6      	ldr	r6, [r4, #24]
 c02475a:	eb02 0e07 	add.w	lr, r2, r7
 c02475e:	1989      	adds	r1, r1, r6
 c024760:	f04f 0200 	mov.w	r2, #0
 c024764:	bf28      	it	cs
 c024766:	2201      	movcs	r2, #1
 c024768:	61a1      	str	r1, [r4, #24]
 c02476a:	69ee      	ldr	r6, [r5, #28]
 c02476c:	4472      	add	r2, lr
 c02476e:	fba3 6706 	umull	r6, r7, r3, r6
 c024772:	1992      	adds	r2, r2, r6
 c024774:	bf2c      	ite	cs
 c024776:	f04f 0e01 	movcs.w	lr, #1
 c02477a:	f04f 0e00 	movcc.w	lr, #0
 c02477e:	f105 0c20 	add.w	ip, r5, #32
 c024782:	69e5      	ldr	r5, [r4, #28]
 c024784:	eb0e 0107 	add.w	r1, lr, r7
 c024788:	1952      	adds	r2, r2, r5
 c02478a:	f04f 0e00 	mov.w	lr, #0
 c02478e:	bf28      	it	cs
 c024790:	f04f 0e01 	movcs.w	lr, #1
 c024794:	4665      	mov	r5, ip
 c024796:	61e2      	str	r2, [r4, #28]
 c024798:	448e      	add	lr, r1
 c02479a:	3420      	adds	r4, #32
 c02479c:	4621      	mov	r1, r4
 c02479e:	0080      	lsls	r0, r0, #2
 c0247a0:	eb05 0c00 	add.w	ip, r5, r0
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 c0247a4:	4565      	cmp	r5, ip
 c0247a6:	f851 2b04 	ldr.w	r2, [r1], #4
 c0247aa:	f040 819e 	bne.w	c024aea <mpi_mul_hlp+0x4b6>
 c0247ae:	4404      	add	r4, r0
 c0247b0:	6823      	ldr	r3, [r4, #0]
 c0247b2:	2200      	movs	r2, #0
 c0247b4:	eb13 030e 	adds.w	r3, r3, lr
 c0247b8:	bf28      	it	cs
 c0247ba:	2201      	movcs	r2, #1
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 c0247bc:	f844 3b04 	str.w	r3, [r4], #4
 c0247c0:	f04f 0e01 	mov.w	lr, #1
    }
    while( c != 0 );
 c0247c4:	2a00      	cmp	r2, #0
 c0247c6:	d1f3      	bne.n	c0247b0 <mpi_mul_hlp+0x17c>
}
 c0247c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MULADDC_CORE   MULADDC_CORE
 c0247cc:	f855 6c40 	ldr.w	r6, [r5, #-64]
    for( ; i >= 16; i -= 16 )
 c0247d0:	f1ac 0c10 	sub.w	ip, ip, #16
        MULADDC_CORE   MULADDC_CORE
 c0247d4:	fba3 6706 	umull	r6, r7, r3, r6
 c0247d8:	eb1e 0e06 	adds.w	lr, lr, r6
 c0247dc:	bf2c      	ite	cs
 c0247de:	f04f 0901 	movcs.w	r9, #1
 c0247e2:	f04f 0900 	movcc.w	r9, #0
 c0247e6:	eb1e 0608 	adds.w	r6, lr, r8
 c0247ea:	bf2c      	ite	cs
 c0247ec:	f04f 0801 	movcs.w	r8, #1
 c0247f0:	f04f 0800 	movcc.w	r8, #0
 c0247f4:	f844 6c80 	str.w	r6, [r4, #-128]
 c0247f8:	f855 6c3c 	ldr.w	r6, [r5, #-60]
 c0247fc:	44b9      	add	r9, r7
 c0247fe:	fba3 6706 	umull	r6, r7, r3, r6
 c024802:	44c8      	add	r8, r9
 c024804:	eb18 0806 	adds.w	r8, r8, r6
 c024808:	bf2c      	ite	cs
 c02480a:	f04f 0e01 	movcs.w	lr, #1
 c02480e:	f04f 0e00 	movcc.w	lr, #0
 c024812:	f854 6c7c 	ldr.w	r6, [r4, #-124]
 c024816:	eb0e 0907 	add.w	r9, lr, r7
 c02481a:	eb16 0608 	adds.w	r6, r6, r8
 c02481e:	f04f 0e00 	mov.w	lr, #0
 c024822:	bf28      	it	cs
 c024824:	f04f 0e01 	movcs.w	lr, #1
 c024828:	f844 6c7c 	str.w	r6, [r4, #-124]
        MULADDC_CORE   MULADDC_CORE
 c02482c:	f855 6c38 	ldr.w	r6, [r5, #-56]
        MULADDC_CORE   MULADDC_CORE
 c024830:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
 c024832:	fba3 6706 	umull	r6, r7, r3, r6
 c024836:	eb1e 0e06 	adds.w	lr, lr, r6
 c02483a:	bf2c      	ite	cs
 c02483c:	f04f 0801 	movcs.w	r8, #1
 c024840:	f04f 0800 	movcc.w	r8, #0
 c024844:	eb08 0907 	add.w	r9, r8, r7
 c024848:	f854 7c78 	ldr.w	r7, [r4, #-120]
 c02484c:	f04f 0800 	mov.w	r8, #0
 c024850:	eb17 070e 	adds.w	r7, r7, lr
 c024854:	bf28      	it	cs
 c024856:	f04f 0801 	movcs.w	r8, #1
 c02485a:	f844 7c78 	str.w	r7, [r4, #-120]
 c02485e:	f855 6c34 	ldr.w	r6, [r5, #-52]
 c024862:	44c8      	add	r8, r9
 c024864:	fba3 6706 	umull	r6, r7, r3, r6
 c024868:	eb18 0806 	adds.w	r8, r8, r6
 c02486c:	bf2c      	ite	cs
 c02486e:	f04f 0e01 	movcs.w	lr, #1
 c024872:	f04f 0e00 	movcc.w	lr, #0
 c024876:	f854 6c74 	ldr.w	r6, [r4, #-116]
 c02487a:	eb0e 0907 	add.w	r9, lr, r7
 c02487e:	eb16 0608 	adds.w	r6, r6, r8
 c024882:	f04f 0e00 	mov.w	lr, #0
 c024886:	bf28      	it	cs
 c024888:	f04f 0e01 	movcs.w	lr, #1
 c02488c:	f844 6c74 	str.w	r6, [r4, #-116]
        MULADDC_CORE   MULADDC_CORE
 c024890:	f855 6c30 	ldr.w	r6, [r5, #-48]
        MULADDC_CORE   MULADDC_CORE
 c024894:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
 c024896:	fba3 6706 	umull	r6, r7, r3, r6
 c02489a:	eb1e 0e06 	adds.w	lr, lr, r6
 c02489e:	bf2c      	ite	cs
 c0248a0:	f04f 0801 	movcs.w	r8, #1
 c0248a4:	f04f 0800 	movcc.w	r8, #0
 c0248a8:	eb08 0907 	add.w	r9, r8, r7
 c0248ac:	f854 7c70 	ldr.w	r7, [r4, #-112]
 c0248b0:	f04f 0800 	mov.w	r8, #0
 c0248b4:	eb17 070e 	adds.w	r7, r7, lr
 c0248b8:	bf28      	it	cs
 c0248ba:	f04f 0801 	movcs.w	r8, #1
 c0248be:	f844 7c70 	str.w	r7, [r4, #-112]
 c0248c2:	f855 6c2c 	ldr.w	r6, [r5, #-44]
 c0248c6:	44c8      	add	r8, r9
 c0248c8:	fba3 6706 	umull	r6, r7, r3, r6
 c0248cc:	eb18 0806 	adds.w	r8, r8, r6
 c0248d0:	bf2c      	ite	cs
 c0248d2:	f04f 0e01 	movcs.w	lr, #1
 c0248d6:	f04f 0e00 	movcc.w	lr, #0
 c0248da:	f854 6c6c 	ldr.w	r6, [r4, #-108]
 c0248de:	eb0e 0907 	add.w	r9, lr, r7
 c0248e2:	eb16 0608 	adds.w	r6, r6, r8
 c0248e6:	f04f 0e00 	mov.w	lr, #0
 c0248ea:	bf28      	it	cs
 c0248ec:	f04f 0e01 	movcs.w	lr, #1
 c0248f0:	f844 6c6c 	str.w	r6, [r4, #-108]
        MULADDC_CORE   MULADDC_CORE
 c0248f4:	f855 6c28 	ldr.w	r6, [r5, #-40]
        MULADDC_CORE   MULADDC_CORE
 c0248f8:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
 c0248fa:	fba3 6706 	umull	r6, r7, r3, r6
 c0248fe:	eb1e 0e06 	adds.w	lr, lr, r6
 c024902:	bf2c      	ite	cs
 c024904:	f04f 0801 	movcs.w	r8, #1
 c024908:	f04f 0800 	movcc.w	r8, #0
 c02490c:	eb08 0907 	add.w	r9, r8, r7
 c024910:	f854 7c68 	ldr.w	r7, [r4, #-104]
 c024914:	f04f 0800 	mov.w	r8, #0
 c024918:	eb17 070e 	adds.w	r7, r7, lr
 c02491c:	bf28      	it	cs
 c02491e:	f04f 0801 	movcs.w	r8, #1
 c024922:	f844 7c68 	str.w	r7, [r4, #-104]
 c024926:	f855 6c24 	ldr.w	r6, [r5, #-36]
 c02492a:	44c8      	add	r8, r9
 c02492c:	fba3 6706 	umull	r6, r7, r3, r6
 c024930:	eb18 0806 	adds.w	r8, r8, r6
 c024934:	bf2c      	ite	cs
 c024936:	f04f 0e01 	movcs.w	lr, #1
 c02493a:	f04f 0e00 	movcc.w	lr, #0
 c02493e:	f854 6c64 	ldr.w	r6, [r4, #-100]
 c024942:	eb0e 0907 	add.w	r9, lr, r7
 c024946:	eb16 0608 	adds.w	r6, r6, r8
 c02494a:	f04f 0e00 	mov.w	lr, #0
 c02494e:	bf28      	it	cs
 c024950:	f04f 0e01 	movcs.w	lr, #1
 c024954:	f844 6c64 	str.w	r6, [r4, #-100]
        MULADDC_CORE   MULADDC_CORE
 c024958:	f855 6c20 	ldr.w	r6, [r5, #-32]
        MULADDC_CORE   MULADDC_CORE
 c02495c:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
 c02495e:	fba3 6706 	umull	r6, r7, r3, r6
 c024962:	eb1e 0e06 	adds.w	lr, lr, r6
 c024966:	bf2c      	ite	cs
 c024968:	f04f 0801 	movcs.w	r8, #1
 c02496c:	f04f 0800 	movcc.w	r8, #0
 c024970:	eb08 0907 	add.w	r9, r8, r7
 c024974:	f854 7c60 	ldr.w	r7, [r4, #-96]
 c024978:	f04f 0800 	mov.w	r8, #0
 c02497c:	eb17 070e 	adds.w	r7, r7, lr
 c024980:	bf28      	it	cs
 c024982:	f04f 0801 	movcs.w	r8, #1
 c024986:	f844 7c60 	str.w	r7, [r4, #-96]
 c02498a:	f855 6c1c 	ldr.w	r6, [r5, #-28]
 c02498e:	44c8      	add	r8, r9
 c024990:	fba3 6706 	umull	r6, r7, r3, r6
 c024994:	eb18 0806 	adds.w	r8, r8, r6
 c024998:	bf2c      	ite	cs
 c02499a:	f04f 0e01 	movcs.w	lr, #1
 c02499e:	f04f 0e00 	movcc.w	lr, #0
 c0249a2:	f854 6c5c 	ldr.w	r6, [r4, #-92]
 c0249a6:	eb0e 0907 	add.w	r9, lr, r7
 c0249aa:	eb16 0608 	adds.w	r6, r6, r8
 c0249ae:	f04f 0e00 	mov.w	lr, #0
 c0249b2:	bf28      	it	cs
 c0249b4:	f04f 0e01 	movcs.w	lr, #1
 c0249b8:	f844 6c5c 	str.w	r6, [r4, #-92]
        MULADDC_CORE   MULADDC_CORE
 c0249bc:	f855 6c18 	ldr.w	r6, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
 c0249c0:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
 c0249c2:	fba3 6706 	umull	r6, r7, r3, r6
 c0249c6:	eb1e 0e06 	adds.w	lr, lr, r6
 c0249ca:	bf2c      	ite	cs
 c0249cc:	f04f 0801 	movcs.w	r8, #1
 c0249d0:	f04f 0800 	movcc.w	r8, #0
 c0249d4:	eb08 0907 	add.w	r9, r8, r7
 c0249d8:	f854 7c58 	ldr.w	r7, [r4, #-88]
 c0249dc:	f04f 0800 	mov.w	r8, #0
 c0249e0:	eb17 070e 	adds.w	r7, r7, lr
 c0249e4:	bf28      	it	cs
 c0249e6:	f04f 0801 	movcs.w	r8, #1
 c0249ea:	f844 7c58 	str.w	r7, [r4, #-88]
 c0249ee:	f855 6c14 	ldr.w	r6, [r5, #-20]
 c0249f2:	44c8      	add	r8, r9
 c0249f4:	fba3 6706 	umull	r6, r7, r3, r6
 c0249f8:	eb18 0806 	adds.w	r8, r8, r6
 c0249fc:	bf2c      	ite	cs
 c0249fe:	f04f 0e01 	movcs.w	lr, #1
 c024a02:	f04f 0e00 	movcc.w	lr, #0
 c024a06:	f854 6c54 	ldr.w	r6, [r4, #-84]
 c024a0a:	eb0e 0907 	add.w	r9, lr, r7
 c024a0e:	eb16 0608 	adds.w	r6, r6, r8
 c024a12:	f04f 0e00 	mov.w	lr, #0
 c024a16:	bf28      	it	cs
 c024a18:	f04f 0e01 	movcs.w	lr, #1
 c024a1c:	f844 6c54 	str.w	r6, [r4, #-84]
        MULADDC_CORE   MULADDC_CORE
 c024a20:	f855 6c10 	ldr.w	r6, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
 c024a24:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
 c024a26:	fba3 6706 	umull	r6, r7, r3, r6
 c024a2a:	eb1e 0e06 	adds.w	lr, lr, r6
 c024a2e:	bf2c      	ite	cs
 c024a30:	f04f 0801 	movcs.w	r8, #1
 c024a34:	f04f 0800 	movcc.w	r8, #0
 c024a38:	eb08 0907 	add.w	r9, r8, r7
 c024a3c:	f854 7c50 	ldr.w	r7, [r4, #-80]
 c024a40:	f04f 0800 	mov.w	r8, #0
 c024a44:	eb17 070e 	adds.w	r7, r7, lr
 c024a48:	bf28      	it	cs
 c024a4a:	f04f 0801 	movcs.w	r8, #1
 c024a4e:	f844 7c50 	str.w	r7, [r4, #-80]
 c024a52:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 c024a56:	44c8      	add	r8, r9
 c024a58:	fba3 6706 	umull	r6, r7, r3, r6
 c024a5c:	eb18 0806 	adds.w	r8, r8, r6
 c024a60:	bf2c      	ite	cs
 c024a62:	f04f 0e01 	movcs.w	lr, #1
 c024a66:	f04f 0e00 	movcc.w	lr, #0
 c024a6a:	f854 6c4c 	ldr.w	r6, [r4, #-76]
 c024a6e:	eb0e 0907 	add.w	r9, lr, r7
 c024a72:	eb16 0608 	adds.w	r6, r6, r8
 c024a76:	f04f 0e00 	mov.w	lr, #0
 c024a7a:	bf28      	it	cs
 c024a7c:	f04f 0e01 	movcs.w	lr, #1
 c024a80:	f844 6c4c 	str.w	r6, [r4, #-76]
        MULADDC_CORE   MULADDC_CORE
 c024a84:	f855 6c08 	ldr.w	r6, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
 c024a88:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
 c024a8a:	fba3 6706 	umull	r6, r7, r3, r6
 c024a8e:	eb1e 0e06 	adds.w	lr, lr, r6
 c024a92:	bf2c      	ite	cs
 c024a94:	f04f 0801 	movcs.w	r8, #1
 c024a98:	f04f 0800 	movcc.w	r8, #0
 c024a9c:	eb08 0907 	add.w	r9, r8, r7
 c024aa0:	f854 7c48 	ldr.w	r7, [r4, #-72]
 c024aa4:	f04f 0800 	mov.w	r8, #0
 c024aa8:	eb17 070e 	adds.w	r7, r7, lr
 c024aac:	bf28      	it	cs
 c024aae:	f04f 0801 	movcs.w	r8, #1
 c024ab2:	f844 7c48 	str.w	r7, [r4, #-72]
 c024ab6:	f855 6c04 	ldr.w	r6, [r5, #-4]
 c024aba:	44c8      	add	r8, r9
 c024abc:	fba3 6706 	umull	r6, r7, r3, r6
 c024ac0:	eb18 0806 	adds.w	r8, r8, r6
 c024ac4:	bf2c      	ite	cs
 c024ac6:	f04f 0e01 	movcs.w	lr, #1
 c024aca:	f04f 0e00 	movcc.w	lr, #0
 c024ace:	f854 6c44 	ldr.w	r6, [r4, #-68]
 c024ad2:	4477      	add	r7, lr
 c024ad4:	eb16 0608 	adds.w	r6, r6, r8
 c024ad8:	f04f 0e00 	mov.w	lr, #0
 c024adc:	bf28      	it	cs
 c024ade:	f04f 0e01 	movcs.w	lr, #1
 c024ae2:	f844 6c44 	str.w	r6, [r4, #-68]
 c024ae6:	44be      	add	lr, r7
 c024ae8:	e5ac      	b.n	c024644 <mpi_mul_hlp+0x10>
        MULADDC_CORE
 c024aea:	f855 6b04 	ldr.w	r6, [r5], #4
 c024aee:	fba3 7806 	umull	r7, r8, r3, r6
 c024af2:	eb1e 0e07 	adds.w	lr, lr, r7
 c024af6:	bf2c      	ite	cs
 c024af8:	2601      	movcs	r6, #1
 c024afa:	2600      	movcc	r6, #0
 c024afc:	eb1e 0202 	adds.w	r2, lr, r2
 c024b00:	bf2c      	ite	cs
 c024b02:	f04f 0e01 	movcs.w	lr, #1
 c024b06:	f04f 0e00 	movcc.w	lr, #0
 c024b0a:	4446      	add	r6, r8
 c024b0c:	f841 2c04 	str.w	r2, [r1, #-4]
 c024b10:	44b6      	add	lr, r6
 c024b12:	e647      	b.n	c0247a4 <mpi_mul_hlp+0x170>

0c024b14 <mpi_bigendian_to_host.part.1>:
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 c024b14:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 c024b18:	3901      	subs	r1, #1
 c024b1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 c024b1e:	4288      	cmp	r0, r1
 c024b20:	4603      	mov	r3, r0
 c024b22:	d900      	bls.n	c024b26 <mpi_bigendian_to_host.part.1+0x12>
}
 c024b24:	4770      	bx	lr
            return( __builtin_bswap32(x) );
 c024b26:	681b      	ldr	r3, [r3, #0]
 c024b28:	680a      	ldr	r2, [r1, #0]
 c024b2a:	ba1b      	rev	r3, r3
 c024b2c:	ba12      	rev	r2, r2
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
 c024b2e:	f840 2b04 	str.w	r2, [r0], #4
        *cur_limb_right = tmp;
 c024b32:	f841 3904 	str.w	r3, [r1], #-4
 c024b36:	e7f2      	b.n	c024b1e <mpi_bigendian_to_host.part.1+0xa>

0c024b38 <mbedtls_mpi_mod_int.part.5>:
    }

    /*
     * general case
     */
    for( i = A->n, y = 0; i > 0; i-- )
 c024b38:	2300      	movs	r3, #0
int mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_sint b )
 c024b3a:	b5f0      	push	{r4, r5, r6, r7, lr}
    for( i = A->n, y = 0; i > 0; i-- )
 c024b3c:	684e      	ldr	r6, [r1, #4]
 c024b3e:	00b7      	lsls	r7, r6, #2
 c024b40:	3f04      	subs	r7, #4
 c024b42:	b93e      	cbnz	r6, c024b54 <mbedtls_mpi_mod_int.part.5+0x1c>

    /*
     * If A is negative, then the current y represents a negative value.
     * Flipping it to the positive side.
     */
    if( A->s < 0 && y != 0 )
 c024b44:	6809      	ldr	r1, [r1, #0]
 c024b46:	2900      	cmp	r1, #0
 c024b48:	da01      	bge.n	c024b4e <mbedtls_mpi_mod_int.part.5+0x16>
 c024b4a:	b103      	cbz	r3, c024b4e <mbedtls_mpi_mod_int.part.5+0x16>
        y = b - y;
 c024b4c:	1ad3      	subs	r3, r2, r3

    *r = y;
 c024b4e:	6003      	str	r3, [r0, #0]

    return( 0 );
}
 c024b50:	2000      	movs	r0, #0
 c024b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        x  = A->p[i - 1];
 c024b54:	688c      	ldr	r4, [r1, #8]
    for( i = A->n, y = 0; i > 0; i-- )
 c024b56:	3e01      	subs	r6, #1
        x  = A->p[i - 1];
 c024b58:	59e5      	ldr	r5, [r4, r7]
        y  = ( y << biH ) | ( x >> biH );
 c024b5a:	0c2c      	lsrs	r4, r5, #16
 c024b5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
        y  = ( y << biH ) | ( x >> biH );
 c024b60:	fbb3 f4f2 	udiv	r4, r3, r2
 c024b64:	fb02 3314 	mls	r3, r2, r4, r3
 c024b68:	b2ac      	uxth	r4, r5
 c024b6a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 c024b6e:	fbb4 f3f2 	udiv	r3, r4, r2
 c024b72:	fb02 4313 	mls	r3, r2, r3, r4
 c024b76:	e7e3      	b.n	c024b40 <mbedtls_mpi_mod_int.part.5+0x8>

0c024b78 <mbedtls_mpi_init>:
    X->n = 0;
 c024b78:	2300      	movs	r3, #0
 c024b7a:	2201      	movs	r2, #1
    X->p = NULL;
 c024b7c:	6083      	str	r3, [r0, #8]
    X->n = 0;
 c024b7e:	e9c0 2300 	strd	r2, r3, [r0]
}
 c024b82:	4770      	bx	lr

0c024b84 <mbedtls_mpi_free>:
{
 c024b84:	b510      	push	{r4, lr}
    if( X == NULL )
 c024b86:	4604      	mov	r4, r0
 c024b88:	b168      	cbz	r0, c024ba6 <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
 c024b8a:	6880      	ldr	r0, [r0, #8]
 c024b8c:	b130      	cbz	r0, c024b9c <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
 c024b8e:	6861      	ldr	r1, [r4, #4]
 c024b90:	0089      	lsls	r1, r1, #2
 c024b92:	f005 fb85 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 c024b96:	68a0      	ldr	r0, [r4, #8]
 c024b98:	f005 fb72 	bl	c02a280 <mbedtls_free>
    X->n = 0;
 c024b9c:	2300      	movs	r3, #0
 c024b9e:	2201      	movs	r2, #1
 c024ba0:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
 c024ba4:	60a3      	str	r3, [r4, #8]
}
 c024ba6:	bd10      	pop	{r4, pc}

0c024ba8 <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 c024ba8:	f242 7310 	movw	r3, #10000	; 0x2710
 c024bac:	4299      	cmp	r1, r3
{
 c024bae:	b570      	push	{r4, r5, r6, lr}
 c024bb0:	4604      	mov	r4, r0
 c024bb2:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 c024bb4:	d902      	bls.n	c024bbc <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 c024bb6:	f06f 000f 	mvn.w	r0, #15
}
 c024bba:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
 c024bbc:	6843      	ldr	r3, [r0, #4]
 c024bbe:	428b      	cmp	r3, r1
 c024bc0:	d216      	bcs.n	c024bf0 <mbedtls_mpi_grow+0x48>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 c024bc2:	2104      	movs	r1, #4
 c024bc4:	4628      	mov	r0, r5
 c024bc6:	f005 fb55 	bl	c02a274 <mbedtls_calloc>
 c024bca:	4606      	mov	r6, r0
 c024bcc:	2800      	cmp	r0, #0
 c024bce:	d0f2      	beq.n	c024bb6 <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
 c024bd0:	68a1      	ldr	r1, [r4, #8]
 c024bd2:	b159      	cbz	r1, c024bec <mbedtls_mpi_grow+0x44>
            memcpy( p, X->p, X->n * ciL );
 c024bd4:	6862      	ldr	r2, [r4, #4]
 c024bd6:	0092      	lsls	r2, r2, #2
 c024bd8:	f7f2 fed1 	bl	c01797e <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 c024bdc:	6861      	ldr	r1, [r4, #4]
 c024bde:	68a0      	ldr	r0, [r4, #8]
 c024be0:	0089      	lsls	r1, r1, #2
 c024be2:	f005 fb5d 	bl	c02a2a0 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 c024be6:	68a0      	ldr	r0, [r4, #8]
 c024be8:	f005 fb4a 	bl	c02a280 <mbedtls_free>
        X->p = p;
 c024bec:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
 c024bf0:	2000      	movs	r0, #0
 c024bf2:	e7e2      	b.n	c024bba <mbedtls_mpi_grow+0x12>

0c024bf4 <mbedtls_mpi_copy>:
    if( X == Y )
 c024bf4:	4288      	cmp	r0, r1
{
 c024bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c024bf8:	4606      	mov	r6, r0
 c024bfa:	460f      	mov	r7, r1
    if( X == Y )
 c024bfc:	d003      	beq.n	c024c06 <mbedtls_mpi_copy+0x12>
    if( Y->p == NULL )
 c024bfe:	688d      	ldr	r5, [r1, #8]
 c024c00:	b91d      	cbnz	r5, c024c0a <mbedtls_mpi_copy+0x16>
        mbedtls_mpi_free( X );
 c024c02:	f7ff ffbf 	bl	c024b84 <mbedtls_mpi_free>
        return( 0 );
 c024c06:	2000      	movs	r0, #0
 c024c08:	e011      	b.n	c024c2e <mbedtls_mpi_copy+0x3a>
    for( i = Y->n - 1; i > 0; i-- )
 c024c0a:	684c      	ldr	r4, [r1, #4]
 c024c0c:	3c01      	subs	r4, #1
 c024c0e:	b11c      	cbz	r4, c024c18 <mbedtls_mpi_copy+0x24>
        if( Y->p[i] != 0 )
 c024c10:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 c024c14:	2b00      	cmp	r3, #0
 c024c16:	d0f9      	beq.n	c024c0c <mbedtls_mpi_copy+0x18>
    if( X->n < i )
 c024c18:	6872      	ldr	r2, [r6, #4]
    i++;
 c024c1a:	3401      	adds	r4, #1
    X->s = Y->s;
 c024c1c:	683b      	ldr	r3, [r7, #0]
    if( X->n < i )
 c024c1e:	42a2      	cmp	r2, r4
    X->s = Y->s;
 c024c20:	6033      	str	r3, [r6, #0]
    if( X->n < i )
 c024c22:	d205      	bcs.n	c024c30 <mbedtls_mpi_copy+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 c024c24:	4621      	mov	r1, r4
 c024c26:	4630      	mov	r0, r6
 c024c28:	f7ff ffbe 	bl	c024ba8 <mbedtls_mpi_grow>
 c024c2c:	b140      	cbz	r0, c024c40 <mbedtls_mpi_copy+0x4c>
}
 c024c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 c024c30:	68b0      	ldr	r0, [r6, #8]
 c024c32:	1b12      	subs	r2, r2, r4
 c024c34:	0092      	lsls	r2, r2, #2
 c024c36:	2100      	movs	r1, #0
 c024c38:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 c024c3c:	f7f2 fec3 	bl	c0179c6 <memset>
    memcpy( X->p, Y->p, i * ciL );
 c024c40:	00a2      	lsls	r2, r4, #2
 c024c42:	68b9      	ldr	r1, [r7, #8]
 c024c44:	68b0      	ldr	r0, [r6, #8]
 c024c46:	f7f2 fe9a 	bl	c01797e <memcpy>
 c024c4a:	e7dc      	b.n	c024c06 <mbedtls_mpi_copy+0x12>

0c024c4c <mbedtls_mpi_swap>:
{
 c024c4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 c024c4e:	4603      	mov	r3, r0
 c024c50:	460a      	mov	r2, r1
    memcpy( &T,  X, sizeof( mbedtls_mpi ) );
 c024c52:	6800      	ldr	r0, [r0, #0]
 c024c54:	6859      	ldr	r1, [r3, #4]
 c024c56:	ac01      	add	r4, sp, #4
 c024c58:	c403      	stmia	r4!, {r0, r1}
    memcpy(  X,  Y, sizeof( mbedtls_mpi ) );
 c024c5a:	6811      	ldr	r1, [r2, #0]
    memcpy( &T,  X, sizeof( mbedtls_mpi ) );
 c024c5c:	689c      	ldr	r4, [r3, #8]
    memcpy(  X,  Y, sizeof( mbedtls_mpi ) );
 c024c5e:	6019      	str	r1, [r3, #0]
 c024c60:	6851      	ldr	r1, [r2, #4]
 c024c62:	6059      	str	r1, [r3, #4]
 c024c64:	6891      	ldr	r1, [r2, #8]
 c024c66:	6099      	str	r1, [r3, #8]
    memcpy(  Y, &T, sizeof( mbedtls_mpi ) );
 c024c68:	ab01      	add	r3, sp, #4
 c024c6a:	cb03      	ldmia	r3!, {r0, r1}
 c024c6c:	6094      	str	r4, [r2, #8]
 c024c6e:	6010      	str	r0, [r2, #0]
 c024c70:	6051      	str	r1, [r2, #4]
}
 c024c72:	b004      	add	sp, #16
 c024c74:	bd10      	pop	{r4, pc}

0c024c76 <mbedtls_mpi_safe_cond_swap>:
    if( X == Y )
 c024c76:	4288      	cmp	r0, r1
{
 c024c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c024c7c:	4605      	mov	r5, r0
 c024c7e:	460c      	mov	r4, r1
 c024c80:	4616      	mov	r6, r2
    if( X == Y )
 c024c82:	d102      	bne.n	c024c8a <mbedtls_mpi_safe_cond_swap+0x14>
        return( 0 );
 c024c84:	2000      	movs	r0, #0
}
 c024c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 c024c8a:	6849      	ldr	r1, [r1, #4]
 c024c8c:	f7ff ff8c 	bl	c024ba8 <mbedtls_mpi_grow>
 c024c90:	2800      	cmp	r0, #0
 c024c92:	d1f8      	bne.n	c024c86 <mbedtls_mpi_safe_cond_swap+0x10>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );
 c024c94:	6869      	ldr	r1, [r5, #4]
 c024c96:	4620      	mov	r0, r4
 c024c98:	f7ff ff86 	bl	c024ba8 <mbedtls_mpi_grow>
 c024c9c:	2800      	cmp	r0, #0
 c024c9e:	d1f2      	bne.n	c024c86 <mbedtls_mpi_safe_cond_swap+0x10>
    swap = (swap | (unsigned char)-swap) >> 7;
 c024ca0:	4272      	negs	r2, r6
 c024ca2:	4332      	orrs	r2, r6
    s = X->s;
 c024ca4:	6829      	ldr	r1, [r5, #0]
    swap = (swap | (unsigned char)-swap) >> 7;
 c024ca6:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    X->s = X->s * ( 1 - swap ) + Y->s * swap;
 c024caa:	f1c2 0301 	rsb	r3, r2, #1
 c024cae:	fb01 f703 	mul.w	r7, r1, r3
 c024cb2:	6826      	ldr	r6, [r4, #0]
    Y->s = Y->s * ( 1 - swap ) +    s * swap;
 c024cb4:	4351      	muls	r1, r2
    X->s = X->s * ( 1 - swap ) + Y->s * swap;
 c024cb6:	fb06 7602 	mla	r6, r6, r2, r7
 c024cba:	602e      	str	r6, [r5, #0]
    Y->s = Y->s * ( 1 - swap ) +    s * swap;
 c024cbc:	6826      	ldr	r6, [r4, #0]
    for( i = 0; i < X->n; i++ )
 c024cbe:	f8d5 c004 	ldr.w	ip, [r5, #4]
    Y->s = Y->s * ( 1 - swap ) +    s * swap;
 c024cc2:	fb06 1103 	mla	r1, r6, r3, r1
 c024cc6:	6021      	str	r1, [r4, #0]
    for( i = 0; i < X->n; i++ )
 c024cc8:	4584      	cmp	ip, r0
 c024cca:	d0db      	beq.n	c024c84 <mbedtls_mpi_safe_cond_swap+0xe>
        tmp = X->p[i];
 c024ccc:	f8d5 e008 	ldr.w	lr, [r5, #8]
        X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;
 c024cd0:	68a7      	ldr	r7, [r4, #8]
        tmp = X->p[i];
 c024cd2:	f85e 1020 	ldr.w	r1, [lr, r0, lsl #2]
        X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;
 c024cd6:	f857 6020 	ldr.w	r6, [r7, r0, lsl #2]
 c024cda:	fb01 f803 	mul.w	r8, r1, r3
 c024cde:	fb06 8602 	mla	r6, r6, r2, r8
        Y->p[i] = Y->p[i] * ( 1 - swap ) +     tmp * swap;
 c024ce2:	4351      	muls	r1, r2
        X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;
 c024ce4:	f84e 6020 	str.w	r6, [lr, r0, lsl #2]
        Y->p[i] = Y->p[i] * ( 1 - swap ) +     tmp * swap;
 c024ce8:	f857 6020 	ldr.w	r6, [r7, r0, lsl #2]
 c024cec:	fb06 1103 	mla	r1, r6, r3, r1
 c024cf0:	f847 1020 	str.w	r1, [r7, r0, lsl #2]
    for( i = 0; i < X->n; i++ )
 c024cf4:	3001      	adds	r0, #1
 c024cf6:	e7e7      	b.n	c024cc8 <mbedtls_mpi_safe_cond_swap+0x52>

0c024cf8 <mbedtls_mpi_lset>:
{
 c024cf8:	b570      	push	{r4, r5, r6, lr}
 c024cfa:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 c024cfc:	2101      	movs	r1, #1
{
 c024cfe:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 c024d00:	f7ff ff52 	bl	c024ba8 <mbedtls_mpi_grow>
 c024d04:	4605      	mov	r5, r0
 c024d06:	b988      	cbnz	r0, c024d2c <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 c024d08:	6862      	ldr	r2, [r4, #4]
 c024d0a:	4601      	mov	r1, r0
 c024d0c:	0092      	lsls	r2, r2, #2
 c024d0e:	68a0      	ldr	r0, [r4, #8]
 c024d10:	f7f2 fe59 	bl	c0179c6 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 c024d14:	68a3      	ldr	r3, [r4, #8]
 c024d16:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 c024d1a:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
 c024d1c:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 c024d20:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 c024d22:	bfb4      	ite	lt
 c024d24:	f04f 33ff 	movlt.w	r3, #4294967295
 c024d28:	2301      	movge	r3, #1
 c024d2a:	6023      	str	r3, [r4, #0]
}
 c024d2c:	4628      	mov	r0, r5
 c024d2e:	bd70      	pop	{r4, r5, r6, pc}

0c024d30 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
 c024d30:	6843      	ldr	r3, [r0, #4]
 c024d32:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 c024d36:	bf3f      	itttt	cc
 c024d38:	6883      	ldrcc	r3, [r0, #8]
 c024d3a:	094a      	lsrcc	r2, r1, #5
 c024d3c:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
 c024d40:	f001 011f 	andcc.w	r1, r1, #31
 c024d44:	bf3a      	itte	cc
 c024d46:	40c8      	lsrcc	r0, r1
 c024d48:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
 c024d4c:	2000      	movcs	r0, #0
}
 c024d4e:	4770      	bx	lr

0c024d50 <mbedtls_mpi_set_bit>:
    if( val != 0 && val != 1 )
 c024d50:	2a01      	cmp	r2, #1
{
 c024d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c024d54:	4607      	mov	r7, r0
 c024d56:	460c      	mov	r4, r1
 c024d58:	4615      	mov	r5, r2
    size_t off = pos / biL;
 c024d5a:	ea4f 1651 	mov.w	r6, r1, lsr #5
    if( val != 0 && val != 1 )
 c024d5e:	d81b      	bhi.n	c024d98 <mbedtls_mpi_set_bit+0x48>
    if( X->n * biL <= pos )
 c024d60:	6843      	ldr	r3, [r0, #4]
 c024d62:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
 c024d66:	d210      	bcs.n	c024d8a <mbedtls_mpi_set_bit+0x3a>
    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
 c024d68:	2301      	movs	r3, #1
    X->p[off] |= (mbedtls_mpi_uint) val << idx;
 c024d6a:	2000      	movs	r0, #0
    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
 c024d6c:	68b9      	ldr	r1, [r7, #8]
    size_t idx = pos % biL;
 c024d6e:	f004 041f 	and.w	r4, r4, #31
    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
 c024d72:	fa03 f204 	lsl.w	r2, r3, r4
 c024d76:	f851 3026 	ldr.w	r3, [r1, r6, lsl #2]
    X->p[off] |= (mbedtls_mpi_uint) val << idx;
 c024d7a:	fa05 f404 	lsl.w	r4, r5, r4
    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
 c024d7e:	ea23 0302 	bic.w	r3, r3, r2
    X->p[off] |= (mbedtls_mpi_uint) val << idx;
 c024d82:	431c      	orrs	r4, r3
 c024d84:	f841 4026 	str.w	r4, [r1, r6, lsl #2]
}
 c024d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( val == 0 )
 c024d8a:	b142      	cbz	r2, c024d9e <mbedtls_mpi_set_bit+0x4e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );
 c024d8c:	1c71      	adds	r1, r6, #1
 c024d8e:	f7ff ff0b 	bl	c024ba8 <mbedtls_mpi_grow>
 c024d92:	2800      	cmp	r0, #0
 c024d94:	d0e8      	beq.n	c024d68 <mbedtls_mpi_set_bit+0x18>
 c024d96:	e7f7      	b.n	c024d88 <mbedtls_mpi_set_bit+0x38>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c024d98:	f06f 0003 	mvn.w	r0, #3
 c024d9c:	e7f4      	b.n	c024d88 <mbedtls_mpi_set_bit+0x38>
            return( 0 );
 c024d9e:	4610      	mov	r0, r2
 c024da0:	e7f2      	b.n	c024d88 <mbedtls_mpi_set_bit+0x38>

0c024da2 <mbedtls_mpi_lsb>:
    size_t i, j, count = 0;
 c024da2:	2100      	movs	r1, #0
{
 c024da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    for( i = 0; i < X->n; i++ )
 c024da6:	460a      	mov	r2, r1
{
 c024da8:	4604      	mov	r4, r0
    for( i = 0; i < X->n; i++ )
 c024daa:	6845      	ldr	r5, [r0, #4]
 c024dac:	4295      	cmp	r5, r2
 c024dae:	d101      	bne.n	c024db4 <mbedtls_mpi_lsb+0x12>
    return( 0 );
 c024db0:	2000      	movs	r0, #0
}
 c024db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 c024db4:	68a3      	ldr	r3, [r4, #8]
 c024db6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
        for( j = 0; j < biL; j++, count++ )
 c024dba:	2300      	movs	r3, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 c024dbc:	fa26 f703 	lsr.w	r7, r6, r3
 c024dc0:	07ff      	lsls	r7, r7, #31
 c024dc2:	eb01 0003 	add.w	r0, r1, r3
 c024dc6:	d4f4      	bmi.n	c024db2 <mbedtls_mpi_lsb+0x10>
        for( j = 0; j < biL; j++, count++ )
 c024dc8:	3301      	adds	r3, #1
 c024dca:	2b20      	cmp	r3, #32
 c024dcc:	eb01 0003 	add.w	r0, r1, r3
 c024dd0:	d1f4      	bne.n	c024dbc <mbedtls_mpi_lsb+0x1a>
    for( i = 0; i < X->n; i++ )
 c024dd2:	3201      	adds	r2, #1
        for( j = 0; j < biL; j++, count++ )
 c024dd4:	4601      	mov	r1, r0
 c024dd6:	e7e9      	b.n	c024dac <mbedtls_mpi_lsb+0xa>

0c024dd8 <mbedtls_mpi_bitlen>:
    if( X->n == 0 )
 c024dd8:	6843      	ldr	r3, [r0, #4]
 c024dda:	b1db      	cbz	r3, c024e14 <mbedtls_mpi_bitlen+0x3c>
 c024ddc:	6881      	ldr	r1, [r0, #8]
    for( i = X->n - 1; i > 0; i-- )
 c024dde:	1e5a      	subs	r2, r3, #1
 c024de0:	009b      	lsls	r3, r3, #2
 c024de2:	b97a      	cbnz	r2, c024e04 <mbedtls_mpi_bitlen+0x2c>
    for( j = 0; j < biL; j++ )
 c024de4:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 c024de6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    j = biL - mbedtls_clz( X->p[i] );
 c024dea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
        if( x & mask ) break;
 c024dee:	4219      	tst	r1, r3
 c024df0:	d104      	bne.n	c024dfc <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
 c024df2:	3001      	adds	r0, #1
 c024df4:	2820      	cmp	r0, #32
        mask >>= 1;
 c024df6:	ea4f 0353 	mov.w	r3, r3, lsr #1
    for( j = 0; j < biL; j++ )
 c024dfa:	d1f8      	bne.n	c024dee <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
 c024dfc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 c024e00:	3020      	adds	r0, #32
 c024e02:	4770      	bx	lr
        if( X->p[i] != 0 )
 c024e04:	18c8      	adds	r0, r1, r3
 c024e06:	f850 0c04 	ldr.w	r0, [r0, #-4]
 c024e0a:	3b04      	subs	r3, #4
 c024e0c:	2800      	cmp	r0, #0
 c024e0e:	d1e9      	bne.n	c024de4 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
 c024e10:	3a01      	subs	r2, #1
 c024e12:	e7e6      	b.n	c024de2 <mbedtls_mpi_bitlen+0xa>
        return( 0 );
 c024e14:	4618      	mov	r0, r3
}
 c024e16:	4770      	bx	lr

0c024e18 <mbedtls_mpi_size>:
{
 c024e18:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 c024e1a:	f7ff ffdd 	bl	c024dd8 <mbedtls_mpi_bitlen>
 c024e1e:	3007      	adds	r0, #7
}
 c024e20:	08c0      	lsrs	r0, r0, #3
 c024e22:	bd08      	pop	{r3, pc}

0c024e24 <mbedtls_mpi_read_binary_le>:
{
 c024e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c024e26:	460f      	mov	r7, r1
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 c024e28:	f012 0103 	ands.w	r1, r2, #3
 c024e2c:	bf18      	it	ne
 c024e2e:	2101      	movne	r1, #1
    if( X->n != limbs )
 c024e30:	6843      	ldr	r3, [r0, #4]
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 c024e32:	eb01 0592 	add.w	r5, r1, r2, lsr #2
    if( X->n != limbs )
 c024e36:	42ab      	cmp	r3, r5
{
 c024e38:	4604      	mov	r4, r0
 c024e3a:	4616      	mov	r6, r2
    if( X->n != limbs )
 c024e3c:	d118      	bne.n	c024e70 <mbedtls_mpi_read_binary_le+0x4c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 c024e3e:	2100      	movs	r1, #0
 c024e40:	4620      	mov	r0, r4
 c024e42:	f7ff ff59 	bl	c024cf8 <mbedtls_mpi_lset>
 c024e46:	bb00      	cbnz	r0, c024e8a <mbedtls_mpi_read_binary_le+0x66>
    for( i = 0; i < buflen; i++ )
 c024e48:	4603      	mov	r3, r0
 c024e4a:	42b3      	cmp	r3, r6
 c024e4c:	d01d      	beq.n	c024e8a <mbedtls_mpi_read_binary_le+0x66>
        X->p[i / ciL] |= ((mbedtls_mpi_uint) buf[i]) << ((i % ciL) << 3);
 c024e4e:	5cfa      	ldrb	r2, [r7, r3]
 c024e50:	f8d4 c008 	ldr.w	ip, [r4, #8]
 c024e54:	00d9      	lsls	r1, r3, #3
 c024e56:	f023 0503 	bic.w	r5, r3, #3
 c024e5a:	f001 0118 	and.w	r1, r1, #24
 c024e5e:	fa02 f101 	lsl.w	r1, r2, r1
 c024e62:	f85c 2005 	ldr.w	r2, [ip, r5]
    for( i = 0; i < buflen; i++ )
 c024e66:	3301      	adds	r3, #1
        X->p[i / ciL] |= ((mbedtls_mpi_uint) buf[i]) << ((i % ciL) << 3);
 c024e68:	430a      	orrs	r2, r1
 c024e6a:	f84c 2005 	str.w	r2, [ip, r5]
 c024e6e:	e7ec      	b.n	c024e4a <mbedtls_mpi_read_binary_le+0x26>
        mbedtls_mpi_free( X );
 c024e70:	f7ff fe88 	bl	c024b84 <mbedtls_mpi_free>
    X->n = 0;
 c024e74:	2300      	movs	r3, #0
 c024e76:	2201      	movs	r2, #1
    X->p = NULL;
 c024e78:	60a3      	str	r3, [r4, #8]
    X->n = 0;
 c024e7a:	e9c4 2300 	strd	r2, r3, [r4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 c024e7e:	4629      	mov	r1, r5
 c024e80:	4620      	mov	r0, r4
 c024e82:	f7ff fe91 	bl	c024ba8 <mbedtls_mpi_grow>
 c024e86:	2800      	cmp	r0, #0
 c024e88:	d0d9      	beq.n	c024e3e <mbedtls_mpi_read_binary_le+0x1a>
}
 c024e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0c024e8c <mbedtls_mpi_read_binary>:
{
 c024e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 c024e90:	f012 0403 	ands.w	r4, r2, #3
 c024e94:	bf18      	it	ne
 c024e96:	2401      	movne	r4, #1
    if( X->n != limbs )
 c024e98:	6843      	ldr	r3, [r0, #4]
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 c024e9a:	eb04 0492 	add.w	r4, r4, r2, lsr #2
    if( X->n != limbs )
 c024e9e:	42a3      	cmp	r3, r4
{
 c024ea0:	4607      	mov	r7, r0
 c024ea2:	4688      	mov	r8, r1
 c024ea4:	4615      	mov	r5, r2
    if( X->n != limbs )
 c024ea6:	d108      	bne.n	c024eba <mbedtls_mpi_read_binary+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 c024ea8:	2100      	movs	r1, #0
 c024eaa:	4638      	mov	r0, r7
 c024eac:	f7ff ff24 	bl	c024cf8 <mbedtls_mpi_lset>
 c024eb0:	4606      	mov	r6, r0
 c024eb2:	b188      	cbz	r0, c024ed8 <mbedtls_mpi_read_binary+0x4c>
}
 c024eb4:	4630      	mov	r0, r6
 c024eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mbedtls_mpi_free( X );
 c024eba:	f7ff fe63 	bl	c024b84 <mbedtls_mpi_free>
    X->n = 0;
 c024ebe:	2300      	movs	r3, #0
 c024ec0:	2201      	movs	r2, #1
    X->p = NULL;
 c024ec2:	60bb      	str	r3, [r7, #8]
    X->n = 0;
 c024ec4:	e9c7 2300 	strd	r2, r3, [r7]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 c024ec8:	4621      	mov	r1, r4
 c024eca:	4638      	mov	r0, r7
 c024ecc:	f7ff fe6c 	bl	c024ba8 <mbedtls_mpi_grow>
 c024ed0:	4606      	mov	r6, r0
 c024ed2:	2800      	cmp	r0, #0
 c024ed4:	d0e8      	beq.n	c024ea8 <mbedtls_mpi_read_binary+0x1c>
 c024ed6:	e7ed      	b.n	c024eb4 <mbedtls_mpi_read_binary+0x28>
    if( buf != NULL )
 c024ed8:	f1b8 0f00 	cmp.w	r8, #0
 c024edc:	d0ea      	beq.n	c024eb4 <mbedtls_mpi_read_binary+0x28>
        memcpy( Xp + overhead, buf, buflen );
 c024ede:	68bb      	ldr	r3, [r7, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
 c024ee0:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
        memcpy( Xp + overhead, buf, buflen );
 c024ee4:	462a      	mov	r2, r5
 c024ee6:	4641      	mov	r1, r8
 c024ee8:	4418      	add	r0, r3
 c024eea:	f7f2 fd48 	bl	c01797e <memcpy>
    if( limbs == 0 )
 c024eee:	2c00      	cmp	r4, #0
 c024ef0:	d0e0      	beq.n	c024eb4 <mbedtls_mpi_read_binary+0x28>
 c024ef2:	4621      	mov	r1, r4
 c024ef4:	68b8      	ldr	r0, [r7, #8]
 c024ef6:	f7ff fe0d 	bl	c024b14 <mpi_bigendian_to_host.part.1>
    return( ret );
 c024efa:	e7db      	b.n	c024eb4 <mbedtls_mpi_read_binary+0x28>

0c024efc <mbedtls_mpi_write_binary_le>:
{
 c024efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t stored_bytes = X->n * ciL;
 c024efe:	6843      	ldr	r3, [r0, #4]
{
 c024f00:	460e      	mov	r6, r1
    size_t stored_bytes = X->n * ciL;
 c024f02:	009b      	lsls	r3, r3, #2
    if( stored_bytes < buflen )
 c024f04:	4293      	cmp	r3, r2
 c024f06:	d31d      	bcc.n	c024f44 <mbedtls_mpi_write_binary_le+0x48>
 c024f08:	4611      	mov	r1, r2
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 c024f0a:	4299      	cmp	r1, r3
 c024f0c:	d10c      	bne.n	c024f28 <mbedtls_mpi_write_binary_le+0x2c>
 c024f0e:	4694      	mov	ip, r2
    for( i = 0; i < bytes_to_copy; i++ )
 c024f10:	2100      	movs	r1, #0
 c024f12:	458c      	cmp	ip, r1
 c024f14:	d118      	bne.n	c024f48 <mbedtls_mpi_write_binary_le+0x4c>
    if( stored_bytes < buflen )
 c024f16:	4293      	cmp	r3, r2
 c024f18:	d204      	bcs.n	c024f24 <mbedtls_mpi_write_binary_le+0x28>
        memset( buf + stored_bytes, 0, buflen - stored_bytes );
 c024f1a:	1ad2      	subs	r2, r2, r3
 c024f1c:	2100      	movs	r1, #0
 c024f1e:	18f0      	adds	r0, r6, r3
 c024f20:	f7f2 fd51 	bl	c0179c6 <memset>
    return( 0 );
 c024f24:	2000      	movs	r0, #0
 c024f26:	e01d      	b.n	c024f64 <mbedtls_mpi_write_binary_le+0x68>
            if( GET_BYTE( X, i ) != 0 )
 c024f28:	6887      	ldr	r7, [r0, #8]
 c024f2a:	f001 0403 	and.w	r4, r1, #3
 c024f2e:	f021 0c03 	bic.w	ip, r1, #3
 c024f32:	00e5      	lsls	r5, r4, #3
 c024f34:	f857 400c 	ldr.w	r4, [r7, ip]
 c024f38:	40ec      	lsrs	r4, r5
 c024f3a:	f014 0fff 	tst.w	r4, #255	; 0xff
 c024f3e:	d10f      	bne.n	c024f60 <mbedtls_mpi_write_binary_le+0x64>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 c024f40:	3101      	adds	r1, #1
 c024f42:	e7e2      	b.n	c024f0a <mbedtls_mpi_write_binary_le+0xe>
 c024f44:	469c      	mov	ip, r3
 c024f46:	e7e3      	b.n	c024f10 <mbedtls_mpi_write_binary_le+0x14>
        buf[i] = GET_BYTE( X, i );
 c024f48:	6887      	ldr	r7, [r0, #8]
 c024f4a:	f001 0403 	and.w	r4, r1, #3
 c024f4e:	f021 0e03 	bic.w	lr, r1, #3
 c024f52:	00e5      	lsls	r5, r4, #3
 c024f54:	f857 400e 	ldr.w	r4, [r7, lr]
 c024f58:	40ec      	lsrs	r4, r5
 c024f5a:	5474      	strb	r4, [r6, r1]
    for( i = 0; i < bytes_to_copy; i++ )
 c024f5c:	3101      	adds	r1, #1
 c024f5e:	e7d8      	b.n	c024f12 <mbedtls_mpi_write_binary_le+0x16>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 c024f60:	f06f 0007 	mvn.w	r0, #7
}
 c024f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0c024f66 <mbedtls_mpi_write_binary>:
{
 c024f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c024f68:	4605      	mov	r5, r0
    stored_bytes = X->n * ciL;
 c024f6a:	686c      	ldr	r4, [r5, #4]
{
 c024f6c:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
 c024f6e:	00a4      	lsls	r4, r4, #2
    if( stored_bytes < buflen )
 c024f70:	4294      	cmp	r4, r2
 c024f72:	d21c      	bcs.n	c024fae <mbedtls_mpi_write_binary+0x48>
        p = buf + buflen - stored_bytes;
 c024f74:	1b12      	subs	r2, r2, r4
 c024f76:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
 c024f78:	2100      	movs	r1, #0
 c024f7a:	f7f2 fd24 	bl	c0179c6 <memset>
        p = buf + buflen - stored_bytes;
 c024f7e:	4630      	mov	r0, r6
 c024f80:	4622      	mov	r2, r4
    for( i = 0; i < bytes_to_copy; i++ )
 c024f82:	2300      	movs	r3, #0
 c024f84:	4410      	add	r0, r2
 c024f86:	429a      	cmp	r2, r3
 c024f88:	d113      	bne.n	c024fb2 <mbedtls_mpi_write_binary+0x4c>
    return( 0 );
 c024f8a:	2000      	movs	r0, #0
}
 c024f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
 c024f8e:	68af      	ldr	r7, [r5, #8]
 c024f90:	f003 0103 	and.w	r1, r3, #3
 c024f94:	f023 0c03 	bic.w	ip, r3, #3
 c024f98:	00ce      	lsls	r6, r1, #3
 c024f9a:	f857 100c 	ldr.w	r1, [r7, ip]
 c024f9e:	40f1      	lsrs	r1, r6
 c024fa0:	f011 0fff 	tst.w	r1, #255	; 0xff
 c024fa4:	d111      	bne.n	c024fca <mbedtls_mpi_write_binary+0x64>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 c024fa6:	3301      	adds	r3, #1
 c024fa8:	42a3      	cmp	r3, r4
 c024faa:	d1f0      	bne.n	c024f8e <mbedtls_mpi_write_binary+0x28>
 c024fac:	e7e9      	b.n	c024f82 <mbedtls_mpi_write_binary+0x1c>
 c024fae:	4613      	mov	r3, r2
 c024fb0:	e7fa      	b.n	c024fa8 <mbedtls_mpi_write_binary+0x42>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 c024fb2:	68af      	ldr	r7, [r5, #8]
 c024fb4:	f003 0103 	and.w	r1, r3, #3
 c024fb8:	f023 0603 	bic.w	r6, r3, #3
 c024fbc:	00cc      	lsls	r4, r1, #3
 c024fbe:	59b9      	ldr	r1, [r7, r6]
    for( i = 0; i < bytes_to_copy; i++ )
 c024fc0:	3301      	adds	r3, #1
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 c024fc2:	40e1      	lsrs	r1, r4
 c024fc4:	f800 1d01 	strb.w	r1, [r0, #-1]!
 c024fc8:	e7dd      	b.n	c024f86 <mbedtls_mpi_write_binary+0x20>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 c024fca:	f06f 0007 	mvn.w	r0, #7
 c024fce:	e7dd      	b.n	c024f8c <mbedtls_mpi_write_binary+0x26>

0c024fd0 <mbedtls_mpi_shift_l>:
{
 c024fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c024fd2:	4606      	mov	r6, r0
 c024fd4:	460d      	mov	r5, r1
    v0 = count / (biL    );
 c024fd6:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
 c024fd8:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
 c024fdc:	f7ff fefc 	bl	c024dd8 <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
 c024fe0:	6873      	ldr	r3, [r6, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
 c024fe2:	4428      	add	r0, r5
    if( X->n * biL < i )
 c024fe4:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 c024fe8:	d803      	bhi.n	c024ff2 <mbedtls_mpi_shift_l+0x22>
    if( v0 > 0 )
 c024fea:	b974      	cbnz	r4, c02500a <mbedtls_mpi_shift_l+0x3a>
    if( t1 > 0 )
 c024fec:	bb2f      	cbnz	r7, c02503a <mbedtls_mpi_shift_l+0x6a>
    ret = 0;
 c024fee:	2000      	movs	r0, #0
 c024ff0:	e00a      	b.n	c025008 <mbedtls_mpi_shift_l+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 c024ff2:	f010 011f 	ands.w	r1, r0, #31
 c024ff6:	bf18      	it	ne
 c024ff8:	2101      	movne	r1, #1
 c024ffa:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 c024ffe:	4630      	mov	r0, r6
 c025000:	f7ff fdd2 	bl	c024ba8 <mbedtls_mpi_grow>
 c025004:	2800      	cmp	r0, #0
 c025006:	d0f0      	beq.n	c024fea <mbedtls_mpi_shift_l+0x1a>
}
 c025008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
 c02500a:	6873      	ldr	r3, [r6, #4]
 c02500c:	00a0      	lsls	r0, r4, #2
 c02500e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 c025012:	3a01      	subs	r2, #1
 c025014:	1b12      	subs	r2, r2, r4
 c025016:	0092      	lsls	r2, r2, #2
 c025018:	42a3      	cmp	r3, r4
 c02501a:	d807      	bhi.n	c02502c <mbedtls_mpi_shift_l+0x5c>
            X->p[i - 1] = 0;
 c02501c:	2200      	movs	r2, #0
 c02501e:	009b      	lsls	r3, r3, #2
 c025020:	3b04      	subs	r3, #4
        for( ; i > 0; i-- )
 c025022:	1d19      	adds	r1, r3, #4
 c025024:	d0e2      	beq.n	c024fec <mbedtls_mpi_shift_l+0x1c>
            X->p[i - 1] = 0;
 c025026:	68b1      	ldr	r1, [r6, #8]
 c025028:	50ca      	str	r2, [r1, r3]
 c02502a:	e7f9      	b.n	c025020 <mbedtls_mpi_shift_l+0x50>
            X->p[i - 1] = X->p[i - v0 - 1];
 c02502c:	68b1      	ldr	r1, [r6, #8]
        for( i = X->n; i > v0; i-- )
 c02502e:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 c025030:	588d      	ldr	r5, [r1, r2]
 c025032:	4411      	add	r1, r2
 c025034:	500d      	str	r5, [r1, r0]
 c025036:	3a04      	subs	r2, #4
 c025038:	e7ee      	b.n	c025018 <mbedtls_mpi_shift_l+0x48>
    mbedtls_mpi_uint r0 = 0, r1;
 c02503a:	2100      	movs	r1, #0
        for( i = v0; i < X->n; i++ )
 c02503c:	f8d6 c004 	ldr.w	ip, [r6, #4]
 c025040:	00a3      	lsls	r3, r4, #2
            r1 = X->p[i] >> (biL - t1);
 c025042:	f1c7 0e20 	rsb	lr, r7, #32
        for( i = v0; i < X->n; i++ )
 c025046:	45a4      	cmp	ip, r4
 c025048:	d9d1      	bls.n	c024fee <mbedtls_mpi_shift_l+0x1e>
            r1 = X->p[i] >> (biL - t1);
 c02504a:	68b5      	ldr	r5, [r6, #8]
        for( i = v0; i < X->n; i++ )
 c02504c:	3401      	adds	r4, #1
            r1 = X->p[i] >> (biL - t1);
 c02504e:	58e8      	ldr	r0, [r5, r3]
            X->p[i] <<= t1;
 c025050:	fa00 f207 	lsl.w	r2, r0, r7
            X->p[i] |= r0;
 c025054:	430a      	orrs	r2, r1
 c025056:	50ea      	str	r2, [r5, r3]
            r1 = X->p[i] >> (biL - t1);
 c025058:	fa20 f10e 	lsr.w	r1, r0, lr
 c02505c:	3304      	adds	r3, #4
 c02505e:	e7f2      	b.n	c025046 <mbedtls_mpi_shift_l+0x76>

0c025060 <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 c025060:	6843      	ldr	r3, [r0, #4]
{
 c025062:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
 c025064:	094d      	lsrs	r5, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 c025066:	42ab      	cmp	r3, r5
 c025068:	d303      	bcc.n	c025072 <mbedtls_mpi_shift_r+0x12>
    v1 = count & (biL - 1);
 c02506a:	f001 011f 	and.w	r1, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 c02506e:	d104      	bne.n	c02507a <mbedtls_mpi_shift_r+0x1a>
 c025070:	b369      	cbz	r1, c0250ce <mbedtls_mpi_shift_r+0x6e>
}
 c025072:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
 c025074:	2100      	movs	r1, #0
 c025076:	f7ff be3f 	b.w	c024cf8 <mbedtls_mpi_lset>
    if( v0 > 0 )
 c02507a:	b9e5      	cbnz	r5, c0250b6 <mbedtls_mpi_shift_r+0x56>
    if( v1 > 0 )
 c02507c:	b129      	cbz	r1, c02508a <mbedtls_mpi_shift_r+0x2a>
    mbedtls_mpi_uint r0 = 0, r1;
 c02507e:	2500      	movs	r5, #0
 c025080:	009a      	lsls	r2, r3, #2
            r1 = X->p[i - 1] << (biL - v1);
 c025082:	f1c1 0c20 	rsb	ip, r1, #32
 c025086:	3a04      	subs	r2, #4
        for( i = X->n; i > 0; i-- )
 c025088:	b9bb      	cbnz	r3, c0250ba <mbedtls_mpi_shift_r+0x5a>
}
 c02508a:	bcf0      	pop	{r4, r5, r6, r7}
 c02508c:	2000      	movs	r0, #0
 c02508e:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
 c025090:	6884      	ldr	r4, [r0, #8]
 c025092:	1956      	adds	r6, r2, r5
 c025094:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 c025098:	f844 6022 	str.w	r6, [r4, r2, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
 c02509c:	3201      	adds	r2, #1
 c02509e:	1b5c      	subs	r4, r3, r5
 c0250a0:	4294      	cmp	r4, r2
 c0250a2:	d8f5      	bhi.n	c025090 <mbedtls_mpi_shift_r+0x30>
            X->p[i] = 0;
 c0250a4:	2500      	movs	r5, #0
 c0250a6:	00a2      	lsls	r2, r4, #2
        for( ; i < X->n; i++ )
 c0250a8:	42a3      	cmp	r3, r4
 c0250aa:	d9e7      	bls.n	c02507c <mbedtls_mpi_shift_r+0x1c>
            X->p[i] = 0;
 c0250ac:	6886      	ldr	r6, [r0, #8]
        for( ; i < X->n; i++ )
 c0250ae:	3401      	adds	r4, #1
            X->p[i] = 0;
 c0250b0:	50b5      	str	r5, [r6, r2]
 c0250b2:	3204      	adds	r2, #4
 c0250b4:	e7f8      	b.n	c0250a8 <mbedtls_mpi_shift_r+0x48>
 c0250b6:	2200      	movs	r2, #0
 c0250b8:	e7f1      	b.n	c02509e <mbedtls_mpi_shift_r+0x3e>
            r1 = X->p[i - 1] << (biL - v1);
 c0250ba:	6887      	ldr	r7, [r0, #8]
        for( i = X->n; i > 0; i-- )
 c0250bc:	3b01      	subs	r3, #1
            r1 = X->p[i - 1] << (biL - v1);
 c0250be:	58be      	ldr	r6, [r7, r2]
            X->p[i - 1] >>= v1;
 c0250c0:	fa26 f401 	lsr.w	r4, r6, r1
            X->p[i - 1] |= r0;
 c0250c4:	432c      	orrs	r4, r5
 c0250c6:	50bc      	str	r4, [r7, r2]
            r1 = X->p[i - 1] << (biL - v1);
 c0250c8:	fa06 f50c 	lsl.w	r5, r6, ip
 c0250cc:	e7db      	b.n	c025086 <mbedtls_mpi_shift_r+0x26>
    if( v0 > 0 )
 c0250ce:	2b00      	cmp	r3, #0
 c0250d0:	d0db      	beq.n	c02508a <mbedtls_mpi_shift_r+0x2a>
 c0250d2:	460a      	mov	r2, r1
 c0250d4:	e7e3      	b.n	c02509e <mbedtls_mpi_shift_r+0x3e>

0c0250d6 <mbedtls_mpi_cmp_abs>:
{
 c0250d6:	b570      	push	{r4, r5, r6, lr}
    for( i = X->n; i > 0; i-- )
 c0250d8:	6843      	ldr	r3, [r0, #4]
 c0250da:	009a      	lsls	r2, r3, #2
 c0250dc:	b933      	cbnz	r3, c0250ec <mbedtls_mpi_cmp_abs+0x16>
    for( j = Y->n; j > 0; j-- )
 c0250de:	684a      	ldr	r2, [r1, #4]
 c0250e0:	0094      	lsls	r4, r2, #2
 c0250e2:	b962      	cbnz	r2, c0250fe <mbedtls_mpi_cmp_abs+0x28>
    if( i == 0 && j == 0 )
 c0250e4:	1c18      	adds	r0, r3, #0
 c0250e6:	bf18      	it	ne
 c0250e8:	2001      	movne	r0, #1
 c0250ea:	e016      	b.n	c02511a <mbedtls_mpi_cmp_abs+0x44>
        if( X->p[i - 1] != 0 )
 c0250ec:	6884      	ldr	r4, [r0, #8]
 c0250ee:	4414      	add	r4, r2
 c0250f0:	f854 4c04 	ldr.w	r4, [r4, #-4]
 c0250f4:	3a04      	subs	r2, #4
 c0250f6:	2c00      	cmp	r4, #0
 c0250f8:	d1f1      	bne.n	c0250de <mbedtls_mpi_cmp_abs+0x8>
    for( i = X->n; i > 0; i-- )
 c0250fa:	3b01      	subs	r3, #1
 c0250fc:	e7ee      	b.n	c0250dc <mbedtls_mpi_cmp_abs+0x6>
        if( Y->p[j - 1] != 0 )
 c0250fe:	688d      	ldr	r5, [r1, #8]
 c025100:	192e      	adds	r6, r5, r4
 c025102:	f856 6c04 	ldr.w	r6, [r6, #-4]
 c025106:	3c04      	subs	r4, #4
 c025108:	b90e      	cbnz	r6, c02510e <mbedtls_mpi_cmp_abs+0x38>
    for( j = Y->n; j > 0; j-- )
 c02510a:	3a01      	subs	r2, #1
 c02510c:	e7e9      	b.n	c0250e2 <mbedtls_mpi_cmp_abs+0xc>
    if( i > j ) return(  1 );
 c02510e:	4293      	cmp	r3, r2
 c025110:	d80d      	bhi.n	c02512e <mbedtls_mpi_cmp_abs+0x58>
    if( j > i ) return( -1 );
 c025112:	d30e      	bcc.n	c025132 <mbedtls_mpi_cmp_abs+0x5c>
 c025114:	009a      	lsls	r2, r3, #2
    for( ; i > 0; i-- )
 c025116:	b90b      	cbnz	r3, c02511c <mbedtls_mpi_cmp_abs+0x46>
    return( 0 );
 c025118:	4618      	mov	r0, r3
}
 c02511a:	bd70      	pop	{r4, r5, r6, pc}
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 c02511c:	6881      	ldr	r1, [r0, #8]
 c02511e:	3a04      	subs	r2, #4
 c025120:	588c      	ldr	r4, [r1, r2]
 c025122:	58a9      	ldr	r1, [r5, r2]
 c025124:	428c      	cmp	r4, r1
 c025126:	d802      	bhi.n	c02512e <mbedtls_mpi_cmp_abs+0x58>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 c025128:	d303      	bcc.n	c025132 <mbedtls_mpi_cmp_abs+0x5c>
    for( ; i > 0; i-- )
 c02512a:	3b01      	subs	r3, #1
 c02512c:	e7f3      	b.n	c025116 <mbedtls_mpi_cmp_abs+0x40>
    if( i > j ) return(  1 );
 c02512e:	2001      	movs	r0, #1
 c025130:	e7f3      	b.n	c02511a <mbedtls_mpi_cmp_abs+0x44>
    if( j > i ) return( -1 );
 c025132:	f04f 30ff 	mov.w	r0, #4294967295
 c025136:	e7f0      	b.n	c02511a <mbedtls_mpi_cmp_abs+0x44>

0c025138 <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 c025138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02513c:	4616      	mov	r6, r2
 c02513e:	b085      	sub	sp, #20
 c025140:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 c025142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
{
 c025144:	4681      	mov	r9, r0
    if( T->n < N->n + 1 || T->p == NULL )
 c025146:	685a      	ldr	r2, [r3, #4]
 c025148:	6873      	ldr	r3, [r6, #4]
{
 c02514a:	468b      	mov	fp, r1
    if( T->n < N->n + 1 || T->p == NULL )
 c02514c:	3301      	adds	r3, #1
 c02514e:	429a      	cmp	r2, r3
 c025150:	d353      	bcc.n	c0251fa <mpi_montmul+0xc2>
 c025152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c025154:	6898      	ldr	r0, [r3, #8]
 c025156:	2800      	cmp	r0, #0
 c025158:	d04f      	beq.n	c0251fa <mpi_montmul+0xc2>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 c02515a:	0092      	lsls	r2, r2, #2
 c02515c:	2100      	movs	r1, #0
 c02515e:	f7f2 fc32 	bl	c0179c6 <memset>

    d = T->p;
 c025162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 c025164:	f8d6 a004 	ldr.w	sl, [r6, #4]
    d = T->p;
 c025168:	689b      	ldr	r3, [r3, #8]
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 c02516a:	2400      	movs	r4, #0
    d = T->p;
 c02516c:	9300      	str	r3, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 c02516e:	f8db 3004 	ldr.w	r3, [fp, #4]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 c025172:	f10a 0701 	add.w	r7, sl, #1
    m = ( B->n < n ) ? B->n : n;
 c025176:	4553      	cmp	r3, sl
 c025178:	bf28      	it	cs
 c02517a:	4653      	movcs	r3, sl
    d = T->p;
 c02517c:	9d00      	ldr	r5, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 c02517e:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
 c025180:	00bf      	lsls	r7, r7, #2
    for( i = 0; i < n; i++ )
 c025182:	4554      	cmp	r4, sl
 c025184:	f8d9 0008 	ldr.w	r0, [r9, #8]
 c025188:	d11b      	bne.n	c0251c2 <mpi_montmul+0x8a>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 c02518a:	9b00      	ldr	r3, [sp, #0]
 c02518c:	1f39      	subs	r1, r7, #4
 c02518e:	440b      	add	r3, r1
 c025190:	463a      	mov	r2, r7
 c025192:	4619      	mov	r1, r3
 c025194:	f7f2 fbf3 	bl	c01797e <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 c025198:	4631      	mov	r1, r6
 c02519a:	4648      	mov	r0, r9
 c02519c:	f7ff ff9b 	bl	c0250d6 <mbedtls_mpi_cmp_abs>
 c0251a0:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 c0251a2:	bfb8      	it	lt
 c0251a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 c0251a6:	4620      	mov	r0, r4
        mpi_sub_hlp( n, N->p, A->p );
 c0251a8:	bfa7      	ittee	ge
 c0251aa:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 c0251ae:	68b1      	ldrge	r1, [r6, #8]
        mpi_sub_hlp( n, A->p, T->p );
 c0251b0:	689a      	ldrlt	r2, [r3, #8]
 c0251b2:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 c0251b6:	f7ff fa13 	bl	c0245e0 <mpi_sub_hlp>

    return( 0 );
 c0251ba:	2000      	movs	r0, #0
}
 c0251bc:	b005      	add	sp, #20
 c0251be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 c0251c2:	f8db 1008 	ldr.w	r1, [fp, #8]
        u0 = A->p[i];
 c0251c6:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 c0251ca:	682a      	ldr	r2, [r5, #0]
 c0251cc:	680b      	ldr	r3, [r1, #0]
        mpi_mul_hlp( m, B->p, d, u0 );
 c0251ce:	9801      	ldr	r0, [sp, #4]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 c0251d0:	fb03 2308 	mla	r3, r3, r8, r2
 c0251d4:	9a03      	ldr	r2, [sp, #12]
    for( i = 0; i < n; i++ )
 c0251d6:	3401      	adds	r4, #1
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 c0251d8:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
 c0251da:	462a      	mov	r2, r5
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 c0251dc:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
 c0251de:	4643      	mov	r3, r8
 c0251e0:	f7ff fa28 	bl	c024634 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 c0251e4:	9b02      	ldr	r3, [sp, #8]
 c0251e6:	462a      	mov	r2, r5
 c0251e8:	68b1      	ldr	r1, [r6, #8]
 c0251ea:	4650      	mov	r0, sl
 c0251ec:	f7ff fa22 	bl	c024634 <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
 c0251f0:	2300      	movs	r3, #0
 c0251f2:	f845 8b04 	str.w	r8, [r5], #4
 c0251f6:	51eb      	str	r3, [r5, r7]
 c0251f8:	e7c3      	b.n	c025182 <mpi_montmul+0x4a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c0251fa:	f06f 0003 	mvn.w	r0, #3
 c0251fe:	e7dd      	b.n	c0251bc <mpi_montmul+0x84>

0c025200 <mbedtls_mpi_cmp_mpi>:
{
 c025200:	b570      	push	{r4, r5, r6, lr}
    for( i = X->n; i > 0; i-- )
 c025202:	6843      	ldr	r3, [r0, #4]
 c025204:	009a      	lsls	r2, r3, #2
 c025206:	b923      	cbnz	r3, c025212 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
 c025208:	684a      	ldr	r2, [r1, #4]
 c02520a:	0094      	lsls	r4, r2, #2
 c02520c:	b952      	cbnz	r2, c025224 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
 c02520e:	b99b      	cbnz	r3, c025238 <mbedtls_mpi_cmp_mpi+0x38>
 c025210:	e024      	b.n	c02525c <mbedtls_mpi_cmp_mpi+0x5c>
        if( X->p[i - 1] != 0 )
 c025212:	6884      	ldr	r4, [r0, #8]
 c025214:	4414      	add	r4, r2
 c025216:	f854 4c04 	ldr.w	r4, [r4, #-4]
 c02521a:	3a04      	subs	r2, #4
 c02521c:	2c00      	cmp	r4, #0
 c02521e:	d1f3      	bne.n	c025208 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
 c025220:	3b01      	subs	r3, #1
 c025222:	e7f0      	b.n	c025206 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
 c025224:	688d      	ldr	r5, [r1, #8]
 c025226:	192e      	adds	r6, r5, r4
 c025228:	f856 6c04 	ldr.w	r6, [r6, #-4]
 c02522c:	3c04      	subs	r4, #4
 c02522e:	b90e      	cbnz	r6, c025234 <mbedtls_mpi_cmp_mpi+0x34>
    for( j = Y->n; j > 0; j-- )
 c025230:	3a01      	subs	r2, #1
 c025232:	e7eb      	b.n	c02520c <mbedtls_mpi_cmp_mpi+0xc>
    if( i > j ) return(  X->s );
 c025234:	4293      	cmp	r3, r2
 c025236:	d902      	bls.n	c02523e <mbedtls_mpi_cmp_mpi+0x3e>
 c025238:	6802      	ldr	r2, [r0, #0]
}
 c02523a:	4610      	mov	r0, r2
 c02523c:	bd70      	pop	{r4, r5, r6, pc}
 c02523e:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 c025240:	d201      	bcs.n	c025246 <mbedtls_mpi_cmp_mpi+0x46>
 c025242:	424a      	negs	r2, r1
 c025244:	e7f9      	b.n	c02523a <mbedtls_mpi_cmp_mpi+0x3a>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 c025246:	6802      	ldr	r2, [r0, #0]
 c025248:	2a00      	cmp	r2, #0
 c02524a:	dd01      	ble.n	c025250 <mbedtls_mpi_cmp_mpi+0x50>
 c02524c:	2900      	cmp	r1, #0
 c02524e:	db12      	blt.n	c025276 <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 c025250:	2900      	cmp	r1, #0
 c025252:	dd01      	ble.n	c025258 <mbedtls_mpi_cmp_mpi+0x58>
 c025254:	2a00      	cmp	r2, #0
 c025256:	db10      	blt.n	c02527a <mbedtls_mpi_cmp_mpi+0x7a>
 c025258:	0099      	lsls	r1, r3, #2
    for( ; i > 0; i-- )
 c02525a:	b90b      	cbnz	r3, c025260 <mbedtls_mpi_cmp_mpi+0x60>
    return( 0 );
 c02525c:	461a      	mov	r2, r3
 c02525e:	e7ec      	b.n	c02523a <mbedtls_mpi_cmp_mpi+0x3a>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 c025260:	6884      	ldr	r4, [r0, #8]
 c025262:	3904      	subs	r1, #4
 c025264:	5866      	ldr	r6, [r4, r1]
 c025266:	586c      	ldr	r4, [r5, r1]
 c025268:	42a6      	cmp	r6, r4
 c02526a:	d8e6      	bhi.n	c02523a <mbedtls_mpi_cmp_mpi+0x3a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 c02526c:	d201      	bcs.n	c025272 <mbedtls_mpi_cmp_mpi+0x72>
 c02526e:	4252      	negs	r2, r2
 c025270:	e7e3      	b.n	c02523a <mbedtls_mpi_cmp_mpi+0x3a>
    for( ; i > 0; i-- )
 c025272:	3b01      	subs	r3, #1
 c025274:	e7f1      	b.n	c02525a <mbedtls_mpi_cmp_mpi+0x5a>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 c025276:	2201      	movs	r2, #1
 c025278:	e7df      	b.n	c02523a <mbedtls_mpi_cmp_mpi+0x3a>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 c02527a:	f04f 32ff 	mov.w	r2, #4294967295
 c02527e:	e7dc      	b.n	c02523a <mbedtls_mpi_cmp_mpi+0x3a>

0c025280 <mbedtls_mpi_cmp_int>:
{
 c025280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
 c025282:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 c025286:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 c02528a:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
 c02528c:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 c02528e:	bfb4      	ite	lt
 c025290:	f04f 33ff 	movlt.w	r3, #4294967295
 c025294:	2301      	movge	r3, #1
 c025296:	9301      	str	r3, [sp, #4]
    Y.n = 1;
 c025298:	2301      	movs	r3, #1
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 c02529a:	a901      	add	r1, sp, #4
    Y.n = 1;
 c02529c:	9302      	str	r3, [sp, #8]
    Y.p = p;
 c02529e:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 c0252a2:	f7ff ffad 	bl	c025200 <mbedtls_mpi_cmp_mpi>
}
 c0252a6:	b005      	add	sp, #20
 c0252a8:	f85d fb04 	ldr.w	pc, [sp], #4

0c0252ac <mbedtls_mpi_add_abs>:
    if( X == B )
 c0252ac:	4290      	cmp	r0, r2
{
 c0252ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0252b2:	4606      	mov	r6, r0
 c0252b4:	460c      	mov	r4, r1
 c0252b6:	4615      	mov	r5, r2
    if( X == B )
 c0252b8:	d002      	beq.n	c0252c0 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
 c0252ba:	4288      	cmp	r0, r1
 c0252bc:	d131      	bne.n	c025322 <mbedtls_mpi_add_abs+0x76>
{
 c0252be:	462c      	mov	r4, r5
    X->s = 1;
 c0252c0:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
 c0252c2:	f8d4 8004 	ldr.w	r8, [r4, #4]
    X->s = 1;
 c0252c6:	6033      	str	r3, [r6, #0]
 c0252c8:	ea4f 0388 	mov.w	r3, r8, lsl #2
    for( j = B->n; j > 0; j-- )
 c0252cc:	f1b8 0f00 	cmp.w	r8, #0
 c0252d0:	d12f      	bne.n	c025332 <mbedtls_mpi_add_abs+0x86>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 c0252d2:	4641      	mov	r1, r8
 c0252d4:	4630      	mov	r0, r6
 c0252d6:	f7ff fc67 	bl	c024ba8 <mbedtls_mpi_grow>
 c0252da:	4607      	mov	r7, r0
 c0252dc:	bb30      	cbnz	r0, c02532c <mbedtls_mpi_add_abs+0x80>
    o = B->p; p = X->p; c = 0;
 c0252de:	68b3      	ldr	r3, [r6, #8]
 c0252e0:	f8d4 e008 	ldr.w	lr, [r4, #8]
 c0252e4:	4619      	mov	r1, r3
 c0252e6:	4604      	mov	r4, r0
    for( i = 0; i < j; i++, o++, p++ )
 c0252e8:	4605      	mov	r5, r0
 c0252ea:	45a8      	cmp	r8, r5
 c0252ec:	d12b      	bne.n	c025346 <mbedtls_mpi_add_abs+0x9a>
 c0252ee:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
 c0252f2:	b1dc      	cbz	r4, c02532c <mbedtls_mpi_add_abs+0x80>
        if( i >= X->n )
 c0252f4:	6872      	ldr	r2, [r6, #4]
 c0252f6:	f105 0801 	add.w	r8, r5, #1
 c0252fa:	42aa      	cmp	r2, r5
 c0252fc:	d807      	bhi.n	c02530e <mbedtls_mpi_add_abs+0x62>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 c0252fe:	4641      	mov	r1, r8
 c025300:	4630      	mov	r0, r6
 c025302:	f7ff fc51 	bl	c024ba8 <mbedtls_mpi_grow>
 c025306:	bb80      	cbnz	r0, c02536a <mbedtls_mpi_add_abs+0xbe>
            p = X->p + i;
 c025308:	68b3      	ldr	r3, [r6, #8]
 c02530a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 c02530e:	681a      	ldr	r2, [r3, #0]
 c025310:	2100      	movs	r1, #0
 c025312:	1914      	adds	r4, r2, r4
 c025314:	bf28      	it	cs
 c025316:	2101      	movcs	r1, #1
        *p += c; c = ( *p < c ); i++; p++;
 c025318:	f843 4b04 	str.w	r4, [r3], #4
 c02531c:	4645      	mov	r5, r8
 c02531e:	460c      	mov	r4, r1
 c025320:	e7e7      	b.n	c0252f2 <mbedtls_mpi_add_abs+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 c025322:	f7ff fc67 	bl	c024bf4 <mbedtls_mpi_copy>
 c025326:	4607      	mov	r7, r0
 c025328:	2800      	cmp	r0, #0
 c02532a:	d0c8      	beq.n	c0252be <mbedtls_mpi_add_abs+0x12>
}
 c02532c:	4638      	mov	r0, r7
 c02532e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
 c025332:	68a2      	ldr	r2, [r4, #8]
 c025334:	441a      	add	r2, r3
 c025336:	f852 2c04 	ldr.w	r2, [r2, #-4]
 c02533a:	3b04      	subs	r3, #4
 c02533c:	2a00      	cmp	r2, #0
 c02533e:	d1c8      	bne.n	c0252d2 <mbedtls_mpi_add_abs+0x26>
    for( j = B->n; j > 0; j-- )
 c025340:	f108 38ff 	add.w	r8, r8, #4294967295
 c025344:	e7c2      	b.n	c0252cc <mbedtls_mpi_add_abs+0x20>
 c025346:	680a      	ldr	r2, [r1, #0]
        tmp= *o;
 c025348:	f85e 0025 	ldr.w	r0, [lr, r5, lsl #2]
 c02534c:	1914      	adds	r4, r2, r4
 c02534e:	f04f 0c00 	mov.w	ip, #0
 c025352:	bf28      	it	cs
 c025354:	f04f 0c01 	movcs.w	ip, #1
 c025358:	1824      	adds	r4, r4, r0
        *p += tmp; c += ( *p < tmp );
 c02535a:	f841 4b04 	str.w	r4, [r1], #4
 c02535e:	bf2c      	ite	cs
 c025360:	2401      	movcs	r4, #1
 c025362:	2400      	movcc	r4, #0
    for( i = 0; i < j; i++, o++, p++ )
 c025364:	3501      	adds	r5, #1
        *p += tmp; c += ( *p < tmp );
 c025366:	4464      	add	r4, ip
 c025368:	e7bf      	b.n	c0252ea <mbedtls_mpi_add_abs+0x3e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 c02536a:	4607      	mov	r7, r0
    return( ret );
 c02536c:	e7de      	b.n	c02532c <mbedtls_mpi_add_abs+0x80>

0c02536e <mbedtls_mpi_sub_abs>:
{
 c02536e:	b5f0      	push	{r4, r5, r6, r7, lr}
 c025370:	460f      	mov	r7, r1
 c025372:	b085      	sub	sp, #20
 c025374:	4606      	mov	r6, r0
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 c025376:	4611      	mov	r1, r2
 c025378:	4638      	mov	r0, r7
{
 c02537a:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 c02537c:	f7ff feab 	bl	c0250d6 <mbedtls_mpi_cmp_abs>
 c025380:	2800      	cmp	r0, #0
 c025382:	db2f      	blt.n	c0253e4 <mbedtls_mpi_sub_abs+0x76>
    X->n = 0;
 c025384:	2300      	movs	r3, #0
 c025386:	2201      	movs	r2, #1
    if( X == B )
 c025388:	42b5      	cmp	r5, r6
    X->n = 0;
 c02538a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    X->p = NULL;
 c02538e:	9303      	str	r3, [sp, #12]
    if( X == B )
 c025390:	d106      	bne.n	c0253a0 <mbedtls_mpi_sub_abs+0x32>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 c025392:	4629      	mov	r1, r5
 c025394:	a801      	add	r0, sp, #4
 c025396:	f7ff fc2d 	bl	c024bf4 <mbedtls_mpi_copy>
 c02539a:	4604      	mov	r4, r0
 c02539c:	b9a0      	cbnz	r0, c0253c8 <mbedtls_mpi_sub_abs+0x5a>
        B = &TB;
 c02539e:	ad01      	add	r5, sp, #4
    if( X != A )
 c0253a0:	42b7      	cmp	r7, r6
 c0253a2:	d10a      	bne.n	c0253ba <mbedtls_mpi_sub_abs+0x4c>
    X->s = 1;
 c0253a4:	2301      	movs	r3, #1
    for( n = B->n; n > 0; n-- )
 c0253a6:	6868      	ldr	r0, [r5, #4]
 c0253a8:	68a9      	ldr	r1, [r5, #8]
    X->s = 1;
 c0253aa:	6033      	str	r3, [r6, #0]
 c0253ac:	0083      	lsls	r3, r0, #2
    for( n = B->n; n > 0; n-- )
 c0253ae:	b988      	cbnz	r0, c0253d4 <mbedtls_mpi_sub_abs+0x66>
    mpi_sub_hlp( n, B->p, X->p );
 c0253b0:	68b2      	ldr	r2, [r6, #8]
 c0253b2:	f7ff f915 	bl	c0245e0 <mpi_sub_hlp>
    ret = 0;
 c0253b6:	2400      	movs	r4, #0
 c0253b8:	e006      	b.n	c0253c8 <mbedtls_mpi_sub_abs+0x5a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 c0253ba:	4639      	mov	r1, r7
 c0253bc:	4630      	mov	r0, r6
 c0253be:	f7ff fc19 	bl	c024bf4 <mbedtls_mpi_copy>
 c0253c2:	4604      	mov	r4, r0
 c0253c4:	2800      	cmp	r0, #0
 c0253c6:	d0ed      	beq.n	c0253a4 <mbedtls_mpi_sub_abs+0x36>
    mbedtls_mpi_free( &TB );
 c0253c8:	a801      	add	r0, sp, #4
 c0253ca:	f7ff fbdb 	bl	c024b84 <mbedtls_mpi_free>
}
 c0253ce:	4620      	mov	r0, r4
 c0253d0:	b005      	add	sp, #20
 c0253d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( B->p[n - 1] != 0 )
 c0253d4:	18ca      	adds	r2, r1, r3
 c0253d6:	f852 2c04 	ldr.w	r2, [r2, #-4]
 c0253da:	3b04      	subs	r3, #4
 c0253dc:	2a00      	cmp	r2, #0
 c0253de:	d1e7      	bne.n	c0253b0 <mbedtls_mpi_sub_abs+0x42>
    for( n = B->n; n > 0; n-- )
 c0253e0:	3801      	subs	r0, #1
 c0253e2:	e7e4      	b.n	c0253ae <mbedtls_mpi_sub_abs+0x40>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 c0253e4:	f06f 0409 	mvn.w	r4, #9
 c0253e8:	e7f1      	b.n	c0253ce <mbedtls_mpi_sub_abs+0x60>

0c0253ea <mbedtls_mpi_add_mpi>:
{
 c0253ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
 c0253ec:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s < 0 )
 c0253ee:	6813      	ldr	r3, [r2, #0]
{
 c0253f0:	4605      	mov	r5, r0
    if( A->s * B->s < 0 )
 c0253f2:	4363      	muls	r3, r4
{
 c0253f4:	460f      	mov	r7, r1
 c0253f6:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
 c0253f8:	d516      	bpl.n	c025428 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 c0253fa:	4611      	mov	r1, r2
 c0253fc:	4638      	mov	r0, r7
 c0253fe:	f7ff fe6a 	bl	c0250d6 <mbedtls_mpi_cmp_abs>
 c025402:	2800      	cmp	r0, #0
 c025404:	db06      	blt.n	c025414 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 c025406:	4632      	mov	r2, r6
 c025408:	4639      	mov	r1, r7
 c02540a:	4628      	mov	r0, r5
 c02540c:	f7ff ffaf 	bl	c02536e <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 c025410:	b140      	cbz	r0, c025424 <mbedtls_mpi_add_mpi+0x3a>
}
 c025412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 c025414:	463a      	mov	r2, r7
 c025416:	4631      	mov	r1, r6
 c025418:	4628      	mov	r0, r5
 c02541a:	f7ff ffa8 	bl	c02536e <mbedtls_mpi_sub_abs>
 c02541e:	2800      	cmp	r0, #0
 c025420:	d1f7      	bne.n	c025412 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
 c025422:	4264      	negs	r4, r4
        X->s = s;
 c025424:	602c      	str	r4, [r5, #0]
    return( ret );
 c025426:	e7f4      	b.n	c025412 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 c025428:	f7ff ff40 	bl	c0252ac <mbedtls_mpi_add_abs>
 c02542c:	e7f0      	b.n	c025410 <mbedtls_mpi_add_mpi+0x26>

0c02542e <mbedtls_mpi_sub_mpi>:
{
 c02542e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
 c025430:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s > 0 )
 c025432:	6813      	ldr	r3, [r2, #0]
{
 c025434:	4605      	mov	r5, r0
    if( A->s * B->s > 0 )
 c025436:	4363      	muls	r3, r4
 c025438:	2b00      	cmp	r3, #0
{
 c02543a:	460f      	mov	r7, r1
 c02543c:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
 c02543e:	dd16      	ble.n	c02546e <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 c025440:	4611      	mov	r1, r2
 c025442:	4638      	mov	r0, r7
 c025444:	f7ff fe47 	bl	c0250d6 <mbedtls_mpi_cmp_abs>
 c025448:	2800      	cmp	r0, #0
 c02544a:	db06      	blt.n	c02545a <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 c02544c:	4632      	mov	r2, r6
 c02544e:	4639      	mov	r1, r7
 c025450:	4628      	mov	r0, r5
 c025452:	f7ff ff8c 	bl	c02536e <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 c025456:	b140      	cbz	r0, c02546a <mbedtls_mpi_sub_mpi+0x3c>
}
 c025458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 c02545a:	463a      	mov	r2, r7
 c02545c:	4631      	mov	r1, r6
 c02545e:	4628      	mov	r0, r5
 c025460:	f7ff ff85 	bl	c02536e <mbedtls_mpi_sub_abs>
 c025464:	2800      	cmp	r0, #0
 c025466:	d1f7      	bne.n	c025458 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
 c025468:	4264      	negs	r4, r4
        X->s = s;
 c02546a:	602c      	str	r4, [r5, #0]
    return( ret );
 c02546c:	e7f4      	b.n	c025458 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 c02546e:	f7ff ff1d 	bl	c0252ac <mbedtls_mpi_add_abs>
 c025472:	e7f0      	b.n	c025456 <mbedtls_mpi_sub_mpi+0x28>

0c025474 <mbedtls_mpi_add_int>:
{
 c025474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 c025476:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 c02547a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 c02547e:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 c025480:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 c025482:	bfb4      	ite	lt
 c025484:	f04f 33ff 	movlt.w	r3, #4294967295
 c025488:	2301      	movge	r3, #1
 c02548a:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 c02548c:	2301      	movs	r3, #1
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 c02548e:	aa01      	add	r2, sp, #4
    _B.n = 1;
 c025490:	9302      	str	r3, [sp, #8]
    _B.p = p;
 c025492:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 c025496:	f7ff ffa8 	bl	c0253ea <mbedtls_mpi_add_mpi>
}
 c02549a:	b005      	add	sp, #20
 c02549c:	f85d fb04 	ldr.w	pc, [sp], #4

0c0254a0 <mbedtls_mpi_sub_int>:
{
 c0254a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 c0254a2:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 c0254a6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 c0254aa:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 c0254ac:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 c0254ae:	bfb4      	ite	lt
 c0254b0:	f04f 33ff 	movlt.w	r3, #4294967295
 c0254b4:	2301      	movge	r3, #1
 c0254b6:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 c0254b8:	2301      	movs	r3, #1
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 c0254ba:	aa01      	add	r2, sp, #4
    _B.n = 1;
 c0254bc:	9302      	str	r3, [sp, #8]
    _B.p = p;
 c0254be:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 c0254c2:	f7ff ffb4 	bl	c02542e <mbedtls_mpi_sub_mpi>
}
 c0254c6:	b005      	add	sp, #20
 c0254c8:	f85d fb04 	ldr.w	pc, [sp], #4

0c0254cc <mbedtls_mpi_mul_mpi>:
{
 c0254cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    X->n = 0;
 c0254d0:	2300      	movs	r3, #0
{
 c0254d2:	4615      	mov	r5, r2
    X->n = 0;
 c0254d4:	2201      	movs	r2, #1
{
 c0254d6:	b086      	sub	sp, #24
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 c0254d8:	4288      	cmp	r0, r1
{
 c0254da:	4680      	mov	r8, r0
 c0254dc:	460e      	mov	r6, r1
    X->n = 0;
 c0254de:	e9cd 2300 	strd	r2, r3, [sp]
    X->s = 1;
 c0254e2:	e9cd 3202 	strd	r3, r2, [sp, #8]
    X->p = NULL;
 c0254e6:	e9cd 3304 	strd	r3, r3, [sp, #16]
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 c0254ea:	d105      	bne.n	c0254f8 <mbedtls_mpi_mul_mpi+0x2c>
 c0254ec:	4668      	mov	r0, sp
 c0254ee:	f7ff fb81 	bl	c024bf4 <mbedtls_mpi_copy>
 c0254f2:	4604      	mov	r4, r0
 c0254f4:	bb50      	cbnz	r0, c02554c <mbedtls_mpi_mul_mpi+0x80>
 c0254f6:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 c0254f8:	45a8      	cmp	r8, r5
 c0254fa:	d106      	bne.n	c02550a <mbedtls_mpi_mul_mpi+0x3e>
 c0254fc:	4641      	mov	r1, r8
 c0254fe:	a803      	add	r0, sp, #12
 c025500:	f7ff fb78 	bl	c024bf4 <mbedtls_mpi_copy>
 c025504:	4604      	mov	r4, r0
 c025506:	bb08      	cbnz	r0, c02554c <mbedtls_mpi_mul_mpi+0x80>
 c025508:	ad03      	add	r5, sp, #12
    for( i = A->n; i > 0; i-- )
 c02550a:	f8d6 9004 	ldr.w	r9, [r6, #4]
 c02550e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 c025512:	f1b9 0f00 	cmp.w	r9, #0
 c025516:	d123      	bne.n	c025560 <mbedtls_mpi_mul_mpi+0x94>
    for( j = B->n; j > 0; j-- )
 c025518:	686f      	ldr	r7, [r5, #4]
 c02551a:	00bb      	lsls	r3, r7, #2
 c02551c:	bb57      	cbnz	r7, c025574 <mbedtls_mpi_mul_mpi+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 c02551e:	eb09 0107 	add.w	r1, r9, r7
 c025522:	4640      	mov	r0, r8
 c025524:	f7ff fb40 	bl	c024ba8 <mbedtls_mpi_grow>
 c025528:	4604      	mov	r4, r0
 c02552a:	b978      	cbnz	r0, c02554c <mbedtls_mpi_mul_mpi+0x80>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 c02552c:	4601      	mov	r1, r0
 c02552e:	4640      	mov	r0, r8
 c025530:	f7ff fbe2 	bl	c024cf8 <mbedtls_mpi_lset>
 c025534:	4604      	mov	r4, r0
 c025536:	b948      	cbnz	r0, c02554c <mbedtls_mpi_mul_mpi+0x80>
 c025538:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 c02553c:	f1aa 0a04 	sub.w	sl, sl, #4
    for( ; j > 0; j-- )
 c025540:	bb0f      	cbnz	r7, c025586 <mbedtls_mpi_mul_mpi+0xba>
    X->s = A->s * B->s;
 c025542:	6832      	ldr	r2, [r6, #0]
 c025544:	682b      	ldr	r3, [r5, #0]
 c025546:	4353      	muls	r3, r2
 c025548:	f8c8 3000 	str.w	r3, [r8]
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 c02554c:	a803      	add	r0, sp, #12
 c02554e:	f7ff fb19 	bl	c024b84 <mbedtls_mpi_free>
 c025552:	4668      	mov	r0, sp
 c025554:	f7ff fb16 	bl	c024b84 <mbedtls_mpi_free>
}
 c025558:	4620      	mov	r0, r4
 c02555a:	b006      	add	sp, #24
 c02555c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( A->p[i - 1] != 0 )
 c025560:	68b2      	ldr	r2, [r6, #8]
 c025562:	441a      	add	r2, r3
 c025564:	f852 2c04 	ldr.w	r2, [r2, #-4]
 c025568:	3b04      	subs	r3, #4
 c02556a:	2a00      	cmp	r2, #0
 c02556c:	d1d4      	bne.n	c025518 <mbedtls_mpi_mul_mpi+0x4c>
    for( i = A->n; i > 0; i-- )
 c02556e:	f109 39ff 	add.w	r9, r9, #4294967295
 c025572:	e7ce      	b.n	c025512 <mbedtls_mpi_mul_mpi+0x46>
        if( B->p[j - 1] != 0 )
 c025574:	68aa      	ldr	r2, [r5, #8]
 c025576:	441a      	add	r2, r3
 c025578:	f852 2c04 	ldr.w	r2, [r2, #-4]
 c02557c:	3b04      	subs	r3, #4
 c02557e:	2a00      	cmp	r2, #0
 c025580:	d1cd      	bne.n	c02551e <mbedtls_mpi_mul_mpi+0x52>
    for( j = B->n; j > 0; j-- )
 c025582:	3f01      	subs	r7, #1
 c025584:	e7ca      	b.n	c02551c <mbedtls_mpi_mul_mpi+0x50>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 c025586:	68ab      	ldr	r3, [r5, #8]
 c025588:	f8d8 2008 	ldr.w	r2, [r8, #8]
 c02558c:	f853 300a 	ldr.w	r3, [r3, sl]
 c025590:	4452      	add	r2, sl
 c025592:	68b1      	ldr	r1, [r6, #8]
 c025594:	4648      	mov	r0, r9
 c025596:	f7ff f84d 	bl	c024634 <mpi_mul_hlp>
    for( ; j > 0; j-- )
 c02559a:	3f01      	subs	r7, #1
 c02559c:	e7ce      	b.n	c02553c <mbedtls_mpi_mul_mpi+0x70>

0c02559e <mbedtls_mpi_mul_int>:
{
 c02559e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
 c0255a0:	2301      	movs	r3, #1
    p[0] = b;
 c0255a2:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 c0255a4:	aa01      	add	r2, sp, #4
    _B.n = 1;
 c0255a6:	e9cd 3301 	strd	r3, r3, [sp, #4]
    _B.p = p;
 c0255aa:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 c0255ae:	f7ff ff8d 	bl	c0254cc <mbedtls_mpi_mul_mpi>
}
 c0255b2:	b005      	add	sp, #20
 c0255b4:	f85d fb04 	ldr.w	pc, [sp], #4

0c0255b8 <mbedtls_mpi_read_string>:
{
 c0255b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if( radix < 2 || radix > 16 )
 c0255bc:	1e8b      	subs	r3, r1, #2
 c0255be:	2b0e      	cmp	r3, #14
{
 c0255c0:	4605      	mov	r5, r0
 c0255c2:	4689      	mov	r9, r1
 c0255c4:	4690      	mov	r8, r2
    if( radix < 2 || radix > 16 )
 c0255c6:	d905      	bls.n	c0255d4 <mbedtls_mpi_read_string+0x1c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c0255c8:	f06f 0403 	mvn.w	r4, #3
}
 c0255cc:	4620      	mov	r0, r4
 c0255ce:	b004      	add	sp, #16
 c0255d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    X->n = 0;
 c0255d4:	2301      	movs	r3, #1
 c0255d6:	2400      	movs	r4, #0
    slen = strlen( s );
 c0255d8:	4610      	mov	r0, r2
    X->n = 0;
 c0255da:	e9cd 3401 	strd	r3, r4, [sp, #4]
    X->p = NULL;
 c0255de:	9403      	str	r4, [sp, #12]
    slen = strlen( s );
 c0255e0:	f7f2 ff28 	bl	c018434 <strlen>
    if( radix == 16 )
 c0255e4:	f1b9 0f10 	cmp.w	r9, #16
    slen = strlen( s );
 c0255e8:	4606      	mov	r6, r0
    if( radix == 16 )
 c0255ea:	d13e      	bne.n	c02566a <mbedtls_mpi_read_string+0xb2>
        if( slen > MPI_SIZE_T_MAX >> 2 )
 c0255ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 c0255f0:	d2ea      	bcs.n	c0255c8 <mbedtls_mpi_read_string+0x10>
        n = BITS_TO_LIMBS( slen << 2 );
 c0255f2:	0083      	lsls	r3, r0, #2
 c0255f4:	f013 0f1c 	tst.w	r3, #28
 c0255f8:	bf0c      	ite	eq
 c0255fa:	4621      	moveq	r1, r4
 c0255fc:	2101      	movne	r1, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n ) );
 c0255fe:	4628      	mov	r0, r5
 c025600:	eb01 1153 	add.w	r1, r1, r3, lsr #5
 c025604:	f7ff fad0 	bl	c024ba8 <mbedtls_mpi_grow>
 c025608:	4604      	mov	r4, r0
 c02560a:	b990      	cbnz	r0, c025632 <mbedtls_mpi_read_string+0x7a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 c02560c:	4601      	mov	r1, r0
 c02560e:	4628      	mov	r0, r5
 c025610:	f7ff fb72 	bl	c024cf8 <mbedtls_mpi_lset>
 c025614:	4604      	mov	r4, r0
 c025616:	b960      	cbnz	r0, c025632 <mbedtls_mpi_read_string+0x7a>
        for( i = slen, j = 0; i > 0; i--, j++ )
 c025618:	4607      	mov	r7, r0
 c02561a:	b90e      	cbnz	r6, c025620 <mbedtls_mpi_read_string+0x68>
            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
 c02561c:	2400      	movs	r4, #0
 c02561e:	e008      	b.n	c025632 <mbedtls_mpi_read_string+0x7a>
            if( i == 1 && s[i - 1] == '-' )
 c025620:	2e01      	cmp	r6, #1
 c025622:	d10a      	bne.n	c02563a <mbedtls_mpi_read_string+0x82>
 c025624:	f898 3000 	ldrb.w	r3, [r8]
 c025628:	2b2d      	cmp	r3, #45	; 0x2d
 c02562a:	d106      	bne.n	c02563a <mbedtls_mpi_read_string+0x82>
                X->s = -1;
 c02562c:	f04f 33ff 	mov.w	r3, #4294967295
 c025630:	602b      	str	r3, [r5, #0]
    mbedtls_mpi_free( &T );
 c025632:	a801      	add	r0, sp, #4
 c025634:	f7ff faa6 	bl	c024b84 <mbedtls_mpi_free>
    return( ret );
 c025638:	e7c8      	b.n	c0255cc <mbedtls_mpi_read_string+0x14>
            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
 c02563a:	3e01      	subs	r6, #1
 c02563c:	f818 2006 	ldrb.w	r2, [r8, r6]
 c025640:	2110      	movs	r1, #16
 c025642:	4668      	mov	r0, sp
 c025644:	f7fe ffb0 	bl	c0245a8 <mpi_get_digit>
 c025648:	2800      	cmp	r0, #0
 c02564a:	d143      	bne.n	c0256d4 <mbedtls_mpi_read_string+0x11c>
            X->p[j / ( 2 * ciL )] |= d << ( ( j % ( 2 * ciL ) ) << 2 );
 c02564c:	9b00      	ldr	r3, [sp, #0]
 c02564e:	68a9      	ldr	r1, [r5, #8]
 c025650:	00ba      	lsls	r2, r7, #2
 c025652:	08f8      	lsrs	r0, r7, #3
 c025654:	f002 021c 	and.w	r2, r2, #28
 c025658:	fa03 f202 	lsl.w	r2, r3, r2
 c02565c:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
        for( i = slen, j = 0; i > 0; i--, j++ )
 c025660:	3701      	adds	r7, #1
            X->p[j / ( 2 * ciL )] |= d << ( ( j % ( 2 * ciL ) ) << 2 );
 c025662:	4313      	orrs	r3, r2
 c025664:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 c025668:	e7d7      	b.n	c02561a <mbedtls_mpi_read_string+0x62>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 c02566a:	4621      	mov	r1, r4
 c02566c:	4628      	mov	r0, r5
 c02566e:	f7ff fb43 	bl	c024cf8 <mbedtls_mpi_lset>
 c025672:	4604      	mov	r4, r0
 c025674:	2800      	cmp	r0, #0
 c025676:	d1dc      	bne.n	c025632 <mbedtls_mpi_read_string+0x7a>
        for( i = 0; i < slen; i++ )
 c025678:	4607      	mov	r7, r0
                X->s = -1;
 c02567a:	f04f 3aff 	mov.w	sl, #4294967295
        for( i = 0; i < slen; i++ )
 c02567e:	42b7      	cmp	r7, r6
 c025680:	d0cc      	beq.n	c02561c <mbedtls_mpi_read_string+0x64>
            if( i == 0 && s[i] == '-' )
 c025682:	b93f      	cbnz	r7, c025694 <mbedtls_mpi_read_string+0xdc>
 c025684:	f898 3000 	ldrb.w	r3, [r8]
 c025688:	2b2d      	cmp	r3, #45	; 0x2d
 c02568a:	d103      	bne.n	c025694 <mbedtls_mpi_read_string+0xdc>
                X->s = -1;
 c02568c:	f8c5 a000 	str.w	sl, [r5]
        for( i = 0; i < slen; i++ )
 c025690:	3701      	adds	r7, #1
 c025692:	e7f4      	b.n	c02567e <mbedtls_mpi_read_string+0xc6>
            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i] ) );
 c025694:	f818 2007 	ldrb.w	r2, [r8, r7]
 c025698:	4649      	mov	r1, r9
 c02569a:	4668      	mov	r0, sp
 c02569c:	f7fe ff84 	bl	c0245a8 <mpi_get_digit>
 c0256a0:	4604      	mov	r4, r0
 c0256a2:	2800      	cmp	r0, #0
 c0256a4:	d1c5      	bne.n	c025632 <mbedtls_mpi_read_string+0x7a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T, X, radix ) );
 c0256a6:	464a      	mov	r2, r9
 c0256a8:	4629      	mov	r1, r5
 c0256aa:	a801      	add	r0, sp, #4
 c0256ac:	f7ff ff77 	bl	c02559e <mbedtls_mpi_mul_int>
 c0256b0:	4604      	mov	r4, r0
 c0256b2:	2800      	cmp	r0, #0
 c0256b4:	d1bd      	bne.n	c025632 <mbedtls_mpi_read_string+0x7a>
            if( X->s == 1 )
 c0256b6:	682b      	ldr	r3, [r5, #0]
 c0256b8:	9a00      	ldr	r2, [sp, #0]
 c0256ba:	2b01      	cmp	r3, #1
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, &T, d ) );
 c0256bc:	a901      	add	r1, sp, #4
 c0256be:	4628      	mov	r0, r5
            if( X->s == 1 )
 c0256c0:	d105      	bne.n	c0256ce <mbedtls_mpi_read_string+0x116>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, &T, d ) );
 c0256c2:	f7ff fed7 	bl	c025474 <mbedtls_mpi_add_int>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );
 c0256c6:	4604      	mov	r4, r0
 c0256c8:	2800      	cmp	r0, #0
 c0256ca:	d0e1      	beq.n	c025690 <mbedtls_mpi_read_string+0xd8>
cleanup:
 c0256cc:	e7b1      	b.n	c025632 <mbedtls_mpi_read_string+0x7a>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );
 c0256ce:	f7ff fee7 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c0256d2:	e7f8      	b.n	c0256c6 <mbedtls_mpi_read_string+0x10e>
            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
 c0256d4:	4604      	mov	r4, r0
 c0256d6:	e7ac      	b.n	c025632 <mbedtls_mpi_read_string+0x7a>

0c0256d8 <mbedtls_mpi_div_mpi>:
{
 c0256d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0256dc:	b099      	sub	sp, #100	; 0x64
 c0256de:	9001      	str	r0, [sp, #4]
 c0256e0:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 c0256e2:	4618      	mov	r0, r3
 c0256e4:	2100      	movs	r1, #0
{
 c0256e6:	4690      	mov	r8, r2
 c0256e8:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 c0256ea:	f7ff fdc9 	bl	c025280 <mbedtls_mpi_cmp_int>
 c0256ee:	2800      	cmp	r0, #0
 c0256f0:	f000 81a5 	beq.w	c025a3e <mbedtls_mpi_div_mpi+0x366>
    X->n = 0;
 c0256f4:	2400      	movs	r4, #0
 c0256f6:	2501      	movs	r5, #1
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 c0256f8:	9903      	ldr	r1, [sp, #12]
 c0256fa:	4640      	mov	r0, r8
    X->n = 0;
 c0256fc:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    X->s = 1;
 c025700:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    X->p = NULL;
 c025704:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    X->n = 0;
 c025708:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
    X->s = 1;
 c02570c:	e9cd 4511 	strd	r4, r5, [sp, #68]	; 0x44
    X->p = NULL;
 c025710:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
    X->n = 0;
 c025714:	e9cd 5415 	strd	r5, r4, [sp, #84]	; 0x54
    X->p = NULL;
 c025718:	9417      	str	r4, [sp, #92]	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 c02571a:	f7ff fcdc 	bl	c0250d6 <mbedtls_mpi_cmp_abs>
 c02571e:	42a0      	cmp	r0, r4
 c025720:	da26      	bge.n	c025770 <mbedtls_mpi_div_mpi+0x98>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 c025722:	9b01      	ldr	r3, [sp, #4]
 c025724:	b92b      	cbnz	r3, c025732 <mbedtls_mpi_div_mpi+0x5a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 c025726:	b9df      	cbnz	r7, c025760 <mbedtls_mpi_div_mpi+0x88>
        return( 0 );
 c025728:	2400      	movs	r4, #0
}
 c02572a:	4620      	mov	r0, r4
 c02572c:	b019      	add	sp, #100	; 0x64
 c02572e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 c025732:	4621      	mov	r1, r4
 c025734:	9801      	ldr	r0, [sp, #4]
 c025736:	f7ff fadf 	bl	c024cf8 <mbedtls_mpi_lset>
 c02573a:	4604      	mov	r4, r0
 c02573c:	2800      	cmp	r0, #0
 c02573e:	d0f2      	beq.n	c025726 <mbedtls_mpi_div_mpi+0x4e>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 c025740:	a809      	add	r0, sp, #36	; 0x24
 c025742:	f7ff fa1f 	bl	c024b84 <mbedtls_mpi_free>
 c025746:	a80c      	add	r0, sp, #48	; 0x30
 c025748:	f7ff fa1c 	bl	c024b84 <mbedtls_mpi_free>
 c02574c:	a80f      	add	r0, sp, #60	; 0x3c
 c02574e:	f7ff fa19 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 c025752:	a812      	add	r0, sp, #72	; 0x48
 c025754:	f7ff fa16 	bl	c024b84 <mbedtls_mpi_free>
 c025758:	a815      	add	r0, sp, #84	; 0x54
 c02575a:	f7ff fa13 	bl	c024b84 <mbedtls_mpi_free>
    return( ret );
 c02575e:	e7e4      	b.n	c02572a <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 c025760:	4641      	mov	r1, r8
 c025762:	4638      	mov	r0, r7
 c025764:	f7ff fa46 	bl	c024bf4 <mbedtls_mpi_copy>
 c025768:	4604      	mov	r4, r0
 c02576a:	2800      	cmp	r0, #0
 c02576c:	d1e8      	bne.n	c025740 <mbedtls_mpi_div_mpi+0x68>
 c02576e:	e7db      	b.n	c025728 <mbedtls_mpi_div_mpi+0x50>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 c025770:	4641      	mov	r1, r8
 c025772:	a809      	add	r0, sp, #36	; 0x24
 c025774:	f7ff fa3e 	bl	c024bf4 <mbedtls_mpi_copy>
 c025778:	4604      	mov	r4, r0
 c02577a:	2800      	cmp	r0, #0
 c02577c:	d1e0      	bne.n	c025740 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 c02577e:	ae0c      	add	r6, sp, #48	; 0x30
 c025780:	9903      	ldr	r1, [sp, #12]
 c025782:	4630      	mov	r0, r6
 c025784:	f7ff fa36 	bl	c024bf4 <mbedtls_mpi_copy>
 c025788:	4604      	mov	r4, r0
 c02578a:	2800      	cmp	r0, #0
 c02578c:	d1d8      	bne.n	c025740 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 c02578e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 c025792:	a80f      	add	r0, sp, #60	; 0x3c
 c025794:	3102      	adds	r1, #2
    X.s = Y.s = 1;
 c025796:	950c      	str	r5, [sp, #48]	; 0x30
 c025798:	9509      	str	r5, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 c02579a:	f7ff fa05 	bl	c024ba8 <mbedtls_mpi_grow>
 c02579e:	4604      	mov	r4, r0
 c0257a0:	2800      	cmp	r0, #0
 c0257a2:	d1cd      	bne.n	c025740 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 c0257a4:	4601      	mov	r1, r0
 c0257a6:	a80f      	add	r0, sp, #60	; 0x3c
 c0257a8:	f7ff faa6 	bl	c024cf8 <mbedtls_mpi_lset>
 c0257ac:	4604      	mov	r4, r0
 c0257ae:	2800      	cmp	r0, #0
 c0257b0:	d1c6      	bne.n	c025740 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 c0257b2:	2102      	movs	r1, #2
 c0257b4:	a812      	add	r0, sp, #72	; 0x48
 c0257b6:	f7ff f9f7 	bl	c024ba8 <mbedtls_mpi_grow>
 c0257ba:	4604      	mov	r4, r0
 c0257bc:	2800      	cmp	r0, #0
 c0257be:	d1bf      	bne.n	c025740 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 c0257c0:	2103      	movs	r1, #3
 c0257c2:	a815      	add	r0, sp, #84	; 0x54
 c0257c4:	f7ff f9f0 	bl	c024ba8 <mbedtls_mpi_grow>
 c0257c8:	4604      	mov	r4, r0
 c0257ca:	2800      	cmp	r0, #0
 c0257cc:	d1b8      	bne.n	c025740 <mbedtls_mpi_div_mpi+0x68>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
 c0257ce:	4630      	mov	r0, r6
 c0257d0:	f7ff fb02 	bl	c024dd8 <mbedtls_mpi_bitlen>
 c0257d4:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 c0257d8:	281f      	cmp	r0, #31
 c0257da:	d076      	beq.n	c0258ca <mbedtls_mpi_div_mpi+0x1f2>
        k = biL - 1 - k;
 c0257dc:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 c0257e0:	4619      	mov	r1, r3
 c0257e2:	a809      	add	r0, sp, #36	; 0x24
        k = biL - 1 - k;
 c0257e4:	9302      	str	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 c0257e6:	f7ff fbf3 	bl	c024fd0 <mbedtls_mpi_shift_l>
 c0257ea:	4604      	mov	r4, r0
 c0257ec:	2800      	cmp	r0, #0
 c0257ee:	d1a7      	bne.n	c025740 <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 c0257f0:	9902      	ldr	r1, [sp, #8]
 c0257f2:	4630      	mov	r0, r6
 c0257f4:	f7ff fbec 	bl	c024fd0 <mbedtls_mpi_shift_l>
 c0257f8:	4604      	mov	r4, r0
 c0257fa:	2800      	cmp	r0, #0
 c0257fc:	d1a0      	bne.n	c025740 <mbedtls_mpi_div_mpi+0x68>
    n = X.n - 1;
 c0257fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    t = Y.n - 1;
 c025800:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    n = X.n - 1;
 c025804:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
 c025808:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 c02580c:	eba9 0b03 	sub.w	fp, r9, r3
    t = Y.n - 1;
 c025810:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 c025812:	ea4f 134b 	mov.w	r3, fp, lsl #5
 c025816:	4619      	mov	r1, r3
 c025818:	4630      	mov	r0, r6
 c02581a:	9304      	str	r3, [sp, #16]
 c02581c:	f7ff fbd8 	bl	c024fd0 <mbedtls_mpi_shift_l>
 c025820:	4604      	mov	r4, r0
 c025822:	2800      	cmp	r0, #0
 c025824:	d18c      	bne.n	c025740 <mbedtls_mpi_div_mpi+0x68>
        Z.p[n - t]++;
 c025826:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 c02582a:	4631      	mov	r1, r6
 c02582c:	a809      	add	r0, sp, #36	; 0x24
 c02582e:	f7ff fce7 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c025832:	2800      	cmp	r0, #0
 c025834:	da4b      	bge.n	c0258ce <mbedtls_mpi_div_mpi+0x1f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 c025836:	9904      	ldr	r1, [sp, #16]
 c025838:	4630      	mov	r0, r6
 c02583a:	f7ff fc11 	bl	c025060 <mbedtls_mpi_shift_r>
 c02583e:	4604      	mov	r4, r0
 c025840:	2800      	cmp	r0, #0
 c025842:	f47f af7d 	bne.w	c025740 <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
 c025846:	9b00      	ldr	r3, [sp, #0]
 c025848:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 c02584c:	009b      	lsls	r3, r3, #2
 c02584e:	9304      	str	r3, [sp, #16]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 c025850:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 c025854:	3b02      	subs	r3, #2
 c025856:	009b      	lsls	r3, r3, #2
 c025858:	9307      	str	r3, [sp, #28]
 c02585a:	f06f 0303 	mvn.w	r3, #3
 c02585e:	fb03 f30a 	mul.w	r3, r3, sl
 c025862:	3d01      	subs	r5, #1
 c025864:	9306      	str	r3, [sp, #24]
 c025866:	ebca 63ca 	rsb	r3, sl, sl, lsl #27
 c02586a:	00ad      	lsls	r5, r5, #2
 c02586c:	9305      	str	r3, [sp, #20]
    for( i = n; i > t ; i-- )
 c02586e:	9b00      	ldr	r3, [sp, #0]
 c025870:	4599      	cmp	r9, r3
 c025872:	d83b      	bhi.n	c0258ec <mbedtls_mpi_div_mpi+0x214>
    if( Q != NULL )
 c025874:	9b01      	ldr	r3, [sp, #4]
 c025876:	b15b      	cbz	r3, c025890 <mbedtls_mpi_div_mpi+0x1b8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 c025878:	a90f      	add	r1, sp, #60	; 0x3c
 c02587a:	4618      	mov	r0, r3
 c02587c:	f7ff f9ba 	bl	c024bf4 <mbedtls_mpi_copy>
 c025880:	bb08      	cbnz	r0, c0258c6 <mbedtls_mpi_div_mpi+0x1ee>
        Q->s = A->s * B->s;
 c025882:	9b03      	ldr	r3, [sp, #12]
 c025884:	f8d8 2000 	ldr.w	r2, [r8]
 c025888:	681b      	ldr	r3, [r3, #0]
 c02588a:	4353      	muls	r3, r2
 c02588c:	9a01      	ldr	r2, [sp, #4]
 c02588e:	6013      	str	r3, [r2, #0]
    if( R != NULL )
 c025890:	2f00      	cmp	r7, #0
 c025892:	f43f af55 	beq.w	c025740 <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 c025896:	9902      	ldr	r1, [sp, #8]
 c025898:	a809      	add	r0, sp, #36	; 0x24
 c02589a:	f7ff fbe1 	bl	c025060 <mbedtls_mpi_shift_r>
 c02589e:	b990      	cbnz	r0, c0258c6 <mbedtls_mpi_div_mpi+0x1ee>
        X.s = A->s;
 c0258a0:	f8d8 3000 	ldr.w	r3, [r8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 c0258a4:	a909      	add	r1, sp, #36	; 0x24
 c0258a6:	4638      	mov	r0, r7
        X.s = A->s;
 c0258a8:	9309      	str	r3, [sp, #36]	; 0x24
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 c0258aa:	f7ff f9a3 	bl	c024bf4 <mbedtls_mpi_copy>
 c0258ae:	4601      	mov	r1, r0
 c0258b0:	2800      	cmp	r0, #0
 c0258b2:	f040 80c2 	bne.w	c025a3a <mbedtls_mpi_div_mpi+0x362>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 c0258b6:	4638      	mov	r0, r7
 c0258b8:	f7ff fce2 	bl	c025280 <mbedtls_mpi_cmp_int>
 c0258bc:	2800      	cmp	r0, #0
 c0258be:	f47f af3f 	bne.w	c025740 <mbedtls_mpi_div_mpi+0x68>
            R->s = 1;
 c0258c2:	2301      	movs	r3, #1
 c0258c4:	603b      	str	r3, [r7, #0]
cleanup:
 c0258c6:	4604      	mov	r4, r0
 c0258c8:	e73a      	b.n	c025740 <mbedtls_mpi_div_mpi+0x68>
    else k = 0;
 c0258ca:	9402      	str	r4, [sp, #8]
 c0258cc:	e797      	b.n	c0257fe <mbedtls_mpi_div_mpi+0x126>
        Z.p[n - t]++;
 c0258ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 c0258d0:	f851 200b 	ldr.w	r2, [r1, fp]
 c0258d4:	3201      	adds	r2, #1
 c0258d6:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 c0258da:	a909      	add	r1, sp, #36	; 0x24
 c0258dc:	4632      	mov	r2, r6
 c0258de:	4608      	mov	r0, r1
 c0258e0:	f7ff fda5 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c0258e4:	4604      	mov	r4, r0
 c0258e6:	2800      	cmp	r0, #0
 c0258e8:	d09f      	beq.n	c02582a <mbedtls_mpi_div_mpi+0x152>
cleanup:
 c0258ea:	e729      	b.n	c025740 <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
 c0258ec:	9804      	ldr	r0, [sp, #16]
 c0258ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 c0258f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c0258f2:	594b      	ldr	r3, [r1, r5]
 c0258f4:	5812      	ldr	r2, [r2, r0]
 c0258f6:	9806      	ldr	r0, [sp, #24]
 c0258f8:	4293      	cmp	r3, r2
 c0258fa:	eb00 0605 	add.w	r6, r0, r5
 c0258fe:	f1a5 0b04 	sub.w	fp, r5, #4
 c025902:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 c025906:	d37e      	bcc.n	c025a06 <mbedtls_mpi_div_mpi+0x32e>
            Z.p[i - t - 1] = ~0;
 c025908:	f04f 33ff 	mov.w	r3, #4294967295
 c02590c:	f84a 3006 	str.w	r3, [sl, r6]
        Z.p[i - t - 1]++;
 c025910:	f85a 3006 	ldr.w	r3, [sl, r6]
 c025914:	3301      	adds	r3, #1
 c025916:	f84a 3006 	str.w	r3, [sl, r6]
 c02591a:	f1a5 0a08 	sub.w	sl, r5, #8
            Z.p[i - t - 1]--;
 c02591e:	9a11      	ldr	r2, [sp, #68]	; 0x44
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 c025920:	2100      	movs	r1, #0
            Z.p[i - t - 1]--;
 c025922:	5993      	ldr	r3, [r2, r6]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 c025924:	a812      	add	r0, sp, #72	; 0x48
            Z.p[i - t - 1]--;
 c025926:	3b01      	subs	r3, #1
 c025928:	5193      	str	r3, [r2, r6]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 c02592a:	f7ff f9e5 	bl	c024cf8 <mbedtls_mpi_lset>
 c02592e:	2800      	cmp	r0, #0
 c025930:	d1c9      	bne.n	c0258c6 <mbedtls_mpi_div_mpi+0x1ee>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 c025932:	9b00      	ldr	r3, [sp, #0]
 c025934:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c025936:	2b00      	cmp	r3, #0
 c025938:	d07d      	beq.n	c025a36 <mbedtls_mpi_div_mpi+0x35e>
 c02593a:	9b07      	ldr	r3, [sp, #28]
 c02593c:	58d1      	ldr	r1, [r2, r3]
 c02593e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 c025940:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
 c025942:	9904      	ldr	r1, [sp, #16]
 c025944:	5852      	ldr	r2, [r2, r1]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 c025946:	a912      	add	r1, sp, #72	; 0x48
            T1.p[1] = Y.p[t];
 c025948:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 c02594a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 c02594c:	4608      	mov	r0, r1
 c02594e:	599a      	ldr	r2, [r3, r6]
 c025950:	f7ff fe25 	bl	c02559e <mbedtls_mpi_mul_int>
 c025954:	4601      	mov	r1, r0
 c025956:	2800      	cmp	r0, #0
 c025958:	d16f      	bne.n	c025a3a <mbedtls_mpi_div_mpi+0x362>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 c02595a:	a815      	add	r0, sp, #84	; 0x54
 c02595c:	f7ff f9cc 	bl	c024cf8 <mbedtls_mpi_lset>
 c025960:	2800      	cmp	r0, #0
 c025962:	d1b0      	bne.n	c0258c6 <mbedtls_mpi_div_mpi+0x1ee>
 c025964:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 c025966:	f1b9 0f01 	cmp.w	r9, #1
 c02596a:	bf18      	it	ne
 c02596c:	f852 000a 	ldrne.w	r0, [r2, sl]
 c025970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 c025972:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 c025974:	f852 100b 	ldr.w	r1, [r2, fp]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 c025978:	a812      	add	r0, sp, #72	; 0x48
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 c02597a:	6059      	str	r1, [r3, #4]
            T2.p[2] = X.p[i];
 c02597c:	5952      	ldr	r2, [r2, r5]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 c02597e:	a915      	add	r1, sp, #84	; 0x54
            T2.p[2] = X.p[i];
 c025980:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 c025982:	f7ff fc3d 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c025986:	2800      	cmp	r0, #0
 c025988:	dcc9      	bgt.n	c02591e <mbedtls_mpi_div_mpi+0x246>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 c02598a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 c02598c:	a90c      	add	r1, sp, #48	; 0x30
 c02598e:	599a      	ldr	r2, [r3, r6]
 c025990:	a812      	add	r0, sp, #72	; 0x48
 c025992:	f7ff fe04 	bl	c02559e <mbedtls_mpi_mul_int>
 c025996:	2800      	cmp	r0, #0
 c025998:	d195      	bne.n	c0258c6 <mbedtls_mpi_div_mpi+0x1ee>
 c02599a:	9b05      	ldr	r3, [sp, #20]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 c02599c:	a812      	add	r0, sp, #72	; 0x48
 c02599e:	eb03 0a09 	add.w	sl, r3, r9
 c0259a2:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 c0259a6:	4651      	mov	r1, sl
 c0259a8:	f7ff fb12 	bl	c024fd0 <mbedtls_mpi_shift_l>
 c0259ac:	2800      	cmp	r0, #0
 c0259ae:	d18a      	bne.n	c0258c6 <mbedtls_mpi_div_mpi+0x1ee>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 c0259b0:	a909      	add	r1, sp, #36	; 0x24
 c0259b2:	4608      	mov	r0, r1
 c0259b4:	aa12      	add	r2, sp, #72	; 0x48
 c0259b6:	f7ff fd3a 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c0259ba:	4601      	mov	r1, r0
 c0259bc:	2800      	cmp	r0, #0
 c0259be:	d13c      	bne.n	c025a3a <mbedtls_mpi_div_mpi+0x362>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 c0259c0:	a809      	add	r0, sp, #36	; 0x24
 c0259c2:	f7ff fc5d 	bl	c025280 <mbedtls_mpi_cmp_int>
 c0259c6:	2800      	cmp	r0, #0
 c0259c8:	da19      	bge.n	c0259fe <mbedtls_mpi_div_mpi+0x326>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 c0259ca:	a90c      	add	r1, sp, #48	; 0x30
 c0259cc:	a812      	add	r0, sp, #72	; 0x48
 c0259ce:	f7ff f911 	bl	c024bf4 <mbedtls_mpi_copy>
 c0259d2:	2800      	cmp	r0, #0
 c0259d4:	f47f af77 	bne.w	c0258c6 <mbedtls_mpi_div_mpi+0x1ee>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 c0259d8:	4651      	mov	r1, sl
 c0259da:	a812      	add	r0, sp, #72	; 0x48
 c0259dc:	f7ff faf8 	bl	c024fd0 <mbedtls_mpi_shift_l>
 c0259e0:	2800      	cmp	r0, #0
 c0259e2:	f47f af70 	bne.w	c0258c6 <mbedtls_mpi_div_mpi+0x1ee>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 c0259e6:	a909      	add	r1, sp, #36	; 0x24
 c0259e8:	aa12      	add	r2, sp, #72	; 0x48
 c0259ea:	4608      	mov	r0, r1
 c0259ec:	f7ff fcfd 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c0259f0:	2800      	cmp	r0, #0
 c0259f2:	f47f af68 	bne.w	c0258c6 <mbedtls_mpi_div_mpi+0x1ee>
            Z.p[i - t - 1]--;
 c0259f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 c0259f8:	5993      	ldr	r3, [r2, r6]
 c0259fa:	3b01      	subs	r3, #1
 c0259fc:	5193      	str	r3, [r2, r6]
    for( i = n; i > t ; i-- )
 c0259fe:	f109 39ff 	add.w	r9, r9, #4294967295
 c025a02:	3d04      	subs	r5, #4
 c025a04:	e733      	b.n	c02586e <mbedtls_mpi_div_mpi+0x196>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 c025a06:	f851 c00b 	ldr.w	ip, [r1, fp]
    if( 0 == d || u1 >= d )
 c025a0a:	b18a      	cbz	r2, c025a30 <mbedtls_mpi_div_mpi+0x358>
    dividend  = (mbedtls_t_udbl) u1 << biL;
 c025a0c:	4619      	mov	r1, r3
 c025a0e:	2300      	movs	r3, #0
 c025a10:	4618      	mov	r0, r3
    quotient = dividend / d;
 c025a12:	ea40 000c 	orr.w	r0, r0, ip
 c025a16:	f7f6 fc0f 	bl	c01c238 <__aeabi_uldivmod>
    return (mbedtls_mpi_uint) quotient;
 c025a1a:	2300      	movs	r3, #0
 c025a1c:	f04f 32ff 	mov.w	r2, #4294967295
 c025a20:	428b      	cmp	r3, r1
 c025a22:	bf08      	it	eq
 c025a24:	4282      	cmpeq	r2, r0
 c025a26:	d200      	bcs.n	c025a2a <mbedtls_mpi_div_mpi+0x352>
 c025a28:	4610      	mov	r0, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 c025a2a:	f84a 0006 	str.w	r0, [sl, r6]
 c025a2e:	e76f      	b.n	c025910 <mbedtls_mpi_div_mpi+0x238>
        return ( ~0 );
 c025a30:	f04f 30ff 	mov.w	r0, #4294967295
 c025a34:	e7f9      	b.n	c025a2a <mbedtls_mpi_div_mpi+0x352>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 c025a36:	9900      	ldr	r1, [sp, #0]
 c025a38:	e781      	b.n	c02593e <mbedtls_mpi_div_mpi+0x266>
cleanup:
 c025a3a:	460c      	mov	r4, r1
 c025a3c:	e680      	b.n	c025740 <mbedtls_mpi_div_mpi+0x68>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 c025a3e:	f06f 040b 	mvn.w	r4, #11
 c025a42:	e672      	b.n	c02572a <mbedtls_mpi_div_mpi+0x52>

0c025a44 <mbedtls_mpi_mod_mpi>:
{
 c025a44:	b570      	push	{r4, r5, r6, lr}
 c025a46:	4604      	mov	r4, r0
 c025a48:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 c025a4a:	4610      	mov	r0, r2
 c025a4c:	2100      	movs	r1, #0
{
 c025a4e:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 c025a50:	f7ff fc16 	bl	c025280 <mbedtls_mpi_cmp_int>
 c025a54:	2800      	cmp	r0, #0
 c025a56:	db24      	blt.n	c025aa2 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 c025a58:	462a      	mov	r2, r5
 c025a5a:	4633      	mov	r3, r6
 c025a5c:	4621      	mov	r1, r4
 c025a5e:	2000      	movs	r0, #0
 c025a60:	f7ff fe3a 	bl	c0256d8 <mbedtls_mpi_div_mpi>
 c025a64:	4605      	mov	r5, r0
 c025a66:	b138      	cbz	r0, c025a78 <mbedtls_mpi_mod_mpi+0x34>
}
 c025a68:	4628      	mov	r0, r5
 c025a6a:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 c025a6c:	4632      	mov	r2, r6
 c025a6e:	4621      	mov	r1, r4
 c025a70:	4620      	mov	r0, r4
 c025a72:	f7ff fcba 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c025a76:	b990      	cbnz	r0, c025a9e <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 c025a78:	2100      	movs	r1, #0
 c025a7a:	4620      	mov	r0, r4
 c025a7c:	f7ff fc00 	bl	c025280 <mbedtls_mpi_cmp_int>
 c025a80:	2800      	cmp	r0, #0
 c025a82:	dbf3      	blt.n	c025a6c <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 c025a84:	4631      	mov	r1, r6
 c025a86:	4620      	mov	r0, r4
 c025a88:	f7ff fbba 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c025a8c:	2800      	cmp	r0, #0
 c025a8e:	dbeb      	blt.n	c025a68 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 c025a90:	4632      	mov	r2, r6
 c025a92:	4621      	mov	r1, r4
 c025a94:	4620      	mov	r0, r4
 c025a96:	f7ff fcca 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c025a9a:	2800      	cmp	r0, #0
 c025a9c:	d0f2      	beq.n	c025a84 <mbedtls_mpi_mod_mpi+0x40>
 c025a9e:	4605      	mov	r5, r0
 c025aa0:	e7e2      	b.n	c025a68 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 c025aa2:	f06f 0509 	mvn.w	r5, #9
 c025aa6:	e7df      	b.n	c025a68 <mbedtls_mpi_mod_mpi+0x24>

0c025aa8 <mbedtls_mpi_mod_int>:
    if( b == 0 )
 c025aa8:	1e13      	subs	r3, r2, #0
{
 c025aaa:	b430      	push	{r4, r5}
 c025aac:	4604      	mov	r4, r0
    if( b == 0 )
 c025aae:	d012      	beq.n	c025ad6 <mbedtls_mpi_mod_int+0x2e>
    if( b < 0 )
 c025ab0:	db14      	blt.n	c025adc <mbedtls_mpi_mod_int+0x34>
    if( b == 1 )
 c025ab2:	2b01      	cmp	r3, #1
 c025ab4:	d103      	bne.n	c025abe <mbedtls_mpi_mod_int+0x16>
        *r = 0;
 c025ab6:	2000      	movs	r0, #0
 c025ab8:	6020      	str	r0, [r4, #0]
}
 c025aba:	bc30      	pop	{r4, r5}
 c025abc:	4770      	bx	lr
    if( b == 2 )
 c025abe:	2b02      	cmp	r3, #2
 c025ac0:	d106      	bne.n	c025ad0 <mbedtls_mpi_mod_int+0x28>
        *r = A->p[0] & 1;
 c025ac2:	688b      	ldr	r3, [r1, #8]
 c025ac4:	681b      	ldr	r3, [r3, #0]
 c025ac6:	f003 0301 	and.w	r3, r3, #1
 c025aca:	6003      	str	r3, [r0, #0]
        return( 0 );
 c025acc:	2000      	movs	r0, #0
 c025ace:	e7f4      	b.n	c025aba <mbedtls_mpi_mod_int+0x12>
}
 c025ad0:	bc30      	pop	{r4, r5}
 c025ad2:	f7ff b831 	b.w	c024b38 <mbedtls_mpi_mod_int.part.5>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 c025ad6:	f06f 000b 	mvn.w	r0, #11
 c025ada:	e7ee      	b.n	c025aba <mbedtls_mpi_mod_int+0x12>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 c025adc:	f06f 0009 	mvn.w	r0, #9
 c025ae0:	e7eb      	b.n	c025aba <mbedtls_mpi_mod_int+0x12>
	...

0c025ae4 <mpi_check_small_factors>:
{
    int ret = 0;
    size_t i;
    mbedtls_mpi_uint r;

    if( ( X->p[0] & 1 ) == 0 )
 c025ae4:	6883      	ldr	r3, [r0, #8]
{
 c025ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if( ( X->p[0] & 1 ) == 0 )
 c025ae8:	681b      	ldr	r3, [r3, #0]
{
 c025aea:	4605      	mov	r5, r0
    if( ( X->p[0] & 1 ) == 0 )
 c025aec:	07db      	lsls	r3, r3, #31
 c025aee:	d517      	bpl.n	c025b20 <mpi_check_small_factors+0x3c>
 c025af0:	4e0e      	ldr	r6, [pc, #56]	; (c025b2c <mpi_check_small_factors+0x48>)
        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );

    for( i = 0; small_prime[i] > 0; i++ )
 c025af2:	f856 4f04 	ldr.w	r4, [r6, #4]!
 c025af6:	2c00      	cmp	r4, #0
 c025af8:	dc02      	bgt.n	c025b00 <mpi_check_small_factors+0x1c>
 c025afa:	2000      	movs	r0, #0
            return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
    }

cleanup:
    return( ret );
}
 c025afc:	b002      	add	sp, #8
 c025afe:	bd70      	pop	{r4, r5, r6, pc}
        if( mbedtls_mpi_cmp_int( X, small_prime[i] ) <= 0 )
 c025b00:	4621      	mov	r1, r4
 c025b02:	4628      	mov	r0, r5
 c025b04:	f7ff fbbc 	bl	c025280 <mbedtls_mpi_cmp_int>
 c025b08:	2800      	cmp	r0, #0
 c025b0a:	dd0c      	ble.n	c025b26 <mpi_check_small_factors+0x42>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, small_prime[i] ) );
 c025b0c:	4622      	mov	r2, r4
 c025b0e:	4629      	mov	r1, r5
 c025b10:	a801      	add	r0, sp, #4
 c025b12:	f7ff ffc9 	bl	c025aa8 <mbedtls_mpi_mod_int>
 c025b16:	2800      	cmp	r0, #0
 c025b18:	d1f0      	bne.n	c025afc <mpi_check_small_factors+0x18>
        if( r == 0 )
 c025b1a:	9b01      	ldr	r3, [sp, #4]
 c025b1c:	2b00      	cmp	r3, #0
 c025b1e:	d1e8      	bne.n	c025af2 <mpi_check_small_factors+0xe>
        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
 c025b20:	f06f 000d 	mvn.w	r0, #13
 c025b24:	e7ea      	b.n	c025afc <mpi_check_small_factors+0x18>
            return( 1 );
 c025b26:	2001      	movs	r0, #1
 c025b28:	e7e8      	b.n	c025afc <mpi_check_small_factors+0x18>
 c025b2a:	bf00      	nop
 c025b2c:	0c035150 	.word	0x0c035150

0c025b30 <mbedtls_mpi_exp_mod>:
{
 c025b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c025b34:	4606      	mov	r6, r0
 c025b36:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 c025b3a:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 c025b3c:	4618      	mov	r0, r3
 c025b3e:	2100      	movs	r1, #0
{
 c025b40:	9203      	str	r2, [sp, #12]
 c025b42:	461d      	mov	r5, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 c025b44:	f7ff fb9c 	bl	c025280 <mbedtls_mpi_cmp_int>
 c025b48:	2800      	cmp	r0, #0
 c025b4a:	f340 8225 	ble.w	c025f98 <mbedtls_mpi_exp_mod+0x468>
 c025b4e:	68ab      	ldr	r3, [r5, #8]
 c025b50:	f8d3 8000 	ldr.w	r8, [r3]
 c025b54:	f018 0f01 	tst.w	r8, #1
 c025b58:	f000 821e 	beq.w	c025f98 <mbedtls_mpi_exp_mod+0x468>
    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 c025b5c:	2100      	movs	r1, #0
 c025b5e:	9803      	ldr	r0, [sp, #12]
 c025b60:	f7ff fb8e 	bl	c025280 <mbedtls_mpi_cmp_int>
 c025b64:	2800      	cmp	r0, #0
 c025b66:	f2c0 8217 	blt.w	c025f98 <mbedtls_mpi_exp_mod+0x468>
    x += ( ( m0 + 2 ) & 4 ) << 1;
 c025b6a:	2103      	movs	r1, #3
 c025b6c:	f108 0402 	add.w	r4, r8, #2
 c025b70:	0064      	lsls	r4, r4, #1
 c025b72:	f004 0408 	and.w	r4, r4, #8
 c025b76:	4444      	add	r4, r8
        x *= ( 2 - ( m0 * x ) );
 c025b78:	fb04 f308 	mul.w	r3, r4, r8
    for( i = biL; i >= 8; i /= 2 )
 c025b7c:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 c025b7e:	f1c3 0302 	rsb	r3, r3, #2
 c025b82:	fb03 f404 	mul.w	r4, r3, r4
    for( i = biL; i >= 8; i /= 2 )
 c025b86:	d1f7      	bne.n	c025b78 <mbedtls_mpi_exp_mod+0x48>
    X->s = 1;
 c025b88:	2301      	movs	r3, #1
    memset( W, 0, sizeof( W ) );
 c025b8a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 c025b8e:	a814      	add	r0, sp, #80	; 0x50
    X->n = 0;
 c025b90:	e9cd 3108 	strd	r3, r1, [sp, #32]
    X->s = 1;
 c025b94:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    X->p = NULL;
 c025b98:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    X->n = 0;
 c025b9c:	e9cd 310e 	strd	r3, r1, [sp, #56]	; 0x38
    X->p = NULL;
 c025ba0:	9110      	str	r1, [sp, #64]	; 0x40
    memset( W, 0, sizeof( W ) );
 c025ba2:	f7f1 ff10 	bl	c0179c6 <memset>
    i = mbedtls_mpi_bitlen( E );
 c025ba6:	9803      	ldr	r0, [sp, #12]
 c025ba8:	f7ff f916 	bl	c024dd8 <mbedtls_mpi_bitlen>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 c025bac:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 c025bb0:	f080 80e2 	bcs.w	c025d78 <mbedtls_mpi_exp_mod+0x248>
 c025bb4:	28ef      	cmp	r0, #239	; 0xef
 c025bb6:	f200 80e2 	bhi.w	c025d7e <mbedtls_mpi_exp_mod+0x24e>
 c025bba:	284f      	cmp	r0, #79	; 0x4f
 c025bbc:	f200 80e2 	bhi.w	c025d84 <mbedtls_mpi_exp_mod+0x254>
 c025bc0:	2818      	cmp	r0, #24
 c025bc2:	bf34      	ite	cc
 c025bc4:	f04f 0b01 	movcc.w	fp, #1
 c025bc8:	f04f 0b03 	movcs.w	fp, #3
    j = N->n + 1;
 c025bcc:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 c025bce:	4630      	mov	r0, r6
    j = N->n + 1;
 c025bd0:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 c025bd4:	4641      	mov	r1, r8
 c025bd6:	f7fe ffe7 	bl	c024ba8 <mbedtls_mpi_grow>
 c025bda:	4603      	mov	r3, r0
 c025bdc:	2800      	cmp	r0, #0
 c025bde:	f040 8163 	bne.w	c025ea8 <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 c025be2:	4641      	mov	r1, r8
 c025be4:	a817      	add	r0, sp, #92	; 0x5c
 c025be6:	f7fe ffdf 	bl	c024ba8 <mbedtls_mpi_grow>
 c025bea:	4603      	mov	r3, r0
 c025bec:	2800      	cmp	r0, #0
 c025bee:	f040 815b 	bne.w	c025ea8 <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 c025bf2:	ea4f 0148 	mov.w	r1, r8, lsl #1
 c025bf6:	a80b      	add	r0, sp, #44	; 0x2c
 c025bf8:	f7fe ffd6 	bl	c024ba8 <mbedtls_mpi_grow>
 c025bfc:	4603      	mov	r3, r0
 c025bfe:	2800      	cmp	r0, #0
 c025c00:	f040 8152 	bne.w	c025ea8 <mbedtls_mpi_exp_mod+0x378>
    neg = ( A->s == -1 );
 c025c04:	683b      	ldr	r3, [r7, #0]
 c025c06:	9304      	str	r3, [sp, #16]
    if( neg )
 c025c08:	3301      	adds	r3, #1
 c025c0a:	d10a      	bne.n	c025c22 <mbedtls_mpi_exp_mod+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 c025c0c:	4639      	mov	r1, r7
 c025c0e:	a80e      	add	r0, sp, #56	; 0x38
 c025c10:	f7fe fff0 	bl	c024bf4 <mbedtls_mpi_copy>
 c025c14:	4603      	mov	r3, r0
 c025c16:	2800      	cmp	r0, #0
 c025c18:	f040 8146 	bne.w	c025ea8 <mbedtls_mpi_exp_mod+0x378>
        Apos.s = 1;
 c025c1c:	2301      	movs	r3, #1
        A = &Apos;
 c025c1e:	af0e      	add	r7, sp, #56	; 0x38
        Apos.s = 1;
 c025c20:	930e      	str	r3, [sp, #56]	; 0x38
    if( _RR == NULL || _RR->p == NULL )
 c025c22:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 c025c26:	b11b      	cbz	r3, c025c30 <mbedtls_mpi_exp_mod+0x100>
 c025c28:	689b      	ldr	r3, [r3, #8]
 c025c2a:	2b00      	cmp	r3, #0
 c025c2c:	f040 80ad 	bne.w	c025d8a <mbedtls_mpi_exp_mod+0x25a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 c025c30:	2101      	movs	r1, #1
 c025c32:	a808      	add	r0, sp, #32
 c025c34:	f7ff f860 	bl	c024cf8 <mbedtls_mpi_lset>
 c025c38:	4603      	mov	r3, r0
 c025c3a:	2800      	cmp	r0, #0
 c025c3c:	f040 8134 	bne.w	c025ea8 <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 c025c40:	6869      	ldr	r1, [r5, #4]
 c025c42:	a808      	add	r0, sp, #32
 c025c44:	0189      	lsls	r1, r1, #6
 c025c46:	f7ff f9c3 	bl	c024fd0 <mbedtls_mpi_shift_l>
 c025c4a:	4603      	mov	r3, r0
 c025c4c:	2800      	cmp	r0, #0
 c025c4e:	f040 812b 	bne.w	c025ea8 <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 c025c52:	a908      	add	r1, sp, #32
 c025c54:	462a      	mov	r2, r5
 c025c56:	4608      	mov	r0, r1
 c025c58:	f7ff fef4 	bl	c025a44 <mbedtls_mpi_mod_mpi>
 c025c5c:	4603      	mov	r3, r0
 c025c5e:	2800      	cmp	r0, #0
 c025c60:	f040 8122 	bne.w	c025ea8 <mbedtls_mpi_exp_mod+0x378>
        if( _RR != NULL )
 c025c64:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 c025c68:	b13b      	cbz	r3, c025c7a <mbedtls_mpi_exp_mod+0x14a>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 c025c6a:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 c025c6e:	ab08      	add	r3, sp, #32
 c025c70:	cb03      	ldmia	r3!, {r0, r1}
 c025c72:	6010      	str	r0, [r2, #0]
 c025c74:	6818      	ldr	r0, [r3, #0]
 c025c76:	6051      	str	r1, [r2, #4]
 c025c78:	6090      	str	r0, [r2, #8]
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 c025c7a:	4629      	mov	r1, r5
 c025c7c:	4638      	mov	r0, r7
 c025c7e:	f7ff fabf 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c025c82:	2800      	cmp	r0, #0
 c025c84:	f2c0 808a 	blt.w	c025d9c <mbedtls_mpi_exp_mod+0x26c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 c025c88:	462a      	mov	r2, r5
 c025c8a:	4639      	mov	r1, r7
 c025c8c:	a817      	add	r0, sp, #92	; 0x5c
 c025c8e:	f7ff fed9 	bl	c025a44 <mbedtls_mpi_mod_mpi>
 c025c92:	4603      	mov	r3, r0
 c025c94:	2800      	cmp	r0, #0
 c025c96:	f040 8107 	bne.w	c025ea8 <mbedtls_mpi_exp_mod+0x378>
    *mm = ~x + 1;
 c025c9a:	4264      	negs	r4, r4
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 c025c9c:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 c025ca0:	4623      	mov	r3, r4
 c025ca2:	f8cd 9000 	str.w	r9, [sp]
 c025ca6:	462a      	mov	r2, r5
 c025ca8:	a908      	add	r1, sp, #32
 c025caa:	a817      	add	r0, sp, #92	; 0x5c
 c025cac:	f7ff fa44 	bl	c025138 <mpi_montmul>
 c025cb0:	4603      	mov	r3, r0
 c025cb2:	2800      	cmp	r0, #0
 c025cb4:	f040 80f8 	bne.w	c025ea8 <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 c025cb8:	a908      	add	r1, sp, #32
 c025cba:	4630      	mov	r0, r6
 c025cbc:	f7fe ff9a 	bl	c024bf4 <mbedtls_mpi_copy>
 c025cc0:	4603      	mov	r3, r0
 c025cc2:	2800      	cmp	r0, #0
 c025cc4:	f040 80f0 	bne.w	c025ea8 <mbedtls_mpi_exp_mod+0x378>
    mbedtls_mpi_uint z = 1;
 c025cc8:	2701      	movs	r7, #1
 c025cca:	ab07      	add	r3, sp, #28
    U.p = &z;
 c025ccc:	9313      	str	r3, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 c025cce:	f8cd 9000 	str.w	r9, [sp]
 c025cd2:	4623      	mov	r3, r4
 c025cd4:	462a      	mov	r2, r5
 c025cd6:	a911      	add	r1, sp, #68	; 0x44
 c025cd8:	4630      	mov	r0, r6
    mbedtls_mpi_uint z = 1;
 c025cda:	9707      	str	r7, [sp, #28]
    U.n = U.s = (int) z;
 c025cdc:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
    return( mpi_montmul( A, &U, N, mm, T ) );
 c025ce0:	f7ff fa2a 	bl	c025138 <mpi_montmul>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 c025ce4:	4603      	mov	r3, r0
 c025ce6:	2800      	cmp	r0, #0
 c025ce8:	f040 80de 	bne.w	c025ea8 <mbedtls_mpi_exp_mod+0x378>
    if( wsize > 1 )
 c025cec:	45bb      	cmp	fp, r7
 c025cee:	d15a      	bne.n	c025da6 <mbedtls_mpi_exp_mod+0x276>
    state   = 0;
 c025cf0:	f04f 0900 	mov.w	r9, #0
    nbits   = 0;
 c025cf4:	46c8      	mov	r8, r9
    bufsize = 0;
 c025cf6:	46ca      	mov	sl, r9
    wbits   = 0;
 c025cf8:	464f      	mov	r7, r9
    nblimbs = E->n;
 c025cfa:	9b03      	ldr	r3, [sp, #12]
 c025cfc:	685b      	ldr	r3, [r3, #4]
 c025cfe:	9302      	str	r3, [sp, #8]
        if( bufsize == 0 )
 c025d00:	f1ba 0f00 	cmp.w	sl, #0
 c025d04:	f040 80b1 	bne.w	c025e6a <mbedtls_mpi_exp_mod+0x33a>
            if( nblimbs == 0 )
 c025d08:	9b02      	ldr	r3, [sp, #8]
 c025d0a:	2b00      	cmp	r3, #0
 c025d0c:	f040 80a8 	bne.w	c025e60 <mbedtls_mpi_exp_mod+0x330>
        if( ( wbits & ( one << wsize ) ) != 0 )
 c025d10:	f04f 0a01 	mov.w	sl, #1
 c025d14:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 c025d18:	fa0a fa0b 	lsl.w	sl, sl, fp
    for( i = 0; i < nbits; i++ )
 c025d1c:	9b02      	ldr	r3, [sp, #8]
 c025d1e:	4543      	cmp	r3, r8
 c025d20:	f040 8113 	bne.w	c025f4a <mbedtls_mpi_exp_mod+0x41a>
    mbedtls_mpi_uint z = 1;
 c025d24:	2301      	movs	r3, #1
 c025d26:	aa07      	add	r2, sp, #28
 c025d28:	9307      	str	r3, [sp, #28]
    U.n = U.s = (int) z;
 c025d2a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
    U.p = &z;
 c025d2e:	9213      	str	r2, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 c025d30:	4623      	mov	r3, r4
 c025d32:	f8cd 9000 	str.w	r9, [sp]
 c025d36:	462a      	mov	r2, r5
 c025d38:	a911      	add	r1, sp, #68	; 0x44
 c025d3a:	4630      	mov	r0, r6
 c025d3c:	f7ff f9fc 	bl	c025138 <mpi_montmul>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 c025d40:	4603      	mov	r3, r0
 c025d42:	2800      	cmp	r0, #0
 c025d44:	f040 80b0 	bne.w	c025ea8 <mbedtls_mpi_exp_mod+0x378>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 c025d48:	9a04      	ldr	r2, [sp, #16]
 c025d4a:	3201      	adds	r2, #1
 c025d4c:	f040 80ac 	bne.w	c025ea8 <mbedtls_mpi_exp_mod+0x378>
 c025d50:	9a03      	ldr	r2, [sp, #12]
 c025d52:	6852      	ldr	r2, [r2, #4]
 c025d54:	2a00      	cmp	r2, #0
 c025d56:	f000 80a7 	beq.w	c025ea8 <mbedtls_mpi_exp_mod+0x378>
 c025d5a:	9a03      	ldr	r2, [sp, #12]
 c025d5c:	6892      	ldr	r2, [r2, #8]
 c025d5e:	6812      	ldr	r2, [r2, #0]
 c025d60:	07d2      	lsls	r2, r2, #31
 c025d62:	f140 80a1 	bpl.w	c025ea8 <mbedtls_mpi_exp_mod+0x378>
        X->s = -1;
 c025d66:	9b04      	ldr	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 c025d68:	4632      	mov	r2, r6
        X->s = -1;
 c025d6a:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 c025d6c:	4629      	mov	r1, r5
 c025d6e:	4630      	mov	r0, r6
 c025d70:	f7ff fb3b 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c025d74:	4603      	mov	r3, r0
cleanup:
 c025d76:	e097      	b.n	c025ea8 <mbedtls_mpi_exp_mod+0x378>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 c025d78:	f04f 0b06 	mov.w	fp, #6
 c025d7c:	e726      	b.n	c025bcc <mbedtls_mpi_exp_mod+0x9c>
 c025d7e:	f04f 0b05 	mov.w	fp, #5
 c025d82:	e723      	b.n	c025bcc <mbedtls_mpi_exp_mod+0x9c>
 c025d84:	f04f 0b04 	mov.w	fp, #4
 c025d88:	e720      	b.n	c025bcc <mbedtls_mpi_exp_mod+0x9c>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 c025d8a:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 c025d8e:	ab08      	add	r3, sp, #32
 c025d90:	6810      	ldr	r0, [r2, #0]
 c025d92:	6851      	ldr	r1, [r2, #4]
 c025d94:	c303      	stmia	r3!, {r0, r1}
 c025d96:	6890      	ldr	r0, [r2, #8]
 c025d98:	6018      	str	r0, [r3, #0]
 c025d9a:	e76e      	b.n	c025c7a <mbedtls_mpi_exp_mod+0x14a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 c025d9c:	4639      	mov	r1, r7
 c025d9e:	a817      	add	r0, sp, #92	; 0x5c
 c025da0:	f7fe ff28 	bl	c024bf4 <mbedtls_mpi_copy>
 c025da4:	e775      	b.n	c025c92 <mbedtls_mpi_exp_mod+0x162>
 c025da6:	f10b 33ff 	add.w	r3, fp, #4294967295
 c025daa:	9302      	str	r3, [sp, #8]
 c025dac:	fa07 f303 	lsl.w	r3, r7, r3
 c025db0:	270c      	movs	r7, #12
 c025db2:	9305      	str	r3, [sp, #20]
 c025db4:	9b02      	ldr	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 c025db6:	6869      	ldr	r1, [r5, #4]
 c025db8:	409f      	lsls	r7, r3
 c025dba:	ab14      	add	r3, sp, #80	; 0x50
 c025dbc:	eb03 0807 	add.w	r8, r3, r7
 c025dc0:	3101      	adds	r1, #1
 c025dc2:	4640      	mov	r0, r8
 c025dc4:	f7fe fef0 	bl	c024ba8 <mbedtls_mpi_grow>
 c025dc8:	4603      	mov	r3, r0
 c025dca:	2800      	cmp	r0, #0
 c025dcc:	d16c      	bne.n	c025ea8 <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 c025dce:	a917      	add	r1, sp, #92	; 0x5c
 c025dd0:	4640      	mov	r0, r8
 c025dd2:	f7fe ff0f 	bl	c024bf4 <mbedtls_mpi_copy>
 c025dd6:	4603      	mov	r3, r0
 c025dd8:	2800      	cmp	r0, #0
 c025dda:	d165      	bne.n	c025ea8 <mbedtls_mpi_exp_mod+0x378>
        for( i = 0; i < wsize - 1; i++ )
 c025ddc:	4682      	mov	sl, r0
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 c025dde:	4623      	mov	r3, r4
 c025de0:	f8cd 9000 	str.w	r9, [sp]
 c025de4:	462a      	mov	r2, r5
 c025de6:	4641      	mov	r1, r8
 c025de8:	4640      	mov	r0, r8
 c025dea:	f7ff f9a5 	bl	c025138 <mpi_montmul>
 c025dee:	4603      	mov	r3, r0
 c025df0:	2800      	cmp	r0, #0
 c025df2:	d159      	bne.n	c025ea8 <mbedtls_mpi_exp_mod+0x378>
        for( i = 0; i < wsize - 1; i++ )
 c025df4:	9b02      	ldr	r3, [sp, #8]
 c025df6:	f10a 0a01 	add.w	sl, sl, #1
 c025dfa:	4553      	cmp	r3, sl
 c025dfc:	d8ef      	bhi.n	c025dde <mbedtls_mpi_exp_mod+0x2ae>
        for( i = j + 1; i < ( one << wsize ); i++ )
 c025dfe:	f04f 0901 	mov.w	r9, #1
 c025e02:	9b05      	ldr	r3, [sp, #20]
 c025e04:	fa09 f90b 	lsl.w	r9, r9, fp
 c025e08:	f103 0801 	add.w	r8, r3, #1
 c025e0c:	f50d 63ca 	add.w	r3, sp, #1616	; 0x650
 c025e10:	441f      	add	r7, r3
 c025e12:	f2a7 57f4 	subw	r7, r7, #1524	; 0x5f4
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 c025e16:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
        for( i = j + 1; i < ( one << wsize ); i++ )
 c025e1a:	45c1      	cmp	r9, r8
 c025e1c:	f67f af68 	bls.w	c025cf0 <mbedtls_mpi_exp_mod+0x1c0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 c025e20:	6869      	ldr	r1, [r5, #4]
 c025e22:	4638      	mov	r0, r7
 c025e24:	3101      	adds	r1, #1
 c025e26:	f7fe febf 	bl	c024ba8 <mbedtls_mpi_grow>
 c025e2a:	4603      	mov	r3, r0
 c025e2c:	2800      	cmp	r0, #0
 c025e2e:	d13b      	bne.n	c025ea8 <mbedtls_mpi_exp_mod+0x378>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 c025e30:	f1a7 010c 	sub.w	r1, r7, #12
 c025e34:	4638      	mov	r0, r7
 c025e36:	f7fe fedd 	bl	c024bf4 <mbedtls_mpi_copy>
 c025e3a:	4603      	mov	r3, r0
 c025e3c:	bba0      	cbnz	r0, c025ea8 <mbedtls_mpi_exp_mod+0x378>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 c025e3e:	4623      	mov	r3, r4
 c025e40:	4638      	mov	r0, r7
 c025e42:	f8cd a000 	str.w	sl, [sp]
 c025e46:	462a      	mov	r2, r5
 c025e48:	a917      	add	r1, sp, #92	; 0x5c
 c025e4a:	f7ff f975 	bl	c025138 <mpi_montmul>
 c025e4e:	370c      	adds	r7, #12
 c025e50:	4603      	mov	r3, r0
 c025e52:	bb48      	cbnz	r0, c025ea8 <mbedtls_mpi_exp_mod+0x378>
        for( i = j + 1; i < ( one << wsize ); i++ )
 c025e54:	f108 0801 	add.w	r8, r8, #1
 c025e58:	e7df      	b.n	c025e1a <mbedtls_mpi_exp_mod+0x2ea>
        state = 2;
 c025e5a:	f04f 0902 	mov.w	r9, #2
 c025e5e:	e74f      	b.n	c025d00 <mbedtls_mpi_exp_mod+0x1d0>
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 c025e60:	f04f 0a20 	mov.w	sl, #32
            nblimbs--;
 c025e64:	9b02      	ldr	r3, [sp, #8]
 c025e66:	3b01      	subs	r3, #1
 c025e68:	9302      	str	r3, [sp, #8]
        ei = (E->p[nblimbs] >> bufsize) & 1;
 c025e6a:	9b03      	ldr	r3, [sp, #12]
 c025e6c:	9a02      	ldr	r2, [sp, #8]
 c025e6e:	689b      	ldr	r3, [r3, #8]
        bufsize--;
 c025e70:	f10a 3aff 	add.w	sl, sl, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
 c025e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c025e78:	fa23 f30a 	lsr.w	r3, r3, sl
        if( ei == 0 && state == 0 )
 c025e7c:	f013 0301 	ands.w	r3, r3, #1
 c025e80:	d136      	bne.n	c025ef0 <mbedtls_mpi_exp_mod+0x3c0>
 c025e82:	f1b9 0f00 	cmp.w	r9, #0
 c025e86:	f43f af3b 	beq.w	c025d00 <mbedtls_mpi_exp_mod+0x1d0>
        if( ei == 0 && state == 1 )
 c025e8a:	f1b9 0f01 	cmp.w	r9, #1
 c025e8e:	d12f      	bne.n	c025ef0 <mbedtls_mpi_exp_mod+0x3c0>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 c025e90:	ab0b      	add	r3, sp, #44	; 0x2c
 c025e92:	9300      	str	r3, [sp, #0]
 c025e94:	462a      	mov	r2, r5
 c025e96:	4623      	mov	r3, r4
 c025e98:	4631      	mov	r1, r6
 c025e9a:	4630      	mov	r0, r6
 c025e9c:	f7ff f94c 	bl	c025138 <mpi_montmul>
 c025ea0:	4603      	mov	r3, r0
 c025ea2:	2800      	cmp	r0, #0
 c025ea4:	f43f af2c 	beq.w	c025d00 <mbedtls_mpi_exp_mod+0x1d0>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 c025ea8:	2201      	movs	r2, #1
        mbedtls_mpi_free( &W[i] );
 c025eaa:	260c      	movs	r6, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 c025eac:	f10b 34ff 	add.w	r4, fp, #4294967295
 c025eb0:	fa02 f404 	lsl.w	r4, r2, r4
 c025eb4:	fa02 f50b 	lsl.w	r5, r2, fp
 c025eb8:	42a5      	cmp	r5, r4
 c025eba:	9302      	str	r3, [sp, #8]
 c025ebc:	d864      	bhi.n	c025f88 <mbedtls_mpi_exp_mod+0x458>
    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 c025ebe:	a817      	add	r0, sp, #92	; 0x5c
 c025ec0:	f7fe fe60 	bl	c024b84 <mbedtls_mpi_free>
 c025ec4:	a80b      	add	r0, sp, #44	; 0x2c
 c025ec6:	f7fe fe5d 	bl	c024b84 <mbedtls_mpi_free>
 c025eca:	a80e      	add	r0, sp, #56	; 0x38
 c025ecc:	f7fe fe5a 	bl	c024b84 <mbedtls_mpi_free>
    if( _RR == NULL || _RR->p == NULL )
 c025ed0:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 c025ed4:	9b02      	ldr	r3, [sp, #8]
 c025ed6:	b10a      	cbz	r2, c025edc <mbedtls_mpi_exp_mod+0x3ac>
 c025ed8:	6892      	ldr	r2, [r2, #8]
 c025eda:	b922      	cbnz	r2, c025ee6 <mbedtls_mpi_exp_mod+0x3b6>
        mbedtls_mpi_free( &RR );
 c025edc:	a808      	add	r0, sp, #32
 c025ede:	9302      	str	r3, [sp, #8]
 c025ee0:	f7fe fe50 	bl	c024b84 <mbedtls_mpi_free>
 c025ee4:	9b02      	ldr	r3, [sp, #8]
}
 c025ee6:	4618      	mov	r0, r3
 c025ee8:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 c025eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nbits++;
 c025ef0:	f108 0801 	add.w	r8, r8, #1
        wbits |= ( ei << ( wsize - nbits ) );
 c025ef4:	ebab 0208 	sub.w	r2, fp, r8
 c025ef8:	4093      	lsls	r3, r2
        if( nbits == wsize )
 c025efa:	45c3      	cmp	fp, r8
        wbits |= ( ei << ( wsize - nbits ) );
 c025efc:	ea47 0703 	orr.w	r7, r7, r3
        if( nbits == wsize )
 c025f00:	d1ab      	bne.n	c025e5a <mbedtls_mpi_exp_mod+0x32a>
            for( i = 0; i < wsize; i++ )
 c025f02:	f04f 0800 	mov.w	r8, #0
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 c025f06:	ab0b      	add	r3, sp, #44	; 0x2c
 c025f08:	9300      	str	r3, [sp, #0]
 c025f0a:	462a      	mov	r2, r5
 c025f0c:	4623      	mov	r3, r4
 c025f0e:	4631      	mov	r1, r6
 c025f10:	4630      	mov	r0, r6
 c025f12:	f7ff f911 	bl	c025138 <mpi_montmul>
 c025f16:	4603      	mov	r3, r0
 c025f18:	2800      	cmp	r0, #0
 c025f1a:	d1c5      	bne.n	c025ea8 <mbedtls_mpi_exp_mod+0x378>
            for( i = 0; i < wsize; i++ )
 c025f1c:	f108 0801 	add.w	r8, r8, #1
 c025f20:	45c3      	cmp	fp, r8
 c025f22:	d8f0      	bhi.n	c025f06 <mbedtls_mpi_exp_mod+0x3d6>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 c025f24:	210c      	movs	r1, #12
 c025f26:	ab0b      	add	r3, sp, #44	; 0x2c
 c025f28:	a814      	add	r0, sp, #80	; 0x50
 c025f2a:	9300      	str	r3, [sp, #0]
 c025f2c:	fb01 0107 	mla	r1, r1, r7, r0
 c025f30:	4623      	mov	r3, r4
 c025f32:	462a      	mov	r2, r5
 c025f34:	4630      	mov	r0, r6
 c025f36:	f7ff f8ff 	bl	c025138 <mpi_montmul>
 c025f3a:	4603      	mov	r3, r0
 c025f3c:	2800      	cmp	r0, #0
 c025f3e:	d1b3      	bne.n	c025ea8 <mbedtls_mpi_exp_mod+0x378>
            state--;
 c025f40:	f04f 0901 	mov.w	r9, #1
            nbits = 0;
 c025f44:	4607      	mov	r7, r0
            wbits = 0;
 c025f46:	4680      	mov	r8, r0
 c025f48:	e6da      	b.n	c025d00 <mbedtls_mpi_exp_mod+0x1d0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 c025f4a:	4623      	mov	r3, r4
 c025f4c:	f8cd 9000 	str.w	r9, [sp]
 c025f50:	462a      	mov	r2, r5
 c025f52:	4631      	mov	r1, r6
 c025f54:	4630      	mov	r0, r6
 c025f56:	f7ff f8ef 	bl	c025138 <mpi_montmul>
 c025f5a:	4603      	mov	r3, r0
 c025f5c:	2800      	cmp	r0, #0
 c025f5e:	d1a3      	bne.n	c025ea8 <mbedtls_mpi_exp_mod+0x378>
        wbits <<= 1;
 c025f60:	007f      	lsls	r7, r7, #1
        if( ( wbits & ( one << wsize ) ) != 0 )
 c025f62:	ea1a 0f07 	tst.w	sl, r7
 c025f66:	d103      	bne.n	c025f70 <mbedtls_mpi_exp_mod+0x440>
    for( i = 0; i < nbits; i++ )
 c025f68:	9b02      	ldr	r3, [sp, #8]
 c025f6a:	3301      	adds	r3, #1
 c025f6c:	9302      	str	r3, [sp, #8]
 c025f6e:	e6d5      	b.n	c025d1c <mbedtls_mpi_exp_mod+0x1ec>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 c025f70:	4623      	mov	r3, r4
 c025f72:	f8cd 9000 	str.w	r9, [sp]
 c025f76:	462a      	mov	r2, r5
 c025f78:	a917      	add	r1, sp, #92	; 0x5c
 c025f7a:	4630      	mov	r0, r6
 c025f7c:	f7ff f8dc 	bl	c025138 <mpi_montmul>
 c025f80:	4603      	mov	r3, r0
 c025f82:	2800      	cmp	r0, #0
 c025f84:	d0f0      	beq.n	c025f68 <mbedtls_mpi_exp_mod+0x438>
 c025f86:	e78f      	b.n	c025ea8 <mbedtls_mpi_exp_mod+0x378>
        mbedtls_mpi_free( &W[i] );
 c025f88:	ab14      	add	r3, sp, #80	; 0x50
 c025f8a:	fb06 3004 	mla	r0, r6, r4, r3
 c025f8e:	f7fe fdf9 	bl	c024b84 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 c025f92:	3401      	adds	r4, #1
 c025f94:	9b02      	ldr	r3, [sp, #8]
 c025f96:	e78f      	b.n	c025eb8 <mbedtls_mpi_exp_mod+0x388>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c025f98:	f06f 0303 	mvn.w	r3, #3
 c025f9c:	e7a3      	b.n	c025ee6 <mbedtls_mpi_exp_mod+0x3b6>

0c025f9e <mbedtls_mpi_gcd>:
{
 c025f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
    X->n = 0;
 c025fa0:	2300      	movs	r3, #0
 c025fa2:	2601      	movs	r6, #1
{
 c025fa4:	b08b      	sub	sp, #44	; 0x2c
 c025fa6:	4607      	mov	r7, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 c025fa8:	a804      	add	r0, sp, #16
{
 c025faa:	4615      	mov	r5, r2
    X->n = 0;
 c025fac:	e9cd 6301 	strd	r6, r3, [sp, #4]
    X->s = 1;
 c025fb0:	e9cd 3603 	strd	r3, r6, [sp, #12]
    X->p = NULL;
 c025fb4:	e9cd 3305 	strd	r3, r3, [sp, #20]
    X->n = 0;
 c025fb8:	e9cd 6307 	strd	r6, r3, [sp, #28]
    X->p = NULL;
 c025fbc:	9309      	str	r3, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 c025fbe:	f7fe fe19 	bl	c024bf4 <mbedtls_mpi_copy>
 c025fc2:	4604      	mov	r4, r0
 c025fc4:	2800      	cmp	r0, #0
 c025fc6:	d157      	bne.n	c026078 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 c025fc8:	4629      	mov	r1, r5
 c025fca:	a807      	add	r0, sp, #28
 c025fcc:	f7fe fe12 	bl	c024bf4 <mbedtls_mpi_copy>
 c025fd0:	4604      	mov	r4, r0
 c025fd2:	2800      	cmp	r0, #0
 c025fd4:	d150      	bne.n	c026078 <mbedtls_mpi_gcd+0xda>
    lz = mbedtls_mpi_lsb( &TA );
 c025fd6:	a804      	add	r0, sp, #16
 c025fd8:	f7fe fee3 	bl	c024da2 <mbedtls_mpi_lsb>
 c025fdc:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 c025fde:	a807      	add	r0, sp, #28
 c025fe0:	f7fe fedf 	bl	c024da2 <mbedtls_mpi_lsb>
 c025fe4:	4285      	cmp	r5, r0
 c025fe6:	bf28      	it	cs
 c025fe8:	4605      	movcs	r5, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 c025fea:	a804      	add	r0, sp, #16
 c025fec:	4629      	mov	r1, r5
 c025fee:	f7ff f837 	bl	c025060 <mbedtls_mpi_shift_r>
 c025ff2:	4604      	mov	r4, r0
 c025ff4:	2800      	cmp	r0, #0
 c025ff6:	d13f      	bne.n	c026078 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 c025ff8:	4629      	mov	r1, r5
 c025ffa:	a807      	add	r0, sp, #28
 c025ffc:	f7ff f830 	bl	c025060 <mbedtls_mpi_shift_r>
 c026000:	4604      	mov	r4, r0
 c026002:	2800      	cmp	r0, #0
 c026004:	d138      	bne.n	c026078 <mbedtls_mpi_gcd+0xda>
    TA.s = TB.s = 1;
 c026006:	9607      	str	r6, [sp, #28]
 c026008:	9604      	str	r6, [sp, #16]
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 c02600a:	2100      	movs	r1, #0
 c02600c:	a804      	add	r0, sp, #16
 c02600e:	f7ff f937 	bl	c025280 <mbedtls_mpi_cmp_int>
 c026012:	b958      	cbnz	r0, c02602c <mbedtls_mpi_gcd+0x8e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 c026014:	4629      	mov	r1, r5
 c026016:	a807      	add	r0, sp, #28
 c026018:	f7fe ffda 	bl	c024fd0 <mbedtls_mpi_shift_l>
 c02601c:	4604      	mov	r4, r0
 c02601e:	bb58      	cbnz	r0, c026078 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 c026020:	a907      	add	r1, sp, #28
 c026022:	4638      	mov	r0, r7
 c026024:	f7fe fde6 	bl	c024bf4 <mbedtls_mpi_copy>
 c026028:	4604      	mov	r4, r0
cleanup:
 c02602a:	e025      	b.n	c026078 <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 c02602c:	a804      	add	r0, sp, #16
 c02602e:	f7fe feb8 	bl	c024da2 <mbedtls_mpi_lsb>
 c026032:	4601      	mov	r1, r0
 c026034:	a804      	add	r0, sp, #16
 c026036:	f7ff f813 	bl	c025060 <mbedtls_mpi_shift_r>
 c02603a:	4604      	mov	r4, r0
 c02603c:	b9e0      	cbnz	r0, c026078 <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 c02603e:	a807      	add	r0, sp, #28
 c026040:	f7fe feaf 	bl	c024da2 <mbedtls_mpi_lsb>
 c026044:	4601      	mov	r1, r0
 c026046:	a807      	add	r0, sp, #28
 c026048:	f7ff f80a 	bl	c025060 <mbedtls_mpi_shift_r>
 c02604c:	4604      	mov	r4, r0
 c02604e:	b998      	cbnz	r0, c026078 <mbedtls_mpi_gcd+0xda>
        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 c026050:	a907      	add	r1, sp, #28
 c026052:	a804      	add	r0, sp, #16
 c026054:	f7ff f8d4 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c026058:	2800      	cmp	r0, #0
 c02605a:	db19      	blt.n	c026090 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 c02605c:	a904      	add	r1, sp, #16
 c02605e:	aa07      	add	r2, sp, #28
 c026060:	4608      	mov	r0, r1
 c026062:	f7ff f984 	bl	c02536e <mbedtls_mpi_sub_abs>
 c026066:	4604      	mov	r4, r0
 c026068:	b930      	cbnz	r0, c026078 <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 c02606a:	2101      	movs	r1, #1
 c02606c:	a804      	add	r0, sp, #16
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 c02606e:	f7fe fff7 	bl	c025060 <mbedtls_mpi_shift_r>
 c026072:	4604      	mov	r4, r0
 c026074:	2800      	cmp	r0, #0
 c026076:	d0c8      	beq.n	c02600a <mbedtls_mpi_gcd+0x6c>
    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 c026078:	a801      	add	r0, sp, #4
 c02607a:	f7fe fd83 	bl	c024b84 <mbedtls_mpi_free>
 c02607e:	a804      	add	r0, sp, #16
 c026080:	f7fe fd80 	bl	c024b84 <mbedtls_mpi_free>
 c026084:	a807      	add	r0, sp, #28
 c026086:	f7fe fd7d 	bl	c024b84 <mbedtls_mpi_free>
}
 c02608a:	4620      	mov	r0, r4
 c02608c:	b00b      	add	sp, #44	; 0x2c
 c02608e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 c026090:	a907      	add	r1, sp, #28
 c026092:	aa04      	add	r2, sp, #16
 c026094:	4608      	mov	r0, r1
 c026096:	f7ff f96a 	bl	c02536e <mbedtls_mpi_sub_abs>
 c02609a:	4604      	mov	r4, r0
 c02609c:	2800      	cmp	r0, #0
 c02609e:	d1eb      	bne.n	c026078 <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 c0260a0:	2101      	movs	r1, #1
 c0260a2:	a807      	add	r0, sp, #28
 c0260a4:	e7e3      	b.n	c02606e <mbedtls_mpi_gcd+0xd0>

0c0260a6 <mbedtls_mpi_fill_random>:
{
 c0260a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    size_t const limbs = CHARS_TO_LIMBS( size );
 c0260aa:	f011 0403 	ands.w	r4, r1, #3
 c0260ae:	bf18      	it	ne
 c0260b0:	2401      	movne	r4, #1
{
 c0260b2:	4699      	mov	r9, r3
    if( X->n != limbs )
 c0260b4:	6843      	ldr	r3, [r0, #4]
    size_t const limbs = CHARS_TO_LIMBS( size );
 c0260b6:	eb04 0491 	add.w	r4, r4, r1, lsr #2
    if( X->n != limbs )
 c0260ba:	42a3      	cmp	r3, r4
{
 c0260bc:	4606      	mov	r6, r0
 c0260be:	460f      	mov	r7, r1
 c0260c0:	4690      	mov	r8, r2
    if( X->n != limbs )
 c0260c2:	d108      	bne.n	c0260d6 <mbedtls_mpi_fill_random+0x30>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 c0260c4:	2100      	movs	r1, #0
 c0260c6:	4630      	mov	r0, r6
 c0260c8:	f7fe fe16 	bl	c024cf8 <mbedtls_mpi_lset>
 c0260cc:	4605      	mov	r5, r0
 c0260ce:	b188      	cbz	r0, c0260f4 <mbedtls_mpi_fill_random+0x4e>
}
 c0260d0:	4628      	mov	r0, r5
 c0260d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        mbedtls_mpi_free( X );
 c0260d6:	f7fe fd55 	bl	c024b84 <mbedtls_mpi_free>
    X->n = 0;
 c0260da:	2300      	movs	r3, #0
 c0260dc:	2201      	movs	r2, #1
    X->p = NULL;
 c0260de:	60b3      	str	r3, [r6, #8]
    X->n = 0;
 c0260e0:	e9c6 2300 	strd	r2, r3, [r6]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 c0260e4:	4621      	mov	r1, r4
 c0260e6:	4630      	mov	r0, r6
 c0260e8:	f7fe fd5e 	bl	c024ba8 <mbedtls_mpi_grow>
 c0260ec:	4605      	mov	r5, r0
 c0260ee:	2800      	cmp	r0, #0
 c0260f0:	d0e8      	beq.n	c0260c4 <mbedtls_mpi_fill_random+0x1e>
 c0260f2:	e7ed      	b.n	c0260d0 <mbedtls_mpi_fill_random+0x2a>
    f_rng( p_rng, Xp + overhead, size );
 c0260f4:	68b1      	ldr	r1, [r6, #8]
    size_t const overhead = ( limbs * ciL ) - size;
 c0260f6:	ebc7 0384 	rsb	r3, r7, r4, lsl #2
    f_rng( p_rng, Xp + overhead, size );
 c0260fa:	463a      	mov	r2, r7
 c0260fc:	4419      	add	r1, r3
 c0260fe:	4648      	mov	r0, r9
 c026100:	47c0      	blx	r8
    if( limbs == 0 )
 c026102:	2c00      	cmp	r4, #0
 c026104:	d0e4      	beq.n	c0260d0 <mbedtls_mpi_fill_random+0x2a>
 c026106:	4621      	mov	r1, r4
 c026108:	68b0      	ldr	r0, [r6, #8]
 c02610a:	f7fe fd03 	bl	c024b14 <mpi_bigendian_to_host.part.1>
    return( ret );
 c02610e:	e7df      	b.n	c0260d0 <mbedtls_mpi_fill_random+0x2a>

0c026110 <mpi_miller_rabin>:
 * Miller-Rabin pseudo-primality test  (HAC 4.24)
 */
static int mpi_miller_rabin( const mbedtls_mpi *X, size_t rounds,
                             int (*f_rng)(void *, unsigned char *, size_t),
                             void *p_rng )
{
 c026110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c026114:	4692      	mov	sl, r2
 c026116:	469b      	mov	fp, r3
    X->n = 0;
 c026118:	2201      	movs	r2, #1
 c02611a:	2300      	movs	r3, #0
{
 c02611c:	b095      	sub	sp, #84	; 0x54
 c02611e:	4605      	mov	r5, r0
 c026120:	4689      	mov	r9, r1

    /*
     * W = |X| - 1
     * R = W >> lsb( W )
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &W, X, 1 ) );
 c026122:	4601      	mov	r1, r0
 c026124:	a805      	add	r0, sp, #20
    X->n = 0;
 c026126:	e9cd 2305 	strd	r2, r3, [sp, #20]
    X->s = 1;
 c02612a:	e9cd 3207 	strd	r3, r2, [sp, #28]
    X->p = NULL;
 c02612e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    X->n = 0;
 c026132:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    X->s = 1;
 c026136:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
    X->p = NULL;
 c02613a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
    X->n = 0;
 c02613e:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
    X->p = NULL;
 c026142:	9313      	str	r3, [sp, #76]	; 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &W, X, 1 ) );
 c026144:	f7ff f9ac 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c026148:	4604      	mov	r4, r0
 c02614a:	b990      	cbnz	r0, c026172 <mpi_miller_rabin+0x62>
    s = mbedtls_mpi_lsb( &W );
 c02614c:	a805      	add	r0, sp, #20
 c02614e:	f7fe fe28 	bl	c024da2 <mbedtls_mpi_lsb>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R, &W ) );
 c026152:	a905      	add	r1, sp, #20
    s = mbedtls_mpi_lsb( &W );
 c026154:	4680      	mov	r8, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R, &W ) );
 c026156:	a808      	add	r0, sp, #32
 c026158:	f7fe fd4c 	bl	c024bf4 <mbedtls_mpi_copy>
 c02615c:	4604      	mov	r4, r0
 c02615e:	b940      	cbnz	r0, c026172 <mpi_miller_rabin+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &R, s ) );
 c026160:	4641      	mov	r1, r8
 c026162:	a808      	add	r0, sp, #32
 c026164:	f7fe ff7c 	bl	c025060 <mbedtls_mpi_shift_r>
 c026168:	4604      	mov	r4, r0
 c02616a:	b910      	cbnz	r0, c026172 <mpi_miller_rabin+0x62>

    i = mbedtls_mpi_bitlen( X );

    for( i = 0; i < rounds; i++ )
 c02616c:	4606      	mov	r6, r0
 c02616e:	454e      	cmp	r6, r9
 c026170:	d112      	bne.n	c026198 <mpi_miller_rabin+0x88>
            break;
        }
    }

cleanup:
    mbedtls_mpi_free( &W ); mbedtls_mpi_free( &R );
 c026172:	a805      	add	r0, sp, #20
 c026174:	f7fe fd06 	bl	c024b84 <mbedtls_mpi_free>
 c026178:	a808      	add	r0, sp, #32
 c02617a:	f7fe fd03 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T ); mbedtls_mpi_free( &A );
 c02617e:	a80b      	add	r0, sp, #44	; 0x2c
 c026180:	f7fe fd00 	bl	c024b84 <mbedtls_mpi_free>
 c026184:	a80e      	add	r0, sp, #56	; 0x38
 c026186:	f7fe fcfd 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &RR );
 c02618a:	a811      	add	r0, sp, #68	; 0x44
 c02618c:	f7fe fcfa 	bl	c024b84 <mbedtls_mpi_free>

    return( ret );
}
 c026190:	4620      	mov	r0, r4
 c026192:	b015      	add	sp, #84	; 0x54
 c026194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c026198:	2720      	movs	r7, #32
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &A, X->n * ciL, f_rng, p_rng ) );
 c02619a:	6869      	ldr	r1, [r5, #4]
 c02619c:	465b      	mov	r3, fp
 c02619e:	4652      	mov	r2, sl
 c0261a0:	0089      	lsls	r1, r1, #2
 c0261a2:	a80e      	add	r0, sp, #56	; 0x38
 c0261a4:	f7ff ff7f 	bl	c0260a6 <mbedtls_mpi_fill_random>
 c0261a8:	2800      	cmp	r0, #0
 c0261aa:	d16d      	bne.n	c026288 <mpi_miller_rabin+0x178>
            j = mbedtls_mpi_bitlen( &A );
 c0261ac:	a80e      	add	r0, sp, #56	; 0x38
 c0261ae:	f7fe fe13 	bl	c024dd8 <mbedtls_mpi_bitlen>
 c0261b2:	9003      	str	r0, [sp, #12]
            k = mbedtls_mpi_bitlen( &W );
 c0261b4:	a805      	add	r0, sp, #20
 c0261b6:	f7fe fe0f 	bl	c024dd8 <mbedtls_mpi_bitlen>
            if (j > k) {
 c0261ba:	9b03      	ldr	r3, [sp, #12]
 c0261bc:	4283      	cmp	r3, r0
 c0261be:	d914      	bls.n	c0261ea <mpi_miller_rabin+0xda>
                A.p[A.n - 1] &= ( (mbedtls_mpi_uint) 1 << ( k - ( A.n - 1 ) * biL - 1 ) ) - 1;
 c0261c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 c0261c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 c0261c4:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 c0261c8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 c0261cc:	3b01      	subs	r3, #1
 c0261ce:	ea6f 1343 	mvn.w	r3, r3, lsl #5
 c0261d2:	4418      	add	r0, r3
 c0261d4:	f04f 33ff 	mov.w	r3, #4294967295
 c0261d8:	3901      	subs	r1, #1
 c0261da:	fa03 f000 	lsl.w	r0, r3, r0
 c0261de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 c0261e2:	ea23 0000 	bic.w	r0, r3, r0
 c0261e6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
            if (count++ > 30) {
 c0261ea:	3f01      	subs	r7, #1
 c0261ec:	d04e      	beq.n	c02628c <mpi_miller_rabin+0x17c>
        } while ( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 ||
 c0261ee:	a905      	add	r1, sp, #20
 c0261f0:	a80e      	add	r0, sp, #56	; 0x38
 c0261f2:	f7ff f805 	bl	c025200 <mbedtls_mpi_cmp_mpi>
                  mbedtls_mpi_cmp_int( &A, 1 )  <= 0    );
 c0261f6:	2800      	cmp	r0, #0
 c0261f8:	dacf      	bge.n	c02619a <mpi_miller_rabin+0x8a>
 c0261fa:	2101      	movs	r1, #1
 c0261fc:	a80e      	add	r0, sp, #56	; 0x38
 c0261fe:	f7ff f83f 	bl	c025280 <mbedtls_mpi_cmp_int>
        } while ( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 ||
 c026202:	2800      	cmp	r0, #0
 c026204:	ddc9      	ble.n	c02619a <mpi_miller_rabin+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &A, &A, &R, X, &RR ) );
 c026206:	ab11      	add	r3, sp, #68	; 0x44
 c026208:	a90e      	add	r1, sp, #56	; 0x38
 c02620a:	9300      	str	r3, [sp, #0]
 c02620c:	aa08      	add	r2, sp, #32
 c02620e:	462b      	mov	r3, r5
 c026210:	4608      	mov	r0, r1
 c026212:	f7ff fc8d 	bl	c025b30 <mbedtls_mpi_exp_mod>
 c026216:	2800      	cmp	r0, #0
 c026218:	d136      	bne.n	c026288 <mpi_miller_rabin+0x178>
        if( mbedtls_mpi_cmp_mpi( &A, &W ) == 0 ||
 c02621a:	a905      	add	r1, sp, #20
 c02621c:	a80e      	add	r0, sp, #56	; 0x38
 c02621e:	f7fe ffef 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c026222:	b908      	cbnz	r0, c026228 <mpi_miller_rabin+0x118>
    for( i = 0; i < rounds; i++ )
 c026224:	3601      	adds	r6, #1
 c026226:	e7a2      	b.n	c02616e <mpi_miller_rabin+0x5e>
            mbedtls_mpi_cmp_int( &A,  1 ) == 0 )
 c026228:	2101      	movs	r1, #1
 c02622a:	a80e      	add	r0, sp, #56	; 0x38
 c02622c:	f7ff f828 	bl	c025280 <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_mpi( &A, &W ) == 0 ||
 c026230:	2800      	cmp	r0, #0
 c026232:	d0f7      	beq.n	c026224 <mpi_miller_rabin+0x114>
        j = 1;
 c026234:	2701      	movs	r7, #1
 c026236:	a905      	add	r1, sp, #20
 c026238:	a80e      	add	r0, sp, #56	; 0x38
 c02623a:	f7fe ffe1 	bl	c025200 <mbedtls_mpi_cmp_mpi>
        while( j < s && mbedtls_mpi_cmp_mpi( &A, &W ) != 0 )
 c02623e:	4547      	cmp	r7, r8
 c026240:	d211      	bcs.n	c026266 <mpi_miller_rabin+0x156>
 c026242:	b180      	cbz	r0, c026266 <mpi_miller_rabin+0x156>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &A, &A ) );
 c026244:	aa0e      	add	r2, sp, #56	; 0x38
 c026246:	4611      	mov	r1, r2
 c026248:	a80b      	add	r0, sp, #44	; 0x2c
 c02624a:	f7ff f93f 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c02624e:	b9d8      	cbnz	r0, c026288 <mpi_miller_rabin+0x178>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &A, &T, X  ) );
 c026250:	462a      	mov	r2, r5
 c026252:	a90b      	add	r1, sp, #44	; 0x2c
 c026254:	a80e      	add	r0, sp, #56	; 0x38
 c026256:	f7ff fbf5 	bl	c025a44 <mbedtls_mpi_mod_mpi>
 c02625a:	b9a8      	cbnz	r0, c026288 <mpi_miller_rabin+0x178>
            if( mbedtls_mpi_cmp_int( &A, 1 ) == 0 )
 c02625c:	2101      	movs	r1, #1
 c02625e:	a80e      	add	r0, sp, #56	; 0x38
 c026260:	f7ff f80e 	bl	c025280 <mbedtls_mpi_cmp_int>
 c026264:	b938      	cbnz	r0, c026276 <mpi_miller_rabin+0x166>
        if( mbedtls_mpi_cmp_mpi( &A, &W ) != 0 ||
 c026266:	a905      	add	r1, sp, #20
 c026268:	a80e      	add	r0, sp, #56	; 0x38
 c02626a:	f7fe ffc9 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c02626e:	b120      	cbz	r0, c02627a <mpi_miller_rabin+0x16a>
            ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 c026270:	f06f 040d 	mvn.w	r4, #13
 c026274:	e77d      	b.n	c026172 <mpi_miller_rabin+0x62>
            j++;
 c026276:	3701      	adds	r7, #1
 c026278:	e7dd      	b.n	c026236 <mpi_miller_rabin+0x126>
            mbedtls_mpi_cmp_int( &A,  1 ) == 0 )
 c02627a:	2101      	movs	r1, #1
 c02627c:	a80e      	add	r0, sp, #56	; 0x38
 c02627e:	f7fe ffff 	bl	c025280 <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_mpi( &A, &W ) != 0 ||
 c026282:	2800      	cmp	r0, #0
 c026284:	d1ce      	bne.n	c026224 <mpi_miller_rabin+0x114>
 c026286:	e7f3      	b.n	c026270 <mpi_miller_rabin+0x160>
cleanup:
 c026288:	4604      	mov	r4, r0
 c02628a:	e772      	b.n	c026172 <mpi_miller_rabin+0x62>
                return MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 c02628c:	f06f 040d 	mvn.w	r4, #13
 c026290:	e77e      	b.n	c026190 <mpi_miller_rabin+0x80>

0c026292 <mbedtls_mpi_inv_mod>:
{
 c026292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c026296:	4680      	mov	r8, r0
 c026298:	b09c      	sub	sp, #112	; 0x70
 c02629a:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 c02629c:	4610      	mov	r0, r2
 c02629e:	2101      	movs	r1, #1
{
 c0262a0:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 c0262a2:	f7fe ffed 	bl	c025280 <mbedtls_mpi_cmp_int>
 c0262a6:	2800      	cmp	r0, #0
 c0262a8:	f340 8143 	ble.w	c026532 <mbedtls_mpi_inv_mod+0x2a0>
    X->n = 0;
 c0262ac:	2300      	movs	r3, #0
 c0262ae:	2501      	movs	r5, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 c0262b0:	4632      	mov	r2, r6
 c0262b2:	4639      	mov	r1, r7
 c0262b4:	a801      	add	r0, sp, #4
    X->n = 0;
 c0262b6:	e9cd 5304 	strd	r5, r3, [sp, #16]
    X->s = 1;
 c0262ba:	e9cd 3506 	strd	r3, r5, [sp, #24]
    X->p = NULL;
 c0262be:	e9cd 3308 	strd	r3, r3, [sp, #32]
    X->n = 0;
 c0262c2:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
    X->s = 1;
 c0262c6:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
    X->p = NULL;
 c0262ca:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    X->n = 0;
 c0262ce:	e9cd 5301 	strd	r5, r3, [sp, #4]
    X->p = NULL;
 c0262d2:	9303      	str	r3, [sp, #12]
    X->n = 0;
 c0262d4:	e9cd 5310 	strd	r5, r3, [sp, #64]	; 0x40
    X->s = 1;
 c0262d8:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
    X->p = NULL;
 c0262dc:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
    X->n = 0;
 c0262e0:	e9cd 5316 	strd	r5, r3, [sp, #88]	; 0x58
    X->s = 1;
 c0262e4:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
    X->p = NULL;
 c0262e8:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 c0262ec:	f7ff fe57 	bl	c025f9e <mbedtls_mpi_gcd>
 c0262f0:	4604      	mov	r4, r0
 c0262f2:	2800      	cmp	r0, #0
 c0262f4:	d154      	bne.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 c0262f6:	4629      	mov	r1, r5
 c0262f8:	a801      	add	r0, sp, #4
 c0262fa:	f7fe ffc1 	bl	c025280 <mbedtls_mpi_cmp_int>
 c0262fe:	2800      	cmp	r0, #0
 c026300:	f040 8114 	bne.w	c02652c <mbedtls_mpi_inv_mod+0x29a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 c026304:	4632      	mov	r2, r6
 c026306:	4639      	mov	r1, r7
 c026308:	a804      	add	r0, sp, #16
 c02630a:	f7ff fb9b 	bl	c025a44 <mbedtls_mpi_mod_mpi>
 c02630e:	4604      	mov	r4, r0
 c026310:	2800      	cmp	r0, #0
 c026312:	d145      	bne.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 c026314:	a904      	add	r1, sp, #16
 c026316:	a807      	add	r0, sp, #28
 c026318:	f7fe fc6c 	bl	c024bf4 <mbedtls_mpi_copy>
 c02631c:	4604      	mov	r4, r0
 c02631e:	2800      	cmp	r0, #0
 c026320:	d13e      	bne.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 c026322:	4631      	mov	r1, r6
 c026324:	a810      	add	r0, sp, #64	; 0x40
 c026326:	f7fe fc65 	bl	c024bf4 <mbedtls_mpi_copy>
 c02632a:	4604      	mov	r4, r0
 c02632c:	2800      	cmp	r0, #0
 c02632e:	d137      	bne.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 c026330:	4631      	mov	r1, r6
 c026332:	a813      	add	r0, sp, #76	; 0x4c
 c026334:	f7fe fc5e 	bl	c024bf4 <mbedtls_mpi_copy>
 c026338:	4604      	mov	r4, r0
 c02633a:	2800      	cmp	r0, #0
 c02633c:	d130      	bne.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 c02633e:	4629      	mov	r1, r5
 c026340:	a80a      	add	r0, sp, #40	; 0x28
 c026342:	f7fe fcd9 	bl	c024cf8 <mbedtls_mpi_lset>
 c026346:	4604      	mov	r4, r0
 c026348:	bb50      	cbnz	r0, c0263a0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 c02634a:	4601      	mov	r1, r0
 c02634c:	a80d      	add	r0, sp, #52	; 0x34
 c02634e:	f7fe fcd3 	bl	c024cf8 <mbedtls_mpi_lset>
 c026352:	4604      	mov	r4, r0
 c026354:	bb20      	cbnz	r0, c0263a0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 c026356:	4601      	mov	r1, r0
 c026358:	a816      	add	r0, sp, #88	; 0x58
 c02635a:	f7fe fccd 	bl	c024cf8 <mbedtls_mpi_lset>
 c02635e:	4604      	mov	r4, r0
 c026360:	b9f0      	cbnz	r0, c0263a0 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 c026362:	4629      	mov	r1, r5
 c026364:	a819      	add	r0, sp, #100	; 0x64
 c026366:	f7fe fcc7 	bl	c024cf8 <mbedtls_mpi_lset>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 c02636a:	4604      	mov	r4, r0
 c02636c:	b9c0      	cbnz	r0, c0263a0 <mbedtls_mpi_inv_mod+0x10e>
        while( ( TU.p[0] & 1 ) == 0 )
 c02636e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c026370:	681b      	ldr	r3, [r3, #0]
 c026372:	07d8      	lsls	r0, r3, #31
 c026374:	d466      	bmi.n	c026444 <mbedtls_mpi_inv_mod+0x1b2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 c026376:	2101      	movs	r1, #1
 c026378:	a807      	add	r0, sp, #28
 c02637a:	f7fe fe71 	bl	c025060 <mbedtls_mpi_shift_r>
 c02637e:	4604      	mov	r4, r0
 c026380:	b970      	cbnz	r0, c0263a0 <mbedtls_mpi_inv_mod+0x10e>
            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 c026382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 c026384:	681b      	ldr	r3, [r3, #0]
 c026386:	07dd      	lsls	r5, r3, #31
 c026388:	d429      	bmi.n	c0263de <mbedtls_mpi_inv_mod+0x14c>
 c02638a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 c02638c:	681b      	ldr	r3, [r3, #0]
 c02638e:	07dc      	lsls	r4, r3, #31
 c026390:	d425      	bmi.n	c0263de <mbedtls_mpi_inv_mod+0x14c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 c026392:	2101      	movs	r1, #1
 c026394:	a80a      	add	r0, sp, #40	; 0x28
 c026396:	f7fe fe63 	bl	c025060 <mbedtls_mpi_shift_r>
 c02639a:	4604      	mov	r4, r0
 c02639c:	2800      	cmp	r0, #0
 c02639e:	d02f      	beq.n	c026400 <mbedtls_mpi_inv_mod+0x16e>
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 c0263a0:	a804      	add	r0, sp, #16
 c0263a2:	f7fe fbef 	bl	c024b84 <mbedtls_mpi_free>
 c0263a6:	a807      	add	r0, sp, #28
 c0263a8:	f7fe fbec 	bl	c024b84 <mbedtls_mpi_free>
 c0263ac:	a80a      	add	r0, sp, #40	; 0x28
 c0263ae:	f7fe fbe9 	bl	c024b84 <mbedtls_mpi_free>
 c0263b2:	a80d      	add	r0, sp, #52	; 0x34
 c0263b4:	f7fe fbe6 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 c0263b8:	a801      	add	r0, sp, #4
 c0263ba:	f7fe fbe3 	bl	c024b84 <mbedtls_mpi_free>
 c0263be:	a810      	add	r0, sp, #64	; 0x40
 c0263c0:	f7fe fbe0 	bl	c024b84 <mbedtls_mpi_free>
 c0263c4:	a813      	add	r0, sp, #76	; 0x4c
 c0263c6:	f7fe fbdd 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 c0263ca:	a816      	add	r0, sp, #88	; 0x58
 c0263cc:	f7fe fbda 	bl	c024b84 <mbedtls_mpi_free>
 c0263d0:	a819      	add	r0, sp, #100	; 0x64
 c0263d2:	f7fe fbd7 	bl	c024b84 <mbedtls_mpi_free>
}
 c0263d6:	4620      	mov	r0, r4
 c0263d8:	b01c      	add	sp, #112	; 0x70
 c0263da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 c0263de:	a90a      	add	r1, sp, #40	; 0x28
 c0263e0:	aa10      	add	r2, sp, #64	; 0x40
 c0263e2:	4608      	mov	r0, r1
 c0263e4:	f7ff f801 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c0263e8:	4604      	mov	r4, r0
 c0263ea:	2800      	cmp	r0, #0
 c0263ec:	d1d8      	bne.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 c0263ee:	a90d      	add	r1, sp, #52	; 0x34
 c0263f0:	aa04      	add	r2, sp, #16
 c0263f2:	4608      	mov	r0, r1
 c0263f4:	f7ff f81b 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c0263f8:	4604      	mov	r4, r0
 c0263fa:	2800      	cmp	r0, #0
 c0263fc:	d0c9      	beq.n	c026392 <mbedtls_mpi_inv_mod+0x100>
 c0263fe:	e7cf      	b.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 c026400:	2101      	movs	r1, #1
 c026402:	a80d      	add	r0, sp, #52	; 0x34
 c026404:	f7fe fe2c 	bl	c025060 <mbedtls_mpi_shift_r>
 c026408:	e7af      	b.n	c02636a <mbedtls_mpi_inv_mod+0xd8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 c02640a:	2101      	movs	r1, #1
 c02640c:	a813      	add	r0, sp, #76	; 0x4c
 c02640e:	f7fe fe27 	bl	c025060 <mbedtls_mpi_shift_r>
 c026412:	4604      	mov	r4, r0
 c026414:	2800      	cmp	r0, #0
 c026416:	d1c3      	bne.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 c026418:	9b18      	ldr	r3, [sp, #96]	; 0x60
 c02641a:	681b      	ldr	r3, [r3, #0]
 c02641c:	07d9      	lsls	r1, r3, #31
 c02641e:	d44c      	bmi.n	c0264ba <mbedtls_mpi_inv_mod+0x228>
 c026420:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 c026422:	681b      	ldr	r3, [r3, #0]
 c026424:	07da      	lsls	r2, r3, #31
 c026426:	d448      	bmi.n	c0264ba <mbedtls_mpi_inv_mod+0x228>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 c026428:	2101      	movs	r1, #1
 c02642a:	a816      	add	r0, sp, #88	; 0x58
 c02642c:	f7fe fe18 	bl	c025060 <mbedtls_mpi_shift_r>
 c026430:	4604      	mov	r4, r0
 c026432:	2800      	cmp	r0, #0
 c026434:	d1b4      	bne.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 c026436:	2101      	movs	r1, #1
 c026438:	a819      	add	r0, sp, #100	; 0x64
 c02643a:	f7fe fe11 	bl	c025060 <mbedtls_mpi_shift_r>
 c02643e:	4604      	mov	r4, r0
 c026440:	2800      	cmp	r0, #0
 c026442:	d1ad      	bne.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
        while( ( TV.p[0] & 1 ) == 0 )
 c026444:	9b15      	ldr	r3, [sp, #84]	; 0x54
 c026446:	681b      	ldr	r3, [r3, #0]
 c026448:	07db      	lsls	r3, r3, #31
 c02644a:	d5de      	bpl.n	c02640a <mbedtls_mpi_inv_mod+0x178>
        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 c02644c:	a913      	add	r1, sp, #76	; 0x4c
 c02644e:	a807      	add	r0, sp, #28
 c026450:	f7fe fed6 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c026454:	2800      	cmp	r0, #0
 c026456:	db42      	blt.n	c0264de <mbedtls_mpi_inv_mod+0x24c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 c026458:	a907      	add	r1, sp, #28
 c02645a:	aa13      	add	r2, sp, #76	; 0x4c
 c02645c:	4608      	mov	r0, r1
 c02645e:	f7fe ffe6 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c026462:	4604      	mov	r4, r0
 c026464:	2800      	cmp	r0, #0
 c026466:	d19b      	bne.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 c026468:	a90a      	add	r1, sp, #40	; 0x28
 c02646a:	aa16      	add	r2, sp, #88	; 0x58
 c02646c:	4608      	mov	r0, r1
 c02646e:	f7fe ffde 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c026472:	4604      	mov	r4, r0
 c026474:	2800      	cmp	r0, #0
 c026476:	d193      	bne.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 c026478:	aa19      	add	r2, sp, #100	; 0x64
 c02647a:	a90d      	add	r1, sp, #52	; 0x34
 c02647c:	4608      	mov	r0, r1
 c02647e:	f7fe ffd6 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c026482:	4604      	mov	r4, r0
 c026484:	2800      	cmp	r0, #0
 c026486:	d18b      	bne.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 c026488:	2100      	movs	r1, #0
 c02648a:	a807      	add	r0, sp, #28
 c02648c:	f7fe fef8 	bl	c025280 <mbedtls_mpi_cmp_int>
 c026490:	2800      	cmp	r0, #0
 c026492:	f47f af6c 	bne.w	c02636e <mbedtls_mpi_inv_mod+0xdc>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 c026496:	2100      	movs	r1, #0
 c026498:	a816      	add	r0, sp, #88	; 0x58
 c02649a:	f7fe fef1 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02649e:	2800      	cmp	r0, #0
 c0264a0:	db32      	blt.n	c026508 <mbedtls_mpi_inv_mod+0x276>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 c0264a2:	4631      	mov	r1, r6
 c0264a4:	a816      	add	r0, sp, #88	; 0x58
 c0264a6:	f7fe feab 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c0264aa:	2800      	cmp	r0, #0
 c0264ac:	da35      	bge.n	c02651a <mbedtls_mpi_inv_mod+0x288>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 c0264ae:	a916      	add	r1, sp, #88	; 0x58
 c0264b0:	4640      	mov	r0, r8
 c0264b2:	f7fe fb9f 	bl	c024bf4 <mbedtls_mpi_copy>
 c0264b6:	4604      	mov	r4, r0
cleanup:
 c0264b8:	e772      	b.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 c0264ba:	a916      	add	r1, sp, #88	; 0x58
 c0264bc:	aa10      	add	r2, sp, #64	; 0x40
 c0264be:	4608      	mov	r0, r1
 c0264c0:	f7fe ff93 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c0264c4:	4604      	mov	r4, r0
 c0264c6:	2800      	cmp	r0, #0
 c0264c8:	f47f af6a 	bne.w	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 c0264cc:	a919      	add	r1, sp, #100	; 0x64
 c0264ce:	aa04      	add	r2, sp, #16
 c0264d0:	4608      	mov	r0, r1
 c0264d2:	f7fe ffac 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c0264d6:	4604      	mov	r4, r0
 c0264d8:	2800      	cmp	r0, #0
 c0264da:	d0a5      	beq.n	c026428 <mbedtls_mpi_inv_mod+0x196>
 c0264dc:	e760      	b.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 c0264de:	a913      	add	r1, sp, #76	; 0x4c
 c0264e0:	aa07      	add	r2, sp, #28
 c0264e2:	4608      	mov	r0, r1
 c0264e4:	f7fe ffa3 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c0264e8:	4604      	mov	r4, r0
 c0264ea:	2800      	cmp	r0, #0
 c0264ec:	f47f af58 	bne.w	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 c0264f0:	a916      	add	r1, sp, #88	; 0x58
 c0264f2:	aa0a      	add	r2, sp, #40	; 0x28
 c0264f4:	4608      	mov	r0, r1
 c0264f6:	f7fe ff9a 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c0264fa:	4604      	mov	r4, r0
 c0264fc:	2800      	cmp	r0, #0
 c0264fe:	f47f af4f 	bne.w	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 c026502:	aa0d      	add	r2, sp, #52	; 0x34
 c026504:	a919      	add	r1, sp, #100	; 0x64
 c026506:	e7b9      	b.n	c02647c <mbedtls_mpi_inv_mod+0x1ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 c026508:	a916      	add	r1, sp, #88	; 0x58
 c02650a:	4632      	mov	r2, r6
 c02650c:	4608      	mov	r0, r1
 c02650e:	f7fe ff6c 	bl	c0253ea <mbedtls_mpi_add_mpi>
 c026512:	4604      	mov	r4, r0
 c026514:	2800      	cmp	r0, #0
 c026516:	d0be      	beq.n	c026496 <mbedtls_mpi_inv_mod+0x204>
cleanup:
 c026518:	e742      	b.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 c02651a:	a916      	add	r1, sp, #88	; 0x58
 c02651c:	4632      	mov	r2, r6
 c02651e:	4608      	mov	r0, r1
 c026520:	f7fe ff85 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c026524:	4604      	mov	r4, r0
 c026526:	2800      	cmp	r0, #0
 c026528:	d0bb      	beq.n	c0264a2 <mbedtls_mpi_inv_mod+0x210>
cleanup:
 c02652a:	e739      	b.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 c02652c:	f06f 040d 	mvn.w	r4, #13
 c026530:	e736      	b.n	c0263a0 <mbedtls_mpi_inv_mod+0x10e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c026532:	f06f 0403 	mvn.w	r4, #3
 c026536:	e74e      	b.n	c0263d6 <mbedtls_mpi_inv_mod+0x144>

0c026538 <mbedtls_mpi_is_prime_ext>:
 * Pseudo-primality test: small factors, then Miller-Rabin
 */
int mbedtls_mpi_is_prime_ext( const mbedtls_mpi *X, int rounds,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
 c026538:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    mbedtls_mpi XX;
    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    XX.s = 1;
 c02653a:	2401      	movs	r4, #1
{
 c02653c:	461f      	mov	r7, r3
    XX.n = X->n;
 c02653e:	6843      	ldr	r3, [r0, #4]
{
 c026540:	b085      	sub	sp, #20
    XX.n = X->n;
 c026542:	9302      	str	r3, [sp, #8]
    XX.p = X->p;
 c026544:	6883      	ldr	r3, [r0, #8]
{
 c026546:	460d      	mov	r5, r1

    if( mbedtls_mpi_cmp_int( &XX, 0 ) == 0 ||
 c026548:	a801      	add	r0, sp, #4
 c02654a:	2100      	movs	r1, #0
{
 c02654c:	4616      	mov	r6, r2
    XX.s = 1;
 c02654e:	9401      	str	r4, [sp, #4]
    XX.p = X->p;
 c026550:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( &XX, 0 ) == 0 ||
 c026552:	f7fe fe95 	bl	c025280 <mbedtls_mpi_cmp_int>
 c026556:	b1c8      	cbz	r0, c02658c <mbedtls_mpi_is_prime_ext+0x54>
        mbedtls_mpi_cmp_int( &XX, 1 ) == 0 )
 c026558:	4621      	mov	r1, r4
 c02655a:	a801      	add	r0, sp, #4
 c02655c:	f7fe fe90 	bl	c025280 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( &XX, 0 ) == 0 ||
 c026560:	b1a0      	cbz	r0, c02658c <mbedtls_mpi_is_prime_ext+0x54>
        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );

    if( mbedtls_mpi_cmp_int( &XX, 2 ) == 0 )
 c026562:	2102      	movs	r1, #2
 c026564:	a801      	add	r0, sp, #4
 c026566:	f7fe fe8b 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02656a:	b128      	cbz	r0, c026578 <mbedtls_mpi_is_prime_ext+0x40>
        return( 0 );

    if( ( ret = mpi_check_small_factors( &XX ) ) != 0 )
 c02656c:	a801      	add	r0, sp, #4
 c02656e:	f7ff fab9 	bl	c025ae4 <mpi_check_small_factors>
 c026572:	b120      	cbz	r0, c02657e <mbedtls_mpi_is_prime_ext+0x46>
    {
        if( ret == 1 )
 c026574:	42a0      	cmp	r0, r4
 c026576:	d100      	bne.n	c02657a <mbedtls_mpi_is_prime_ext+0x42>
            return( 0 );
 c026578:	2000      	movs	r0, #0

        return( ret );
    }

    return( mpi_miller_rabin( &XX, rounds, f_rng, p_rng ) );
}
 c02657a:	b005      	add	sp, #20
 c02657c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return( mpi_miller_rabin( &XX, rounds, f_rng, p_rng ) );
 c02657e:	463b      	mov	r3, r7
 c026580:	4632      	mov	r2, r6
 c026582:	4629      	mov	r1, r5
 c026584:	a801      	add	r0, sp, #4
 c026586:	f7ff fdc3 	bl	c026110 <mpi_miller_rabin>
 c02658a:	e7f6      	b.n	c02657a <mbedtls_mpi_is_prime_ext+0x42>
        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
 c02658c:	f06f 000d 	mvn.w	r0, #13
 c026590:	e7f3      	b.n	c02657a <mbedtls_mpi_is_prime_ext+0x42>
	...

0c026594 <mbedtls_mpi_gen_prime>:
 * MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR.
 */
int mbedtls_mpi_gen_prime( mbedtls_mpi *X, size_t nbits, int flags,
                   int (*f_rng)(void *, unsigned char *, size_t),
                   void *p_rng )
{
 c026594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c026598:	4698      	mov	r8, r3
    mbedtls_mpi Y;

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    if( nbits < 3 || nbits > MBEDTLS_MPI_MAX_BITS )
 c02659a:	f641 73fd 	movw	r3, #8189	; 0x1ffd
{
 c02659e:	460c      	mov	r4, r1
    if( nbits < 3 || nbits > MBEDTLS_MPI_MAX_BITS )
 c0265a0:	3903      	subs	r1, #3
 c0265a2:	4299      	cmp	r1, r3
{
 c0265a4:	b087      	sub	sp, #28
 c0265a6:	4606      	mov	r6, r0
    if( nbits < 3 || nbits > MBEDTLS_MPI_MAX_BITS )
 c0265a8:	f200 80f3 	bhi.w	c026792 <mbedtls_mpi_gen_prime+0x1fe>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    mbedtls_mpi_init( &Y );

    n = BITS_TO_LIMBS( nbits );
 c0265ac:	f014 071f 	ands.w	r7, r4, #31
    X->n = 0;
 c0265b0:	f04f 0300 	mov.w	r3, #0
    n = BITS_TO_LIMBS( nbits );
 c0265b4:	bf18      	it	ne
 c0265b6:	2701      	movne	r7, #1
    X->n = 0;
 c0265b8:	2101      	movs	r1, #1

    if( ( flags & MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR ) == 0 )
 c0265ba:	0790      	lsls	r0, r2, #30
    X->n = 0;
 c0265bc:	e9cd 1303 	strd	r1, r3, [sp, #12]
    X->p = NULL;
 c0265c0:	9305      	str	r3, [sp, #20]
    n = BITS_TO_LIMBS( nbits );
 c0265c2:	eb07 1754 	add.w	r7, r7, r4, lsr #5
    if( ( flags & MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR ) == 0 )
 c0265c6:	f100 8091 	bmi.w	c0266ec <mbedtls_mpi_gen_prime+0x158>
    {
        /*
         * 2^-80 error probability, number of rounds chosen per HAC, table 4.4
         */
        rounds = ( ( nbits >= 1300 ) ?  2 : ( nbits >=  850 ) ?  3 :
 c0265ca:	f240 5313 	movw	r3, #1299	; 0x513
 c0265ce:	429c      	cmp	r4, r3
 c0265d0:	f200 80a9 	bhi.w	c026726 <mbedtls_mpi_gen_prime+0x192>
 c0265d4:	f240 3351 	movw	r3, #849	; 0x351
 c0265d8:	429c      	cmp	r4, r3
 c0265da:	f200 80a6 	bhi.w	c02672a <mbedtls_mpi_gen_prime+0x196>
                   ( nbits >=  650 ) ?  4 : ( nbits >=  350 ) ?  8 :
 c0265de:	f240 2389 	movw	r3, #649	; 0x289
 c0265e2:	429c      	cmp	r4, r3
 c0265e4:	f200 80a5 	bhi.w	c026732 <mbedtls_mpi_gen_prime+0x19e>
 c0265e8:	f5b4 7faf 	cmp.w	r4, #350	; 0x15e
 c0265ec:	f080 80a9 	bcs.w	c026742 <mbedtls_mpi_gen_prime+0x1ae>
                   ( nbits >=  250 ) ? 12 : ( nbits >=  150 ) ? 18 : 27 );
 c0265f0:	2cf9      	cmp	r4, #249	; 0xf9
 c0265f2:	f200 809c 	bhi.w	c02672e <mbedtls_mpi_gen_prime+0x19a>
 c0265f6:	2c95      	cmp	r4, #149	; 0x95
 c0265f8:	bf8c      	ite	hi
 c0265fa:	2512      	movhi	r5, #18
 c0265fc:	251b      	movls	r5, #27
                   ( nbits >=  250 ) ? 28 : ( nbits >=   150 ) ? 40 : 51 );
    }

    while( 1 )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( X, n * ciL, f_rng, p_rng ) );
 c0265fe:	ea4f 0a87 	mov.w	sl, r7, lsl #2

        k = n * biL;
        if( k > nbits ) MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( X, k - nbits ) );
        X->p[0] |= 1;

        if( ( flags & MBEDTLS_MPI_GEN_PRIME_FLAG_DH ) == 0 )
 c026602:	f002 0301 	and.w	r3, r2, #1
        k = n * biL;
 c026606:	017f      	lsls	r7, r7, #5
        if( X->p[n-1] < CEIL_MAXUINT_DIV_SQRT2 ) continue;
 c026608:	f1aa 0904 	sub.w	r9, sl, #4
        if( k > nbits ) MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( X, k - nbits ) );
 c02660c:	eba7 0b04 	sub.w	fp, r7, r4
        if( ( flags & MBEDTLS_MPI_GEN_PRIME_FLAG_DH ) == 0 )
 c026610:	9301      	str	r3, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( X, n * ciL, f_rng, p_rng ) );
 c026612:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c026614:	4642      	mov	r2, r8
 c026616:	4651      	mov	r1, sl
 c026618:	4630      	mov	r0, r6
 c02661a:	f7ff fd44 	bl	c0260a6 <mbedtls_mpi_fill_random>
 c02661e:	4603      	mov	r3, r0
 c026620:	2800      	cmp	r0, #0
 c026622:	f040 809c 	bne.w	c02675e <mbedtls_mpi_gen_prime+0x1ca>
        if( X->p[n-1] < CEIL_MAXUINT_DIV_SQRT2 ) continue;
 c026626:	68b3      	ldr	r3, [r6, #8]
 c026628:	4a5b      	ldr	r2, [pc, #364]	; (c026798 <mbedtls_mpi_gen_prime+0x204>)
 c02662a:	f853 3009 	ldr.w	r3, [r3, r9]
 c02662e:	4293      	cmp	r3, r2
 c026630:	d9ef      	bls.n	c026612 <mbedtls_mpi_gen_prime+0x7e>
        if( k > nbits ) MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( X, k - nbits ) );
 c026632:	42bc      	cmp	r4, r7
 c026634:	f0c0 808b 	bcc.w	c02674e <mbedtls_mpi_gen_prime+0x1ba>
        X->p[0] |= 1;
 c026638:	68b2      	ldr	r2, [r6, #8]
 c02663a:	6813      	ldr	r3, [r2, #0]
 c02663c:	f043 0101 	orr.w	r1, r3, #1
 c026640:	6011      	str	r1, [r2, #0]
        if( ( flags & MBEDTLS_MPI_GEN_PRIME_FLAG_DH ) == 0 )
 c026642:	9901      	ldr	r1, [sp, #4]
 c026644:	2900      	cmp	r1, #0
 c026646:	f000 8093 	beq.w	c026770 <mbedtls_mpi_gen_prime+0x1dc>
             * An necessary condition for Y and X = 2Y + 1 to be prime
             * is X = 2 mod 3 (which is equivalent to Y = 2 mod 3).
             * Make sure it is satisfied, while keeping X = 3 mod 4
             */

            X->p[0] |= 2;
 c02664a:	f043 0303 	orr.w	r3, r3, #3
 c02664e:	6013      	str	r3, [r2, #0]
 c026650:	4631      	mov	r1, r6
 c026652:	2203      	movs	r2, #3
 c026654:	a802      	add	r0, sp, #8
 c026656:	f7fe fa6f 	bl	c024b38 <mbedtls_mpi_mod_int.part.5>

            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, 3 ) );
 c02665a:	4603      	mov	r3, r0
 c02665c:	2800      	cmp	r0, #0
 c02665e:	d17e      	bne.n	c02675e <mbedtls_mpi_gen_prime+0x1ca>
            if( r == 0 )
 c026660:	9b02      	ldr	r3, [sp, #8]
 c026662:	2b00      	cmp	r3, #0
 c026664:	f040 8090 	bne.w	c026788 <mbedtls_mpi_gen_prime+0x1f4>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 8 ) );
 c026668:	2208      	movs	r2, #8
 c02666a:	4631      	mov	r1, r6
 c02666c:	4630      	mov	r0, r6
 c02666e:	f7fe ff01 	bl	c025474 <mbedtls_mpi_add_int>
 c026672:	4603      	mov	r3, r0
 c026674:	2800      	cmp	r0, #0
 c026676:	d172      	bne.n	c02675e <mbedtls_mpi_gen_prime+0x1ca>
            else if( r == 1 )
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 4 ) );

            /* Set Y = (X-1) / 2, which is X / 2 because X is odd */
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, X ) );
 c026678:	4631      	mov	r1, r6
 c02667a:	a803      	add	r0, sp, #12
 c02667c:	f7fe faba 	bl	c024bf4 <mbedtls_mpi_copy>
 c026680:	4603      	mov	r3, r0
 c026682:	2800      	cmp	r0, #0
 c026684:	d16b      	bne.n	c02675e <mbedtls_mpi_gen_prime+0x1ca>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, 1 ) );
 c026686:	2101      	movs	r1, #1
 c026688:	a803      	add	r0, sp, #12
 c02668a:	f7fe fce9 	bl	c025060 <mbedtls_mpi_shift_r>
 c02668e:	4603      	mov	r3, r0
 c026690:	2800      	cmp	r0, #0
 c026692:	d164      	bne.n	c02675e <mbedtls_mpi_gen_prime+0x1ca>
            {
                /*
                 * First, check small factors for X and Y
                 * before doing Miller-Rabin on any of them
                 */
                if( ( ret = mpi_check_small_factors(  X         ) ) == 0 &&
 c026694:	4630      	mov	r0, r6
 c026696:	f7ff fa25 	bl	c025ae4 <mpi_check_small_factors>
 c02669a:	4603      	mov	r3, r0
 c02669c:	b9a8      	cbnz	r0, c0266ca <mbedtls_mpi_gen_prime+0x136>
 c02669e:	a803      	add	r0, sp, #12
 c0266a0:	f7ff fa20 	bl	c025ae4 <mpi_check_small_factors>
 c0266a4:	4603      	mov	r3, r0
 c0266a6:	b980      	cbnz	r0, c0266ca <mbedtls_mpi_gen_prime+0x136>
                    ( ret = mpi_check_small_factors( &Y         ) ) == 0 &&
 c0266a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c0266aa:	4642      	mov	r2, r8
 c0266ac:	4629      	mov	r1, r5
 c0266ae:	4630      	mov	r0, r6
 c0266b0:	f7ff fd2e 	bl	c026110 <mpi_miller_rabin>
 c0266b4:	4603      	mov	r3, r0
 c0266b6:	b940      	cbnz	r0, c0266ca <mbedtls_mpi_gen_prime+0x136>
                    ( ret = mpi_miller_rabin(  X, rounds, f_rng, p_rng  ) )
                                                                    == 0 &&
 c0266b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c0266ba:	4642      	mov	r2, r8
 c0266bc:	4629      	mov	r1, r5
 c0266be:	a803      	add	r0, sp, #12
 c0266c0:	f7ff fd26 	bl	c026110 <mpi_miller_rabin>
 c0266c4:	4603      	mov	r3, r0
 c0266c6:	2800      	cmp	r0, #0
 c0266c8:	d049      	beq.n	c02675e <mbedtls_mpi_gen_prime+0x1ca>
                    ( ret = mpi_miller_rabin( &Y, rounds, f_rng, p_rng  ) )
                                                                    == 0 )
                    goto cleanup;

                if( ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )
 c0266ca:	f113 0f0e 	cmn.w	r3, #14
 c0266ce:	d146      	bne.n	c02675e <mbedtls_mpi_gen_prime+0x1ca>
                /*
                 * Next candidates. We want to preserve Y = (X-1) / 2 and
                 * Y = 1 mod 2 and Y = 2 mod 3 (eq X = 3 mod 4 and X = 2 mod 3)
                 * so up Y by 6 and X by 12.
                 */
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int(  X,  X, 12 ) );
 c0266d0:	220c      	movs	r2, #12
 c0266d2:	4631      	mov	r1, r6
 c0266d4:	4630      	mov	r0, r6
 c0266d6:	f7fe fecd 	bl	c025474 <mbedtls_mpi_add_int>
 c0266da:	4603      	mov	r3, r0
 c0266dc:	2800      	cmp	r0, #0
 c0266de:	d13e      	bne.n	c02675e <mbedtls_mpi_gen_prime+0x1ca>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &Y, &Y, 6  ) );
 c0266e0:	a903      	add	r1, sp, #12
 c0266e2:	2206      	movs	r2, #6
 c0266e4:	4608      	mov	r0, r1
 c0266e6:	f7fe fec5 	bl	c025474 <mbedtls_mpi_add_int>
 c0266ea:	e7d0      	b.n	c02668e <mbedtls_mpi_gen_prime+0xfa>
        rounds = ( ( nbits >= 1450 ) ?  4 : ( nbits >=  1150 ) ?  5 :
 c0266ec:	f240 53a9 	movw	r3, #1449	; 0x5a9
 c0266f0:	429c      	cmp	r4, r3
 c0266f2:	d81e      	bhi.n	c026732 <mbedtls_mpi_gen_prime+0x19e>
 c0266f4:	f240 437d 	movw	r3, #1149	; 0x47d
 c0266f8:	429c      	cmp	r4, r3
 c0266fa:	d81c      	bhi.n	c026736 <mbedtls_mpi_gen_prime+0x1a2>
                   ( nbits >= 1000 ) ?  6 : ( nbits >=   850 ) ?  7 :
 c0266fc:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 c026700:	d21b      	bcs.n	c02673a <mbedtls_mpi_gen_prime+0x1a6>
 c026702:	f240 3351 	movw	r3, #849	; 0x351
 c026706:	429c      	cmp	r4, r3
 c026708:	d819      	bhi.n	c02673e <mbedtls_mpi_gen_prime+0x1aa>
                   ( nbits >=  750 ) ?  8 : ( nbits >=   500 ) ? 13 :
 c02670a:	f240 23ed 	movw	r3, #749	; 0x2ed
 c02670e:	429c      	cmp	r4, r3
 c026710:	d817      	bhi.n	c026742 <mbedtls_mpi_gen_prime+0x1ae>
 c026712:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 c026716:	d216      	bcs.n	c026746 <mbedtls_mpi_gen_prime+0x1b2>
                   ( nbits >=  250 ) ? 28 : ( nbits >=   150 ) ? 40 : 51 );
 c026718:	2cf9      	cmp	r4, #249	; 0xf9
 c02671a:	d816      	bhi.n	c02674a <mbedtls_mpi_gen_prime+0x1b6>
 c02671c:	2c95      	cmp	r4, #149	; 0x95
 c02671e:	bf8c      	ite	hi
 c026720:	2528      	movhi	r5, #40	; 0x28
 c026722:	2533      	movls	r5, #51	; 0x33
 c026724:	e76b      	b.n	c0265fe <mbedtls_mpi_gen_prime+0x6a>
        rounds = ( ( nbits >= 1300 ) ?  2 : ( nbits >=  850 ) ?  3 :
 c026726:	2502      	movs	r5, #2
 c026728:	e769      	b.n	c0265fe <mbedtls_mpi_gen_prime+0x6a>
 c02672a:	2503      	movs	r5, #3
 c02672c:	e767      	b.n	c0265fe <mbedtls_mpi_gen_prime+0x6a>
                   ( nbits >=  250 ) ? 12 : ( nbits >=  150 ) ? 18 : 27 );
 c02672e:	250c      	movs	r5, #12
 c026730:	e765      	b.n	c0265fe <mbedtls_mpi_gen_prime+0x6a>
                   ( nbits >=  650 ) ?  4 : ( nbits >=  350 ) ?  8 :
 c026732:	2504      	movs	r5, #4
 c026734:	e763      	b.n	c0265fe <mbedtls_mpi_gen_prime+0x6a>
        rounds = ( ( nbits >= 1450 ) ?  4 : ( nbits >=  1150 ) ?  5 :
 c026736:	2505      	movs	r5, #5
 c026738:	e761      	b.n	c0265fe <mbedtls_mpi_gen_prime+0x6a>
                   ( nbits >= 1000 ) ?  6 : ( nbits >=   850 ) ?  7 :
 c02673a:	2506      	movs	r5, #6
 c02673c:	e75f      	b.n	c0265fe <mbedtls_mpi_gen_prime+0x6a>
 c02673e:	2507      	movs	r5, #7
 c026740:	e75d      	b.n	c0265fe <mbedtls_mpi_gen_prime+0x6a>
                   ( nbits >=  650 ) ?  4 : ( nbits >=  350 ) ?  8 :
 c026742:	2508      	movs	r5, #8
 c026744:	e75b      	b.n	c0265fe <mbedtls_mpi_gen_prime+0x6a>
                   ( nbits >=  750 ) ?  8 : ( nbits >=   500 ) ? 13 :
 c026746:	250d      	movs	r5, #13
 c026748:	e759      	b.n	c0265fe <mbedtls_mpi_gen_prime+0x6a>
                   ( nbits >=  250 ) ? 28 : ( nbits >=   150 ) ? 40 : 51 );
 c02674a:	251c      	movs	r5, #28
 c02674c:	e757      	b.n	c0265fe <mbedtls_mpi_gen_prime+0x6a>
        if( k > nbits ) MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( X, k - nbits ) );
 c02674e:	4659      	mov	r1, fp
 c026750:	4630      	mov	r0, r6
 c026752:	f7fe fc85 	bl	c025060 <mbedtls_mpi_shift_r>
 c026756:	4603      	mov	r3, r0
 c026758:	2800      	cmp	r0, #0
 c02675a:	f43f af6d 	beq.w	c026638 <mbedtls_mpi_gen_prime+0xa4>
        }
    }

cleanup:

    mbedtls_mpi_free( &Y );
 c02675e:	a803      	add	r0, sp, #12
 c026760:	9301      	str	r3, [sp, #4]
 c026762:	f7fe fa0f 	bl	c024b84 <mbedtls_mpi_free>

    return( ret );
 c026766:	9b01      	ldr	r3, [sp, #4]
}
 c026768:	4618      	mov	r0, r3
 c02676a:	b007      	add	sp, #28
 c02676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = mbedtls_mpi_is_prime_ext( X, rounds, f_rng, p_rng );
 c026770:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c026772:	4642      	mov	r2, r8
 c026774:	4629      	mov	r1, r5
 c026776:	4630      	mov	r0, r6
 c026778:	f7ff fede 	bl	c026538 <mbedtls_mpi_is_prime_ext>
            if( ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )
 c02677c:	f110 0f0e 	cmn.w	r0, #14
            ret = mbedtls_mpi_is_prime_ext( X, rounds, f_rng, p_rng );
 c026780:	4603      	mov	r3, r0
            if( ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )
 c026782:	f43f af46 	beq.w	c026612 <mbedtls_mpi_gen_prime+0x7e>
 c026786:	e7ea      	b.n	c02675e <mbedtls_mpi_gen_prime+0x1ca>
            else if( r == 1 )
 c026788:	2b01      	cmp	r3, #1
 c02678a:	f47f af75 	bne.w	c026678 <mbedtls_mpi_gen_prime+0xe4>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 4 ) );
 c02678e:	2204      	movs	r2, #4
 c026790:	e76b      	b.n	c02666a <mbedtls_mpi_gen_prime+0xd6>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c026792:	f06f 0303 	mvn.w	r3, #3
 c026796:	e7e7      	b.n	c026768 <mbedtls_mpi_gen_prime+0x1d4>
 c026798:	b504f333 	.word	0xb504f333

0c02679c <add_pkcs_padding>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding( unsigned char *output, size_t output_len,
        size_t data_len )
{
 c02679c:	b510      	push	{r4, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 c02679e:	2400      	movs	r4, #0
    size_t padding_len = output_len - data_len;
 c0267a0:	1a89      	subs	r1, r1, r2
 c0267a2:	b2e3      	uxtb	r3, r4
    for( i = 0; i < padding_len; i++ )
 c0267a4:	4299      	cmp	r1, r3
 c0267a6:	f104 0401 	add.w	r4, r4, #1
 c0267aa:	d800      	bhi.n	c0267ae <add_pkcs_padding+0x12>
        output[data_len + i] = (unsigned char) padding_len;
}
 c0267ac:	bd10      	pop	{r4, pc}
        output[data_len + i] = (unsigned char) padding_len;
 c0267ae:	4403      	add	r3, r0
 c0267b0:	5499      	strb	r1, [r3, r2]
 c0267b2:	e7f6      	b.n	c0267a2 <add_pkcs_padding+0x6>

0c0267b4 <get_pkcs_padding>:

static int get_pkcs_padding( unsigned char *input, size_t input_len,
        size_t *data_len )
{
 c0267b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 c0267b6:	b300      	cbz	r0, c0267fa <get_pkcs_padding+0x46>
 c0267b8:	b1fa      	cbz	r2, c0267fa <get_pkcs_padding+0x46>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 c0267ba:	1843      	adds	r3, r0, r1
 c0267bc:	f813 5c01 	ldrb.w	r5, [r3, #-1]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 c0267c0:	fab5 f385 	clz	r3, r5
    *data_len = input_len - padding_len;
 c0267c4:	1b4e      	subs	r6, r1, r5
    bad |= padding_len == 0;
 c0267c6:	095b      	lsrs	r3, r3, #5
    *data_len = input_len - padding_len;
 c0267c8:	6016      	str	r6, [r2, #0]
    bad |= padding_len == 0;
 c0267ca:	428d      	cmp	r5, r1
 c0267cc:	bf88      	it	hi
 c0267ce:	f043 0301 	orrhi.w	r3, r3, #1

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 c0267d2:	2200      	movs	r2, #0
 c0267d4:	428a      	cmp	r2, r1
 c0267d6:	d104      	bne.n	c0267e2 <get_pkcs_padding+0x2e>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 c0267d8:	2b00      	cmp	r3, #0
 c0267da:	4809      	ldr	r0, [pc, #36]	; (c026800 <get_pkcs_padding+0x4c>)
 c0267dc:	bf08      	it	eq
 c0267de:	2000      	moveq	r0, #0
}
 c0267e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 c0267e2:	4296      	cmp	r6, r2
 c0267e4:	bf8c      	ite	hi
 c0267e6:	2700      	movhi	r7, #0
 c0267e8:	2701      	movls	r7, #1
 c0267ea:	5c84      	ldrb	r4, [r0, r2]
    for( i = 0; i < input_len; i++ )
 c0267ec:	3201      	adds	r2, #1
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 c0267ee:	406c      	eors	r4, r5
 c0267f0:	fb14 f407 	smulbb	r4, r4, r7
 c0267f4:	4323      	orrs	r3, r4
 c0267f6:	b2db      	uxtb	r3, r3
 c0267f8:	e7ec      	b.n	c0267d4 <get_pkcs_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c0267fa:	4802      	ldr	r0, [pc, #8]	; (c026804 <get_pkcs_padding+0x50>)
 c0267fc:	e7f0      	b.n	c0267e0 <get_pkcs_padding+0x2c>
 c0267fe:	bf00      	nop
 c026800:	ffff9e00 	.word	0xffff9e00
 c026804:	ffff9f00 	.word	0xffff9f00

0c026808 <add_one_and_zeros_padding>:
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 c026808:	2380      	movs	r3, #128	; 0x80
{
 c02680a:	b530      	push	{r4, r5, lr}
    output[data_len] = 0x80;
 c02680c:	5483      	strb	r3, [r0, r2]
    for( i = 1; i < padding_len; i++ )
        output[data_len + i] = 0x00;
 c02680e:	2400      	movs	r4, #0
    for( i = 1; i < padding_len; i++ )
 c026810:	2301      	movs	r3, #1
    size_t padding_len = output_len - data_len;
 c026812:	1a89      	subs	r1, r1, r2
    for( i = 1; i < padding_len; i++ )
 c026814:	428b      	cmp	r3, r1
 c026816:	d300      	bcc.n	c02681a <add_one_and_zeros_padding+0x12>
}
 c026818:	bd30      	pop	{r4, r5, pc}
        output[data_len + i] = 0x00;
 c02681a:	18c5      	adds	r5, r0, r3
    for( i = 1; i < padding_len; i++ )
 c02681c:	3301      	adds	r3, #1
        output[data_len + i] = 0x00;
 c02681e:	54ac      	strb	r4, [r5, r2]
    for( i = 1; i < padding_len; i++ )
 c026820:	b2db      	uxtb	r3, r3
 c026822:	e7f7      	b.n	c026814 <add_one_and_zeros_padding+0xc>

0c026824 <add_zeros_and_len_padding>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 c026824:	b570      	push	{r4, r5, r6, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 c026826:	2301      	movs	r3, #1
        output[data_len + i - 1] = 0x00;
 c026828:	2600      	movs	r6, #0
    size_t padding_len = output_len - data_len;
 c02682a:	1a8d      	subs	r5, r1, r2
    for( i = 1; i < padding_len; i++ )
 c02682c:	42ab      	cmp	r3, r5
 c02682e:	d303      	bcc.n	c026838 <add_zeros_and_len_padding+0x14>
    output[output_len - 1] = (unsigned char) padding_len;
 c026830:	4408      	add	r0, r1
 c026832:	f800 5c01 	strb.w	r5, [r0, #-1]
}
 c026836:	bd70      	pop	{r4, r5, r6, pc}
        output[data_len + i - 1] = 0x00;
 c026838:	18c4      	adds	r4, r0, r3
 c02683a:	4414      	add	r4, r2
    for( i = 1; i < padding_len; i++ )
 c02683c:	3301      	adds	r3, #1
        output[data_len + i - 1] = 0x00;
 c02683e:	f804 6c01 	strb.w	r6, [r4, #-1]
    for( i = 1; i < padding_len; i++ )
 c026842:	b2db      	uxtb	r3, r3
 c026844:	e7f2      	b.n	c02682c <add_zeros_and_len_padding+0x8>
	...

0c026848 <get_zeros_and_len_padding>:

static int get_zeros_and_len_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 c026848:	b570      	push	{r4, r5, r6, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 c02684a:	b1f8      	cbz	r0, c02688c <get_zeros_and_len_padding+0x44>
 c02684c:	b1f2      	cbz	r2, c02688c <get_zeros_and_len_padding+0x44>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 c02684e:	1e4d      	subs	r5, r1, #1
 c026850:	5d44      	ldrb	r4, [r0, r5]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 c026852:	fab4 f384 	clz	r3, r4
 c026856:	095b      	lsrs	r3, r3, #5
    *data_len = input_len - padding_len;
 c026858:	1b0e      	subs	r6, r1, r4
    bad |= padding_len == 0;
 c02685a:	428c      	cmp	r4, r1
 c02685c:	bf94      	ite	ls
 c02685e:	4619      	movls	r1, r3
 c026860:	f043 0101 	orrhi.w	r1, r3, #1

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 c026864:	2300      	movs	r3, #0
    *data_len = input_len - padding_len;
 c026866:	6016      	str	r6, [r2, #0]
    for( i = 0; i < input_len - 1; i++ )
 c026868:	429d      	cmp	r5, r3
 c02686a:	d804      	bhi.n	c026876 <get_zeros_and_len_padding+0x2e>
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 c02686c:	2900      	cmp	r1, #0
 c02686e:	4808      	ldr	r0, [pc, #32]	; (c026890 <get_zeros_and_len_padding+0x48>)
 c026870:	bf08      	it	eq
 c026872:	2000      	moveq	r0, #0
}
 c026874:	bd70      	pop	{r4, r5, r6, pc}
        bad |= input[i] * ( i >= pad_idx );
 c026876:	429e      	cmp	r6, r3
 c026878:	bf8c      	ite	hi
 c02687a:	2400      	movhi	r4, #0
 c02687c:	2401      	movls	r4, #1
 c02687e:	5cc2      	ldrb	r2, [r0, r3]
    for( i = 0; i < input_len - 1; i++ )
 c026880:	3301      	adds	r3, #1
        bad |= input[i] * ( i >= pad_idx );
 c026882:	fb12 f204 	smulbb	r2, r2, r4
 c026886:	4311      	orrs	r1, r2
 c026888:	b2c9      	uxtb	r1, r1
 c02688a:	e7ed      	b.n	c026868 <get_zeros_and_len_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c02688c:	4801      	ldr	r0, [pc, #4]	; (c026894 <get_zeros_and_len_padding+0x4c>)
 c02688e:	e7f1      	b.n	c026874 <get_zeros_and_len_padding+0x2c>
 c026890:	ffff9e00 	.word	0xffff9e00
 c026894:	ffff9f00 	.word	0xffff9f00

0c026898 <add_zeros_padding>:
/*
 * Zero padding: fill with 00 ... 00
 */
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
 c026898:	b510      	push	{r4, lr}
    size_t i;

    for( i = data_len; i < output_len; i++ )
        output[i] = 0x00;
 c02689a:	2400      	movs	r4, #0
 c02689c:	4402      	add	r2, r0
    for( i = data_len; i < output_len; i++ )
 c02689e:	1a13      	subs	r3, r2, r0
 c0268a0:	4299      	cmp	r1, r3
 c0268a2:	d800      	bhi.n	c0268a6 <add_zeros_padding+0xe>
}
 c0268a4:	bd10      	pop	{r4, pc}
        output[i] = 0x00;
 c0268a6:	f802 4b01 	strb.w	r4, [r2], #1
 c0268aa:	e7f8      	b.n	c02689e <add_zeros_padding+0x6>

0c0268ac <get_no_padding>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 c0268ac:	b118      	cbz	r0, c0268b6 <get_no_padding+0xa>
 c0268ae:	b112      	cbz	r2, c0268b6 <get_no_padding+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 c0268b0:	6011      	str	r1, [r2, #0]

    return( 0 );
 c0268b2:	2000      	movs	r0, #0
 c0268b4:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c0268b6:	4801      	ldr	r0, [pc, #4]	; (c0268bc <get_no_padding+0x10>)
}
 c0268b8:	4770      	bx	lr
 c0268ba:	bf00      	nop
 c0268bc:	ffff9f00 	.word	0xffff9f00

0c0268c0 <get_one_and_zeros_padding>:
{
 c0268c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( NULL == input || NULL == data_len )
 c0268c2:	b1f8      	cbz	r0, c026904 <get_one_and_zeros_padding+0x44>
 c0268c4:	b1f2      	cbz	r2, c026904 <get_one_and_zeros_padding+0x44>
    *data_len = 0;
 c0268c6:	2300      	movs	r3, #0
    bad = 0x80;
 c0268c8:	2480      	movs	r4, #128	; 0x80
    *data_len = 0;
 c0268ca:	6013      	str	r3, [r2, #0]
 c0268cc:	4408      	add	r0, r1
    for( i = input_len; i > 0; i-- )
 c0268ce:	b921      	cbnz	r1, c0268da <get_one_and_zeros_padding+0x1a>
    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 c0268d0:	2c00      	cmp	r4, #0
 c0268d2:	480d      	ldr	r0, [pc, #52]	; (c026908 <get_one_and_zeros_padding+0x48>)
 c0268d4:	bf08      	it	eq
 c0268d6:	2000      	moveq	r0, #0
}
 c0268d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        done |= ( input[i - 1] != 0 );
 c0268da:	f810 5d01 	ldrb.w	r5, [r0, #-1]!
 c0268de:	3901      	subs	r1, #1
 c0268e0:	2d00      	cmp	r5, #0
 c0268e2:	bf0c      	ite	eq
 c0268e4:	461d      	moveq	r5, r3
 c0268e6:	f043 0501 	orrne.w	r5, r3, #1
 c0268ea:	406b      	eors	r3, r5
        *data_len |= ( i - 1 ) * ( done != prev_done );
 c0268ec:	fb01 f703 	mul.w	r7, r1, r3
 c0268f0:	6816      	ldr	r6, [r2, #0]
 c0268f2:	433e      	orrs	r6, r7
 c0268f4:	6016      	str	r6, [r2, #0]
        bad ^= input[i - 1] * ( done != prev_done );
 c0268f6:	7806      	ldrb	r6, [r0, #0]
 c0268f8:	fb16 f303 	smulbb	r3, r6, r3
 c0268fc:	405c      	eors	r4, r3
 c0268fe:	b2e4      	uxtb	r4, r4
        done |= ( input[i - 1] != 0 );
 c026900:	462b      	mov	r3, r5
 c026902:	e7e4      	b.n	c0268ce <get_one_and_zeros_padding+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c026904:	4801      	ldr	r0, [pc, #4]	; (c02690c <get_one_and_zeros_padding+0x4c>)
 c026906:	e7e7      	b.n	c0268d8 <get_one_and_zeros_padding+0x18>
 c026908:	ffff9e00 	.word	0xffff9e00
 c02690c:	ffff9f00 	.word	0xffff9f00

0c026910 <get_zeros_padding>:
{
 c026910:	b530      	push	{r4, r5, lr}
    if( NULL == input || NULL == data_len )
 c026912:	b1b8      	cbz	r0, c026944 <get_zeros_padding+0x34>
 c026914:	b1b2      	cbz	r2, c026944 <get_zeros_padding+0x34>
    *data_len = 0;
 c026916:	2300      	movs	r3, #0
 c026918:	4401      	add	r1, r0
 c02691a:	6013      	str	r3, [r2, #0]
    for( i = input_len; i > 0; i-- )
 c02691c:	4281      	cmp	r1, r0
 c02691e:	eba1 0500 	sub.w	r5, r1, r0
 c026922:	d101      	bne.n	c026928 <get_zeros_padding+0x18>
 c026924:	2000      	movs	r0, #0
}
 c026926:	bd30      	pop	{r4, r5, pc}
        done |= ( input[i-1] != 0 );
 c026928:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 c02692c:	2c00      	cmp	r4, #0
 c02692e:	bf0c      	ite	eq
 c026930:	461c      	moveq	r4, r3
 c026932:	f043 0401 	orrne.w	r4, r3, #1
        *data_len |= i * ( done != prev_done );
 c026936:	4063      	eors	r3, r4
 c026938:	436b      	muls	r3, r5
 c02693a:	6815      	ldr	r5, [r2, #0]
 c02693c:	432b      	orrs	r3, r5
 c02693e:	6013      	str	r3, [r2, #0]
        done |= ( input[i-1] != 0 );
 c026940:	4623      	mov	r3, r4
 c026942:	e7eb      	b.n	c02691c <get_zeros_padding+0xc>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c026944:	4800      	ldr	r0, [pc, #0]	; (c026948 <get_zeros_padding+0x38>)
 c026946:	e7ee      	b.n	c026926 <get_zeros_padding+0x16>
 c026948:	ffff9f00 	.word	0xffff9f00

0c02694c <mbedtls_cipher_info_from_type>:
{
 c02694c:	4b05      	ldr	r3, [pc, #20]	; (c026964 <mbedtls_cipher_info_from_type+0x18>)
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 c02694e:	f853 2c04 	ldr.w	r2, [r3, #-4]
 c026952:	b122      	cbz	r2, c02695e <mbedtls_cipher_info_from_type+0x12>
 c026954:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 c026956:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 c02695a:	4281      	cmp	r1, r0
 c02695c:	d1f7      	bne.n	c02694e <mbedtls_cipher_info_from_type+0x2>
}
 c02695e:	4610      	mov	r0, r2
 c026960:	4770      	bx	lr
 c026962:	bf00      	nop
 c026964:	0c0356c0 	.word	0x0c0356c0

0c026968 <mbedtls_cipher_info_from_values>:
{
 c026968:	b530      	push	{r4, r5, lr}
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 c02696a:	4c08      	ldr	r4, [pc, #32]	; (c02698c <mbedtls_cipher_info_from_values+0x24>)
 c02696c:	6863      	ldr	r3, [r4, #4]
 c02696e:	b90b      	cbnz	r3, c026974 <mbedtls_cipher_info_from_values+0xc>
}
 c026970:	4618      	mov	r0, r3
 c026972:	bd30      	pop	{r4, r5, pc}
        if( def->info->base->cipher == cipher_id &&
 c026974:	699d      	ldr	r5, [r3, #24]
 c026976:	782d      	ldrb	r5, [r5, #0]
 c026978:	4285      	cmp	r5, r0
 c02697a:	d105      	bne.n	c026988 <mbedtls_cipher_info_from_values+0x20>
 c02697c:	685d      	ldr	r5, [r3, #4]
 c02697e:	428d      	cmp	r5, r1
 c026980:	d102      	bne.n	c026988 <mbedtls_cipher_info_from_values+0x20>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 c026982:	785d      	ldrb	r5, [r3, #1]
 c026984:	4295      	cmp	r5, r2
 c026986:	d0f3      	beq.n	c026970 <mbedtls_cipher_info_from_values+0x8>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 c026988:	3408      	adds	r4, #8
 c02698a:	e7ef      	b.n	c02696c <mbedtls_cipher_info_from_values+0x4>
 c02698c:	0c0356b8 	.word	0x0c0356b8

0c026990 <mbedtls_cipher_init>:
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 c026990:	2244      	movs	r2, #68	; 0x44
 c026992:	2100      	movs	r1, #0
 c026994:	f7f1 b817 	b.w	c0179c6 <memset>

0c026998 <mbedtls_cipher_free>:
{
 c026998:	b510      	push	{r4, lr}
    if( ctx == NULL )
 c02699a:	4604      	mov	r4, r0
 c02699c:	b198      	cbz	r0, c0269c6 <mbedtls_cipher_free+0x2e>
    if( ctx->cmac_ctx )
 c02699e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 c0269a0:	b128      	cbz	r0, c0269ae <mbedtls_cipher_free+0x16>
       mbedtls_platform_zeroize( ctx->cmac_ctx,
 c0269a2:	2124      	movs	r1, #36	; 0x24
 c0269a4:	f003 fc7c 	bl	c02a2a0 <mbedtls_platform_zeroize>
       mbedtls_free( ctx->cmac_ctx );
 c0269a8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 c0269aa:	f003 fc69 	bl	c02a280 <mbedtls_free>
    if( ctx->cipher_ctx )
 c0269ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c0269b0:	b118      	cbz	r0, c0269ba <mbedtls_cipher_free+0x22>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 c0269b2:	6823      	ldr	r3, [r4, #0]
 c0269b4:	699b      	ldr	r3, [r3, #24]
 c0269b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0269b8:	4798      	blx	r3
    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 c0269ba:	4620      	mov	r0, r4
}
 c0269bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 c0269c0:	2144      	movs	r1, #68	; 0x44
 c0269c2:	f003 bc6d 	b.w	c02a2a0 <mbedtls_platform_zeroize>
}
 c0269c6:	bd10      	pop	{r4, pc}

0c0269c8 <mbedtls_cipher_setkey>:
{
 c0269c8:	b430      	push	{r4, r5}
    if( ctx->cipher_info == NULL )
 c0269ca:	6804      	ldr	r4, [r0, #0]
 c0269cc:	b1b4      	cbz	r4, c0269fc <mbedtls_cipher_setkey+0x34>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 c0269ce:	6925      	ldr	r5, [r4, #16]
 c0269d0:	07ad      	lsls	r5, r5, #30
 c0269d2:	d402      	bmi.n	c0269da <mbedtls_cipher_setkey+0x12>
 c0269d4:	6865      	ldr	r5, [r4, #4]
 c0269d6:	4295      	cmp	r5, r2
 c0269d8:	d110      	bne.n	c0269fc <mbedtls_cipher_setkey+0x34>
    if( MBEDTLS_ENCRYPT == operation ||
 c0269da:	2b01      	cmp	r3, #1
    ctx->key_bitlen = key_bitlen;
 c0269dc:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 c0269de:	7203      	strb	r3, [r0, #8]
    if( MBEDTLS_ENCRYPT == operation ||
 c0269e0:	d003      	beq.n	c0269ea <mbedtls_cipher_setkey+0x22>
 c0269e2:	7865      	ldrb	r5, [r4, #1]
 c0269e4:	3d03      	subs	r5, #3
 c0269e6:	2d02      	cmp	r5, #2
 c0269e8:	d804      	bhi.n	c0269f4 <mbedtls_cipher_setkey+0x2c>
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 c0269ea:	69a3      	ldr	r3, [r4, #24]
 c0269ec:	699b      	ldr	r3, [r3, #24]
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 c0269ee:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 c0269f0:	bc30      	pop	{r4, r5}
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 c0269f2:	4718      	bx	r3
    if( MBEDTLS_DECRYPT == operation )
 c0269f4:	b913      	cbnz	r3, c0269fc <mbedtls_cipher_setkey+0x34>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 c0269f6:	69a3      	ldr	r3, [r4, #24]
 c0269f8:	69db      	ldr	r3, [r3, #28]
 c0269fa:	e7f8      	b.n	c0269ee <mbedtls_cipher_setkey+0x26>
}
 c0269fc:	4801      	ldr	r0, [pc, #4]	; (c026a04 <mbedtls_cipher_setkey+0x3c>)
 c0269fe:	bc30      	pop	{r4, r5}
 c026a00:	4770      	bx	lr
 c026a02:	bf00      	nop
 c026a04:	ffff9f00 	.word	0xffff9f00

0c026a08 <mbedtls_cipher_set_iv>:
{
 c026a08:	b538      	push	{r3, r4, r5, lr}
    if( ctx->cipher_info == NULL )
 c026a0a:	6803      	ldr	r3, [r0, #0]
{
 c026a0c:	4605      	mov	r5, r0
 c026a0e:	4614      	mov	r4, r2
    if( ctx->cipher_info == NULL )
 c026a10:	b19b      	cbz	r3, c026a3a <mbedtls_cipher_set_iv+0x32>
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 c026a12:	2a10      	cmp	r2, #16
 c026a14:	d80f      	bhi.n	c026a36 <mbedtls_cipher_set_iv+0x2e>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 c026a16:	691a      	ldr	r2, [r3, #16]
 c026a18:	07d2      	lsls	r2, r2, #31
 c026a1a:	d403      	bmi.n	c026a24 <mbedtls_cipher_set_iv+0x1c>
        actual_iv_size = ctx->cipher_info->iv_size;
 c026a1c:	68db      	ldr	r3, [r3, #12]
        if( actual_iv_size > iv_len )
 c026a1e:	429c      	cmp	r4, r3
 c026a20:	d30b      	bcc.n	c026a3a <mbedtls_cipher_set_iv+0x32>
 c026a22:	461c      	mov	r4, r3
    if ( actual_iv_size != 0 )
 c026a24:	b15c      	cbz	r4, c026a3e <mbedtls_cipher_set_iv+0x36>
        memcpy( ctx->iv, iv, actual_iv_size );
 c026a26:	4622      	mov	r2, r4
 c026a28:	f105 0028 	add.w	r0, r5, #40	; 0x28
 c026a2c:	f7f0 ffa7 	bl	c01797e <memcpy>
    return( 0 );
 c026a30:	2000      	movs	r0, #0
        ctx->iv_size = actual_iv_size;
 c026a32:	63ac      	str	r4, [r5, #56]	; 0x38
}
 c026a34:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 c026a36:	4803      	ldr	r0, [pc, #12]	; (c026a44 <mbedtls_cipher_set_iv+0x3c>)
 c026a38:	e7fc      	b.n	c026a34 <mbedtls_cipher_set_iv+0x2c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c026a3a:	4803      	ldr	r0, [pc, #12]	; (c026a48 <mbedtls_cipher_set_iv+0x40>)
 c026a3c:	e7fa      	b.n	c026a34 <mbedtls_cipher_set_iv+0x2c>
    return( 0 );
 c026a3e:	4620      	mov	r0, r4
 c026a40:	e7f8      	b.n	c026a34 <mbedtls_cipher_set_iv+0x2c>
 c026a42:	bf00      	nop
 c026a44:	ffff9f80 	.word	0xffff9f80
 c026a48:	ffff9f00 	.word	0xffff9f00

0c026a4c <mbedtls_cipher_reset>:
    if( ctx->cipher_info == NULL )
 c026a4c:	6803      	ldr	r3, [r0, #0]
 c026a4e:	b11b      	cbz	r3, c026a58 <mbedtls_cipher_reset+0xc>
    ctx->unprocessed_len = 0;
 c026a50:	2300      	movs	r3, #0
 c026a52:	6243      	str	r3, [r0, #36]	; 0x24
    return( 0 );
 c026a54:	4618      	mov	r0, r3
 c026a56:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c026a58:	4800      	ldr	r0, [pc, #0]	; (c026a5c <mbedtls_cipher_reset+0x10>)
}
 c026a5a:	4770      	bx	lr
 c026a5c:	ffff9f00 	.word	0xffff9f00

0c026a60 <mbedtls_cipher_update>:
{
 c026a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c026a64:	4615      	mov	r5, r2
    if( ctx->cipher_info == NULL )
 c026a66:	6802      	ldr	r2, [r0, #0]
{
 c026a68:	b085      	sub	sp, #20
 c026a6a:	4604      	mov	r4, r0
 c026a6c:	460f      	mov	r7, r1
 c026a6e:	4699      	mov	r9, r3
 c026a70:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if( ctx->cipher_info == NULL )
 c026a74:	b91a      	cbnz	r2, c026a7e <mbedtls_cipher_update+0x1e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c026a76:	486f      	ldr	r0, [pc, #444]	; (c026c34 <mbedtls_cipher_update+0x1d4>)
}
 c026a78:	b005      	add	sp, #20
 c026a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *olen = 0;
 c026a7e:	2100      	movs	r1, #0
 c026a80:	f8c8 1000 	str.w	r1, [r8]
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 c026a84:	7851      	ldrb	r1, [r2, #1]
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;

    return ctx->cipher_info->block_size;
 c026a86:	6956      	ldr	r6, [r2, #20]
 c026a88:	2901      	cmp	r1, #1
 c026a8a:	d10f      	bne.n	c026aac <mbedtls_cipher_update+0x4c>
        if( ilen != block_size )
 c026a8c:	42b5      	cmp	r5, r6
 c026a8e:	f040 80ca 	bne.w	c026c26 <mbedtls_cipher_update+0x1c6>
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 c026a92:	6992      	ldr	r2, [r2, #24]
        *olen = ilen;
 c026a94:	f8c8 5000 	str.w	r5, [r8]
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 c026a98:	6855      	ldr	r5, [r2, #4]
 c026a9a:	463a      	mov	r2, r7
 c026a9c:	46ac      	mov	ip, r5
 c026a9e:	f990 1008 	ldrsb.w	r1, [r0, #8]
 c026aa2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 c026aa4:	b005      	add	sp, #20
 c026aa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 c026aaa:	4760      	bx	ip
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 c026aac:	2906      	cmp	r1, #6
 c026aae:	d109      	bne.n	c026ac4 <mbedtls_cipher_update+0x64>
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 c026ab0:	463a      	mov	r2, r7
 c026ab2:	4629      	mov	r1, r5
 c026ab4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
        *olen = ilen;
 c026ab6:	f8c8 5000 	str.w	r5, [r8]
}
 c026aba:	b005      	add	sp, #20
 c026abc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 c026ac0:	f7f7 bfd6 	b.w	c01ea70 <mbedtls_gcm_update>
    if ( 0 == block_size )
 c026ac4:	2e00      	cmp	r6, #0
 c026ac6:	f000 80b0 	beq.w	c026c2a <mbedtls_cipher_update+0x1ca>
    if( input == output &&
 c026aca:	429f      	cmp	r7, r3
 c026acc:	d108      	bne.n	c026ae0 <mbedtls_cipher_update+0x80>
 c026ace:	6a43      	ldr	r3, [r0, #36]	; 0x24
 c026ad0:	2b00      	cmp	r3, #0
 c026ad2:	d1d0      	bne.n	c026a76 <mbedtls_cipher_update+0x16>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 c026ad4:	fbb5 f3f6 	udiv	r3, r5, r6
 c026ad8:	fb06 5313 	mls	r3, r6, r3, r5
 c026adc:	2b00      	cmp	r3, #0
 c026ade:	d1ca      	bne.n	c026a76 <mbedtls_cipher_update+0x16>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 c026ae0:	2902      	cmp	r1, #2
 c026ae2:	d16e      	bne.n	c026bc2 <mbedtls_cipher_update+0x162>
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 c026ae4:	f994 3008 	ldrsb.w	r3, [r4, #8]
 c026ae8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 c026aea:	b97b      	cbnz	r3, c026b0c <mbedtls_cipher_update+0xac>
 c026aec:	68e2      	ldr	r2, [r4, #12]
 c026aee:	1a33      	subs	r3, r6, r0
 c026af0:	b17a      	cbz	r2, c026b12 <mbedtls_cipher_update+0xb2>
 c026af2:	42ab      	cmp	r3, r5
 c026af4:	d30f      	bcc.n	c026b16 <mbedtls_cipher_update+0xb6>
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 c026af6:	3014      	adds	r0, #20
 c026af8:	462a      	mov	r2, r5
 c026afa:	4639      	mov	r1, r7
 c026afc:	4420      	add	r0, r4
 c026afe:	f7f0 ff3e 	bl	c01797e <memcpy>
            ctx->unprocessed_len += ilen;
 c026b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c026b04:	441d      	add	r5, r3
 c026b06:	6265      	str	r5, [r4, #36]	; 0x24
        return( 0 );
 c026b08:	2000      	movs	r0, #0
 c026b0a:	e7b5      	b.n	c026a78 <mbedtls_cipher_update+0x18>
                ilen < block_size - ctx->unprocessed_len ) ||
 c026b0c:	2b01      	cmp	r3, #1
 c026b0e:	d102      	bne.n	c026b16 <mbedtls_cipher_update+0xb6>
                ilen < block_size - ctx->unprocessed_len ) )
 c026b10:	1a33      	subs	r3, r6, r0
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 c026b12:	42ab      	cmp	r3, r5
 c026b14:	d8ef      	bhi.n	c026af6 <mbedtls_cipher_update+0x96>
        if( 0 != ctx->unprocessed_len )
 c026b16:	b310      	cbz	r0, c026b5e <mbedtls_cipher_update+0xfe>
            copy_len = block_size - ctx->unprocessed_len;
 c026b18:	eba6 0a00 	sub.w	sl, r6, r0
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 c026b1c:	3014      	adds	r0, #20
 c026b1e:	4652      	mov	r2, sl
 c026b20:	4639      	mov	r1, r7
 c026b22:	4420      	add	r0, r4
 c026b24:	f7f0 ff2b 	bl	c01797e <memcpy>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 c026b28:	4623      	mov	r3, r4
 c026b2a:	f853 2b14 	ldr.w	r2, [r3], #20
 c026b2e:	f994 1008 	ldrsb.w	r1, [r4, #8]
 c026b32:	6992      	ldr	r2, [r2, #24]
 c026b34:	e9cd 3900 	strd	r3, r9, [sp]
 c026b38:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c026b3a:	f8d2 b008 	ldr.w	fp, [r2, #8]
 c026b3e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 c026b42:	4632      	mov	r2, r6
 c026b44:	47d8      	blx	fp
 c026b46:	2800      	cmp	r0, #0
 c026b48:	d196      	bne.n	c026a78 <mbedtls_cipher_update+0x18>
            *olen += block_size;
 c026b4a:	f8d8 3000 	ldr.w	r3, [r8]
            output += block_size;
 c026b4e:	44b1      	add	r9, r6
            *olen += block_size;
 c026b50:	4433      	add	r3, r6
 c026b52:	f8c8 3000 	str.w	r3, [r8]
            input += copy_len;
 c026b56:	4457      	add	r7, sl
            ctx->unprocessed_len = 0;
 c026b58:	6260      	str	r0, [r4, #36]	; 0x24
            ilen -= copy_len;
 c026b5a:	eba5 050a 	sub.w	r5, r5, sl
        if( 0 != ilen )
 c026b5e:	2d00      	cmp	r5, #0
 c026b60:	d0d2      	beq.n	c026b08 <mbedtls_cipher_update+0xa8>
            copy_len = ilen % block_size;
 c026b62:	fbb5 faf6 	udiv	sl, r5, r6
 c026b66:	fb06 5a1a 	mls	sl, r6, sl, r5
            if( copy_len == 0 &&
 c026b6a:	f1ba 0f00 	cmp.w	sl, #0
 c026b6e:	d106      	bne.n	c026b7e <mbedtls_cipher_update+0x11e>
 c026b70:	f994 3008 	ldrsb.w	r3, [r4, #8]
 c026b74:	b91b      	cbnz	r3, c026b7e <mbedtls_cipher_update+0x11e>
                ctx->operation == MBEDTLS_DECRYPT &&
 c026b76:	68e3      	ldr	r3, [r4, #12]
 c026b78:	2b00      	cmp	r3, #0
 c026b7a:	bf18      	it	ne
 c026b7c:	46b2      	movne	sl, r6
            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 c026b7e:	eba5 050a 	sub.w	r5, r5, sl
 c026b82:	4652      	mov	r2, sl
 c026b84:	1979      	adds	r1, r7, r5
 c026b86:	f104 0014 	add.w	r0, r4, #20
 c026b8a:	f7f0 fef8 	bl	c01797e <memcpy>
            ctx->unprocessed_len += copy_len;
 c026b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c026b90:	4453      	add	r3, sl
 c026b92:	6263      	str	r3, [r4, #36]	; 0x24
        if( ilen )
 c026b94:	2d00      	cmp	r5, #0
 c026b96:	d0b7      	beq.n	c026b08 <mbedtls_cipher_update+0xa8>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 c026b98:	6823      	ldr	r3, [r4, #0]
 c026b9a:	f994 1008 	ldrsb.w	r1, [r4, #8]
 c026b9e:	699b      	ldr	r3, [r3, #24]
 c026ba0:	e9cd 7900 	strd	r7, r9, [sp]
 c026ba4:	462a      	mov	r2, r5
 c026ba6:	689e      	ldr	r6, [r3, #8]
 c026ba8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c026baa:	f104 0328 	add.w	r3, r4, #40	; 0x28
 c026bae:	47b0      	blx	r6
 c026bb0:	2800      	cmp	r0, #0
 c026bb2:	f47f af61 	bne.w	c026a78 <mbedtls_cipher_update+0x18>
            *olen += ilen;
 c026bb6:	f8d8 3000 	ldr.w	r3, [r8]
 c026bba:	441d      	add	r5, r3
        *olen = ilen;
 c026bbc:	f8c8 5000 	str.w	r5, [r8]
        return( 0 );
 c026bc0:	e75a      	b.n	c026a78 <mbedtls_cipher_update+0x18>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CFB )
 c026bc2:	2903      	cmp	r1, #3
 c026bc4:	d110      	bne.n	c026be8 <mbedtls_cipher_update+0x188>
        if( 0 != ( ret = ctx->cipher_info->base->cfb_func( ctx->cipher_ctx,
 c026bc6:	6993      	ldr	r3, [r2, #24]
 c026bc8:	e9cd 7901 	strd	r7, r9, [sp, #4]
                ctx->operation, ilen, &ctx->unprocessed_len, ctx->iv,
 c026bcc:	f104 0228 	add.w	r2, r4, #40	; 0x28
        if( 0 != ( ret = ctx->cipher_info->base->cfb_func( ctx->cipher_ctx,
 c026bd0:	9200      	str	r2, [sp, #0]
 c026bd2:	68de      	ldr	r6, [r3, #12]
 c026bd4:	f994 1008 	ldrsb.w	r1, [r4, #8]
 c026bd8:	f104 0324 	add.w	r3, r4, #36	; 0x24
 c026bdc:	462a      	mov	r2, r5
 c026bde:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c026be0:	47b0      	blx	r6
        if( 0 != ( ret = ctx->cipher_info->base->ctr_func( ctx->cipher_ctx,
 c026be2:	2800      	cmp	r0, #0
 c026be4:	d0ea      	beq.n	c026bbc <mbedtls_cipher_update+0x15c>
 c026be6:	e747      	b.n	c026a78 <mbedtls_cipher_update+0x18>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_OFB )
 c026be8:	2904      	cmp	r1, #4
 c026bea:	d10b      	bne.n	c026c04 <mbedtls_cipher_update+0x1a4>
        if( 0 != ( ret = ctx->cipher_info->base->ofb_func( ctx->cipher_ctx,
 c026bec:	6993      	ldr	r3, [r2, #24]
 c026bee:	e9cd 7900 	strd	r7, r9, [sp]
 c026bf2:	f104 0224 	add.w	r2, r4, #36	; 0x24
 c026bf6:	691e      	ldr	r6, [r3, #16]
 c026bf8:	4629      	mov	r1, r5
 c026bfa:	f104 0328 	add.w	r3, r4, #40	; 0x28
 c026bfe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c026c00:	47b0      	blx	r6
 c026c02:	e7ee      	b.n	c026be2 <mbedtls_cipher_update+0x182>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CTR )
 c026c04:	2905      	cmp	r1, #5
 c026c06:	d112      	bne.n	c026c2e <mbedtls_cipher_update+0x1ce>
        if( 0 != ( ret = ctx->cipher_info->base->ctr_func( ctx->cipher_ctx,
 c026c08:	6993      	ldr	r3, [r2, #24]
 c026c0a:	e9cd 7901 	strd	r7, r9, [sp, #4]
                ctx->unprocessed_data, input, output ) ) )
 c026c0e:	f104 0214 	add.w	r2, r4, #20
        if( 0 != ( ret = ctx->cipher_info->base->ctr_func( ctx->cipher_ctx,
 c026c12:	9200      	str	r2, [sp, #0]
 c026c14:	695e      	ldr	r6, [r3, #20]
 c026c16:	f104 0224 	add.w	r2, r4, #36	; 0x24
 c026c1a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 c026c1e:	4629      	mov	r1, r5
 c026c20:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c026c22:	47b0      	blx	r6
 c026c24:	e7dd      	b.n	c026be2 <mbedtls_cipher_update+0x182>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 c026c26:	4804      	ldr	r0, [pc, #16]	; (c026c38 <mbedtls_cipher_update+0x1d8>)
 c026c28:	e726      	b.n	c026a78 <mbedtls_cipher_update+0x18>
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 c026c2a:	4804      	ldr	r0, [pc, #16]	; (c026c3c <mbedtls_cipher_update+0x1dc>)
 c026c2c:	e724      	b.n	c026a78 <mbedtls_cipher_update+0x18>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 c026c2e:	4804      	ldr	r0, [pc, #16]	; (c026c40 <mbedtls_cipher_update+0x1e0>)
 c026c30:	e722      	b.n	c026a78 <mbedtls_cipher_update+0x18>
 c026c32:	bf00      	nop
 c026c34:	ffff9f00 	.word	0xffff9f00
 c026c38:	ffff9d80 	.word	0xffff9d80
 c026c3c:	ffff9c80 	.word	0xffff9c80
 c026c40:	ffff9f80 	.word	0xffff9f80

0c026c44 <mbedtls_cipher_finish>:
                   unsigned char *output, size_t *olen )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 c026c44:	6803      	ldr	r3, [r0, #0]
{
 c026c46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c026c48:	4604      	mov	r4, r0
 c026c4a:	460e      	mov	r6, r1
 c026c4c:	4615      	mov	r5, r2
    if( ctx->cipher_info == NULL )
 c026c4e:	2b00      	cmp	r3, #0
 c026c50:	d050      	beq.n	c026cf4 <mbedtls_cipher_finish+0xb0>
         * accessible through the cipher layer. */
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    *olen = 0;
 c026c52:	2000      	movs	r0, #0
 c026c54:	6010      	str	r0, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 c026c56:	785a      	ldrb	r2, [r3, #1]
 c026c58:	1ed1      	subs	r1, r2, #3
 c026c5a:	2904      	cmp	r1, #4
 c026c5c:	d90c      	bls.n	c026c78 <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
 c026c5e:	2a09      	cmp	r2, #9
 c026c60:	d00a      	beq.n	c026c78 <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if ( ( MBEDTLS_CIPHER_CHACHA20          == ctx->cipher_info->type ) ||
 c026c62:	7819      	ldrb	r1, [r3, #0]
 c026c64:	3948      	subs	r1, #72	; 0x48
 c026c66:	2901      	cmp	r1, #1
 c026c68:	d906      	bls.n	c026c78 <mbedtls_cipher_finish+0x34>
         ( MBEDTLS_CIPHER_CHACHA20_POLY1305 == ctx->cipher_info->type ) )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 c026c6a:	2a01      	cmp	r2, #1
 c026c6c:	d106      	bne.n	c026c7c <mbedtls_cipher_finish+0x38>
    {
        if( ctx->unprocessed_len != 0 )
 c026c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c026c70:	4283      	cmp	r3, r0
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
                return( 0 );

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 c026c72:	4822      	ldr	r0, [pc, #136]	; (c026cfc <mbedtls_cipher_finish+0xb8>)
 c026c74:	bf08      	it	eq
 c026c76:	2000      	moveq	r0, #0
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 c026c78:	b003      	add	sp, #12
 c026c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 c026c7c:	2a02      	cmp	r2, #2
 c026c7e:	d13b      	bne.n	c026cf8 <mbedtls_cipher_finish+0xb4>
        if( MBEDTLS_ENCRYPT == ctx->operation )
 c026c80:	f994 1008 	ldrsb.w	r1, [r4, #8]
 c026c84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 c026c86:	2901      	cmp	r1, #1
 c026c88:	d126      	bne.n	c026cd8 <mbedtls_cipher_finish+0x94>
            if( NULL == ctx->add_padding )
 c026c8a:	68e7      	ldr	r7, [r4, #12]
 c026c8c:	b90f      	cbnz	r7, c026c92 <mbedtls_cipher_finish+0x4e>
                if( 0 != ctx->unprocessed_len )
 c026c8e:	2a00      	cmp	r2, #0
 c026c90:	e7ef      	b.n	c026c72 <mbedtls_cipher_finish+0x2e>
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;

    if( ctx->iv_size != 0 )
 c026c92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 c026c94:	f104 0014 	add.w	r0, r4, #20
 c026c98:	b901      	cbnz	r1, c026c9c <mbedtls_cipher_finish+0x58>
        return (int) ctx->iv_size;

    return (int) ctx->cipher_info->iv_size;
 c026c9a:	68d9      	ldr	r1, [r3, #12]
 c026c9c:	47b8      	blx	r7
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 c026c9e:	4623      	mov	r3, r4
 c026ca0:	f853 2b28 	ldr.w	r2, [r3], #40
                ctx->unprocessed_data, output ) ) )
 c026ca4:	f104 0714 	add.w	r7, r4, #20
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 c026ca8:	6990      	ldr	r0, [r2, #24]
 c026caa:	9601      	str	r6, [sp, #4]
 c026cac:	9700      	str	r7, [sp, #0]
 c026cae:	6887      	ldr	r7, [r0, #8]
 c026cb0:	f994 1008 	ldrsb.w	r1, [r4, #8]
 c026cb4:	6952      	ldr	r2, [r2, #20]
 c026cb6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c026cb8:	47b8      	blx	r7
 c026cba:	2800      	cmp	r0, #0
 c026cbc:	d1dc      	bne.n	c026c78 <mbedtls_cipher_finish+0x34>
        if( MBEDTLS_DECRYPT == ctx->operation )
 c026cbe:	f994 3008 	ldrsb.w	r3, [r4, #8]
 c026cc2:	6821      	ldr	r1, [r4, #0]
 c026cc4:	b983      	cbnz	r3, c026ce8 <mbedtls_cipher_finish+0xa4>
            return( ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 c026cc6:	6923      	ldr	r3, [r4, #16]
    if( ctx->cipher_info == NULL )
 c026cc8:	b101      	cbz	r1, c026ccc <mbedtls_cipher_finish+0x88>
    return ctx->cipher_info->block_size;
 c026cca:	6949      	ldr	r1, [r1, #20]
 c026ccc:	462a      	mov	r2, r5
 c026cce:	4630      	mov	r0, r6
}
 c026cd0:	b003      	add	sp, #12
 c026cd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return( ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 c026cd6:	4718      	bx	r3
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 c026cd8:	695b      	ldr	r3, [r3, #20]
 c026cda:	4293      	cmp	r3, r2
 c026cdc:	d0df      	beq.n	c026c9e <mbedtls_cipher_finish+0x5a>
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 c026cde:	68e3      	ldr	r3, [r4, #12]
 c026ce0:	2b00      	cmp	r3, #0
 c026ce2:	d0d4      	beq.n	c026c8e <mbedtls_cipher_finish+0x4a>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 c026ce4:	4805      	ldr	r0, [pc, #20]	; (c026cfc <mbedtls_cipher_finish+0xb8>)
 c026ce6:	e7c7      	b.n	c026c78 <mbedtls_cipher_finish+0x34>
    if( ctx->cipher_info == NULL )
 c026ce8:	b111      	cbz	r1, c026cf0 <mbedtls_cipher_finish+0xac>
    return ctx->cipher_info->block_size;
 c026cea:	694b      	ldr	r3, [r1, #20]
        *olen = mbedtls_cipher_get_block_size( ctx );
 c026cec:	602b      	str	r3, [r5, #0]
        return( 0 );
 c026cee:	e7c3      	b.n	c026c78 <mbedtls_cipher_finish+0x34>
        return 0;
 c026cf0:	4603      	mov	r3, r0
 c026cf2:	e7fb      	b.n	c026cec <mbedtls_cipher_finish+0xa8>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c026cf4:	4802      	ldr	r0, [pc, #8]	; (c026d00 <mbedtls_cipher_finish+0xbc>)
 c026cf6:	e7bf      	b.n	c026c78 <mbedtls_cipher_finish+0x34>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 c026cf8:	4802      	ldr	r0, [pc, #8]	; (c026d04 <mbedtls_cipher_finish+0xc0>)
 c026cfa:	e7bd      	b.n	c026c78 <mbedtls_cipher_finish+0x34>
 c026cfc:	ffff9d80 	.word	0xffff9d80
 c026d00:	ffff9f00 	.word	0xffff9f00
 c026d04:	ffff9f80 	.word	0xffff9f80

0c026d08 <mbedtls_cipher_set_padding_mode>:
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx,
                                     mbedtls_cipher_padding_t mode )
{
    CIPHER_VALIDATE_RET( ctx != NULL );

    if( NULL == ctx->cipher_info || MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 c026d08:	6803      	ldr	r3, [r0, #0]
 c026d0a:	b303      	cbz	r3, c026d4e <mbedtls_cipher_set_padding_mode+0x46>
 c026d0c:	785b      	ldrb	r3, [r3, #1]
 c026d0e:	2b02      	cmp	r3, #2
 c026d10:	d11d      	bne.n	c026d4e <mbedtls_cipher_set_padding_mode+0x46>

        return( 0 );
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    switch( mode )
 c026d12:	2904      	cmp	r1, #4
 c026d14:	d81d      	bhi.n	c026d52 <mbedtls_cipher_set_padding_mode+0x4a>
 c026d16:	e8df f001 	tbb	[pc, r1]
 c026d1a:	0903      	.short	0x0903
 c026d1c:	110d      	.short	0x110d
 c026d1e:	15          	.byte	0x15
 c026d1f:	00          	.byte	0x00
    {
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    case MBEDTLS_PADDING_PKCS7:
        ctx->add_padding = add_pkcs_padding;
 c026d20:	4b0d      	ldr	r3, [pc, #52]	; (c026d58 <mbedtls_cipher_set_padding_mode+0x50>)
 c026d22:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_pkcs_padding;
 c026d24:	4b0d      	ldr	r3, [pc, #52]	; (c026d5c <mbedtls_cipher_set_padding_mode+0x54>)
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
        ctx->get_padding = get_one_and_zeros_padding;
 c026d26:	6103      	str	r3, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 c026d28:	2000      	movs	r0, #0
        break;
 c026d2a:	4770      	bx	lr
        ctx->add_padding = add_one_and_zeros_padding;
 c026d2c:	4b0c      	ldr	r3, [pc, #48]	; (c026d60 <mbedtls_cipher_set_padding_mode+0x58>)
 c026d2e:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_one_and_zeros_padding;
 c026d30:	4b0c      	ldr	r3, [pc, #48]	; (c026d64 <mbedtls_cipher_set_padding_mode+0x5c>)
 c026d32:	e7f8      	b.n	c026d26 <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_and_len_padding;
 c026d34:	4b0c      	ldr	r3, [pc, #48]	; (c026d68 <mbedtls_cipher_set_padding_mode+0x60>)
 c026d36:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_and_len_padding;
 c026d38:	4b0c      	ldr	r3, [pc, #48]	; (c026d6c <mbedtls_cipher_set_padding_mode+0x64>)
 c026d3a:	e7f4      	b.n	c026d26 <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_padding;
 c026d3c:	4b0c      	ldr	r3, [pc, #48]	; (c026d70 <mbedtls_cipher_set_padding_mode+0x68>)
 c026d3e:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_padding;
 c026d40:	4b0c      	ldr	r3, [pc, #48]	; (c026d74 <mbedtls_cipher_set_padding_mode+0x6c>)
 c026d42:	e7f0      	b.n	c026d26 <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = NULL;
 c026d44:	2300      	movs	r3, #0
        ctx->get_padding = get_no_padding;
 c026d46:	4a0c      	ldr	r2, [pc, #48]	; (c026d78 <mbedtls_cipher_set_padding_mode+0x70>)
        ctx->add_padding = NULL;
 c026d48:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_no_padding;
 c026d4a:	6102      	str	r2, [r0, #16]
 c026d4c:	e7ec      	b.n	c026d28 <mbedtls_cipher_set_padding_mode+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c026d4e:	480b      	ldr	r0, [pc, #44]	; (c026d7c <mbedtls_cipher_set_padding_mode+0x74>)
 c026d50:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 c026d52:	480b      	ldr	r0, [pc, #44]	; (c026d80 <mbedtls_cipher_set_padding_mode+0x78>)
}
 c026d54:	4770      	bx	lr
 c026d56:	bf00      	nop
 c026d58:	0c02679d 	.word	0x0c02679d
 c026d5c:	0c0267b5 	.word	0x0c0267b5
 c026d60:	0c026809 	.word	0x0c026809
 c026d64:	0c0268c1 	.word	0x0c0268c1
 c026d68:	0c026825 	.word	0x0c026825
 c026d6c:	0c026849 	.word	0x0c026849
 c026d70:	0c026899 	.word	0x0c026899
 c026d74:	0c026911 	.word	0x0c026911
 c026d78:	0c0268ad 	.word	0x0c0268ad
 c026d7c:	ffff9f00 	.word	0xffff9f00
 c026d80:	ffff9f80 	.word	0xffff9f80

0c026d84 <mbedtls_cipher_setup>:
{
 c026d84:	b538      	push	{r3, r4, r5, lr}
 c026d86:	4604      	mov	r4, r0
    if( cipher_info == NULL )
 c026d88:	460d      	mov	r5, r1
 c026d8a:	b179      	cbz	r1, c026dac <mbedtls_cipher_setup+0x28>
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 c026d8c:	2244      	movs	r2, #68	; 0x44
 c026d8e:	2100      	movs	r1, #0
 c026d90:	f7f0 fe19 	bl	c0179c6 <memset>
    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 c026d94:	69ab      	ldr	r3, [r5, #24]
 c026d96:	6a1b      	ldr	r3, [r3, #32]
 c026d98:	4798      	blx	r3
 c026d9a:	63e0      	str	r0, [r4, #60]	; 0x3c
 c026d9c:	b140      	cbz	r0, c026db0 <mbedtls_cipher_setup+0x2c>
    ctx->cipher_info = cipher_info;
 c026d9e:	6025      	str	r5, [r4, #0]
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
 c026da0:	2100      	movs	r1, #0
 c026da2:	4620      	mov	r0, r4
 c026da4:	f7ff ffb0 	bl	c026d08 <mbedtls_cipher_set_padding_mode>
    return( 0 );
 c026da8:	2000      	movs	r0, #0
}
 c026daa:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c026dac:	4801      	ldr	r0, [pc, #4]	; (c026db4 <mbedtls_cipher_setup+0x30>)
 c026dae:	e7fc      	b.n	c026daa <mbedtls_cipher_setup+0x26>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 c026db0:	4801      	ldr	r0, [pc, #4]	; (c026db8 <mbedtls_cipher_setup+0x34>)
 c026db2:	e7fa      	b.n	c026daa <mbedtls_cipher_setup+0x26>
 c026db4:	ffff9f00 	.word	0xffff9f00
 c026db8:	ffff9e80 	.word	0xffff9e80

0c026dbc <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 c026dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 c026dbe:	b085      	sub	sp, #20
 c026dc0:	4605      	mov	r5, r0
 c026dc2:	e9dd 640b 	ldrd	r6, r4, [sp, #44]	; 0x2c
 c026dc6:	461f      	mov	r7, r3
        *olen += part_len;
        return( 0 );
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 c026dc8:	f7ff fe1e 	bl	c026a08 <mbedtls_cipher_set_iv>
 c026dcc:	b9a8      	cbnz	r0, c026dfa <mbedtls_cipher_crypt+0x3e>
    if( ctx->cipher_info == NULL )
 c026dce:	682b      	ldr	r3, [r5, #0]
 c026dd0:	b1ab      	cbz	r3, c026dfe <mbedtls_cipher_crypt+0x42>
    ctx->unprocessed_len = 0;
 c026dd2:	6268      	str	r0, [r5, #36]	; 0x24
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen,
 c026dd4:	9400      	str	r4, [sp, #0]
 c026dd6:	4633      	mov	r3, r6
 c026dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c026dda:	4639      	mov	r1, r7
 c026ddc:	4628      	mov	r0, r5
 c026dde:	f7ff fe3f 	bl	c026a60 <mbedtls_cipher_update>
 c026de2:	b950      	cbnz	r0, c026dfa <mbedtls_cipher_crypt+0x3e>
                                       output, olen ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen,
 c026de4:	6821      	ldr	r1, [r4, #0]
 c026de6:	aa03      	add	r2, sp, #12
 c026de8:	4431      	add	r1, r6
 c026dea:	4628      	mov	r0, r5
 c026dec:	f7ff ff2a 	bl	c026c44 <mbedtls_cipher_finish>
 c026df0:	b918      	cbnz	r0, c026dfa <mbedtls_cipher_crypt+0x3e>
                                       &finish_olen ) ) != 0 )
        return( ret );

    *olen += finish_olen;
 c026df2:	6823      	ldr	r3, [r4, #0]
 c026df4:	9a03      	ldr	r2, [sp, #12]
 c026df6:	4413      	add	r3, r2
 c026df8:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 c026dfa:	b005      	add	sp, #20
 c026dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c026dfe:	4801      	ldr	r0, [pc, #4]	; (c026e04 <mbedtls_cipher_crypt+0x48>)
 c026e00:	e7fb      	b.n	c026dfa <mbedtls_cipher_crypt+0x3e>
 c026e02:	bf00      	nop
 c026e04:	ffff9f00 	.word	0xffff9f00

0c026e08 <ccm_ctx_free>:

    return( ctx );
}

static void ccm_ctx_free( void *ctx )
{
 c026e08:	b510      	push	{r4, lr}
 c026e0a:	4604      	mov	r4, r0
    mbedtls_ccm_free( ctx );
 c026e0c:	f7f5 ff3c 	bl	c01cc88 <mbedtls_ccm_free>
    mbedtls_free( ctx );
 c026e10:	4620      	mov	r0, r4
}
 c026e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c026e16:	f003 ba33 	b.w	c02a280 <mbedtls_free>

0c026e1a <ccm_ctx_alloc>:
{
 c026e1a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ccm_context ) );
 c026e1c:	f44f 7198 	mov.w	r1, #304	; 0x130
 c026e20:	2001      	movs	r0, #1
 c026e22:	f003 fa27 	bl	c02a274 <mbedtls_calloc>
    if( ctx != NULL )
 c026e26:	4604      	mov	r4, r0
 c026e28:	b108      	cbz	r0, c026e2e <ccm_ctx_alloc+0x14>
        mbedtls_ccm_init( (mbedtls_ccm_context *) ctx );
 c026e2a:	f7f5 fed1 	bl	c01cbd0 <mbedtls_ccm_init>
}
 c026e2e:	4620      	mov	r0, r4
 c026e30:	bd10      	pop	{r4, pc}

0c026e32 <ccm_aes_setkey_wrap>:

#if defined(MBEDTLS_CCM_C)
static int ccm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 c026e32:	4613      	mov	r3, r2
 c026e34:	460a      	mov	r2, r1
 c026e36:	2102      	movs	r1, #2
 c026e38:	f7f5 bece 	b.w	c01cbd8 <mbedtls_ccm_setkey>

0c026e3c <gcm_ctx_free>:
{
 c026e3c:	b510      	push	{r4, lr}
 c026e3e:	4604      	mov	r4, r0
    mbedtls_gcm_free( ctx );
 c026e40:	f7f7 fedf 	bl	c01ec02 <mbedtls_gcm_free>
    mbedtls_free( ctx );
 c026e44:	4620      	mov	r0, r4
}
 c026e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c026e4a:	f003 ba19 	b.w	c02a280 <mbedtls_free>

0c026e4e <gcm_ctx_alloc>:
{
 c026e4e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 c026e50:	f44f 71a0 	mov.w	r1, #320	; 0x140
 c026e54:	2001      	movs	r0, #1
 c026e56:	f003 fa0d 	bl	c02a274 <mbedtls_calloc>
    if( ctx != NULL )
 c026e5a:	4604      	mov	r4, r0
 c026e5c:	b108      	cbz	r0, c026e62 <gcm_ctx_alloc+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 c026e5e:	f7f7 fd53 	bl	c01e908 <mbedtls_gcm_init>
}
 c026e62:	4620      	mov	r0, r4
 c026e64:	bd10      	pop	{r4, pc}

0c026e66 <gcm_aes_setkey_wrap>:
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 c026e66:	4613      	mov	r3, r2
 c026e68:	460a      	mov	r2, r1
 c026e6a:	2102      	movs	r1, #2
 c026e6c:	f7f7 bd52 	b.w	c01e914 <mbedtls_gcm_setkey>

0c026e70 <aes_ctx_free>:
{
 c026e70:	b510      	push	{r4, lr}
 c026e72:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 c026e74:	f7f5 fc39 	bl	c01c6ea <mbedtls_aes_free>
    mbedtls_free( ctx );
 c026e78:	4620      	mov	r0, r4
}
 c026e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c026e7e:	f003 b9ff 	b.w	c02a280 <mbedtls_free>

0c026e82 <aes_ctx_alloc>:
{
 c026e82:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 c026e84:	f44f 7198 	mov.w	r1, #304	; 0x130
 c026e88:	2001      	movs	r0, #1
 c026e8a:	f003 f9f3 	bl	c02a274 <mbedtls_calloc>
    if( aes == NULL )
 c026e8e:	4604      	mov	r4, r0
 c026e90:	b108      	cbz	r0, c026e96 <aes_ctx_alloc+0x14>
    mbedtls_aes_init( aes );
 c026e92:	f7f5 fc25 	bl	c01c6e0 <mbedtls_aes_init>
}
 c026e96:	4620      	mov	r0, r4
 c026e98:	bd10      	pop	{r4, pc}

0c026e9a <aes_setkey_dec_wrap>:
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 c026e9a:	f7f5 bc32 	b.w	c01c702 <mbedtls_aes_setkey_dec>

0c026e9e <aes_setkey_enc_wrap>:
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 c026e9e:	f7f5 bc2e 	b.w	c01c6fe <mbedtls_aes_setkey_enc>

0c026ea2 <aes_crypt_ctr_wrap>:
    return mbedtls_aes_crypt_ctr( (mbedtls_aes_context *) ctx, length, nc_off, nonce_counter,
 c026ea2:	f7f5 bd7f 	b.w	c01c9a4 <mbedtls_aes_crypt_ctr>

0c026ea6 <aes_crypt_ofb_wrap>:
    return mbedtls_aes_crypt_ofb( (mbedtls_aes_context *) ctx, length, iv_off,
 c026ea6:	f7f5 bd54 	b.w	c01c952 <mbedtls_aes_crypt_ofb>

0c026eaa <aes_crypt_cfb128_wrap>:
    return mbedtls_aes_crypt_cfb128( (mbedtls_aes_context *) ctx, operation, length, iv_off, iv,
 c026eaa:	f7f5 bd15 	b.w	c01c8d8 <mbedtls_aes_crypt_cfb128>

0c026eae <aes_crypt_cbc_wrap>:
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 c026eae:	f7f5 bc2b 	b.w	c01c708 <mbedtls_aes_crypt_cbc>

0c026eb2 <aes_crypt_ecb_wrap>:
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 c026eb2:	f7f5 bce7 	b.w	c01c884 <mbedtls_aes_crypt_ecb>
	...

0c026eb8 <cmac_multiply_by_u>:
    const unsigned char R_64 = 0x1B;
    unsigned char R_n, mask;
    unsigned char overflow = 0x00;
    int i;

    if( blocksize == MBEDTLS_AES_BLOCK_SIZE )
 c026eb8:	2a10      	cmp	r2, #16
{
 c026eba:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( blocksize == MBEDTLS_AES_BLOCK_SIZE )
 c026ebc:	d011      	beq.n	c026ee2 <cmac_multiply_by_u+0x2a>
    {
        R_n = R_128;
    }
    else if( blocksize == MBEDTLS_DES3_BLOCK_SIZE )
 c026ebe:	2a08      	cmp	r2, #8
 c026ec0:	d11a      	bne.n	c026ef8 <cmac_multiply_by_u+0x40>
    {
        R_n = R_64;
 c026ec2:	231b      	movs	r3, #27
    else
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    for( i = (int)blocksize - 1; i >= 0; i-- )
 c026ec4:	1e55      	subs	r5, r2, #1
    unsigned char overflow = 0x00;
 c026ec6:	2400      	movs	r4, #0
 c026ec8:	462e      	mov	r6, r5
 c026eca:	440a      	add	r2, r1
    for( i = (int)blocksize - 1; i >= 0; i-- )
 c026ecc:	2d00      	cmp	r5, #0
 c026ece:	da0a      	bge.n	c026ee6 <cmac_multiply_by_u+0x2e>
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    mask = - ( input[0] >> 7 );
 c026ed0:	f991 2000 	ldrsb.w	r2, [r1]
#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    output[ blocksize - 1 ] ^= R_n & mask;
 c026ed4:	ea03 73e2 	and.w	r3, r3, r2, asr #31
 c026ed8:	5d82      	ldrb	r2, [r0, r6]
 c026eda:	4053      	eors	r3, r2
 c026edc:	5583      	strb	r3, [r0, r6]

    return( 0 );
 c026ede:	2000      	movs	r0, #0
}
 c026ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        R_n = R_128;
 c026ee2:	2387      	movs	r3, #135	; 0x87
 c026ee4:	e7ee      	b.n	c026ec4 <cmac_multiply_by_u+0xc>
        output[i] = input[i] << 1 | overflow;
 c026ee6:	f812 7d01 	ldrb.w	r7, [r2, #-1]!
 c026eea:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
 c026eee:	5544      	strb	r4, [r0, r5]
        overflow = input[i] >> 7;
 c026ef0:	7814      	ldrb	r4, [r2, #0]
    for( i = (int)blocksize - 1; i >= 0; i-- )
 c026ef2:	3d01      	subs	r5, #1
        overflow = input[i] >> 7;
 c026ef4:	09e4      	lsrs	r4, r4, #7
 c026ef6:	e7e9      	b.n	c026ecc <cmac_multiply_by_u+0x14>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c026ef8:	4800      	ldr	r0, [pc, #0]	; (c026efc <cmac_multiply_by_u+0x44>)
 c026efa:	e7f1      	b.n	c026ee0 <cmac_multiply_by_u+0x28>
 c026efc:	ffff9f00 	.word	0xffff9f00

0c026f00 <cmac_xor_block>:

#if !defined(MBEDTLS_CMAC_ALT)
static void cmac_xor_block( unsigned char *output, const unsigned char *input1,
                            const unsigned char *input2,
                            const size_t block_size )
{
 c026f00:	b570      	push	{r4, r5, r6, lr}
    size_t idx;

    for( idx = 0; idx < block_size; idx++ )
 c026f02:	2400      	movs	r4, #0
 c026f04:	429c      	cmp	r4, r3
 c026f06:	d100      	bne.n	c026f0a <cmac_xor_block+0xa>
        output[ idx ] = input1[ idx ] ^ input2[ idx ];
}
 c026f08:	bd70      	pop	{r4, r5, r6, pc}
        output[ idx ] = input1[ idx ] ^ input2[ idx ];
 c026f0a:	5d0d      	ldrb	r5, [r1, r4]
 c026f0c:	5d16      	ldrb	r6, [r2, r4]
 c026f0e:	4075      	eors	r5, r6
 c026f10:	5505      	strb	r5, [r0, r4]
    for( idx = 0; idx < block_size; idx++ )
 c026f12:	3401      	adds	r4, #1
 c026f14:	e7f6      	b.n	c026f04 <cmac_xor_block+0x4>
	...

0c026f18 <mbedtls_cipher_cmac_starts>:
    }
}

int mbedtls_cipher_cmac_starts( mbedtls_cipher_context_t *ctx,
                                const unsigned char *key, size_t keybits )
{
 c026f18:	b538      	push	{r3, r4, r5, lr}
    mbedtls_cipher_type_t type;
    mbedtls_cmac_context_t *cmac_ctx;
    int retval;

    if( ctx == NULL || ctx->cipher_info == NULL || key == NULL )
 c026f1a:	4605      	mov	r5, r0
 c026f1c:	b1d0      	cbz	r0, c026f54 <mbedtls_cipher_cmac_starts+0x3c>
 c026f1e:	6804      	ldr	r4, [r0, #0]
 c026f20:	b1c4      	cbz	r4, c026f54 <mbedtls_cipher_cmac_starts+0x3c>
 c026f22:	b1b9      	cbz	r1, c026f54 <mbedtls_cipher_cmac_starts+0x3c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( retval = mbedtls_cipher_setkey( ctx, key, (int)keybits,
 c026f24:	2301      	movs	r3, #1
 c026f26:	f7ff fd4f 	bl	c0269c8 <mbedtls_cipher_setkey>
 c026f2a:	4604      	mov	r4, r0
 c026f2c:	b980      	cbnz	r0, c026f50 <mbedtls_cipher_cmac_starts+0x38>
                                          MBEDTLS_ENCRYPT ) ) != 0 )
        return( retval );

    type = ctx->cipher_info->type;
 c026f2e:	682b      	ldr	r3, [r5, #0]

    switch( type )
 c026f30:	781b      	ldrb	r3, [r3, #0]
 c026f32:	2b02      	cmp	r3, #2
 c026f34:	d30e      	bcc.n	c026f54 <mbedtls_cipher_cmac_starts+0x3c>
 c026f36:	2b04      	cmp	r3, #4
 c026f38:	d901      	bls.n	c026f3e <mbedtls_cipher_cmac_starts+0x26>
 c026f3a:	2b24      	cmp	r3, #36	; 0x24
 c026f3c:	d10a      	bne.n	c026f54 <mbedtls_cipher_cmac_starts+0x3c>
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    /* Allocated and initialise in the cipher context memory for the CMAC
     * context */
    cmac_ctx = mbedtls_calloc( 1, sizeof( mbedtls_cmac_context_t ) );
 c026f3e:	2124      	movs	r1, #36	; 0x24
 c026f40:	2001      	movs	r0, #1
 c026f42:	f003 f997 	bl	c02a274 <mbedtls_calloc>
    if( cmac_ctx == NULL )
 c026f46:	b138      	cbz	r0, c026f58 <mbedtls_cipher_cmac_starts+0x40>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cmac_ctx = cmac_ctx;
 c026f48:	6428      	str	r0, [r5, #64]	; 0x40

    mbedtls_platform_zeroize( cmac_ctx->state, sizeof( cmac_ctx->state ) );
 c026f4a:	2110      	movs	r1, #16
 c026f4c:	f003 f9a8 	bl	c02a2a0 <mbedtls_platform_zeroize>

    return 0;
}
 c026f50:	4620      	mov	r0, r4
 c026f52:	bd38      	pop	{r3, r4, r5, pc}
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c026f54:	4c01      	ldr	r4, [pc, #4]	; (c026f5c <mbedtls_cipher_cmac_starts+0x44>)
 c026f56:	e7fb      	b.n	c026f50 <mbedtls_cipher_cmac_starts+0x38>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 c026f58:	4c01      	ldr	r4, [pc, #4]	; (c026f60 <mbedtls_cipher_cmac_starts+0x48>)
 c026f5a:	e7f9      	b.n	c026f50 <mbedtls_cipher_cmac_starts+0x38>
 c026f5c:	ffff9f00 	.word	0xffff9f00
 c026f60:	ffff9e80 	.word	0xffff9e80

0c026f64 <mbedtls_cipher_cmac_update>:

int mbedtls_cipher_cmac_update( mbedtls_cipher_context_t *ctx,
                                const unsigned char *input, size_t ilen )
{
 c026f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c026f68:	460f      	mov	r7, r1
 c026f6a:	b085      	sub	sp, #20
 c026f6c:	4616      	mov	r6, r2
    mbedtls_cmac_context_t* cmac_ctx;
    unsigned char *state;
    int ret = 0;
    size_t n, j, olen, block_size;

    if( ctx == NULL || ctx->cipher_info == NULL || input == NULL ||
 c026f6e:	4681      	mov	r9, r0
 c026f70:	2800      	cmp	r0, #0
 c026f72:	d056      	beq.n	c027022 <mbedtls_cipher_cmac_update+0xbe>
 c026f74:	6803      	ldr	r3, [r0, #0]
 c026f76:	2b00      	cmp	r3, #0
 c026f78:	d053      	beq.n	c027022 <mbedtls_cipher_cmac_update+0xbe>
 c026f7a:	2900      	cmp	r1, #0
 c026f7c:	d051      	beq.n	c027022 <mbedtls_cipher_cmac_update+0xbe>
        ctx->cmac_ctx == NULL )
 c026f7e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    if( ctx == NULL || ctx->cipher_info == NULL || input == NULL ||
 c026f80:	2c00      	cmp	r4, #0
 c026f82:	d04e      	beq.n	c027022 <mbedtls_cipher_cmac_update+0xbe>
    block_size = ctx->cipher_info->block_size;
    state = ctx->cmac_ctx->state;

    /* Is there data still to process from the last call, that's greater in
     * size than a block? */
    if( cmac_ctx->unprocessed_len > 0 &&
 c026f84:	6a20      	ldr	r0, [r4, #32]
    block_size = ctx->cipher_info->block_size;
 c026f86:	695d      	ldr	r5, [r3, #20]
    if( cmac_ctx->unprocessed_len > 0 &&
 c026f88:	b1e0      	cbz	r0, c026fc4 <mbedtls_cipher_cmac_update+0x60>
        ilen > block_size - cmac_ctx->unprocessed_len )
 c026f8a:	1a2a      	subs	r2, r5, r0
    if( cmac_ctx->unprocessed_len > 0 &&
 c026f8c:	42b2      	cmp	r2, r6
 c026f8e:	d219      	bcs.n	c026fc4 <mbedtls_cipher_cmac_update+0x60>
    {
        memcpy( &cmac_ctx->unprocessed_block[cmac_ctx->unprocessed_len],
 c026f90:	3010      	adds	r0, #16
 c026f92:	4420      	add	r0, r4
 c026f94:	f7f0 fcf3 	bl	c01797e <memcpy>
                input,
                block_size - cmac_ctx->unprocessed_len );

        cmac_xor_block( state, cmac_ctx->unprocessed_block, state, block_size );
 c026f98:	462b      	mov	r3, r5
 c026f9a:	4622      	mov	r2, r4
 c026f9c:	f104 0110 	add.w	r1, r4, #16
 c026fa0:	4620      	mov	r0, r4
 c026fa2:	f7ff ffad 	bl	c026f00 <cmac_xor_block>

        if( ( ret = mbedtls_cipher_update( ctx, state, block_size, state,
 c026fa6:	ab03      	add	r3, sp, #12
 c026fa8:	9300      	str	r3, [sp, #0]
 c026faa:	462a      	mov	r2, r5
 c026fac:	4623      	mov	r3, r4
 c026fae:	4621      	mov	r1, r4
 c026fb0:	4648      	mov	r0, r9
 c026fb2:	f7ff fd55 	bl	c026a60 <mbedtls_cipher_update>
 c026fb6:	b9e0      	cbnz	r0, c026ff2 <mbedtls_cipher_cmac_update+0x8e>
                                           &olen ) ) != 0 )
        {
           goto exit;
        }

        input += block_size - cmac_ctx->unprocessed_len;
 c026fb8:	6a23      	ldr	r3, [r4, #32]
        ilen -= block_size - cmac_ctx->unprocessed_len;
        cmac_ctx->unprocessed_len = 0;
 c026fba:	6220      	str	r0, [r4, #32]
        input += block_size - cmac_ctx->unprocessed_len;
 c026fbc:	1aea      	subs	r2, r5, r3
 c026fbe:	441e      	add	r6, r3
 c026fc0:	4417      	add	r7, r2
        ilen -= block_size - cmac_ctx->unprocessed_len;
 c026fc2:	1b76      	subs	r6, r6, r5
    }

    /* n is the number of blocks including any final partial block */
    n = ( ilen + block_size - 1 ) / block_size;
 c026fc4:	f105 38ff 	add.w	r8, r5, #4294967295
 c026fc8:	44b0      	add	r8, r6
 c026fca:	fbb8 f8f5 	udiv	r8, r8, r5

    /* Iterate across the input data in block sized chunks, excluding any
     * final partial or complete block */
    for( j = 1; j < n; j++ )
 c026fce:	f04f 0a01 	mov.w	sl, #1
    {
        cmac_xor_block( state, input, state, block_size );

        if( ( ret = mbedtls_cipher_update( ctx, state, block_size, state,
 c026fd2:	f10d 0b0c 	add.w	fp, sp, #12
    for( j = 1; j < n; j++ )
 c026fd6:	45c2      	cmp	sl, r8
 c026fd8:	d30e      	bcc.n	c026ff8 <mbedtls_cipher_cmac_update+0x94>
        ilen -= block_size;
        input += block_size;
    }

    /* If there is data left over that wasn't aligned to a block */
    if( ilen > 0 )
 c026fda:	b326      	cbz	r6, c027026 <mbedtls_cipher_cmac_update+0xc2>
    {
        memcpy( &cmac_ctx->unprocessed_block[cmac_ctx->unprocessed_len],
 c026fdc:	6a20      	ldr	r0, [r4, #32]
 c026fde:	4632      	mov	r2, r6
 c026fe0:	3010      	adds	r0, #16
 c026fe2:	4639      	mov	r1, r7
 c026fe4:	4420      	add	r0, r4
 c026fe6:	f7f0 fcca 	bl	c01797e <memcpy>
                input,
                ilen );
        cmac_ctx->unprocessed_len += ilen;
 c026fea:	2000      	movs	r0, #0
 c026fec:	6a23      	ldr	r3, [r4, #32]
 c026fee:	441e      	add	r6, r3
 c026ff0:	6226      	str	r6, [r4, #32]
    }

exit:
    return( ret );
}
 c026ff2:	b005      	add	sp, #20
 c026ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cmac_xor_block( state, input, state, block_size );
 c026ff8:	462b      	mov	r3, r5
 c026ffa:	4622      	mov	r2, r4
 c026ffc:	4639      	mov	r1, r7
 c026ffe:	4620      	mov	r0, r4
 c027000:	f7ff ff7e 	bl	c026f00 <cmac_xor_block>
        if( ( ret = mbedtls_cipher_update( ctx, state, block_size, state,
 c027004:	f8cd b000 	str.w	fp, [sp]
 c027008:	4623      	mov	r3, r4
 c02700a:	462a      	mov	r2, r5
 c02700c:	4621      	mov	r1, r4
 c02700e:	4648      	mov	r0, r9
 c027010:	f7ff fd26 	bl	c026a60 <mbedtls_cipher_update>
 c027014:	2800      	cmp	r0, #0
 c027016:	d1ec      	bne.n	c026ff2 <mbedtls_cipher_cmac_update+0x8e>
        ilen -= block_size;
 c027018:	1b76      	subs	r6, r6, r5
        input += block_size;
 c02701a:	442f      	add	r7, r5
    for( j = 1; j < n; j++ )
 c02701c:	f10a 0a01 	add.w	sl, sl, #1
 c027020:	e7d9      	b.n	c026fd6 <mbedtls_cipher_cmac_update+0x72>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c027022:	4802      	ldr	r0, [pc, #8]	; (c02702c <mbedtls_cipher_cmac_update+0xc8>)
 c027024:	e7e5      	b.n	c026ff2 <mbedtls_cipher_cmac_update+0x8e>
exit:
 c027026:	4630      	mov	r0, r6
 c027028:	e7e3      	b.n	c026ff2 <mbedtls_cipher_cmac_update+0x8e>
 c02702a:	bf00      	nop
 c02702c:	ffff9f00 	.word	0xffff9f00

0c027030 <mbedtls_cipher_cmac_finish>:

int mbedtls_cipher_cmac_finish( mbedtls_cipher_context_t *ctx,
                                unsigned char *output )
{
 c027030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c027034:	4689      	mov	r9, r1
 c027036:	b090      	sub	sp, #64	; 0x40
    unsigned char K2[MBEDTLS_CIPHER_BLKSIZE_MAX];
    unsigned char M_last[MBEDTLS_CIPHER_BLKSIZE_MAX];
    int ret;
    size_t olen, block_size;

    if( ctx == NULL || ctx->cipher_info == NULL || ctx->cmac_ctx == NULL ||
 c027038:	4682      	mov	sl, r0
 c02703a:	2800      	cmp	r0, #0
 c02703c:	d07d      	beq.n	c02713a <mbedtls_cipher_cmac_finish+0x10a>
 c02703e:	6803      	ldr	r3, [r0, #0]
 c027040:	2b00      	cmp	r3, #0
 c027042:	d07a      	beq.n	c02713a <mbedtls_cipher_cmac_finish+0x10a>
 c027044:	6c05      	ldr	r5, [r0, #64]	; 0x40
 c027046:	2d00      	cmp	r5, #0
 c027048:	d077      	beq.n	c02713a <mbedtls_cipher_cmac_finish+0x10a>
 c02704a:	2900      	cmp	r1, #0
 c02704c:	d075      	beq.n	c02713a <mbedtls_cipher_cmac_finish+0x10a>

    cmac_ctx = ctx->cmac_ctx;
    block_size = ctx->cipher_info->block_size;
    state = cmac_ctx->state;

    mbedtls_platform_zeroize( K1, sizeof( K1 ) );
 c02704e:	2110      	movs	r1, #16
 c027050:	eb0d 0001 	add.w	r0, sp, r1
    block_size = ctx->cipher_info->block_size;
 c027054:	695f      	ldr	r7, [r3, #20]
    mbedtls_platform_zeroize( L, sizeof( L ) );
 c027056:	ac0c      	add	r4, sp, #48	; 0x30
    mbedtls_platform_zeroize( K1, sizeof( K1 ) );
 c027058:	f003 f922 	bl	c02a2a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( K2, sizeof( K2 ) );
 c02705c:	2110      	movs	r1, #16
 c02705e:	a808      	add	r0, sp, #32
 c027060:	f003 f91e 	bl	c02a2a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( L, sizeof( L ) );
 c027064:	2110      	movs	r1, #16
 c027066:	4620      	mov	r0, r4
 c027068:	f003 f91a 	bl	c02a2a0 <mbedtls_platform_zeroize>
    block_size = ctx->cipher_info->block_size;
 c02706c:	f8da 3000 	ldr.w	r3, [sl]
    if( ( ret = mbedtls_cipher_update( ctx, L, block_size, L, &olen ) ) != 0 )
 c027070:	ae03      	add	r6, sp, #12
    block_size = ctx->cipher_info->block_size;
 c027072:	f8d3 8014 	ldr.w	r8, [r3, #20]
    if( ( ret = mbedtls_cipher_update( ctx, L, block_size, L, &olen ) ) != 0 )
 c027076:	4621      	mov	r1, r4
 c027078:	9600      	str	r6, [sp, #0]
 c02707a:	4623      	mov	r3, r4
 c02707c:	4642      	mov	r2, r8
 c02707e:	4650      	mov	r0, sl
 c027080:	f7ff fcee 	bl	c026a60 <mbedtls_cipher_update>
 c027084:	b950      	cbnz	r0, c02709c <mbedtls_cipher_cmac_finish+0x6c>
    if( ( ret = cmac_multiply_by_u( K1, L , block_size ) ) != 0 )
 c027086:	4642      	mov	r2, r8
 c027088:	4621      	mov	r1, r4
 c02708a:	a804      	add	r0, sp, #16
 c02708c:	f7ff ff14 	bl	c026eb8 <cmac_multiply_by_u>
 c027090:	b920      	cbnz	r0, c02709c <mbedtls_cipher_cmac_finish+0x6c>
    if( ( ret = cmac_multiply_by_u( K2, K1 , block_size ) ) != 0 )
 c027092:	4642      	mov	r2, r8
 c027094:	a904      	add	r1, sp, #16
 c027096:	a808      	add	r0, sp, #32
 c027098:	f7ff ff0e 	bl	c026eb8 <cmac_multiply_by_u>
    mbedtls_platform_zeroize( L, sizeof( L ) );
 c02709c:	2110      	movs	r1, #16
 c02709e:	4620      	mov	r0, r4
 c0270a0:	f003 f8fe 	bl	c02a2a0 <mbedtls_platform_zeroize>
    cmac_generate_subkeys( ctx, K1, K2 );

    last_block = cmac_ctx->unprocessed_block;

    /* Calculate last block */
    if( cmac_ctx->unprocessed_len < block_size )
 c0270a4:	6a2a      	ldr	r2, [r5, #32]
    last_block = cmac_ctx->unprocessed_block;
 c0270a6:	f105 0810 	add.w	r8, r5, #16
    if( cmac_ctx->unprocessed_len < block_size )
 c0270aa:	42ba      	cmp	r2, r7
 c0270ac:	d341      	bcc.n	c027132 <mbedtls_cipher_cmac_finish+0x102>
        cmac_xor_block( M_last, M_last, K2, block_size );
    }
    else
    {
        /* Last block is complete block */
        cmac_xor_block( M_last, last_block, K1, block_size );
 c0270ae:	463b      	mov	r3, r7
 c0270b0:	aa04      	add	r2, sp, #16
 c0270b2:	4641      	mov	r1, r8
 c0270b4:	e00b      	b.n	c0270ce <mbedtls_cipher_cmac_finish+0x9e>
        if( j < last_block_len )
 c0270b6:	429a      	cmp	r2, r3
 c0270b8:	d937      	bls.n	c02712a <mbedtls_cipher_cmac_finish+0xfa>
            padded_block[j] = last_block[j];
 c0270ba:	f818 c003 	ldrb.w	ip, [r8, r3]
 c0270be:	f804 c003 	strb.w	ip, [r4, r3]
    for( j = 0; j < padded_block_len; j++ )
 c0270c2:	3301      	adds	r3, #1
 c0270c4:	429f      	cmp	r7, r3
 c0270c6:	d1f6      	bne.n	c0270b6 <mbedtls_cipher_cmac_finish+0x86>
        cmac_xor_block( M_last, M_last, K2, block_size );
 c0270c8:	463b      	mov	r3, r7
 c0270ca:	4621      	mov	r1, r4
 c0270cc:	aa08      	add	r2, sp, #32
        cmac_xor_block( M_last, last_block, K1, block_size );
 c0270ce:	4620      	mov	r0, r4
 c0270d0:	f7ff ff16 	bl	c026f00 <cmac_xor_block>
    }


    cmac_xor_block( state, M_last, state, block_size );
 c0270d4:	4621      	mov	r1, r4
 c0270d6:	463b      	mov	r3, r7
 c0270d8:	462a      	mov	r2, r5
 c0270da:	4628      	mov	r0, r5
 c0270dc:	f7ff ff10 	bl	c026f00 <cmac_xor_block>
    if( ( ret = mbedtls_cipher_update( ctx, state, block_size, state,
 c0270e0:	9600      	str	r6, [sp, #0]
 c0270e2:	462b      	mov	r3, r5
 c0270e4:	463a      	mov	r2, r7
 c0270e6:	4629      	mov	r1, r5
 c0270e8:	4650      	mov	r0, sl
 c0270ea:	f7ff fcb9 	bl	c026a60 <mbedtls_cipher_update>
 c0270ee:	4604      	mov	r4, r0
 c0270f0:	b920      	cbnz	r0, c0270fc <mbedtls_cipher_cmac_finish+0xcc>
                                       &olen ) ) != 0 )
    {
        goto exit;
    }

    memcpy( output, state, block_size );
 c0270f2:	463a      	mov	r2, r7
 c0270f4:	4629      	mov	r1, r5
 c0270f6:	4648      	mov	r0, r9
 c0270f8:	f7f0 fc41 	bl	c01797e <memcpy>

exit:
    /* Wipe the generated keys on the stack, and any other transients to avoid
     * side channel leakage */
    mbedtls_platform_zeroize( K1, sizeof( K1 ) );
 c0270fc:	2110      	movs	r1, #16
 c0270fe:	eb0d 0001 	add.w	r0, sp, r1
 c027102:	f003 f8cd 	bl	c02a2a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( K2, sizeof( K2 ) );
 c027106:	2110      	movs	r1, #16
 c027108:	a808      	add	r0, sp, #32
 c02710a:	f003 f8c9 	bl	c02a2a0 <mbedtls_platform_zeroize>

    cmac_ctx->unprocessed_len = 0;
 c02710e:	2300      	movs	r3, #0
    mbedtls_platform_zeroize( cmac_ctx->unprocessed_block,
 c027110:	2110      	movs	r1, #16
 c027112:	4640      	mov	r0, r8
    cmac_ctx->unprocessed_len = 0;
 c027114:	622b      	str	r3, [r5, #32]
    mbedtls_platform_zeroize( cmac_ctx->unprocessed_block,
 c027116:	f003 f8c3 	bl	c02a2a0 <mbedtls_platform_zeroize>
                              sizeof( cmac_ctx->unprocessed_block ) );

    mbedtls_platform_zeroize( state, MBEDTLS_CIPHER_BLKSIZE_MAX );
 c02711a:	2110      	movs	r1, #16
 c02711c:	4628      	mov	r0, r5
 c02711e:	f003 f8bf 	bl	c02a2a0 <mbedtls_platform_zeroize>
    return( ret );
}
 c027122:	4620      	mov	r0, r4
 c027124:	b010      	add	sp, #64	; 0x40
 c027126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            padded_block[j] = 0x80;
 c02712a:	bf0c      	ite	eq
 c02712c:	54a0      	strbeq	r0, [r4, r2]
            padded_block[j] = 0x00;
 c02712e:	54e1      	strbne	r1, [r4, r3]
 c027130:	e7c7      	b.n	c0270c2 <mbedtls_cipher_cmac_finish+0x92>
    for( j = 0; j < padded_block_len; j++ )
 c027132:	2300      	movs	r3, #0
            padded_block[j] = 0x80;
 c027134:	2080      	movs	r0, #128	; 0x80
            padded_block[j] = 0x00;
 c027136:	4619      	mov	r1, r3
 c027138:	e7c4      	b.n	c0270c4 <mbedtls_cipher_cmac_finish+0x94>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c02713a:	4c01      	ldr	r4, [pc, #4]	; (c027140 <mbedtls_cipher_cmac_finish+0x110>)
 c02713c:	e7f1      	b.n	c027122 <mbedtls_cipher_cmac_finish+0xf2>
 c02713e:	bf00      	nop
 c027140:	ffff9f00 	.word	0xffff9f00

0c027144 <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 c027144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 c027148:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
{
 c02714c:	f5ad 7d4d 	sub.w	sp, sp, #820	; 0x334
 c027150:	4607      	mov	r7, r0
 c027152:	460e      	mov	r6, r1
 c027154:	4615      	mov	r5, r2
    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 c027156:	f200 80a3 	bhi.w	c0272a0 <block_cipher_df+0x15c>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT +
 c02715a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 c02715e:	2100      	movs	r1, #0
 c027160:	a864      	add	r0, sp, #400	; 0x190
 c027162:	f7f0 fc30 	bl	c0179c6 <memset>
            MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
    mbedtls_aes_init( &aes_ctx );
 c027166:	a818      	add	r0, sp, #96	; 0x60
 c027168:	f7f5 faba 	bl	c01c6e0 <mbedtls_aes_init>
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
    *p++ = ( data_len >> 16 ) & 0xff;
    *p++ = ( data_len >> 8  ) & 0xff;
 c02716c:	0a2b      	lsrs	r3, r5, #8
 c02716e:	f88d 31a2 	strb.w	r3, [sp, #418]	; 0x1a2
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 c027172:	2330      	movs	r3, #48	; 0x30
    *p++ = ( data_len >> 24 ) & 0xff;
 c027174:	2400      	movs	r4, #0
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 c027176:	f88d 31a7 	strb.w	r3, [sp, #423]	; 0x1a7
    memcpy( p, data, data_len );
 c02717a:	ab6a      	add	r3, sp, #424	; 0x1a8
 c02717c:	462a      	mov	r2, r5
 c02717e:	4618      	mov	r0, r3
 c027180:	4631      	mov	r1, r6
    *p++ = ( data_len >> 24 ) & 0xff;
 c027182:	f8ad 41a0 	strh.w	r4, [sp, #416]	; 0x1a0
    *p++ = ( data_len       ) & 0xff;
 c027186:	f88d 51a3 	strb.w	r5, [sp, #419]	; 0x1a3
    memcpy( p, data, data_len );
 c02718a:	f7f0 fbf8 	bl	c01797e <memcpy>
    p[data_len] = 0x80;
 c02718e:	2280      	movs	r2, #128	; 0x80

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 c027190:	4623      	mov	r3, r4
    p[data_len] = 0x80;
 c027192:	5542      	strb	r2, [r0, r5]
        key[i] = i;
 c027194:	f10d 0810 	add.w	r8, sp, #16
 c027198:	f803 3008 	strb.w	r3, [r3, r8]
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 c02719c:	3301      	adds	r3, #1
 c02719e:	2b20      	cmp	r3, #32
 c0271a0:	d1fa      	bne.n	c027198 <block_cipher_df+0x54>

    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key,
 c0271a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 c0271a6:	4641      	mov	r1, r8
 c0271a8:	a818      	add	r0, sp, #96	; 0x60
 c0271aa:	f7f5 faa8 	bl	c01c6fe <mbedtls_aes_setkey_enc>
 c0271ae:	4604      	mov	r4, r0
 c0271b0:	2800      	cmp	r0, #0
 c0271b2:	d156      	bne.n	c027262 <block_cipher_df+0x11e>
    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 c0271b4:	f105 0619 	add.w	r6, r5, #25
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c0271b8:	4681      	mov	r9, r0
    {
        p = buf;
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 c0271ba:	466d      	mov	r5, sp
 c0271bc:	2210      	movs	r2, #16
 c0271be:	2100      	movs	r1, #0
 c0271c0:	4628      	mov	r0, r5
 c0271c2:	f7f0 fc00 	bl	c0179c6 <memset>
        use_len = buf_len;
 c0271c6:	46b3      	mov	fp, r6
 c0271c8:	f20d 1a8f 	addw	sl, sp, #399	; 0x18f
 c0271cc:	f10d 33ff 	add.w	r3, sp, #4294967295
 c0271d0:	f10a 0110 	add.w	r1, sl, #16

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
                chain[i] ^= p[i];
 c0271d4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 c0271d8:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 c0271dc:	4042      	eors	r2, r0
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 c0271de:	4551      	cmp	r1, sl
                chain[i] ^= p[i];
 c0271e0:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 c0271e2:	d1f7      	bne.n	c0271d4 <block_cipher_df+0x90>
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 c0271e4:	f1bb 0f10 	cmp.w	fp, #16
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 c0271e8:	462b      	mov	r3, r5
 c0271ea:	462a      	mov	r2, r5
 c0271ec:	f04f 0101 	mov.w	r1, #1
 c0271f0:	a818      	add	r0, sp, #96	; 0x60
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 c0271f2:	bf94      	ite	ls
 c0271f4:	ebab 0b0b 	subls.w	fp, fp, fp
 c0271f8:	f1ab 0b10 	subhi.w	fp, fp, #16
            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 c0271fc:	f7f5 fb42 	bl	c01c884 <mbedtls_aes_crypt_ecb>
 c027200:	4604      	mov	r4, r0
 c027202:	bb70      	cbnz	r0, c027262 <block_cipher_df+0x11e>
        while( use_len > 0 )
 c027204:	f1bb 0f00 	cmp.w	fp, #0
 c027208:	d1e0      	bne.n	c0271cc <block_cipher_df+0x88>
            {
                goto exit;
            }
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 c02720a:	ab0c      	add	r3, sp, #48	; 0x30
 c02720c:	eb09 0403 	add.w	r4, r9, r3
 c027210:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 c027214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        /*
         * Update IV
         */
        buf[3]++;
 c027218:	f89d 3193 	ldrb.w	r3, [sp, #403]	; 0x193
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c02721c:	f109 0910 	add.w	r9, r9, #16
        buf[3]++;
 c027220:	3301      	adds	r3, #1
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c027222:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        buf[3]++;
 c027226:	f88d 3193 	strb.w	r3, [sp, #403]	; 0x193
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c02722a:	d1c7      	bne.n	c0271bc <block_cipher_df+0x78>
    }

    /*
     * Do final encryption with reduced data
     */
    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp,
 c02722c:	f44f 7280 	mov.w	r2, #256	; 0x100
 c027230:	a90c      	add	r1, sp, #48	; 0x30
 c027232:	a818      	add	r0, sp, #96	; 0x60
 c027234:	f7f5 fa63 	bl	c01c6fe <mbedtls_aes_setkey_enc>
 c027238:	4604      	mov	r4, r0
 c02723a:	b990      	cbnz	r0, c027262 <block_cipher_df+0x11e>
                                        MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
    {
        goto exit;
    }
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
    p = output;
 c02723c:	463d      	mov	r5, r7
 c02723e:	f107 0930 	add.w	r9, r7, #48	; 0x30

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
    {
        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 c027242:	ae14      	add	r6, sp, #80	; 0x50
 c027244:	4633      	mov	r3, r6
 c027246:	4632      	mov	r2, r6
 c027248:	2101      	movs	r1, #1
 c02724a:	a818      	add	r0, sp, #96	; 0x60
 c02724c:	f7f5 fb1a 	bl	c01c884 <mbedtls_aes_crypt_ecb>
 c027250:	4604      	mov	r4, r0
 c027252:	b930      	cbnz	r0, c027262 <block_cipher_df+0x11e>
                                           iv, iv ) ) != 0 )
        {
            goto exit;
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 c027254:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 c027258:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 c02725c:	3510      	adds	r5, #16
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c02725e:	45a9      	cmp	r9, r5
 c027260:	d1f0      	bne.n	c027244 <block_cipher_df+0x100>
    }
exit:
    mbedtls_aes_free( &aes_ctx );
 c027262:	a818      	add	r0, sp, #96	; 0x60
 c027264:	f7f5 fa41 	bl	c01c6ea <mbedtls_aes_free>
    /*
    * tidy up the stack
    */
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 c027268:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 c02726c:	a864      	add	r0, sp, #400	; 0x190
 c02726e:	f003 f817 	bl	c02a2a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 c027272:	2130      	movs	r1, #48	; 0x30
 c027274:	eb0d 0001 	add.w	r0, sp, r1
 c027278:	f003 f812 	bl	c02a2a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( key, sizeof( key ) );
 c02727c:	2120      	movs	r1, #32
 c02727e:	4640      	mov	r0, r8
 c027280:	f003 f80e 	bl	c02a2a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( chain, sizeof( chain ) );
 c027284:	2110      	movs	r1, #16
 c027286:	4668      	mov	r0, sp
 c027288:	f003 f80a 	bl	c02a2a0 <mbedtls_platform_zeroize>
    if( 0 != ret )
 c02728c:	b11c      	cbz	r4, c027296 <block_cipher_df+0x152>
    {
        /*
        * wipe partial seed from memory
        */
        mbedtls_platform_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
 c02728e:	2130      	movs	r1, #48	; 0x30
 c027290:	4638      	mov	r0, r7
 c027292:	f003 f805 	bl	c02a2a0 <mbedtls_platform_zeroize>
    }

    return( ret );
}
 c027296:	4620      	mov	r0, r4
 c027298:	f50d 7d4d 	add.w	sp, sp, #820	; 0x334
 c02729c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 c0272a0:	f06f 0437 	mvn.w	r4, #55	; 0x37
 c0272a4:	e7f7      	b.n	c027296 <block_cipher_df+0x152>

0c0272a6 <ctr_drbg_update_internal>:
 *   ctx->aes_ctx = Key
 *   ctx->counter = V
 */
static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                          const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 c0272a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0272aa:	b08c      	sub	sp, #48	; 0x30
 c0272ac:	4604      	mov	r4, r0
 c0272ae:	460e      	mov	r6, r1
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
    int i, j;
    int ret = 0;

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 c0272b0:	2230      	movs	r2, #48	; 0x30
 c0272b2:	2100      	movs	r1, #0
 c0272b4:	4668      	mov	r0, sp
 c0272b6:	f7f0 fb86 	bl	c0179c6 <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c0272ba:	f04f 0800 	mov.w	r8, #0
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 c0272be:	f104 0720 	add.w	r7, r4, #32
 c0272c2:	eb0d 0308 	add.w	r3, sp, r8
 c0272c6:	f104 0110 	add.w	r1, r4, #16
            if( ++ctx->counter[i - 1] != 0 )
 c0272ca:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
 c0272ce:	3201      	adds	r2, #1
 c0272d0:	b2d2      	uxtb	r2, r2
 c0272d2:	700a      	strb	r2, [r1, #0]
 c0272d4:	b90a      	cbnz	r2, c0272da <ctr_drbg_update_internal+0x34>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 c0272d6:	42a1      	cmp	r1, r4
 c0272d8:	d1f7      	bne.n	c0272ca <ctr_drbg_update_internal+0x24>
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 c0272da:	4622      	mov	r2, r4
 c0272dc:	2101      	movs	r1, #1
 c0272de:	4638      	mov	r0, r7
 c0272e0:	f7f5 fad0 	bl	c01c884 <mbedtls_aes_crypt_ecb>
 c0272e4:	4605      	mov	r5, r0
 c0272e6:	bb18      	cbnz	r0, c027330 <ctr_drbg_update_internal+0x8a>
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c0272e8:	f108 0810 	add.w	r8, r8, #16
 c0272ec:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 c0272f0:	d1e7      	bne.n	c0272c2 <ctr_drbg_update_internal+0x1c>
 c0272f2:	1e73      	subs	r3, r6, #1
 c0272f4:	f10d 32ff 	add.w	r2, sp, #4294967295
 c0272f8:	362f      	adds	r6, #47	; 0x2f

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
        tmp[i] ^= data[i];
 c0272fa:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 c0272fe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 c027302:	4041      	eors	r1, r0
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 c027304:	42b3      	cmp	r3, r6
        tmp[i] ^= data[i];
 c027306:	7011      	strb	r1, [r2, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 c027308:	d1f7      	bne.n	c0272fa <ctr_drbg_update_internal+0x54>

    /*
     * Update key and counter
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp,
 c02730a:	f44f 7280 	mov.w	r2, #256	; 0x100
 c02730e:	4669      	mov	r1, sp
 c027310:	4638      	mov	r0, r7
 c027312:	f7f5 f9f4 	bl	c01c6fe <mbedtls_aes_setkey_enc>
 c027316:	4605      	mov	r5, r0
 c027318:	b950      	cbnz	r0, c027330 <ctr_drbg_update_internal+0x8a>
                                        MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
    {
        goto exit;
    }
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE,
 c02731a:	aa08      	add	r2, sp, #32
 c02731c:	ae0c      	add	r6, sp, #48	; 0x30
 c02731e:	4613      	mov	r3, r2
 c027320:	cb03      	ldmia	r3!, {r0, r1}
 c027322:	42b3      	cmp	r3, r6
 c027324:	6020      	str	r0, [r4, #0]
 c027326:	6061      	str	r1, [r4, #4]
 c027328:	461a      	mov	r2, r3
 c02732a:	f104 0408 	add.w	r4, r4, #8
 c02732e:	d1f6      	bne.n	c02731e <ctr_drbg_update_internal+0x78>
            MBEDTLS_CTR_DRBG_BLOCKSIZE );

exit:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 c027330:	4668      	mov	r0, sp
 c027332:	2130      	movs	r1, #48	; 0x30
 c027334:	f002 ffb4 	bl	c02a2a0 <mbedtls_platform_zeroize>
    return( ret );
}
 c027338:	4628      	mov	r0, r5
 c02733a:	b00c      	add	sp, #48	; 0x30
 c02733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0c027340 <mbedtls_ctr_drbg_init>:
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 c027340:	f44f 72ac 	mov.w	r2, #344	; 0x158
 c027344:	2100      	movs	r1, #0
 c027346:	f7f0 bb3e 	b.w	c0179c6 <memset>

0c02734a <mbedtls_ctr_drbg_free>:
{
 c02734a:	b510      	push	{r4, lr}
    if( ctx == NULL )
 c02734c:	4604      	mov	r4, r0
 c02734e:	b148      	cbz	r0, c027364 <mbedtls_ctr_drbg_free+0x1a>
    mbedtls_aes_free( &ctx->aes_ctx );
 c027350:	3020      	adds	r0, #32
 c027352:	f7f5 f9ca 	bl	c01c6ea <mbedtls_aes_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 c027356:	4620      	mov	r0, r4
}
 c027358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 c02735c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 c027360:	f002 bf9e 	b.w	c02a2a0 <mbedtls_platform_zeroize>
}
 c027364:	bd10      	pop	{r4, pc}

0c027366 <mbedtls_ctr_drbg_reseed>:
 * and with output
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 c027366:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 c027368:	6984      	ldr	r4, [r0, #24]
{
 c02736a:	b0e1      	sub	sp, #388	; 0x184
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 c02736c:	f5b4 7fc0 	cmp.w	r4, #384	; 0x180
{
 c027370:	4605      	mov	r5, r0
 c027372:	460f      	mov	r7, r1
 c027374:	4616      	mov	r6, r2
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 c027376:	d832      	bhi.n	c0273de <mbedtls_ctr_drbg_reseed+0x78>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 c027378:	f5c4 73c0 	rsb	r3, r4, #384	; 0x180
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 c02737c:	4293      	cmp	r3, r2
 c02737e:	d32e      	bcc.n	c0273de <mbedtls_ctr_drbg_reseed+0x78>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 c027380:	f44f 72c0 	mov.w	r2, #384	; 0x180
 c027384:	2100      	movs	r1, #0
 c027386:	4668      	mov	r0, sp
 c027388:	f7f0 fb1d 	bl	c0179c6 <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 c02738c:	f8d5 3150 	ldr.w	r3, [r5, #336]	; 0x150
 c027390:	4622      	mov	r2, r4
 c027392:	4669      	mov	r1, sp
 c027394:	f8d5 0154 	ldr.w	r0, [r5, #340]	; 0x154
 c027398:	4798      	blx	r3
 c02739a:	bb18      	cbnz	r0, c0273e4 <mbedtls_ctr_drbg_reseed+0x7e>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
    }

    seedlen += ctx->entropy_len;
 c02739c:	69ac      	ldr	r4, [r5, #24]

    /*
     * Add additional data
     */
    if( additional && len )
 c02739e:	b13f      	cbz	r7, c0273b0 <mbedtls_ctr_drbg_reseed+0x4a>
 c0273a0:	b136      	cbz	r6, c0273b0 <mbedtls_ctr_drbg_reseed+0x4a>
    {
        memcpy( seed + seedlen, additional, len );
 c0273a2:	eb0d 0004 	add.w	r0, sp, r4
 c0273a6:	4632      	mov	r2, r6
 c0273a8:	4639      	mov	r1, r7
 c0273aa:	f7f0 fae8 	bl	c01797e <memcpy>
        seedlen += len;
 c0273ae:	4434      	add	r4, r6
    }

    /*
     * Reduce to 384 bits
     */
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 c0273b0:	4622      	mov	r2, r4
 c0273b2:	4669      	mov	r1, sp
 c0273b4:	4668      	mov	r0, sp
 c0273b6:	f7ff fec5 	bl	c027144 <block_cipher_df>
 c0273ba:	4604      	mov	r4, r0
 c0273bc:	b938      	cbnz	r0, c0273ce <mbedtls_ctr_drbg_reseed+0x68>
        goto exit;

    /*
     * Update state
     */
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
 c0273be:	4669      	mov	r1, sp
 c0273c0:	4628      	mov	r0, r5
 c0273c2:	f7ff ff70 	bl	c0272a6 <ctr_drbg_update_internal>
 c0273c6:	4604      	mov	r4, r0
 c0273c8:	b908      	cbnz	r0, c0273ce <mbedtls_ctr_drbg_reseed+0x68>
        goto exit;
    ctx->reseed_counter = 1;
 c0273ca:	2301      	movs	r3, #1
 c0273cc:	612b      	str	r3, [r5, #16]

exit:
    mbedtls_platform_zeroize( seed, sizeof( seed ) );
 c0273ce:	f44f 71c0 	mov.w	r1, #384	; 0x180
 c0273d2:	4668      	mov	r0, sp
 c0273d4:	f002 ff64 	bl	c02a2a0 <mbedtls_platform_zeroize>
    return( ret );
}
 c0273d8:	4620      	mov	r0, r4
 c0273da:	b061      	add	sp, #388	; 0x184
 c0273dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 c0273de:	f06f 0437 	mvn.w	r4, #55	; 0x37
 c0273e2:	e7f9      	b.n	c0273d8 <mbedtls_ctr_drbg_reseed+0x72>
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 c0273e4:	f06f 0433 	mvn.w	r4, #51	; 0x33
 c0273e8:	e7f6      	b.n	c0273d8 <mbedtls_ctr_drbg_reseed+0x72>

0c0273ea <mbedtls_ctr_drbg_seed_entropy_len>:
{
 c0273ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0273ee:	4604      	mov	r4, r0
 c0273f0:	b088      	sub	sp, #32
 c0273f2:	4688      	mov	r8, r1
 c0273f4:	4617      	mov	r7, r2
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 c0273f6:	2100      	movs	r1, #0
 c0273f8:	2220      	movs	r2, #32
    mbedtls_aes_init( &ctx->aes_ctx );
 c0273fa:	f104 0520 	add.w	r5, r4, #32
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 c0273fe:	4668      	mov	r0, sp
{
 c027400:	461e      	mov	r6, r3
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 c027402:	f7f0 fae0 	bl	c0179c6 <memset>
    mbedtls_aes_init( &ctx->aes_ctx );
 c027406:	4628      	mov	r0, r5
 c027408:	f7f5 f96a 	bl	c01c6e0 <mbedtls_aes_init>
    ctx->entropy_len = entropy_len;
 c02740c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ctx->f_entropy = f_entropy;
 c02740e:	f8c4 8150 	str.w	r8, [r4, #336]	; 0x150
    ctx->entropy_len = entropy_len;
 c027412:	61a3      	str	r3, [r4, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 c027414:	f242 7310 	movw	r3, #10000	; 0x2710
    ctx->p_entropy = p_entropy;
 c027418:	f8c4 7154 	str.w	r7, [r4, #340]	; 0x154
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 c02741c:	61e3      	str	r3, [r4, #28]
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key,
 c02741e:	f44f 7280 	mov.w	r2, #256	; 0x100
 c027422:	4669      	mov	r1, sp
 c027424:	4628      	mov	r0, r5
 c027426:	f7f5 f96a 	bl	c01c6fe <mbedtls_aes_setkey_enc>
 c02742a:	b920      	cbnz	r0, c027436 <mbedtls_ctr_drbg_seed_entropy_len+0x4c>
    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 c02742c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c02742e:	4631      	mov	r1, r6
 c027430:	4620      	mov	r0, r4
 c027432:	f7ff ff98 	bl	c027366 <mbedtls_ctr_drbg_reseed>
}
 c027436:	b008      	add	sp, #32
 c027438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0c02743c <mbedtls_ctr_drbg_seed>:
{
 c02743c:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy,
 c02743e:	2430      	movs	r4, #48	; 0x30
 c027440:	9401      	str	r4, [sp, #4]
 c027442:	9c04      	ldr	r4, [sp, #16]
 c027444:	9400      	str	r4, [sp, #0]
 c027446:	f7ff ffd0 	bl	c0273ea <mbedtls_ctr_drbg_seed_entropy_len>
}
 c02744a:	b002      	add	sp, #8
 c02744c:	bd10      	pop	{r4, pc}

0c02744e <mbedtls_ctr_drbg_random_with_add>:
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 c02744e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char *p = output;
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 c027452:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
{
 c027456:	b090      	sub	sp, #64	; 0x40
 c027458:	4604      	mov	r4, r0
 c02745a:	460e      	mov	r6, r1
 c02745c:	4615      	mov	r5, r2
 c02745e:	4698      	mov	r8, r3
 c027460:	9f16      	ldr	r7, [sp, #88]	; 0x58
    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 c027462:	d859      	bhi.n	c027518 <mbedtls_ctr_drbg_random_with_add+0xca>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 c027464:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 c027468:	d859      	bhi.n	c02751e <mbedtls_ctr_drbg_random_with_add+0xd0>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 c02746a:	2230      	movs	r2, #48	; 0x30
 c02746c:	2100      	movs	r1, #0
 c02746e:	a804      	add	r0, sp, #16
 c027470:	f7f0 faa9 	bl	c0179c6 <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 c027474:	6922      	ldr	r2, [r4, #16]
 c027476:	69e3      	ldr	r3, [r4, #28]
 c027478:	429a      	cmp	r2, r3
 c02747a:	dc01      	bgt.n	c027480 <mbedtls_ctr_drbg_random_with_add+0x32>
 c02747c:	6963      	ldr	r3, [r4, #20]
 c02747e:	b18b      	cbz	r3, c0274a4 <mbedtls_ctr_drbg_random_with_add+0x56>
        ctx->prediction_resistance )
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 c027480:	463a      	mov	r2, r7
 c027482:	4641      	mov	r1, r8
 c027484:	4620      	mov	r0, r4
 c027486:	f7ff ff6e 	bl	c027366 <mbedtls_ctr_drbg_reseed>
 c02748a:	bb10      	cbnz	r0, c0274d2 <mbedtls_ctr_drbg_random_with_add+0x84>
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 c02748c:	f104 0720 	add.w	r7, r4, #32
    while( output_len > 0 )
 c027490:	bb15      	cbnz	r5, c0274d8 <mbedtls_ctr_drbg_random_with_add+0x8a>
        memcpy( p, tmp, use_len );
        p += use_len;
        output_len -= use_len;
    }

    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 c027492:	a904      	add	r1, sp, #16
 c027494:	4620      	mov	r0, r4
 c027496:	f7ff ff06 	bl	c0272a6 <ctr_drbg_update_internal>
 c02749a:	b988      	cbnz	r0, c0274c0 <mbedtls_ctr_drbg_random_with_add+0x72>
        goto exit;

    ctx->reseed_counter++;
 c02749c:	6923      	ldr	r3, [r4, #16]
 c02749e:	3301      	adds	r3, #1
 c0274a0:	6123      	str	r3, [r4, #16]
 c0274a2:	e00d      	b.n	c0274c0 <mbedtls_ctr_drbg_random_with_add+0x72>
    if( add_len > 0 )
 c0274a4:	2f00      	cmp	r7, #0
 c0274a6:	d0f1      	beq.n	c02748c <mbedtls_ctr_drbg_random_with_add+0x3e>
        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )
 c0274a8:	463a      	mov	r2, r7
 c0274aa:	4641      	mov	r1, r8
 c0274ac:	a804      	add	r0, sp, #16
 c0274ae:	f7ff fe49 	bl	c027144 <block_cipher_df>
 c0274b2:	b928      	cbnz	r0, c0274c0 <mbedtls_ctr_drbg_random_with_add+0x72>
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 c0274b4:	a904      	add	r1, sp, #16
 c0274b6:	4620      	mov	r0, r4
 c0274b8:	f7ff fef5 	bl	c0272a6 <ctr_drbg_update_internal>
 c0274bc:	2800      	cmp	r0, #0
 c0274be:	d0e5      	beq.n	c02748c <mbedtls_ctr_drbg_random_with_add+0x3e>

exit:
    mbedtls_platform_zeroize( add_input, sizeof( add_input ) );
 c0274c0:	2130      	movs	r1, #48	; 0x30
 c0274c2:	a804      	add	r0, sp, #16
 c0274c4:	f002 feec 	bl	c02a2a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 c0274c8:	4668      	mov	r0, sp
 c0274ca:	2110      	movs	r1, #16
 c0274cc:	f002 fee8 	bl	c02a2a0 <mbedtls_platform_zeroize>
    return( 0 );
 c0274d0:	2000      	movs	r0, #0
}
 c0274d2:	b010      	add	sp, #64	; 0x40
 c0274d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c0274d8:	f104 0210 	add.w	r2, r4, #16
            if( ++ctx->counter[i - 1] != 0 )
 c0274dc:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 c0274e0:	3301      	adds	r3, #1
 c0274e2:	b2db      	uxtb	r3, r3
 c0274e4:	7013      	strb	r3, [r2, #0]
 c0274e6:	b90b      	cbnz	r3, c0274ec <mbedtls_ctr_drbg_random_with_add+0x9e>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 c0274e8:	42a2      	cmp	r2, r4
 c0274ea:	d1f7      	bne.n	c0274dc <mbedtls_ctr_drbg_random_with_add+0x8e>
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 c0274ec:	466b      	mov	r3, sp
 c0274ee:	4622      	mov	r2, r4
 c0274f0:	2101      	movs	r1, #1
 c0274f2:	4638      	mov	r0, r7
 c0274f4:	f7f5 f9c6 	bl	c01c884 <mbedtls_aes_crypt_ecb>
 c0274f8:	2800      	cmp	r0, #0
 c0274fa:	d1e1      	bne.n	c0274c0 <mbedtls_ctr_drbg_random_with_add+0x72>
        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c0274fc:	2d10      	cmp	r5, #16
 c0274fe:	46a8      	mov	r8, r5
 c027500:	bf28      	it	cs
 c027502:	f04f 0810 	movcs.w	r8, #16
        memcpy( p, tmp, use_len );
 c027506:	4630      	mov	r0, r6
 c027508:	4642      	mov	r2, r8
 c02750a:	4669      	mov	r1, sp
 c02750c:	f7f0 fa37 	bl	c01797e <memcpy>
        p += use_len;
 c027510:	4446      	add	r6, r8
        output_len -= use_len;
 c027512:	eba5 0508 	sub.w	r5, r5, r8
 c027516:	e7bb      	b.n	c027490 <mbedtls_ctr_drbg_random_with_add+0x42>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 c027518:	f06f 0035 	mvn.w	r0, #53	; 0x35
 c02751c:	e7d9      	b.n	c0274d2 <mbedtls_ctr_drbg_random_with_add+0x84>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 c02751e:	f06f 0037 	mvn.w	r0, #55	; 0x37
 c027522:	e7d6      	b.n	c0274d2 <mbedtls_ctr_drbg_random_with_add+0x84>

0c027524 <mbedtls_ctr_drbg_random>:
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 c027524:	2300      	movs	r3, #0
{
 c027526:	b507      	push	{r0, r1, r2, lr}
    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 c027528:	9300      	str	r3, [sp, #0]
 c02752a:	f7ff ff90 	bl	c02744e <mbedtls_ctr_drbg_random_with_add>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 c02752e:	b003      	add	sp, #12
 c027530:	f85d fb04 	ldr.w	pc, [sp], #4

0c027534 <mbedtls_ecdh_compute_shared>:
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
 c027534:	b5f0      	push	{r4, r5, r6, r7, lr}
 c027536:	b08f      	sub	sp, #60	; 0x3c
 c027538:	4604      	mov	r4, r0
    mbedtls_ecp_point_init( &P );
 c02753a:	a805      	add	r0, sp, #20
{
 c02753c:	4617      	mov	r7, r2
 c02753e:	461e      	mov	r6, r3
 c027540:	460d      	mov	r5, r1
    mbedtls_ecp_point_init( &P );
 c027542:	f7f5 fe8f 	bl	c01d264 <mbedtls_ecp_point_init>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &P, d, Q,
 c027546:	2300      	movs	r3, #0
 c027548:	9302      	str	r3, [sp, #8]
 c02754a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 c02754c:	4620      	mov	r0, r4
 c02754e:	9301      	str	r3, [sp, #4]
 c027550:	9b14      	ldr	r3, [sp, #80]	; 0x50
 c027552:	4632      	mov	r2, r6
 c027554:	9300      	str	r3, [sp, #0]
 c027556:	a905      	add	r1, sp, #20
 c027558:	463b      	mov	r3, r7
 c02755a:	f7f6 f947 	bl	c01d7ec <mbedtls_ecp_mul_restartable>
 c02755e:	4604      	mov	r4, r0
 c027560:	b940      	cbnz	r0, c027574 <mbedtls_ecdh_compute_shared+0x40>
    if( mbedtls_ecp_is_zero( &P ) )
 c027562:	a805      	add	r0, sp, #20
 c027564:	f7f5 ff75 	bl	c01d452 <mbedtls_ecp_is_zero>
 c027568:	b950      	cbnz	r0, c027580 <mbedtls_ecdh_compute_shared+0x4c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );
 c02756a:	a905      	add	r1, sp, #20
 c02756c:	4628      	mov	r0, r5
 c02756e:	f7fd fb41 	bl	c024bf4 <mbedtls_mpi_copy>
 c027572:	4604      	mov	r4, r0
    mbedtls_ecp_point_free( &P );
 c027574:	a805      	add	r0, sp, #20
 c027576:	f7f5 febb 	bl	c01d2f0 <mbedtls_ecp_point_free>
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( z != NULL );
    return( ecdh_compute_shared_restartable( grp, z, Q, d,
                                             f_rng, p_rng, NULL ) );
}
 c02757a:	4620      	mov	r0, r4
 c02757c:	b00f      	add	sp, #60	; 0x3c
 c02757e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 c027580:	4c00      	ldr	r4, [pc, #0]	; (c027584 <mbedtls_ecdh_compute_shared+0x50>)
 c027582:	e7f7      	b.n	c027574 <mbedtls_ecdh_compute_shared+0x40>
 c027584:	ffffb080 	.word	0xffffb080

0c027588 <mbedtls_ecdh_init>:
    ecdh_init_internal( ctx );
    mbedtls_ecp_point_init( &ctx->Vi  );
    mbedtls_ecp_point_init( &ctx->Vf  );
    mbedtls_mpi_init( &ctx->_d );
#else
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );
 c027588:	f44f 7282 	mov.w	r2, #260	; 0x104
{
 c02758c:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );
 c02758e:	2100      	movs	r1, #0
 c027590:	f7f0 fa19 	bl	c0179c6 <memset>

    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
 c027594:	2200      	movs	r2, #0
#endif
    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
 c027596:	7002      	strb	r2, [r0, #0]
    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
 c027598:	7082      	strb	r2, [r0, #2]
#if defined(MBEDTLS_ECP_RESTARTABLE)
    ctx->restart_enabled = 0;
#endif
}
 c02759a:	bd08      	pop	{r3, pc}

0c02759c <mbedtls_ecdh_setup>:
    return( ecdh_setup_internal( ctx, grp_id ) );
#else
    switch( grp_id )
    {
        default:
            ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
 c02759c:	2300      	movs	r3, #0
{
 c02759e:	b570      	push	{r4, r5, r6, lr}
 c0275a0:	4604      	mov	r4, r0
            ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
 c0275a2:	7003      	strb	r3, [r0, #0]
            ctx->var = MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0;
 c0275a4:	2301      	movs	r3, #1
{
 c0275a6:	460e      	mov	r6, r1
    mbedtls_ecp_group_init( &ctx->grp );
 c0275a8:	1d05      	adds	r5, r0, #4
            ctx->var = MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0;
 c0275aa:	7083      	strb	r3, [r0, #2]
            ctx->grp_id = grp_id;
 c0275ac:	7061      	strb	r1, [r4, #1]
    mbedtls_ecp_group_init( &ctx->grp );
 c0275ae:	4628      	mov	r0, r5
 c0275b0:	f7f5 fe66 	bl	c01d280 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &ctx->d  );
 c0275b4:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 c0275b8:	f7fd fade 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &ctx->Q   );
 c0275bc:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 c0275c0:	f7f5 fe50 	bl	c01d264 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Qp  );
 c0275c4:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 c0275c8:	f7f5 fe4c 	bl	c01d264 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->z  );
 c0275cc:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 c0275d0:	f7fd fad2 	bl	c024b78 <mbedtls_mpi_init>
    ret = mbedtls_ecp_group_load( &ctx->grp, grp_id );
 c0275d4:	4631      	mov	r1, r6
 c0275d6:	4628      	mov	r0, r5
 c0275d8:	f7f6 ff5a 	bl	c01e490 <mbedtls_ecp_group_load>
            ecdh_init_internal( &ctx->ctx.mbed_ecdh );
            return( ecdh_setup_internal( &ctx->ctx.mbed_ecdh, grp_id ) );
    }
#endif
}
 c0275dc:	4b02      	ldr	r3, [pc, #8]	; (c0275e8 <mbedtls_ecdh_setup+0x4c>)
 c0275de:	2800      	cmp	r0, #0
 c0275e0:	bf14      	ite	ne
 c0275e2:	4618      	movne	r0, r3
 c0275e4:	2000      	moveq	r0, #0
 c0275e6:	bd70      	pop	{r4, r5, r6, pc}
 c0275e8:	ffffb180 	.word	0xffffb180

0c0275ec <mbedtls_ecdh_free>:

/*
 * Free context
 */
void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
{
 c0275ec:	b510      	push	{r4, lr}
    if( ctx == NULL )
 c0275ee:	4604      	mov	r4, r0
 c0275f0:	b1c8      	cbz	r0, c027626 <mbedtls_ecdh_free+0x3a>
    mbedtls_ecp_point_free( &ctx->Vi );
    mbedtls_ecp_point_free( &ctx->Vf );
    mbedtls_mpi_free( &ctx->_d );
    ecdh_free_internal( ctx );
#else
    switch( ctx->var )
 c0275f2:	7883      	ldrb	r3, [r0, #2]
 c0275f4:	2b01      	cmp	r3, #1
 c0275f6:	d112      	bne.n	c02761e <mbedtls_ecdh_free+0x32>
    mbedtls_ecp_group_free( &ctx->grp );
 c0275f8:	3004      	adds	r0, #4
 c0275fa:	f7f5 fe7d 	bl	c01d2f8 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &ctx->d  );
 c0275fe:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 c027602:	f7fd fabf 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &ctx->Q   );
 c027606:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 c02760a:	f7f5 fe71 	bl	c01d2f0 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Qp  );
 c02760e:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 c027612:	f7f5 fe6d 	bl	c01d2f0 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->z  );
 c027616:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 c02761a:	f7fd fab3 	bl	c024b84 <mbedtls_mpi_free>
            break;
        default:
            break;
    }

    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
 c02761e:	2300      	movs	r3, #0
 c027620:	7023      	strb	r3, [r4, #0]
    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
 c027622:	70a3      	strb	r3, [r4, #2]
    ctx->grp_id = MBEDTLS_ECP_DP_NONE;
 c027624:	7063      	strb	r3, [r4, #1]
#endif
}
 c027626:	bd10      	pop	{r4, pc}

0c027628 <mbedtls_ecdh_get_params>:
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( key != NULL );
    ECDH_VALIDATE_RET( side == MBEDTLS_ECDH_OURS ||
                       side == MBEDTLS_ECDH_THEIRS );

    if( mbedtls_ecdh_grp_id( ctx ) == MBEDTLS_ECP_DP_NONE )
 c027628:	7843      	ldrb	r3, [r0, #1]
{
 c02762a:	b570      	push	{r4, r5, r6, lr}
 c02762c:	460d      	mov	r5, r1
 c02762e:	4604      	mov	r4, r0
 c027630:	4616      	mov	r6, r2
 c027632:	7809      	ldrb	r1, [r1, #0]
    if( mbedtls_ecdh_grp_id( ctx ) == MBEDTLS_ECP_DP_NONE )
 c027634:	b93b      	cbnz	r3, c027646 <mbedtls_ecdh_get_params+0x1e>
    {
        /* This is the first call to get_params(). Set up the context
         * for use with the group. */
        if( ( ret = mbedtls_ecdh_setup( ctx, key->grp.id ) ) != 0 )
 c027636:	f7ff ffb1 	bl	c02759c <mbedtls_ecdh_setup>
 c02763a:	b918      	cbnz	r0, c027644 <mbedtls_ecdh_get_params+0x1c>
    }

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    return( ecdh_get_params_internal( ctx, key, side ) );
#else
    switch( ctx->var )
 c02763c:	78a3      	ldrb	r3, [r4, #2]
 c02763e:	2b01      	cmp	r3, #1
 c027640:	d004      	beq.n	c02764c <mbedtls_ecdh_get_params+0x24>
    {
        case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
            return( ecdh_get_params_internal( &ctx->ctx.mbed_ecdh,
                                              key, side ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 c027642:	4810      	ldr	r0, [pc, #64]	; (c027684 <mbedtls_ecdh_get_params+0x5c>)
    }
#endif
}
 c027644:	bd70      	pop	{r4, r5, r6, pc}
        if( mbedtls_ecdh_grp_id( ctx ) != key->grp.id )
 c027646:	428b      	cmp	r3, r1
 c027648:	d0f8      	beq.n	c02763c <mbedtls_ecdh_get_params+0x14>
 c02764a:	e7fa      	b.n	c027642 <mbedtls_ecdh_get_params+0x1a>
    if( side == MBEDTLS_ECDH_THEIRS )
 c02764c:	2e01      	cmp	r6, #1
 c02764e:	d107      	bne.n	c027660 <mbedtls_ecdh_get_params+0x38>
        return( mbedtls_ecp_copy( &ctx->Qp, &key->Q ) );
 c027650:	f105 01ac 	add.w	r1, r5, #172	; 0xac
 c027654:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
}
 c027658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_ecp_copy( &ctx->Qp, &key->Q ) );
 c02765c:	f7f5 becc 	b.w	c01d3f8 <mbedtls_ecp_copy>
    if( side != MBEDTLS_ECDH_OURS )
 c027660:	2e00      	cmp	r6, #0
 c027662:	d1ee      	bne.n	c027642 <mbedtls_ecdh_get_params+0x1a>
    if( ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 ||
 c027664:	f105 01ac 	add.w	r1, r5, #172	; 0xac
 c027668:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 c02766c:	f7f5 fec4 	bl	c01d3f8 <mbedtls_ecp_copy>
 c027670:	2800      	cmp	r0, #0
 c027672:	d1e7      	bne.n	c027644 <mbedtls_ecdh_get_params+0x1c>
 c027674:	f105 01a0 	add.w	r1, r5, #160	; 0xa0
 c027678:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
}
 c02767c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if( ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 ||
 c027680:	f7fd bab8 	b.w	c024bf4 <mbedtls_mpi_copy>
 c027684:	ffffb080 	.word	0xffffb080

0c027688 <mbedtls_ecdh_calc_secret>:
 */
int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
 c027688:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c02768c:	460e      	mov	r6, r1

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    return( ecdh_calc_secret_internal( ctx, olen, buf, blen, f_rng, p_rng,
                                       restart_enabled ) );
#else
    switch( ctx->var )
 c02768e:	7881      	ldrb	r1, [r0, #2]
{
 c027690:	4617      	mov	r7, r2
    switch( ctx->var )
 c027692:	2901      	cmp	r1, #1
{
 c027694:	4699      	mov	r9, r3
 c027696:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 c02769a:	4604      	mov	r4, r0
    switch( ctx->var )
 c02769c:	d103      	bne.n	c0276a6 <mbedtls_ecdh_calc_secret+0x1e>
    if( ctx == NULL || ctx->grp.pbits == 0 )
 c02769e:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    {
        case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
            return( ecdh_calc_secret_internal( &ctx->ctx.mbed_ecdh, olen, buf,
 c0276a0:	f100 0804 	add.w	r8, r0, #4
    if( ctx == NULL || ctx->grp.pbits == 0 )
 c0276a4:	b919      	cbnz	r1, c0276ae <mbedtls_ecdh_calc_secret+0x26>
                                               blen, f_rng, p_rng,
                                               restart_enabled ) );
        default:
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c0276a6:	4818      	ldr	r0, [pc, #96]	; (c027708 <mbedtls_ecdh_calc_secret+0x80>)
    }
#endif
}
 c0276a8:	b003      	add	sp, #12
 c0276aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp,
 c0276ae:	f100 05f8 	add.w	r5, r0, #248	; 0xf8
 c0276b2:	e9cd 3200 	strd	r3, r2, [sp]
 c0276b6:	4629      	mov	r1, r5
 c0276b8:	f100 03a4 	add.w	r3, r0, #164	; 0xa4
 c0276bc:	f100 02d4 	add.w	r2, r0, #212	; 0xd4
 c0276c0:	4640      	mov	r0, r8
 c0276c2:	f7ff ff37 	bl	c027534 <mbedtls_ecdh_compute_shared>
 c0276c6:	2800      	cmp	r0, #0
 c0276c8:	d1ee      	bne.n	c0276a8 <mbedtls_ecdh_calc_secret+0x20>
    if( mbedtls_mpi_size( &ctx->z ) > blen )
 c0276ca:	4628      	mov	r0, r5
 c0276cc:	f7fd fba4 	bl	c024e18 <mbedtls_mpi_size>
 c0276d0:	4581      	cmp	r9, r0
 c0276d2:	d3e8      	bcc.n	c0276a6 <mbedtls_ecdh_calc_secret+0x1e>
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
 c0276d4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    if( mbedtls_ecp_get_type( &ctx->grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c0276d6:	4640      	mov	r0, r8
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
 c0276d8:	f012 0307 	ands.w	r3, r2, #7
 c0276dc:	bf18      	it	ne
 c0276de:	2301      	movne	r3, #1
 c0276e0:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
 c0276e4:	6033      	str	r3, [r6, #0]
    if( mbedtls_ecp_get_type( &ctx->grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c0276e6:	f7f5 fdb3 	bl	c01d250 <mbedtls_ecp_get_type>
 c0276ea:	2802      	cmp	r0, #2
        return mbedtls_mpi_write_binary_le( &ctx->z, buf, *olen );
 c0276ec:	6832      	ldr	r2, [r6, #0]
 c0276ee:	4639      	mov	r1, r7
 c0276f0:	4628      	mov	r0, r5
    if( mbedtls_ecp_get_type( &ctx->grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c0276f2:	d104      	bne.n	c0276fe <mbedtls_ecdh_calc_secret+0x76>
}
 c0276f4:	b003      	add	sp, #12
 c0276f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return mbedtls_mpi_write_binary_le( &ctx->z, buf, *olen );
 c0276fa:	f7fd bbff 	b.w	c024efc <mbedtls_mpi_write_binary_le>
}
 c0276fe:	b003      	add	sp, #12
 c027700:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
 c027704:	f7fd bc2f 	b.w	c024f66 <mbedtls_mpi_write_binary>
 c027708:	ffffb080 	.word	0xffffb080

0c02770c <ecdsa_sign_det_restartable.isra.0>:

#if defined(MBEDTLS_ECDSA_DETERMINISTIC)
/*
 * Deterministic signature wrapper
 */
static int ecdsa_sign_det_restartable( mbedtls_ecp_group *grp,
 c02770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c027710:	b0c5      	sub	sp, #276	; 0x114
{
    int ret;
    mbedtls_hmac_drbg_context rng_ctx;
    mbedtls_hmac_drbg_context *p_rng = &rng_ctx;
    unsigned char data[2 * MBEDTLS_ECP_MAX_BYTES];
    size_t grp_len = ( grp->nbits + 7 ) / 8;
 c027712:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
static int ecdsa_sign_det_restartable( mbedtls_ecp_group *grp,
 c027714:	4605      	mov	r5, r0
    const mbedtls_md_info_t *md_info;
    mbedtls_mpi h;

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 c027716:	f89d 0140 	ldrb.w	r0, [sp, #320]	; 0x140
static int ecdsa_sign_det_restartable( mbedtls_ecp_group *grp,
 c02771a:	468a      	mov	sl, r1
 c02771c:	4693      	mov	fp, r2
 c02771e:	461f      	mov	r7, r3
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 c027720:	f000 fbb0 	bl	c027e84 <mbedtls_md_info_from_type>
    size_t grp_len = ( grp->nbits + 7 ) / 8;
 c027724:	3407      	adds	r4, #7
 c027726:	08e4      	lsrs	r4, r4, #3
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 c027728:	4681      	mov	r9, r0
 c02772a:	2800      	cmp	r0, #0
 c02772c:	d062      	beq.n	c0277f4 <ecdsa_sign_det_restartable.isra.0+0xe8>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    mbedtls_mpi_init( &h );
 c02772e:	a807      	add	r0, sp, #28
    mbedtls_hmac_drbg_init( &rng_ctx );
 c027730:	ae0a      	add	r6, sp, #40	; 0x28
    mbedtls_mpi_init( &h );
 c027732:	f7fd fa21 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_hmac_drbg_init( &rng_ctx );
 c027736:	4630      	mov	r0, r6
 c027738:	f000 fa64 	bl	c027c04 <mbedtls_hmac_drbg_init>
            goto sign;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /* Use private key and message hash (reduced) to initialize HMAC_DRBG */
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( d, data, grp_len ) );
 c02773c:	4622      	mov	r2, r4
 c02773e:	a923      	add	r1, sp, #140	; 0x8c
 c027740:	4638      	mov	r0, r7
 c027742:	f7fd fc10 	bl	c024f66 <mbedtls_mpi_write_binary>
 c027746:	4680      	mov	r8, r0
 c027748:	2800      	cmp	r0, #0
 c02774a:	d140      	bne.n	c0277ce <ecdsa_sign_det_restartable.isra.0+0xc2>
    size_t n_size = ( grp->nbits + 7 ) / 8;
 c02774c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    size_t use_size = blen > n_size ? n_size : blen;
 c02774e:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    size_t n_size = ( grp->nbits + 7 ) / 8;
 c027750:	3307      	adds	r3, #7
 c027752:	08db      	lsrs	r3, r3, #3
    size_t use_size = blen > n_size ? n_size : blen;
 c027754:	4293      	cmp	r3, r2
 c027756:	bf28      	it	cs
 c027758:	4613      	movcs	r3, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 c02775a:	994e      	ldr	r1, [sp, #312]	; 0x138
 c02775c:	461a      	mov	r2, r3
 c02775e:	a807      	add	r0, sp, #28
 c027760:	9305      	str	r3, [sp, #20]
 c027762:	f7fd fb93 	bl	c024e8c <mbedtls_mpi_read_binary>
 c027766:	4680      	mov	r8, r0
 c027768:	2800      	cmp	r0, #0
 c02776a:	d130      	bne.n	c0277ce <ecdsa_sign_det_restartable.isra.0+0xc2>
    if( use_size * 8 > grp->nbits )
 c02776c:	9b05      	ldr	r3, [sp, #20]
 c02776e:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 c027770:	00db      	lsls	r3, r3, #3
 c027772:	428b      	cmp	r3, r1
 c027774:	d824      	bhi.n	c0277c0 <ecdsa_sign_det_restartable.isra.0+0xb4>
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 c027776:	f105 084c 	add.w	r8, r5, #76	; 0x4c
 c02777a:	4641      	mov	r1, r8
 c02777c:	a807      	add	r0, sp, #28
 c02777e:	f7fd fd3f 	bl	c025200 <mbedtls_mpi_cmp_mpi>
 c027782:	2800      	cmp	r0, #0
 c027784:	da2d      	bge.n	c0277e2 <ecdsa_sign_det_restartable.isra.0+0xd6>
    MBEDTLS_MPI_CHK( derive_mpi( grp, &h, buf, blen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &h, data + grp_len, grp_len ) );
 c027786:	ab23      	add	r3, sp, #140	; 0x8c
 c027788:	4622      	mov	r2, r4
 c02778a:	1919      	adds	r1, r3, r4
 c02778c:	a807      	add	r0, sp, #28
 c02778e:	f7fd fbea 	bl	c024f66 <mbedtls_mpi_write_binary>
 c027792:	4680      	mov	r8, r0
 c027794:	b9d8      	cbnz	r0, c0277ce <ecdsa_sign_det_restartable.isra.0+0xc2>
    mbedtls_hmac_drbg_seed_buf( p_rng, md_info, data, 2 * grp_len );
 c027796:	0063      	lsls	r3, r4, #1
 c027798:	aa23      	add	r2, sp, #140	; 0x8c
 c02779a:	4649      	mov	r1, r9
 c02779c:	4630      	mov	r0, r6
 c02779e:	f000 fa9d 	bl	c027cdc <mbedtls_hmac_drbg_seed_buf>
        rs_ctx->det->state = ecdsa_det_sign;

sign:
#endif
#if defined(MBEDTLS_ECDSA_SIGN_ALT)
    ret = mbedtls_ecdsa_sign( grp, r, s, d, buf, blen,
 c0277a2:	4b16      	ldr	r3, [pc, #88]	; (c0277fc <ecdsa_sign_det_restartable.isra.0+0xf0>)
 c0277a4:	9603      	str	r6, [sp, #12]
 c0277a6:	9302      	str	r3, [sp, #8]
 c0277a8:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 c0277aa:	465a      	mov	r2, fp
 c0277ac:	9301      	str	r3, [sp, #4]
 c0277ae:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 c0277b0:	4651      	mov	r1, sl
 c0277b2:	9300      	str	r3, [sp, #0]
 c0277b4:	4628      	mov	r0, r5
 c0277b6:	463b      	mov	r3, r7
 c0277b8:	f7f5 facc 	bl	c01cd54 <mbedtls_ecdsa_sign>
 c0277bc:	4680      	mov	r8, r0
 c0277be:	e006      	b.n	c0277ce <ecdsa_sign_det_restartable.isra.0+0xc2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 c0277c0:	1a59      	subs	r1, r3, r1
 c0277c2:	a807      	add	r0, sp, #28
 c0277c4:	f7fd fc4c 	bl	c025060 <mbedtls_mpi_shift_r>
 c0277c8:	4680      	mov	r8, r0
 c0277ca:	2800      	cmp	r0, #0
 c0277cc:	d0d3      	beq.n	c027776 <ecdsa_sign_det_restartable.isra.0+0x6a>
    ret = ecdsa_sign_restartable( grp, r, s, d, buf, blen,
                      mbedtls_hmac_drbg_random, p_rng, rs_ctx );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */

cleanup:
    mbedtls_hmac_drbg_free( &rng_ctx );
 c0277ce:	a80a      	add	r0, sp, #40	; 0x28
 c0277d0:	f000 fb4b 	bl	c027e6a <mbedtls_hmac_drbg_free>
    mbedtls_mpi_free( &h );
 c0277d4:	a807      	add	r0, sp, #28
 c0277d6:	f7fd f9d5 	bl	c024b84 <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( det );

    return( ret );
}
 c0277da:	4640      	mov	r0, r8
 c0277dc:	b045      	add	sp, #276	; 0x114
 c0277de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 c0277e2:	a907      	add	r1, sp, #28
 c0277e4:	4642      	mov	r2, r8
 c0277e6:	4608      	mov	r0, r1
 c0277e8:	f7fd fe21 	bl	c02542e <mbedtls_mpi_sub_mpi>
    MBEDTLS_MPI_CHK( derive_mpi( grp, &h, buf, blen ) );
 c0277ec:	4680      	mov	r8, r0
 c0277ee:	2800      	cmp	r0, #0
 c0277f0:	d0c9      	beq.n	c027786 <ecdsa_sign_det_restartable.isra.0+0x7a>
 c0277f2:	e7ec      	b.n	c0277ce <ecdsa_sign_det_restartable.isra.0+0xc2>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c0277f4:	f8df 8008 	ldr.w	r8, [pc, #8]	; c027800 <ecdsa_sign_det_restartable.isra.0+0xf4>
 c0277f8:	e7ef      	b.n	c0277da <ecdsa_sign_det_restartable.isra.0+0xce>
 c0277fa:	bf00      	nop
 c0277fc:	0c027e5b 	.word	0x0c027e5b
 c027800:	ffffb080 	.word	0xffffb080

0c027804 <mbedtls_ecdsa_sign_det>:
 * Deterministic signature wrapper
 */
int mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
                    const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                    mbedtls_md_type_t md_alg )
{
 c027804:	b410      	push	{r4}
 c027806:	f89d 400c 	ldrb.w	r4, [sp, #12]
    ECDSA_VALIDATE_RET( r     != NULL );
    ECDSA_VALIDATE_RET( s     != NULL );
    ECDSA_VALIDATE_RET( d     != NULL );
    ECDSA_VALIDATE_RET( buf   != NULL || blen == 0 );

    return( ecdsa_sign_det_restartable( grp, r, s, d, buf, blen, md_alg, NULL ) );
 c02780a:	9403      	str	r4, [sp, #12]
}
 c02780c:	bc10      	pop	{r4}
    return( ecdsa_sign_det_restartable( grp, r, s, d, buf, blen, md_alg, NULL ) );
 c02780e:	f7ff bf7d 	b.w	c02770c <ecdsa_sign_det_restartable.isra.0>

0c027812 <mbedtls_ecdsa_write_signature_restartable>:
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 c027812:	b5f0      	push	{r4, r5, r6, r7, lr}
 c027814:	460f      	mov	r7, r1
 c027816:	4615      	mov	r5, r2
 c027818:	461e      	mov	r6, r3
 c02781a:	4604      	mov	r4, r0
 c02781c:	b0af      	sub	sp, #188	; 0xbc
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
 c02781e:	a805      	add	r0, sp, #20
 c027820:	f7fd f9aa 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 c027824:	a808      	add	r0, sp, #32
 c027826:	f7fd f9a7 	bl	c024b78 <mbedtls_mpi_init>

#if defined(MBEDTLS_ECDSA_DETERMINISTIC)
    (void) f_rng;
    (void) p_rng;

    MBEDTLS_MPI_CHK( ecdsa_sign_det_restartable( &ctx->grp, &r, &s, &ctx->d,
 c02782a:	e9cd 6701 	strd	r6, r7, [sp, #4]
 c02782e:	9500      	str	r5, [sp, #0]
 c027830:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 c027834:	aa08      	add	r2, sp, #32
 c027836:	a905      	add	r1, sp, #20
 c027838:	4620      	mov	r0, r4
 c02783a:	f7ff ff67 	bl	c02770c <ecdsa_sign_det_restartable.isra.0>
 c02783e:	4607      	mov	r7, r0
 c027840:	bb60      	cbnz	r0, c02789c <mbedtls_ecdsa_write_signature_restartable+0x8a>
    unsigned char *p = buf + sizeof( buf );
 c027842:	ad2e      	add	r5, sp, #184	; 0xb8
 c027844:	f10d 03b7 	add.w	r3, sp, #183	; 0xb7
 c027848:	f845 3da8 	str.w	r3, [r5, #-168]!
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 c02784c:	aa08      	add	r2, sp, #32
 c02784e:	a90b      	add	r1, sp, #44	; 0x2c
 c027850:	4628      	mov	r0, r5
 c027852:	f7fc fd87 	bl	c024364 <mbedtls_asn1_write_mpi>
 c027856:	1e04      	subs	r4, r0, #0
 c027858:	db1f      	blt.n	c02789a <mbedtls_ecdsa_write_signature_restartable+0x88>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
 c02785a:	aa05      	add	r2, sp, #20
 c02785c:	a90b      	add	r1, sp, #44	; 0x2c
 c02785e:	4628      	mov	r0, r5
 c027860:	f7fc fd80 	bl	c024364 <mbedtls_asn1_write_mpi>
 c027864:	2800      	cmp	r0, #0
 c027866:	db22      	blt.n	c0278ae <mbedtls_ecdsa_write_signature_restartable+0x9c>
 c027868:	1826      	adds	r6, r4, r0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 c02786a:	4632      	mov	r2, r6
 c02786c:	a90b      	add	r1, sp, #44	; 0x2c
 c02786e:	4628      	mov	r0, r5
 c027870:	f7fc fce1 	bl	c024236 <mbedtls_asn1_write_len>
 c027874:	1e04      	subs	r4, r0, #0
 c027876:	db10      	blt.n	c02789a <mbedtls_ecdsa_write_signature_restartable+0x88>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 c027878:	2230      	movs	r2, #48	; 0x30
 c02787a:	a90b      	add	r1, sp, #44	; 0x2c
 c02787c:	4628      	mov	r0, r5
 c02787e:	f7fc fd4e 	bl	c02431e <mbedtls_asn1_write_tag>
 c027882:	2800      	cmp	r0, #0
 c027884:	db13      	blt.n	c0278ae <mbedtls_ecdsa_write_signature_restartable+0x9c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 c027886:	4434      	add	r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 c027888:	4404      	add	r4, r0
    memcpy( sig, p, len );
 c02788a:	4622      	mov	r2, r4
 c02788c:	9904      	ldr	r1, [sp, #16]
 c02788e:	9834      	ldr	r0, [sp, #208]	; 0xd0
 c027890:	f7f0 f875 	bl	c01797e <memcpy>
    *slen = len;
 c027894:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 c027896:	601c      	str	r4, [r3, #0]
    return( 0 );
 c027898:	463c      	mov	r4, r7
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng, rs_ctx ) );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */
#endif /* MBEDTLS_ECDSA_DETERMINISTIC */

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
 c02789a:	4627      	mov	r7, r4

cleanup:
    mbedtls_mpi_free( &r );
 c02789c:	a805      	add	r0, sp, #20
 c02789e:	f7fd f971 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 c0278a2:	a808      	add	r0, sp, #32
 c0278a4:	f7fd f96e 	bl	c024b84 <mbedtls_mpi_free>

    return( ret );
}
 c0278a8:	4638      	mov	r0, r7
 c0278aa:	b02f      	add	sp, #188	; 0xbc
 c0278ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 c0278ae:	4604      	mov	r4, r0
 c0278b0:	e7f3      	b.n	c02789a <mbedtls_ecdsa_write_signature_restartable+0x88>

0c0278b2 <mbedtls_ecdsa_write_signature>:
                                 mbedtls_md_type_t md_alg,
                                 const unsigned char *hash, size_t hlen,
                                 unsigned char *sig, size_t *slen,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 c0278b2:	b510      	push	{r4, lr}
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );
    return( mbedtls_ecdsa_write_signature_restartable(
 c0278b4:	2400      	movs	r4, #0
{
 c0278b6:	b086      	sub	sp, #24
    return( mbedtls_ecdsa_write_signature_restartable(
 c0278b8:	9404      	str	r4, [sp, #16]
 c0278ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 c0278bc:	9403      	str	r4, [sp, #12]
 c0278be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 c0278c0:	9402      	str	r4, [sp, #8]
 c0278c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 c0278c4:	9401      	str	r4, [sp, #4]
 c0278c6:	9c08      	ldr	r4, [sp, #32]
 c0278c8:	9400      	str	r4, [sp, #0]
 c0278ca:	f7ff ffa2 	bl	c027812 <mbedtls_ecdsa_write_signature_restartable>
                ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
}
 c0278ce:	b006      	add	sp, #24
 c0278d0:	bd10      	pop	{r4, pc}
	...

0c0278d4 <mbedtls_ecdsa_read_signature_restartable>:
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 c0278d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c0278d8:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char *p = (unsigned char *) sig;
    const unsigned char *end = sig + slen;
 c0278da:	9d12      	ldr	r5, [sp, #72]	; 0x48
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
 c0278dc:	af04      	add	r7, sp, #16
{
 c0278de:	4604      	mov	r4, r0
    mbedtls_mpi_init( &s );
 c0278e0:	ae07      	add	r6, sp, #28
    mbedtls_mpi_init( &r );
 c0278e2:	4638      	mov	r0, r7
    const unsigned char *end = sig + slen;
 c0278e4:	441d      	add	r5, r3
{
 c0278e6:	4688      	mov	r8, r1
 c0278e8:	4691      	mov	r9, r2
    unsigned char *p = (unsigned char *) sig;
 c0278ea:	9302      	str	r3, [sp, #8]
    mbedtls_mpi_init( &r );
 c0278ec:	f7fd f944 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 c0278f0:	4630      	mov	r0, r6
 c0278f2:	f7fd f941 	bl	c024b78 <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c0278f6:	2330      	movs	r3, #48	; 0x30
 c0278f8:	aa03      	add	r2, sp, #12
 c0278fa:	4629      	mov	r1, r5
 c0278fc:	a802      	add	r0, sp, #8
 c0278fe:	f7fc fbd6 	bl	c0240ae <mbedtls_asn1_get_tag>
 c027902:	b158      	cbz	r0, c02791c <mbedtls_ecdsa_read_signature_restartable+0x48>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 c027904:	f5a0 449f 	sub.w	r4, r0, #20352	; 0x4f80
     * error code if the valid signature is followed by more data. */
    if( p != end )
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;

cleanup:
    mbedtls_mpi_free( &r );
 c027908:	4638      	mov	r0, r7
 c02790a:	f7fd f93b 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 c02790e:	4630      	mov	r0, r6
 c027910:	f7fd f938 	bl	c024b84 <mbedtls_mpi_free>

    return( ret );
}
 c027914:	4620      	mov	r0, r4
 c027916:	b00b      	add	sp, #44	; 0x2c
 c027918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( p + len != end )
 c02791c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 c027920:	4413      	add	r3, r2
 c027922:	429d      	cmp	r5, r3
 c027924:	d11f      	bne.n	c027966 <mbedtls_ecdsa_read_signature_restartable+0x92>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 c027926:	463a      	mov	r2, r7
 c027928:	4629      	mov	r1, r5
 c02792a:	a802      	add	r0, sp, #8
 c02792c:	f7fc fbf7 	bl	c02411e <mbedtls_asn1_get_mpi>
 c027930:	2800      	cmp	r0, #0
 c027932:	d1e7      	bne.n	c027904 <mbedtls_ecdsa_read_signature_restartable+0x30>
 c027934:	4632      	mov	r2, r6
 c027936:	4629      	mov	r1, r5
 c027938:	a802      	add	r0, sp, #8
 c02793a:	f7fc fbf0 	bl	c02411e <mbedtls_asn1_get_mpi>
 c02793e:	2800      	cmp	r0, #0
 c027940:	d1e0      	bne.n	c027904 <mbedtls_ecdsa_read_signature_restartable+0x30>
    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,
 c027942:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 c027946:	4620      	mov	r0, r4
 c027948:	e9cd 7600 	strd	r7, r6, [sp]
 c02794c:	464a      	mov	r2, r9
 c02794e:	4641      	mov	r1, r8
 c027950:	f7f5 fae8 	bl	c01cf24 <mbedtls_ecdsa_verify>
 c027954:	4604      	mov	r4, r0
 c027956:	2800      	cmp	r0, #0
 c027958:	d1d6      	bne.n	c027908 <mbedtls_ecdsa_read_signature_restartable+0x34>
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
 c02795a:	9a02      	ldr	r2, [sp, #8]
 c02795c:	4b03      	ldr	r3, [pc, #12]	; (c02796c <mbedtls_ecdsa_read_signature_restartable+0x98>)
 c02795e:	42aa      	cmp	r2, r5
 c027960:	bf18      	it	ne
 c027962:	461c      	movne	r4, r3
 c027964:	e7d0      	b.n	c027908 <mbedtls_ecdsa_read_signature_restartable+0x34>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
 c027966:	4c02      	ldr	r4, [pc, #8]	; (c027970 <mbedtls_ecdsa_read_signature_restartable+0x9c>)
 c027968:	e7ce      	b.n	c027908 <mbedtls_ecdsa_read_signature_restartable+0x34>
 c02796a:	bf00      	nop
 c02796c:	ffffb400 	.word	0xffffb400
 c027970:	ffffb01a 	.word	0xffffb01a

0c027974 <mbedtls_ecdsa_read_signature>:
{
 c027974:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ecdsa_read_signature_restartable(
 c027976:	2400      	movs	r4, #0
 c027978:	9401      	str	r4, [sp, #4]
 c02797a:	9c04      	ldr	r4, [sp, #16]
 c02797c:	9400      	str	r4, [sp, #0]
 c02797e:	f7ff ffa9 	bl	c0278d4 <mbedtls_ecdsa_read_signature_restartable>
}
 c027982:	b002      	add	sp, #8
 c027984:	bd10      	pop	{r4, pc}

0c027986 <mbedtls_ecdsa_init>:
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
 c027986:	f7f5 bca5 	b.w	c01d2d4 <mbedtls_ecp_keypair_init>

0c02798a <mbedtls_ecdsa_free>:
/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
    if( ctx == NULL )
 c02798a:	b108      	cbz	r0, c027990 <mbedtls_ecdsa_free+0x6>
        return;

    mbedtls_ecp_keypair_free( ctx );
 c02798c:	f7f5 bd24 	b.w	c01d3d8 <mbedtls_ecp_keypair_free>
}
 c027990:	4770      	bx	lr

0c027992 <mbedtls_ecdsa_from_keypair>:
{
 c027992:	b570      	push	{r4, r5, r6, lr}
 c027994:	4605      	mov	r5, r0
 c027996:	460e      	mov	r6, r1
    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 c027998:	f7f5 fd44 	bl	c01d424 <mbedtls_ecp_group_copy>
 c02799c:	4604      	mov	r4, r0
 c02799e:	b978      	cbnz	r0, c0279c0 <mbedtls_ecdsa_from_keypair+0x2e>
 c0279a0:	f106 01a0 	add.w	r1, r6, #160	; 0xa0
 c0279a4:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 c0279a8:	f7fd f924 	bl	c024bf4 <mbedtls_mpi_copy>
 c0279ac:	4604      	mov	r4, r0
 c0279ae:	b938      	cbnz	r0, c0279c0 <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 c0279b0:	f106 01ac 	add.w	r1, r6, #172	; 0xac
 c0279b4:	f105 00ac 	add.w	r0, r5, #172	; 0xac
 c0279b8:	f7f5 fd1e 	bl	c01d3f8 <mbedtls_ecp_copy>
 c0279bc:	4604      	mov	r4, r0
 c0279be:	b110      	cbz	r0, c0279c6 <mbedtls_ecdsa_from_keypair+0x34>
        mbedtls_ecdsa_free( ctx );
 c0279c0:	4628      	mov	r0, r5
 c0279c2:	f7ff ffe2 	bl	c02798a <mbedtls_ecdsa_free>
}
 c0279c6:	4620      	mov	r0, r4
 c0279c8:	bd70      	pop	{r4, r5, r6, pc}

0c0279ca <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 c0279ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
    const unsigned char *p = data;
    int ret = 0;

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 c0279ce:	2b40      	cmp	r3, #64	; 0x40
{
 c0279d0:	b092      	sub	sp, #72	; 0x48
 c0279d2:	4680      	mov	r8, r0
 c0279d4:	460e      	mov	r6, r1
 c0279d6:	4617      	mov	r7, r2
 c0279d8:	461d      	mov	r5, r3
    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 c0279da:	d909      	bls.n	c0279f0 <entropy_update+0x26>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        if( ( ret = mbedtls_sha512_ret( data, len, tmp, 0 ) ) != 0 )
 c0279dc:	2300      	movs	r3, #0
 c0279de:	aa02      	add	r2, sp, #8
 c0279e0:	4629      	mov	r1, r5
 c0279e2:	4638      	mov	r0, r7
 c0279e4:	f007 f8d1 	bl	c02eb8a <mbedtls_sha512_ret>
 c0279e8:	4604      	mov	r4, r0
 c0279ea:	bb08      	cbnz	r0, c027a30 <entropy_update+0x66>
#else
        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )
            goto cleanup;
#endif
        p = tmp;
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 c0279ec:	2540      	movs	r5, #64	; 0x40
        p = tmp;
 c0279ee:	af02      	add	r7, sp, #8
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    if( ctx->accumulator_started == 0 &&
 c0279f0:	f8d8 1000 	ldr.w	r1, [r8]
    header[0] = source_id;
 c0279f4:	f88d 6004 	strb.w	r6, [sp, #4]
    header[1] = use_len & 0xFF;
 c0279f8:	f88d 5005 	strb.w	r5, [sp, #5]
 c0279fc:	f108 0608 	add.w	r6, r8, #8
    if( ctx->accumulator_started == 0 &&
 c027a00:	b181      	cbz	r1, c027a24 <entropy_update+0x5a>
        ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
        goto cleanup;
    else
        ctx->accumulator_started = 1;
 c027a02:	2301      	movs	r3, #1
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 c027a04:	2202      	movs	r2, #2
        ctx->accumulator_started = 1;
 c027a06:	f8c8 3000 	str.w	r3, [r8]
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 c027a0a:	a901      	add	r1, sp, #4
 c027a0c:	4630      	mov	r0, r6
 c027a0e:	f006 ff2f 	bl	c02e870 <mbedtls_sha512_update_ret>
 c027a12:	4604      	mov	r4, r0
 c027a14:	b960      	cbnz	r0, c027a30 <entropy_update+0x66>
        goto cleanup;
    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );
 c027a16:	462a      	mov	r2, r5
 c027a18:	4639      	mov	r1, r7
 c027a1a:	4630      	mov	r0, r6
 c027a1c:	f006 ff28 	bl	c02e870 <mbedtls_sha512_update_ret>
 c027a20:	4604      	mov	r4, r0
 c027a22:	e005      	b.n	c027a30 <entropy_update+0x66>
    if( ctx->accumulator_started == 0 &&
 c027a24:	4630      	mov	r0, r6
 c027a26:	f005 ffdb 	bl	c02d9e0 <mbedtls_sha512_starts_ret>
 c027a2a:	4604      	mov	r4, r0
 c027a2c:	2800      	cmp	r0, #0
 c027a2e:	d0e8      	beq.n	c027a02 <entropy_update+0x38>
        goto cleanup;
    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );
#endif

cleanup:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 c027a30:	a802      	add	r0, sp, #8
 c027a32:	2140      	movs	r1, #64	; 0x40
 c027a34:	f002 fc34 	bl	c02a2a0 <mbedtls_platform_zeroize>

    return( ret );
}
 c027a38:	4620      	mov	r0, r4
 c027a3a:	b012      	add	sp, #72	; 0x48
 c027a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0c027a40 <entropy_gather_internal>:

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 c027a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret, i, have_one_strong = 0;
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 c027a44:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
{
 c027a48:	b0a3      	sub	sp, #140	; 0x8c
 c027a4a:	4680      	mov	r8, r0
    if( ctx->source_count == 0 )
 c027a4c:	2b00      	cmp	r3, #0
 c027a4e:	d03a      	beq.n	c027ac6 <entropy_gather_internal+0x86>
    int ret, i, have_one_strong = 0;
 c027a50:	2600      	movs	r6, #0
 c027a52:	4604      	mov	r4, r0
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 c027a54:	4637      	mov	r7, r6
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;

        olen = 0;
 c027a56:	46b1      	mov	r9, r6
    for( i = 0; i < ctx->source_count; i++ )
 c027a58:	f8d8 30e0 	ldr.w	r3, [r8, #224]	; 0xe0
 c027a5c:	42bb      	cmp	r3, r7
 c027a5e:	dc0c      	bgt.n	c027a7a <entropy_gather_internal+0x3a>
            ctx->source[i].size += olen;
        }
    }

    if( have_one_strong == 0 )
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 c027a60:	2e00      	cmp	r6, #0
 c027a62:	bf14      	ite	ne
 c027a64:	2500      	movne	r5, #0
 c027a66:	f06f 053c 	mvneq.w	r5, #60	; 0x3c

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 c027a6a:	2180      	movs	r1, #128	; 0x80
 c027a6c:	a802      	add	r0, sp, #8
 c027a6e:	f002 fc17 	bl	c02a2a0 <mbedtls_platform_zeroize>

    return( ret );
}
 c027a72:	4628      	mov	r0, r5
 c027a74:	b023      	add	sp, #140	; 0x8c
 c027a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 c027a7a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 c027a7e:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
            have_one_strong = 1;
 c027a82:	2b01      	cmp	r3, #1
        olen = 0;
 c027a84:	f8cd 9004 	str.w	r9, [sp, #4]
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 c027a88:	ab01      	add	r3, sp, #4
 c027a8a:	f04f 0280 	mov.w	r2, #128	; 0x80
 c027a8e:	a902      	add	r1, sp, #8
 c027a90:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
            have_one_strong = 1;
 c027a94:	bf08      	it	eq
 c027a96:	2601      	moveq	r6, #1
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 c027a98:	47a8      	blx	r5
 c027a9a:	4605      	mov	r5, r0
 c027a9c:	2800      	cmp	r0, #0
 c027a9e:	d1e4      	bne.n	c027a6a <entropy_gather_internal+0x2a>
        if( olen > 0 )
 c027aa0:	9b01      	ldr	r3, [sp, #4]
 c027aa2:	b16b      	cbz	r3, c027ac0 <entropy_gather_internal+0x80>
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 c027aa4:	aa02      	add	r2, sp, #8
 c027aa6:	b2f9      	uxtb	r1, r7
 c027aa8:	4640      	mov	r0, r8
 c027aaa:	f7ff ff8e 	bl	c0279ca <entropy_update>
 c027aae:	4605      	mov	r5, r0
 c027ab0:	2800      	cmp	r0, #0
 c027ab2:	d1de      	bne.n	c027a72 <entropy_gather_internal+0x32>
            ctx->source[i].size += olen;
 c027ab4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 c027ab8:	9a01      	ldr	r2, [sp, #4]
 c027aba:	4413      	add	r3, r2
 c027abc:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    for( i = 0; i < ctx->source_count; i++ )
 c027ac0:	3701      	adds	r7, #1
 c027ac2:	3414      	adds	r4, #20
 c027ac4:	e7c8      	b.n	c027a58 <entropy_gather_internal+0x18>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 c027ac6:	f06f 053f 	mvn.w	r5, #63	; 0x3f
 c027aca:	e7d2      	b.n	c027a72 <entropy_gather_internal+0x32>

0c027acc <mbedtls_entropy_init>:
{
 c027acc:	b538      	push	{r3, r4, r5, lr}
    ctx->source_count = 0;
 c027ace:	2500      	movs	r5, #0
{
 c027ad0:	4604      	mov	r4, r0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 c027ad2:	f44f 72c8 	mov.w	r2, #400	; 0x190
    ctx->source_count = 0;
 c027ad6:	f8c0 50e0 	str.w	r5, [r0, #224]	; 0xe0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 c027ada:	4629      	mov	r1, r5
 c027adc:	30e4      	adds	r0, #228	; 0xe4
 c027ade:	f7ef ff72 	bl	c0179c6 <memset>
    ctx->accumulator_started = 0;
 c027ae2:	4620      	mov	r0, r4
 c027ae4:	f840 5b08 	str.w	r5, [r0], #8
    mbedtls_sha512_init( &ctx->accumulator );
 c027ae8:	f005 ff6a 	bl	c02d9c0 <mbedtls_sha512_init>
    idx = ctx->source_count;
 c027aec:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 c027af0:	2a13      	cmp	r2, #19
 c027af2:	dc0c      	bgt.n	c027b0e <mbedtls_entropy_init+0x42>
    ctx->source[idx].f_source  = f_source;
 c027af4:	2314      	movs	r3, #20
 c027af6:	fb03 4302 	mla	r3, r3, r2, r4
 c027afa:	4905      	ldr	r1, [pc, #20]	; (c027b10 <mbedtls_entropy_init+0x44>)
    ctx->source[idx].strong    = strong;
 c027afc:	2020      	movs	r0, #32
    ctx->source[idx].p_source  = p_source;
 c027afe:	e9c3 1539 	strd	r1, r5, [r3, #228]	; 0xe4
    ctx->source[idx].strong    = strong;
 c027b02:	2101      	movs	r1, #1
    ctx->source_count++;
 c027b04:	440a      	add	r2, r1
    ctx->source[idx].strong    = strong;
 c027b06:	e9c3 013c 	strd	r0, r1, [r3, #240]	; 0xf0
    ctx->source_count++;
 c027b0a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
}
 c027b0e:	bd38      	pop	{r3, r4, r5, pc}
 c027b10:	0c01ef41 	.word	0x0c01ef41

0c027b14 <mbedtls_entropy_free>:
{
 c027b14:	b538      	push	{r3, r4, r5, lr}
 c027b16:	4604      	mov	r4, r0
    ctx->source_count = 0;
 c027b18:	2500      	movs	r5, #0
    mbedtls_sha512_free( &ctx->accumulator );
 c027b1a:	3008      	adds	r0, #8
 c027b1c:	f005 ff54 	bl	c02d9c8 <mbedtls_sha512_free>
    ctx->source_count = 0;
 c027b20:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
    mbedtls_platform_zeroize( ctx->source, sizeof( ctx->source ) );
 c027b24:	f44f 71c8 	mov.w	r1, #400	; 0x190
 c027b28:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 c027b2c:	f002 fbb8 	bl	c02a2a0 <mbedtls_platform_zeroize>
    ctx->accumulator_started = 0;
 c027b30:	6025      	str	r5, [r4, #0]
}
 c027b32:	bd38      	pop	{r3, r4, r5, pc}

0c027b34 <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 c027b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 c027b38:	2a40      	cmp	r2, #64	; 0x40
{
 c027b3a:	b090      	sub	sp, #64	; 0x40
 c027b3c:	4605      	mov	r5, r0
 c027b3e:	4688      	mov	r8, r1
 c027b40:	4617      	mov	r7, r2
    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 c027b42:	d85c      	bhi.n	c027bfe <mbedtls_entropy_func+0xca>
 c027b44:	f44f 7681 	mov.w	r6, #258	; 0x102
    /*
     * Always gather extra entropy before a call
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
 c027b48:	3e01      	subs	r6, #1
 c027b4a:	d055      	beq.n	c027bf8 <mbedtls_entropy_func+0xc4>
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
            goto exit;
        }

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 c027b4c:	4628      	mov	r0, r5
 c027b4e:	f7ff ff77 	bl	c027a40 <entropy_gather_internal>
 c027b52:	4604      	mov	r4, r0
 c027b54:	bbd0      	cbnz	r0, c027bcc <mbedtls_entropy_func+0x98>
 c027b56:	462a      	mov	r2, r5
            goto exit;

        done = 1;
 c027b58:	2101      	movs	r1, #1
        for( i = 0; i < ctx->source_count; i++ )
 c027b5a:	f8d5 c0e0 	ldr.w	ip, [r5, #224]	; 0xe0
 c027b5e:	45a4      	cmp	ip, r4
 c027b60:	dc3c      	bgt.n	c027bdc <mbedtls_entropy_func+0xa8>
            if( ctx->source[i].size < ctx->source[i].threshold )
                done = 0;
    }
    while( ! done );
 c027b62:	2900      	cmp	r1, #0
 c027b64:	d0f0      	beq.n	c027b48 <mbedtls_entropy_func+0x14>

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 c027b66:	2240      	movs	r2, #64	; 0x40
 c027b68:	2100      	movs	r1, #0
 c027b6a:	4668      	mov	r0, sp
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 c027b6c:	f105 0608 	add.w	r6, r5, #8
    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 c027b70:	f7ef ff29 	bl	c0179c6 <memset>
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 c027b74:	4669      	mov	r1, sp
 c027b76:	4630      	mov	r0, r6
 c027b78:	f006 fecd 	bl	c02e916 <mbedtls_sha512_finish_ret>
 c027b7c:	4604      	mov	r4, r0
 c027b7e:	bb28      	cbnz	r0, c027bcc <mbedtls_entropy_func+0x98>
        goto exit;

    /*
     * Reset accumulator and counters and recycle existing entropy
     */
    mbedtls_sha512_free( &ctx->accumulator );
 c027b80:	4630      	mov	r0, r6
 c027b82:	f005 ff21 	bl	c02d9c8 <mbedtls_sha512_free>
    mbedtls_sha512_init( &ctx->accumulator );
 c027b86:	4630      	mov	r0, r6
 c027b88:	f005 ff1a 	bl	c02d9c0 <mbedtls_sha512_init>
    if( ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 c027b8c:	4621      	mov	r1, r4
 c027b8e:	4630      	mov	r0, r6
 c027b90:	f005 ff26 	bl	c02d9e0 <mbedtls_sha512_starts_ret>
 c027b94:	4604      	mov	r4, r0
 c027b96:	b9c8      	cbnz	r0, c027bcc <mbedtls_entropy_func+0x98>
        goto exit;
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, buf,
 c027b98:	2240      	movs	r2, #64	; 0x40
 c027b9a:	4669      	mov	r1, sp
 c027b9c:	4630      	mov	r0, r6
 c027b9e:	f006 fe67 	bl	c02e870 <mbedtls_sha512_update_ret>
 c027ba2:	4604      	mov	r4, r0
 c027ba4:	b990      	cbnz	r0, c027bcc <mbedtls_entropy_func+0x98>
        goto exit;

    /*
     * Perform second SHA-512 on entropy
     */
    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
 c027ba6:	4603      	mov	r3, r0
 c027ba8:	466a      	mov	r2, sp
 c027baa:	2140      	movs	r1, #64	; 0x40
 c027bac:	4668      	mov	r0, sp
 c027bae:	f006 ffec 	bl	c02eb8a <mbedtls_sha512_ret>
 c027bb2:	4604      	mov	r4, r0
 c027bb4:	b950      	cbnz	r0, c027bcc <mbedtls_entropy_func+0x98>
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 c027bb6:	4603      	mov	r3, r0
        ctx->source[i].size = 0;
 c027bb8:	2114      	movs	r1, #20
    for( i = 0; i < ctx->source_count; i++ )
 c027bba:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 c027bbe:	429a      	cmp	r2, r3
 c027bc0:	dc14      	bgt.n	c027bec <mbedtls_entropy_func+0xb8>

    memcpy( output, buf, len );
 c027bc2:	463a      	mov	r2, r7
 c027bc4:	4669      	mov	r1, sp
 c027bc6:	4640      	mov	r0, r8
 c027bc8:	f7ef fed9 	bl	c01797e <memcpy>

    ret = 0;

exit:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 c027bcc:	2140      	movs	r1, #64	; 0x40
 c027bce:	4668      	mov	r0, sp
 c027bd0:	f002 fb66 	bl	c02a2a0 <mbedtls_platform_zeroize>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 c027bd4:	4620      	mov	r0, r4
 c027bd6:	b010      	add	sp, #64	; 0x40
 c027bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                done = 0;
 c027bdc:	e9d2 033b 	ldrd	r0, r3, [r2, #236]	; 0xec
        for( i = 0; i < ctx->source_count; i++ )
 c027be0:	3401      	adds	r4, #1
                done = 0;
 c027be2:	4298      	cmp	r0, r3
 c027be4:	bf38      	it	cc
 c027be6:	2100      	movcc	r1, #0
 c027be8:	3214      	adds	r2, #20
 c027bea:	e7b8      	b.n	c027b5e <mbedtls_entropy_func+0x2a>
        ctx->source[i].size = 0;
 c027bec:	fb01 5603 	mla	r6, r1, r3, r5
    for( i = 0; i < ctx->source_count; i++ )
 c027bf0:	3301      	adds	r3, #1
        ctx->source[i].size = 0;
 c027bf2:	f8c6 00ec 	str.w	r0, [r6, #236]	; 0xec
 c027bf6:	e7e2      	b.n	c027bbe <mbedtls_entropy_func+0x8a>
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 c027bf8:	f06f 043b 	mvn.w	r4, #59	; 0x3b
 c027bfc:	e7e6      	b.n	c027bcc <mbedtls_entropy_func+0x98>
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 c027bfe:	f06f 043b 	mvn.w	r4, #59	; 0x3b
 c027c02:	e7e7      	b.n	c027bd4 <mbedtls_entropy_func+0xa0>

0c027c04 <mbedtls_hmac_drbg_init>:
/*
 * HMAC_DRBG context initialization
 */
void mbedtls_hmac_drbg_init( mbedtls_hmac_drbg_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_hmac_drbg_context ) );
 c027c04:	2264      	movs	r2, #100	; 0x64
 c027c06:	2100      	movs	r1, #0
 c027c08:	f7ef bedd 	b.w	c0179c6 <memset>

0c027c0c <mbedtls_hmac_drbg_update_ret>:
 * HMAC_DRBG update, using optional additional data (10.1.2.2)
 */
int mbedtls_hmac_drbg_update_ret( mbedtls_hmac_drbg_context *ctx,
                                  const unsigned char *additional,
                                  size_t add_len )
{
 c027c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c027c10:	4605      	mov	r5, r0
 c027c12:	b092      	sub	sp, #72	; 0x48
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 c027c14:	6800      	ldr	r0, [r0, #0]
{
 c027c16:	4689      	mov	r9, r1
 c027c18:	4692      	mov	sl, r2
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 c027c1a:	f000 fa67 	bl	c0280ec <mbedtls_md_get_size>
 c027c1e:	4607      	mov	r7, r0
    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;
 c027c20:	f1b9 0f00 	cmp.w	r9, #0
 c027c24:	d00f      	beq.n	c027c46 <mbedtls_hmac_drbg_update_ret+0x3a>
 c027c26:	f1ba 0f00 	cmp.w	sl, #0
 c027c2a:	bf14      	ite	ne
 c027c2c:	2602      	movne	r6, #2
 c027c2e:	2601      	moveq	r6, #1
    unsigned char sep[1];
    unsigned char K[MBEDTLS_MD_MAX_SIZE];
    int ret;

    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 c027c30:	2300      	movs	r3, #0
    {
        /* Step 1 or 4 */
        if( ( ret = mbedtls_md_hmac_reset( &ctx->md_ctx ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
                                            ctx->V, md_len ) ) != 0 )
 c027c32:	f105 080c 	add.w	r8, r5, #12
    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 c027c36:	f88d 3004 	strb.w	r3, [sp, #4]
 c027c3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 c027c3e:	42b3      	cmp	r3, r6
 c027c40:	d303      	bcc.n	c027c4a <mbedtls_hmac_drbg_update_ret+0x3e>
            goto exit;
        if( ( ret = mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V ) ) != 0 )
            goto exit;
    }

exit:
 c027c42:	2400      	movs	r4, #0
 c027c44:	e01c      	b.n	c027c80 <mbedtls_hmac_drbg_update_ret+0x74>
    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;
 c027c46:	2601      	movs	r6, #1
 c027c48:	e7f2      	b.n	c027c30 <mbedtls_hmac_drbg_update_ret+0x24>
        if( ( ret = mbedtls_md_hmac_reset( &ctx->md_ctx ) ) != 0 )
 c027c4a:	4628      	mov	r0, r5
 c027c4c:	f000 fa36 	bl	c0280bc <mbedtls_md_hmac_reset>
 c027c50:	4604      	mov	r4, r0
 c027c52:	b9a8      	cbnz	r0, c027c80 <mbedtls_hmac_drbg_update_ret+0x74>
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
 c027c54:	463a      	mov	r2, r7
 c027c56:	4641      	mov	r1, r8
 c027c58:	4628      	mov	r0, r5
 c027c5a:	f000 f9f1 	bl	c028040 <mbedtls_md_hmac_update>
 c027c5e:	4604      	mov	r4, r0
 c027c60:	b970      	cbnz	r0, c027c80 <mbedtls_hmac_drbg_update_ret+0x74>
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
 c027c62:	2201      	movs	r2, #1
 c027c64:	a901      	add	r1, sp, #4
 c027c66:	4628      	mov	r0, r5
 c027c68:	f000 f9ea 	bl	c028040 <mbedtls_md_hmac_update>
 c027c6c:	4604      	mov	r4, r0
 c027c6e:	b938      	cbnz	r0, c027c80 <mbedtls_hmac_drbg_update_ret+0x74>
        if( rounds == 2 )
 c027c70:	2e02      	cmp	r6, #2
 c027c72:	d00d      	beq.n	c027c90 <mbedtls_hmac_drbg_update_ret+0x84>
        if( ( ret = mbedtls_md_hmac_finish( &ctx->md_ctx, K ) ) != 0 )
 c027c74:	a902      	add	r1, sp, #8
 c027c76:	4628      	mov	r0, r5
 c027c78:	f000 f9f2 	bl	c028060 <mbedtls_md_hmac_finish>
 c027c7c:	4604      	mov	r4, r0
 c027c7e:	b180      	cbz	r0, c027ca2 <mbedtls_hmac_drbg_update_ret+0x96>
    mbedtls_platform_zeroize( K, sizeof( K ) );
 c027c80:	a802      	add	r0, sp, #8
 c027c82:	2140      	movs	r1, #64	; 0x40
 c027c84:	f002 fb0c 	bl	c02a2a0 <mbedtls_platform_zeroize>
    return( ret );
}
 c027c88:	4620      	mov	r0, r4
 c027c8a:	b012      	add	sp, #72	; 0x48
 c027c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
 c027c90:	4652      	mov	r2, sl
 c027c92:	4649      	mov	r1, r9
 c027c94:	4628      	mov	r0, r5
 c027c96:	f000 f9d3 	bl	c028040 <mbedtls_md_hmac_update>
 c027c9a:	4604      	mov	r4, r0
 c027c9c:	2800      	cmp	r0, #0
 c027c9e:	d0e9      	beq.n	c027c74 <mbedtls_hmac_drbg_update_ret+0x68>
 c027ca0:	e7ee      	b.n	c027c80 <mbedtls_hmac_drbg_update_ret+0x74>
        if( ( ret = mbedtls_md_hmac_starts( &ctx->md_ctx, K, md_len ) ) != 0 )
 c027ca2:	463a      	mov	r2, r7
 c027ca4:	a902      	add	r1, sp, #8
 c027ca6:	4628      	mov	r0, r5
 c027ca8:	f000 f966 	bl	c027f78 <mbedtls_md_hmac_starts>
 c027cac:	4604      	mov	r4, r0
 c027cae:	2800      	cmp	r0, #0
 c027cb0:	d1e6      	bne.n	c027c80 <mbedtls_hmac_drbg_update_ret+0x74>
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
 c027cb2:	463a      	mov	r2, r7
 c027cb4:	4641      	mov	r1, r8
 c027cb6:	4628      	mov	r0, r5
 c027cb8:	f000 f9c2 	bl	c028040 <mbedtls_md_hmac_update>
 c027cbc:	4604      	mov	r4, r0
 c027cbe:	2800      	cmp	r0, #0
 c027cc0:	d1de      	bne.n	c027c80 <mbedtls_hmac_drbg_update_ret+0x74>
        if( ( ret = mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V ) ) != 0 )
 c027cc2:	4641      	mov	r1, r8
 c027cc4:	4628      	mov	r0, r5
 c027cc6:	f000 f9cb 	bl	c028060 <mbedtls_md_hmac_finish>
 c027cca:	4604      	mov	r4, r0
 c027ccc:	2800      	cmp	r0, #0
 c027cce:	d1d7      	bne.n	c027c80 <mbedtls_hmac_drbg_update_ret+0x74>
    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 c027cd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 c027cd4:	3301      	adds	r3, #1
 c027cd6:	f88d 3004 	strb.w	r3, [sp, #4]
 c027cda:	e7ae      	b.n	c027c3a <mbedtls_hmac_drbg_update_ret+0x2e>

0c027cdc <mbedtls_hmac_drbg_seed_buf>:
 * Simplified HMAC_DRBG initialisation (for use with deterministic ECDSA)
 */
int mbedtls_hmac_drbg_seed_buf( mbedtls_hmac_drbg_context *ctx,
                        const mbedtls_md_info_t * md_info,
                        const unsigned char *data, size_t data_len )
{
 c027cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c027ce0:	4617      	mov	r7, r2
    int ret;

    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
 c027ce2:	2201      	movs	r2, #1
{
 c027ce4:	4604      	mov	r4, r0
 c027ce6:	460e      	mov	r6, r1
 c027ce8:	4698      	mov	r8, r3
    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
 c027cea:	f000 f8f7 	bl	c027edc <mbedtls_md_setup>
 c027cee:	b9c8      	cbnz	r0, c027d24 <mbedtls_hmac_drbg_seed_buf+0x48>
     * Set initial working state.
     * Use the V memory location, which is currently all 0, to initialize the
     * MD context with an all-zero key. Then set V to its initial value.
     */
    if( ( ret = mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V,
                                        mbedtls_md_get_size( md_info ) ) ) != 0 )
 c027cf0:	4630      	mov	r0, r6
 c027cf2:	f000 f9fb 	bl	c0280ec <mbedtls_md_get_size>
    if( ( ret = mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V,
 c027cf6:	f104 050c 	add.w	r5, r4, #12
 c027cfa:	4602      	mov	r2, r0
 c027cfc:	4629      	mov	r1, r5
 c027cfe:	4620      	mov	r0, r4
 c027d00:	f000 f93a 	bl	c027f78 <mbedtls_md_hmac_starts>
 c027d04:	b970      	cbnz	r0, c027d24 <mbedtls_hmac_drbg_seed_buf+0x48>
        return( ret );
    memset( ctx->V, 0x01, mbedtls_md_get_size( md_info ) );
 c027d06:	4630      	mov	r0, r6
 c027d08:	f000 f9f0 	bl	c0280ec <mbedtls_md_get_size>
 c027d0c:	2101      	movs	r1, #1
 c027d0e:	4602      	mov	r2, r0
 c027d10:	4628      	mov	r0, r5
 c027d12:	f7ef fe58 	bl	c0179c6 <memset>

    if( ( ret = mbedtls_hmac_drbg_update_ret( ctx, data, data_len ) ) != 0 )
 c027d16:	4642      	mov	r2, r8
 c027d18:	4639      	mov	r1, r7
 c027d1a:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 c027d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if( ( ret = mbedtls_hmac_drbg_update_ret( ctx, data, data_len ) ) != 0 )
 c027d20:	f7ff bf74 	b.w	c027c0c <mbedtls_hmac_drbg_update_ret>
}
 c027d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0c027d28 <mbedtls_hmac_drbg_reseed>:
/*
 * HMAC_DRBG reseeding: 10.1.2.4 (arabic) + 9.2 (Roman)
 */
int mbedtls_hmac_drbg_reseed( mbedtls_hmac_drbg_context *ctx,
                      const unsigned char *additional, size_t len )
{
 c027d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char seed[MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT];
    size_t seedlen;
    int ret;

    /* III. Check input length */
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 c027d2a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 c027d2e:	b0e1      	sub	sp, #388	; 0x184
 c027d30:	4604      	mov	r4, r0
 c027d32:	460f      	mov	r7, r1
 c027d34:	4615      	mov	r5, r2
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 c027d36:	d82a      	bhi.n	c027d8e <mbedtls_hmac_drbg_reseed+0x66>
        ctx->entropy_len + len > MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT )
 c027d38:	6d06      	ldr	r6, [r0, #80]	; 0x50
 c027d3a:	18b3      	adds	r3, r6, r2
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 c027d3c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 c027d40:	d825      	bhi.n	c027d8e <mbedtls_hmac_drbg_reseed+0x66>
    {
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
    }

    memset( seed, 0, MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT );
 c027d42:	f44f 72c0 	mov.w	r2, #384	; 0x180
 c027d46:	2100      	movs	r1, #0
 c027d48:	4668      	mov	r0, sp
 c027d4a:	f7ef fe3c 	bl	c0179c6 <memset>

    /* IV. Gather entropy_len bytes of entropy for the seed */
    if( ( ret = ctx->f_entropy( ctx->p_entropy,
 c027d4e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 c027d50:	4632      	mov	r2, r6
 c027d52:	4669      	mov	r1, sp
 c027d54:	6e20      	ldr	r0, [r4, #96]	; 0x60
 c027d56:	4798      	blx	r3
 c027d58:	b9e0      	cbnz	r0, c027d94 <mbedtls_hmac_drbg_reseed+0x6c>
                                seed, ctx->entropy_len ) ) != 0 )
        return( MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED );

    seedlen = ctx->entropy_len;
 c027d5a:	6d26      	ldr	r6, [r4, #80]	; 0x50

    /* 1. Concatenate entropy and additional data if any */
    if( additional != NULL && len != 0 )
 c027d5c:	b13f      	cbz	r7, c027d6e <mbedtls_hmac_drbg_reseed+0x46>
 c027d5e:	b135      	cbz	r5, c027d6e <mbedtls_hmac_drbg_reseed+0x46>
    {
        memcpy( seed + seedlen, additional, len );
 c027d60:	eb0d 0006 	add.w	r0, sp, r6
 c027d64:	462a      	mov	r2, r5
 c027d66:	4639      	mov	r1, r7
 c027d68:	f7ef fe09 	bl	c01797e <memcpy>
        seedlen += len;
 c027d6c:	442e      	add	r6, r5
    }

    /* 2. Update state */
    if( ( ret = mbedtls_hmac_drbg_update_ret( ctx, seed, seedlen ) ) != 0 )
 c027d6e:	4632      	mov	r2, r6
 c027d70:	4669      	mov	r1, sp
 c027d72:	4620      	mov	r0, r4
 c027d74:	f7ff ff4a 	bl	c027c0c <mbedtls_hmac_drbg_update_ret>
 c027d78:	4605      	mov	r5, r0
 c027d7a:	b908      	cbnz	r0, c027d80 <mbedtls_hmac_drbg_reseed+0x58>
        goto exit;

    /* 3. Reset reseed_counter */
    ctx->reseed_counter = 1;
 c027d7c:	2301      	movs	r3, #1
 c027d7e:	64e3      	str	r3, [r4, #76]	; 0x4c

exit:
    /* 4. Done */
    mbedtls_platform_zeroize( seed, seedlen );
 c027d80:	4631      	mov	r1, r6
 c027d82:	4668      	mov	r0, sp
 c027d84:	f002 fa8c 	bl	c02a2a0 <mbedtls_platform_zeroize>
    return( ret );
}
 c027d88:	4628      	mov	r0, r5
 c027d8a:	b061      	add	sp, #388	; 0x184
 c027d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
 c027d8e:	f06f 0504 	mvn.w	r5, #4
 c027d92:	e7f9      	b.n	c027d88 <mbedtls_hmac_drbg_reseed+0x60>
        return( MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED );
 c027d94:	f06f 0508 	mvn.w	r5, #8
 c027d98:	e7f6      	b.n	c027d88 <mbedtls_hmac_drbg_reseed+0x60>

0c027d9a <mbedtls_hmac_drbg_random_with_add>:
 * 10.1.2.5 (arabic) + 9.3 (Roman)
 */
int mbedtls_hmac_drbg_random_with_add( void *p_rng,
                               unsigned char *output, size_t out_len,
                               const unsigned char *additional, size_t add_len )
{
 c027d9a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c027d9e:	4616      	mov	r6, r2
 c027da0:	4604      	mov	r4, r0
    int ret;
    mbedtls_hmac_drbg_context *ctx = (mbedtls_hmac_drbg_context *) p_rng;
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 c027da2:	6800      	ldr	r0, [r0, #0]
{
 c027da4:	4688      	mov	r8, r1
 c027da6:	461f      	mov	r7, r3
 c027da8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 c027daa:	f000 f99f 	bl	c0280ec <mbedtls_md_get_size>
    size_t left = out_len;
    unsigned char *out = output;

    /* II. Check request length */
    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )
 c027dae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 c027db2:	4683      	mov	fp, r0
    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )
 c027db4:	d84b      	bhi.n	c027e4e <mbedtls_hmac_drbg_random_with_add+0xb4>
        return( MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG );

    /* III. Check input length */
    if( add_len > MBEDTLS_HMAC_DRBG_MAX_INPUT )
 c027db6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 c027dba:	d84b      	bhi.n	c027e54 <mbedtls_hmac_drbg_random_with_add+0xba>
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );

    /* 1. (aka VII and IX) Check reseed counter and PR */
    if( ctx->f_entropy != NULL && /* For no-reseeding instances */
 c027dbc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 c027dbe:	b1d3      	cbz	r3, c027df6 <mbedtls_hmac_drbg_random_with_add+0x5c>
 c027dc0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 c027dc2:	2b01      	cmp	r3, #1
 c027dc4:	d003      	beq.n	c027dce <mbedtls_hmac_drbg_random_with_add+0x34>
        ( ctx->prediction_resistance == MBEDTLS_HMAC_DRBG_PR_ON ||
 c027dc6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 c027dc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 c027dca:	429a      	cmp	r2, r3
 c027dcc:	dd13      	ble.n	c027df6 <mbedtls_hmac_drbg_random_with_add+0x5c>
          ctx->reseed_counter > ctx->reseed_interval ) )
    {
        if( ( ret = mbedtls_hmac_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 c027dce:	462a      	mov	r2, r5
 c027dd0:	4639      	mov	r1, r7
 c027dd2:	4620      	mov	r0, r4
 c027dd4:	f7ff ffa8 	bl	c027d28 <mbedtls_hmac_drbg_reseed>
 c027dd8:	b9c0      	cbnz	r0, c027e0c <mbedtls_hmac_drbg_random_with_add+0x72>
            return( ret );

        add_len = 0; /* VII.4 */
 c027dda:	2500      	movs	r5, #0
        size_t use_len = left > md_len ? md_len : left;

        if( ( ret = mbedtls_md_hmac_reset( &ctx->md_ctx ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
                                            ctx->V, md_len ) ) != 0 )
 c027ddc:	f104 090c 	add.w	r9, r4, #12
    while( left != 0 )
 c027de0:	b9b6      	cbnz	r6, c027e10 <mbedtls_hmac_drbg_random_with_add+0x76>
        out += use_len;
        left -= use_len;
    }

    /* 6. Update */
    if( ( ret = mbedtls_hmac_drbg_update_ret( ctx,
 c027de2:	462a      	mov	r2, r5
 c027de4:	4639      	mov	r1, r7
 c027de6:	4620      	mov	r0, r4
 c027de8:	f7ff ff10 	bl	c027c0c <mbedtls_hmac_drbg_update_ret>
 c027dec:	b970      	cbnz	r0, c027e0c <mbedtls_hmac_drbg_random_with_add+0x72>
                                              additional, add_len ) ) != 0 )
        goto exit;

    /* 7. Update reseed counter */
    ctx->reseed_counter++;
 c027dee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 c027df0:	3301      	adds	r3, #1
 c027df2:	64e3      	str	r3, [r4, #76]	; 0x4c
 c027df4:	e00a      	b.n	c027e0c <mbedtls_hmac_drbg_random_with_add+0x72>
    if( additional != NULL && add_len != 0 )
 c027df6:	2f00      	cmp	r7, #0
 c027df8:	d0f0      	beq.n	c027ddc <mbedtls_hmac_drbg_random_with_add+0x42>
 c027dfa:	2d00      	cmp	r5, #0
 c027dfc:	d0ed      	beq.n	c027dda <mbedtls_hmac_drbg_random_with_add+0x40>
        if( ( ret = mbedtls_hmac_drbg_update_ret( ctx,
 c027dfe:	462a      	mov	r2, r5
 c027e00:	4639      	mov	r1, r7
 c027e02:	4620      	mov	r0, r4
 c027e04:	f7ff ff02 	bl	c027c0c <mbedtls_hmac_drbg_update_ret>
 c027e08:	2800      	cmp	r0, #0
 c027e0a:	d0e7      	beq.n	c027ddc <mbedtls_hmac_drbg_random_with_add+0x42>

exit:
    /* 8. Done */
    return( ret );
}
 c027e0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_t use_len = left > md_len ? md_len : left;
 c027e10:	455e      	cmp	r6, fp
        if( ( ret = mbedtls_md_hmac_reset( &ctx->md_ctx ) ) != 0 )
 c027e12:	4620      	mov	r0, r4
        size_t use_len = left > md_len ? md_len : left;
 c027e14:	46b2      	mov	sl, r6
 c027e16:	bf28      	it	cs
 c027e18:	46da      	movcs	sl, fp
        if( ( ret = mbedtls_md_hmac_reset( &ctx->md_ctx ) ) != 0 )
 c027e1a:	f000 f94f 	bl	c0280bc <mbedtls_md_hmac_reset>
 c027e1e:	2800      	cmp	r0, #0
 c027e20:	d1f4      	bne.n	c027e0c <mbedtls_hmac_drbg_random_with_add+0x72>
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
 c027e22:	465a      	mov	r2, fp
 c027e24:	4649      	mov	r1, r9
 c027e26:	4620      	mov	r0, r4
 c027e28:	f000 f90a 	bl	c028040 <mbedtls_md_hmac_update>
 c027e2c:	2800      	cmp	r0, #0
 c027e2e:	d1ed      	bne.n	c027e0c <mbedtls_hmac_drbg_random_with_add+0x72>
        if( ( ret = mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V ) ) != 0 )
 c027e30:	4649      	mov	r1, r9
 c027e32:	4620      	mov	r0, r4
 c027e34:	f000 f914 	bl	c028060 <mbedtls_md_hmac_finish>
 c027e38:	2800      	cmp	r0, #0
 c027e3a:	d1e7      	bne.n	c027e0c <mbedtls_hmac_drbg_random_with_add+0x72>
        memcpy( out, ctx->V, use_len );
 c027e3c:	4640      	mov	r0, r8
 c027e3e:	4652      	mov	r2, sl
 c027e40:	4649      	mov	r1, r9
 c027e42:	f7ef fd9c 	bl	c01797e <memcpy>
        out += use_len;
 c027e46:	44d0      	add	r8, sl
        left -= use_len;
 c027e48:	eba6 060a 	sub.w	r6, r6, sl
 c027e4c:	e7c8      	b.n	c027de0 <mbedtls_hmac_drbg_random_with_add+0x46>
        return( MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG );
 c027e4e:	f06f 0002 	mvn.w	r0, #2
 c027e52:	e7db      	b.n	c027e0c <mbedtls_hmac_drbg_random_with_add+0x72>
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
 c027e54:	f06f 0004 	mvn.w	r0, #4
 c027e58:	e7d8      	b.n	c027e0c <mbedtls_hmac_drbg_random_with_add+0x72>

0c027e5a <mbedtls_hmac_drbg_random>:
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_hmac_drbg_random_with_add( ctx, output, out_len, NULL, 0 );
 c027e5a:	2300      	movs	r3, #0
{
 c027e5c:	b507      	push	{r0, r1, r2, lr}
    ret = mbedtls_hmac_drbg_random_with_add( ctx, output, out_len, NULL, 0 );
 c027e5e:	9300      	str	r3, [sp, #0]
 c027e60:	f7ff ff9b 	bl	c027d9a <mbedtls_hmac_drbg_random_with_add>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 c027e64:	b003      	add	sp, #12
 c027e66:	f85d fb04 	ldr.w	pc, [sp], #4

0c027e6a <mbedtls_hmac_drbg_free>:

/*
 * Free an HMAC_DRBG context
 */
void mbedtls_hmac_drbg_free( mbedtls_hmac_drbg_context *ctx )
{
 c027e6a:	b510      	push	{r4, lr}
    if( ctx == NULL )
 c027e6c:	4604      	mov	r4, r0
 c027e6e:	b138      	cbz	r0, c027e80 <mbedtls_hmac_drbg_free+0x16>
        return;

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_md_free( &ctx->md_ctx );
 c027e70:	f000 f819 	bl	c027ea6 <mbedtls_md_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_hmac_drbg_context ) );
 c027e74:	4620      	mov	r0, r4
}
 c027e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_hmac_drbg_context ) );
 c027e7a:	2164      	movs	r1, #100	; 0x64
 c027e7c:	f002 ba10 	b.w	c02a2a0 <mbedtls_platform_zeroize>
}
 c027e80:	bd10      	pop	{r4, pc}
	...

0c027e84 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 c027e84:	3804      	subs	r0, #4
 c027e86:	b2c0      	uxtb	r0, r0
 c027e88:	2804      	cmp	r0, #4
 c027e8a:	bf9a      	itte	ls
 c027e8c:	4b02      	ldrls	r3, [pc, #8]	; (c027e98 <mbedtls_md_info_from_type+0x14>)
 c027e8e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 c027e92:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 c027e94:	4770      	bx	lr
 c027e96:	bf00      	nop
 c027e98:	0c035870 	.word	0x0c035870

0c027e9c <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 c027e9c:	2300      	movs	r3, #0
 c027e9e:	6003      	str	r3, [r0, #0]
 c027ea0:	6043      	str	r3, [r0, #4]
 c027ea2:	6083      	str	r3, [r0, #8]
}
 c027ea4:	4770      	bx	lr

0c027ea6 <mbedtls_md_free>:

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 c027ea6:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 c027ea8:	4604      	mov	r4, r0
 c027eaa:	b1a8      	cbz	r0, c027ed8 <mbedtls_md_free+0x32>
 c027eac:	6803      	ldr	r3, [r0, #0]
 c027eae:	b19b      	cbz	r3, c027ed8 <mbedtls_md_free+0x32>
        return;

    if( ctx->md_ctx != NULL )
 c027eb0:	6840      	ldr	r0, [r0, #4]
 c027eb2:	b108      	cbz	r0, c027eb8 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 c027eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c027eb6:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 c027eb8:	68a0      	ldr	r0, [r4, #8]
 c027eba:	b138      	cbz	r0, c027ecc <mbedtls_md_free+0x26>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
 c027ebc:	6823      	ldr	r3, [r4, #0]
 c027ebe:	68d9      	ldr	r1, [r3, #12]
        mbedtls_platform_zeroize( ctx->hmac_ctx,
 c027ec0:	0049      	lsls	r1, r1, #1
 c027ec2:	f002 f9ed 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->hmac_ctx );
 c027ec6:	68a0      	ldr	r0, [r4, #8]
 c027ec8:	f002 f9da 	bl	c02a280 <mbedtls_free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 c027ecc:	4620      	mov	r0, r4
}
 c027ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 c027ed2:	210c      	movs	r1, #12
 c027ed4:	f002 b9e4 	b.w	c02a2a0 <mbedtls_platform_zeroize>
}
 c027ed8:	bd10      	pop	{r4, pc}
	...

0c027edc <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 c027edc:	b570      	push	{r4, r5, r6, lr}
 c027ede:	4604      	mov	r4, r0
 c027ee0:	4616      	mov	r6, r2
    if( md_info == NULL || ctx == NULL )
 c027ee2:	460d      	mov	r5, r1
 c027ee4:	b199      	cbz	r1, c027f0e <mbedtls_md_setup+0x32>
 c027ee6:	b190      	cbz	r0, c027f0e <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 c027ee8:	6a0b      	ldr	r3, [r1, #32]
 c027eea:	4798      	blx	r3
 c027eec:	6060      	str	r0, [r4, #4]
 c027eee:	b148      	cbz	r0, c027f04 <mbedtls_md_setup+0x28>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 c027ef0:	b156      	cbz	r6, c027f08 <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 c027ef2:	68e9      	ldr	r1, [r5, #12]
 c027ef4:	2002      	movs	r0, #2
 c027ef6:	f002 f9bd 	bl	c02a274 <mbedtls_calloc>
 c027efa:	60a0      	str	r0, [r4, #8]
        if( ctx->hmac_ctx == NULL )
 c027efc:	b920      	cbnz	r0, c027f08 <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 c027efe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 c027f00:	6860      	ldr	r0, [r4, #4]
 c027f02:	4798      	blx	r3
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 c027f04:	4803      	ldr	r0, [pc, #12]	; (c027f14 <mbedtls_md_setup+0x38>)
 c027f06:	e001      	b.n	c027f0c <mbedtls_md_setup+0x30>
        }
    }

    ctx->md_info = md_info;

    return( 0 );
 c027f08:	2000      	movs	r0, #0
    ctx->md_info = md_info;
 c027f0a:	6025      	str	r5, [r4, #0]
}
 c027f0c:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c027f0e:	4802      	ldr	r0, [pc, #8]	; (c027f18 <mbedtls_md_setup+0x3c>)
 c027f10:	e7fc      	b.n	c027f0c <mbedtls_md_setup+0x30>
 c027f12:	bf00      	nop
 c027f14:	ffffae80 	.word	0xffffae80
 c027f18:	ffffaf00 	.word	0xffffaf00

0c027f1c <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 c027f1c:	b120      	cbz	r0, c027f28 <mbedtls_md_starts+0xc>
 c027f1e:	6803      	ldr	r3, [r0, #0]
 c027f20:	b113      	cbz	r3, c027f28 <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
 c027f22:	691b      	ldr	r3, [r3, #16]
 c027f24:	6840      	ldr	r0, [r0, #4]
 c027f26:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c027f28:	4800      	ldr	r0, [pc, #0]	; (c027f2c <mbedtls_md_starts+0x10>)
}
 c027f2a:	4770      	bx	lr
 c027f2c:	ffffaf00 	.word	0xffffaf00

0c027f30 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
 c027f30:	b120      	cbz	r0, c027f3c <mbedtls_md_update+0xc>
 c027f32:	6803      	ldr	r3, [r0, #0]
 c027f34:	b113      	cbz	r3, c027f3c <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 c027f36:	695b      	ldr	r3, [r3, #20]
 c027f38:	6840      	ldr	r0, [r0, #4]
 c027f3a:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c027f3c:	4800      	ldr	r0, [pc, #0]	; (c027f40 <mbedtls_md_update+0x10>)
}
 c027f3e:	4770      	bx	lr
 c027f40:	ffffaf00 	.word	0xffffaf00

0c027f44 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
 c027f44:	b120      	cbz	r0, c027f50 <mbedtls_md_finish+0xc>
 c027f46:	6803      	ldr	r3, [r0, #0]
 c027f48:	b113      	cbz	r3, c027f50 <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 c027f4a:	699b      	ldr	r3, [r3, #24]
 c027f4c:	6840      	ldr	r0, [r0, #4]
 c027f4e:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c027f50:	4800      	ldr	r0, [pc, #0]	; (c027f54 <mbedtls_md_finish+0x10>)
}
 c027f52:	4770      	bx	lr
 c027f54:	ffffaf00 	.word	0xffffaf00

0c027f58 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 c027f58:	b430      	push	{r4, r5}
 c027f5a:	460d      	mov	r5, r1
 c027f5c:	4611      	mov	r1, r2
    if( md_info == NULL )
 c027f5e:	b128      	cbz	r0, c027f6c <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 c027f60:	69c4      	ldr	r4, [r0, #28]
 c027f62:	461a      	mov	r2, r3
 c027f64:	4628      	mov	r0, r5
 c027f66:	4623      	mov	r3, r4
}
 c027f68:	bc30      	pop	{r4, r5}
    return( md_info->digest_func( input, ilen, output ) );
 c027f6a:	4718      	bx	r3
}
 c027f6c:	4801      	ldr	r0, [pc, #4]	; (c027f74 <mbedtls_md+0x1c>)
 c027f6e:	bc30      	pop	{r4, r5}
 c027f70:	4770      	bx	lr
 c027f72:	bf00      	nop
 c027f74:	ffffaf00 	.word	0xffffaf00

0c027f78 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 c027f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c027f7c:	460e      	mov	r6, r1
 c027f7e:	b090      	sub	sp, #64	; 0x40
 c027f80:	4617      	mov	r7, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 c027f82:	4604      	mov	r4, r0
 c027f84:	2800      	cmp	r0, #0
 c027f86:	d057      	beq.n	c028038 <mbedtls_md_hmac_starts+0xc0>
 c027f88:	6803      	ldr	r3, [r0, #0]
 c027f8a:	2b00      	cmp	r3, #0
 c027f8c:	d054      	beq.n	c028038 <mbedtls_md_hmac_starts+0xc0>
 c027f8e:	6882      	ldr	r2, [r0, #8]
 c027f90:	2a00      	cmp	r2, #0
 c027f92:	d051      	beq.n	c028038 <mbedtls_md_hmac_starts+0xc0>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 c027f94:	68da      	ldr	r2, [r3, #12]
 c027f96:	42ba      	cmp	r2, r7
 c027f98:	d217      	bcs.n	c027fca <mbedtls_md_hmac_starts+0x52>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 c027f9a:	691b      	ldr	r3, [r3, #16]
 c027f9c:	6840      	ldr	r0, [r0, #4]
 c027f9e:	4798      	blx	r3
 c027fa0:	4605      	mov	r5, r0
 c027fa2:	2800      	cmp	r0, #0
 c027fa4:	d134      	bne.n	c028010 <mbedtls_md_hmac_starts+0x98>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 c027fa6:	6823      	ldr	r3, [r4, #0]
 c027fa8:	463a      	mov	r2, r7
 c027faa:	695b      	ldr	r3, [r3, #20]
 c027fac:	4631      	mov	r1, r6
 c027fae:	6860      	ldr	r0, [r4, #4]
 c027fb0:	4798      	blx	r3
 c027fb2:	4605      	mov	r5, r0
 c027fb4:	bb60      	cbnz	r0, c028010 <mbedtls_md_hmac_starts+0x98>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 c027fb6:	6823      	ldr	r3, [r4, #0]
 c027fb8:	4669      	mov	r1, sp
 c027fba:	699b      	ldr	r3, [r3, #24]
 c027fbc:	6860      	ldr	r0, [r4, #4]
 c027fbe:	4798      	blx	r3
 c027fc0:	4605      	mov	r5, r0
 c027fc2:	bb28      	cbnz	r0, c028010 <mbedtls_md_hmac_starts+0x98>
            goto cleanup;

        keylen = ctx->md_info->size;
        key = sum;
 c027fc4:	466e      	mov	r6, sp
        keylen = ctx->md_info->size;
 c027fc6:	6823      	ldr	r3, [r4, #0]
 c027fc8:	689f      	ldr	r7, [r3, #8]
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 c027fca:	6823      	ldr	r3, [r4, #0]
    ipad = (unsigned char *) ctx->hmac_ctx;
 c027fcc:	f8d4 8008 	ldr.w	r8, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 c027fd0:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 c027fd2:	2136      	movs	r1, #54	; 0x36
 c027fd4:	4640      	mov	r0, r8
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 c027fd6:	eb08 0502 	add.w	r5, r8, r2
    memset( ipad, 0x36, ctx->md_info->block_size );
 c027fda:	f7ef fcf4 	bl	c0179c6 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 c027fde:	6823      	ldr	r3, [r4, #0]
 c027fe0:	215c      	movs	r1, #92	; 0x5c
 c027fe2:	68da      	ldr	r2, [r3, #12]
 c027fe4:	4628      	mov	r0, r5
 c027fe6:	f7ef fcee 	bl	c0179c6 <memset>
 c027fea:	4643      	mov	r3, r8
 c027fec:	3e01      	subs	r6, #1
 c027fee:	1e68      	subs	r0, r5, #1
 c027ff0:	4447      	add	r7, r8

    for( i = 0; i < keylen; i++ )
 c027ff2:	429f      	cmp	r7, r3
 c027ff4:	d114      	bne.n	c028020 <mbedtls_md_hmac_starts+0xa8>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 c027ff6:	6823      	ldr	r3, [r4, #0]
 c027ff8:	6860      	ldr	r0, [r4, #4]
 c027ffa:	691b      	ldr	r3, [r3, #16]
 c027ffc:	4798      	blx	r3
 c027ffe:	4605      	mov	r5, r0
 c028000:	b930      	cbnz	r0, c028010 <mbedtls_md_hmac_starts+0x98>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 c028002:	6823      	ldr	r3, [r4, #0]
 c028004:	4641      	mov	r1, r8
 c028006:	695d      	ldr	r5, [r3, #20]
 c028008:	68da      	ldr	r2, [r3, #12]
 c02800a:	6860      	ldr	r0, [r4, #4]
 c02800c:	47a8      	blx	r5
 c02800e:	4605      	mov	r5, r0
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
 c028010:	2140      	movs	r1, #64	; 0x40
 c028012:	4668      	mov	r0, sp
 c028014:	f002 f944 	bl	c02a2a0 <mbedtls_platform_zeroize>

    return( ret );
}
 c028018:	4628      	mov	r0, r5
 c02801a:	b010      	add	sp, #64	; 0x40
 c02801c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 c028020:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 c028024:	781a      	ldrb	r2, [r3, #0]
 c028026:	404a      	eors	r2, r1
 c028028:	f803 2b01 	strb.w	r2, [r3], #1
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 c02802c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 c028030:	7831      	ldrb	r1, [r6, #0]
 c028032:	404a      	eors	r2, r1
 c028034:	7002      	strb	r2, [r0, #0]
 c028036:	e7dc      	b.n	c027ff2 <mbedtls_md_hmac_starts+0x7a>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c028038:	4d00      	ldr	r5, [pc, #0]	; (c02803c <mbedtls_md_hmac_starts+0xc4>)
 c02803a:	e7ed      	b.n	c028018 <mbedtls_md_hmac_starts+0xa0>
 c02803c:	ffffaf00 	.word	0xffffaf00

0c028040 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 c028040:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 c028042:	b138      	cbz	r0, c028054 <mbedtls_md_hmac_update+0x14>
 c028044:	6803      	ldr	r3, [r0, #0]
 c028046:	b12b      	cbz	r3, c028054 <mbedtls_md_hmac_update+0x14>
 c028048:	6884      	ldr	r4, [r0, #8]
 c02804a:	b11c      	cbz	r4, c028054 <mbedtls_md_hmac_update+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 c02804c:	695b      	ldr	r3, [r3, #20]
 c02804e:	6840      	ldr	r0, [r0, #4]
}
 c028050:	bc10      	pop	{r4}
    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 c028052:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c028054:	4801      	ldr	r0, [pc, #4]	; (c02805c <mbedtls_md_hmac_update+0x1c>)
}
 c028056:	bc10      	pop	{r4}
 c028058:	4770      	bx	lr
 c02805a:	bf00      	nop
 c02805c:	ffffaf00 	.word	0xffffaf00

0c028060 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 c028060:	b5f0      	push	{r4, r5, r6, r7, lr}
 c028062:	460e      	mov	r6, r1
 c028064:	b091      	sub	sp, #68	; 0x44
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 c028066:	4604      	mov	r4, r0
 c028068:	b320      	cbz	r0, c0280b4 <mbedtls_md_hmac_finish+0x54>
 c02806a:	6803      	ldr	r3, [r0, #0]
 c02806c:	b313      	cbz	r3, c0280b4 <mbedtls_md_hmac_finish+0x54>
 c02806e:	6882      	ldr	r2, [r0, #8]
 c028070:	b302      	cbz	r2, c0280b4 <mbedtls_md_hmac_finish+0x54>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 c028072:	68dd      	ldr	r5, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 c028074:	4669      	mov	r1, sp
 c028076:	699b      	ldr	r3, [r3, #24]
 c028078:	6840      	ldr	r0, [r0, #4]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 c02807a:	4415      	add	r5, r2
    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 c02807c:	4798      	blx	r3
 c02807e:	b9b8      	cbnz	r0, c0280b0 <mbedtls_md_hmac_finish+0x50>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 c028080:	6823      	ldr	r3, [r4, #0]
 c028082:	6860      	ldr	r0, [r4, #4]
 c028084:	691b      	ldr	r3, [r3, #16]
 c028086:	4798      	blx	r3
 c028088:	b990      	cbnz	r0, c0280b0 <mbedtls_md_hmac_finish+0x50>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 c02808a:	6823      	ldr	r3, [r4, #0]
 c02808c:	4629      	mov	r1, r5
 c02808e:	695f      	ldr	r7, [r3, #20]
 c028090:	68da      	ldr	r2, [r3, #12]
 c028092:	6860      	ldr	r0, [r4, #4]
 c028094:	47b8      	blx	r7
 c028096:	b958      	cbnz	r0, c0280b0 <mbedtls_md_hmac_finish+0x50>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 c028098:	6823      	ldr	r3, [r4, #0]
 c02809a:	4669      	mov	r1, sp
 c02809c:	695d      	ldr	r5, [r3, #20]
 c02809e:	689a      	ldr	r2, [r3, #8]
 c0280a0:	6860      	ldr	r0, [r4, #4]
 c0280a2:	47a8      	blx	r5
 c0280a4:	b920      	cbnz	r0, c0280b0 <mbedtls_md_hmac_finish+0x50>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 c0280a6:	6823      	ldr	r3, [r4, #0]
 c0280a8:	4631      	mov	r1, r6
 c0280aa:	699b      	ldr	r3, [r3, #24]
 c0280ac:	6860      	ldr	r0, [r4, #4]
 c0280ae:	4798      	blx	r3
}
 c0280b0:	b011      	add	sp, #68	; 0x44
 c0280b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c0280b4:	4800      	ldr	r0, [pc, #0]	; (c0280b8 <mbedtls_md_hmac_finish+0x58>)
 c0280b6:	e7fb      	b.n	c0280b0 <mbedtls_md_hmac_finish+0x50>
 c0280b8:	ffffaf00 	.word	0xffffaf00

0c0280bc <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 c0280bc:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 c0280be:	4604      	mov	r4, r0
 c0280c0:	b180      	cbz	r0, c0280e4 <mbedtls_md_hmac_reset+0x28>
 c0280c2:	6803      	ldr	r3, [r0, #0]
 c0280c4:	b173      	cbz	r3, c0280e4 <mbedtls_md_hmac_reset+0x28>
 c0280c6:	6885      	ldr	r5, [r0, #8]
 c0280c8:	b165      	cbz	r5, c0280e4 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 c0280ca:	691b      	ldr	r3, [r3, #16]
 c0280cc:	6840      	ldr	r0, [r0, #4]
 c0280ce:	4798      	blx	r3
 c0280d0:	b948      	cbnz	r0, c0280e6 <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 c0280d2:	6823      	ldr	r3, [r4, #0]
 c0280d4:	4629      	mov	r1, r5
 c0280d6:	695e      	ldr	r6, [r3, #20]
 c0280d8:	68da      	ldr	r2, [r3, #12]
 c0280da:	6860      	ldr	r0, [r4, #4]
 c0280dc:	4633      	mov	r3, r6
                                       ctx->md_info->block_size ) );
}
 c0280de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 c0280e2:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c0280e4:	4800      	ldr	r0, [pc, #0]	; (c0280e8 <mbedtls_md_hmac_reset+0x2c>)
}
 c0280e6:	bd70      	pop	{r4, r5, r6, pc}
 c0280e8:	ffffaf00 	.word	0xffffaf00

0c0280ec <mbedtls_md_get_size>:
    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 c0280ec:	b100      	cbz	r0, c0280f0 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 c0280ee:	7a00      	ldrb	r0, [r0, #8]
}
 c0280f0:	4770      	bx	lr

0c0280f2 <mbedtls_md_get_type>:

mbedtls_md_type_t mbedtls_md_get_type( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 c0280f2:	b100      	cbz	r0, c0280f6 <mbedtls_md_get_type+0x4>
        return( MBEDTLS_MD_NONE );

    return md_info->type;
 c0280f4:	7800      	ldrb	r0, [r0, #0]
}
 c0280f6:	4770      	bx	lr

0c0280f8 <sha1_process_wrap>:
    mbedtls_free( ctx );
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
 c0280f8:	f7f8 bc6b 	b.w	c0209d2 <mbedtls_internal_sha1_process>

0c0280fc <sha1_clone_wrap>:
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
 c0280fc:	f7f8 bc4c 	b.w	c020998 <mbedtls_sha1_clone>

0c028100 <sha1_ctx_free>:
{
 c028100:	b510      	push	{r4, lr}
 c028102:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 c028104:	f7f8 fc3e 	bl	c020984 <mbedtls_sha1_free>
    mbedtls_free( ctx );
 c028108:	4620      	mov	r0, r4
}
 c02810a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c02810e:	f002 b8b7 	b.w	c02a280 <mbedtls_free>

0c028112 <sha1_ctx_alloc>:
{
 c028112:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 c028114:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 c028118:	2001      	movs	r0, #1
 c02811a:	f002 f8ab 	bl	c02a274 <mbedtls_calloc>
    if( ctx != NULL )
 c02811e:	4604      	mov	r4, r0
 c028120:	b108      	cbz	r0, c028126 <sha1_ctx_alloc+0x14>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 c028122:	f7f8 fc17 	bl	c020954 <mbedtls_sha1_init>
}
 c028126:	4620      	mov	r0, r4
 c028128:	bd10      	pop	{r4, pc}

0c02812a <sha1_finish_wrap>:
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
 c02812a:	f7f8 bcb9 	b.w	c020aa0 <mbedtls_sha1_finish_ret>

0c02812e <sha1_update_wrap>:
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
 c02812e:	f7f8 bc68 	b.w	c020a02 <mbedtls_sha1_update_ret>

0c028132 <sha1_starts_wrap>:
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
 c028132:	f7f8 bc37 	b.w	c0209a4 <mbedtls_sha1_starts_ret>

0c028136 <sha224_process_wrap>:
                    (const mbedtls_sha256_context *) src );
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 c028136:	f7f8 bd10 	b.w	c020b5a <mbedtls_internal_sha256_process>

0c02813a <sha224_clone_wrap>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 c02813a:	f7f8 bced 	b.w	c020b18 <mbedtls_sha256_clone>

0c02813e <sha224_ctx_free>:
{
 c02813e:	b510      	push	{r4, lr}
 c028140:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 c028142:	f7f8 fcdf 	bl	c020b04 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 c028146:	4620      	mov	r0, r4
}
 c028148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c02814c:	f002 b898 	b.w	c02a280 <mbedtls_free>

0c028150 <sha224_ctx_alloc>:
{
 c028150:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 c028152:	f44f 71b8 	mov.w	r1, #368	; 0x170
 c028156:	2001      	movs	r0, #1
 c028158:	f002 f88c 	bl	c02a274 <mbedtls_calloc>
    if( ctx != NULL )
 c02815c:	4604      	mov	r4, r0
 c02815e:	b108      	cbz	r0, c028164 <sha224_ctx_alloc+0x14>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 c028160:	f7f8 fcb8 	bl	c020ad4 <mbedtls_sha256_init>
}
 c028164:	4620      	mov	r0, r4
 c028166:	bd10      	pop	{r4, pc}

0c028168 <sha224_wrap>:
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 c028168:	2301      	movs	r3, #1
 c02816a:	f005 bc08 	b.w	c02d97e <mbedtls_sha256_ret>

0c02816e <sha256_wrap>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 c02816e:	2300      	movs	r3, #0
 c028170:	f005 bc05 	b.w	c02d97e <mbedtls_sha256_ret>

0c028174 <sha224_finish_wrap>:
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 c028174:	f7f8 bd69 	b.w	c020c4a <mbedtls_sha256_finish_ret>

0c028178 <sha224_update_wrap>:
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 c028178:	f7f8 bd0d 	b.w	c020b96 <mbedtls_sha256_update_ret>

0c02817c <sha224_starts_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 c02817c:	2101      	movs	r1, #1
 c02817e:	f7f8 bcd1 	b.w	c020b24 <mbedtls_sha256_starts_ret>

0c028182 <sha256_starts_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 c028182:	2100      	movs	r1, #0
 c028184:	f7f8 bcce 	b.w	c020b24 <mbedtls_sha256_starts_ret>

0c028188 <sha384_process_wrap>:
                    (const mbedtls_sha512_context *) src );
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
 c028188:	f005 bcc6 	b.w	c02db18 <mbedtls_internal_sha512_process>

0c02818c <sha384_clone_wrap>:
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
 c02818c:	f005 bc21 	b.w	c02d9d2 <mbedtls_sha512_clone>

0c028190 <sha384_ctx_free>:
{
 c028190:	b510      	push	{r4, lr}
 c028192:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 c028194:	f005 fc18 	bl	c02d9c8 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 c028198:	4620      	mov	r0, r4
}
 c02819a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c02819e:	f002 b86f 	b.w	c02a280 <mbedtls_free>

0c0281a2 <sha384_ctx_alloc>:
{
 c0281a2:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 c0281a4:	21d8      	movs	r1, #216	; 0xd8
 c0281a6:	2001      	movs	r0, #1
 c0281a8:	f002 f864 	bl	c02a274 <mbedtls_calloc>
    if( ctx != NULL )
 c0281ac:	4604      	mov	r4, r0
 c0281ae:	b108      	cbz	r0, c0281b4 <sha384_ctx_alloc+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 c0281b0:	f005 fc06 	bl	c02d9c0 <mbedtls_sha512_init>
}
 c0281b4:	4620      	mov	r0, r4
 c0281b6:	bd10      	pop	{r4, pc}

0c0281b8 <sha384_wrap>:
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
 c0281b8:	2301      	movs	r3, #1
 c0281ba:	f006 bce6 	b.w	c02eb8a <mbedtls_sha512_ret>

0c0281be <sha512_wrap>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
 c0281be:	2300      	movs	r3, #0
 c0281c0:	f006 bce3 	b.w	c02eb8a <mbedtls_sha512_ret>

0c0281c4 <sha384_finish_wrap>:
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
 c0281c4:	f006 bba7 	b.w	c02e916 <mbedtls_sha512_finish_ret>

0c0281c8 <sha384_update_wrap>:
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
 c0281c8:	f006 bb52 	b.w	c02e870 <mbedtls_sha512_update_ret>

0c0281cc <sha384_starts_wrap>:
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
 c0281cc:	2101      	movs	r1, #1
 c0281ce:	f005 bc07 	b.w	c02d9e0 <mbedtls_sha512_starts_ret>

0c0281d2 <sha512_starts_wrap>:
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
 c0281d2:	2100      	movs	r1, #0
 c0281d4:	f005 bc04 	b.w	c02d9e0 <mbedtls_sha512_starts_ret>

0c0281d8 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
 c0281d8:	6802      	ldr	r2, [r0, #0]
 c0281da:	4b0e      	ldr	r3, [pc, #56]	; (c028214 <verify_header+0x3c>)
 c0281dc:	429a      	cmp	r2, r3
 c0281de:	d115      	bne.n	c02820c <verify_header+0x34>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
 c0281e0:	69c2      	ldr	r2, [r0, #28]
 c0281e2:	f1a3 2310 	sub.w	r3, r3, #268439552	; 0x10001000
 c0281e6:	f1a3 13ef 	sub.w	r3, r3, #15663343	; 0xef00ef
 c0281ea:	429a      	cmp	r2, r3
 c0281ec:	d10e      	bne.n	c02820c <verify_header+0x34>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
 c0281ee:	6883      	ldr	r3, [r0, #8]
 c0281f0:	2b01      	cmp	r3, #1
 c0281f2:	d80b      	bhi.n	c02820c <verify_header+0x34>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
 c0281f4:	68c3      	ldr	r3, [r0, #12]
 c0281f6:	b113      	cbz	r3, c0281fe <verify_header+0x26>
 c0281f8:	6902      	ldr	r2, [r0, #16]
 c0281fa:	4293      	cmp	r3, r2
 c0281fc:	d006      	beq.n	c02820c <verify_header+0x34>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
 c0281fe:	6943      	ldr	r3, [r0, #20]
 c028200:	b133      	cbz	r3, c028210 <verify_header+0x38>
 c028202:	6980      	ldr	r0, [r0, #24]
 c028204:	1ac3      	subs	r3, r0, r3
 c028206:	4258      	negs	r0, r3
 c028208:	4158      	adcs	r0, r3
 c02820a:	4770      	bx	lr
        return( 1 );
 c02820c:	2001      	movs	r0, #1
 c02820e:	4770      	bx	lr
        mbedtls_fprintf( stderr, "FATAL: prev_free == next_free\n" );
#endif
        return( 1 );
    }

    return( 0 );
 c028210:	4618      	mov	r0, r3
}
 c028212:	4770      	bx	lr
 c028214:	ff00aa55 	.word	0xff00aa55

0c028218 <verify_chain>:

static int verify_chain( void )
{
 c028218:	b538      	push	{r3, r4, r5, lr}
    memory_header *prv = heap.first, *cur;
 c02821a:	4b0d      	ldr	r3, [pc, #52]	; (c028250 <verify_chain+0x38>)
 c02821c:	689d      	ldr	r5, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
 c02821e:	b1a5      	cbz	r5, c02824a <verify_chain+0x32>
 c028220:	4628      	mov	r0, r5
 c028222:	f7ff ffd9 	bl	c0281d8 <verify_header>
 c028226:	4601      	mov	r1, r0
 c028228:	b978      	cbnz	r0, c02824a <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
 c02822a:	68eb      	ldr	r3, [r5, #12]
 c02822c:	b96b      	cbnz	r3, c02824a <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
 c02822e:	692c      	ldr	r4, [r5, #16]

    while( cur != NULL )
 c028230:	b90c      	cbnz	r4, c028236 <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
 c028232:	4608      	mov	r0, r1
 c028234:	bd38      	pop	{r3, r4, r5, pc}
        if( verify_header( cur ) != 0 )
 c028236:	4620      	mov	r0, r4
 c028238:	f7ff ffce 	bl	c0281d8 <verify_header>
 c02823c:	b928      	cbnz	r0, c02824a <verify_chain+0x32>
        if( cur->prev != prv )
 c02823e:	68e3      	ldr	r3, [r4, #12]
 c028240:	42ab      	cmp	r3, r5
 c028242:	d102      	bne.n	c02824a <verify_chain+0x32>
        cur = cur->next;
 c028244:	4625      	mov	r5, r4
 c028246:	6924      	ldr	r4, [r4, #16]
 c028248:	e7f2      	b.n	c028230 <verify_chain+0x18>
        return( 1 );
 c02824a:	2101      	movs	r1, #1
 c02824c:	e7f1      	b.n	c028232 <verify_chain+0x1a>
 c02824e:	bf00      	nop
 c028250:	30035e28 	.word	0x30035e28

0c028254 <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
 c028254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
 c028258:	4d38      	ldr	r5, [pc, #224]	; (c02833c <buffer_alloc_calloc+0xe8>)
 c02825a:	682b      	ldr	r3, [r5, #0]
 c02825c:	2b00      	cmp	r3, #0
 c02825e:	d03b      	beq.n	c0282d8 <buffer_alloc_calloc+0x84>
 c028260:	68ab      	ldr	r3, [r5, #8]
 c028262:	2b00      	cmp	r3, #0
 c028264:	d038      	beq.n	c0282d8 <buffer_alloc_calloc+0x84>
        return( NULL );

    original_len = len = n * size;
 c028266:	fb01 f600 	mul.w	r6, r1, r0

    if( n == 0 || size == 0 || len / n != size )
 c02826a:	b198      	cbz	r0, c028294 <buffer_alloc_calloc+0x40>
 c02826c:	b191      	cbz	r1, c028294 <buffer_alloc_calloc+0x40>
 c02826e:	fbb6 f3f0 	udiv	r3, r6, r0
 c028272:	428b      	cmp	r3, r1
 c028274:	d10e      	bne.n	c028294 <buffer_alloc_calloc+0x40>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
 c028276:	1d31      	adds	r1, r6, #4
 c028278:	d80c      	bhi.n	c028294 <buffer_alloc_calloc+0x40>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
 c02827a:	07b2      	lsls	r2, r6, #30
 c02827c:	d00c      	beq.n	c028298 <buffer_alloc_calloc+0x44>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
 c02827e:	f026 0203 	bic.w	r2, r6, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
 c028282:	3204      	adds	r2, #4
    memory_header *new, *cur = heap.first_free;
 c028284:	68e9      	ldr	r1, [r5, #12]
 c028286:	e003      	b.n	c028290 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
 c028288:	6848      	ldr	r0, [r1, #4]
 c02828a:	4290      	cmp	r0, r2
 c02828c:	d24e      	bcs.n	c02832c <buffer_alloc_calloc+0xd8>
            break;

        cur = cur->next_free;
 c02828e:	6989      	ldr	r1, [r1, #24]
    while( cur != NULL )
 c028290:	2900      	cmp	r1, #0
 c028292:	d1f9      	bne.n	c028288 <buffer_alloc_calloc+0x34>
        return( NULL );
 c028294:	2300      	movs	r3, #0
 c028296:	e01f      	b.n	c0282d8 <buffer_alloc_calloc+0x84>
 c028298:	4632      	mov	r2, r6
 c02829a:	e7f3      	b.n	c028284 <buffer_alloc_calloc+0x30>
    heap.alloc_count++;
#endif

    // Found location, split block if > memory_header + 4 room left
    //
    if( cur->size - len < sizeof(memory_header) +
 c02829c:	1a80      	subs	r0, r0, r2
 c02829e:	2823      	cmp	r0, #35	; 0x23
 c0282a0:	e9d1 7c05 	ldrd	r7, ip, [r1, #20]
 c0282a4:	f101 0420 	add.w	r4, r1, #32
 c0282a8:	d81c      	bhi.n	c0282e4 <buffer_alloc_calloc+0x90>
                          MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    {
        cur->alloc = 1;
 c0282aa:	2301      	movs	r3, #1
 c0282ac:	608b      	str	r3, [r1, #8]

        // Remove from free_list
        //
        if( cur->prev_free != NULL )
 c0282ae:	b1b7      	cbz	r7, c0282de <buffer_alloc_calloc+0x8a>
            cur->prev_free->next_free = cur->next_free;
 c0282b0:	f8c7 c018 	str.w	ip, [r7, #24]
        else
            heap.first_free = cur->next_free;

        if( cur->next_free != NULL )
 c0282b4:	698b      	ldr	r3, [r1, #24]
 c0282b6:	b103      	cbz	r3, c0282ba <buffer_alloc_calloc+0x66>
            cur->next_free->prev_free = cur->prev_free;
 c0282b8:	615f      	str	r7, [r3, #20]
        new->next_free->prev_free = new;

    cur->alloc = 1;
    cur->size = len;
    cur->next = new;
    cur->prev_free = NULL;
 c0282ba:	2300      	movs	r3, #0
    cur->next_free = NULL;
 c0282bc:	e9c1 3305 	strd	r3, r3, [r1, #20]
    trace_cnt = backtrace( trace_buffer, MAX_BT );
    cur->trace = backtrace_symbols( trace_buffer, trace_cnt );
    cur->trace_count = trace_cnt;
#endif

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
 c0282c0:	692b      	ldr	r3, [r5, #16]
 c0282c2:	07db      	lsls	r3, r3, #31
 c0282c4:	d502      	bpl.n	c0282cc <buffer_alloc_calloc+0x78>
 c0282c6:	f7ff ffa7 	bl	c028218 <verify_chain>
 c0282ca:	bba0      	cbnz	r0, c028336 <buffer_alloc_calloc+0xe2>
        mbedtls_exit( 1 );

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );
 c0282cc:	4632      	mov	r2, r6
 c0282ce:	2100      	movs	r1, #0
 c0282d0:	4620      	mov	r0, r4
 c0282d2:	f7ef fb78 	bl	c0179c6 <memset>
 c0282d6:	4603      	mov	r3, r0

    return( ret );
}
 c0282d8:	4618      	mov	r0, r3
 c0282da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            heap.first_free = cur->next_free;
 c0282de:	f8c5 c00c 	str.w	ip, [r5, #12]
 c0282e2:	e7e7      	b.n	c0282b4 <buffer_alloc_calloc+0x60>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
 c0282e4:	f102 0820 	add.w	r8, r2, #32
 c0282e8:	eb01 0308 	add.w	r3, r1, r8
    new->size = cur->size - len - sizeof(memory_header);
 c0282ec:	3820      	subs	r0, #32
    new->alloc = 0;
 c0282ee:	e9c3 0e01 	strd	r0, lr, [r3, #4]
    new->next = cur->next;
 c0282f2:	6908      	ldr	r0, [r1, #16]
    new->magic1 = MAGIC1;
 c0282f4:	f8df e048 	ldr.w	lr, [pc, #72]	; c028340 <buffer_alloc_calloc+0xec>
    new->prev = cur;
 c0282f8:	60d9      	str	r1, [r3, #12]
    new->next = cur->next;
 c0282fa:	6118      	str	r0, [r3, #16]
    new->magic1 = MAGIC1;
 c0282fc:	f841 e008 	str.w	lr, [r1, r8]
    new->magic2 = MAGIC2;
 c028300:	f1ae 2e10 	sub.w	lr, lr, #268439552	; 0x10001000
 c028304:	f1ae 1eef 	sub.w	lr, lr, #15663343	; 0xef00ef
 c028308:	f8c3 e01c 	str.w	lr, [r3, #28]
    if( new->next != NULL )
 c02830c:	b100      	cbz	r0, c028310 <buffer_alloc_calloc+0xbc>
        new->next->prev = new;
 c02830e:	60c3      	str	r3, [r0, #12]
    new->next_free = cur->next_free;
 c028310:	e9c3 7c05 	strd	r7, ip, [r3, #20]
    if( new->prev_free != NULL )
 c028314:	b147      	cbz	r7, c028328 <buffer_alloc_calloc+0xd4>
        new->prev_free->next_free = new;
 c028316:	61bb      	str	r3, [r7, #24]
    if( new->next_free != NULL )
 c028318:	6998      	ldr	r0, [r3, #24]
 c02831a:	b100      	cbz	r0, c02831e <buffer_alloc_calloc+0xca>
        new->next_free->prev_free = new;
 c02831c:	6143      	str	r3, [r0, #20]
    cur->alloc = 1;
 c02831e:	2001      	movs	r0, #1
    cur->next = new;
 c028320:	610b      	str	r3, [r1, #16]
    cur->size = len;
 c028322:	e9c1 2001 	strd	r2, r0, [r1, #4]
 c028326:	e7c8      	b.n	c0282ba <buffer_alloc_calloc+0x66>
        heap.first_free = new;
 c028328:	60eb      	str	r3, [r5, #12]
 c02832a:	e7f5      	b.n	c028318 <buffer_alloc_calloc+0xc4>
    if( cur->alloc != 0 )
 c02832c:	f8d1 e008 	ldr.w	lr, [r1, #8]
 c028330:	f1be 0f00 	cmp.w	lr, #0
 c028334:	d0b2      	beq.n	c02829c <buffer_alloc_calloc+0x48>
        mbedtls_exit( 1 );
 c028336:	2001      	movs	r0, #1
 c028338:	f7ef faca 	bl	c0178d0 <exit>
 c02833c:	30035e28 	.word	0x30035e28
 c028340:	ff00aa55 	.word	0xff00aa55

0c028344 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
 c028344:	b570      	push	{r4, r5, r6, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
 c028346:	4606      	mov	r6, r0
 c028348:	2800      	cmp	r0, #0
 c02834a:	d05d      	beq.n	c028408 <buffer_alloc_free+0xc4>
 c02834c:	4c39      	ldr	r4, [pc, #228]	; (c028434 <buffer_alloc_free+0xf0>)
 c02834e:	6823      	ldr	r3, [r4, #0]
 c028350:	2b00      	cmp	r3, #0
 c028352:	d059      	beq.n	c028408 <buffer_alloc_free+0xc4>
 c028354:	68a2      	ldr	r2, [r4, #8]
 c028356:	2a00      	cmp	r2, #0
 c028358:	d056      	beq.n	c028408 <buffer_alloc_free+0xc4>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
 c02835a:	4283      	cmp	r3, r0
 c02835c:	d803      	bhi.n	c028366 <buffer_alloc_free+0x22>
 c02835e:	6862      	ldr	r2, [r4, #4]
 c028360:	4413      	add	r3, r2
 c028362:	4298      	cmp	r0, r3
 c028364:	d302      	bcc.n	c02836c <buffer_alloc_free+0x28>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
 c028366:	2001      	movs	r0, #1
 c028368:	f7ef fab2 	bl	c0178d0 <exit>
    }

    p -= sizeof(memory_header);
 c02836c:	f1a0 0120 	sub.w	r1, r0, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
 c028370:	4608      	mov	r0, r1
 c028372:	f7ff ff31 	bl	c0281d8 <verify_header>
 c028376:	2800      	cmp	r0, #0
 c028378:	d1f5      	bne.n	c028366 <buffer_alloc_free+0x22>
        mbedtls_exit( 1 );

    if( hdr->alloc != 1 )
 c02837a:	f856 3c18 	ldr.w	r3, [r6, #-24]
 c02837e:	2b01      	cmp	r3, #1
 c028380:	d1f1      	bne.n	c028366 <buffer_alloc_free+0x22>
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
 c028382:	f856 5c14 	ldr.w	r5, [r6, #-20]
    hdr->alloc = 0;
 c028386:	f846 0c18 	str.w	r0, [r6, #-24]
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
 c02838a:	b1b5      	cbz	r5, c0283ba <buffer_alloc_free+0x76>
 c02838c:	68ab      	ldr	r3, [r5, #8]
 c02838e:	2b00      	cmp	r3, #0
 c028390:	d13b      	bne.n	c02840a <buffer_alloc_free+0xc6>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
 c028392:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 c028396:	f103 0220 	add.w	r2, r3, #32
 c02839a:	686b      	ldr	r3, [r5, #4]
 c02839c:	4413      	add	r3, r2
 c02839e:	606b      	str	r3, [r5, #4]
        hdr->prev->next = hdr->next;
 c0283a0:	f856 3c10 	ldr.w	r3, [r6, #-16]
 c0283a4:	612b      	str	r3, [r5, #16]
        old = hdr;
        hdr = hdr->prev;

        if( hdr->next != NULL )
 c0283a6:	b103      	cbz	r3, c0283aa <buffer_alloc_free+0x66>
            hdr->next->prev = hdr;
 c0283a8:	60dd      	str	r5, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
 c0283aa:	460b      	mov	r3, r1
 c0283ac:	2220      	movs	r2, #32
 c0283ae:	2100      	movs	r1, #0
 c0283b0:	4618      	mov	r0, r3
 c0283b2:	f7ef fb08 	bl	c0179c6 <memset>
 c0283b6:	4629      	mov	r1, r5
 c0283b8:	4605      	mov	r5, r0
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
 c0283ba:	6908      	ldr	r0, [r1, #16]
 c0283bc:	2800      	cmp	r0, #0
 c0283be:	d030      	beq.n	c028422 <buffer_alloc_free+0xde>
 c0283c0:	6883      	ldr	r3, [r0, #8]
 c0283c2:	2b00      	cmp	r3, #0
 c0283c4:	d12d      	bne.n	c028422 <buffer_alloc_free+0xde>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
 c0283c6:	684b      	ldr	r3, [r1, #4]
 c0283c8:	6842      	ldr	r2, [r0, #4]
 c0283ca:	3320      	adds	r3, #32
 c0283cc:	4413      	add	r3, r2
 c0283ce:	604b      	str	r3, [r1, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
 c0283d0:	6903      	ldr	r3, [r0, #16]
 c0283d2:	e9d1 2505 	ldrd	r2, r5, [r1, #20]
 c0283d6:	610b      	str	r3, [r1, #16]

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
 c0283d8:	b9ca      	cbnz	r2, c02840e <buffer_alloc_free+0xca>
 c0283da:	b9f5      	cbnz	r5, c02841a <buffer_alloc_free+0xd6>

            if( hdr->next_free != NULL )
                hdr->next_free->prev_free = hdr->prev_free;
        }

        hdr->prev_free = old->prev_free;
 c0283dc:	6942      	ldr	r2, [r0, #20]
        hdr->next_free = old->next_free;
 c0283de:	6985      	ldr	r5, [r0, #24]
        hdr->prev_free = old->prev_free;
 c0283e0:	614a      	str	r2, [r1, #20]
        hdr->next_free = old->next_free;
 c0283e2:	618d      	str	r5, [r1, #24]

        if( hdr->prev_free != NULL )
 c0283e4:	b1da      	cbz	r2, c02841e <buffer_alloc_free+0xda>
            hdr->prev_free->next_free = hdr;
 c0283e6:	6191      	str	r1, [r2, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
 c0283e8:	698a      	ldr	r2, [r1, #24]
 c0283ea:	b102      	cbz	r2, c0283ee <buffer_alloc_free+0xaa>
            hdr->next_free->prev_free = hdr;
 c0283ec:	6151      	str	r1, [r2, #20]

        if( hdr->next != NULL )
 c0283ee:	b103      	cbz	r3, c0283f2 <buffer_alloc_free+0xae>
            hdr->next->prev = hdr;
 c0283f0:	60d9      	str	r1, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
 c0283f2:	2220      	movs	r2, #32
 c0283f4:	2100      	movs	r1, #0
 c0283f6:	f7ef fae6 	bl	c0179c6 <memset>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
 c0283fa:	6923      	ldr	r3, [r4, #16]
 c0283fc:	079b      	lsls	r3, r3, #30
 c0283fe:	d503      	bpl.n	c028408 <buffer_alloc_free+0xc4>
 c028400:	f7ff ff0a 	bl	c028218 <verify_chain>
 c028404:	2800      	cmp	r0, #0
 c028406:	d1ae      	bne.n	c028366 <buffer_alloc_free+0x22>
        mbedtls_exit( 1 );
}
 c028408:	bd70      	pop	{r4, r5, r6, pc}
    memory_header *hdr, *old = NULL;
 c02840a:	4605      	mov	r5, r0
 c02840c:	e7d5      	b.n	c0283ba <buffer_alloc_free+0x76>
                hdr->prev_free->next_free = hdr->next_free;
 c02840e:	6195      	str	r5, [r2, #24]
            if( hdr->next_free != NULL )
 c028410:	698d      	ldr	r5, [r1, #24]
 c028412:	2d00      	cmp	r5, #0
 c028414:	d0e2      	beq.n	c0283dc <buffer_alloc_free+0x98>
                hdr->next_free->prev_free = hdr->prev_free;
 c028416:	616a      	str	r2, [r5, #20]
 c028418:	e7e0      	b.n	c0283dc <buffer_alloc_free+0x98>
                heap.first_free = hdr->next_free;
 c02841a:	60e5      	str	r5, [r4, #12]
 c02841c:	e7f8      	b.n	c028410 <buffer_alloc_free+0xcc>
            heap.first_free = hdr;
 c02841e:	60e1      	str	r1, [r4, #12]
 c028420:	e7e2      	b.n	c0283e8 <buffer_alloc_free+0xa4>
    if( old == NULL )
 c028422:	2d00      	cmp	r5, #0
 c028424:	d1e9      	bne.n	c0283fa <buffer_alloc_free+0xb6>
        hdr->next_free = heap.first_free;
 c028426:	68e3      	ldr	r3, [r4, #12]
 c028428:	618b      	str	r3, [r1, #24]
        if( heap.first_free != NULL )
 c02842a:	b103      	cbz	r3, c02842e <buffer_alloc_free+0xea>
            heap.first_free->prev_free = hdr;
 c02842c:	6159      	str	r1, [r3, #20]
        heap.first_free = hdr;
 c02842e:	60e1      	str	r1, [r4, #12]
 c028430:	e7e3      	b.n	c0283fa <buffer_alloc_free+0xb6>
 c028432:	bf00      	nop
 c028434:	30035e28 	.word	0x30035e28

0c028438 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
 c028438:	b538      	push	{r3, r4, r5, lr}
 c02843a:	460d      	mov	r5, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
 c02843c:	2214      	movs	r2, #20
 c02843e:	2100      	movs	r1, #0
{
 c028440:	4604      	mov	r4, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
 c028442:	4812      	ldr	r0, [pc, #72]	; (c02848c <mbedtls_memory_buffer_alloc_init+0x54>)
 c028444:	f7ef fabf 	bl	c0179c6 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
 c028448:	4911      	ldr	r1, [pc, #68]	; (c028490 <mbedtls_memory_buffer_alloc_init+0x58>)
 c02844a:	4812      	ldr	r0, [pc, #72]	; (c028494 <mbedtls_memory_buffer_alloc_init+0x5c>)
 c02844c:	f001 ff1e 	bl	c02a28c <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
 c028450:	2d23      	cmp	r5, #35	; 0x23
 c028452:	d91a      	bls.n	c02848a <mbedtls_memory_buffer_alloc_init+0x52>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
 c028454:	f014 0303 	ands.w	r3, r4, #3
 c028458:	bf1f      	itttt	ne
 c02845a:	3d04      	subne	r5, #4
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
 c02845c:	18ed      	addne	r5, r5, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
 c02845e:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
 c028462:	18e4      	addne	r4, r4, r3
    }

    memset( buf, 0, len );
 c028464:	462a      	mov	r2, r5
 c028466:	2100      	movs	r1, #0
 c028468:	4620      	mov	r0, r4
 c02846a:	f7ef faac 	bl	c0179c6 <memset>

    heap.buf = buf;
 c02846e:	4b07      	ldr	r3, [pc, #28]	; (c02848c <mbedtls_memory_buffer_alloc_init+0x54>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
 c028470:	4a09      	ldr	r2, [pc, #36]	; (c028498 <mbedtls_memory_buffer_alloc_init+0x60>)
    heap.len = len;
 c028472:	e9c3 4500 	strd	r4, r5, [r3]
    heap.first = (memory_header *)buf;
 c028476:	609c      	str	r4, [r3, #8]
    heap.first->magic1 = MAGIC1;
 c028478:	6022      	str	r2, [r4, #0]
    heap.first->magic2 = MAGIC2;
 c02847a:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    heap.first->size = len - sizeof( memory_header );
 c02847e:	3d20      	subs	r5, #32
    heap.first->magic2 = MAGIC2;
 c028480:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    heap.first->size = len - sizeof( memory_header );
 c028484:	6065      	str	r5, [r4, #4]
    heap.first->magic2 = MAGIC2;
 c028486:	61e2      	str	r2, [r4, #28]
    heap.first_free = heap.first;
 c028488:	60dc      	str	r4, [r3, #12]
}
 c02848a:	bd38      	pop	{r3, r4, r5, pc}
 c02848c:	30035e28 	.word	0x30035e28
 c028490:	0c028345 	.word	0x0c028345
 c028494:	0c028255 	.word	0x0c028255
 c028498:	ff00aa55 	.word	0xff00aa55

0c02849c <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 c02849c:	b570      	push	{r4, r5, r6, lr}
 c02849e:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 c0284a0:	4605      	mov	r5, r0
 c0284a2:	b110      	cbz	r0, c0284aa <mbedtls_oid_get_pk_alg+0xe>
 c0284a4:	4c09      	ldr	r4, [pc, #36]	; (c0284cc <mbedtls_oid_get_pk_alg+0x30>)
 c0284a6:	6820      	ldr	r0, [r4, #0]
 c0284a8:	b910      	cbnz	r0, c0284b0 <mbedtls_oid_get_pk_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 c0284aa:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 c0284ae:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 c0284b0:	6862      	ldr	r2, [r4, #4]
 c0284b2:	686b      	ldr	r3, [r5, #4]
 c0284b4:	429a      	cmp	r2, r3
 c0284b6:	d103      	bne.n	c0284c0 <mbedtls_oid_get_pk_alg+0x24>
 c0284b8:	68a9      	ldr	r1, [r5, #8]
 c0284ba:	f7ef fa51 	bl	c017960 <memcmp>
 c0284be:	b108      	cbz	r0, c0284c4 <mbedtls_oid_get_pk_alg+0x28>
 c0284c0:	3414      	adds	r4, #20
 c0284c2:	e7f0      	b.n	c0284a6 <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 c0284c4:	7c23      	ldrb	r3, [r4, #16]
 c0284c6:	7033      	strb	r3, [r6, #0]
 c0284c8:	e7f1      	b.n	c0284ae <mbedtls_oid_get_pk_alg+0x12>
 c0284ca:	bf00      	nop
 c0284cc:	0c035bbc 	.word	0x0c035bbc

0c0284d0 <mbedtls_oid_get_ec_grp>:
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 c0284d0:	b570      	push	{r4, r5, r6, lr}
 c0284d2:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 c0284d4:	4605      	mov	r5, r0
 c0284d6:	b110      	cbz	r0, c0284de <mbedtls_oid_get_ec_grp+0xe>
 c0284d8:	4c09      	ldr	r4, [pc, #36]	; (c028500 <mbedtls_oid_get_ec_grp+0x30>)
 c0284da:	6820      	ldr	r0, [r4, #0]
 c0284dc:	b910      	cbnz	r0, c0284e4 <mbedtls_oid_get_ec_grp+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 c0284de:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 c0284e2:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 c0284e4:	6862      	ldr	r2, [r4, #4]
 c0284e6:	686b      	ldr	r3, [r5, #4]
 c0284e8:	429a      	cmp	r2, r3
 c0284ea:	d103      	bne.n	c0284f4 <mbedtls_oid_get_ec_grp+0x24>
 c0284ec:	68a9      	ldr	r1, [r5, #8]
 c0284ee:	f7ef fa37 	bl	c017960 <memcmp>
 c0284f2:	b108      	cbz	r0, c0284f8 <mbedtls_oid_get_ec_grp+0x28>
 c0284f4:	3414      	adds	r4, #20
 c0284f6:	e7f0      	b.n	c0284da <mbedtls_oid_get_ec_grp+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 c0284f8:	7c23      	ldrb	r3, [r4, #16]
 c0284fa:	7033      	strb	r3, [r6, #0]
 c0284fc:	e7f1      	b.n	c0284e2 <mbedtls_oid_get_ec_grp+0x12>
 c0284fe:	bf00      	nop
 c028500:	0c0359dc 	.word	0x0c0359dc

0c028504 <mbedtls_oid_get_oid_by_ec_grp>:
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_ec_grp, oid_ecp_grp_t, oid_ecp_grp, mbedtls_ecp_group_id, grp_id)
 c028504:	b530      	push	{r4, r5, lr}
 c028506:	4b08      	ldr	r3, [pc, #32]	; (c028528 <mbedtls_oid_get_oid_by_ec_grp+0x24>)
 c028508:	681c      	ldr	r4, [r3, #0]
 c02850a:	b914      	cbnz	r4, c028512 <mbedtls_oid_get_oid_by_ec_grp+0xe>
 c02850c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 c028510:	e006      	b.n	c028520 <mbedtls_oid_get_oid_by_ec_grp+0x1c>
 c028512:	7c1d      	ldrb	r5, [r3, #16]
 c028514:	4285      	cmp	r5, r0
 c028516:	d104      	bne.n	c028522 <mbedtls_oid_get_oid_by_ec_grp+0x1e>
 c028518:	2000      	movs	r0, #0
 c02851a:	685b      	ldr	r3, [r3, #4]
 c02851c:	600c      	str	r4, [r1, #0]
 c02851e:	6013      	str	r3, [r2, #0]
 c028520:	bd30      	pop	{r4, r5, pc}
 c028522:	3314      	adds	r3, #20
 c028524:	e7f0      	b.n	c028508 <mbedtls_oid_get_oid_by_ec_grp+0x4>
 c028526:	bf00      	nop
 c028528:	0c0359dc 	.word	0x0c0359dc

0c02852c <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 c02852c:	b570      	push	{r4, r5, r6, lr}
 c02852e:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
 c028530:	4605      	mov	r5, r0
 c028532:	b110      	cbz	r0, c02853a <mbedtls_oid_get_cipher_alg+0xe>
 c028534:	4c09      	ldr	r4, [pc, #36]	; (c02855c <mbedtls_oid_get_cipher_alg+0x30>)
 c028536:	6820      	ldr	r0, [r4, #0]
 c028538:	b910      	cbnz	r0, c028540 <mbedtls_oid_get_cipher_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 c02853a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 c02853e:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
 c028540:	6862      	ldr	r2, [r4, #4]
 c028542:	686b      	ldr	r3, [r5, #4]
 c028544:	429a      	cmp	r2, r3
 c028546:	d103      	bne.n	c028550 <mbedtls_oid_get_cipher_alg+0x24>
 c028548:	68a9      	ldr	r1, [r5, #8]
 c02854a:	f7ef fa09 	bl	c017960 <memcmp>
 c02854e:	b108      	cbz	r0, c028554 <mbedtls_oid_get_cipher_alg+0x28>
 c028550:	3414      	adds	r4, #20
 c028552:	e7f0      	b.n	c028536 <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 c028554:	7c23      	ldrb	r3, [r4, #16]
 c028556:	7033      	strb	r3, [r6, #0]
 c028558:	e7f1      	b.n	c02853e <mbedtls_oid_get_cipher_alg+0x12>
 c02855a:	bf00      	nop
 c02855c:	0c0359a0 	.word	0x0c0359a0

0c028560 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 c028560:	b530      	push	{r4, r5, lr}
 c028562:	4b08      	ldr	r3, [pc, #32]	; (c028584 <mbedtls_oid_get_oid_by_md+0x24>)
 c028564:	681c      	ldr	r4, [r3, #0]
 c028566:	b914      	cbnz	r4, c02856e <mbedtls_oid_get_oid_by_md+0xe>
 c028568:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 c02856c:	e006      	b.n	c02857c <mbedtls_oid_get_oid_by_md+0x1c>
 c02856e:	7c1d      	ldrb	r5, [r3, #16]
 c028570:	4285      	cmp	r5, r0
 c028572:	d104      	bne.n	c02857e <mbedtls_oid_get_oid_by_md+0x1e>
 c028574:	2000      	movs	r0, #0
 c028576:	685b      	ldr	r3, [r3, #4]
 c028578:	600c      	str	r4, [r1, #0]
 c02857a:	6013      	str	r3, [r2, #0]
 c02857c:	bd30      	pop	{r4, r5, pc}
 c02857e:	3314      	adds	r3, #20
 c028580:	e7f0      	b.n	c028564 <mbedtls_oid_get_oid_by_md+0x4>
 c028582:	bf00      	nop
 c028584:	0c035acc 	.word	0x0c035acc

0c028588 <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 c028588:	b570      	push	{r4, r5, r6, lr}
 c02858a:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
 c02858c:	4605      	mov	r5, r0
 c02858e:	b110      	cbz	r0, c028596 <mbedtls_oid_get_md_hmac+0xe>
 c028590:	4c09      	ldr	r4, [pc, #36]	; (c0285b8 <mbedtls_oid_get_md_hmac+0x30>)
 c028592:	6820      	ldr	r0, [r4, #0]
 c028594:	b910      	cbnz	r0, c02859c <mbedtls_oid_get_md_hmac+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 c028596:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 c02859a:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
 c02859c:	6862      	ldr	r2, [r4, #4]
 c02859e:	686b      	ldr	r3, [r5, #4]
 c0285a0:	429a      	cmp	r2, r3
 c0285a2:	d103      	bne.n	c0285ac <mbedtls_oid_get_md_hmac+0x24>
 c0285a4:	68a9      	ldr	r1, [r5, #8]
 c0285a6:	f7ef f9db 	bl	c017960 <memcmp>
 c0285aa:	b108      	cbz	r0, c0285b0 <mbedtls_oid_get_md_hmac+0x28>
 c0285ac:	3414      	adds	r4, #20
 c0285ae:	e7f0      	b.n	c028592 <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 c0285b0:	7c23      	ldrb	r3, [r4, #16]
 c0285b2:	7033      	strb	r3, [r6, #0]
 c0285b4:	e7f1      	b.n	c02859a <mbedtls_oid_get_md_hmac+0x12>
 c0285b6:	bf00      	nop
 c0285b8:	0c035b44 	.word	0x0c035b44

0c0285bc <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 c0285bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0285be:	460f      	mov	r7, r1
 c0285c0:	4616      	mov	r6, r2
FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
 c0285c2:	4605      	mov	r5, r0
 c0285c4:	b110      	cbz	r0, c0285cc <mbedtls_oid_get_pkcs12_pbe_alg+0x10>
 c0285c6:	4c0a      	ldr	r4, [pc, #40]	; (c0285f0 <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
 c0285c8:	6820      	ldr	r0, [r4, #0]
 c0285ca:	b910      	cbnz	r0, c0285d2 <mbedtls_oid_get_pkcs12_pbe_alg+0x16>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 c0285cc:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 c0285d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
 c0285d2:	6862      	ldr	r2, [r4, #4]
 c0285d4:	686b      	ldr	r3, [r5, #4]
 c0285d6:	429a      	cmp	r2, r3
 c0285d8:	d103      	bne.n	c0285e2 <mbedtls_oid_get_pkcs12_pbe_alg+0x26>
 c0285da:	68a9      	ldr	r1, [r5, #8]
 c0285dc:	f7ef f9c0 	bl	c017960 <memcmp>
 c0285e0:	b108      	cbz	r0, c0285e6 <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
 c0285e2:	3414      	adds	r4, #20
 c0285e4:	e7f0      	b.n	c0285c8 <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 c0285e6:	7c23      	ldrb	r3, [r4, #16]
 c0285e8:	703b      	strb	r3, [r7, #0]
 c0285ea:	7c63      	ldrb	r3, [r4, #17]
 c0285ec:	7033      	strb	r3, [r6, #0]
 c0285ee:	e7ef      	b.n	c0285d0 <mbedtls_oid_get_pkcs12_pbe_alg+0x14>
 c0285f0:	0c035c0c 	.word	0x0c035c0c

0c0285f4 <mbedtls_pem_init>:
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 c0285f4:	2300      	movs	r3, #0
 c0285f6:	6003      	str	r3, [r0, #0]
 c0285f8:	6043      	str	r3, [r0, #4]
 c0285fa:	6083      	str	r3, [r0, #8]
}
 c0285fc:	4770      	bx	lr
	...

0c028600 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 c028600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c028604:	4689      	mov	r9, r1
 c028606:	b085      	sub	sp, #20
 c028608:	4690      	mov	r8, r2
 c02860a:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 c02860c:	4606      	mov	r6, r0
 c02860e:	2800      	cmp	r0, #0
 c028610:	d064      	beq.n	c0286dc <mbedtls_pem_read_buffer+0xdc>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 c028612:	4618      	mov	r0, r3
 c028614:	f7ef ff16 	bl	c018444 <strstr>

    if( s1 == NULL )
 c028618:	4604      	mov	r4, r0
 c02861a:	2800      	cmp	r0, #0
 c02861c:	d060      	beq.n	c0286e0 <mbedtls_pem_read_buffer+0xe0>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 c02861e:	4641      	mov	r1, r8
 c028620:	4638      	mov	r0, r7
 c028622:	f7ef ff0f 	bl	c018444 <strstr>

    if( s2 == NULL || s2 <= s1 )
 c028626:	4605      	mov	r5, r0
 c028628:	2800      	cmp	r0, #0
 c02862a:	d059      	beq.n	c0286e0 <mbedtls_pem_read_buffer+0xe0>
 c02862c:	4284      	cmp	r4, r0
 c02862e:	d257      	bcs.n	c0286e0 <mbedtls_pem_read_buffer+0xe0>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 c028630:	4648      	mov	r0, r9
 c028632:	f7ef feff 	bl	c018434 <strlen>
    if( *s1 == ' '  ) s1++;
 c028636:	5c22      	ldrb	r2, [r4, r0]
    s1 += strlen( header );
 c028638:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
 c02863a:	2a20      	cmp	r2, #32
 c02863c:	bf08      	it	eq
 c02863e:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
 c028640:	781a      	ldrb	r2, [r3, #0]
 c028642:	2a0d      	cmp	r2, #13
 c028644:	bf08      	it	eq
 c028646:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
 c028648:	781a      	ldrb	r2, [r3, #0]
 c02864a:	2a0a      	cmp	r2, #10
 c02864c:	d148      	bne.n	c0286e0 <mbedtls_pem_read_buffer+0xe0>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 c02864e:	4640      	mov	r0, r8
    if( *s1 == '\n' ) s1++;
 c028650:	1c5c      	adds	r4, r3, #1
    end += strlen( footer );
 c028652:	f7ef feef 	bl	c018434 <strlen>
    if( *end == ' '  ) end++;
 c028656:	5c2a      	ldrb	r2, [r5, r0]
    end += strlen( footer );
 c028658:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
 c02865a:	2a20      	cmp	r2, #32
 c02865c:	bf08      	it	eq
 c02865e:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
 c028660:	781a      	ldrb	r2, [r3, #0]
 c028662:	2a0d      	cmp	r2, #13
 c028664:	bf08      	it	eq
 c028666:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
 c028668:	781a      	ldrb	r2, [r3, #0]
 c02866a:	2a0a      	cmp	r2, #10
 c02866c:	bf08      	it	eq
 c02866e:	3301      	addeq	r3, #1
    *use_len = end - data;
 c028670:	1bdb      	subs	r3, r3, r7
 c028672:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 c028674:	1b2f      	subs	r7, r5, r4
 c028676:	2f15      	cmp	r7, #21
    *use_len = end - data;
 c028678:	6013      	str	r3, [r2, #0]
    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 c02867a:	dd05      	ble.n	c028688 <mbedtls_pem_read_buffer+0x88>
 c02867c:	2216      	movs	r2, #22
 c02867e:	491d      	ldr	r1, [pc, #116]	; (c0286f4 <mbedtls_pem_read_buffer+0xf4>)
 c028680:	4620      	mov	r0, r4
 c028682:	f7ef f96d 	bl	c017960 <memcmp>
 c028686:	b368      	cbz	r0, c0286e4 <mbedtls_pem_read_buffer+0xe4>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 c028688:	42a5      	cmp	r5, r4
 c02868a:	d92d      	bls.n	c0286e8 <mbedtls_pem_read_buffer+0xe8>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 c02868c:	2100      	movs	r1, #0
 c02868e:	9700      	str	r7, [sp, #0]
 c028690:	4623      	mov	r3, r4
 c028692:	aa03      	add	r2, sp, #12
 c028694:	4608      	mov	r0, r1
 c028696:	f7fb fef3 	bl	c024480 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 c02869a:	302c      	adds	r0, #44	; 0x2c
 c02869c:	d026      	beq.n	c0286ec <mbedtls_pem_read_buffer+0xec>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
 c02869e:	9903      	ldr	r1, [sp, #12]
 c0286a0:	2001      	movs	r0, #1
 c0286a2:	f001 fde7 	bl	c02a274 <mbedtls_calloc>
 c0286a6:	4605      	mov	r5, r0
 c0286a8:	b310      	cbz	r0, c0286f0 <mbedtls_pem_read_buffer+0xf0>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 c0286aa:	4623      	mov	r3, r4
 c0286ac:	9700      	str	r7, [sp, #0]
 c0286ae:	aa03      	add	r2, sp, #12
 c0286b0:	9903      	ldr	r1, [sp, #12]
 c0286b2:	f7fb fee5 	bl	c024480 <mbedtls_base64_decode>
 c0286b6:	4604      	mov	r4, r0
 c0286b8:	b160      	cbz	r0, c0286d4 <mbedtls_pem_read_buffer+0xd4>
    {
        mbedtls_platform_zeroize( buf, len );
 c0286ba:	9903      	ldr	r1, [sp, #12]
 c0286bc:	4628      	mov	r0, r5
 c0286be:	f001 fdef 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( buf );
 c0286c2:	4628      	mov	r0, r5
 c0286c4:	f001 fddc 	bl	c02a280 <mbedtls_free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 c0286c8:	f5a4 5488 	sub.w	r4, r4, #4352	; 0x1100

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 c0286cc:	4620      	mov	r0, r4
 c0286ce:	b005      	add	sp, #20
 c0286d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ctx->buflen = len;
 c0286d4:	9b03      	ldr	r3, [sp, #12]
    ctx->buf = buf;
 c0286d6:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
 c0286d8:	6073      	str	r3, [r6, #4]
    return( 0 );
 c0286da:	e7f7      	b.n	c0286cc <mbedtls_pem_read_buffer+0xcc>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 c0286dc:	4c06      	ldr	r4, [pc, #24]	; (c0286f8 <mbedtls_pem_read_buffer+0xf8>)
 c0286de:	e7f5      	b.n	c0286cc <mbedtls_pem_read_buffer+0xcc>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 c0286e0:	4c06      	ldr	r4, [pc, #24]	; (c0286fc <mbedtls_pem_read_buffer+0xfc>)
 c0286e2:	e7f3      	b.n	c0286cc <mbedtls_pem_read_buffer+0xcc>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 c0286e4:	4c06      	ldr	r4, [pc, #24]	; (c028700 <mbedtls_pem_read_buffer+0x100>)
 c0286e6:	e7f1      	b.n	c0286cc <mbedtls_pem_read_buffer+0xcc>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 c0286e8:	4c06      	ldr	r4, [pc, #24]	; (c028704 <mbedtls_pem_read_buffer+0x104>)
 c0286ea:	e7ef      	b.n	c0286cc <mbedtls_pem_read_buffer+0xcc>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 c0286ec:	4c06      	ldr	r4, [pc, #24]	; (c028708 <mbedtls_pem_read_buffer+0x108>)
 c0286ee:	e7ed      	b.n	c0286cc <mbedtls_pem_read_buffer+0xcc>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 c0286f0:	4c06      	ldr	r4, [pc, #24]	; (c02870c <mbedtls_pem_read_buffer+0x10c>)
 c0286f2:	e7eb      	b.n	c0286cc <mbedtls_pem_read_buffer+0xcc>
 c0286f4:	0c0365e4 	.word	0x0c0365e4
 c0286f8:	ffffeb80 	.word	0xffffeb80
 c0286fc:	ffffef80 	.word	0xffffef80
 c028700:	ffffec00 	.word	0xffffec00
 c028704:	ffffef00 	.word	0xffffef00
 c028708:	ffffeed4 	.word	0xffffeed4
 c02870c:	ffffee80 	.word	0xffffee80

0c028710 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 c028710:	b510      	push	{r4, lr}
 c028712:	4604      	mov	r4, r0
    if ( ctx->buf != NULL )
 c028714:	6800      	ldr	r0, [r0, #0]
 c028716:	b128      	cbz	r0, c028724 <mbedtls_pem_free+0x14>
    {
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
 c028718:	6861      	ldr	r1, [r4, #4]
 c02871a:	f001 fdc1 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->buf );
 c02871e:	6820      	ldr	r0, [r4, #0]
 c028720:	f001 fdae 	bl	c02a280 <mbedtls_free>
    }
    mbedtls_free( ctx->info );
 c028724:	68a0      	ldr	r0, [r4, #8]
 c028726:	f001 fdab 	bl	c02a280 <mbedtls_free>

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
 c02872a:	4620      	mov	r0, r4
}
 c02872c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
 c028730:	210c      	movs	r1, #12
 c028732:	f001 bdb5 	b.w	c02a2a0 <mbedtls_platform_zeroize>

0c028736 <mbedtls_pk_init>:
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    PK_VALIDATE( ctx != NULL );

    ctx->pk_info = NULL;
 c028736:	2300      	movs	r3, #0
    ctx->pk_ctx = NULL;
 c028738:	e9c0 3300 	strd	r3, r3, [r0]
}
 c02873c:	4770      	bx	lr

0c02873e <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 c02873e:	b510      	push	{r4, lr}
    if( ctx == NULL )
 c028740:	4604      	mov	r4, r0
 c028742:	b150      	cbz	r0, c02875a <mbedtls_pk_free+0x1c>
        return;

    if ( ctx->pk_info != NULL )
 c028744:	6803      	ldr	r3, [r0, #0]
 c028746:	b113      	cbz	r3, c02874e <mbedtls_pk_free+0x10>
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 c028748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c02874a:	6840      	ldr	r0, [r0, #4]
 c02874c:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 c02874e:	4620      	mov	r0, r4
}
 c028750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 c028754:	2108      	movs	r1, #8
 c028756:	f001 bda3 	b.w	c02a2a0 <mbedtls_platform_zeroize>
}
 c02875a:	bd10      	pop	{r4, pc}

0c02875c <mbedtls_pk_info_from_type>:

/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
 c02875c:	3801      	subs	r0, #1
 c02875e:	b2c0      	uxtb	r0, r0
 c028760:	2803      	cmp	r0, #3
 c028762:	bf9a      	itte	ls
 c028764:	4b02      	ldrls	r3, [pc, #8]	; (c028770 <mbedtls_pk_info_from_type+0x14>)
 c028766:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 c02876a:	2000      	movhi	r0, #0
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 c02876c:	4770      	bx	lr
 c02876e:	bf00      	nop
 c028770:	0c0365fc 	.word	0x0c0365fc

0c028774 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 c028774:	b570      	push	{r4, r5, r6, lr}
 c028776:	4605      	mov	r5, r0
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
 c028778:	460e      	mov	r6, r1
 c02877a:	b141      	cbz	r1, c02878e <mbedtls_pk_setup+0x1a>
 c02877c:	6804      	ldr	r4, [r0, #0]
 c02877e:	b934      	cbnz	r4, c02878e <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 c028780:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 c028782:	4798      	blx	r3
 c028784:	6068      	str	r0, [r5, #4]
 c028786:	b120      	cbz	r0, c028792 <mbedtls_pk_setup+0x1e>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;

    return( 0 );
 c028788:	4620      	mov	r0, r4
    ctx->pk_info = info;
 c02878a:	602e      	str	r6, [r5, #0]
}
 c02878c:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 c02878e:	4802      	ldr	r0, [pc, #8]	; (c028798 <mbedtls_pk_setup+0x24>)
 c028790:	e7fc      	b.n	c02878c <mbedtls_pk_setup+0x18>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 c028792:	4802      	ldr	r0, [pc, #8]	; (c02879c <mbedtls_pk_setup+0x28>)
 c028794:	e7fa      	b.n	c02878c <mbedtls_pk_setup+0x18>
 c028796:	bf00      	nop
 c028798:	ffffc180 	.word	0xffffc180
 c02879c:	ffffc080 	.word	0xffffc080

0c0287a0 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 c0287a0:	b110      	cbz	r0, c0287a8 <mbedtls_pk_get_type+0x8>
 c0287a2:	6800      	ldr	r0, [r0, #0]
 c0287a4:	b100      	cbz	r0, c0287a8 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 c0287a6:	7800      	ldrb	r0, [r0, #0]
}
 c0287a8:	4770      	bx	lr

0c0287aa <rsa_can_do>:
#include <stdint.h>

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 c0287aa:	2801      	cmp	r0, #1
 c0287ac:	d002      	beq.n	c0287b4 <rsa_can_do+0xa>
 c0287ae:	1f83      	subs	r3, r0, #6
 c0287b0:	4258      	negs	r0, r3
 c0287b2:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 c0287b4:	4770      	bx	lr
	...

0c0287b8 <rsa_debug>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 c0287b8:	2301      	movs	r3, #1
    items->name = "rsa.N";
 c0287ba:	4a06      	ldr	r2, [pc, #24]	; (c0287d4 <rsa_debug+0x1c>)
    items->type = MBEDTLS_PK_DEBUG_MPI;
 c0287bc:	700b      	strb	r3, [r1, #0]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 c0287be:	730b      	strb	r3, [r1, #12]
    items->name = "rsa.E";
 c0287c0:	4b05      	ldr	r3, [pc, #20]	; (c0287d8 <rsa_debug+0x20>)
    items->name = "rsa.N";
 c0287c2:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 c0287c4:	f100 0208 	add.w	r2, r0, #8
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 c0287c8:	3014      	adds	r0, #20
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 c0287ca:	608a      	str	r2, [r1, #8]
    items->name = "rsa.E";
 c0287cc:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 c0287ce:	6148      	str	r0, [r1, #20]
}
 c0287d0:	4770      	bx	lr
 c0287d2:	bf00      	nop
 c0287d4:	0c0366d4 	.word	0x0c0366d4
 c0287d8:	0c0366da 	.word	0x0c0366da

0c0287dc <eckey_can_do>:
 * Generic EC key
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
 c0287dc:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECDSA );
}
 c0287de:	2802      	cmp	r0, #2
 c0287e0:	bf8c      	ite	hi
 c0287e2:	2000      	movhi	r0, #0
 c0287e4:	2001      	movls	r0, #1
 c0287e6:	4770      	bx	lr

0c0287e8 <eckey_get_bitlen>:

static size_t eckey_get_bitlen( const void *ctx )
{
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
}
 c0287e8:	6d80      	ldr	r0, [r0, #88]	; 0x58
 c0287ea:	4770      	bx	lr

0c0287ec <eckey_debug>:
    mbedtls_free( ctx );
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
 c0287ec:	2302      	movs	r3, #2
 c0287ee:	700b      	strb	r3, [r1, #0]
    items->name = "eckey.Q";
 c0287f0:	4b02      	ldr	r3, [pc, #8]	; (c0287fc <eckey_debug+0x10>)
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 c0287f2:	30ac      	adds	r0, #172	; 0xac
    items->name = "eckey.Q";
 c0287f4:	604b      	str	r3, [r1, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 c0287f6:	6088      	str	r0, [r1, #8]
}
 c0287f8:	4770      	bx	lr
 c0287fa:	bf00      	nop
 c0287fc:	0c03660c 	.word	0x0c03660c

0c028800 <eckeydh_can_do>:
/*
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
 c028800:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECKEY_DH );
}
 c028802:	2801      	cmp	r0, #1
 c028804:	bf8c      	ite	hi
 c028806:	2000      	movhi	r0, #0
 c028808:	2001      	movls	r0, #1
 c02880a:	4770      	bx	lr

0c02880c <ecdsa_can_do>:

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECDSA );
}
 c02880c:	1f03      	subs	r3, r0, #4
 c02880e:	4258      	negs	r0, r3
 c028810:	4158      	adcs	r0, r3
 c028812:	4770      	bx	lr

0c028814 <rsa_free_wrap>:
{
 c028814:	b510      	push	{r4, lr}
 c028816:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 c028818:	f7f7 ff6e 	bl	c0206f8 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 c02881c:	4620      	mov	r0, r4
}
 c02881e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c028822:	f001 bd2d 	b.w	c02a280 <mbedtls_free>

0c028826 <rsa_alloc_wrap>:
{
 c028826:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 c028828:	21ac      	movs	r1, #172	; 0xac
 c02882a:	2001      	movs	r0, #1
 c02882c:	f001 fd22 	bl	c02a274 <mbedtls_calloc>
    if( ctx != NULL )
 c028830:	4604      	mov	r4, r0
 c028832:	b118      	cbz	r0, c02883c <rsa_alloc_wrap+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 c028834:	2200      	movs	r2, #0
 c028836:	4611      	mov	r1, r2
 c028838:	f7f6 ff2a 	bl	c01f690 <mbedtls_rsa_init>
}
 c02883c:	4620      	mov	r0, r4
 c02883e:	bd10      	pop	{r4, pc}

0c028840 <rsa_check_pair_wrap>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
 c028840:	f7f6 bf90 	b.w	c01f764 <mbedtls_rsa_check_pub_priv>

0c028844 <rsa_get_bitlen>:
{
 c028844:	b508      	push	{r3, lr}
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 c028846:	f7f6 ff30 	bl	c01f6aa <mbedtls_rsa_get_len>
}
 c02884a:	00c0      	lsls	r0, r0, #3
 c02884c:	bd08      	pop	{r3, pc}
	...

0c028850 <rsa_encrypt_wrap>:
{
 c028850:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c028854:	4604      	mov	r4, r0
 c028856:	e9dd ba0a 	ldrd	fp, sl, [sp, #40]	; 0x28
 c02885a:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 c02885e:	4688      	mov	r8, r1
 c028860:	4617      	mov	r7, r2
 c028862:	4699      	mov	r9, r3
    *olen = mbedtls_rsa_get_len( rsa );
 c028864:	f7f6 ff21 	bl	c01f6aa <mbedtls_rsa_get_len>
    if( *olen > osize )
 c028868:	4550      	cmp	r0, sl
    *olen = mbedtls_rsa_get_len( rsa );
 c02886a:	f8cb 0000 	str.w	r0, [fp]
    if( *olen > osize )
 c02886e:	d80b      	bhi.n	c028888 <rsa_encrypt_wrap+0x38>
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 c028870:	2300      	movs	r3, #0
 c028872:	4632      	mov	r2, r6
 c028874:	4629      	mov	r1, r5
 c028876:	4620      	mov	r0, r4
 c028878:	e9cd 890b 	strd	r8, r9, [sp, #44]	; 0x2c
 c02887c:	970a      	str	r7, [sp, #40]	; 0x28
}
 c02887e:	b001      	add	sp, #4
 c028880:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 c028884:	f7f7 ba98 	b.w	c01fdb8 <mbedtls_rsa_pkcs1_encrypt>
}
 c028888:	4801      	ldr	r0, [pc, #4]	; (c028890 <rsa_encrypt_wrap+0x40>)
 c02888a:	b001      	add	sp, #4
 c02888c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c028890:	ffffbc00 	.word	0xffffbc00

0c028894 <rsa_decrypt_wrap>:
{
 c028894:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c028898:	4693      	mov	fp, r2
 c02889a:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 c02889e:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 c0288a2:	4604      	mov	r4, r0
 c0288a4:	4688      	mov	r8, r1
 c0288a6:	4699      	mov	r9, r3
    if( ilen != mbedtls_rsa_get_len( rsa ) )
 c0288a8:	f7f6 feff 	bl	c01f6aa <mbedtls_rsa_get_len>
 c0288ac:	4558      	cmp	r0, fp
 c0288ae:	d10c      	bne.n	c0288ca <rsa_decrypt_wrap+0x36>
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 c0288b0:	2301      	movs	r3, #1
 c0288b2:	4632      	mov	r2, r6
 c0288b4:	4629      	mov	r1, r5
 c0288b6:	4620      	mov	r0, r4
 c0288b8:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
 c0288bc:	e9cd 780a 	strd	r7, r8, [sp, #40]	; 0x28
}
 c0288c0:	b001      	add	sp, #4
 c0288c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 c0288c6:	f7f7 bc41 	b.w	c02014c <mbedtls_rsa_pkcs1_decrypt>
}
 c0288ca:	4802      	ldr	r0, [pc, #8]	; (c0288d4 <rsa_decrypt_wrap+0x40>)
 c0288cc:	b001      	add	sp, #4
 c0288ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0288d2:	bf00      	nop
 c0288d4:	ffffbf80 	.word	0xffffbf80

0c0288d8 <rsa_sign_wrap>:
{
 c0288d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0288dc:	460f      	mov	r7, r1
 c0288de:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 c0288e2:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 c0288e6:	4691      	mov	r9, r2
 c0288e8:	4698      	mov	r8, r3
 c0288ea:	4604      	mov	r4, r0
    *sig_len = mbedtls_rsa_get_len( rsa );
 c0288ec:	f7f6 fedd 	bl	c01f6aa <mbedtls_rsa_get_len>
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 c0288f0:	2301      	movs	r3, #1
    *sig_len = mbedtls_rsa_get_len( rsa );
 c0288f2:	f8cb 0000 	str.w	r0, [fp]
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 c0288f6:	4632      	mov	r2, r6
 c0288f8:	4629      	mov	r1, r5
 c0288fa:	4620      	mov	r0, r4
 c0288fc:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
 c028900:	e9cd 780a 	strd	r7, r8, [sp, #40]	; 0x28
}
 c028904:	b001      	add	sp, #4
 c028906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 c02890a:	f7f7 bd73 	b.w	c0203f4 <mbedtls_rsa_pkcs1_sign>
	...

0c028910 <rsa_verify_wrap>:
{
 c028910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c028914:	b085      	sub	sp, #20
 c028916:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 c028918:	4606      	mov	r6, r0
 c02891a:	460f      	mov	r7, r1
 c02891c:	4691      	mov	r9, r2
 c02891e:	4698      	mov	r8, r3
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 c028920:	f7f6 fec3 	bl	c01f6aa <mbedtls_rsa_get_len>
    if( sig_len < rsa_len )
 c028924:	42a0      	cmp	r0, r4
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 c028926:	4605      	mov	r5, r0
    if( sig_len < rsa_len )
 c028928:	d812      	bhi.n	c028950 <rsa_verify_wrap+0x40>
    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 c02892a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 c02892c:	e9cd 7800 	strd	r7, r8, [sp]
 c028930:	e9cd 9302 	strd	r9, r3, [sp, #8]
 c028934:	2300      	movs	r3, #0
 c028936:	4630      	mov	r0, r6
 c028938:	461a      	mov	r2, r3
 c02893a:	4619      	mov	r1, r3
 c02893c:	f7f7 fec6 	bl	c0206cc <mbedtls_rsa_pkcs1_verify>
 c028940:	b918      	cbnz	r0, c02894a <rsa_verify_wrap+0x3a>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 c028942:	4b04      	ldr	r3, [pc, #16]	; (c028954 <rsa_verify_wrap+0x44>)
 c028944:	42a5      	cmp	r5, r4
 c028946:	bf38      	it	cc
 c028948:	4618      	movcc	r0, r3
}
 c02894a:	b005      	add	sp, #20
 c02894c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 c028950:	4801      	ldr	r0, [pc, #4]	; (c028958 <rsa_verify_wrap+0x48>)
 c028952:	e7fa      	b.n	c02894a <rsa_verify_wrap+0x3a>
 c028954:	ffffc700 	.word	0xffffc700
 c028958:	ffffbc80 	.word	0xffffbc80

0c02895c <eckey_free_wrap>:
{
 c02895c:	b510      	push	{r4, lr}
 c02895e:	4604      	mov	r4, r0
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
 c028960:	f7f4 fd3a 	bl	c01d3d8 <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
 c028964:	4620      	mov	r0, r4
}
 c028966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c02896a:	f001 bc89 	b.w	c02a280 <mbedtls_free>

0c02896e <eckey_alloc_wrap>:
{
 c02896e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 c028970:	21d0      	movs	r1, #208	; 0xd0
 c028972:	2001      	movs	r0, #1
 c028974:	f001 fc7e 	bl	c02a274 <mbedtls_calloc>
    if( ctx != NULL )
 c028978:	4604      	mov	r4, r0
 c02897a:	b108      	cbz	r0, c028980 <eckey_alloc_wrap+0x12>
        mbedtls_ecp_keypair_init( ctx );
 c02897c:	f7f4 fcaa 	bl	c01d2d4 <mbedtls_ecp_keypair_init>
}
 c028980:	4620      	mov	r0, r4
 c028982:	bd10      	pop	{r4, pc}

0c028984 <eckey_check_pair>:
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
 c028984:	f7f5 bb3a 	b.w	c01dffc <mbedtls_ecp_check_pub_priv>

0c028988 <ecdsa_alloc_wrap>:

}
#endif /* MBEDTLS_ECP_RESTARTABLE */

static void *ecdsa_alloc_wrap( void )
{
 c028988:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 c02898a:	21d0      	movs	r1, #208	; 0xd0
 c02898c:	2001      	movs	r0, #1
 c02898e:	f001 fc71 	bl	c02a274 <mbedtls_calloc>

    if( ctx != NULL )
 c028992:	4604      	mov	r4, r0
 c028994:	b108      	cbz	r0, c02899a <ecdsa_alloc_wrap+0x12>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
 c028996:	f7fe fff6 	bl	c027986 <mbedtls_ecdsa_init>

    return( ctx );
}
 c02899a:	4620      	mov	r0, r4
 c02899c:	bd10      	pop	{r4, pc}

0c02899e <ecdsa_free_wrap>:

static void ecdsa_free_wrap( void *ctx )
{
 c02899e:	b510      	push	{r4, lr}
 c0289a0:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
 c0289a2:	f7fe fff2 	bl	c02798a <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
 c0289a6:	4620      	mov	r0, r4
}
 c0289a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c0289ac:	f001 bc68 	b.w	c02a280 <mbedtls_free>

0c0289b0 <ecdsa_sign_wrap>:
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 c0289b0:	f7fe bf7f 	b.w	c0278b2 <mbedtls_ecdsa_write_signature>

0c0289b4 <eckey_sign_wrap>:
{
 c0289b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 c0289b6:	4604      	mov	r4, r0
 c0289b8:	b0b9      	sub	sp, #228	; 0xe4
    mbedtls_ecdsa_init( &ecdsa );
 c0289ba:	a804      	add	r0, sp, #16
{
 c0289bc:	460d      	mov	r5, r1
 c0289be:	4616      	mov	r6, r2
 c0289c0:	461f      	mov	r7, r3
    mbedtls_ecdsa_init( &ecdsa );
 c0289c2:	f7fe ffe0 	bl	c027986 <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 c0289c6:	4621      	mov	r1, r4
 c0289c8:	a804      	add	r0, sp, #16
 c0289ca:	f7fe ffe2 	bl	c027992 <mbedtls_ecdsa_from_keypair>
 c0289ce:	4604      	mov	r4, r0
 c0289d0:	b970      	cbnz	r0, c0289f0 <eckey_sign_wrap+0x3c>
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 c0289d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 c0289d4:	4632      	mov	r2, r6
 c0289d6:	9303      	str	r3, [sp, #12]
 c0289d8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 c0289da:	4629      	mov	r1, r5
 c0289dc:	9302      	str	r3, [sp, #8]
 c0289de:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 c0289e0:	a804      	add	r0, sp, #16
 c0289e2:	9301      	str	r3, [sp, #4]
 c0289e4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 c0289e6:	9300      	str	r3, [sp, #0]
 c0289e8:	463b      	mov	r3, r7
 c0289ea:	f7fe ff62 	bl	c0278b2 <mbedtls_ecdsa_write_signature>
 c0289ee:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 c0289f0:	a804      	add	r0, sp, #16
 c0289f2:	f7fe ffca 	bl	c02798a <mbedtls_ecdsa_free>
}
 c0289f6:	4620      	mov	r0, r4
 c0289f8:	b039      	add	sp, #228	; 0xe4
 c0289fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c0289fc <ecdsa_verify_wrap>:
{
 c0289fc:	b507      	push	{r0, r1, r2, lr}
 c0289fe:	4611      	mov	r1, r2
 c028a00:	461a      	mov	r2, r3
    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
 c028a02:	9b05      	ldr	r3, [sp, #20]
 c028a04:	9300      	str	r3, [sp, #0]
 c028a06:	9b04      	ldr	r3, [sp, #16]
 c028a08:	f7fe ffb4 	bl	c027974 <mbedtls_ecdsa_read_signature>
    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
 c028a0c:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 c028a10:	bf08      	it	eq
 c028a12:	f500 5098 	addeq.w	r0, r0, #4864	; 0x1300
}
 c028a16:	b003      	add	sp, #12
 c028a18:	f85d fb04 	ldr.w	pc, [sp], #4

0c028a1c <eckey_verify_wrap>:
{
 c028a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 c028a1e:	4604      	mov	r4, r0
 c028a20:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_ecdsa_init( &ecdsa );
 c028a22:	a802      	add	r0, sp, #8
{
 c028a24:	460d      	mov	r5, r1
 c028a26:	4616      	mov	r6, r2
 c028a28:	461f      	mov	r7, r3
    mbedtls_ecdsa_init( &ecdsa );
 c028a2a:	f7fe ffac 	bl	c027986 <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 c028a2e:	4621      	mov	r1, r4
 c028a30:	a802      	add	r0, sp, #8
 c028a32:	f7fe ffae 	bl	c027992 <mbedtls_ecdsa_from_keypair>
 c028a36:	4604      	mov	r4, r0
 c028a38:	b950      	cbnz	r0, c028a50 <eckey_verify_wrap+0x34>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
 c028a3a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 c028a3c:	4632      	mov	r2, r6
 c028a3e:	9301      	str	r3, [sp, #4]
 c028a40:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 c028a42:	4629      	mov	r1, r5
 c028a44:	9300      	str	r3, [sp, #0]
 c028a46:	a802      	add	r0, sp, #8
 c028a48:	463b      	mov	r3, r7
 c028a4a:	f7ff ffd7 	bl	c0289fc <ecdsa_verify_wrap>
 c028a4e:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 c028a50:	a802      	add	r0, sp, #8
 c028a52:	f7fe ff9a 	bl	c02798a <mbedtls_ecdsa_free>
}
 c028a56:	4620      	mov	r0, r4
 c028a58:	b037      	add	sp, #220	; 0xdc
 c028a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c028a5c <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_platform_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
 c028a5c:	4800      	ldr	r0, [pc, #0]	; (c028a60 <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
 c028a5e:	4770      	bx	lr
 c028a60:	ffffe100 	.word	0xffffe100

0c028a64 <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 c028a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 c028a68:	2980      	cmp	r1, #128	; 0x80
{
 c028a6a:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 c028a6e:	9003      	str	r0, [sp, #12]
 c028a70:	460f      	mov	r7, r1
 c028a72:	4693      	mov	fp, r2
 c028a74:	469a      	mov	sl, r3
 c028a76:	9ea3      	ldr	r6, [sp, #652]	; 0x28c
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 c028a78:	f200 80e0 	bhi.w	c028c3c <mbedtls_pkcs12_derivation+0x1d8>
 c028a7c:	2b40      	cmp	r3, #64	; 0x40
 c028a7e:	f200 80dd 	bhi.w	c028c3c <mbedtls_pkcs12_derivation+0x1d8>
 c028a82:	2e40      	cmp	r6, #64	; 0x40
 c028a84:	f200 80da 	bhi.w	c028c3c <mbedtls_pkcs12_derivation+0x1d8>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
 c028a88:	f89d 0290 	ldrb.w	r0, [sp, #656]	; 0x290
 c028a8c:	f7ff f9fa 	bl	c027e84 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 c028a90:	9001      	str	r0, [sp, #4]
 c028a92:	2800      	cmp	r0, #0
 c028a94:	f000 80d4 	beq.w	c028c40 <mbedtls_pkcs12_derivation+0x1dc>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
 c028a98:	a805      	add	r0, sp, #20
 c028a9a:	f7ff f9ff 	bl	c027e9c <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 c028a9e:	2200      	movs	r2, #0
 c028aa0:	9901      	ldr	r1, [sp, #4]
 c028aa2:	a805      	add	r0, sp, #20
 c028aa4:	f7ff fa1a 	bl	c027edc <mbedtls_md_setup>
 c028aa8:	2800      	cmp	r0, #0
 c028aaa:	d17c      	bne.n	c028ba6 <mbedtls_pkcs12_derivation+0x142>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 c028aac:	9801      	ldr	r0, [sp, #4]
 c028aae:	f7ff fb1d 	bl	c0280ec <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
 c028ab2:	2820      	cmp	r0, #32
 c028ab4:	bf8c      	ite	hi
 c028ab6:	2480      	movhi	r4, #128	; 0x80
 c028ab8:	2440      	movls	r4, #64	; 0x40
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 c028aba:	46a0      	mov	r8, r4
    hlen = mbedtls_md_get_size( md_info );
 c028abc:	9002      	str	r0, [sp, #8]
    memset( diversifier, (unsigned char) id, v );
 c028abe:	4622      	mov	r2, r4
 c028ac0:	f89d 1294 	ldrb.w	r1, [sp, #660]	; 0x294
 c028ac4:	a818      	add	r0, sp, #96	; 0x60
 c028ac6:	f7ee ff7e 	bl	c0179c6 <memset>
    unsigned char *p = data;
 c028aca:	ab38      	add	r3, sp, #224	; 0xe0
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
 c028acc:	4546      	cmp	r6, r8
 c028ace:	4635      	mov	r5, r6
 c028ad0:	bf28      	it	cs
 c028ad2:	4645      	movcs	r5, r8
        memcpy( p, filler, use_len );
 c028ad4:	4618      	mov	r0, r3
 c028ad6:	462a      	mov	r2, r5
 c028ad8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 c028ada:	f7ee ff50 	bl	c01797e <memcpy>
 c028ade:	4603      	mov	r3, r0
    while( data_len > 0 )
 c028ae0:	ebb8 0805 	subs.w	r8, r8, r5
        p += use_len;
 c028ae4:	442b      	add	r3, r5
    while( data_len > 0 )
 c028ae6:	d1f1      	bne.n	c028acc <mbedtls_pkcs12_derivation+0x68>
    unsigned char *p = data;
 c028ae8:	ab58      	add	r3, sp, #352	; 0x160
    while( data_len > 0 )
 c028aea:	46a1      	mov	r9, r4
 c028aec:	4698      	mov	r8, r3
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
 c028aee:	45ca      	cmp	sl, r9
 c028af0:	4655      	mov	r5, sl
 c028af2:	bf28      	it	cs
 c028af4:	464d      	movcs	r5, r9
        memcpy( p, filler, use_len );
 c028af6:	4618      	mov	r0, r3
 c028af8:	462a      	mov	r2, r5
 c028afa:	4659      	mov	r1, fp
 c028afc:	f7ee ff3f 	bl	c01797e <memcpy>
 c028b00:	4603      	mov	r3, r0
    while( data_len > 0 )
 c028b02:	ebb9 0905 	subs.w	r9, r9, r5
        p += use_len;
 c028b06:	442b      	add	r3, r5
    while( data_len > 0 )
 c028b08:	d1f1      	bne.n	c028aee <mbedtls_pkcs12_derivation+0x8a>
 c028b0a:	ad08      	add	r5, sp, #32

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
 c028b0c:	2f00      	cmp	r7, #0
 c028b0e:	d035      	beq.n	c028b7c <mbedtls_pkcs12_derivation+0x118>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 c028b10:	a805      	add	r0, sp, #20
 c028b12:	f7ff fa03 	bl	c027f1c <mbedtls_md_starts>
 c028b16:	4606      	mov	r6, r0
 c028b18:	bb88      	cbnz	r0, c028b7e <mbedtls_pkcs12_derivation+0x11a>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
 c028b1a:	4622      	mov	r2, r4
 c028b1c:	a918      	add	r1, sp, #96	; 0x60
 c028b1e:	a805      	add	r0, sp, #20
 c028b20:	f7ff fa06 	bl	c027f30 <mbedtls_md_update>
 c028b24:	4606      	mov	r6, r0
 c028b26:	bb50      	cbnz	r0, c028b7e <mbedtls_pkcs12_derivation+0x11a>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
 c028b28:	4622      	mov	r2, r4
 c028b2a:	a938      	add	r1, sp, #224	; 0xe0
 c028b2c:	a805      	add	r0, sp, #20
 c028b2e:	f7ff f9ff 	bl	c027f30 <mbedtls_md_update>
 c028b32:	4606      	mov	r6, r0
 c028b34:	bb18      	cbnz	r0, c028b7e <mbedtls_pkcs12_derivation+0x11a>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
 c028b36:	4622      	mov	r2, r4
 c028b38:	4641      	mov	r1, r8
 c028b3a:	a805      	add	r0, sp, #20
 c028b3c:	f7ff f9f8 	bl	c027f30 <mbedtls_md_update>
 c028b40:	4606      	mov	r6, r0
 c028b42:	b9e0      	cbnz	r0, c028b7e <mbedtls_pkcs12_derivation+0x11a>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
 c028b44:	4629      	mov	r1, r5
 c028b46:	a805      	add	r0, sp, #20
 c028b48:	f7ff f9fc 	bl	c027f44 <mbedtls_md_finish>
 c028b4c:	4606      	mov	r6, r0
 c028b4e:	b9b0      	cbnz	r0, c028b7e <mbedtls_pkcs12_derivation+0x11a>
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 c028b50:	f04f 0901 	mov.w	r9, #1
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
 c028b54:	46aa      	mov	sl, r5
        for( i = 1; i < (size_t) iterations; i++ )
 c028b56:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 c028b58:	454b      	cmp	r3, r9
 c028b5a:	d828      	bhi.n	c028bae <mbedtls_pkcs12_derivation+0x14a>
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
 c028b5c:	9b02      	ldr	r3, [sp, #8]
        memcpy( p, hash_output, use_len );
 c028b5e:	4629      	mov	r1, r5
        use_len = ( datalen > hlen ) ? hlen : datalen;
 c028b60:	42bb      	cmp	r3, r7
 c028b62:	bf28      	it	cs
 c028b64:	463b      	movcs	r3, r7
 c028b66:	4699      	mov	r9, r3
        memcpy( p, hash_output, use_len );
 c028b68:	461a      	mov	r2, r3
 c028b6a:	9803      	ldr	r0, [sp, #12]
 c028b6c:	f7ee ff07 	bl	c01797e <memcpy>
        datalen -= use_len;
        p += use_len;
 c028b70:	9b03      	ldr	r3, [sp, #12]

        if( datalen == 0 )
 c028b72:	ebb7 0709 	subs.w	r7, r7, r9
        p += use_len;
 c028b76:	444b      	add	r3, r9
 c028b78:	9303      	str	r3, [sp, #12]
        if( datalen == 0 )
 c028b7a:	d124      	bne.n	c028bc6 <mbedtls_pkcs12_derivation+0x162>
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
        }
    }

    ret = 0;
 c028b7c:	2600      	movs	r6, #0

exit:
    mbedtls_platform_zeroize( salt_block, sizeof( salt_block ) );
 c028b7e:	2180      	movs	r1, #128	; 0x80
 c028b80:	a838      	add	r0, sp, #224	; 0xe0
 c028b82:	f001 fb8d 	bl	c02a2a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( pwd_block, sizeof( pwd_block ) );
 c028b86:	2180      	movs	r1, #128	; 0x80
 c028b88:	4640      	mov	r0, r8
 c028b8a:	f001 fb89 	bl	c02a2a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_block, sizeof( hash_block ) );
 c028b8e:	2180      	movs	r1, #128	; 0x80
 c028b90:	a878      	add	r0, sp, #480	; 0x1e0
 c028b92:	f001 fb85 	bl	c02a2a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_output, sizeof( hash_output ) );
 c028b96:	2140      	movs	r1, #64	; 0x40
 c028b98:	4628      	mov	r0, r5
 c028b9a:	f001 fb81 	bl	c02a2a0 <mbedtls_platform_zeroize>

    mbedtls_md_free( &md_ctx );
 c028b9e:	a805      	add	r0, sp, #20
 c028ba0:	f7ff f981 	bl	c027ea6 <mbedtls_md_free>

    return( ret );
 c028ba4:	4630      	mov	r0, r6
}
 c028ba6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 c028baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
 c028bae:	4653      	mov	r3, sl
 c028bb0:	9a02      	ldr	r2, [sp, #8]
 c028bb2:	4651      	mov	r1, sl
 c028bb4:	9801      	ldr	r0, [sp, #4]
 c028bb6:	f7ff f9cf 	bl	c027f58 <mbedtls_md>
 c028bba:	4606      	mov	r6, r0
 c028bbc:	2800      	cmp	r0, #0
 c028bbe:	d1de      	bne.n	c028b7e <mbedtls_pkcs12_derivation+0x11a>
        for( i = 1; i < (size_t) iterations; i++ )
 c028bc0:	f109 0901 	add.w	r9, r9, #1
 c028bc4:	e7c7      	b.n	c028b56 <mbedtls_pkcs12_derivation+0xf2>
    unsigned char *p = data;
 c028bc6:	ab78      	add	r3, sp, #480	; 0x1e0
 c028bc8:	46a1      	mov	r9, r4
 c028bca:	469a      	mov	sl, r3
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
 c028bcc:	9a02      	ldr	r2, [sp, #8]
        memcpy( p, filler, use_len );
 c028bce:	4618      	mov	r0, r3
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
 c028bd0:	454a      	cmp	r2, r9
 c028bd2:	bf28      	it	cs
 c028bd4:	464a      	movcs	r2, r9
        memcpy( p, filler, use_len );
 c028bd6:	4629      	mov	r1, r5
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
 c028bd8:	4693      	mov	fp, r2
        memcpy( p, filler, use_len );
 c028bda:	f7ee fed0 	bl	c01797e <memcpy>
 c028bde:	4603      	mov	r3, r0
    while( data_len > 0 )
 c028be0:	ebb9 090b 	subs.w	r9, r9, fp
        p += use_len;
 c028be4:	445b      	add	r3, fp
    while( data_len > 0 )
 c028be6:	d1f1      	bne.n	c028bcc <mbedtls_pkcs12_derivation+0x168>
 c028be8:	ab78      	add	r3, sp, #480	; 0x1e0
 c028bea:	4423      	add	r3, r4
            if( ++hash_block[i - 1] != 0 )
 c028bec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 c028bf0:	3201      	adds	r2, #1
 c028bf2:	b2d2      	uxtb	r2, r2
 c028bf4:	701a      	strb	r2, [r3, #0]
 c028bf6:	b9f2      	cbnz	r2, c028c36 <mbedtls_pkcs12_derivation+0x1d2>
        for( i = v; i > 0; i-- )
 c028bf8:	a978      	add	r1, sp, #480	; 0x1e0
 c028bfa:	428b      	cmp	r3, r1
 c028bfc:	d1f6      	bne.n	c028bec <mbedtls_pkcs12_derivation+0x188>
 c028bfe:	4623      	mov	r3, r4
            j = salt_block[i - 1] + hash_block[i - 1] + c;
 c028c00:	a838      	add	r0, sp, #224	; 0xe0
 c028c02:	3b01      	subs	r3, #1
 c028c04:	5c19      	ldrb	r1, [r3, r0]
 c028c06:	f81a 5003 	ldrb.w	r5, [sl, r3]
 c028c0a:	4429      	add	r1, r5
 c028c0c:	4411      	add	r1, r2
            c = (unsigned char) (j >> 8);
 c028c0e:	f3c1 2207 	ubfx	r2, r1, #8, #8
            salt_block[i - 1] = j & 0xFF;
 c028c12:	5419      	strb	r1, [r3, r0]
        for( i = v; i > 0; i-- )
 c028c14:	2b00      	cmp	r3, #0
 c028c16:	d1f4      	bne.n	c028c02 <mbedtls_pkcs12_derivation+0x19e>
        for( i = v; i > 0; i-- )
 c028c18:	4622      	mov	r2, r4
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
 c028c1a:	3a01      	subs	r2, #1
 c028c1c:	f818 1002 	ldrb.w	r1, [r8, r2]
 c028c20:	f81a 0002 	ldrb.w	r0, [sl, r2]
 c028c24:	4401      	add	r1, r0
 c028c26:	4419      	add	r1, r3
            c = (unsigned char) (j >> 8);
 c028c28:	f3c1 2307 	ubfx	r3, r1, #8, #8
            pwd_block[i - 1] = j & 0xFF;
 c028c2c:	f808 1002 	strb.w	r1, [r8, r2]
        for( i = v; i > 0; i-- )
 c028c30:	2a00      	cmp	r2, #0
 c028c32:	d1f2      	bne.n	c028c1a <mbedtls_pkcs12_derivation+0x1b6>
 c028c34:	e769      	b.n	c028b0a <mbedtls_pkcs12_derivation+0xa6>
 c028c36:	4623      	mov	r3, r4
 c028c38:	2200      	movs	r2, #0
 c028c3a:	e7e1      	b.n	c028c00 <mbedtls_pkcs12_derivation+0x19c>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 c028c3c:	4801      	ldr	r0, [pc, #4]	; (c028c44 <mbedtls_pkcs12_derivation+0x1e0>)
 c028c3e:	e7b2      	b.n	c028ba6 <mbedtls_pkcs12_derivation+0x142>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 c028c40:	4801      	ldr	r0, [pc, #4]	; (c028c48 <mbedtls_pkcs12_derivation+0x1e4>)
 c028c42:	e7b0      	b.n	c028ba6 <mbedtls_pkcs12_derivation+0x142>
 c028c44:	ffffe080 	.word	0xffffe080
 c028c48:	ffffe100 	.word	0xffffe100

0c028c4c <mbedtls_pkcs12_pbe>:
{
 c028c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t olen = 0;
 c028c50:	2600      	movs	r6, #0
{
 c028c52:	b0d9      	sub	sp, #356	; 0x164
 c028c54:	4604      	mov	r4, r0
    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 c028c56:	4610      	mov	r0, r2
{
 c028c58:	468b      	mov	fp, r1
 c028c5a:	4699      	mov	r9, r3
    size_t olen = 0;
 c028c5c:	9606      	str	r6, [sp, #24]
    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 c028c5e:	f7fd fe75 	bl	c02694c <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 c028c62:	4605      	mov	r5, r0
 c028c64:	2800      	cmp	r0, #0
 c028c66:	f000 80b3 	beq.w	c028dd0 <mbedtls_pkcs12_pbe+0x184>
    if( pwdlen > PKCS12_MAX_PWDLEN )
 c028c6a:	9b63      	ldr	r3, [sp, #396]	; 0x18c
    keylen = cipher_info->key_bitlen / 8;
 c028c6c:	6847      	ldr	r7, [r0, #4]
    if( pwdlen > PKCS12_MAX_PWDLEN )
 c028c6e:	2b80      	cmp	r3, #128	; 0x80
    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
 c028c70:	f8d0 800c 	ldr.w	r8, [r0, #12]
    int ret, iterations = 0;
 c028c74:	9607      	str	r6, [sp, #28]
    if( pwdlen > PKCS12_MAX_PWDLEN )
 c028c76:	f200 80a9 	bhi.w	c028dcc <mbedtls_pkcs12_pbe+0x180>
    memset( &unipwd, 0, sizeof(unipwd) );
 c028c7a:	4631      	mov	r1, r6
 c028c7c:	f44f 7281 	mov.w	r2, #258	; 0x102
 c028c80:	a817      	add	r0, sp, #92	; 0x5c
    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
 c028c82:	e9cd 6608 	strd	r6, r6, [sp, #32]
 c028c86:	960a      	str	r6, [sp, #40]	; 0x28
    memset( &unipwd, 0, sizeof(unipwd) );
 c028c88:	f7ee fe9d 	bl	c0179c6 <memset>
    const unsigned char *end = params->p + params->len;
 c028c8c:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 c028c90:	441e      	add	r6, r3
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 c028c92:	6823      	ldr	r3, [r4, #0]
    unsigned char **p = &params->p;
 c028c94:	f104 0a08 	add.w	sl, r4, #8
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 c028c98:	2b30      	cmp	r3, #48	; 0x30
 c028c9a:	f040 809b 	bne.w	c028dd4 <mbedtls_pkcs12_pbe+0x188>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 c028c9e:	2304      	movs	r3, #4
 c028ca0:	aa09      	add	r2, sp, #36	; 0x24
 c028ca2:	4631      	mov	r1, r6
 c028ca4:	4650      	mov	r0, sl
 c028ca6:	f7fb fa02 	bl	c0240ae <mbedtls_asn1_get_tag>
 c028caa:	2800      	cmp	r0, #0
 c028cac:	d05f      	beq.n	c028d6e <mbedtls_pkcs12_pbe+0x122>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
 c028cae:	f5a0 54f4 	sub.w	r4, r0, #7808	; 0x1e80
    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
 c028cb2:	2c00      	cmp	r4, #0
 c028cb4:	f040 8086 	bne.w	c028dc4 <mbedtls_pkcs12_pbe+0x178>
{
 c028cb8:	2300      	movs	r3, #0
    for( i = 0; i < pwdlen; i++ )
 c028cba:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 c028cbc:	429a      	cmp	r2, r3
 c028cbe:	d167      	bne.n	c028d90 <mbedtls_pkcs12_pbe+0x144>
    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
 c028cc0:	9b07      	ldr	r3, [sp, #28]
 c028cc2:	1c56      	adds	r6, r2, #1
 c028cc4:	9304      	str	r3, [sp, #16]
 c028cc6:	2301      	movs	r3, #1
 c028cc8:	e9cd 9302 	strd	r9, r3, [sp, #8]
 c028ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    keylen = cipher_info->key_bitlen / 8;
 c028cce:	08ff      	lsrs	r7, r7, #3
    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
 c028cd0:	9301      	str	r3, [sp, #4]
 c028cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c028cd4:	0076      	lsls	r6, r6, #1
 c028cd6:	9300      	str	r3, [sp, #0]
 c028cd8:	aa17      	add	r2, sp, #92	; 0x5c
 c028cda:	4633      	mov	r3, r6
 c028cdc:	4639      	mov	r1, r7
 c028cde:	a80f      	add	r0, sp, #60	; 0x3c
 c028ce0:	f7ff fec0 	bl	c028a64 <mbedtls_pkcs12_derivation>
 c028ce4:	4604      	mov	r4, r0
 c028ce6:	2800      	cmp	r0, #0
 c028ce8:	d16c      	bne.n	c028dc4 <mbedtls_pkcs12_pbe+0x178>
    if( iv == NULL || ivlen == 0 )
 c028cea:	f1b8 0f00 	cmp.w	r8, #0
 c028cee:	d157      	bne.n	c028da0 <mbedtls_pkcs12_pbe+0x154>
    mbedtls_cipher_init( &cipher_ctx );
 c028cf0:	a817      	add	r0, sp, #92	; 0x5c
 c028cf2:	f7fd fe4d 	bl	c026990 <mbedtls_cipher_init>
    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 c028cf6:	4629      	mov	r1, r5
 c028cf8:	a817      	add	r0, sp, #92	; 0x5c
 c028cfa:	f7fe f843 	bl	c026d84 <mbedtls_cipher_setup>
 c028cfe:	4604      	mov	r4, r0
 c028d00:	bb48      	cbnz	r0, c028d56 <mbedtls_pkcs12_pbe+0x10a>
    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 c028d02:	fa4f f38b 	sxtb.w	r3, fp
 c028d06:	00fa      	lsls	r2, r7, #3
 c028d08:	a90f      	add	r1, sp, #60	; 0x3c
 c028d0a:	a817      	add	r0, sp, #92	; 0x5c
 c028d0c:	f7fd fe5c 	bl	c0269c8 <mbedtls_cipher_setkey>
 c028d10:	4604      	mov	r4, r0
 c028d12:	bb00      	cbnz	r0, c028d56 <mbedtls_pkcs12_pbe+0x10a>
    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
 c028d14:	68ea      	ldr	r2, [r5, #12]
 c028d16:	a90b      	add	r1, sp, #44	; 0x2c
 c028d18:	a817      	add	r0, sp, #92	; 0x5c
 c028d1a:	f7fd fe75 	bl	c026a08 <mbedtls_cipher_set_iv>
 c028d1e:	4604      	mov	r4, r0
 c028d20:	b9c8      	cbnz	r0, c028d56 <mbedtls_pkcs12_pbe+0x10a>
    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
 c028d22:	a817      	add	r0, sp, #92	; 0x5c
 c028d24:	f7fd fe92 	bl	c026a4c <mbedtls_cipher_reset>
 c028d28:	4604      	mov	r4, r0
 c028d2a:	b9a0      	cbnz	r0, c028d56 <mbedtls_pkcs12_pbe+0x10a>
    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
 c028d2c:	ad06      	add	r5, sp, #24
 c028d2e:	9500      	str	r5, [sp, #0]
 c028d30:	a964      	add	r1, sp, #400	; 0x190
 c028d32:	c90e      	ldmia	r1, {r1, r2, r3}
 c028d34:	a817      	add	r0, sp, #92	; 0x5c
 c028d36:	f7fd fe93 	bl	c026a60 <mbedtls_cipher_update>
 c028d3a:	4604      	mov	r4, r0
 c028d3c:	b958      	cbnz	r0, c028d56 <mbedtls_pkcs12_pbe+0x10a>
    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
 c028d3e:	6829      	ldr	r1, [r5, #0]
 c028d40:	9b66      	ldr	r3, [sp, #408]	; 0x198
 c028d42:	462a      	mov	r2, r5
 c028d44:	4419      	add	r1, r3
 c028d46:	a817      	add	r0, sp, #92	; 0x5c
 c028d48:	f7fd ff7c 	bl	c026c44 <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
 c028d4c:	f5a4 54f0 	sub.w	r4, r4, #7680	; 0x1e00
 c028d50:	2800      	cmp	r0, #0
 c028d52:	bf08      	it	eq
 c028d54:	2400      	moveq	r4, #0
    mbedtls_platform_zeroize( key, sizeof( key ) );
 c028d56:	a80f      	add	r0, sp, #60	; 0x3c
 c028d58:	2120      	movs	r1, #32
 c028d5a:	f001 faa1 	bl	c02a2a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( iv,  sizeof( iv  ) );
 c028d5e:	a80b      	add	r0, sp, #44	; 0x2c
 c028d60:	2110      	movs	r1, #16
 c028d62:	f001 fa9d 	bl	c02a2a0 <mbedtls_platform_zeroize>
    mbedtls_cipher_free( &cipher_ctx );
 c028d66:	a817      	add	r0, sp, #92	; 0x5c
 c028d68:	f7fd fe16 	bl	c026998 <mbedtls_cipher_free>
    return( ret );
 c028d6c:	e02a      	b.n	c028dc4 <mbedtls_pkcs12_pbe+0x178>
    salt->p = *p;
 c028d6e:	68a3      	ldr	r3, [r4, #8]
    *p += salt->len;
 c028d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
    salt->p = *p;
 c028d72:	930a      	str	r3, [sp, #40]	; 0x28
    *p += salt->len;
 c028d74:	4413      	add	r3, r2
 c028d76:	60a3      	str	r3, [r4, #8]
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
 c028d78:	aa07      	add	r2, sp, #28
 c028d7a:	4631      	mov	r1, r6
 c028d7c:	4650      	mov	r0, sl
 c028d7e:	f7fb f9aa 	bl	c0240d6 <mbedtls_asn1_get_int>
 c028d82:	2800      	cmp	r0, #0
 c028d84:	d193      	bne.n	c028cae <mbedtls_pkcs12_pbe+0x62>
    if( *p != end )
 c028d86:	68a3      	ldr	r3, [r4, #8]
 c028d88:	429e      	cmp	r6, r3
 c028d8a:	d095      	beq.n	c028cb8 <mbedtls_pkcs12_pbe+0x6c>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
 c028d8c:	4c12      	ldr	r4, [pc, #72]	; (c028dd8 <mbedtls_pkcs12_pbe+0x18c>)
 c028d8e:	e019      	b.n	c028dc4 <mbedtls_pkcs12_pbe+0x178>
        unipwd[i * 2 + 1] = pwd[i];
 c028d90:	9962      	ldr	r1, [sp, #392]	; 0x188
 c028d92:	aa17      	add	r2, sp, #92	; 0x5c
 c028d94:	5cc9      	ldrb	r1, [r1, r3]
 c028d96:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 c028d9a:	7051      	strb	r1, [r2, #1]
    for( i = 0; i < pwdlen; i++ )
 c028d9c:	3301      	adds	r3, #1
 c028d9e:	e78c      	b.n	c028cba <mbedtls_pkcs12_pbe+0x6e>
    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
 c028da0:	9b07      	ldr	r3, [sp, #28]
 c028da2:	aa17      	add	r2, sp, #92	; 0x5c
 c028da4:	9304      	str	r3, [sp, #16]
 c028da6:	2302      	movs	r3, #2
 c028da8:	e9cd 9302 	strd	r9, r3, [sp, #8]
 c028dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c028dae:	4641      	mov	r1, r8
 c028db0:	9301      	str	r3, [sp, #4]
 c028db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c028db4:	a80b      	add	r0, sp, #44	; 0x2c
 c028db6:	9300      	str	r3, [sp, #0]
 c028db8:	4633      	mov	r3, r6
 c028dba:	f7ff fe53 	bl	c028a64 <mbedtls_pkcs12_derivation>
 c028dbe:	4604      	mov	r4, r0
 c028dc0:	2800      	cmp	r0, #0
 c028dc2:	d095      	beq.n	c028cf0 <mbedtls_pkcs12_pbe+0xa4>
}
 c028dc4:	4620      	mov	r0, r4
 c028dc6:	b059      	add	sp, #356	; 0x164
 c028dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 c028dcc:	4c03      	ldr	r4, [pc, #12]	; (c028ddc <mbedtls_pkcs12_pbe+0x190>)
 c028dce:	e7f9      	b.n	c028dc4 <mbedtls_pkcs12_pbe+0x178>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 c028dd0:	4c03      	ldr	r4, [pc, #12]	; (c028de0 <mbedtls_pkcs12_pbe+0x194>)
 c028dd2:	e7f7      	b.n	c028dc4 <mbedtls_pkcs12_pbe+0x178>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
 c028dd4:	4c03      	ldr	r4, [pc, #12]	; (c028de4 <mbedtls_pkcs12_pbe+0x198>)
 c028dd6:	e7f5      	b.n	c028dc4 <mbedtls_pkcs12_pbe+0x178>
 c028dd8:	ffffe11a 	.word	0xffffe11a
 c028ddc:	ffffe080 	.word	0xffffe080
 c028de0:	ffffe100 	.word	0xffffe100
 c028de4:	ffffe11e 	.word	0xffffe11e

0c028de8 <mbedtls_pkcs5_pbkdf2_hmac>:
int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx,
                       const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 c028de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c028dec:	4604      	mov	r4, r0
 c028dee:	b0a5      	sub	sp, #148	; 0x94
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 c028df0:	6800      	ldr	r0, [r0, #0]
{
 c028df2:	9301      	str	r3, [sp, #4]
 c028df4:	460f      	mov	r7, r1
 c028df6:	4693      	mov	fp, r2
 c028df8:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 c028dfa:	f7ff f977 	bl	c0280ec <mbedtls_md_get_size>
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
 c028dfe:	2300      	movs	r3, #0
 c028e00:	9303      	str	r3, [sp, #12]
    counter[3] = 1;
 c028e02:	2301      	movs	r3, #1
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 c028e04:	4681      	mov	r9, r0
    counter[3] = 1;
 c028e06:	f88d 300f 	strb.w	r3, [sp, #15]
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 c028e0a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    while( key_length )
 c028e0e:	b90e      	cbnz	r6, c028e14 <mbedtls_pkcs5_pbkdf2_hmac+0x2c>
        for( i = 4; i > 0; i-- )
            if( ++counter[i - 1] != 0 )
                break;
    }

    return( 0 );
 c028e10:	4630      	mov	r0, r6
 c028e12:	e04e      	b.n	c028eb2 <mbedtls_pkcs5_pbkdf2_hmac+0xca>
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 c028e14:	465a      	mov	r2, fp
 c028e16:	4639      	mov	r1, r7
 c028e18:	4620      	mov	r0, r4
 c028e1a:	f7ff f8ad 	bl	c027f78 <mbedtls_md_hmac_starts>
 c028e1e:	2800      	cmp	r0, #0
 c028e20:	d147      	bne.n	c028eb2 <mbedtls_pkcs5_pbkdf2_hmac+0xca>
        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
 c028e22:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 c028e24:	9901      	ldr	r1, [sp, #4]
 c028e26:	4620      	mov	r0, r4
 c028e28:	f7ff f90a 	bl	c028040 <mbedtls_md_hmac_update>
 c028e2c:	2800      	cmp	r0, #0
 c028e2e:	d140      	bne.n	c028eb2 <mbedtls_pkcs5_pbkdf2_hmac+0xca>
        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
 c028e30:	2204      	movs	r2, #4
 c028e32:	a903      	add	r1, sp, #12
 c028e34:	4620      	mov	r0, r4
 c028e36:	f7ff f903 	bl	c028040 <mbedtls_md_hmac_update>
 c028e3a:	2800      	cmp	r0, #0
 c028e3c:	d139      	bne.n	c028eb2 <mbedtls_pkcs5_pbkdf2_hmac+0xca>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 c028e3e:	4641      	mov	r1, r8
 c028e40:	4620      	mov	r0, r4
 c028e42:	f7ff f90d 	bl	c028060 <mbedtls_md_hmac_finish>
 c028e46:	bba0      	cbnz	r0, c028eb2 <mbedtls_pkcs5_pbkdf2_hmac+0xca>
        memcpy( md1, work, md_size );
 c028e48:	ad04      	add	r5, sp, #16
 c028e4a:	464a      	mov	r2, r9
 c028e4c:	4641      	mov	r1, r8
 c028e4e:	4628      	mov	r0, r5
 c028e50:	f7ee fd95 	bl	c01797e <memcpy>
        for( i = 1; i < iteration_count; i++ )
 c028e54:	f04f 0a01 	mov.w	sl, #1
 c028e58:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 c028e5a:	459a      	cmp	sl, r3
 c028e5c:	d318      	bcc.n	c028e90 <mbedtls_pkcs5_pbkdf2_hmac+0xa8>
        use_len = ( key_length < md_size ) ? key_length : md_size;
 c028e5e:	45b1      	cmp	r9, r6
 c028e60:	464d      	mov	r5, r9
 c028e62:	bf28      	it	cs
 c028e64:	4635      	movcs	r5, r6
        memcpy( out_p, work, use_len );
 c028e66:	4641      	mov	r1, r8
 c028e68:	462a      	mov	r2, r5
 c028e6a:	9831      	ldr	r0, [sp, #196]	; 0xc4
 c028e6c:	f7ee fd87 	bl	c01797e <memcpy>
        out_p += use_len;
 c028e70:	9b31      	ldr	r3, [sp, #196]	; 0xc4
        key_length -= (uint32_t) use_len;
 c028e72:	1b76      	subs	r6, r6, r5
        out_p += use_len;
 c028e74:	442b      	add	r3, r5
 c028e76:	9331      	str	r3, [sp, #196]	; 0xc4
 c028e78:	aa04      	add	r2, sp, #16
            if( ++counter[i - 1] != 0 )
 c028e7a:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 c028e7e:	3301      	adds	r3, #1
 c028e80:	b2db      	uxtb	r3, r3
 c028e82:	7013      	strb	r3, [r2, #0]
 c028e84:	2b00      	cmp	r3, #0
 c028e86:	d1c2      	bne.n	c028e0e <mbedtls_pkcs5_pbkdf2_hmac+0x26>
        for( i = 4; i > 0; i-- )
 c028e88:	ab03      	add	r3, sp, #12
 c028e8a:	429a      	cmp	r2, r3
 c028e8c:	d1f5      	bne.n	c028e7a <mbedtls_pkcs5_pbkdf2_hmac+0x92>
 c028e8e:	e7be      	b.n	c028e0e <mbedtls_pkcs5_pbkdf2_hmac+0x26>
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 c028e90:	465a      	mov	r2, fp
 c028e92:	4639      	mov	r1, r7
 c028e94:	4620      	mov	r0, r4
 c028e96:	f7ff f86f 	bl	c027f78 <mbedtls_md_hmac_starts>
 c028e9a:	b950      	cbnz	r0, c028eb2 <mbedtls_pkcs5_pbkdf2_hmac+0xca>
            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
 c028e9c:	464a      	mov	r2, r9
 c028e9e:	4629      	mov	r1, r5
 c028ea0:	4620      	mov	r0, r4
 c028ea2:	f7ff f8cd 	bl	c028040 <mbedtls_md_hmac_update>
 c028ea6:	b920      	cbnz	r0, c028eb2 <mbedtls_pkcs5_pbkdf2_hmac+0xca>
            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
 c028ea8:	4629      	mov	r1, r5
 c028eaa:	4620      	mov	r0, r4
 c028eac:	f7ff f8d8 	bl	c028060 <mbedtls_md_hmac_finish>
 c028eb0:	b148      	cbz	r0, c028ec6 <mbedtls_pkcs5_pbkdf2_hmac+0xde>
}
 c028eb2:	b025      	add	sp, #148	; 0x94
 c028eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                work[j] ^= md1[j];
 c028eb8:	f810 3008 	ldrb.w	r3, [r0, r8]
 c028ebc:	5d42      	ldrb	r2, [r0, r5]
 c028ebe:	4053      	eors	r3, r2
 c028ec0:	f800 3008 	strb.w	r3, [r0, r8]
            for( j = 0; j < md_size; j++ )
 c028ec4:	3001      	adds	r0, #1
 c028ec6:	4581      	cmp	r9, r0
 c028ec8:	dcf6      	bgt.n	c028eb8 <mbedtls_pkcs5_pbkdf2_hmac+0xd0>
        for( i = 1; i < iteration_count; i++ )
 c028eca:	f10a 0a01 	add.w	sl, sl, #1
 c028ece:	e7c3      	b.n	c028e58 <mbedtls_pkcs5_pbkdf2_hmac+0x70>

0c028ed0 <mbedtls_pkcs5_pbes2>:
{
 c028ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c028ed4:	461f      	mov	r7, r3
    int ret, iterations = 0, keylen = 0;
 c028ed6:	2300      	movs	r3, #0
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 c028ed8:	2404      	movs	r4, #4
{
 c028eda:	b0bd      	sub	sp, #244	; 0xf4
 c028edc:	4616      	mov	r6, r2
    int ret, iterations = 0, keylen = 0;
 c028ede:	e9cd 3305 	strd	r3, r3, [sp, #20]
    size_t olen = 0;
 c028ee2:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
 c028ee4:	6842      	ldr	r2, [r0, #4]
    p = pbe_params->p;
 c028ee6:	6883      	ldr	r3, [r0, #8]
{
 c028ee8:	460d      	mov	r5, r1
    p = pbe_params->p;
 c028eea:	9307      	str	r3, [sp, #28]
    end = p + pbe_params->len;
 c028eec:	eb03 0802 	add.w	r8, r3, r2
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 c028ef0:	6803      	ldr	r3, [r0, #0]
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 c028ef2:	f88d 4012 	strb.w	r4, [sp, #18]
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 c028ef6:	2b30      	cmp	r3, #48	; 0x30
 c028ef8:	d11c      	bne.n	c028f34 <mbedtls_pkcs5_pbes2+0x64>
    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid,
 c028efa:	ab0f      	add	r3, sp, #60	; 0x3c
 c028efc:	aa09      	add	r2, sp, #36	; 0x24
 c028efe:	4641      	mov	r1, r8
 c028f00:	a807      	add	r0, sp, #28
 c028f02:	f7fb f933 	bl	c02416c <mbedtls_asn1_get_alg>
 c028f06:	b110      	cbz	r0, c028f0e <mbedtls_pkcs5_pbes2+0x3e>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 c028f08:	f5a0 543c 	sub.w	r4, r0, #12032	; 0x2f00
 c028f0c:	e0ca      	b.n	c0290a4 <mbedtls_pkcs5_pbes2+0x1d4>
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
 c028f0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c028f10:	2a09      	cmp	r2, #9
 c028f12:	d001      	beq.n	c028f18 <mbedtls_pkcs5_pbes2+0x48>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
 c028f14:	4c66      	ldr	r4, [pc, #408]	; (c0290b0 <mbedtls_pkcs5_pbes2+0x1e0>)
 c028f16:	e0c5      	b.n	c0290a4 <mbedtls_pkcs5_pbes2+0x1d4>
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
 c028f18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 c028f1a:	4866      	ldr	r0, [pc, #408]	; (c0290b4 <mbedtls_pkcs5_pbes2+0x1e4>)
 c028f1c:	f7ee fd20 	bl	c017960 <memcmp>
 c028f20:	2800      	cmp	r0, #0
 c028f22:	d1f7      	bne.n	c028f14 <mbedtls_pkcs5_pbes2+0x44>
    unsigned char *p = params->p;
 c028f24:	9b11      	ldr	r3, [sp, #68]	; 0x44
    const unsigned char *end = params->p + params->len;
 c028f26:	9a10      	ldr	r2, [sp, #64]	; 0x40
    unsigned char *p = params->p;
 c028f28:	9323      	str	r3, [sp, #140]	; 0x8c
    const unsigned char *end = params->p + params->len;
 c028f2a:	eb03 0902 	add.w	r9, r3, r2
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 c028f2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 c028f30:	2b30      	cmp	r3, #48	; 0x30
 c028f32:	d001      	beq.n	c028f38 <mbedtls_pkcs5_pbes2+0x68>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
 c028f34:	4c60      	ldr	r4, [pc, #384]	; (c0290b8 <mbedtls_pkcs5_pbes2+0x1e8>)
 c028f36:	e0b5      	b.n	c0290a4 <mbedtls_pkcs5_pbes2+0x1d4>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len,
 c028f38:	4623      	mov	r3, r4
 c028f3a:	aa16      	add	r2, sp, #88	; 0x58
 c028f3c:	4649      	mov	r1, r9
 c028f3e:	a823      	add	r0, sp, #140	; 0x8c
 c028f40:	f7fb f8b5 	bl	c0240ae <mbedtls_asn1_get_tag>
 c028f44:	2800      	cmp	r0, #0
 c028f46:	d079      	beq.n	c02903c <mbedtls_pkcs5_pbes2+0x16c>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 c028f48:	f5a0 543c 	sub.w	r4, r0, #12032	; 0x2f00
    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
 c028f4c:	2c00      	cmp	r4, #0
 c028f4e:	f040 80a9 	bne.w	c0290a4 <mbedtls_pkcs5_pbes2+0x1d4>
    md_info = mbedtls_md_info_from_type( md_type );
 c028f52:	f89d 0012 	ldrb.w	r0, [sp, #18]
 c028f56:	f7fe ff95 	bl	c027e84 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 c028f5a:	4604      	mov	r4, r0
 c028f5c:	2800      	cmp	r0, #0
 c028f5e:	d0d9      	beq.n	c028f14 <mbedtls_pkcs5_pbes2+0x44>
    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
 c028f60:	ab12      	add	r3, sp, #72	; 0x48
 c028f62:	aa0c      	add	r2, sp, #48	; 0x30
 c028f64:	4641      	mov	r1, r8
 c028f66:	a807      	add	r0, sp, #28
 c028f68:	f7fb f900 	bl	c02416c <mbedtls_asn1_get_alg>
 c028f6c:	2800      	cmp	r0, #0
 c028f6e:	d1cb      	bne.n	c028f08 <mbedtls_pkcs5_pbes2+0x38>
    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
 c028f70:	f10d 0113 	add.w	r1, sp, #19
 c028f74:	a80c      	add	r0, sp, #48	; 0x30
 c028f76:	f7ff fad9 	bl	c02852c <mbedtls_oid_get_cipher_alg>
 c028f7a:	2800      	cmp	r0, #0
 c028f7c:	d1ca      	bne.n	c028f14 <mbedtls_pkcs5_pbes2+0x44>
    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
 c028f7e:	f89d 0013 	ldrb.w	r0, [sp, #19]
 c028f82:	f7fd fce3 	bl	c02694c <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 c028f86:	4680      	mov	r8, r0
 c028f88:	2800      	cmp	r0, #0
 c028f8a:	d0c3      	beq.n	c028f14 <mbedtls_pkcs5_pbes2+0x44>
    keylen = cipher_info->key_bitlen / 8;
 c028f8c:	6843      	ldr	r3, [r0, #4]
 c028f8e:	08db      	lsrs	r3, r3, #3
 c028f90:	9306      	str	r3, [sp, #24]
    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
 c028f92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 c028f94:	2b04      	cmp	r3, #4
 c028f96:	f040 8089 	bne.w	c0290ac <mbedtls_pkcs5_pbes2+0x1dc>
 c028f9a:	68c3      	ldr	r3, [r0, #12]
 c028f9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 c028f9e:	429a      	cmp	r2, r3
 c028fa0:	f040 8084 	bne.w	c0290ac <mbedtls_pkcs5_pbes2+0x1dc>
    mbedtls_md_init( &md_ctx );
 c028fa4:	a818      	add	r0, sp, #96	; 0x60
 c028fa6:	f7fe ff79 	bl	c027e9c <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
 c028faa:	a82b      	add	r0, sp, #172	; 0xac
 c028fac:	f7fd fcf0 	bl	c026990 <mbedtls_cipher_init>
    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
 c028fb0:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 c028fb4:	a823      	add	r0, sp, #140	; 0x8c
 c028fb6:	f7ee fce2 	bl	c01797e <memcpy>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 c028fba:	4621      	mov	r1, r4
 c028fbc:	2201      	movs	r2, #1
 c028fbe:	a818      	add	r0, sp, #96	; 0x60
 c028fc0:	f7fe ff8c 	bl	c027edc <mbedtls_md_setup>
 c028fc4:	4604      	mov	r4, r0
 c028fc6:	2800      	cmp	r0, #0
 c028fc8:	d131      	bne.n	c02902e <mbedtls_pkcs5_pbes2+0x15e>
    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
 c028fca:	9b06      	ldr	r3, [sp, #24]
 c028fcc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 c028fd0:	9302      	str	r3, [sp, #8]
 c028fd2:	9b05      	ldr	r3, [sp, #20]
 c028fd4:	f8cd 900c 	str.w	r9, [sp, #12]
 c028fd8:	9301      	str	r3, [sp, #4]
 c028fda:	9b16      	ldr	r3, [sp, #88]	; 0x58
 c028fdc:	463a      	mov	r2, r7
 c028fde:	9300      	str	r3, [sp, #0]
 c028fe0:	4631      	mov	r1, r6
 c028fe2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 c028fe4:	a818      	add	r0, sp, #96	; 0x60
 c028fe6:	f7ff feff 	bl	c028de8 <mbedtls_pkcs5_pbkdf2_hmac>
 c028fea:	4604      	mov	r4, r0
 c028fec:	b9f8      	cbnz	r0, c02902e <mbedtls_pkcs5_pbes2+0x15e>
    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 c028fee:	4641      	mov	r1, r8
 c028ff0:	a82b      	add	r0, sp, #172	; 0xac
 c028ff2:	f7fd fec7 	bl	c026d84 <mbedtls_cipher_setup>
 c028ff6:	4604      	mov	r4, r0
 c028ff8:	b9c8      	cbnz	r0, c02902e <mbedtls_pkcs5_pbes2+0x15e>
    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen,
 c028ffa:	9a06      	ldr	r2, [sp, #24]
 c028ffc:	b26b      	sxtb	r3, r5
 c028ffe:	00d2      	lsls	r2, r2, #3
 c029000:	4649      	mov	r1, r9
 c029002:	a82b      	add	r0, sp, #172	; 0xac
 c029004:	f7fd fce0 	bl	c0269c8 <mbedtls_cipher_setkey>
 c029008:	4604      	mov	r4, r0
 c02900a:	b980      	cbnz	r0, c02902e <mbedtls_pkcs5_pbes2+0x15e>
    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
 c02900c:	ab08      	add	r3, sp, #32
 c02900e:	9302      	str	r3, [sp, #8]
 c029010:	9b46      	ldr	r3, [sp, #280]	; 0x118
 c029012:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 c029014:	9301      	str	r3, [sp, #4]
 c029016:	9b45      	ldr	r3, [sp, #276]	; 0x114
 c029018:	a923      	add	r1, sp, #140	; 0x8c
 c02901a:	9300      	str	r3, [sp, #0]
 c02901c:	a82b      	add	r0, sp, #172	; 0xac
 c02901e:	9b44      	ldr	r3, [sp, #272]	; 0x110
 c029020:	f7fd fecc 	bl	c026dbc <mbedtls_cipher_crypt>
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
 c029024:	f5a4 5438 	sub.w	r4, r4, #11776	; 0x2e00
 c029028:	2800      	cmp	r0, #0
 c02902a:	bf08      	it	eq
 c02902c:	2400      	moveq	r4, #0
    mbedtls_md_free( &md_ctx );
 c02902e:	a818      	add	r0, sp, #96	; 0x60
 c029030:	f7fe ff39 	bl	c027ea6 <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
 c029034:	a82b      	add	r0, sp, #172	; 0xac
 c029036:	f7fd fcaf 	bl	c026998 <mbedtls_cipher_free>
    return( ret );
 c02903a:	e033      	b.n	c0290a4 <mbedtls_pkcs5_pbes2+0x1d4>
    salt->p = p;
 c02903c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    p += salt->len;
 c02903e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    salt->p = p;
 c029040:	9317      	str	r3, [sp, #92]	; 0x5c
    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 c029042:	4649      	mov	r1, r9
    p += salt->len;
 c029044:	4413      	add	r3, r2
    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 c029046:	a823      	add	r0, sp, #140	; 0x8c
 c029048:	aa05      	add	r2, sp, #20
    p += salt->len;
 c02904a:	9323      	str	r3, [sp, #140]	; 0x8c
    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 c02904c:	f7fb f843 	bl	c0240d6 <mbedtls_asn1_get_int>
 c029050:	2800      	cmp	r0, #0
 c029052:	f47f af79 	bne.w	c028f48 <mbedtls_pkcs5_pbes2+0x78>
    if( p == end )
 c029056:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 c029058:	4599      	cmp	r9, r3
 c02905a:	f43f af7a 	beq.w	c028f52 <mbedtls_pkcs5_pbes2+0x82>
    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
 c02905e:	aa06      	add	r2, sp, #24
 c029060:	4649      	mov	r1, r9
 c029062:	a823      	add	r0, sp, #140	; 0x8c
 c029064:	f7fb f837 	bl	c0240d6 <mbedtls_asn1_get_int>
 c029068:	b118      	cbz	r0, c029072 <mbedtls_pkcs5_pbes2+0x1a2>
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 c02906a:	f110 0f62 	cmn.w	r0, #98	; 0x62
 c02906e:	f47f af6b 	bne.w	c028f48 <mbedtls_pkcs5_pbes2+0x78>
    if( p == end )
 c029072:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 c029074:	4599      	cmp	r9, r3
 c029076:	f43f af6c 	beq.w	c028f52 <mbedtls_pkcs5_pbes2+0x82>
    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
 c02907a:	aa2b      	add	r2, sp, #172	; 0xac
 c02907c:	4649      	mov	r1, r9
 c02907e:	a823      	add	r0, sp, #140	; 0x8c
 c029080:	f7fb f8c1 	bl	c024206 <mbedtls_asn1_get_alg_null>
 c029084:	2800      	cmp	r0, #0
 c029086:	f47f af5f 	bne.w	c028f48 <mbedtls_pkcs5_pbes2+0x78>
    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
 c02908a:	f10d 0112 	add.w	r1, sp, #18
 c02908e:	a82b      	add	r0, sp, #172	; 0xac
 c029090:	f7ff fa7a 	bl	c028588 <mbedtls_oid_get_md_hmac>
 c029094:	2800      	cmp	r0, #0
 c029096:	f47f af3d 	bne.w	c028f14 <mbedtls_pkcs5_pbes2+0x44>
    if( p != end )
 c02909a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 c02909c:	4599      	cmp	r9, r3
 c02909e:	f43f af58 	beq.w	c028f52 <mbedtls_pkcs5_pbes2+0x82>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
 c0290a2:	4c06      	ldr	r4, [pc, #24]	; (c0290bc <mbedtls_pkcs5_pbes2+0x1ec>)
}
 c0290a4:	4620      	mov	r0, r4
 c0290a6:	b03d      	add	sp, #244	; 0xf4
 c0290a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
 c0290ac:	4c04      	ldr	r4, [pc, #16]	; (c0290c0 <mbedtls_pkcs5_pbes2+0x1f0>)
 c0290ae:	e7f9      	b.n	c0290a4 <mbedtls_pkcs5_pbes2+0x1d4>
 c0290b0:	ffffd180 	.word	0xffffd180
 c0290b4:	0c0366f7 	.word	0x0c0366f7
 c0290b8:	ffffd09e 	.word	0xffffd09e
 c0290bc:	ffffd09a 	.word	0xffffd09a
 c0290c0:	ffffd100 	.word	0xffffd100

0c0290c4 <pk_get_rsapubkey>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
 c0290c4:	b570      	push	{r4, r5, r6, lr}
 c0290c6:	b08a      	sub	sp, #40	; 0x28
 c0290c8:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 c0290ca:	2330      	movs	r3, #48	; 0x30
 c0290cc:	aa09      	add	r2, sp, #36	; 0x24
{
 c0290ce:	4604      	mov	r4, r0
 c0290d0:	460d      	mov	r5, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 c0290d2:	f7fa ffec 	bl	c0240ae <mbedtls_asn1_get_tag>
 c0290d6:	b110      	cbz	r0, c0290de <pk_get_rsapubkey+0x1a>

    *p += len;

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 c0290d8:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 c0290dc:	e005      	b.n	c0290ea <pk_get_rsapubkey+0x26>
    if( *p + len != end )
 c0290de:	6823      	ldr	r3, [r4, #0]
 c0290e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c0290e2:	4413      	add	r3, r2
 c0290e4:	429d      	cmp	r5, r3
 c0290e6:	d002      	beq.n	c0290ee <pk_get_rsapubkey+0x2a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 c0290e8:	4824      	ldr	r0, [pc, #144]	; (c02917c <pk_get_rsapubkey+0xb8>)
    if( *p != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 c0290ea:	b00a      	add	sp, #40	; 0x28
 c0290ec:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c0290ee:	2302      	movs	r3, #2
 c0290f0:	aa09      	add	r2, sp, #36	; 0x24
 c0290f2:	4629      	mov	r1, r5
 c0290f4:	4620      	mov	r0, r4
 c0290f6:	f7fa ffda 	bl	c0240ae <mbedtls_asn1_get_tag>
 c0290fa:	2800      	cmp	r0, #0
 c0290fc:	d1ec      	bne.n	c0290d8 <pk_get_rsapubkey+0x14>
    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 c0290fe:	e9cd 0005 	strd	r0, r0, [sp, #20]
 c029102:	e9cd 0003 	strd	r0, r0, [sp, #12]
 c029106:	e9cd 0001 	strd	r0, r0, [sp, #4]
 c02910a:	9000      	str	r0, [sp, #0]
 c02910c:	4603      	mov	r3, r0
 c02910e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c029110:	6821      	ldr	r1, [r4, #0]
 c029112:	4630      	mov	r0, r6
 c029114:	f7f6 f92e 	bl	c01f374 <mbedtls_rsa_import_raw>
 c029118:	b108      	cbz	r0, c02911e <pk_get_rsapubkey+0x5a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 c02911a:	4819      	ldr	r0, [pc, #100]	; (c029180 <pk_get_rsapubkey+0xbc>)
 c02911c:	e7e5      	b.n	c0290ea <pk_get_rsapubkey+0x26>
    *p += len;
 c02911e:	6823      	ldr	r3, [r4, #0]
 c029120:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c029122:	4629      	mov	r1, r5
    *p += len;
 c029124:	4413      	add	r3, r2
 c029126:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c029128:	aa09      	add	r2, sp, #36	; 0x24
 c02912a:	2302      	movs	r3, #2
 c02912c:	4620      	mov	r0, r4
 c02912e:	f7fa ffbe 	bl	c0240ae <mbedtls_asn1_get_tag>
 c029132:	2800      	cmp	r0, #0
 c029134:	d1d0      	bne.n	c0290d8 <pk_get_rsapubkey+0x14>
    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 c029136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c029138:	e9cd 0002 	strd	r0, r0, [sp, #8]
 c02913c:	9306      	str	r3, [sp, #24]
 c02913e:	6823      	ldr	r3, [r4, #0]
 c029140:	e9cd 0000 	strd	r0, r0, [sp]
 c029144:	e9cd 0304 	strd	r0, r3, [sp, #16]
 c029148:	4602      	mov	r2, r0
 c02914a:	4603      	mov	r3, r0
 c02914c:	4601      	mov	r1, r0
 c02914e:	4630      	mov	r0, r6
 c029150:	f7f6 f910 	bl	c01f374 <mbedtls_rsa_import_raw>
 c029154:	2800      	cmp	r0, #0
 c029156:	d1e0      	bne.n	c02911a <pk_get_rsapubkey+0x56>
    *p += len;
 c029158:	6823      	ldr	r3, [r4, #0]
 c02915a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 c02915c:	4630      	mov	r0, r6
    *p += len;
 c02915e:	4413      	add	r3, r2
 c029160:	6023      	str	r3, [r4, #0]
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 c029162:	f7f6 f949 	bl	c01f3f8 <mbedtls_rsa_complete>
 c029166:	2800      	cmp	r0, #0
 c029168:	d1d7      	bne.n	c02911a <pk_get_rsapubkey+0x56>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 c02916a:	4630      	mov	r0, r6
 c02916c:	f7f6 faa0 	bl	c01f6b0 <mbedtls_rsa_check_pubkey>
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 c029170:	2800      	cmp	r0, #0
 c029172:	d1d2      	bne.n	c02911a <pk_get_rsapubkey+0x56>
    if( *p != end )
 c029174:	6823      	ldr	r3, [r4, #0]
 c029176:	42ab      	cmp	r3, r5
 c029178:	d0b7      	beq.n	c0290ea <pk_get_rsapubkey+0x26>
 c02917a:	e7b5      	b.n	c0290e8 <pk_get_rsapubkey+0x24>
 c02917c:	ffffc49a 	.word	0xffffc49a
 c029180:	ffffc500 	.word	0xffffc500

0c029184 <pk_use_ecparams>:
{
 c029184:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( params->tag == MBEDTLS_ASN1_OID )
 c029186:	6803      	ldr	r3, [r0, #0]
{
 c029188:	b0d3      	sub	sp, #332	; 0x14c
    if( params->tag == MBEDTLS_ASN1_OID )
 c02918a:	2b06      	cmp	r3, #6
{
 c02918c:	4604      	mov	r4, r0
 c02918e:	460d      	mov	r5, r1
    if( params->tag == MBEDTLS_ASN1_OID )
 c029190:	d110      	bne.n	c0291b4 <pk_use_ecparams+0x30>
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
 c029192:	a901      	add	r1, sp, #4
 c029194:	f7ff f99c 	bl	c0284d0 <mbedtls_oid_get_ec_grp>
 c029198:	2800      	cmp	r0, #0
 c02919a:	f040 8155 	bne.w	c029448 <pk_use_ecparams+0x2c4>
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
 c02919e:	782b      	ldrb	r3, [r5, #0]
 c0291a0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 c0291a4:	2b00      	cmp	r3, #0
 c0291a6:	f040 814a 	bne.w	c02943e <pk_use_ecparams+0x2ba>
    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
 c0291aa:	4628      	mov	r0, r5
 c0291ac:	f7f5 f970 	bl	c01e490 <mbedtls_ecp_group_load>
 c0291b0:	4604      	mov	r4, r0
 c0291b2:	e077      	b.n	c0292a4 <pk_use_ecparams+0x120>
    mbedtls_ecp_group_init( &grp );
 c0291b4:	a802      	add	r0, sp, #8
 c0291b6:	f7f4 f863 	bl	c01d280 <mbedtls_ecp_group_init>
    unsigned char *p = params->p;
 c0291ba:	68a6      	ldr	r6, [r4, #8]
    const unsigned char * const end = params->p + params->len;
 c0291bc:	6863      	ldr	r3, [r4, #4]
    unsigned char *p = params->p;
 c0291be:	9600      	str	r6, [sp, #0]
    const unsigned char * const end = params->p + params->len;
 c0291c0:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &ver ) ) != 0 )
 c0291c2:	aa2a      	add	r2, sp, #168	; 0xa8
 c0291c4:	4631      	mov	r1, r6
 c0291c6:	4668      	mov	r0, sp
 c0291c8:	f7fa ff85 	bl	c0240d6 <mbedtls_asn1_get_int>
 c0291cc:	2800      	cmp	r0, #0
 c0291ce:	d05e      	beq.n	c02928e <pk_use_ecparams+0x10a>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 c0291d0:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
    if( ( ret = pk_group_from_specified( params, &grp ) ) != 0 )
 c0291d4:	2c00      	cmp	r4, #0
 c0291d6:	d15f      	bne.n	c029298 <pk_use_ecparams+0x114>
    mbedtls_ecp_group_init( &ref );
 c0291d8:	a82a      	add	r0, sp, #168	; 0xa8
 c0291da:	f7f4 f851 	bl	c01d280 <mbedtls_ecp_group_init>
    for( id = mbedtls_ecp_grp_id_list(); *id != MBEDTLS_ECP_DP_NONE; id++ )
 c0291de:	f7f4 f80d 	bl	c01d1fc <mbedtls_ecp_grp_id_list>
 c0291e2:	4606      	mov	r6, r0
 c0291e4:	4637      	mov	r7, r6
 c0291e6:	783b      	ldrb	r3, [r7, #0]
 c0291e8:	3601      	adds	r6, #1
 c0291ea:	2b00      	cmp	r3, #0
 c0291ec:	d041      	beq.n	c029272 <pk_use_ecparams+0xee>
        mbedtls_ecp_group_free( &ref );
 c0291ee:	a82a      	add	r0, sp, #168	; 0xa8
 c0291f0:	f7f4 f882 	bl	c01d2f8 <mbedtls_ecp_group_free>
        MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &ref, *id ) );
 c0291f4:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 c0291f8:	a82a      	add	r0, sp, #168	; 0xa8
 c0291fa:	f7f5 f949 	bl	c01e490 <mbedtls_ecp_group_load>
 c0291fe:	4604      	mov	r4, r0
 c029200:	2800      	cmp	r0, #0
 c029202:	d137      	bne.n	c029274 <pk_use_ecparams+0xf0>
        if( grp->pbits == ref.pbits && grp->nbits == ref.nbits &&
 c029204:	9a18      	ldr	r2, [sp, #96]	; 0x60
 c029206:	9b40      	ldr	r3, [sp, #256]	; 0x100
 c029208:	429a      	cmp	r2, r3
 c02920a:	d1eb      	bne.n	c0291e4 <pk_use_ecparams+0x60>
 c02920c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 c02920e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 c029210:	429a      	cmp	r2, r3
 c029212:	d1e7      	bne.n	c0291e4 <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->P, &ref.P ) == 0 &&
 c029214:	a92b      	add	r1, sp, #172	; 0xac
 c029216:	a803      	add	r0, sp, #12
 c029218:	f7fb fff2 	bl	c025200 <mbedtls_mpi_cmp_mpi>
        if( grp->pbits == ref.pbits && grp->nbits == ref.nbits &&
 c02921c:	2800      	cmp	r0, #0
 c02921e:	d1e1      	bne.n	c0291e4 <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->A, &ref.A ) == 0 &&
 c029220:	a92e      	add	r1, sp, #184	; 0xb8
 c029222:	a806      	add	r0, sp, #24
 c029224:	f7fb ffec 	bl	c025200 <mbedtls_mpi_cmp_mpi>
            mbedtls_mpi_cmp_mpi( &grp->P, &ref.P ) == 0 &&
 c029228:	2800      	cmp	r0, #0
 c02922a:	d1db      	bne.n	c0291e4 <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->B, &ref.B ) == 0 &&
 c02922c:	a931      	add	r1, sp, #196	; 0xc4
 c02922e:	a809      	add	r0, sp, #36	; 0x24
 c029230:	f7fb ffe6 	bl	c025200 <mbedtls_mpi_cmp_mpi>
            mbedtls_mpi_cmp_mpi( &grp->A, &ref.A ) == 0 &&
 c029234:	2800      	cmp	r0, #0
 c029236:	d1d5      	bne.n	c0291e4 <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->N, &ref.N ) == 0 &&
 c029238:	a93d      	add	r1, sp, #244	; 0xf4
 c02923a:	a815      	add	r0, sp, #84	; 0x54
 c02923c:	f7fb ffe0 	bl	c025200 <mbedtls_mpi_cmp_mpi>
            mbedtls_mpi_cmp_mpi( &grp->B, &ref.B ) == 0 &&
 c029240:	2800      	cmp	r0, #0
 c029242:	d1cf      	bne.n	c0291e4 <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->G.X, &ref.G.X ) == 0 &&
 c029244:	a934      	add	r1, sp, #208	; 0xd0
 c029246:	a80c      	add	r0, sp, #48	; 0x30
 c029248:	f7fb ffda 	bl	c025200 <mbedtls_mpi_cmp_mpi>
            mbedtls_mpi_cmp_mpi( &grp->N, &ref.N ) == 0 &&
 c02924c:	2800      	cmp	r0, #0
 c02924e:	d1c9      	bne.n	c0291e4 <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->G.Z, &ref.G.Z ) == 0 &&
 c029250:	a93a      	add	r1, sp, #232	; 0xe8
 c029252:	a812      	add	r0, sp, #72	; 0x48
 c029254:	f7fb ffd4 	bl	c025200 <mbedtls_mpi_cmp_mpi>
            mbedtls_mpi_cmp_mpi( &grp->G.X, &ref.G.X ) == 0 &&
 c029258:	2800      	cmp	r0, #0
 c02925a:	d1c3      	bne.n	c0291e4 <pk_use_ecparams+0x60>
            mbedtls_mpi_get_bit( &grp->G.Y, 0 ) == mbedtls_mpi_get_bit( &ref.G.Y, 0 ) )
 c02925c:	2100      	movs	r1, #0
 c02925e:	a80f      	add	r0, sp, #60	; 0x3c
 c029260:	f7fb fd66 	bl	c024d30 <mbedtls_mpi_get_bit>
 c029264:	2100      	movs	r1, #0
 c029266:	4604      	mov	r4, r0
 c029268:	a837      	add	r0, sp, #220	; 0xdc
 c02926a:	f7fb fd61 	bl	c024d30 <mbedtls_mpi_get_bit>
            mbedtls_mpi_cmp_mpi( &grp->G.Z, &ref.G.Z ) == 0 &&
 c02926e:	4284      	cmp	r4, r0
 c029270:	d1b8      	bne.n	c0291e4 <pk_use_ecparams+0x60>
        MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &ref, *id ) );
 c029272:	2400      	movs	r4, #0
    mbedtls_ecp_group_free( &ref );
 c029274:	a82a      	add	r0, sp, #168	; 0xa8
 c029276:	f7f4 f83f 	bl	c01d2f8 <mbedtls_ecp_group_free>
    *grp_id = *id;
 c02927a:	783b      	ldrb	r3, [r7, #0]
 c02927c:	f88d 3004 	strb.w	r3, [sp, #4]
    if( ret == 0 && *id == MBEDTLS_ECP_DP_NONE )
 c029280:	b954      	cbnz	r4, c029298 <pk_use_ecparams+0x114>
 c029282:	783a      	ldrb	r2, [r7, #0]
        ret = MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;
 c029284:	4b71      	ldr	r3, [pc, #452]	; (c02944c <pk_use_ecparams+0x2c8>)
 c029286:	2a00      	cmp	r2, #0
 c029288:	bf08      	it	eq
 c02928a:	461c      	moveq	r4, r3
 c02928c:	e004      	b.n	c029298 <pk_use_ecparams+0x114>
    if( ver < 1 || ver > 3 )
 c02928e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 c029290:	3b01      	subs	r3, #1
 c029292:	2b02      	cmp	r3, #2
 c029294:	d909      	bls.n	c0292aa <pk_use_ecparams+0x126>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 c029296:	4c6e      	ldr	r4, [pc, #440]	; (c029450 <pk_use_ecparams+0x2cc>)
    mbedtls_ecp_group_free( &grp );
 c029298:	a802      	add	r0, sp, #8
 c02929a:	f7f4 f82d 	bl	c01d2f8 <mbedtls_ecp_group_free>
        if( ( ret = pk_group_id_from_specified( params, &grp_id ) ) != 0 )
 c02929e:	2c00      	cmp	r4, #0
 c0292a0:	f43f af7d 	beq.w	c02919e <pk_use_ecparams+0x1a>
}
 c0292a4:	4620      	mov	r0, r4
 c0292a6:	b053      	add	sp, #332	; 0x14c
 c0292a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c0292aa:	2330      	movs	r3, #48	; 0x30
 c0292ac:	aa01      	add	r2, sp, #4
 c0292ae:	4631      	mov	r1, r6
 c0292b0:	4668      	mov	r0, sp
 c0292b2:	f7fa fefc 	bl	c0240ae <mbedtls_asn1_get_tag>
 c0292b6:	4604      	mov	r4, r0
 c0292b8:	2800      	cmp	r0, #0
 c0292ba:	d1ed      	bne.n	c029298 <pk_use_ecparams+0x114>
    end_field = p + len;
 c0292bc:	e9dd 7300 	ldrd	r7, r3, [sp]
 c0292c0:	441f      	add	r7, r3
    if( ( ret = mbedtls_asn1_get_tag( &p, end_field, &len, MBEDTLS_ASN1_OID ) ) != 0 )
 c0292c2:	aa01      	add	r2, sp, #4
 c0292c4:	2306      	movs	r3, #6
 c0292c6:	4639      	mov	r1, r7
 c0292c8:	4668      	mov	r0, sp
 c0292ca:	f7fa fef0 	bl	c0240ae <mbedtls_asn1_get_tag>
 c0292ce:	4604      	mov	r4, r0
 c0292d0:	2800      	cmp	r0, #0
 c0292d2:	d1e1      	bne.n	c029298 <pk_use_ecparams+0x114>
    if( len != MBEDTLS_OID_SIZE( MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD ) ||
 c0292d4:	9a01      	ldr	r2, [sp, #4]
 c0292d6:	2a07      	cmp	r2, #7
 c0292d8:	f040 80af 	bne.w	c02943a <pk_use_ecparams+0x2b6>
        memcmp( p, MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD, len ) != 0 )
 c0292dc:	9c00      	ldr	r4, [sp, #0]
 c0292de:	495d      	ldr	r1, [pc, #372]	; (c029454 <pk_use_ecparams+0x2d0>)
 c0292e0:	4620      	mov	r0, r4
 c0292e2:	f7ee fb3d 	bl	c017960 <memcmp>
    if( len != MBEDTLS_OID_SIZE( MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD ) ||
 c0292e6:	2800      	cmp	r0, #0
 c0292e8:	f040 80a7 	bne.w	c02943a <pk_use_ecparams+0x2b6>
    p += len;
 c0292ec:	3407      	adds	r4, #7
    if( ( ret = mbedtls_asn1_get_mpi( &p, end_field, &grp->P ) ) != 0 )
 c0292ee:	aa03      	add	r2, sp, #12
 c0292f0:	4639      	mov	r1, r7
 c0292f2:	4668      	mov	r0, sp
    p += len;
 c0292f4:	9400      	str	r4, [sp, #0]
    if( ( ret = mbedtls_asn1_get_mpi( &p, end_field, &grp->P ) ) != 0 )
 c0292f6:	f7fa ff12 	bl	c02411e <mbedtls_asn1_get_mpi>
 c0292fa:	2800      	cmp	r0, #0
 c0292fc:	f47f af68 	bne.w	c0291d0 <pk_use_ecparams+0x4c>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 c029300:	a803      	add	r0, sp, #12
 c029302:	f7fb fd69 	bl	c024dd8 <mbedtls_mpi_bitlen>
    if( p != end_field )
 c029306:	9b00      	ldr	r3, [sp, #0]
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 c029308:	9018      	str	r0, [sp, #96]	; 0x60
    if( p != end_field )
 c02930a:	429f      	cmp	r7, r3
 c02930c:	f040 8093 	bne.w	c029436 <pk_use_ecparams+0x2b2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c029310:	2330      	movs	r3, #48	; 0x30
 c029312:	aa01      	add	r2, sp, #4
 c029314:	4631      	mov	r1, r6
 c029316:	4668      	mov	r0, sp
 c029318:	f7fa fec9 	bl	c0240ae <mbedtls_asn1_get_tag>
 c02931c:	4604      	mov	r4, r0
 c02931e:	2800      	cmp	r0, #0
 c029320:	d1ba      	bne.n	c029298 <pk_use_ecparams+0x114>
    end_curve = p + len;
 c029322:	e9dd 4300 	ldrd	r4, r3, [sp]
 c029326:	441c      	add	r4, r3
    if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 ||
 c029328:	2304      	movs	r3, #4
 c02932a:	4621      	mov	r1, r4
 c02932c:	eb0d 0203 	add.w	r2, sp, r3
 c029330:	4668      	mov	r0, sp
 c029332:	f7fa febc 	bl	c0240ae <mbedtls_asn1_get_tag>
 c029336:	2800      	cmp	r0, #0
 c029338:	f47f af4a 	bne.w	c0291d0 <pk_use_ecparams+0x4c>
 c02933c:	e9dd 1200 	ldrd	r1, r2, [sp]
 c029340:	a806      	add	r0, sp, #24
 c029342:	f7fb fda3 	bl	c024e8c <mbedtls_mpi_read_binary>
 c029346:	2800      	cmp	r0, #0
 c029348:	f47f af42 	bne.w	c0291d0 <pk_use_ecparams+0x4c>
    p += len;
 c02934c:	e9dd 3200 	ldrd	r3, r2, [sp]
 c029350:	4413      	add	r3, r2
 c029352:	9300      	str	r3, [sp, #0]
    if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 ||
 c029354:	2304      	movs	r3, #4
 c029356:	4621      	mov	r1, r4
 c029358:	eb0d 0203 	add.w	r2, sp, r3
 c02935c:	4668      	mov	r0, sp
 c02935e:	f7fa fea6 	bl	c0240ae <mbedtls_asn1_get_tag>
 c029362:	2800      	cmp	r0, #0
 c029364:	f47f af34 	bne.w	c0291d0 <pk_use_ecparams+0x4c>
 c029368:	e9dd 1200 	ldrd	r1, r2, [sp]
 c02936c:	a809      	add	r0, sp, #36	; 0x24
 c02936e:	f7fb fd8d 	bl	c024e8c <mbedtls_mpi_read_binary>
 c029372:	2800      	cmp	r0, #0
 c029374:	f47f af2c 	bne.w	c0291d0 <pk_use_ecparams+0x4c>
    p += len;
 c029378:	e9dd 3200 	ldrd	r3, r2, [sp]
 c02937c:	4413      	add	r3, r2
 c02937e:	9300      	str	r3, [sp, #0]
    if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_BIT_STRING ) ) == 0 )
 c029380:	aa01      	add	r2, sp, #4
 c029382:	2303      	movs	r3, #3
 c029384:	4621      	mov	r1, r4
 c029386:	4668      	mov	r0, sp
 c029388:	f7fa fe91 	bl	c0240ae <mbedtls_asn1_get_tag>
 c02938c:	b918      	cbnz	r0, c029396 <pk_use_ecparams+0x212>
        p += len;
 c02938e:	e9dd 3200 	ldrd	r3, r2, [sp]
 c029392:	4413      	add	r3, r2
 c029394:	9300      	str	r3, [sp, #0]
    if( p != end_curve )
 c029396:	9b00      	ldr	r3, [sp, #0]
 c029398:	429c      	cmp	r4, r3
 c02939a:	d14c      	bne.n	c029436 <pk_use_ecparams+0x2b2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 c02939c:	2304      	movs	r3, #4
 c02939e:	4631      	mov	r1, r6
 c0293a0:	eb0d 0203 	add.w	r2, sp, r3
 c0293a4:	4668      	mov	r0, sp
 c0293a6:	f7fa fe82 	bl	c0240ae <mbedtls_asn1_get_tag>
 c0293aa:	2800      	cmp	r0, #0
 c0293ac:	f47f af10 	bne.w	c0291d0 <pk_use_ecparams+0x4c>
    if( ( ret = mbedtls_ecp_point_read_binary( grp, &grp->G,
 c0293b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 c0293b4:	a90c      	add	r1, sp, #48	; 0x30
 c0293b6:	a802      	add	r0, sp, #8
 c0293b8:	f7f4 f8c0 	bl	c01d53c <mbedtls_ecp_point_read_binary>
 c0293bc:	b980      	cbnz	r0, c0293e0 <pk_use_ecparams+0x25c>
    p += len;
 c0293be:	e9dd 3200 	ldrd	r3, r2, [sp]
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &grp->N ) ) != 0 )
 c0293c2:	4631      	mov	r1, r6
    p += len;
 c0293c4:	4413      	add	r3, r2
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &grp->N ) ) != 0 )
 c0293c6:	4668      	mov	r0, sp
 c0293c8:	aa15      	add	r2, sp, #84	; 0x54
    p += len;
 c0293ca:	9300      	str	r3, [sp, #0]
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &grp->N ) ) != 0 )
 c0293cc:	f7fa fea7 	bl	c02411e <mbedtls_asn1_get_mpi>
 c0293d0:	2800      	cmp	r0, #0
 c0293d2:	f47f aefd 	bne.w	c0291d0 <pk_use_ecparams+0x4c>
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 c0293d6:	a815      	add	r0, sp, #84	; 0x54
 c0293d8:	f7fb fcfe 	bl	c024dd8 <mbedtls_mpi_bitlen>
 c0293dc:	9019      	str	r0, [sp, #100]	; 0x64
 c0293de:	e6fb      	b.n	c0291d8 <pk_use_ecparams+0x54>
        if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE ||
 c0293e0:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
 c0293e4:	f47f af57 	bne.w	c029296 <pk_use_ecparams+0x112>
            ( p[0] != 0x02 && p[0] != 0x03 ) ||
 c0293e8:	9b00      	ldr	r3, [sp, #0]
 c0293ea:	781b      	ldrb	r3, [r3, #0]
        if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE ||
 c0293ec:	3b02      	subs	r3, #2
 c0293ee:	2b01      	cmp	r3, #1
 c0293f0:	f63f af51 	bhi.w	c029296 <pk_use_ecparams+0x112>
            len != mbedtls_mpi_size( &grp->P ) + 1 ||
 c0293f4:	a803      	add	r0, sp, #12
 c0293f6:	f7fb fd0f 	bl	c024e18 <mbedtls_mpi_size>
            ( p[0] != 0x02 && p[0] != 0x03 ) ||
 c0293fa:	9b01      	ldr	r3, [sp, #4]
            len != mbedtls_mpi_size( &grp->P ) + 1 ||
 c0293fc:	1c41      	adds	r1, r0, #1
            ( p[0] != 0x02 && p[0] != 0x03 ) ||
 c0293fe:	4299      	cmp	r1, r3
            len != mbedtls_mpi_size( &grp->P ) + 1 ||
 c029400:	4602      	mov	r2, r0
            ( p[0] != 0x02 && p[0] != 0x03 ) ||
 c029402:	f47f af48 	bne.w	c029296 <pk_use_ecparams+0x112>
            mbedtls_mpi_read_binary( &grp->G.X, p + 1, len - 1 ) != 0 ||
 c029406:	9900      	ldr	r1, [sp, #0]
 c029408:	a80c      	add	r0, sp, #48	; 0x30
 c02940a:	3101      	adds	r1, #1
 c02940c:	f7fb fd3e 	bl	c024e8c <mbedtls_mpi_read_binary>
            len != mbedtls_mpi_size( &grp->P ) + 1 ||
 c029410:	2800      	cmp	r0, #0
 c029412:	f47f af40 	bne.w	c029296 <pk_use_ecparams+0x112>
            mbedtls_mpi_lset( &grp->G.Y, p[0] - 2 ) != 0 ||
 c029416:	9b00      	ldr	r3, [sp, #0]
 c029418:	a80f      	add	r0, sp, #60	; 0x3c
 c02941a:	7819      	ldrb	r1, [r3, #0]
 c02941c:	3902      	subs	r1, #2
 c02941e:	f7fb fc6b 	bl	c024cf8 <mbedtls_mpi_lset>
            mbedtls_mpi_read_binary( &grp->G.X, p + 1, len - 1 ) != 0 ||
 c029422:	2800      	cmp	r0, #0
 c029424:	f47f af37 	bne.w	c029296 <pk_use_ecparams+0x112>
            mbedtls_mpi_lset( &grp->G.Z, 1 ) != 0 )
 c029428:	2101      	movs	r1, #1
 c02942a:	a812      	add	r0, sp, #72	; 0x48
 c02942c:	f7fb fc64 	bl	c024cf8 <mbedtls_mpi_lset>
            mbedtls_mpi_lset( &grp->G.Y, p[0] - 2 ) != 0 ||
 c029430:	2800      	cmp	r0, #0
 c029432:	d0c4      	beq.n	c0293be <pk_use_ecparams+0x23a>
 c029434:	e72f      	b.n	c029296 <pk_use_ecparams+0x112>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 c029436:	4c08      	ldr	r4, [pc, #32]	; (c029458 <pk_use_ecparams+0x2d4>)
 c029438:	e72e      	b.n	c029298 <pk_use_ecparams+0x114>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 c02943a:	4c08      	ldr	r4, [pc, #32]	; (c02945c <pk_use_ecparams+0x2d8>)
 c02943c:	e72c      	b.n	c029298 <pk_use_ecparams+0x114>
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
 c02943e:	428b      	cmp	r3, r1
 c029440:	f43f aeb3 	beq.w	c0291aa <pk_use_ecparams+0x26>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 c029444:	4c02      	ldr	r4, [pc, #8]	; (c029450 <pk_use_ecparams+0x2cc>)
 c029446:	e72d      	b.n	c0292a4 <pk_use_ecparams+0x120>
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
 c029448:	4c05      	ldr	r4, [pc, #20]	; (c029460 <pk_use_ecparams+0x2dc>)
 c02944a:	e72b      	b.n	c0292a4 <pk_use_ecparams+0x120>
 c02944c:	ffffb180 	.word	0xffffb180
 c029450:	ffffc300 	.word	0xffffc300
 c029454:	0c036880 	.word	0x0c036880
 c029458:	ffffc29a 	.word	0xffffc29a
 c02945c:	ffffc680 	.word	0xffffc680
 c029460:	ffffc600 	.word	0xffffc600

0c029464 <pk_parse_key_pkcs1_der>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 c029464:	b570      	push	{r4, r5, r6, lr}
 c029466:	460c      	mov	r4, r1
 c029468:	4615      	mov	r5, r2
 c02946a:	b08e      	sub	sp, #56	; 0x38
 c02946c:	4606      	mov	r6, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
 c02946e:	a80b      	add	r0, sp, #44	; 0x2c
 c029470:	f7fb fb82 	bl	c024b78 <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c029474:	2330      	movs	r3, #48	; 0x30
 c029476:	aa09      	add	r2, sp, #36	; 0x24
 c029478:	1961      	adds	r1, r4, r5
 c02947a:	a80a      	add	r0, sp, #40	; 0x28
    p = (unsigned char *) key;
 c02947c:	940a      	str	r4, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c02947e:	f7fa fe16 	bl	c0240ae <mbedtls_asn1_get_tag>
 c029482:	b120      	cbz	r0, c02948e <pk_parse_key_pkcs1_der+0x2a>

    end = p + len;

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 c029484:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
 c029488:	4620      	mov	r0, r4
 c02948a:	b00e      	add	sp, #56	; 0x38
 c02948c:	bd70      	pop	{r4, r5, r6, pc}
    end = p + len;
 c02948e:	e9dd 3509 	ldrd	r3, r5, [sp, #36]	; 0x24
 c029492:	441d      	add	r5, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 c029494:	aa08      	add	r2, sp, #32
 c029496:	4629      	mov	r1, r5
 c029498:	a80a      	add	r0, sp, #40	; 0x28
 c02949a:	f7fa fe1c 	bl	c0240d6 <mbedtls_asn1_get_int>
 c02949e:	2800      	cmp	r0, #0
 c0294a0:	d1f0      	bne.n	c029484 <pk_parse_key_pkcs1_der+0x20>
    if( version != 0 )
 c0294a2:	9b08      	ldr	r3, [sp, #32]
 c0294a4:	2b00      	cmp	r3, #0
 c0294a6:	f040 80ca 	bne.w	c02963e <pk_parse_key_pkcs1_der+0x1da>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c0294aa:	2302      	movs	r3, #2
 c0294ac:	aa09      	add	r2, sp, #36	; 0x24
 c0294ae:	4629      	mov	r1, r5
 c0294b0:	a80a      	add	r0, sp, #40	; 0x28
 c0294b2:	f7fa fdfc 	bl	c0240ae <mbedtls_asn1_get_tag>
 c0294b6:	4604      	mov	r4, r0
 c0294b8:	2800      	cmp	r0, #0
 c0294ba:	f040 80af 	bne.w	c02961c <pk_parse_key_pkcs1_der+0x1b8>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 c0294be:	e9dd 2109 	ldrd	r2, r1, [sp, #36]	; 0x24
 c0294c2:	e9cd 0005 	strd	r0, r0, [sp, #20]
 c0294c6:	e9cd 0003 	strd	r0, r0, [sp, #12]
 c0294ca:	e9cd 0001 	strd	r0, r0, [sp, #4]
 c0294ce:	9000      	str	r0, [sp, #0]
 c0294d0:	4603      	mov	r3, r0
 c0294d2:	4630      	mov	r0, r6
 c0294d4:	f7f5 ff4e 	bl	c01f374 <mbedtls_rsa_import_raw>
 c0294d8:	4604      	mov	r4, r0
 c0294da:	2800      	cmp	r0, #0
 c0294dc:	f040 809e 	bne.w	c02961c <pk_parse_key_pkcs1_der+0x1b8>
    p += len;
 c0294e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c0294e4:	4413      	add	r3, r2
 c0294e6:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c0294e8:	aa09      	add	r2, sp, #36	; 0x24
 c0294ea:	2302      	movs	r3, #2
 c0294ec:	4629      	mov	r1, r5
 c0294ee:	a80a      	add	r0, sp, #40	; 0x28
 c0294f0:	f7fa fddd 	bl	c0240ae <mbedtls_asn1_get_tag>
 c0294f4:	4604      	mov	r4, r0
 c0294f6:	2800      	cmp	r0, #0
 c0294f8:	f040 8090 	bne.w	c02961c <pk_parse_key_pkcs1_der+0x1b8>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 c0294fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c0294fe:	e9cd 0002 	strd	r0, r0, [sp, #8]
 c029502:	9306      	str	r3, [sp, #24]
 c029504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c029506:	e9cd 0000 	strd	r0, r0, [sp]
 c02950a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 c02950e:	4602      	mov	r2, r0
 c029510:	4603      	mov	r3, r0
 c029512:	4601      	mov	r1, r0
 c029514:	4630      	mov	r0, r6
 c029516:	f7f5 ff2d 	bl	c01f374 <mbedtls_rsa_import_raw>
 c02951a:	4604      	mov	r4, r0
 c02951c:	2800      	cmp	r0, #0
 c02951e:	d17d      	bne.n	c02961c <pk_parse_key_pkcs1_der+0x1b8>
    p += len;
 c029520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c029524:	4413      	add	r3, r2
 c029526:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c029528:	aa09      	add	r2, sp, #36	; 0x24
 c02952a:	2302      	movs	r3, #2
 c02952c:	4629      	mov	r1, r5
 c02952e:	a80a      	add	r0, sp, #40	; 0x28
 c029530:	f7fa fdbd 	bl	c0240ae <mbedtls_asn1_get_tag>
 c029534:	4604      	mov	r4, r0
 c029536:	2800      	cmp	r0, #0
 c029538:	d170      	bne.n	c02961c <pk_parse_key_pkcs1_der+0x1b8>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 c02953a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c02953c:	e9cd 0005 	strd	r0, r0, [sp, #20]
 c029540:	9304      	str	r3, [sp, #16]
 c029542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c029544:	e9cd 0000 	strd	r0, r0, [sp]
 c029548:	e9cd 0302 	strd	r0, r3, [sp, #8]
 c02954c:	4602      	mov	r2, r0
 c02954e:	4603      	mov	r3, r0
 c029550:	4601      	mov	r1, r0
 c029552:	4630      	mov	r0, r6
 c029554:	f7f5 ff0e 	bl	c01f374 <mbedtls_rsa_import_raw>
 c029558:	4604      	mov	r4, r0
 c02955a:	2800      	cmp	r0, #0
 c02955c:	d15e      	bne.n	c02961c <pk_parse_key_pkcs1_der+0x1b8>
    p += len;
 c02955e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c029562:	4413      	add	r3, r2
 c029564:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c029566:	aa09      	add	r2, sp, #36	; 0x24
 c029568:	2302      	movs	r3, #2
 c02956a:	4629      	mov	r1, r5
 c02956c:	a80a      	add	r0, sp, #40	; 0x28
 c02956e:	f7fa fd9e 	bl	c0240ae <mbedtls_asn1_get_tag>
 c029572:	4604      	mov	r4, r0
 c029574:	2800      	cmp	r0, #0
 c029576:	d151      	bne.n	c02961c <pk_parse_key_pkcs1_der+0x1b8>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 c029578:	2200      	movs	r2, #0
 c02957a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c02957c:	e9cd 2205 	strd	r2, r2, [sp, #20]
 c029580:	9300      	str	r3, [sp, #0]
 c029582:	e9cd 2203 	strd	r2, r2, [sp, #12]
 c029586:	e9cd 2201 	strd	r2, r2, [sp, #4]
 c02958a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c02958c:	4611      	mov	r1, r2
 c02958e:	4630      	mov	r0, r6
 c029590:	f7f5 fef0 	bl	c01f374 <mbedtls_rsa_import_raw>
 c029594:	4604      	mov	r4, r0
 c029596:	2800      	cmp	r0, #0
 c029598:	d140      	bne.n	c02961c <pk_parse_key_pkcs1_der+0x1b8>
    p += len;
 c02959a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c02959e:	4413      	add	r3, r2
 c0295a0:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c0295a2:	aa09      	add	r2, sp, #36	; 0x24
 c0295a4:	2302      	movs	r3, #2
 c0295a6:	4629      	mov	r1, r5
 c0295a8:	a80a      	add	r0, sp, #40	; 0x28
 c0295aa:	f7fa fd80 	bl	c0240ae <mbedtls_asn1_get_tag>
 c0295ae:	4604      	mov	r4, r0
 c0295b0:	2800      	cmp	r0, #0
 c0295b2:	d133      	bne.n	c02961c <pk_parse_key_pkcs1_der+0x1b8>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 c0295b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c0295b6:	e9cd 0005 	strd	r0, r0, [sp, #20]
 c0295ba:	9302      	str	r3, [sp, #8]
 c0295bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c0295be:	e9cd 0003 	strd	r0, r0, [sp, #12]
 c0295c2:	e9cd 0300 	strd	r0, r3, [sp]
 c0295c6:	4602      	mov	r2, r0
 c0295c8:	4603      	mov	r3, r0
 c0295ca:	4601      	mov	r1, r0
 c0295cc:	4630      	mov	r0, r6
 c0295ce:	f7f5 fed1 	bl	c01f374 <mbedtls_rsa_import_raw>
 c0295d2:	4604      	mov	r4, r0
 c0295d4:	bb10      	cbnz	r0, c02961c <pk_parse_key_pkcs1_der+0x1b8>
    p += len;
 c0295d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 c0295da:	4630      	mov	r0, r6
    p += len;
 c0295dc:	4413      	add	r3, r2
 c0295de:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 c0295e0:	f7f5 ff0a 	bl	c01f3f8 <mbedtls_rsa_complete>
 c0295e4:	4604      	mov	r4, r0
 c0295e6:	b9c8      	cbnz	r0, c02961c <pk_parse_key_pkcs1_der+0x1b8>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 c0295e8:	aa0b      	add	r2, sp, #44	; 0x2c
 c0295ea:	4629      	mov	r1, r5
 c0295ec:	a80a      	add	r0, sp, #40	; 0x28
 c0295ee:	f7fa fd96 	bl	c02411e <mbedtls_asn1_get_mpi>
 c0295f2:	4604      	mov	r4, r0
 c0295f4:	b990      	cbnz	r0, c02961c <pk_parse_key_pkcs1_der+0x1b8>
 c0295f6:	aa0b      	add	r2, sp, #44	; 0x2c
 c0295f8:	4629      	mov	r1, r5
 c0295fa:	a80a      	add	r0, sp, #40	; 0x28
 c0295fc:	f7fa fd8f 	bl	c02411e <mbedtls_asn1_get_mpi>
 c029600:	4604      	mov	r4, r0
 c029602:	b958      	cbnz	r0, c02961c <pk_parse_key_pkcs1_der+0x1b8>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 c029604:	aa0b      	add	r2, sp, #44	; 0x2c
 c029606:	4629      	mov	r1, r5
 c029608:	a80a      	add	r0, sp, #40	; 0x28
 c02960a:	f7fa fd88 	bl	c02411e <mbedtls_asn1_get_mpi>
 c02960e:	4604      	mov	r4, r0
 c029610:	b920      	cbnz	r0, c02961c <pk_parse_key_pkcs1_der+0x1b8>
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 c029612:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c029614:	4b0b      	ldr	r3, [pc, #44]	; (c029644 <pk_parse_key_pkcs1_der+0x1e0>)
 c029616:	42aa      	cmp	r2, r5
 c029618:	bf18      	it	ne
 c02961a:	461c      	movne	r4, r3
    mbedtls_mpi_free( &T );
 c02961c:	a80b      	add	r0, sp, #44	; 0x2c
 c02961e:	f7fb fab1 	bl	c024b84 <mbedtls_mpi_free>
    if( ret != 0 )
 c029622:	2c00      	cmp	r4, #0
 c029624:	f43f af30 	beq.w	c029488 <pk_parse_key_pkcs1_der+0x24>
        if( ( ret & 0xff80 ) == 0 )
 c029628:	f64f 7380 	movw	r3, #65408	; 0xff80
        mbedtls_rsa_free( rsa );
 c02962c:	4630      	mov	r0, r6
        if( ( ret & 0xff80 ) == 0 )
 c02962e:	421c      	tst	r4, r3
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
 c029630:	bf0c      	ite	eq
 c029632:	f5a4 5474 	subeq.w	r4, r4, #15616	; 0x3d00
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
 c029636:	4c04      	ldrne	r4, [pc, #16]	; (c029648 <pk_parse_key_pkcs1_der+0x1e4>)
        mbedtls_rsa_free( rsa );
 c029638:	f7f7 f85e 	bl	c0206f8 <mbedtls_rsa_free>
 c02963c:	e724      	b.n	c029488 <pk_parse_key_pkcs1_der+0x24>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 c02963e:	4c03      	ldr	r4, [pc, #12]	; (c02964c <pk_parse_key_pkcs1_der+0x1e8>)
 c029640:	e722      	b.n	c029488 <pk_parse_key_pkcs1_der+0x24>
 c029642:	bf00      	nop
 c029644:	ffffc29a 	.word	0xffffc29a
 c029648:	ffffc300 	.word	0xffffc300
 c02964c:	ffffc280 	.word	0xffffc280

0c029650 <pk_parse_key_sec1_der>:
 * Parse a SEC1 encoded private EC key
 */
static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                  const unsigned char *key,
                                  size_t keylen )
{
 c029650:	b5f0      	push	{r4, r5, r6, r7, lr}
 c029652:	b089      	sub	sp, #36	; 0x24
 c029654:	4605      	mov	r5, r0
    int ret;
    int version, pubkey_done;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 c029656:	9104      	str	r1, [sp, #16]
     *      privateKey     OCTET STRING,
     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
     *      publicKey  [1] BIT STRING OPTIONAL
     *    }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c029658:	2330      	movs	r3, #48	; 0x30
    unsigned char *end = p + keylen;
 c02965a:	4411      	add	r1, r2
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c02965c:	a804      	add	r0, sp, #16
 c02965e:	aa03      	add	r2, sp, #12
 c029660:	f7fa fd25 	bl	c0240ae <mbedtls_asn1_get_tag>
 c029664:	b120      	cbz	r0, c029670 <pk_parse_key_sec1_der+0x20>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
        {
            end2 = p + len;

            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 c029666:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
        mbedtls_ecp_keypair_free( eck );
        return( ret );
    }

    return( 0 );
}
 c02966a:	4620      	mov	r0, r4
 c02966c:	b009      	add	sp, #36	; 0x24
 c02966e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
 c029670:	e9dd 3703 	ldrd	r3, r7, [sp, #12]
 c029674:	441f      	add	r7, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 c029676:	aa02      	add	r2, sp, #8
 c029678:	4639      	mov	r1, r7
 c02967a:	a804      	add	r0, sp, #16
 c02967c:	f7fa fd2b 	bl	c0240d6 <mbedtls_asn1_get_int>
 c029680:	2800      	cmp	r0, #0
 c029682:	d1f0      	bne.n	c029666 <pk_parse_key_sec1_der+0x16>
    if( version != 1 )
 c029684:	9b02      	ldr	r3, [sp, #8]
 c029686:	2b01      	cmp	r3, #1
 c029688:	f040 809b 	bne.w	c0297c2 <pk_parse_key_sec1_der+0x172>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 c02968c:	2304      	movs	r3, #4
 c02968e:	aa03      	add	r2, sp, #12
 c029690:	4639      	mov	r1, r7
 c029692:	a804      	add	r0, sp, #16
 c029694:	f7fa fd0b 	bl	c0240ae <mbedtls_asn1_get_tag>
 c029698:	2800      	cmp	r0, #0
 c02969a:	d1e4      	bne.n	c029666 <pk_parse_key_sec1_der+0x16>
    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
 c02969c:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 c0296a0:	f105 06a0 	add.w	r6, r5, #160	; 0xa0
 c0296a4:	4630      	mov	r0, r6
 c0296a6:	f7fb fbf1 	bl	c024e8c <mbedtls_mpi_read_binary>
 c0296aa:	4604      	mov	r4, r0
 c0296ac:	b128      	cbz	r0, c0296ba <pk_parse_key_sec1_der+0x6a>
        mbedtls_ecp_keypair_free( eck );
 c0296ae:	4628      	mov	r0, r5
 c0296b0:	f7f3 fe92 	bl	c01d3d8 <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 c0296b4:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
 c0296b8:	e7d7      	b.n	c02966a <pk_parse_key_sec1_der+0x1a>
    p += len;
 c0296ba:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 c0296be:	4413      	add	r3, r2
    if( p != end )
 c0296c0:	42bb      	cmp	r3, r7
    p += len;
 c0296c2:	9304      	str	r3, [sp, #16]
    if( p != end )
 c0296c4:	d036      	beq.n	c029734 <pk_parse_key_sec1_der+0xe4>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c0296c6:	23a0      	movs	r3, #160	; 0xa0
 c0296c8:	aa03      	add	r2, sp, #12
 c0296ca:	4639      	mov	r1, r7
 c0296cc:	a804      	add	r0, sp, #16
 c0296ce:	f7fa fcee 	bl	c0240ae <mbedtls_asn1_get_tag>
 c0296d2:	4604      	mov	r4, r0
 c0296d4:	bb58      	cbnz	r0, c02972e <pk_parse_key_sec1_der+0xde>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 c0296d6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    if ( end - *p < 1 )
 c0296da:	2a00      	cmp	r2, #0
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 c0296dc:	eb03 0402 	add.w	r4, r3, r2
    if ( end - *p < 1 )
 c0296e0:	dd21      	ble.n	c029726 <pk_parse_key_sec1_der+0xd6>
    params->tag = **p;
 c0296e2:	781b      	ldrb	r3, [r3, #0]
    if( params->tag != MBEDTLS_ASN1_OID
 c0296e4:	2b06      	cmp	r3, #6
    params->tag = **p;
 c0296e6:	9305      	str	r3, [sp, #20]
    if( params->tag != MBEDTLS_ASN1_OID
 c0296e8:	d001      	beq.n	c0296ee <pk_parse_key_sec1_der+0x9e>
            && params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE )
 c0296ea:	2b30      	cmp	r3, #48	; 0x30
 c0296ec:	d11d      	bne.n	c02972a <pk_parse_key_sec1_der+0xda>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
 c0296ee:	aa06      	add	r2, sp, #24
 c0296f0:	4621      	mov	r1, r4
 c0296f2:	a804      	add	r0, sp, #16
 c0296f4:	f7fa fcdb 	bl	c0240ae <mbedtls_asn1_get_tag>
 c0296f8:	b160      	cbz	r0, c029714 <pk_parse_key_sec1_der+0xc4>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 c0296fa:	f5b0 5474 	subs.w	r4, r0, #15616	; 0x3d00
 c0296fe:	d105      	bne.n	c02970c <pk_parse_key_sec1_der+0xbc>
 c029700:	4629      	mov	r1, r5
 c029702:	a805      	add	r0, sp, #20
 c029704:	f7ff fd3e 	bl	c029184 <pk_use_ecparams>
 c029708:	4604      	mov	r4, r0
 c02970a:	b198      	cbz	r0, c029734 <pk_parse_key_sec1_der+0xe4>
        mbedtls_ecp_keypair_free( eck );
 c02970c:	4628      	mov	r0, r5
 c02970e:	f7f3 fe63 	bl	c01d3d8 <mbedtls_ecp_keypair_free>
        return( ret );
 c029712:	e7aa      	b.n	c02966a <pk_parse_key_sec1_der+0x1a>
    params->p = *p;
 c029714:	9b04      	ldr	r3, [sp, #16]
    *p += params->len;
 c029716:	9a06      	ldr	r2, [sp, #24]
    params->p = *p;
 c029718:	9307      	str	r3, [sp, #28]
    *p += params->len;
 c02971a:	4413      	add	r3, r2
    if( *p != end )
 c02971c:	429c      	cmp	r4, r3
    *p += params->len;
 c02971e:	9304      	str	r3, [sp, #16]
    if( *p != end )
 c029720:	d0ee      	beq.n	c029700 <pk_parse_key_sec1_der+0xb0>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 c029722:	4c2a      	ldr	r4, [pc, #168]	; (c0297cc <pk_parse_key_sec1_der+0x17c>)
 c029724:	e7f2      	b.n	c02970c <pk_parse_key_sec1_der+0xbc>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 c029726:	4c2a      	ldr	r4, [pc, #168]	; (c0297d0 <pk_parse_key_sec1_der+0x180>)
 c029728:	e7f0      	b.n	c02970c <pk_parse_key_sec1_der+0xbc>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 c02972a:	4c2a      	ldr	r4, [pc, #168]	; (c0297d4 <pk_parse_key_sec1_der+0x184>)
 c02972c:	e7ee      	b.n	c02970c <pk_parse_key_sec1_der+0xbc>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 c02972e:	f110 0f62 	cmn.w	r0, #98	; 0x62
 c029732:	d1bc      	bne.n	c0296ae <pk_parse_key_sec1_der+0x5e>
    if( p != end )
 c029734:	9b04      	ldr	r3, [sp, #16]
 c029736:	42bb      	cmp	r3, r7
 c029738:	d02b      	beq.n	c029792 <pk_parse_key_sec1_der+0x142>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c02973a:	23a1      	movs	r3, #161	; 0xa1
 c02973c:	aa03      	add	r2, sp, #12
 c02973e:	4639      	mov	r1, r7
 c029740:	a804      	add	r0, sp, #16
 c029742:	f7fa fcb4 	bl	c0240ae <mbedtls_asn1_get_tag>
 c029746:	4604      	mov	r4, r0
 c029748:	bb00      	cbnz	r0, c02978c <pk_parse_key_sec1_der+0x13c>
            end2 = p + len;
 c02974a:	e9dd 3403 	ldrd	r3, r4, [sp, #12]
 c02974e:	441c      	add	r4, r3
            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
 c029750:	aa03      	add	r2, sp, #12
 c029752:	4621      	mov	r1, r4
 c029754:	a804      	add	r0, sp, #16
 c029756:	f7fa fcf5 	bl	c024144 <mbedtls_asn1_get_bitstring_null>
 c02975a:	2800      	cmp	r0, #0
 c02975c:	d183      	bne.n	c029666 <pk_parse_key_sec1_der+0x16>
            if( p + len != end2 )
 c02975e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 c029762:	18d1      	adds	r1, r2, r3
 c029764:	428c      	cmp	r4, r1
 c029766:	d12e      	bne.n	c0297c6 <pk_parse_key_sec1_der+0x176>
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 c029768:	f105 07ac 	add.w	r7, r5, #172	; 0xac
 c02976c:	4639      	mov	r1, r7
 c02976e:	4628      	mov	r0, r5
 c029770:	f7f3 fee4 	bl	c01d53c <mbedtls_ecp_point_read_binary>
 c029774:	b918      	cbnz	r0, c02977e <pk_parse_key_sec1_der+0x12e>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 c029776:	4639      	mov	r1, r7
 c029778:	4628      	mov	r0, r5
 c02977a:	f7f3 ff4f 	bl	c01d61c <mbedtls_ecp_check_pubkey>
    *p = (unsigned char *) end;
 c02977e:	9404      	str	r4, [sp, #16]
            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
 c029780:	b1b0      	cbz	r0, c0297b0 <pk_parse_key_sec1_der+0x160>
                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
 c029782:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
 c029786:	d004      	beq.n	c029792 <pk_parse_key_sec1_der+0x142>
                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 c029788:	4c13      	ldr	r4, [pc, #76]	; (c0297d8 <pk_parse_key_sec1_der+0x188>)
 c02978a:	e76e      	b.n	c02966a <pk_parse_key_sec1_der+0x1a>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 c02978c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 c029790:	d18d      	bne.n	c0296ae <pk_parse_key_sec1_der+0x5e>
    if( ! pubkey_done &&
 c029792:	2300      	movs	r3, #0
 c029794:	4632      	mov	r2, r6
 c029796:	e9cd 3300 	strd	r3, r3, [sp]
 c02979a:	f105 01ac 	add.w	r1, r5, #172	; 0xac
 c02979e:	f105 0328 	add.w	r3, r5, #40	; 0x28
 c0297a2:	4628      	mov	r0, r5
 c0297a4:	f7f4 fb60 	bl	c01de68 <mbedtls_ecp_mul>
 c0297a8:	4604      	mov	r4, r0
 c0297aa:	2800      	cmp	r0, #0
 c0297ac:	f47f af7f 	bne.w	c0296ae <pk_parse_key_sec1_der+0x5e>
    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
 c0297b0:	4631      	mov	r1, r6
 c0297b2:	4628      	mov	r0, r5
 c0297b4:	f7f3 ffe0 	bl	c01d778 <mbedtls_ecp_check_privkey>
 c0297b8:	4604      	mov	r4, r0
 c0297ba:	2800      	cmp	r0, #0
 c0297bc:	f43f af55 	beq.w	c02966a <pk_parse_key_sec1_der+0x1a>
 c0297c0:	e7a4      	b.n	c02970c <pk_parse_key_sec1_der+0xbc>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 c0297c2:	4c06      	ldr	r4, [pc, #24]	; (c0297dc <pk_parse_key_sec1_der+0x18c>)
 c0297c4:	e751      	b.n	c02966a <pk_parse_key_sec1_der+0x1a>
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 c0297c6:	4c01      	ldr	r4, [pc, #4]	; (c0297cc <pk_parse_key_sec1_der+0x17c>)
 c0297c8:	e74f      	b.n	c02966a <pk_parse_key_sec1_der+0x1a>
 c0297ca:	bf00      	nop
 c0297cc:	ffffc29a 	.word	0xffffc29a
 c0297d0:	ffffc2a0 	.word	0xffffc2a0
 c0297d4:	ffffc29e 	.word	0xffffc29e
 c0297d8:	ffffc300 	.word	0xffffc300
 c0297dc:	ffffc280 	.word	0xffffc280

0c0297e0 <pk_get_pk_alg>:
{
 c0297e0:	b530      	push	{r4, r5, lr}
 c0297e2:	4615      	mov	r5, r2
    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 c0297e4:	2200      	movs	r2, #0
{
 c0297e6:	b085      	sub	sp, #20
    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 c0297e8:	e9c3 2200 	strd	r2, r2, [r3]
 c0297ec:	609a      	str	r2, [r3, #8]
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 c0297ee:	aa01      	add	r2, sp, #4
{
 c0297f0:	461c      	mov	r4, r3
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 c0297f2:	f7fa fcbb 	bl	c02416c <mbedtls_asn1_get_alg>
 c0297f6:	b118      	cbz	r0, c029800 <pk_get_pk_alg+0x20>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 c0297f8:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
}
 c0297fc:	b005      	add	sp, #20
 c0297fe:	bd30      	pop	{r4, r5, pc}
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 c029800:	4629      	mov	r1, r5
 c029802:	a801      	add	r0, sp, #4
 c029804:	f7fe fe4a 	bl	c02849c <mbedtls_oid_get_pk_alg>
 c029808:	b960      	cbnz	r0, c029824 <pk_get_pk_alg+0x44>
    if( *pk_alg == MBEDTLS_PK_RSA &&
 c02980a:	782b      	ldrb	r3, [r5, #0]
 c02980c:	2b01      	cmp	r3, #1
 c02980e:	d1f5      	bne.n	c0297fc <pk_get_pk_alg+0x1c>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 c029810:	6823      	ldr	r3, [r4, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 c029812:	2b05      	cmp	r3, #5
 c029814:	d000      	beq.n	c029818 <pk_get_pk_alg+0x38>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 c029816:	b93b      	cbnz	r3, c029828 <pk_get_pk_alg+0x48>
 c029818:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 c02981a:	4b04      	ldr	r3, [pc, #16]	; (c02982c <pk_get_pk_alg+0x4c>)
 c02981c:	2a00      	cmp	r2, #0
 c02981e:	bf18      	it	ne
 c029820:	4618      	movne	r0, r3
 c029822:	e7eb      	b.n	c0297fc <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 c029824:	4802      	ldr	r0, [pc, #8]	; (c029830 <pk_get_pk_alg+0x50>)
 c029826:	e7e9      	b.n	c0297fc <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 c029828:	4800      	ldr	r0, [pc, #0]	; (c02982c <pk_get_pk_alg+0x4c>)
 c02982a:	e7e7      	b.n	c0297fc <pk_get_pk_alg+0x1c>
 c02982c:	ffffc580 	.word	0xffffc580
 c029830:	ffffc380 	.word	0xffffc380

0c029834 <pk_parse_key_pkcs8_unencrypted_der>:
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 c029834:	2300      	movs	r3, #0
{
 c029836:	b530      	push	{r4, r5, lr}
 c029838:	b089      	sub	sp, #36	; 0x24
 c02983a:	4605      	mov	r5, r0
    unsigned char *p = (unsigned char *) key;
 c02983c:	9104      	str	r1, [sp, #16]
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 c02983e:	f88d 3007 	strb.w	r3, [sp, #7]
    unsigned char *end = p + keylen;
 c029842:	4411      	add	r1, r2
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c029844:	2330      	movs	r3, #48	; 0x30
 c029846:	aa03      	add	r2, sp, #12
 c029848:	a804      	add	r0, sp, #16
 c02984a:	f7fa fc30 	bl	c0240ae <mbedtls_asn1_get_tag>
 c02984e:	b120      	cbz	r0, c02985a <pk_parse_key_pkcs8_unencrypted_der+0x26>

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 c029850:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
}
 c029854:	4620      	mov	r0, r4
 c029856:	b009      	add	sp, #36	; 0x24
 c029858:	bd30      	pop	{r4, r5, pc}
    end = p + len;
 c02985a:	e9dd 3403 	ldrd	r3, r4, [sp, #12]
 c02985e:	441c      	add	r4, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 c029860:	aa02      	add	r2, sp, #8
 c029862:	4621      	mov	r1, r4
 c029864:	a804      	add	r0, sp, #16
 c029866:	f7fa fc36 	bl	c0240d6 <mbedtls_asn1_get_int>
 c02986a:	2800      	cmp	r0, #0
 c02986c:	d1f0      	bne.n	c029850 <pk_parse_key_pkcs8_unencrypted_der+0x1c>
    if( version != 0 )
 c02986e:	9b02      	ldr	r3, [sp, #8]
 c029870:	2b00      	cmp	r3, #0
 c029872:	d140      	bne.n	c0298f6 <pk_parse_key_pkcs8_unencrypted_der+0xc2>
    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 c029874:	ab05      	add	r3, sp, #20
 c029876:	f10d 0207 	add.w	r2, sp, #7
 c02987a:	4621      	mov	r1, r4
 c02987c:	a804      	add	r0, sp, #16
 c02987e:	f7ff ffaf 	bl	c0297e0 <pk_get_pk_alg>
 c029882:	2800      	cmp	r0, #0
 c029884:	d1e4      	bne.n	c029850 <pk_parse_key_pkcs8_unencrypted_der+0x1c>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 c029886:	2304      	movs	r3, #4
 c029888:	aa03      	add	r2, sp, #12
 c02988a:	4621      	mov	r1, r4
 c02988c:	a804      	add	r0, sp, #16
 c02988e:	f7fa fc0e 	bl	c0240ae <mbedtls_asn1_get_tag>
 c029892:	2800      	cmp	r0, #0
 c029894:	d1dc      	bne.n	c029850 <pk_parse_key_pkcs8_unencrypted_der+0x1c>
    if( len < 1 )
 c029896:	9b03      	ldr	r3, [sp, #12]
 c029898:	b37b      	cbz	r3, c0298fa <pk_parse_key_pkcs8_unencrypted_der+0xc6>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 c02989a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 c02989e:	f7fe ff5d 	bl	c02875c <mbedtls_pk_info_from_type>
 c0298a2:	4601      	mov	r1, r0
 c0298a4:	b908      	cbnz	r0, c0298aa <pk_parse_key_pkcs8_unencrypted_der+0x76>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 c0298a6:	4c16      	ldr	r4, [pc, #88]	; (c029900 <pk_parse_key_pkcs8_unencrypted_der+0xcc>)
 c0298a8:	e7d4      	b.n	c029854 <pk_parse_key_pkcs8_unencrypted_der+0x20>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 c0298aa:	4628      	mov	r0, r5
 c0298ac:	f7fe ff62 	bl	c028774 <mbedtls_pk_setup>
 c0298b0:	4604      	mov	r4, r0
 c0298b2:	2800      	cmp	r0, #0
 c0298b4:	d1ce      	bne.n	c029854 <pk_parse_key_pkcs8_unencrypted_der+0x20>
    if( pk_alg == MBEDTLS_PK_RSA )
 c0298b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 c0298ba:	2b01      	cmp	r3, #1
 c0298bc:	d10b      	bne.n	c0298d6 <pk_parse_key_pkcs8_unencrypted_der+0xa2>
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 c0298be:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 c0298c2:	6868      	ldr	r0, [r5, #4]
 c0298c4:	f7ff fdce 	bl	c029464 <pk_parse_key_pkcs1_der>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 c0298c8:	4604      	mov	r4, r0
 c0298ca:	2800      	cmp	r0, #0
 c0298cc:	d0c2      	beq.n	c029854 <pk_parse_key_pkcs8_unencrypted_der+0x20>
            mbedtls_pk_free( pk );
 c0298ce:	4628      	mov	r0, r5
 c0298d0:	f7fe ff35 	bl	c02873e <mbedtls_pk_free>
            return( ret );
 c0298d4:	e7be      	b.n	c029854 <pk_parse_key_pkcs8_unencrypted_der+0x20>
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
 c0298d6:	3b02      	subs	r3, #2
 c0298d8:	2b01      	cmp	r3, #1
 c0298da:	d8e4      	bhi.n	c0298a6 <pk_parse_key_pkcs8_unencrypted_der+0x72>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 c0298dc:	6869      	ldr	r1, [r5, #4]
 c0298de:	a805      	add	r0, sp, #20
 c0298e0:	f7ff fc50 	bl	c029184 <pk_use_ecparams>
 c0298e4:	4604      	mov	r4, r0
 c0298e6:	2800      	cmp	r0, #0
 c0298e8:	d1f1      	bne.n	c0298ce <pk_parse_key_pkcs8_unencrypted_der+0x9a>
 c0298ea:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 c0298ee:	6868      	ldr	r0, [r5, #4]
 c0298f0:	f7ff feae 	bl	c029650 <pk_parse_key_sec1_der>
 c0298f4:	e7e8      	b.n	c0298c8 <pk_parse_key_pkcs8_unencrypted_der+0x94>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 c0298f6:	4c03      	ldr	r4, [pc, #12]	; (c029904 <pk_parse_key_pkcs8_unencrypted_der+0xd0>)
 c0298f8:	e7ac      	b.n	c029854 <pk_parse_key_pkcs8_unencrypted_der+0x20>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 c0298fa:	4c03      	ldr	r4, [pc, #12]	; (c029908 <pk_parse_key_pkcs8_unencrypted_der+0xd4>)
 c0298fc:	e7aa      	b.n	c029854 <pk_parse_key_pkcs8_unencrypted_der+0x20>
 c0298fe:	bf00      	nop
 c029900:	ffffc380 	.word	0xffffc380
 c029904:	ffffc280 	.word	0xffffc280
 c029908:	ffffc2a0 	.word	0xffffc2a0

0c02990c <pk_parse_key_pkcs8_encrypted_der>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 c02990c:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02990e:	b091      	sub	sp, #68	; 0x44
 c029910:	9d16      	ldr	r5, [sp, #88]	; 0x58
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
 c029912:	9109      	str	r1, [sp, #36]	; 0x24
{
 c029914:	4606      	mov	r6, r0
 c029916:	461f      	mov	r7, r3
    end = p + keylen;
 c029918:	4411      	add	r1, r2

    if( pwdlen == 0 )
 c02991a:	2d00      	cmp	r5, #0
 c02991c:	d070      	beq.n	c029a00 <pk_parse_key_pkcs8_encrypted_der+0xf4>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c02991e:	2330      	movs	r3, #48	; 0x30
 c029920:	aa08      	add	r2, sp, #32
 c029922:	a809      	add	r0, sp, #36	; 0x24
 c029924:	f7fa fbc3 	bl	c0240ae <mbedtls_asn1_get_tag>
 c029928:	b118      	cbz	r0, c029932 <pk_parse_key_pkcs8_encrypted_der+0x26>

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 c02992a:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
}
 c02992e:	b011      	add	sp, #68	; 0x44
 c029930:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
 c029932:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 c029936:	441c      	add	r4, r3
    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 c029938:	aa0a      	add	r2, sp, #40	; 0x28
 c02993a:	ab0d      	add	r3, sp, #52	; 0x34
 c02993c:	4621      	mov	r1, r4
 c02993e:	a809      	add	r0, sp, #36	; 0x24
 c029940:	f7fa fc14 	bl	c02416c <mbedtls_asn1_get_alg>
 c029944:	2800      	cmp	r0, #0
 c029946:	d1f0      	bne.n	c02992a <pk_parse_key_pkcs8_encrypted_der+0x1e>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 c029948:	2304      	movs	r3, #4
 c02994a:	aa08      	add	r2, sp, #32
 c02994c:	4621      	mov	r1, r4
 c02994e:	a809      	add	r0, sp, #36	; 0x24
 c029950:	f7fa fbad 	bl	c0240ae <mbedtls_asn1_get_tag>
 c029954:	2800      	cmp	r0, #0
 c029956:	d1e8      	bne.n	c02992a <pk_parse_key_pkcs8_encrypted_der+0x1e>
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 c029958:	f10d 011f 	add.w	r1, sp, #31
 c02995c:	f10d 021e 	add.w	r2, sp, #30
 c029960:	a80a      	add	r0, sp, #40	; 0x28
    buf = p;
 c029962:	9c09      	ldr	r4, [sp, #36]	; 0x24
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 c029964:	f7fe fe2a 	bl	c0285bc <mbedtls_oid_get_pkcs12_pbe_alg>
 c029968:	4601      	mov	r1, r0
 c02996a:	b998      	cbnz	r0, c029994 <pk_parse_key_pkcs8_encrypted_der+0x88>
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
 c02996c:	9808      	ldr	r0, [sp, #32]
 c02996e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 c029972:	9003      	str	r0, [sp, #12]
 c029974:	9809      	ldr	r0, [sp, #36]	; 0x24
 c029976:	f89d 201e 	ldrb.w	r2, [sp, #30]
 c02997a:	e9cd 5001 	strd	r5, r0, [sp, #4]
 c02997e:	9404      	str	r4, [sp, #16]
 c029980:	9700      	str	r7, [sp, #0]
 c029982:	a80d      	add	r0, sp, #52	; 0x34
 c029984:	f7ff f962 	bl	c028c4c <mbedtls_pkcs12_pbe>
 c029988:	b1e8      	cbz	r0, c0299c6 <pk_parse_key_pkcs8_encrypted_der+0xba>
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
 c02998a:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
 c02998e:	d1ce      	bne.n	c02992e <pk_parse_key_pkcs8_encrypted_der+0x22>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 c029990:	481d      	ldr	r0, [pc, #116]	; (c029a08 <pk_parse_key_pkcs8_encrypted_der+0xfc>)
 c029992:	e7cc      	b.n	c02992e <pk_parse_key_pkcs8_encrypted_der+0x22>
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
 c029994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 c029996:	2a0a      	cmp	r2, #10
 c029998:	d11b      	bne.n	c0299d2 <pk_parse_key_pkcs8_encrypted_der+0xc6>
 c02999a:	990c      	ldr	r1, [sp, #48]	; 0x30
 c02999c:	481b      	ldr	r0, [pc, #108]	; (c029a0c <pk_parse_key_pkcs8_encrypted_der+0x100>)
 c02999e:	f7ed ffdf 	bl	c017960 <memcmp>
 c0299a2:	4601      	mov	r1, r0
 c0299a4:	2800      	cmp	r0, #0
 c0299a6:	d12d      	bne.n	c029a04 <pk_parse_key_pkcs8_encrypted_der+0xf8>
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
 c0299a8:	9b08      	ldr	r3, [sp, #32]
 c0299aa:	9402      	str	r4, [sp, #8]
 c0299ac:	9301      	str	r3, [sp, #4]
 c0299ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c0299b0:	463a      	mov	r2, r7
 c0299b2:	9300      	str	r3, [sp, #0]
 c0299b4:	a80d      	add	r0, sp, #52	; 0x34
 c0299b6:	462b      	mov	r3, r5
 c0299b8:	f7ff f850 	bl	c028a5c <mbedtls_pkcs12_pbe_sha1_rc4_128>
 c0299bc:	2800      	cmp	r0, #0
 c0299be:	d1b6      	bne.n	c02992e <pk_parse_key_pkcs8_encrypted_der+0x22>
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 c0299c0:	7823      	ldrb	r3, [r4, #0]
 c0299c2:	2b30      	cmp	r3, #48	; 0x30
 c0299c4:	d1e4      	bne.n	c029990 <pk_parse_key_pkcs8_encrypted_der+0x84>
    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
 c0299c6:	9a08      	ldr	r2, [sp, #32]
 c0299c8:	4621      	mov	r1, r4
 c0299ca:	4630      	mov	r0, r6
 c0299cc:	f7ff ff32 	bl	c029834 <pk_parse_key_pkcs8_unencrypted_der>
 c0299d0:	e7ad      	b.n	c02992e <pk_parse_key_pkcs8_encrypted_der+0x22>
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
 c0299d2:	2a09      	cmp	r2, #9
 c0299d4:	d116      	bne.n	c029a04 <pk_parse_key_pkcs8_encrypted_der+0xf8>
 c0299d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 c0299d8:	480d      	ldr	r0, [pc, #52]	; (c029a10 <pk_parse_key_pkcs8_encrypted_der+0x104>)
 c0299da:	f7ed ffc1 	bl	c017960 <memcmp>
 c0299de:	4601      	mov	r1, r0
 c0299e0:	b980      	cbnz	r0, c029a04 <pk_parse_key_pkcs8_encrypted_der+0xf8>
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
 c0299e2:	9b08      	ldr	r3, [sp, #32]
 c0299e4:	9402      	str	r4, [sp, #8]
 c0299e6:	9301      	str	r3, [sp, #4]
 c0299e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c0299ea:	463a      	mov	r2, r7
 c0299ec:	9300      	str	r3, [sp, #0]
 c0299ee:	a80d      	add	r0, sp, #52	; 0x34
 c0299f0:	462b      	mov	r3, r5
 c0299f2:	f7ff fa6d 	bl	c028ed0 <mbedtls_pkcs5_pbes2>
 c0299f6:	2800      	cmp	r0, #0
 c0299f8:	d0e5      	beq.n	c0299c6 <pk_parse_key_pkcs8_encrypted_der+0xba>
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
 c0299fa:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
 c0299fe:	e7c6      	b.n	c02998e <pk_parse_key_pkcs8_encrypted_der+0x82>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 c029a00:	4804      	ldr	r0, [pc, #16]	; (c029a14 <pk_parse_key_pkcs8_encrypted_der+0x108>)
 c029a02:	e794      	b.n	c02992e <pk_parse_key_pkcs8_encrypted_der+0x22>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 c029a04:	4804      	ldr	r0, [pc, #16]	; (c029a18 <pk_parse_key_pkcs8_encrypted_der+0x10c>)
 c029a06:	e792      	b.n	c02992e <pk_parse_key_pkcs8_encrypted_der+0x22>
 c029a08:	ffffc480 	.word	0xffffc480
 c029a0c:	0c03686b 	.word	0x0c03686b
 c029a10:	0c036876 	.word	0x0c036876
 c029a14:	ffffc400 	.word	0xffffc400
 c029a18:	ffffc680 	.word	0xffffc680

0c029a1c <mbedtls_pk_parse_subpubkey>:
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 c029a1c:	2300      	movs	r3, #0
{
 c029a1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c029a22:	b086      	sub	sp, #24
 c029a24:	4690      	mov	r8, r2
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 c029a26:	f88d 3007 	strb.w	r3, [sp, #7]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 c029a2a:	aa02      	add	r2, sp, #8
 c029a2c:	2330      	movs	r3, #48	; 0x30
{
 c029a2e:	4607      	mov	r7, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 c029a30:	f7fa fb3d 	bl	c0240ae <mbedtls_asn1_get_tag>
 c029a34:	b128      	cbz	r0, c029a42 <mbedtls_pk_parse_subpubkey+0x26>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 c029a36:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
}
 c029a3a:	4620      	mov	r0, r4
 c029a3c:	b006      	add	sp, #24
 c029a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    end = *p + len;
 c029a42:	9b02      	ldr	r3, [sp, #8]
 c029a44:	683e      	ldr	r6, [r7, #0]
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 c029a46:	f10d 0207 	add.w	r2, sp, #7
    end = *p + len;
 c029a4a:	441e      	add	r6, r3
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 c029a4c:	4631      	mov	r1, r6
 c029a4e:	ab03      	add	r3, sp, #12
 c029a50:	4638      	mov	r0, r7
 c029a52:	f7ff fec5 	bl	c0297e0 <pk_get_pk_alg>
 c029a56:	4604      	mov	r4, r0
 c029a58:	2800      	cmp	r0, #0
 c029a5a:	d1ee      	bne.n	c029a3a <mbedtls_pk_parse_subpubkey+0x1e>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 c029a5c:	aa02      	add	r2, sp, #8
 c029a5e:	4631      	mov	r1, r6
 c029a60:	4638      	mov	r0, r7
 c029a62:	f7fa fb6f 	bl	c024144 <mbedtls_asn1_get_bitstring_null>
 c029a66:	b110      	cbz	r0, c029a6e <mbedtls_pk_parse_subpubkey+0x52>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 c029a68:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
 c029a6c:	e7e5      	b.n	c029a3a <mbedtls_pk_parse_subpubkey+0x1e>
    if( *p + len != end )
 c029a6e:	683b      	ldr	r3, [r7, #0]
 c029a70:	9a02      	ldr	r2, [sp, #8]
 c029a72:	4413      	add	r3, r2
 c029a74:	429e      	cmp	r6, r3
 c029a76:	d144      	bne.n	c029b02 <mbedtls_pk_parse_subpubkey+0xe6>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 c029a78:	f89d 0007 	ldrb.w	r0, [sp, #7]
 c029a7c:	f7fe fe6e 	bl	c02875c <mbedtls_pk_info_from_type>
 c029a80:	4601      	mov	r1, r0
 c029a82:	2800      	cmp	r0, #0
 c029a84:	d03f      	beq.n	c029b06 <mbedtls_pk_parse_subpubkey+0xea>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 c029a86:	4640      	mov	r0, r8
 c029a88:	f7fe fe74 	bl	c028774 <mbedtls_pk_setup>
 c029a8c:	4604      	mov	r4, r0
 c029a8e:	2800      	cmp	r0, #0
 c029a90:	d1d3      	bne.n	c029a3a <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_RSA )
 c029a92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 c029a96:	2b01      	cmp	r3, #1
 c029a98:	d10c      	bne.n	c029ab4 <mbedtls_pk_parse_subpubkey+0x98>
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 c029a9a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 c029a9e:	4631      	mov	r1, r6
 c029aa0:	4638      	mov	r0, r7
 c029aa2:	f7ff fb0f 	bl	c0290c4 <pk_get_rsapubkey>
    if( ret == 0 && *p != end )
 c029aa6:	4605      	mov	r5, r0
 c029aa8:	b320      	cbz	r0, c029af4 <mbedtls_pk_parse_subpubkey+0xd8>
        mbedtls_pk_free( pk );
 c029aaa:	4640      	mov	r0, r8
 c029aac:	f7fe fe47 	bl	c02873e <mbedtls_pk_free>
 c029ab0:	462c      	mov	r4, r5
 c029ab2:	e7c2      	b.n	c029a3a <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
 c029ab4:	3b02      	subs	r3, #2
 c029ab6:	2b01      	cmp	r3, #1
 c029ab8:	d821      	bhi.n	c029afe <mbedtls_pk_parse_subpubkey+0xe2>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
 c029aba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 c029abe:	a803      	add	r0, sp, #12
 c029ac0:	f7ff fb60 	bl	c029184 <pk_use_ecparams>
        if( ret == 0 )
 c029ac4:	4605      	mov	r5, r0
 c029ac6:	2800      	cmp	r0, #0
 c029ac8:	d1ef      	bne.n	c029aaa <mbedtls_pk_parse_subpubkey+0x8e>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
 c029aca:	f8d8 9004 	ldr.w	r9, [r8, #4]
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 c029ace:	683a      	ldr	r2, [r7, #0]
 c029ad0:	f109 0aac 	add.w	sl, r9, #172	; 0xac
 c029ad4:	1ab3      	subs	r3, r6, r2
 c029ad6:	4651      	mov	r1, sl
 c029ad8:	4648      	mov	r0, r9
 c029ada:	f7f3 fd2f 	bl	c01d53c <mbedtls_ecp_point_read_binary>
 c029ade:	4605      	mov	r5, r0
 c029ae0:	b920      	cbnz	r0, c029aec <mbedtls_pk_parse_subpubkey+0xd0>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 c029ae2:	4651      	mov	r1, sl
 c029ae4:	4648      	mov	r0, r9
 c029ae6:	f7f3 fd99 	bl	c01d61c <mbedtls_ecp_check_pubkey>
 c029aea:	4605      	mov	r5, r0
    *p = (unsigned char *) end;
 c029aec:	603e      	str	r6, [r7, #0]
    if( ret == 0 && *p != end )
 c029aee:	2d00      	cmp	r5, #0
 c029af0:	d0a3      	beq.n	c029a3a <mbedtls_pk_parse_subpubkey+0x1e>
 c029af2:	e7da      	b.n	c029aaa <mbedtls_pk_parse_subpubkey+0x8e>
 c029af4:	683b      	ldr	r3, [r7, #0]
 c029af6:	42b3      	cmp	r3, r6
 c029af8:	d09f      	beq.n	c029a3a <mbedtls_pk_parse_subpubkey+0x1e>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
 c029afa:	4d04      	ldr	r5, [pc, #16]	; (c029b0c <mbedtls_pk_parse_subpubkey+0xf0>)
 c029afc:	e7d5      	b.n	c029aaa <mbedtls_pk_parse_subpubkey+0x8e>
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 c029afe:	4d04      	ldr	r5, [pc, #16]	; (c029b10 <mbedtls_pk_parse_subpubkey+0xf4>)
 c029b00:	e7d3      	b.n	c029aaa <mbedtls_pk_parse_subpubkey+0x8e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 c029b02:	4c02      	ldr	r4, [pc, #8]	; (c029b0c <mbedtls_pk_parse_subpubkey+0xf0>)
 c029b04:	e799      	b.n	c029a3a <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 c029b06:	4c02      	ldr	r4, [pc, #8]	; (c029b10 <mbedtls_pk_parse_subpubkey+0xf4>)
 c029b08:	e797      	b.n	c029a3a <mbedtls_pk_parse_subpubkey+0x1e>
 c029b0a:	bf00      	nop
 c029b0c:	ffffc49a 	.word	0xffffc49a
 c029b10:	ffffc380 	.word	0xffffc380

0c029b14 <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 c029b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c029b18:	b088      	sub	sp, #32
 c029b1a:	4605      	mov	r5, r0
 c029b1c:	460e      	mov	r6, r1
 c029b1e:	4698      	mov	r8, r3
 c029b20:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    size_t len;
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
 c029b24:	4617      	mov	r7, r2
 c029b26:	2a00      	cmp	r2, #0
 c029b28:	f000 80ea 	beq.w	c029d00 <mbedtls_pk_parse_key+0x1ec>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
    PK_VALIDATE_RET( key != NULL );

#if defined(MBEDTLS_PEM_PARSE_C)
   mbedtls_pem_init( &pem );
 c029b2c:	a805      	add	r0, sp, #20

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
 c029b2e:	f107 3aff 	add.w	sl, r7, #4294967295
   mbedtls_pem_init( &pem );
 c029b32:	f7fe fd5f 	bl	c0285f4 <mbedtls_pem_init>
    if( key[keylen - 1] != '\0' )
 c029b36:	f816 300a 	ldrb.w	r3, [r6, sl]
 c029b3a:	b303      	cbz	r3, c029b7e <mbedtls_pk_parse_key+0x6a>
        return( ret );
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
 c029b3c:	f816 300a 	ldrb.w	r3, [r6, sl]
 c029b40:	2b00      	cmp	r3, #0
 c029b42:	d15a      	bne.n	c029bfa <mbedtls_pk_parse_key+0xe6>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
 c029b44:	ab04      	add	r3, sp, #16
 c029b46:	e9cd 9301 	strd	r9, r3, [sp, #4]
 c029b4a:	f8cd 8000 	str.w	r8, [sp]
 c029b4e:	4633      	mov	r3, r6
 c029b50:	4a74      	ldr	r2, [pc, #464]	; (c029d24 <mbedtls_pk_parse_key+0x210>)
 c029b52:	4975      	ldr	r1, [pc, #468]	; (c029d28 <mbedtls_pk_parse_key+0x214>)
 c029b54:	a805      	add	r0, sp, #20
 c029b56:	f7fe fd53 	bl	c028600 <mbedtls_pem_read_buffer>
                               "-----BEGIN EC PRIVATE KEY-----",
                               "-----END EC PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
    if( ret == 0 )
 c029b5a:	4604      	mov	r4, r0
 c029b5c:	2800      	cmp	r0, #0
 c029b5e:	d143      	bne.n	c029be8 <mbedtls_pk_parse_key+0xd4>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
 c029b60:	2002      	movs	r0, #2
 c029b62:	f7fe fdfb 	bl	c02875c <mbedtls_pk_info_from_type>

        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 c029b66:	4601      	mov	r1, r0
 c029b68:	4628      	mov	r0, r5
 c029b6a:	f7fe fe03 	bl	c028774 <mbedtls_pk_setup>
 c029b6e:	4604      	mov	r4, r0
 c029b70:	bb10      	cbnz	r0, c029bb8 <mbedtls_pk_parse_key+0xa4>
 c029b72:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 c029b76:	6868      	ldr	r0, [r5, #4]
 c029b78:	f7ff fd6a 	bl	c029650 <pk_parse_key_sec1_der>
 c029b7c:	e01a      	b.n	c029bb4 <mbedtls_pk_parse_key+0xa0>
        ret = mbedtls_pem_read_buffer( &pem,
 c029b7e:	ab04      	add	r3, sp, #16
 c029b80:	e9cd 9301 	strd	r9, r3, [sp, #4]
 c029b84:	f8cd 8000 	str.w	r8, [sp]
 c029b88:	4633      	mov	r3, r6
 c029b8a:	4a68      	ldr	r2, [pc, #416]	; (c029d2c <mbedtls_pk_parse_key+0x218>)
 c029b8c:	4968      	ldr	r1, [pc, #416]	; (c029d30 <mbedtls_pk_parse_key+0x21c>)
 c029b8e:	a805      	add	r0, sp, #20
 c029b90:	f7fe fd36 	bl	c028600 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 c029b94:	4604      	mov	r4, r0
 c029b96:	b9b0      	cbnz	r0, c029bc6 <mbedtls_pk_parse_key+0xb2>
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 c029b98:	2001      	movs	r0, #1
 c029b9a:	f7fe fddf 	bl	c02875c <mbedtls_pk_info_from_type>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 c029b9e:	4601      	mov	r1, r0
 c029ba0:	4628      	mov	r0, r5
 c029ba2:	f7fe fde7 	bl	c028774 <mbedtls_pk_setup>
 c029ba6:	4604      	mov	r4, r0
 c029ba8:	b930      	cbnz	r0, c029bb8 <mbedtls_pk_parse_key+0xa4>
 c029baa:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 c029bae:	6868      	ldr	r0, [r5, #4]
 c029bb0:	f7ff fc58 	bl	c029464 <pk_parse_key_pkcs1_der>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 c029bb4:	4604      	mov	r4, r0
 c029bb6:	b110      	cbz	r0, c029bbe <mbedtls_pk_parse_key+0xaa>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
 c029bb8:	4628      	mov	r0, r5
 c029bba:	f7fe fdc0 	bl	c02873e <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
 c029bbe:	a805      	add	r0, sp, #20
 c029bc0:	f7fe fda6 	bl	c028710 <mbedtls_pem_free>
        return( ret );
 c029bc4:	e003      	b.n	c029bce <mbedtls_pk_parse_key+0xba>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 c029bc6:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 c029bca:	d104      	bne.n	c029bd6 <mbedtls_pk_parse_key+0xc2>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 c029bcc:	4c59      	ldr	r4, [pc, #356]	; (c029d34 <mbedtls_pk_parse_key+0x220>)
     * twice, once here and once by the caller, but this is
     * also ok and in line with the mbedtls_pk_free() calls
     * on failed PEM parsing attempts. */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
}
 c029bce:	4620      	mov	r0, r4
 c029bd0:	b008      	add	sp, #32
 c029bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 c029bd6:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 c029bda:	d101      	bne.n	c029be0 <mbedtls_pk_parse_key+0xcc>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 c029bdc:	4c56      	ldr	r4, [pc, #344]	; (c029d38 <mbedtls_pk_parse_key+0x224>)
 c029bde:	e7f6      	b.n	c029bce <mbedtls_pk_parse_key+0xba>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 c029be0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 c029be4:	d1f3      	bne.n	c029bce <mbedtls_pk_parse_key+0xba>
 c029be6:	e7a9      	b.n	c029b3c <mbedtls_pk_parse_key+0x28>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 c029be8:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 c029bec:	d0ee      	beq.n	c029bcc <mbedtls_pk_parse_key+0xb8>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 c029bee:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 c029bf2:	d0f3      	beq.n	c029bdc <mbedtls_pk_parse_key+0xc8>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 c029bf4:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 c029bf8:	d1e9      	bne.n	c029bce <mbedtls_pk_parse_key+0xba>
    if( key[keylen - 1] != '\0' )
 c029bfa:	f816 300a 	ldrb.w	r3, [r6, sl]
 c029bfe:	b9a3      	cbnz	r3, c029c2a <mbedtls_pk_parse_key+0x116>
        ret = mbedtls_pem_read_buffer( &pem,
 c029c00:	aa04      	add	r2, sp, #16
 c029c02:	e9cd 3201 	strd	r3, r2, [sp, #4]
 c029c06:	9300      	str	r3, [sp, #0]
 c029c08:	4a4c      	ldr	r2, [pc, #304]	; (c029d3c <mbedtls_pk_parse_key+0x228>)
 c029c0a:	4633      	mov	r3, r6
 c029c0c:	494c      	ldr	r1, [pc, #304]	; (c029d40 <mbedtls_pk_parse_key+0x22c>)
 c029c0e:	a805      	add	r0, sp, #20
 c029c10:	f7fe fcf6 	bl	c028600 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 c029c14:	4604      	mov	r4, r0
 c029c16:	b928      	cbnz	r0, c029c24 <mbedtls_pk_parse_key+0x110>
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 c029c18:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 c029c1c:	4628      	mov	r0, r5
 c029c1e:	f7ff fe09 	bl	c029834 <pk_parse_key_pkcs8_unencrypted_der>
 c029c22:	e7c7      	b.n	c029bb4 <mbedtls_pk_parse_key+0xa0>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 c029c24:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 c029c28:	d1d1      	bne.n	c029bce <mbedtls_pk_parse_key+0xba>
    if( key[keylen - 1] != '\0' )
 c029c2a:	f816 300a 	ldrb.w	r3, [r6, sl]
 c029c2e:	b9bb      	cbnz	r3, c029c60 <mbedtls_pk_parse_key+0x14c>
        ret = mbedtls_pem_read_buffer( &pem,
 c029c30:	aa04      	add	r2, sp, #16
 c029c32:	e9cd 3201 	strd	r3, r2, [sp, #4]
 c029c36:	9300      	str	r3, [sp, #0]
 c029c38:	4a42      	ldr	r2, [pc, #264]	; (c029d44 <mbedtls_pk_parse_key+0x230>)
 c029c3a:	4633      	mov	r3, r6
 c029c3c:	4942      	ldr	r1, [pc, #264]	; (c029d48 <mbedtls_pk_parse_key+0x234>)
 c029c3e:	a805      	add	r0, sp, #20
 c029c40:	f7fe fcde 	bl	c028600 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 c029c44:	4604      	mov	r4, r0
 c029c46:	b940      	cbnz	r0, c029c5a <mbedtls_pk_parse_key+0x146>
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 c029c48:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 c029c4c:	f8cd 9000 	str.w	r9, [sp]
 c029c50:	4643      	mov	r3, r8
 c029c52:	4628      	mov	r0, r5
 c029c54:	f7ff fe5a 	bl	c02990c <pk_parse_key_pkcs8_encrypted_der>
 c029c58:	e7ac      	b.n	c029bb4 <mbedtls_pk_parse_key+0xa0>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 c029c5a:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 c029c5e:	d1b6      	bne.n	c029bce <mbedtls_pk_parse_key+0xba>
        if( ( key_copy = mbedtls_calloc( 1, keylen ) ) == NULL )
 c029c60:	4639      	mov	r1, r7
 c029c62:	2001      	movs	r0, #1
 c029c64:	f000 fb06 	bl	c02a274 <mbedtls_calloc>
 c029c68:	4604      	mov	r4, r0
 c029c6a:	b908      	cbnz	r0, c029c70 <mbedtls_pk_parse_key+0x15c>
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 c029c6c:	4c37      	ldr	r4, [pc, #220]	; (c029d4c <mbedtls_pk_parse_key+0x238>)
 c029c6e:	e7ae      	b.n	c029bce <mbedtls_pk_parse_key+0xba>
        memcpy( key_copy, key, keylen );
 c029c70:	463a      	mov	r2, r7
 c029c72:	4631      	mov	r1, r6
 c029c74:	f7ed fe83 	bl	c01797e <memcpy>
        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
 c029c78:	4643      	mov	r3, r8
 c029c7a:	463a      	mov	r2, r7
 c029c7c:	4621      	mov	r1, r4
 c029c7e:	f8cd 9000 	str.w	r9, [sp]
 c029c82:	4628      	mov	r0, r5
 c029c84:	f7ff fe42 	bl	c02990c <pk_parse_key_pkcs8_encrypted_der>
 c029c88:	4680      	mov	r8, r0
        mbedtls_platform_zeroize( key_copy, keylen );
 c029c8a:	4639      	mov	r1, r7
 c029c8c:	4620      	mov	r0, r4
 c029c8e:	f000 fb07 	bl	c02a2a0 <mbedtls_platform_zeroize>
        mbedtls_free( key_copy );
 c029c92:	4620      	mov	r0, r4
 c029c94:	f000 faf4 	bl	c02a280 <mbedtls_free>
    if( ret == 0 )
 c029c98:	f1b8 0f00 	cmp.w	r8, #0
 c029c9c:	d101      	bne.n	c029ca2 <mbedtls_pk_parse_key+0x18e>
        return( 0 );
 c029c9e:	2400      	movs	r4, #0
 c029ca0:	e795      	b.n	c029bce <mbedtls_pk_parse_key+0xba>
    mbedtls_pk_free( pk );
 c029ca2:	4628      	mov	r0, r5
 c029ca4:	f7fe fd4b 	bl	c02873e <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 c029ca8:	4628      	mov	r0, r5
 c029caa:	f7fe fd44 	bl	c028736 <mbedtls_pk_init>
    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
 c029cae:	f518 5f6e 	cmn.w	r8, #15232	; 0x3b80
 c029cb2:	d08b      	beq.n	c029bcc <mbedtls_pk_parse_key+0xb8>
    if( ( pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 c029cb4:	463a      	mov	r2, r7
 c029cb6:	4631      	mov	r1, r6
 c029cb8:	4628      	mov	r0, r5
 c029cba:	f7ff fdbb 	bl	c029834 <pk_parse_key_pkcs8_unencrypted_der>
 c029cbe:	2800      	cmp	r0, #0
 c029cc0:	d0ed      	beq.n	c029c9e <mbedtls_pk_parse_key+0x18a>
    mbedtls_pk_free( pk );
 c029cc2:	4628      	mov	r0, r5
 c029cc4:	f7fe fd3b 	bl	c02873e <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 c029cc8:	4628      	mov	r0, r5
 c029cca:	f7fe fd34 	bl	c028736 <mbedtls_pk_init>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 c029cce:	2001      	movs	r0, #1
 c029cd0:	f7fe fd44 	bl	c02875c <mbedtls_pk_info_from_type>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 c029cd4:	4601      	mov	r1, r0
 c029cd6:	4628      	mov	r0, r5
 c029cd8:	f7fe fd4c 	bl	c028774 <mbedtls_pk_setup>
 c029cdc:	b190      	cbz	r0, c029d04 <mbedtls_pk_parse_key+0x1f0>
    mbedtls_pk_free( pk );
 c029cde:	4628      	mov	r0, r5
 c029ce0:	f7fe fd2d 	bl	c02873e <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 c029ce4:	4628      	mov	r0, r5
 c029ce6:	f7fe fd26 	bl	c028736 <mbedtls_pk_init>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
 c029cea:	2002      	movs	r0, #2
 c029cec:	f7fe fd36 	bl	c02875c <mbedtls_pk_info_from_type>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 c029cf0:	4601      	mov	r1, r0
 c029cf2:	4628      	mov	r0, r5
 c029cf4:	f7fe fd3e 	bl	c028774 <mbedtls_pk_setup>
 c029cf8:	b160      	cbz	r0, c029d14 <mbedtls_pk_parse_key+0x200>
    mbedtls_pk_free( pk );
 c029cfa:	4628      	mov	r0, r5
 c029cfc:	f7fe fd1f 	bl	c02873e <mbedtls_pk_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 c029d00:	4c13      	ldr	r4, [pc, #76]	; (c029d50 <mbedtls_pk_parse_key+0x23c>)
 c029d02:	e764      	b.n	c029bce <mbedtls_pk_parse_key+0xba>
        pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) == 0 )
 c029d04:	463a      	mov	r2, r7
 c029d06:	4631      	mov	r1, r6
 c029d08:	6868      	ldr	r0, [r5, #4]
 c029d0a:	f7ff fbab 	bl	c029464 <pk_parse_key_pkcs1_der>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 c029d0e:	2800      	cmp	r0, #0
 c029d10:	d1e5      	bne.n	c029cde <mbedtls_pk_parse_key+0x1ca>
 c029d12:	e7c4      	b.n	c029c9e <mbedtls_pk_parse_key+0x18a>
        pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
 c029d14:	463a      	mov	r2, r7
 c029d16:	4631      	mov	r1, r6
 c029d18:	6868      	ldr	r0, [r5, #4]
 c029d1a:	f7ff fc99 	bl	c029650 <pk_parse_key_sec1_der>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 c029d1e:	2800      	cmp	r0, #0
 c029d20:	d0bd      	beq.n	c029c9e <mbedtls_pk_parse_key+0x18a>
 c029d22:	e7ea      	b.n	c029cfa <mbedtls_pk_parse_key+0x1e6>
 c029d24:	0c03673f 	.word	0x0c03673f
 c029d28:	0c03675c 	.word	0x0c03675c
 c029d2c:	0c036701 	.word	0x0c036701
 c029d30:	0c03671f 	.word	0x0c03671f
 c029d34:	ffffc480 	.word	0xffffc480
 c029d38:	ffffc400 	.word	0xffffc400
 c029d3c:	0c03677b 	.word	0x0c03677b
 c029d40:	0c036795 	.word	0x0c036795
 c029d44:	0c0367b1 	.word	0x0c0367b1
 c029d48:	0c0367d5 	.word	0x0c0367d5
 c029d4c:	ffffc080 	.word	0xffffc080
 c029d50:	ffffc300 	.word	0xffffc300

0c029d54 <mbedtls_pk_parse_public_key>:
/*
 * Parse a public key
 */
int mbedtls_pk_parse_public_key( mbedtls_pk_context *ctx,
                         const unsigned char *key, size_t keylen )
{
 c029d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c029d58:	4605      	mov	r5, r0
 c029d5a:	b08a      	sub	sp, #40	; 0x28
 c029d5c:	460e      	mov	r6, r1
    size_t len;
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( ctx != NULL );
    if( keylen == 0 )
 c029d5e:	4617      	mov	r7, r2
 c029d60:	2a00      	cmp	r2, #0
 c029d62:	d07f      	beq.n	c029e64 <mbedtls_pk_parse_public_key+0x110>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
    PK_VALIDATE_RET( key != NULL || keylen == 0 );

#if defined(MBEDTLS_PEM_PARSE_C)
    mbedtls_pem_init( &pem );
 c029d64:	a807      	add	r0, sp, #28
#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
 c029d66:	f107 38ff 	add.w	r8, r7, #4294967295
    mbedtls_pem_init( &pem );
 c029d6a:	f7fe fc43 	bl	c0285f4 <mbedtls_pem_init>
    if( key[keylen - 1] != '\0' )
 c029d6e:	f816 3008 	ldrb.w	r3, [r6, r8]
 c029d72:	2b00      	cmp	r3, #0
 c029d74:	d130      	bne.n	c029dd8 <mbedtls_pk_parse_public_key+0x84>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
 c029d76:	aa06      	add	r2, sp, #24
 c029d78:	e9cd 3201 	strd	r3, r2, [sp, #4]
 c029d7c:	9300      	str	r3, [sp, #0]
 c029d7e:	4a3a      	ldr	r2, [pc, #232]	; (c029e68 <mbedtls_pk_parse_public_key+0x114>)
 c029d80:	4633      	mov	r3, r6
 c029d82:	493a      	ldr	r1, [pc, #232]	; (c029e6c <mbedtls_pk_parse_public_key+0x118>)
 c029d84:	a807      	add	r0, sp, #28
 c029d86:	f7fe fc3b 	bl	c028600 <mbedtls_pem_read_buffer>
                               "-----BEGIN RSA PUBLIC KEY-----",
                               "-----END RSA PUBLIC KEY-----",
                               key, NULL, 0, &len );

    if( ret == 0 )
 c029d8a:	4604      	mov	r4, r0
 c029d8c:	bb08      	cbnz	r0, c029dd2 <mbedtls_pk_parse_public_key+0x7e>
    {
        p = pem.buf;
 c029d8e:	9b07      	ldr	r3, [sp, #28]
        if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
 c029d90:	2001      	movs	r0, #1
        p = pem.buf;
 c029d92:	9305      	str	r3, [sp, #20]
        if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
 c029d94:	f7fe fce2 	bl	c02875c <mbedtls_pk_info_from_type>
 c029d98:	4601      	mov	r1, r0
 c029d9a:	b920      	cbnz	r0, c029da6 <mbedtls_pk_parse_public_key+0x52>
            return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 c029d9c:	4c34      	ldr	r4, [pc, #208]	; (c029e70 <mbedtls_pk_parse_public_key+0x11c>)
    p = (unsigned char *) key;

    ret = mbedtls_pk_parse_subpubkey( &p, p + keylen, ctx );

    return( ret );
}
 c029d9e:	4620      	mov	r0, r4
 c029da0:	b00a      	add	sp, #40	; 0x28
 c029da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( ret = mbedtls_pk_setup( ctx, pk_info ) ) != 0 )
 c029da6:	4628      	mov	r0, r5
 c029da8:	f7fe fce4 	bl	c028774 <mbedtls_pk_setup>
 c029dac:	4604      	mov	r4, r0
 c029dae:	2800      	cmp	r0, #0
 c029db0:	d1f5      	bne.n	c029d9e <mbedtls_pk_parse_public_key+0x4a>
        if ( ( ret = pk_get_rsapubkey( &p, p + pem.buflen, mbedtls_pk_rsa( *ctx ) ) ) != 0 )
 c029db2:	9905      	ldr	r1, [sp, #20]
 c029db4:	9b08      	ldr	r3, [sp, #32]
 c029db6:	686a      	ldr	r2, [r5, #4]
 c029db8:	4419      	add	r1, r3
 c029dba:	a805      	add	r0, sp, #20
 c029dbc:	f7ff f982 	bl	c0290c4 <pk_get_rsapubkey>
 c029dc0:	4604      	mov	r4, r0
 c029dc2:	b110      	cbz	r0, c029dca <mbedtls_pk_parse_public_key+0x76>
            mbedtls_pk_free( ctx );
 c029dc4:	4628      	mov	r0, r5
 c029dc6:	f7fe fcba 	bl	c02873e <mbedtls_pk_free>
        mbedtls_pem_free( &pem );
 c029dca:	a807      	add	r0, sp, #28
 c029dcc:	f7fe fca0 	bl	c028710 <mbedtls_pem_free>
        return( ret );
 c029dd0:	e7e5      	b.n	c029d9e <mbedtls_pk_parse_public_key+0x4a>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 c029dd2:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 c029dd6:	d1f8      	bne.n	c029dca <mbedtls_pk_parse_public_key+0x76>
    if( key[keylen - 1] != '\0' )
 c029dd8:	f816 3008 	ldrb.w	r3, [r6, r8]
 c029ddc:	b9c3      	cbnz	r3, c029e10 <mbedtls_pk_parse_public_key+0xbc>
        ret = mbedtls_pem_read_buffer( &pem,
 c029dde:	aa06      	add	r2, sp, #24
 c029de0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 c029de4:	9300      	str	r3, [sp, #0]
 c029de6:	4a23      	ldr	r2, [pc, #140]	; (c029e74 <mbedtls_pk_parse_public_key+0x120>)
 c029de8:	4633      	mov	r3, r6
 c029dea:	4923      	ldr	r1, [pc, #140]	; (c029e78 <mbedtls_pk_parse_public_key+0x124>)
 c029dec:	a807      	add	r0, sp, #28
 c029dee:	f7fe fc07 	bl	c028600 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 c029df2:	4604      	mov	r4, r0
 c029df4:	b948      	cbnz	r0, c029e0a <mbedtls_pk_parse_public_key+0xb6>
        p = pem.buf;
 c029df6:	9b07      	ldr	r3, [sp, #28]
        ret = mbedtls_pk_parse_subpubkey( &p,  p + pem.buflen, ctx );
 c029df8:	9908      	ldr	r1, [sp, #32]
 c029dfa:	462a      	mov	r2, r5
 c029dfc:	4419      	add	r1, r3
 c029dfe:	a805      	add	r0, sp, #20
        p = pem.buf;
 c029e00:	9305      	str	r3, [sp, #20]
        ret = mbedtls_pk_parse_subpubkey( &p,  p + pem.buflen, ctx );
 c029e02:	f7ff fe0b 	bl	c029a1c <mbedtls_pk_parse_subpubkey>
 c029e06:	4604      	mov	r4, r0
 c029e08:	e7df      	b.n	c029dca <mbedtls_pk_parse_public_key+0x76>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 c029e0a:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 c029e0e:	d1dc      	bne.n	c029dca <mbedtls_pk_parse_public_key+0x76>
    mbedtls_pem_free( &pem );
 c029e10:	a807      	add	r0, sp, #28
 c029e12:	f7fe fc7d 	bl	c028710 <mbedtls_pem_free>
    if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
 c029e16:	2001      	movs	r0, #1
 c029e18:	f7fe fca0 	bl	c02875c <mbedtls_pk_info_from_type>
 c029e1c:	4601      	mov	r1, r0
 c029e1e:	2800      	cmp	r0, #0
 c029e20:	d0bc      	beq.n	c029d9c <mbedtls_pk_parse_public_key+0x48>
    if( ( ret = mbedtls_pk_setup( ctx, pk_info ) ) != 0 )
 c029e22:	4628      	mov	r0, r5
 c029e24:	f7fe fca6 	bl	c028774 <mbedtls_pk_setup>
 c029e28:	4604      	mov	r4, r0
 c029e2a:	2800      	cmp	r0, #0
 c029e2c:	d1b7      	bne.n	c029d9e <mbedtls_pk_parse_public_key+0x4a>
    p = (unsigned char *)key;
 c029e2e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 c029e32:	f848 6d14 	str.w	r6, [r8, #-20]!
    ret = pk_get_rsapubkey( &p, p + keylen, mbedtls_pk_rsa( *ctx ) );
 c029e36:	4437      	add	r7, r6
 c029e38:	686a      	ldr	r2, [r5, #4]
 c029e3a:	4639      	mov	r1, r7
 c029e3c:	4640      	mov	r0, r8
 c029e3e:	f7ff f941 	bl	c0290c4 <pk_get_rsapubkey>
    if( ret == 0 )
 c029e42:	4604      	mov	r4, r0
 c029e44:	2800      	cmp	r0, #0
 c029e46:	d0aa      	beq.n	c029d9e <mbedtls_pk_parse_public_key+0x4a>
    mbedtls_pk_free( ctx );
 c029e48:	4628      	mov	r0, r5
 c029e4a:	f7fe fc78 	bl	c02873e <mbedtls_pk_free>
    if( ret != ( MBEDTLS_ERR_PK_INVALID_PUBKEY + MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
 c029e4e:	4b0b      	ldr	r3, [pc, #44]	; (c029e7c <mbedtls_pk_parse_public_key+0x128>)
 c029e50:	429c      	cmp	r4, r3
 c029e52:	d1a4      	bne.n	c029d9e <mbedtls_pk_parse_public_key+0x4a>
    ret = mbedtls_pk_parse_subpubkey( &p, p + keylen, ctx );
 c029e54:	462a      	mov	r2, r5
 c029e56:	4639      	mov	r1, r7
 c029e58:	4640      	mov	r0, r8
    p = (unsigned char *) key;
 c029e5a:	9605      	str	r6, [sp, #20]
    ret = mbedtls_pk_parse_subpubkey( &p, p + keylen, ctx );
 c029e5c:	f7ff fdde 	bl	c029a1c <mbedtls_pk_parse_subpubkey>
 c029e60:	4604      	mov	r4, r0
    return( ret );
 c029e62:	e79c      	b.n	c029d9e <mbedtls_pk_parse_public_key+0x4a>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 c029e64:	4c06      	ldr	r4, [pc, #24]	; (c029e80 <mbedtls_pk_parse_public_key+0x12c>)
 c029e66:	e79a      	b.n	c029d9e <mbedtls_pk_parse_public_key+0x4a>
 c029e68:	0c0367fb 	.word	0x0c0367fb
 c029e6c:	0c036818 	.word	0x0c036818
 c029e70:	ffffc380 	.word	0xffffc380
 c029e74:	0c036837 	.word	0x0c036837
 c029e78:	0c036850 	.word	0x0c036850
 c029e7c:	ffffc49e 	.word	0xffffc49e
 c029e80:	ffffc300 	.word	0xffffc300

0c029e84 <pk_write_ec_pubkey>:
/*
 * EC public key is an EC point
 */
static int pk_write_ec_pubkey( unsigned char **p, unsigned char *start,
                               mbedtls_ecp_keypair *ec )
{
 c029e84:	b570      	push	{r4, r5, r6, lr}
 c029e86:	4606      	mov	r6, r0
 c029e88:	460c      	mov	r4, r1
 c029e8a:	4610      	mov	r0, r2
    int ret;
    size_t len = 0;
    unsigned char buf[MBEDTLS_ECP_MAX_PT_LEN];

    if( ( ret = mbedtls_ecp_point_write_binary( &ec->grp, &ec->Q,
 c029e8c:	2185      	movs	r1, #133	; 0x85
    size_t len = 0;
 c029e8e:	2200      	movs	r2, #0
{
 c029e90:	b0a6      	sub	sp, #152	; 0x98
    size_t len = 0;
 c029e92:	ab26      	add	r3, sp, #152	; 0x98
    if( ( ret = mbedtls_ecp_point_write_binary( &ec->grp, &ec->Q,
 c029e94:	ad04      	add	r5, sp, #16
    size_t len = 0;
 c029e96:	f843 2d8c 	str.w	r2, [r3, #-140]!
    if( ( ret = mbedtls_ecp_point_write_binary( &ec->grp, &ec->Q,
 c029e9a:	9101      	str	r1, [sp, #4]
 c029e9c:	9500      	str	r5, [sp, #0]
 c029e9e:	f100 01ac 	add.w	r1, r0, #172	; 0xac
 c029ea2:	f7f3 fadf 	bl	c01d464 <mbedtls_ecp_point_write_binary>
 c029ea6:	b960      	cbnz	r0, c029ec2 <pk_write_ec_pubkey+0x3e>
                                        &len, buf, sizeof( buf ) ) ) != 0 )
    {
        return( ret );
    }

    if( *p < start || (size_t)( *p - start ) < len )
 c029ea8:	6830      	ldr	r0, [r6, #0]
 c029eaa:	42a0      	cmp	r0, r4
 c029eac:	d30b      	bcc.n	c029ec6 <pk_write_ec_pubkey+0x42>
 c029eae:	9a03      	ldr	r2, [sp, #12]
 c029eb0:	1b04      	subs	r4, r0, r4
 c029eb2:	4294      	cmp	r4, r2
 c029eb4:	d307      	bcc.n	c029ec6 <pk_write_ec_pubkey+0x42>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *p -= len;
 c029eb6:	1a80      	subs	r0, r0, r2
 c029eb8:	6030      	str	r0, [r6, #0]
    memcpy( *p, buf, len );
 c029eba:	4629      	mov	r1, r5
 c029ebc:	f7ed fd5f 	bl	c01797e <memcpy>

    return( (int) len );
 c029ec0:	9803      	ldr	r0, [sp, #12]
}
 c029ec2:	b026      	add	sp, #152	; 0x98
 c029ec4:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 c029ec6:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 c029eca:	e7fa      	b.n	c029ec2 <pk_write_ec_pubkey+0x3e>

0c029ecc <pk_write_ec_param.isra.2>:
/*
 * ECParameters ::= CHOICE {
 *   namedCurve         OBJECT IDENTIFIER
 * }
 */
static int pk_write_ec_param( unsigned char **p, unsigned char *start,
 c029ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c029ece:	4604      	mov	r4, r0
 c029ed0:	460d      	mov	r5, r1
 c029ed2:	4610      	mov	r0, r2
    int ret;
    size_t len = 0;
    const char *oid;
    size_t oid_len;

    if( ( ret = mbedtls_oid_get_oid_by_ec_grp( ec->grp.id, &oid, &oid_len ) ) != 0 )
 c029ed4:	4669      	mov	r1, sp
 c029ed6:	aa01      	add	r2, sp, #4
 c029ed8:	f7fe fb14 	bl	c028504 <mbedtls_oid_get_oid_by_ec_grp>
 c029edc:	b928      	cbnz	r0, c029eea <pk_write_ec_param.isra.2+0x1e>
        return( ret );

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_oid( p, start, oid, oid_len ) );
 c029ede:	e9dd 2300 	ldrd	r2, r3, [sp]
 c029ee2:	4629      	mov	r1, r5
 c029ee4:	4620      	mov	r0, r4
 c029ee6:	f7fa fa7d 	bl	c0243e4 <mbedtls_asn1_write_oid>

    return( (int) len );
}
 c029eea:	b003      	add	sp, #12
 c029eec:	bd30      	pop	{r4, r5, pc}
	...

0c029ef0 <mbedtls_pk_write_pubkey>:
#endif /* MBEDTLS_ECP_C */

int mbedtls_pk_write_pubkey( unsigned char **p, unsigned char *start,
                             const mbedtls_pk_context *key )
{
 c029ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c029ef4:	4680      	mov	r8, r0
 c029ef6:	b086      	sub	sp, #24
    PK_VALIDATE_RET( *p != NULL );
    PK_VALIDATE_RET( start != NULL );
    PK_VALIDATE_RET( key != NULL );

#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_RSA )
 c029ef8:	4610      	mov	r0, r2
{
 c029efa:	4689      	mov	r9, r1
 c029efc:	4614      	mov	r4, r2
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_RSA )
 c029efe:	f7fe fc4f 	bl	c0287a0 <mbedtls_pk_get_type>
 c029f02:	2801      	cmp	r0, #1
 c029f04:	d145      	bne.n	c029f92 <mbedtls_pk_write_pubkey+0xa2>
    if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL, NULL, NULL, &T ) ) != 0 ||
 c029f06:	2500      	movs	r5, #0
        MBEDTLS_ASN1_CHK_ADD( len, pk_write_rsa_pubkey( p, start, mbedtls_pk_rsa( *key ) ) );
 c029f08:	f8d4 a004 	ldr.w	sl, [r4, #4]
    mbedtls_mpi_init( &T );
 c029f0c:	af03      	add	r7, sp, #12
 c029f0e:	4638      	mov	r0, r7
 c029f10:	f7fa fe32 	bl	c024b78 <mbedtls_mpi_init>
    if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL, NULL, NULL, &T ) ) != 0 ||
 c029f14:	9701      	str	r7, [sp, #4]
 c029f16:	9500      	str	r5, [sp, #0]
 c029f18:	462b      	mov	r3, r5
 c029f1a:	462a      	mov	r2, r5
 c029f1c:	4629      	mov	r1, r5
 c029f1e:	4650      	mov	r0, sl
 c029f20:	f7f5 fb02 	bl	c01f528 <mbedtls_rsa_export>
 c029f24:	4604      	mov	r4, r0
 c029f26:	bb90      	cbnz	r0, c029f8e <mbedtls_pk_write_pubkey+0x9e>
 c029f28:	463a      	mov	r2, r7
 c029f2a:	4649      	mov	r1, r9
 c029f2c:	4640      	mov	r0, r8
 c029f2e:	f7fa fa19 	bl	c024364 <mbedtls_asn1_write_mpi>
 c029f32:	1e04      	subs	r4, r0, #0
 c029f34:	db2b      	blt.n	c029f8e <mbedtls_pk_write_pubkey+0x9e>
    if ( ( ret = mbedtls_rsa_export( rsa, &T, NULL, NULL, NULL, NULL ) ) != 0 ||
 c029f36:	e9cd 5500 	strd	r5, r5, [sp]
 c029f3a:	462b      	mov	r3, r5
 c029f3c:	462a      	mov	r2, r5
 c029f3e:	4639      	mov	r1, r7
 c029f40:	4650      	mov	r0, sl
 c029f42:	f7f5 faf1 	bl	c01f528 <mbedtls_rsa_export>
    len += ret;
 c029f46:	4626      	mov	r6, r4
    if ( ( ret = mbedtls_rsa_export( rsa, &T, NULL, NULL, NULL, NULL ) ) != 0 ||
 c029f48:	4604      	mov	r4, r0
 c029f4a:	b938      	cbnz	r0, c029f5c <mbedtls_pk_write_pubkey+0x6c>
 c029f4c:	463a      	mov	r2, r7
 c029f4e:	4649      	mov	r1, r9
 c029f50:	4640      	mov	r0, r8
 c029f52:	f7fa fa07 	bl	c024364 <mbedtls_asn1_write_mpi>
 c029f56:	1e04      	subs	r4, r0, #0
 c029f58:	db00      	blt.n	c029f5c <mbedtls_pk_write_pubkey+0x6c>
    len += ret;
 c029f5a:	4426      	add	r6, r4
    mbedtls_mpi_free( &T );
 c029f5c:	4638      	mov	r0, r7
 c029f5e:	f7fa fe11 	bl	c024b84 <mbedtls_mpi_free>
    if( ret < 0 )
 c029f62:	2c00      	cmp	r4, #0
 c029f64:	db0f      	blt.n	c029f86 <mbedtls_pk_write_pubkey+0x96>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 c029f66:	4632      	mov	r2, r6
 c029f68:	4649      	mov	r1, r9
 c029f6a:	4640      	mov	r0, r8
 c029f6c:	f7fa f963 	bl	c024236 <mbedtls_asn1_write_len>
 c029f70:	1e05      	subs	r5, r0, #0
 c029f72:	db1c      	blt.n	c029fae <mbedtls_pk_write_pubkey+0xbe>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_CONSTRUCTED |
 c029f74:	2230      	movs	r2, #48	; 0x30
 c029f76:	4649      	mov	r1, r9
 c029f78:	4640      	mov	r0, r8
 c029f7a:	f7fa f9d0 	bl	c02431e <mbedtls_asn1_write_tag>
 c029f7e:	1e04      	subs	r4, r0, #0
 c029f80:	db01      	blt.n	c029f86 <mbedtls_pk_write_pubkey+0x96>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 c029f82:	442e      	add	r6, r5
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_CONSTRUCTED |
 c029f84:	4434      	add	r4, r6
    else
#endif /* MBEDTLS_USE_PSA_CRYPTO */
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );

    return( (int) len );
}
 c029f86:	4620      	mov	r0, r4
 c029f88:	b006      	add	sp, #24
 c029f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t len = 0;
 c029f8e:	462e      	mov	r6, r5
 c029f90:	e7e4      	b.n	c029f5c <mbedtls_pk_write_pubkey+0x6c>
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
 c029f92:	4620      	mov	r0, r4
 c029f94:	f7fe fc04 	bl	c0287a0 <mbedtls_pk_get_type>
 c029f98:	2802      	cmp	r0, #2
 c029f9a:	d106      	bne.n	c029faa <mbedtls_pk_write_pubkey+0xba>
        MBEDTLS_ASN1_CHK_ADD( len, pk_write_ec_pubkey( p, start, mbedtls_pk_ec( *key ) ) );
 c029f9c:	6862      	ldr	r2, [r4, #4]
 c029f9e:	4649      	mov	r1, r9
 c029fa0:	4640      	mov	r0, r8
 c029fa2:	f7ff ff6f 	bl	c029e84 <pk_write_ec_pubkey>
 c029fa6:	4604      	mov	r4, r0
 c029fa8:	e7ed      	b.n	c029f86 <mbedtls_pk_write_pubkey+0x96>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 c029faa:	4c02      	ldr	r4, [pc, #8]	; (c029fb4 <mbedtls_pk_write_pubkey+0xc4>)
 c029fac:	e7eb      	b.n	c029f86 <mbedtls_pk_write_pubkey+0x96>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 c029fae:	462c      	mov	r4, r5
 c029fb0:	e7e9      	b.n	c029f86 <mbedtls_pk_write_pubkey+0x96>
 c029fb2:	bf00      	nop
 c029fb4:	ffffc680 	.word	0xffffc680

0c029fb8 <mbedtls_pk_write_key_der>:

    return( (int) len );
}

int mbedtls_pk_write_key_der( mbedtls_pk_context *key, unsigned char *buf, size_t size )
{
 c029fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c029fbc:	4604      	mov	r4, r0
 c029fbe:	b087      	sub	sp, #28
 c029fc0:	460e      	mov	r6, r1
    int ret;
    unsigned char *c;
    size_t len = 0;

    PK_VALIDATE_RET( key != NULL );
    if( size == 0 )
 c029fc2:	b92a      	cbnz	r2, c029fd0 <mbedtls_pk_write_key_der+0x18>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 c029fc4:	f06f 046b 	mvn.w	r4, #107	; 0x6b
    else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );

    return( (int) len );
}
 c029fc8:	4620      	mov	r0, r4
 c029fca:	b007      	add	sp, #28
 c029fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c = buf + size;
 c029fd0:	440a      	add	r2, r1
 c029fd2:	9202      	str	r2, [sp, #8]
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_RSA )
 c029fd4:	f7fe fbe4 	bl	c0287a0 <mbedtls_pk_get_type>
 c029fd8:	2801      	cmp	r0, #1
 c029fda:	f040 80bd 	bne.w	c02a158 <mbedtls_pk_write_key_der+0x1a0>
        mbedtls_mpi_init( &T );
 c029fde:	af03      	add	r7, sp, #12
 c029fe0:	4638      	mov	r0, r7
        mbedtls_rsa_context *rsa = mbedtls_pk_rsa( *key );
 c029fe2:	f8d4 9004 	ldr.w	r9, [r4, #4]
        mbedtls_mpi_init( &T );
 c029fe6:	f7fa fdc7 	bl	c024b78 <mbedtls_mpi_init>
        if( ( ret = mbedtls_rsa_export_crt( rsa, NULL, NULL, &T ) ) != 0 ||
 c029fea:	2200      	movs	r2, #0
 c029fec:	463b      	mov	r3, r7
 c029fee:	4611      	mov	r1, r2
 c029ff0:	4648      	mov	r0, r9
 c029ff2:	f7f5 fb03 	bl	c01f5fc <mbedtls_rsa_export_crt>
 c029ff6:	4604      	mov	r4, r0
 c029ff8:	2800      	cmp	r0, #0
 c029ffa:	f040 80ab 	bne.w	c02a154 <mbedtls_pk_write_key_der+0x19c>
 c029ffe:	463a      	mov	r2, r7
 c02a000:	4631      	mov	r1, r6
 c02a002:	a802      	add	r0, sp, #8
 c02a004:	f7fa f9ae 	bl	c024364 <mbedtls_asn1_write_mpi>
 c02a008:	1e04      	subs	r4, r0, #0
 c02a00a:	f2c0 80a3 	blt.w	c02a154 <mbedtls_pk_write_key_der+0x19c>
        if( ( ret = mbedtls_rsa_export_crt( rsa, NULL, &T, NULL ) ) != 0 ||
 c02a00e:	2300      	movs	r3, #0
 c02a010:	463a      	mov	r2, r7
 c02a012:	4619      	mov	r1, r3
 c02a014:	4648      	mov	r0, r9
 c02a016:	f7f5 faf1 	bl	c01f5fc <mbedtls_rsa_export_crt>
        len += ret;
 c02a01a:	4625      	mov	r5, r4
        if( ( ret = mbedtls_rsa_export_crt( rsa, NULL, &T, NULL ) ) != 0 ||
 c02a01c:	4604      	mov	r4, r0
 c02a01e:	2800      	cmp	r0, #0
 c02a020:	d176      	bne.n	c02a110 <mbedtls_pk_write_key_der+0x158>
 c02a022:	463a      	mov	r2, r7
 c02a024:	4631      	mov	r1, r6
 c02a026:	a802      	add	r0, sp, #8
 c02a028:	f7fa f99c 	bl	c024364 <mbedtls_asn1_write_mpi>
 c02a02c:	1e04      	subs	r4, r0, #0
 c02a02e:	db6f      	blt.n	c02a110 <mbedtls_pk_write_key_der+0x158>
        if( ( ret = mbedtls_rsa_export_crt( rsa, &T, NULL, NULL ) ) != 0 ||
 c02a030:	2300      	movs	r3, #0
 c02a032:	4639      	mov	r1, r7
 c02a034:	461a      	mov	r2, r3
 c02a036:	4648      	mov	r0, r9
 c02a038:	f7f5 fae0 	bl	c01f5fc <mbedtls_rsa_export_crt>
        len += ret;
 c02a03c:	4425      	add	r5, r4
        if( ( ret = mbedtls_rsa_export_crt( rsa, &T, NULL, NULL ) ) != 0 ||
 c02a03e:	4604      	mov	r4, r0
 c02a040:	2800      	cmp	r0, #0
 c02a042:	d165      	bne.n	c02a110 <mbedtls_pk_write_key_der+0x158>
 c02a044:	463a      	mov	r2, r7
 c02a046:	4631      	mov	r1, r6
 c02a048:	a802      	add	r0, sp, #8
 c02a04a:	f7fa f98b 	bl	c024364 <mbedtls_asn1_write_mpi>
 c02a04e:	1e04      	subs	r4, r0, #0
 c02a050:	db5e      	blt.n	c02a110 <mbedtls_pk_write_key_der+0x158>
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 c02a052:	2200      	movs	r2, #0
 c02a054:	463b      	mov	r3, r7
 c02a056:	e9cd 2200 	strd	r2, r2, [sp]
 c02a05a:	4611      	mov	r1, r2
 c02a05c:	4648      	mov	r0, r9
 c02a05e:	f7f5 fa63 	bl	c01f528 <mbedtls_rsa_export>
        len += ret;
 c02a062:	4425      	add	r5, r4
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 c02a064:	4604      	mov	r4, r0
 c02a066:	2800      	cmp	r0, #0
 c02a068:	d152      	bne.n	c02a110 <mbedtls_pk_write_key_der+0x158>
                                         &T, NULL, NULL ) ) != 0 ||
 c02a06a:	463a      	mov	r2, r7
 c02a06c:	4631      	mov	r1, r6
 c02a06e:	a802      	add	r0, sp, #8
 c02a070:	f7fa f978 	bl	c024364 <mbedtls_asn1_write_mpi>
 c02a074:	1e04      	subs	r4, r0, #0
 c02a076:	db4b      	blt.n	c02a110 <mbedtls_pk_write_key_der+0x158>
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, &T,
 c02a078:	f04f 0800 	mov.w	r8, #0
 c02a07c:	463a      	mov	r2, r7
 c02a07e:	e9cd 8800 	strd	r8, r8, [sp]
 c02a082:	4643      	mov	r3, r8
 c02a084:	4641      	mov	r1, r8
 c02a086:	4648      	mov	r0, r9
 c02a088:	f7f5 fa4e 	bl	c01f528 <mbedtls_rsa_export>
        len += ret;
 c02a08c:	4425      	add	r5, r4
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, &T,
 c02a08e:	4604      	mov	r4, r0
 c02a090:	2800      	cmp	r0, #0
 c02a092:	d13d      	bne.n	c02a110 <mbedtls_pk_write_key_der+0x158>
                                         NULL, NULL, NULL ) ) != 0 ||
 c02a094:	463a      	mov	r2, r7
 c02a096:	4631      	mov	r1, r6
 c02a098:	a802      	add	r0, sp, #8
 c02a09a:	f7fa f963 	bl	c024364 <mbedtls_asn1_write_mpi>
 c02a09e:	1e04      	subs	r4, r0, #0
 c02a0a0:	db36      	blt.n	c02a110 <mbedtls_pk_write_key_der+0x158>
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 c02a0a2:	e9cd 7800 	strd	r7, r8, [sp]
 c02a0a6:	4643      	mov	r3, r8
 c02a0a8:	4642      	mov	r2, r8
 c02a0aa:	4641      	mov	r1, r8
 c02a0ac:	4648      	mov	r0, r9
 c02a0ae:	f7f5 fa3b 	bl	c01f528 <mbedtls_rsa_export>
        len += ret;
 c02a0b2:	4425      	add	r5, r4
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 c02a0b4:	4604      	mov	r4, r0
 c02a0b6:	bb58      	cbnz	r0, c02a110 <mbedtls_pk_write_key_der+0x158>
                                         NULL, &T, NULL ) ) != 0 ||
 c02a0b8:	463a      	mov	r2, r7
 c02a0ba:	4631      	mov	r1, r6
 c02a0bc:	a802      	add	r0, sp, #8
 c02a0be:	f7fa f951 	bl	c024364 <mbedtls_asn1_write_mpi>
 c02a0c2:	1e04      	subs	r4, r0, #0
 c02a0c4:	db24      	blt.n	c02a110 <mbedtls_pk_write_key_der+0x158>
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 c02a0c6:	e9cd 8700 	strd	r8, r7, [sp]
 c02a0ca:	4643      	mov	r3, r8
 c02a0cc:	4642      	mov	r2, r8
 c02a0ce:	4641      	mov	r1, r8
 c02a0d0:	4648      	mov	r0, r9
 c02a0d2:	f7f5 fa29 	bl	c01f528 <mbedtls_rsa_export>
        len += ret;
 c02a0d6:	4425      	add	r5, r4
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 c02a0d8:	4604      	mov	r4, r0
 c02a0da:	b9c8      	cbnz	r0, c02a110 <mbedtls_pk_write_key_der+0x158>
                                         NULL, NULL, &T ) ) != 0 ||
 c02a0dc:	463a      	mov	r2, r7
 c02a0de:	4631      	mov	r1, r6
 c02a0e0:	a802      	add	r0, sp, #8
 c02a0e2:	f7fa f93f 	bl	c024364 <mbedtls_asn1_write_mpi>
 c02a0e6:	1e04      	subs	r4, r0, #0
 c02a0e8:	db12      	blt.n	c02a110 <mbedtls_pk_write_key_der+0x158>
        if ( ( ret = mbedtls_rsa_export( rsa, &T, NULL,
 c02a0ea:	e9cd 8800 	strd	r8, r8, [sp]
 c02a0ee:	4643      	mov	r3, r8
 c02a0f0:	4642      	mov	r2, r8
 c02a0f2:	4639      	mov	r1, r7
 c02a0f4:	4648      	mov	r0, r9
 c02a0f6:	f7f5 fa17 	bl	c01f528 <mbedtls_rsa_export>
        len += ret;
 c02a0fa:	4425      	add	r5, r4
        if ( ( ret = mbedtls_rsa_export( rsa, &T, NULL,
 c02a0fc:	4604      	mov	r4, r0
 c02a0fe:	b938      	cbnz	r0, c02a110 <mbedtls_pk_write_key_der+0x158>
                                         NULL, NULL, NULL ) ) != 0 ||
 c02a100:	463a      	mov	r2, r7
 c02a102:	4631      	mov	r1, r6
 c02a104:	a802      	add	r0, sp, #8
 c02a106:	f7fa f92d 	bl	c024364 <mbedtls_asn1_write_mpi>
 c02a10a:	1e04      	subs	r4, r0, #0
 c02a10c:	db00      	blt.n	c02a110 <mbedtls_pk_write_key_der+0x158>
        len += ret;
 c02a10e:	4425      	add	r5, r4
        mbedtls_mpi_free( &T );
 c02a110:	4638      	mov	r0, r7
 c02a112:	f7fa fd37 	bl	c024b84 <mbedtls_mpi_free>
        if( ret < 0 )
 c02a116:	2c00      	cmp	r4, #0
 c02a118:	f6ff af56 	blt.w	c029fc8 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 0 ) );
 c02a11c:	2200      	movs	r2, #0
 c02a11e:	4631      	mov	r1, r6
 c02a120:	a802      	add	r0, sp, #8
 c02a122:	f7fa f97a 	bl	c02441a <mbedtls_asn1_write_int>
 c02a126:	1e04      	subs	r4, r0, #0
 c02a128:	f6ff af4e 	blt.w	c029fc8 <mbedtls_pk_write_key_der+0x10>
 c02a12c:	4425      	add	r5, r4
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
 c02a12e:	462a      	mov	r2, r5
 c02a130:	4631      	mov	r1, r6
 c02a132:	a802      	add	r0, sp, #8
 c02a134:	f7fa f87f 	bl	c024236 <mbedtls_asn1_write_len>
 c02a138:	1e04      	subs	r4, r0, #0
 c02a13a:	f6ff af45 	blt.w	c029fc8 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c,
 c02a13e:	2230      	movs	r2, #48	; 0x30
 c02a140:	4631      	mov	r1, r6
 c02a142:	a802      	add	r0, sp, #8
 c02a144:	f7fa f8eb 	bl	c02431e <mbedtls_asn1_write_tag>
 c02a148:	2800      	cmp	r0, #0
 c02a14a:	f2c0 808e 	blt.w	c02a26a <mbedtls_pk_write_key_der+0x2b2>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
 c02a14e:	442c      	add	r4, r5
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c,
 c02a150:	4404      	add	r4, r0
 c02a152:	e739      	b.n	c029fc8 <mbedtls_pk_write_key_der+0x10>
    size_t len = 0;
 c02a154:	2500      	movs	r5, #0
 c02a156:	e7db      	b.n	c02a110 <mbedtls_pk_write_key_der+0x158>
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
 c02a158:	4620      	mov	r0, r4
 c02a15a:	f7fe fb21 	bl	c0287a0 <mbedtls_pk_get_type>
 c02a15e:	2802      	cmp	r0, #2
 c02a160:	d179      	bne.n	c02a256 <mbedtls_pk_write_key_der+0x29e>
        mbedtls_ecp_keypair *ec = mbedtls_pk_ec( *key );
 c02a162:	6867      	ldr	r7, [r4, #4]
        MBEDTLS_ASN1_CHK_ADD( pub_len, pk_write_ec_pubkey( &c, buf, ec ) );
 c02a164:	4631      	mov	r1, r6
 c02a166:	463a      	mov	r2, r7
 c02a168:	a802      	add	r0, sp, #8
 c02a16a:	f7ff fe8b 	bl	c029e84 <pk_write_ec_pubkey>
 c02a16e:	1e04      	subs	r4, r0, #0
 c02a170:	f6ff af2a 	blt.w	c029fc8 <mbedtls_pk_write_key_der+0x10>
        if( c - buf < 1 )
 c02a174:	9b02      	ldr	r3, [sp, #8]
 c02a176:	1b9a      	subs	r2, r3, r6
 c02a178:	2a00      	cmp	r2, #0
 c02a17a:	f77f af23 	ble.w	c029fc4 <mbedtls_pk_write_key_der+0xc>
        *--c = 0;
 c02a17e:	1e5a      	subs	r2, r3, #1
 c02a180:	9202      	str	r2, [sp, #8]
 c02a182:	2200      	movs	r2, #0
        pub_len += 1;
 c02a184:	1c65      	adds	r5, r4, #1
        *--c = 0;
 c02a186:	f803 2c01 	strb.w	r2, [r3, #-1]
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
 c02a18a:	4631      	mov	r1, r6
 c02a18c:	462a      	mov	r2, r5
 c02a18e:	a802      	add	r0, sp, #8
 c02a190:	f7fa f851 	bl	c024236 <mbedtls_asn1_write_len>
 c02a194:	1e04      	subs	r4, r0, #0
 c02a196:	f6ff af17 	blt.w	c029fc8 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_BIT_STRING ) );
 c02a19a:	2203      	movs	r2, #3
 c02a19c:	4631      	mov	r1, r6
 c02a19e:	a802      	add	r0, sp, #8
 c02a1a0:	f7fa f8bd 	bl	c02431e <mbedtls_asn1_write_tag>
 c02a1a4:	2800      	cmp	r0, #0
 c02a1a6:	db60      	blt.n	c02a26a <mbedtls_pk_write_key_der+0x2b2>
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
 c02a1a8:	4425      	add	r5, r4
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_BIT_STRING ) );
 c02a1aa:	4405      	add	r5, r0
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
 c02a1ac:	462a      	mov	r2, r5
 c02a1ae:	4631      	mov	r1, r6
 c02a1b0:	a802      	add	r0, sp, #8
 c02a1b2:	f7fa f840 	bl	c024236 <mbedtls_asn1_write_len>
 c02a1b6:	f1b0 0a00 	subs.w	sl, r0, #0
 c02a1ba:	db4e      	blt.n	c02a25a <mbedtls_pk_write_key_der+0x2a2>
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf,
 c02a1bc:	22a1      	movs	r2, #161	; 0xa1
 c02a1be:	4631      	mov	r1, r6
 c02a1c0:	a802      	add	r0, sp, #8
 c02a1c2:	f7fa f8ac 	bl	c02431e <mbedtls_asn1_write_tag>
 c02a1c6:	f1b0 0900 	subs.w	r9, r0, #0
 c02a1ca:	db48      	blt.n	c02a25e <mbedtls_pk_write_key_der+0x2a6>
        MBEDTLS_ASN1_CHK_ADD( par_len, pk_write_ec_param( &c, buf, ec ) );
 c02a1cc:	783a      	ldrb	r2, [r7, #0]
 c02a1ce:	4631      	mov	r1, r6
 c02a1d0:	a802      	add	r0, sp, #8
 c02a1d2:	f7ff fe7b 	bl	c029ecc <pk_write_ec_param.isra.2>
 c02a1d6:	1e04      	subs	r4, r0, #0
 c02a1d8:	f6ff aef6 	blt.w	c029fc8 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( par_len, mbedtls_asn1_write_len( &c, buf, par_len ) );
 c02a1dc:	4622      	mov	r2, r4
 c02a1de:	4631      	mov	r1, r6
 c02a1e0:	a802      	add	r0, sp, #8
 c02a1e2:	f7fa f828 	bl	c024236 <mbedtls_asn1_write_len>
        MBEDTLS_ASN1_CHK_ADD( par_len, pk_write_ec_param( &c, buf, ec ) );
 c02a1e6:	46a3      	mov	fp, r4
        MBEDTLS_ASN1_CHK_ADD( par_len, mbedtls_asn1_write_len( &c, buf, par_len ) );
 c02a1e8:	1e04      	subs	r4, r0, #0
 c02a1ea:	f6ff aeed 	blt.w	c029fc8 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( par_len, mbedtls_asn1_write_tag( &c, buf,
 c02a1ee:	22a0      	movs	r2, #160	; 0xa0
 c02a1f0:	4631      	mov	r1, r6
 c02a1f2:	a802      	add	r0, sp, #8
 c02a1f4:	f7fa f893 	bl	c02431e <mbedtls_asn1_write_tag>
 c02a1f8:	f1b0 0800 	subs.w	r8, r0, #0
 c02a1fc:	db31      	blt.n	c02a262 <mbedtls_pk_write_key_der+0x2aa>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &ec->d ) );
 c02a1fe:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 c02a202:	4631      	mov	r1, r6
 c02a204:	a802      	add	r0, sp, #8
 c02a206:	f7fa f8ad 	bl	c024364 <mbedtls_asn1_write_mpi>
 c02a20a:	1e07      	subs	r7, r0, #0
 c02a20c:	db2b      	blt.n	c02a266 <mbedtls_pk_write_key_der+0x2ae>
        *c = MBEDTLS_ASN1_OCTET_STRING;
 c02a20e:	2204      	movs	r2, #4
 c02a210:	9b02      	ldr	r3, [sp, #8]
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 1 ) );
 c02a212:	4631      	mov	r1, r6
        *c = MBEDTLS_ASN1_OCTET_STRING;
 c02a214:	701a      	strb	r2, [r3, #0]
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 1 ) );
 c02a216:	a802      	add	r0, sp, #8
 c02a218:	2201      	movs	r2, #1
 c02a21a:	f7fa f8fe 	bl	c02441a <mbedtls_asn1_write_int>
 c02a21e:	2800      	cmp	r0, #0
 c02a220:	db23      	blt.n	c02a26a <mbedtls_pk_write_key_der+0x2b2>
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
 c02a222:	4455      	add	r5, sl
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf,
 c02a224:	444d      	add	r5, r9
        len += par_len;
 c02a226:	445d      	add	r5, fp
 c02a228:	4425      	add	r5, r4
 c02a22a:	4445      	add	r5, r8
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &ec->d ) );
 c02a22c:	443d      	add	r5, r7
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 1 ) );
 c02a22e:	4405      	add	r5, r0
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
 c02a230:	462a      	mov	r2, r5
 c02a232:	4631      	mov	r1, r6
 c02a234:	a802      	add	r0, sp, #8
 c02a236:	f7f9 fffe 	bl	c024236 <mbedtls_asn1_write_len>
 c02a23a:	1e04      	subs	r4, r0, #0
 c02a23c:	f6ff aec4 	blt.w	c029fc8 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONSTRUCTED |
 c02a240:	2230      	movs	r2, #48	; 0x30
 c02a242:	4631      	mov	r1, r6
 c02a244:	a802      	add	r0, sp, #8
 c02a246:	f7fa f86a 	bl	c02431e <mbedtls_asn1_write_tag>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
 c02a24a:	4425      	add	r5, r4
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONSTRUCTED |
 c02a24c:	1e04      	subs	r4, r0, #0
 c02a24e:	f6ff aebb 	blt.w	c029fc8 <mbedtls_pk_write_key_der+0x10>
 c02a252:	442c      	add	r4, r5
    return( (int) len );
 c02a254:	e6b8      	b.n	c029fc8 <mbedtls_pk_write_key_der+0x10>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 c02a256:	4c06      	ldr	r4, [pc, #24]	; (c02a270 <mbedtls_pk_write_key_der+0x2b8>)
 c02a258:	e6b6      	b.n	c029fc8 <mbedtls_pk_write_key_der+0x10>
 c02a25a:	4654      	mov	r4, sl
 c02a25c:	e6b4      	b.n	c029fc8 <mbedtls_pk_write_key_der+0x10>
 c02a25e:	464c      	mov	r4, r9
 c02a260:	e6b2      	b.n	c029fc8 <mbedtls_pk_write_key_der+0x10>
 c02a262:	4644      	mov	r4, r8
 c02a264:	e6b0      	b.n	c029fc8 <mbedtls_pk_write_key_der+0x10>
 c02a266:	463c      	mov	r4, r7
 c02a268:	e6ae      	b.n	c029fc8 <mbedtls_pk_write_key_der+0x10>
 c02a26a:	4604      	mov	r4, r0
 c02a26c:	e6ac      	b.n	c029fc8 <mbedtls_pk_write_key_der+0x10>
 c02a26e:	bf00      	nop
 c02a270:	ffffc680 	.word	0xffffc680

0c02a274 <mbedtls_calloc>:
static void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
static void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
 c02a274:	4b01      	ldr	r3, [pc, #4]	; (c02a27c <mbedtls_calloc+0x8>)
 c02a276:	681b      	ldr	r3, [r3, #0]
 c02a278:	4718      	bx	r3
 c02a27a:	bf00      	nop
 c02a27c:	30035b40 	.word	0x30035b40

0c02a280 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
 c02a280:	4b01      	ldr	r3, [pc, #4]	; (c02a288 <mbedtls_free+0x8>)
 c02a282:	681b      	ldr	r3, [r3, #0]
 c02a284:	4718      	bx	r3
 c02a286:	bf00      	nop
 c02a288:	30035b44 	.word	0x30035b44

0c02a28c <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
 c02a28c:	4b02      	ldr	r3, [pc, #8]	; (c02a298 <mbedtls_platform_set_calloc_free+0xc>)
 c02a28e:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
 c02a290:	4b02      	ldr	r3, [pc, #8]	; (c02a29c <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
 c02a292:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
 c02a294:	6019      	str	r1, [r3, #0]
}
 c02a296:	4770      	bx	lr
 c02a298:	30035b40 	.word	0x30035b40
 c02a29c:	30035b44 	.word	0x30035b44

0c02a2a0 <mbedtls_platform_zeroize>:
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    memset_func( buf, 0, len );
 c02a2a0:	4b02      	ldr	r3, [pc, #8]	; (c02a2ac <mbedtls_platform_zeroize+0xc>)
 c02a2a2:	460a      	mov	r2, r1
 c02a2a4:	681b      	ldr	r3, [r3, #0]
 c02a2a6:	2100      	movs	r1, #0
 c02a2a8:	4718      	bx	r3
 c02a2aa:	bf00      	nop
 c02a2ac:	30035b48 	.word	0x30035b48

0c02a2b0 <mbedtls_to_psa_error>:

static psa_status_t mbedtls_to_psa_error( int ret )
{
    /* If there's both a high-level code and low-level code, dispatch on
     * the high-level code. */
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c02a2b0:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
 c02a2b4:	bfbe      	ittt	lt
 c02a2b6:	4240      	neglt	r0, r0
 c02a2b8:	f400 40ff 	andlt.w	r0, r0, #32640	; 0x7f80
 c02a2bc:	4240      	neglt	r0, r0
 c02a2be:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 c02a2c2:	f000 8166 	beq.w	c02a592 <mbedtls_to_psa_error+0x2e2>
 c02a2c6:	f300 80c4 	bgt.w	c02a452 <mbedtls_to_psa_error+0x1a2>
 c02a2ca:	f510 4f89 	cmn.w	r0, #17536	; 0x4480
 c02a2ce:	d036      	beq.n	c02a33e <mbedtls_to_psa_error+0x8e>
 c02a2d0:	dc65      	bgt.n	c02a39e <mbedtls_to_psa_error+0xee>
 c02a2d2:	f510 4fa2 	cmn.w	r0, #20736	; 0x5100
 c02a2d6:	d044      	beq.n	c02a362 <mbedtls_to_psa_error+0xb2>
 c02a2d8:	dc34      	bgt.n	c02a344 <mbedtls_to_psa_error+0x94>
 c02a2da:	f510 4fc3 	cmn.w	r0, #24960	; 0x6180
 c02a2de:	d02e      	beq.n	c02a33e <mbedtls_to_psa_error+0x8e>
 c02a2e0:	dc18      	bgt.n	c02a314 <mbedtls_to_psa_error+0x64>
 c02a2e2:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
 c02a2e6:	d045      	beq.n	c02a374 <mbedtls_to_psa_error+0xc4>
 c02a2e8:	dc0a      	bgt.n	c02a300 <mbedtls_to_psa_error+0x50>
 c02a2ea:	f510 4fc8 	cmn.w	r0, #25600	; 0x6400
 c02a2ee:	f000 80e1 	beq.w	c02a4b4 <mbedtls_to_psa_error+0x204>
 c02a2f2:	f510 4fc7 	cmn.w	r0, #25472	; 0x6380
 c02a2f6:	f000 815c 	beq.w	c02a5b2 <mbedtls_to_psa_error+0x302>
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
        case MBEDTLS_ERR_ECP_HW_ACCEL_FAILED:
            return( PSA_ERROR_HARDWARE_FAILURE );

        default:
            return( PSA_ERROR_GENERIC_ERROR );
 c02a2fa:	f06f 0083 	mvn.w	r0, #131	; 0x83
    }
}
 c02a2fe:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c02a300:	f510 4fc5 	cmn.w	r0, #25216	; 0x6280
 c02a304:	f000 814f 	beq.w	c02a5a6 <mbedtls_to_psa_error+0x2f6>
 c02a308:	f510 4fc4 	cmn.w	r0, #25088	; 0x6200
 c02a30c:	d1f5      	bne.n	c02a2fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_INVALID_PADDING );
 c02a30e:	f06f 0095 	mvn.w	r0, #149	; 0x95
 c02a312:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c02a314:	f510 4fa5 	cmn.w	r0, #21120	; 0x5280
 c02a318:	f000 80cc 	beq.w	c02a4b4 <mbedtls_to_psa_error+0x204>
 c02a31c:	dc08      	bgt.n	c02a330 <mbedtls_to_psa_error+0x80>
 c02a31e:	f510 4fc2 	cmn.w	r0, #24832	; 0x6100
 c02a322:	d01e      	beq.n	c02a362 <mbedtls_to_psa_error+0xb2>
 c02a324:	f510 4fc1 	cmn.w	r0, #24704	; 0x6080
 c02a328:	d1e7      	bne.n	c02a2fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_NOT_SUPPORTED );
 c02a32a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c02a32e:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c02a330:	f510 4fa4 	cmn.w	r0, #20992	; 0x5200
 c02a334:	f000 813a 	beq.w	c02a5ac <mbedtls_to_psa_error+0x2fc>
 c02a338:	f510 4fa3 	cmn.w	r0, #20864	; 0x5180
 c02a33c:	d1dd      	bne.n	c02a2fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c02a33e:	f06f 008c 	mvn.w	r0, #140	; 0x8c
 c02a342:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c02a344:	f510 4f9b 	cmn.w	r0, #19840	; 0x4d80
 c02a348:	d0f9      	beq.n	c02a33e <mbedtls_to_psa_error+0x8e>
 c02a34a:	dc16      	bgt.n	c02a37a <mbedtls_to_psa_error+0xca>
 c02a34c:	f510 4f9e 	cmn.w	r0, #20224	; 0x4f00
 c02a350:	f000 811f 	beq.w	c02a592 <mbedtls_to_psa_error+0x2e2>
 c02a354:	dc08      	bgt.n	c02a368 <mbedtls_to_psa_error+0xb8>
 c02a356:	f510 4fa1 	cmn.w	r0, #20608	; 0x5080
 c02a35a:	d0e6      	beq.n	c02a32a <mbedtls_to_psa_error+0x7a>
 c02a35c:	f510 4f9f 	cmn.w	r0, #20352	; 0x4f80
 c02a360:	d1cb      	bne.n	c02a2fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_INVALID_ARGUMENT );
 c02a362:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c02a366:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c02a368:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
 c02a36c:	d0dd      	beq.n	c02a32a <mbedtls_to_psa_error+0x7a>
 c02a36e:	f510 4f9c 	cmn.w	r0, #19968	; 0x4e00
 c02a372:	d1c2      	bne.n	c02a2fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_INVALID_SIGNATURE );
 c02a374:	f06f 0094 	mvn.w	r0, #148	; 0x94
 c02a378:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c02a37a:	f510 4f97 	cmn.w	r0, #19328	; 0x4b80
 c02a37e:	f000 8099 	beq.w	c02a4b4 <mbedtls_to_psa_error+0x204>
 c02a382:	dc05      	bgt.n	c02a390 <mbedtls_to_psa_error+0xe0>
 c02a384:	f510 4f99 	cmn.w	r0, #19584	; 0x4c80
 c02a388:	d0eb      	beq.n	c02a362 <mbedtls_to_psa_error+0xb2>
 c02a38a:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
 c02a38e:	e7f0      	b.n	c02a372 <mbedtls_to_psa_error+0xc2>
 c02a390:	f510 4f8b 	cmn.w	r0, #17792	; 0x4580
 c02a394:	f000 808e 	beq.w	c02a4b4 <mbedtls_to_psa_error+0x204>
 c02a398:	f510 4f8a 	cmn.w	r0, #17664	; 0x4500
 c02a39c:	e7c4      	b.n	c02a328 <mbedtls_to_psa_error+0x78>
 c02a39e:	f510 5f78 	cmn.w	r0, #15872	; 0x3e00
 c02a3a2:	f000 8103 	beq.w	c02a5ac <mbedtls_to_psa_error+0x2fc>
 c02a3a6:	dc27      	bgt.n	c02a3f8 <mbedtls_to_psa_error+0x148>
 c02a3a8:	f510 4f83 	cmn.w	r0, #16768	; 0x4180
 c02a3ac:	f000 8082 	beq.w	c02a4b4 <mbedtls_to_psa_error+0x204>
 c02a3b0:	dc12      	bgt.n	c02a3d8 <mbedtls_to_psa_error+0x128>
 c02a3b2:	f510 4f86 	cmn.w	r0, #17152	; 0x4300
 c02a3b6:	f000 80fc 	beq.w	c02a5b2 <mbedtls_to_psa_error+0x302>
 c02a3ba:	dc06      	bgt.n	c02a3ca <mbedtls_to_psa_error+0x11a>
 c02a3bc:	f510 4f88 	cmn.w	r0, #17408	; 0x4400
 c02a3c0:	f000 80e7 	beq.w	c02a592 <mbedtls_to_psa_error+0x2e2>
 c02a3c4:	f510 4f87 	cmn.w	r0, #17280	; 0x4380
 c02a3c8:	e7d3      	b.n	c02a372 <mbedtls_to_psa_error+0xc2>
 c02a3ca:	f510 4f85 	cmn.w	r0, #17024	; 0x4280
 c02a3ce:	f000 80f0 	beq.w	c02a5b2 <mbedtls_to_psa_error+0x302>
 c02a3d2:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 c02a3d6:	e7c3      	b.n	c02a360 <mbedtls_to_psa_error+0xb0>
 c02a3d8:	f510 5f7e 	cmn.w	r0, #16256	; 0x3f80
 c02a3dc:	d0af      	beq.n	c02a33e <mbedtls_to_psa_error+0x8e>
 c02a3de:	dc05      	bgt.n	c02a3ec <mbedtls_to_psa_error+0x13c>
 c02a3e0:	f510 4f82 	cmn.w	r0, #16640	; 0x4100
 c02a3e4:	d093      	beq.n	c02a30e <mbedtls_to_psa_error+0x5e>
 c02a3e6:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 c02a3ea:	e7b9      	b.n	c02a360 <mbedtls_to_psa_error+0xb0>
 c02a3ec:	f510 5f7c 	cmn.w	r0, #16128	; 0x3f00
 c02a3f0:	d0b7      	beq.n	c02a362 <mbedtls_to_psa_error+0xb2>
 c02a3f2:	f510 5f7a 	cmn.w	r0, #16000	; 0x3e80
 c02a3f6:	e7b3      	b.n	c02a360 <mbedtls_to_psa_error+0xb0>
 c02a3f8:	f510 5f6c 	cmn.w	r0, #15104	; 0x3b00
 c02a3fc:	d0b1      	beq.n	c02a362 <mbedtls_to_psa_error+0xb2>
 c02a3fe:	dc13      	bgt.n	c02a428 <mbedtls_to_psa_error+0x178>
 c02a400:	f510 5f72 	cmn.w	r0, #15488	; 0x3c80
 c02a404:	d091      	beq.n	c02a32a <mbedtls_to_psa_error+0x7a>
 c02a406:	dc05      	bgt.n	c02a414 <mbedtls_to_psa_error+0x164>
 c02a408:	f510 5f76 	cmn.w	r0, #15744	; 0x3d80
 c02a40c:	d0a9      	beq.n	c02a362 <mbedtls_to_psa_error+0xb2>
 c02a40e:	f510 5f74 	cmn.w	r0, #15616	; 0x3d00
 c02a412:	e7a5      	b.n	c02a360 <mbedtls_to_psa_error+0xb0>
 c02a414:	f510 5f70 	cmn.w	r0, #15360	; 0x3c00
 c02a418:	d003      	beq.n	c02a422 <mbedtls_to_psa_error+0x172>
 c02a41a:	f510 5f6e 	cmn.w	r0, #15232	; 0x3b80
 c02a41e:	f47f af6c 	bne.w	c02a2fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_NOT_PERMITTED );
 c02a422:	f06f 0084 	mvn.w	r0, #132	; 0x84
 c02a426:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c02a428:	f510 5f66 	cmn.w	r0, #14720	; 0x3980
 c02a42c:	f43f af7d 	beq.w	c02a32a <mbedtls_to_psa_error+0x7a>
 c02a430:	dc06      	bgt.n	c02a440 <mbedtls_to_psa_error+0x190>
 c02a432:	f510 5f6a 	cmn.w	r0, #14976	; 0x3a80
 c02a436:	f43f af78 	beq.w	c02a32a <mbedtls_to_psa_error+0x7a>
 c02a43a:	f510 5f68 	cmn.w	r0, #14848	; 0x3a00
 c02a43e:	e773      	b.n	c02a328 <mbedtls_to_psa_error+0x78>
 c02a440:	f510 5f62 	cmn.w	r0, #14464	; 0x3880
 c02a444:	d036      	beq.n	c02a4b4 <mbedtls_to_psa_error+0x204>
 c02a446:	f110 0f7a 	cmn.w	r0, #122	; 0x7a
 c02a44a:	d033      	beq.n	c02a4b4 <mbedtls_to_psa_error+0x204>
 c02a44c:	f510 5f64 	cmn.w	r0, #14592	; 0x3900
 c02a450:	e78f      	b.n	c02a372 <mbedtls_to_psa_error+0xc2>
 c02a452:	f110 0f27 	cmn.w	r0, #39	; 0x27
 c02a456:	d02d      	beq.n	c02a4b4 <mbedtls_to_psa_error+0x204>
 c02a458:	dc52      	bgt.n	c02a500 <mbedtls_to_psa_error+0x250>
 c02a45a:	f110 0f38 	cmn.w	r0, #56	; 0x38
 c02a45e:	f43f af64 	beq.w	c02a32a <mbedtls_to_psa_error+0x7a>
 c02a462:	dc2a      	bgt.n	c02a4ba <mbedtls_to_psa_error+0x20a>
 c02a464:	f110 0f60 	cmn.w	r0, #96	; 0x60
 c02a468:	f43f af7b 	beq.w	c02a362 <mbedtls_to_psa_error+0xb2>
 c02a46c:	dc10      	bgt.n	c02a490 <mbedtls_to_psa_error+0x1e0>
 c02a46e:	f110 0f66 	cmn.w	r0, #102	; 0x66
 c02a472:	f43f af76 	beq.w	c02a362 <mbedtls_to_psa_error+0xb2>
 c02a476:	dc05      	bgt.n	c02a484 <mbedtls_to_psa_error+0x1d4>
 c02a478:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
 c02a47c:	f43f af5f 	beq.w	c02a33e <mbedtls_to_psa_error+0x8e>
 c02a480:	3068      	adds	r0, #104	; 0x68
 c02a482:	e76d      	b.n	c02a360 <mbedtls_to_psa_error+0xb0>
 c02a484:	f110 0f64 	cmn.w	r0, #100	; 0x64
 c02a488:	f43f af6b 	beq.w	c02a362 <mbedtls_to_psa_error+0xb2>
 c02a48c:	3062      	adds	r0, #98	; 0x62
 c02a48e:	e767      	b.n	c02a360 <mbedtls_to_psa_error+0xb0>
 c02a490:	f110 0f3c 	cmn.w	r0, #60	; 0x3c
 c02a494:	dc08      	bgt.n	c02a4a8 <mbedtls_to_psa_error+0x1f8>
 c02a496:	f110 0f3d 	cmn.w	r0, #61	; 0x3d
 c02a49a:	da02      	bge.n	c02a4a2 <mbedtls_to_psa_error+0x1f2>
 c02a49c:	3040      	adds	r0, #64	; 0x40
 c02a49e:	f47f af2c 	bne.w	c02a2fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_INSUFFICIENT_ENTROPY );
 c02a4a2:	f06f 0093 	mvn.w	r0, #147	; 0x93
 c02a4a6:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c02a4a8:	f110 0f3a 	cmn.w	r0, #58	; 0x3a
 c02a4ac:	d0f9      	beq.n	c02a4a2 <mbedtls_to_psa_error+0x1f2>
 c02a4ae:	3039      	adds	r0, #57	; 0x39
 c02a4b0:	f47f af23 	bne.w	c02a2fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_HARDWARE_FAILURE );
 c02a4b4:	f06f 0092 	mvn.w	r0, #146	; 0x92
 c02a4b8:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c02a4ba:	f110 0f32 	cmn.w	r0, #50	; 0x32
 c02a4be:	f43f af34 	beq.w	c02a32a <mbedtls_to_psa_error+0x7a>
 c02a4c2:	dc0d      	bgt.n	c02a4e0 <mbedtls_to_psa_error+0x230>
 c02a4c4:	f110 0f35 	cmn.w	r0, #53	; 0x35
 c02a4c8:	d0f4      	beq.n	c02a4b4 <mbedtls_to_psa_error+0x204>
 c02a4ca:	dc04      	bgt.n	c02a4d6 <mbedtls_to_psa_error+0x226>
 c02a4cc:	f110 0f37 	cmn.w	r0, #55	; 0x37
 c02a4d0:	d0f0      	beq.n	c02a4b4 <mbedtls_to_psa_error+0x204>
 c02a4d2:	3036      	adds	r0, #54	; 0x36
 c02a4d4:	e728      	b.n	c02a328 <mbedtls_to_psa_error+0x78>
 c02a4d6:	f110 0f34 	cmn.w	r0, #52	; 0x34
 c02a4da:	d0e2      	beq.n	c02a4a2 <mbedtls_to_psa_error+0x1f2>
 c02a4dc:	3033      	adds	r0, #51	; 0x33
 c02a4de:	e7e7      	b.n	c02a4b0 <mbedtls_to_psa_error+0x200>
 c02a4e0:	f110 0f2d 	cmn.w	r0, #45	; 0x2d
 c02a4e4:	d0e6      	beq.n	c02a4b4 <mbedtls_to_psa_error+0x204>
 c02a4e6:	dc04      	bgt.n	c02a4f2 <mbedtls_to_psa_error+0x242>
 c02a4e8:	f110 0f31 	cmn.w	r0, #49	; 0x31
 c02a4ec:	d0e2      	beq.n	c02a4b4 <mbedtls_to_psa_error+0x204>
 c02a4ee:	302f      	adds	r0, #47	; 0x2f
 c02a4f0:	e7de      	b.n	c02a4b0 <mbedtls_to_psa_error+0x200>
 c02a4f2:	f110 0f29 	cmn.w	r0, #41	; 0x29
 c02a4f6:	d0dd      	beq.n	c02a4b4 <mbedtls_to_psa_error+0x204>
 c02a4f8:	f73f af33 	bgt.w	c02a362 <mbedtls_to_psa_error+0xb2>
 c02a4fc:	302b      	adds	r0, #43	; 0x2b
 c02a4fe:	e7d7      	b.n	c02a4b0 <mbedtls_to_psa_error+0x200>
 c02a500:	f110 0f12 	cmn.w	r0, #18
 c02a504:	f43f af36 	beq.w	c02a374 <mbedtls_to_psa_error+0xc4>
 c02a508:	dc23      	bgt.n	c02a552 <mbedtls_to_psa_error+0x2a2>
 c02a50a:	f110 0f19 	cmn.w	r0, #25
 c02a50e:	d0d1      	beq.n	c02a4b4 <mbedtls_to_psa_error+0x204>
 c02a510:	dc0e      	bgt.n	c02a530 <mbedtls_to_psa_error+0x280>
 c02a512:	f110 0f22 	cmn.w	r0, #34	; 0x22
 c02a516:	dc09      	bgt.n	c02a52c <mbedtls_to_psa_error+0x27c>
 c02a518:	f110 0f24 	cmn.w	r0, #36	; 0x24
 c02a51c:	f6bf af05 	bge.w	c02a32a <mbedtls_to_psa_error+0x7a>
 c02a520:	f110 0f26 	cmn.w	r0, #38	; 0x26
 c02a524:	f43f af01 	beq.w	c02a32a <mbedtls_to_psa_error+0x7a>
 c02a528:	3025      	adds	r0, #37	; 0x25
 c02a52a:	e7c1      	b.n	c02a4b0 <mbedtls_to_psa_error+0x200>
 c02a52c:	3020      	adds	r0, #32
 c02a52e:	e6fb      	b.n	c02a328 <mbedtls_to_psa_error+0x78>
 c02a530:	f110 0f16 	cmn.w	r0, #22
 c02a534:	f43f aef9 	beq.w	c02a32a <mbedtls_to_psa_error+0x7a>
 c02a538:	dc05      	bgt.n	c02a546 <mbedtls_to_psa_error+0x296>
 c02a53a:	f110 0f18 	cmn.w	r0, #24
 c02a53e:	f43f aef4 	beq.w	c02a32a <mbedtls_to_psa_error+0x7a>
 c02a542:	3017      	adds	r0, #23
 c02a544:	e7b4      	b.n	c02a4b0 <mbedtls_to_psa_error+0x200>
 c02a546:	f110 0f14 	cmn.w	r0, #20
 c02a54a:	f43f af0a 	beq.w	c02a362 <mbedtls_to_psa_error+0xb2>
 c02a54e:	3013      	adds	r0, #19
 c02a550:	e7ae      	b.n	c02a4b0 <mbedtls_to_psa_error+0x200>
 c02a552:	f110 0f0c 	cmn.w	r0, #12
 c02a556:	f43f af04 	beq.w	c02a362 <mbedtls_to_psa_error+0xb2>
 c02a55a:	dc0f      	bgt.n	c02a57c <mbedtls_to_psa_error+0x2cc>
 c02a55c:	f110 0f0f 	cmn.w	r0, #15
 c02a560:	f43f af08 	beq.w	c02a374 <mbedtls_to_psa_error+0xc4>
 c02a564:	dc04      	bgt.n	c02a570 <mbedtls_to_psa_error+0x2c0>
 c02a566:	f110 0f11 	cmn.w	r0, #17
 c02a56a:	d0a3      	beq.n	c02a4b4 <mbedtls_to_psa_error+0x204>
 c02a56c:	3010      	adds	r0, #16
 c02a56e:	e6e5      	b.n	c02a33c <mbedtls_to_psa_error+0x8c>
 c02a570:	f110 0f0e 	cmn.w	r0, #14
 c02a574:	f43f aef5 	beq.w	c02a362 <mbedtls_to_psa_error+0xb2>
 c02a578:	300d      	adds	r0, #13
 c02a57a:	e6f1      	b.n	c02a360 <mbedtls_to_psa_error+0xb0>
 c02a57c:	1d82      	adds	r2, r0, #6
 c02a57e:	f43f aef0 	beq.w	c02a362 <mbedtls_to_psa_error+0xb2>
 c02a582:	dc09      	bgt.n	c02a598 <mbedtls_to_psa_error+0x2e8>
 c02a584:	f110 0f0a 	cmn.w	r0, #10
 c02a588:	f43f aeeb 	beq.w	c02a362 <mbedtls_to_psa_error+0xb2>
 c02a58c:	3008      	adds	r0, #8
 c02a58e:	f47f aeb4 	bne.w	c02a2fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_BUFFER_TOO_SMALL );
 c02a592:	f06f 0089 	mvn.w	r0, #137	; 0x89
 c02a596:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c02a598:	1c83      	adds	r3, r0, #2
 c02a59a:	d007      	beq.n	c02a5ac <mbedtls_to_psa_error+0x2fc>
 c02a59c:	2800      	cmp	r0, #0
 c02a59e:	f43f aeae 	beq.w	c02a2fe <mbedtls_to_psa_error+0x4e>
 c02a5a2:	3004      	adds	r0, #4
 c02a5a4:	e6dc      	b.n	c02a360 <mbedtls_to_psa_error+0xb0>
            return( PSA_ERROR_BAD_STATE );
 c02a5a6:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02a5aa:	4770      	bx	lr
            return( PSA_ERROR_STORAGE_FAILURE );
 c02a5ac:	f06f 0091 	mvn.w	r0, #145	; 0x91
 c02a5b0:	4770      	bx	lr
            return( PSA_ERROR_TAMPERING_DETECTED );
 c02a5b2:	f06f 0096 	mvn.w	r0, #150	; 0x96
 c02a5b6:	4770      	bx	lr

0c02a5b8 <psa_generator_tls12_prf_setup>:
    psa_algorithm_t hash_alg,
    const uint8_t *salt,
    size_t salt_length,
    const uint8_t *label,
    size_t label_length )
{
 c02a5b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c02a5bc:	b2dc      	uxtb	r4, r3
 c02a5be:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 c02a5c2:	f104 437f 	add.w	r3, r4, #4278190080	; 0xff000000
 c02a5c6:	3b01      	subs	r3, #1
 c02a5c8:	2b02      	cmp	r3, #2
{
 c02a5ca:	4606      	mov	r6, r0
 c02a5cc:	468b      	mov	fp, r1
 c02a5ce:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 c02a5d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c02a5d4:	d93e      	bls.n	c02a654 <psa_generator_tls12_prf_setup+0x9c>
 c02a5d6:	f104 437f 	add.w	r3, r4, #4278190080	; 0xff000000
 c02a5da:	3b04      	subs	r3, #4
 c02a5dc:	2b01      	cmp	r3, #1
 c02a5de:	d93b      	bls.n	c02a658 <psa_generator_tls12_prf_setup+0xa0>
 c02a5e0:	4b38      	ldr	r3, [pc, #224]	; (c02a6c4 <psa_generator_tls12_prf_setup+0x10c>)
 c02a5e2:	429c      	cmp	r4, r3
 c02a5e4:	d03c      	beq.n	c02a660 <psa_generator_tls12_prf_setup+0xa8>
 c02a5e6:	3301      	adds	r3, #1
 c02a5e8:	429c      	cmp	r4, r3
 c02a5ea:	d03b      	beq.n	c02a664 <psa_generator_tls12_prf_setup+0xac>
 c02a5ec:	3301      	adds	r3, #1
 c02a5ee:	429c      	cmp	r4, r3
 c02a5f0:	d03a      	beq.n	c02a668 <psa_generator_tls12_prf_setup+0xb0>
 c02a5f2:	3301      	adds	r3, #1
 c02a5f4:	429c      	cmp	r4, r3
 c02a5f6:	d031      	beq.n	c02a65c <psa_generator_tls12_prf_setup+0xa4>
 c02a5f8:	3301      	adds	r3, #1
 c02a5fa:	429c      	cmp	r4, r3
 c02a5fc:	d030      	beq.n	c02a660 <psa_generator_tls12_prf_setup+0xa8>
 c02a5fe:	3301      	adds	r3, #1
 c02a600:	429c      	cmp	r4, r3
 c02a602:	d02f      	beq.n	c02a664 <psa_generator_tls12_prf_setup+0xac>
 c02a604:	3303      	adds	r3, #3
 c02a606:	429c      	cmp	r4, r3
 c02a608:	d02a      	beq.n	c02a660 <psa_generator_tls12_prf_setup+0xa8>
 c02a60a:	3301      	adds	r3, #1
 c02a60c:	429c      	cmp	r4, r3
 c02a60e:	d029      	beq.n	c02a664 <psa_generator_tls12_prf_setup+0xac>
 c02a610:	3301      	adds	r3, #1
 c02a612:	429c      	cmp	r4, r3
 c02a614:	d028      	beq.n	c02a668 <psa_generator_tls12_prf_setup+0xb0>
 c02a616:	3301      	adds	r3, #1
 c02a618:	429c      	cmp	r4, r3
 c02a61a:	bf0c      	ite	eq
 c02a61c:	2440      	moveq	r4, #64	; 0x40
 c02a61e:	2400      	movne	r4, #0
 c02a620:	eb18 0705 	adds.w	r7, r8, r5
    size_t Ai_with_seed_len = hash_length + salt_length + label_length;
    int overflow;

    tls12_prf->key = mbedtls_calloc( 1, key_len );
 c02a624:	4611      	mov	r1, r2
 c02a626:	bf2c      	ite	cs
 c02a628:	f04f 0a01 	movcs.w	sl, #1
 c02a62c:	f04f 0a00 	movcc.w	sl, #0
 c02a630:	2001      	movs	r0, #1
 c02a632:	19e7      	adds	r7, r4, r7
 c02a634:	9201      	str	r2, [sp, #4]
 c02a636:	bf2c      	ite	cs
 c02a638:	f04f 0901 	movcs.w	r9, #1
 c02a63c:	f04f 0900 	movcc.w	r9, #0
 c02a640:	f7ff fe18 	bl	c02a274 <mbedtls_calloc>
    if( tls12_prf->key == NULL )
 c02a644:	9a01      	ldr	r2, [sp, #4]
    tls12_prf->key = mbedtls_calloc( 1, key_len );
 c02a646:	6030      	str	r0, [r6, #0]
    if( tls12_prf->key == NULL )
 c02a648:	b980      	cbnz	r0, c02a66c <psa_generator_tls12_prf_setup+0xb4>
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c02a64a:	f06f 008c 	mvn.w	r0, #140	; 0x8c
     * psa_generator_read() is called. */
    tls12_prf->block_number    = 0;
    tls12_prf->offset_in_block = hash_length;

    return( PSA_SUCCESS );
}
 c02a64e:	b003      	add	sp, #12
 c02a650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c02a654:	2410      	movs	r4, #16
 c02a656:	e7e3      	b.n	c02a620 <psa_generator_tls12_prf_setup+0x68>
 c02a658:	2414      	movs	r4, #20
 c02a65a:	e7e1      	b.n	c02a620 <psa_generator_tls12_prf_setup+0x68>
 c02a65c:	2440      	movs	r4, #64	; 0x40
 c02a65e:	e7df      	b.n	c02a620 <psa_generator_tls12_prf_setup+0x68>
 c02a660:	241c      	movs	r4, #28
 c02a662:	e7dd      	b.n	c02a620 <psa_generator_tls12_prf_setup+0x68>
 c02a664:	2420      	movs	r4, #32
 c02a666:	e7db      	b.n	c02a620 <psa_generator_tls12_prf_setup+0x68>
 c02a668:	2430      	movs	r4, #48	; 0x30
 c02a66a:	e7d9      	b.n	c02a620 <psa_generator_tls12_prf_setup+0x68>
    tls12_prf->key_len = key_len;
 c02a66c:	6072      	str	r2, [r6, #4]
    memcpy( tls12_prf->key, key, key_len );
 c02a66e:	4659      	mov	r1, fp
 c02a670:	f7ed f985 	bl	c01797e <memcpy>
    overflow = ( salt_length + label_length               < salt_length ) ||
 c02a674:	f1ba 0f00 	cmp.w	sl, #0
 c02a678:	d120      	bne.n	c02a6bc <psa_generator_tls12_prf_setup+0x104>
 c02a67a:	f1b9 0f00 	cmp.w	r9, #0
 c02a67e:	d11d      	bne.n	c02a6bc <psa_generator_tls12_prf_setup+0x104>
    tls12_prf->Ai_with_seed = mbedtls_calloc( 1, Ai_with_seed_len );
 c02a680:	4639      	mov	r1, r7
 c02a682:	2001      	movs	r0, #1
 c02a684:	f7ff fdf6 	bl	c02a274 <mbedtls_calloc>
 c02a688:	60b0      	str	r0, [r6, #8]
    if( tls12_prf->Ai_with_seed == NULL )
 c02a68a:	2800      	cmp	r0, #0
 c02a68c:	d0dd      	beq.n	c02a64a <psa_generator_tls12_prf_setup+0x92>
    tls12_prf->Ai_with_seed_len = Ai_with_seed_len;
 c02a68e:	60f7      	str	r7, [r6, #12]
    if( label_length != 0 )
 c02a690:	b125      	cbz	r5, c02a69c <psa_generator_tls12_prf_setup+0xe4>
        memcpy( tls12_prf->Ai_with_seed + hash_length,
 c02a692:	462a      	mov	r2, r5
 c02a694:	990e      	ldr	r1, [sp, #56]	; 0x38
 c02a696:	4420      	add	r0, r4
 c02a698:	f7ed f971 	bl	c01797e <memcpy>
    if( salt_length != 0 )
 c02a69c:	f1b8 0f00 	cmp.w	r8, #0
 c02a6a0:	d006      	beq.n	c02a6b0 <psa_generator_tls12_prf_setup+0xf8>
        memcpy( tls12_prf->Ai_with_seed + hash_length + label_length,
 c02a6a2:	68b0      	ldr	r0, [r6, #8]
 c02a6a4:	4425      	add	r5, r4
 c02a6a6:	4642      	mov	r2, r8
 c02a6a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 c02a6aa:	4428      	add	r0, r5
 c02a6ac:	f7ed f967 	bl	c01797e <memcpy>
    tls12_prf->block_number    = 0;
 c02a6b0:	2000      	movs	r0, #0
    tls12_prf->offset_in_block = hash_length;
 c02a6b2:	f886 4050 	strb.w	r4, [r6, #80]	; 0x50
    tls12_prf->block_number    = 0;
 c02a6b6:	f886 0051 	strb.w	r0, [r6, #81]	; 0x51
    return( PSA_SUCCESS );
 c02a6ba:	e7c8      	b.n	c02a64e <psa_generator_tls12_prf_setup+0x96>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02a6bc:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c02a6c0:	e7c5      	b.n	c02a64e <psa_generator_tls12_prf_setup+0x96>
 c02a6c2:	bf00      	nop
 c02a6c4:	01000008 	.word	0x01000008

0c02a6c8 <psa_get_empty_key_slot>:
{
 c02a6c8:	b513      	push	{r0, r1, r4, lr}
    psa_key_slot_t *slot = NULL;
 c02a6ca:	2300      	movs	r3, #0
{
 c02a6cc:	460c      	mov	r4, r1
    psa_key_slot_t *slot = NULL;
 c02a6ce:	a902      	add	r1, sp, #8
 c02a6d0:	f841 3d04 	str.w	r3, [r1, #-4]!
    *p_slot = NULL;
 c02a6d4:	6023      	str	r3, [r4, #0]
    status = psa_get_key_slot( handle, &slot );
 c02a6d6:	f002 fdfb 	bl	c02d2d0 <psa_get_key_slot>
    if( status != PSA_SUCCESS )
 c02a6da:	b918      	cbnz	r0, c02a6e4 <psa_get_empty_key_slot+0x1c>
    if( slot->type != PSA_KEY_TYPE_NONE )
 c02a6dc:	9b01      	ldr	r3, [sp, #4]
 c02a6de:	681a      	ldr	r2, [r3, #0]
 c02a6e0:	b912      	cbnz	r2, c02a6e8 <psa_get_empty_key_slot+0x20>
    *p_slot = slot;
 c02a6e2:	6023      	str	r3, [r4, #0]
}
 c02a6e4:	b002      	add	sp, #8
 c02a6e6:	bd10      	pop	{r4, pc}
        return( PSA_ERROR_ALREADY_EXISTS );
 c02a6e8:	f06f 008a 	mvn.w	r0, #138	; 0x8a
 c02a6ec:	e7fa      	b.n	c02a6e4 <psa_get_empty_key_slot+0x1c>

0c02a6ee <psa_generator_tls12_psk_to_ms_setup>:
    psa_algorithm_t hash_alg,
    const uint8_t *salt,
    size_t salt_length,
    const uint8_t *label,
    size_t label_length )
{
 c02a6ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    psa_status_t status;
    unsigned char pms[ 4 + 2 * PSA_ALG_TLS12_PSK_TO_MS_MAX_PSK_LEN ];

    if( psk_len > PSA_ALG_TLS12_PSK_TO_MS_MAX_PSK_LEN )
 c02a6f2:	2a80      	cmp	r2, #128	; 0x80
{
 c02a6f4:	b0c6      	sub	sp, #280	; 0x118
 c02a6f6:	4680      	mov	r8, r0
 c02a6f8:	468a      	mov	sl, r1
 c02a6fa:	4615      	mov	r5, r2
 c02a6fc:	4699      	mov	r9, r3
    if( psk_len > PSA_ALG_TLS12_PSK_TO_MS_MAX_PSK_LEN )
 c02a6fe:	d82d      	bhi.n	c02a75c <psa_generator_tls12_psk_to_ms_setup+0x6e>
     * The premaster secret is formed as follows: if the PSK is N octets
     * long, concatenate a uint16 with the value N, N zero octets, a second
     * uint16 with the value N, and the PSK itself.
     */

    pms[0] = ( psk_len >> 8 ) & 0xff;
 c02a700:	2600      	movs	r6, #0
 c02a702:	ac05      	add	r4, sp, #20
    pms[1] = ( psk_len >> 0 ) & 0xff;
    memset( pms + 2, 0, psk_len );
    pms[2 + psk_len + 0] = pms[0];
 c02a704:	1caf      	adds	r7, r5, #2
    memset( pms + 2, 0, psk_len );
 c02a706:	4631      	mov	r1, r6
 c02a708:	f10d 0016 	add.w	r0, sp, #22
    pms[1] = ( psk_len >> 0 ) & 0xff;
 c02a70c:	f88d 2015 	strb.w	r2, [sp, #21]
    pms[0] = ( psk_len >> 8 ) & 0xff;
 c02a710:	f88d 6014 	strb.w	r6, [sp, #20]
    memset( pms + 2, 0, psk_len );
 c02a714:	f7ed f957 	bl	c0179c6 <memset>
    pms[2 + psk_len + 0] = pms[0];
 c02a718:	55e6      	strb	r6, [r4, r7]
    pms[2 + psk_len + 1] = pms[1];
 c02a71a:	7862      	ldrb	r2, [r4, #1]
 c02a71c:	1963      	adds	r3, r4, r5
    memcpy( pms + 4 + psk_len, psk, psk_len );
 c02a71e:	1d28      	adds	r0, r5, #4
    pms[2 + psk_len + 1] = pms[1];
 c02a720:	70da      	strb	r2, [r3, #3]
    memcpy( pms + 4 + psk_len, psk, psk_len );
 c02a722:	4651      	mov	r1, sl
 c02a724:	462a      	mov	r2, r5
 c02a726:	4420      	add	r0, r4
 c02a728:	f7ed f929 	bl	c01797e <memcpy>

    status = psa_generator_tls12_prf_setup( tls12_prf,
 c02a72c:	9b51      	ldr	r3, [sp, #324]	; 0x144
 c02a72e:	4621      	mov	r1, r4
 c02a730:	9303      	str	r3, [sp, #12]
 c02a732:	9b50      	ldr	r3, [sp, #320]	; 0x140
 c02a734:	007a      	lsls	r2, r7, #1
 c02a736:	9302      	str	r3, [sp, #8]
 c02a738:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 c02a73a:	4640      	mov	r0, r8
 c02a73c:	9301      	str	r3, [sp, #4]
 c02a73e:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 c02a740:	9300      	str	r3, [sp, #0]
 c02a742:	464b      	mov	r3, r9
 c02a744:	f7ff ff38 	bl	c02a5b8 <psa_generator_tls12_prf_setup>
                                            pms, 4 + 2 * psk_len,
                                            hash_alg,
                                            salt, salt_length,
                                            label, label_length );

    mbedtls_platform_zeroize( pms, sizeof( pms ) );
 c02a748:	f44f 7182 	mov.w	r1, #260	; 0x104
    status = psa_generator_tls12_prf_setup( tls12_prf,
 c02a74c:	4605      	mov	r5, r0
    mbedtls_platform_zeroize( pms, sizeof( pms ) );
 c02a74e:	4620      	mov	r0, r4
 c02a750:	f7ff fda6 	bl	c02a2a0 <mbedtls_platform_zeroize>
    return( status );
}
 c02a754:	4628      	mov	r0, r5
 c02a756:	b046      	add	sp, #280	; 0x118
 c02a758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02a75c:	f06f 0586 	mvn.w	r5, #134	; 0x86
 c02a760:	e7f8      	b.n	c02a754 <psa_generator_tls12_psk_to_ms_setup+0x66>
	...

0c02a764 <mbedtls_cipher_info_from_psa>:
{
 c02a764:	b410      	push	{r4}
 c02a766:	4614      	mov	r4, r2
    if( PSA_ALG_IS_AEAD( alg ) )
 c02a768:	f000 42fe 	and.w	r2, r0, #2130706432	; 0x7f000000
 c02a76c:	f1b2 6fc0 	cmp.w	r2, #100663296	; 0x6000000
        alg = PSA_ALG_AEAD_WITH_TAG_LENGTH( alg, 0 );
 c02a770:	bf08      	it	eq
 c02a772:	f420 507c 	biceq.w	r0, r0, #16128	; 0x3f00
    if( PSA_ALG_IS_CIPHER( alg ) || PSA_ALG_IS_AEAD( alg ) )
 c02a776:	f000 42fa 	and.w	r2, r0, #2097152000	; 0x7d000000
 c02a77a:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 c02a77e:	d12d      	bne.n	c02a7dc <mbedtls_cipher_info_from_psa+0x78>
        switch( alg )
 c02a780:	4a24      	ldr	r2, [pc, #144]	; (c02a814 <mbedtls_cipher_info_from_psa+0xb0>)
 c02a782:	4290      	cmp	r0, r2
 c02a784:	d018      	beq.n	c02a7b8 <mbedtls_cipher_info_from_psa+0x54>
 c02a786:	d80b      	bhi.n	c02a7a0 <mbedtls_cipher_info_from_psa+0x3c>
 c02a788:	4a23      	ldr	r2, [pc, #140]	; (c02a818 <mbedtls_cipher_info_from_psa+0xb4>)
 c02a78a:	4290      	cmp	r0, r2
 c02a78c:	d305      	bcc.n	c02a79a <mbedtls_cipher_info_from_psa+0x36>
 c02a78e:	3201      	adds	r2, #1
 c02a790:	4290      	cmp	r0, r2
 c02a792:	d91f      	bls.n	c02a7d4 <mbedtls_cipher_info_from_psa+0x70>
 c02a794:	4a21      	ldr	r2, [pc, #132]	; (c02a81c <mbedtls_cipher_info_from_psa+0xb8>)
 c02a796:	4290      	cmp	r0, r2
 c02a798:	d025      	beq.n	c02a7e6 <mbedtls_cipher_info_from_psa+0x82>
}
 c02a79a:	2000      	movs	r0, #0
 c02a79c:	bc10      	pop	{r4}
 c02a79e:	4770      	bx	lr
        switch( alg )
 c02a7a0:	4a1f      	ldr	r2, [pc, #124]	; (c02a820 <mbedtls_cipher_info_from_psa+0xbc>)
 c02a7a2:	4290      	cmp	r0, r2
 c02a7a4:	d014      	beq.n	c02a7d0 <mbedtls_cipher_info_from_psa+0x6c>
 c02a7a6:	d311      	bcc.n	c02a7cc <mbedtls_cipher_info_from_psa+0x68>
 c02a7a8:	4a1e      	ldr	r2, [pc, #120]	; (c02a824 <mbedtls_cipher_info_from_psa+0xc0>)
 c02a7aa:	4290      	cmp	r0, r2
 c02a7ac:	d014      	beq.n	c02a7d8 <mbedtls_cipher_info_from_psa+0x74>
    else if( alg == PSA_ALG_GMAC )
 c02a7ae:	3201      	adds	r2, #1
 c02a7b0:	4290      	cmp	r0, r2
 c02a7b2:	d1f2      	bne.n	c02a79a <mbedtls_cipher_info_from_psa+0x36>
        mode = MBEDTLS_MODE_GCM;
 c02a7b4:	2206      	movs	r2, #6
 c02a7b6:	e000      	b.n	c02a7ba <mbedtls_cipher_info_from_psa+0x56>
                mode = MBEDTLS_MODE_CTR;
 c02a7b8:	2205      	movs	r2, #5
    switch( key_type )
 c02a7ba:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 c02a7be:	3801      	subs	r0, #1
 c02a7c0:	2803      	cmp	r0, #3
 c02a7c2:	d8ea      	bhi.n	c02a79a <mbedtls_cipher_info_from_psa+0x36>
 c02a7c4:	e8df f000 	tbb	[pc, r0]
 c02a7c8:	20111822 	.word	0x20111822
                mode = MBEDTLS_MODE_CFB;
 c02a7cc:	2203      	movs	r2, #3
                break;
 c02a7ce:	e7f4      	b.n	c02a7ba <mbedtls_cipher_info_from_psa+0x56>
                mode = MBEDTLS_MODE_OFB;
 c02a7d0:	2204      	movs	r2, #4
                break;
 c02a7d2:	e7f2      	b.n	c02a7ba <mbedtls_cipher_info_from_psa+0x56>
                mode = MBEDTLS_MODE_CBC;
 c02a7d4:	2202      	movs	r2, #2
                break;
 c02a7d6:	e7f0      	b.n	c02a7ba <mbedtls_cipher_info_from_psa+0x56>
                mode = MBEDTLS_MODE_CCM;
 c02a7d8:	2208      	movs	r2, #8
                break;
 c02a7da:	e7ee      	b.n	c02a7ba <mbedtls_cipher_info_from_psa+0x56>
    else if( alg == PSA_ALG_CMAC )
 c02a7dc:	4a12      	ldr	r2, [pc, #72]	; (c02a828 <mbedtls_cipher_info_from_psa+0xc4>)
 c02a7de:	4290      	cmp	r0, r2
 c02a7e0:	d1e5      	bne.n	c02a7ae <mbedtls_cipher_info_from_psa+0x4a>
        mode = MBEDTLS_MODE_ECB;
 c02a7e2:	2201      	movs	r2, #1
 c02a7e4:	e7e9      	b.n	c02a7ba <mbedtls_cipher_info_from_psa+0x56>
                mode = MBEDTLS_MODE_STREAM;
 c02a7e6:	2207      	movs	r2, #7
 c02a7e8:	e7e7      	b.n	c02a7ba <mbedtls_cipher_info_from_psa+0x56>
            cipher_id_tmp = MBEDTLS_CIPHER_ID_CAMELLIA;
 c02a7ea:	2005      	movs	r0, #5
    if( cipher_id != NULL )
 c02a7ec:	b103      	cbz	r3, c02a7f0 <mbedtls_cipher_info_from_psa+0x8c>
        *cipher_id = cipher_id_tmp;
 c02a7ee:	7018      	strb	r0, [r3, #0]
    return( mbedtls_cipher_info_from_values( cipher_id_tmp,
 c02a7f0:	4621      	mov	r1, r4
}
 c02a7f2:	bc10      	pop	{r4}
    return( mbedtls_cipher_info_from_values( cipher_id_tmp,
 c02a7f4:	f7fc b8b8 	b.w	c026968 <mbedtls_cipher_info_from_values>
            if( key_bits == 64 )
 c02a7f8:	2c40      	cmp	r4, #64	; 0x40
 c02a7fa:	d009      	beq.n	c02a810 <mbedtls_cipher_info_from_psa+0xac>
            if( key_bits == 128 )
 c02a7fc:	2c80      	cmp	r4, #128	; 0x80
                cipher_id_tmp = MBEDTLS_CIPHER_ID_3DES;
 c02a7fe:	f04f 0004 	mov.w	r0, #4
            if( key_bits == 128 )
 c02a802:	d1f3      	bne.n	c02a7ec <mbedtls_cipher_info_from_psa+0x88>
                key_bits = 192;
 c02a804:	24c0      	movs	r4, #192	; 0xc0
 c02a806:	e7f1      	b.n	c02a7ec <mbedtls_cipher_info_from_psa+0x88>
            cipher_id_tmp = MBEDTLS_CIPHER_ID_ARC4;
 c02a808:	2007      	movs	r0, #7
            break;
 c02a80a:	e7ef      	b.n	c02a7ec <mbedtls_cipher_info_from_psa+0x88>
            cipher_id_tmp = MBEDTLS_CIPHER_ID_AES;
 c02a80c:	2002      	movs	r0, #2
 c02a80e:	e7ed      	b.n	c02a7ec <mbedtls_cipher_info_from_psa+0x88>
                cipher_id_tmp = MBEDTLS_CIPHER_ID_DES;
 c02a810:	2003      	movs	r0, #3
 c02a812:	e7eb      	b.n	c02a7ec <mbedtls_cipher_info_from_psa+0x88>
 c02a814:	04c00001 	.word	0x04c00001
 c02a818:	04600100 	.word	0x04600100
 c02a81c:	04800001 	.word	0x04800001
 c02a820:	04c00003 	.word	0x04c00003
 c02a824:	06000001 	.word	0x06000001
 c02a828:	02c00002 	.word	0x02c00002

0c02a82c <psa_aead_abort>:
    switch( operation->core_alg )
 c02a82c:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 c02a830:	4a06      	ldr	r2, [pc, #24]	; (c02a84c <psa_aead_abort+0x20>)
 c02a832:	4293      	cmp	r3, r2
 c02a834:	d003      	beq.n	c02a83e <psa_aead_abort+0x12>
 c02a836:	3201      	adds	r2, #1
 c02a838:	4293      	cmp	r3, r2
 c02a83a:	d003      	beq.n	c02a844 <psa_aead_abort+0x18>
 c02a83c:	4770      	bx	lr
            mbedtls_ccm_free( &operation->ctx.ccm );
 c02a83e:	3008      	adds	r0, #8
 c02a840:	f7f2 ba22 	b.w	c01cc88 <mbedtls_ccm_free>
            mbedtls_gcm_free( &operation->ctx.gcm );
 c02a844:	3008      	adds	r0, #8
 c02a846:	f7f4 b9dc 	b.w	c01ec02 <mbedtls_gcm_free>
 c02a84a:	bf00      	nop
 c02a84c:	06001001 	.word	0x06001001

0c02a850 <psa_key_policy_algorithm_intersection.part.1>:
    if( PSA_ALG_IS_HASH_AND_SIGN( alg1 ) &&
 c02a850:	4b23      	ldr	r3, [pc, #140]	; (c02a8e0 <psa_key_policy_algorithm_intersection.part.1+0x90>)
 c02a852:	4a24      	ldr	r2, [pc, #144]	; (c02a8e4 <psa_key_policy_algorithm_intersection.part.1+0x94>)
static psa_algorithm_t psa_key_policy_algorithm_intersection(
 c02a854:	b570      	push	{r4, r5, r6, lr}
    if( PSA_ALG_IS_HASH_AND_SIGN( alg1 ) &&
 c02a856:	ea00 0503 	and.w	r5, r0, r3
 c02a85a:	4295      	cmp	r5, r2
 c02a85c:	d006      	beq.n	c02a86c <psa_key_policy_algorithm_intersection.part.1+0x1c>
 c02a85e:	f420 3440 	bic.w	r4, r0, #196608	; 0x30000
 c02a862:	4e21      	ldr	r6, [pc, #132]	; (c02a8e8 <psa_key_policy_algorithm_intersection.part.1+0x98>)
 c02a864:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
 c02a868:	42b4      	cmp	r4, r6
 c02a86a:	d137      	bne.n	c02a8dc <psa_key_policy_algorithm_intersection.part.1+0x8c>
        PSA_ALG_IS_HASH_AND_SIGN( alg2 ) &&
 c02a86c:	400b      	ands	r3, r1
 c02a86e:	4293      	cmp	r3, r2
 c02a870:	d006      	beq.n	c02a880 <psa_key_policy_algorithm_intersection.part.1+0x30>
 c02a872:	f421 3240 	bic.w	r2, r1, #196608	; 0x30000
 c02a876:	4c1c      	ldr	r4, [pc, #112]	; (c02a8e8 <psa_key_policy_algorithm_intersection.part.1+0x98>)
 c02a878:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 c02a87c:	42a2      	cmp	r2, r4
 c02a87e:	d12d      	bne.n	c02a8dc <psa_key_policy_algorithm_intersection.part.1+0x8c>
        ( alg1 & ~PSA_ALG_HASH_MASK ) == ( alg2 & ~PSA_ALG_HASH_MASK ) )
 c02a880:	ea80 0201 	eor.w	r2, r0, r1
        PSA_ALG_IS_HASH_AND_SIGN( alg2 ) &&
 c02a884:	f032 02ff 	bics.w	r2, r2, #255	; 0xff
 c02a888:	d128      	bne.n	c02a8dc <psa_key_policy_algorithm_intersection.part.1+0x8c>
        if( PSA_ALG_SIGN_GET_HASH( alg1 ) == PSA_ALG_ANY_HASH )
 c02a88a:	4a16      	ldr	r2, [pc, #88]	; (c02a8e4 <psa_key_policy_algorithm_intersection.part.1+0x94>)
 c02a88c:	4295      	cmp	r5, r2
 c02a88e:	d006      	beq.n	c02a89e <psa_key_policy_algorithm_intersection.part.1+0x4e>
 c02a890:	f420 3240 	bic.w	r2, r0, #196608	; 0x30000
 c02a894:	4c14      	ldr	r4, [pc, #80]	; (c02a8e8 <psa_key_policy_algorithm_intersection.part.1+0x98>)
 c02a896:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 c02a89a:	42a2      	cmp	r2, r4
 c02a89c:	d107      	bne.n	c02a8ae <psa_key_policy_algorithm_intersection.part.1+0x5e>
 c02a89e:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 c02a8a2:	d004      	beq.n	c02a8ae <psa_key_policy_algorithm_intersection.part.1+0x5e>
 c02a8a4:	4c11      	ldr	r4, [pc, #68]	; (c02a8ec <psa_key_policy_algorithm_intersection.part.1+0x9c>)
 c02a8a6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 c02a8aa:	42a2      	cmp	r2, r4
 c02a8ac:	d014      	beq.n	c02a8d8 <psa_key_policy_algorithm_intersection.part.1+0x88>
        if( PSA_ALG_SIGN_GET_HASH( alg2 ) == PSA_ALG_ANY_HASH )
 c02a8ae:	4a0d      	ldr	r2, [pc, #52]	; (c02a8e4 <psa_key_policy_algorithm_intersection.part.1+0x94>)
 c02a8b0:	4293      	cmp	r3, r2
 c02a8b2:	d007      	beq.n	c02a8c4 <psa_key_policy_algorithm_intersection.part.1+0x74>
 c02a8b4:	f421 3340 	bic.w	r3, r1, #196608	; 0x30000
 c02a8b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 c02a8bc:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 c02a8c0:	4293      	cmp	r3, r2
 c02a8c2:	d10b      	bne.n	c02a8dc <psa_key_policy_algorithm_intersection.part.1+0x8c>
 c02a8c4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 c02a8c8:	d006      	beq.n	c02a8d8 <psa_key_policy_algorithm_intersection.part.1+0x88>
 c02a8ca:	4b08      	ldr	r3, [pc, #32]	; (c02a8ec <psa_key_policy_algorithm_intersection.part.1+0x9c>)
 c02a8cc:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 c02a8d0:	4299      	cmp	r1, r3
 c02a8d2:	bf0c      	ite	eq
 c02a8d4:	4601      	moveq	r1, r0
 c02a8d6:	2100      	movne	r1, #0
}
 c02a8d8:	4608      	mov	r0, r1
 c02a8da:	bd70      	pop	{r4, r5, r6, pc}
    return( 0 );
 c02a8dc:	2100      	movs	r1, #0
 c02a8de:	e7fb      	b.n	c02a8d8 <psa_key_policy_algorithm_intersection.part.1+0x88>
 c02a8e0:	fffeff00 	.word	0xfffeff00
 c02a8e4:	10020000 	.word	0x10020000
 c02a8e8:	10040000 	.word	0x10040000
 c02a8ec:	010000ff 	.word	0x010000ff

0c02a8f0 <psa_key_algorithm_permits>:
    if( requested_alg == policy_alg )
 c02a8f0:	4281      	cmp	r1, r0
{
 c02a8f2:	b530      	push	{r4, r5, lr}
    if( requested_alg == policy_alg )
 c02a8f4:	d025      	beq.n	c02a942 <psa_key_algorithm_permits+0x52>
    if( PSA_ALG_IS_HASH_AND_SIGN( requested_alg ) &&
 c02a8f6:	4b15      	ldr	r3, [pc, #84]	; (c02a94c <psa_key_algorithm_permits+0x5c>)
 c02a8f8:	4a15      	ldr	r2, [pc, #84]	; (c02a950 <psa_key_algorithm_permits+0x60>)
 c02a8fa:	ea01 0403 	and.w	r4, r1, r3
 c02a8fe:	4294      	cmp	r4, r2
 c02a900:	d006      	beq.n	c02a910 <psa_key_algorithm_permits+0x20>
 c02a902:	f421 3440 	bic.w	r4, r1, #196608	; 0x30000
 c02a906:	4d13      	ldr	r5, [pc, #76]	; (c02a954 <psa_key_algorithm_permits+0x64>)
 c02a908:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
 c02a90c:	42ac      	cmp	r4, r5
 c02a90e:	d11a      	bne.n	c02a946 <psa_key_algorithm_permits+0x56>
        PSA_ALG_SIGN_GET_HASH( policy_alg ) == PSA_ALG_ANY_HASH )
 c02a910:	4003      	ands	r3, r0
 c02a912:	4293      	cmp	r3, r2
 c02a914:	d006      	beq.n	c02a924 <psa_key_algorithm_permits+0x34>
 c02a916:	f420 3340 	bic.w	r3, r0, #196608	; 0x30000
 c02a91a:	4a0e      	ldr	r2, [pc, #56]	; (c02a954 <psa_key_algorithm_permits+0x64>)
 c02a91c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 c02a920:	4293      	cmp	r3, r2
 c02a922:	d110      	bne.n	c02a946 <psa_key_algorithm_permits+0x56>
 c02a924:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 c02a928:	d00d      	beq.n	c02a946 <psa_key_algorithm_permits+0x56>
 c02a92a:	4a0b      	ldr	r2, [pc, #44]	; (c02a958 <psa_key_algorithm_permits+0x68>)
 c02a92c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c02a930:	4293      	cmp	r3, r2
 c02a932:	d108      	bne.n	c02a946 <psa_key_algorithm_permits+0x56>
        return( ( policy_alg & ~PSA_ALG_HASH_MASK ) ==
 c02a934:	4041      	eors	r1, r0
 c02a936:	f031 03ff 	bics.w	r3, r1, #255	; 0xff
 c02a93a:	bf0c      	ite	eq
 c02a93c:	2001      	moveq	r0, #1
 c02a93e:	2000      	movne	r0, #0
}
 c02a940:	bd30      	pop	{r4, r5, pc}
        return( 1 );
 c02a942:	2001      	movs	r0, #1
 c02a944:	e7fc      	b.n	c02a940 <psa_key_algorithm_permits+0x50>
    return( 0 );
 c02a946:	2000      	movs	r0, #0
 c02a948:	e7fa      	b.n	c02a940 <psa_key_algorithm_permits+0x50>
 c02a94a:	bf00      	nop
 c02a94c:	fffeff00 	.word	0xfffeff00
 c02a950:	10020000 	.word	0x10020000
 c02a954:	10040000 	.word	0x10040000
 c02a958:	010000ff 	.word	0x010000ff

0c02a95c <psa_get_key_from_slot>:
{
 c02a95c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 c02a960:	4688      	mov	r8, r1
 c02a962:	461e      	mov	r6, r3
    psa_key_slot_t *slot = NULL;
 c02a964:	2300      	movs	r3, #0
 c02a966:	a902      	add	r1, sp, #8
 c02a968:	f841 3d04 	str.w	r3, [r1, #-4]!
    *p_slot = NULL;
 c02a96c:	f8c8 3000 	str.w	r3, [r8]
{
 c02a970:	4617      	mov	r7, r2
    status = psa_get_key_slot( handle, &slot );
 c02a972:	f002 fcad 	bl	c02d2d0 <psa_get_key_slot>
    if( status != PSA_SUCCESS )
 c02a976:	4604      	mov	r4, r0
 c02a978:	b9d0      	cbnz	r0, c02a9b0 <psa_get_key_from_slot+0x54>
    if( slot->type == PSA_KEY_TYPE_NONE )
 c02a97a:	9d01      	ldr	r5, [sp, #4]
 c02a97c:	6829      	ldr	r1, [r5, #0]
 c02a97e:	b1d9      	cbz	r1, c02a9b8 <psa_get_key_from_slot+0x5c>
    if( PSA_KEY_TYPE_IS_PUBLIC_KEY( slot->type ) )
 c02a980:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 c02a984:	f1b1 4fc0 	cmp.w	r1, #1610612736	; 0x60000000
    if( ( slot->policy.usage & usage ) != usage )
 c02a988:	686b      	ldr	r3, [r5, #4]
        usage &= ~PSA_KEY_USAGE_EXPORT;
 c02a98a:	bf08      	it	eq
 c02a98c:	f027 0701 	biceq.w	r7, r7, #1
    if( ( slot->policy.usage & usage ) != usage )
 c02a990:	ea37 0303 	bics.w	r3, r7, r3
 c02a994:	d113      	bne.n	c02a9be <psa_get_key_from_slot+0x62>
    if( alg != 0 && ! psa_key_policy_permits( &slot->policy, alg ) )
 c02a996:	b14e      	cbz	r6, c02a9ac <psa_get_key_from_slot+0x50>
    return( psa_key_algorithm_permits( policy->alg, alg ) ||
 c02a998:	4631      	mov	r1, r6
 c02a99a:	68a8      	ldr	r0, [r5, #8]
 c02a99c:	f7ff ffa8 	bl	c02a8f0 <psa_key_algorithm_permits>
 c02a9a0:	b920      	cbnz	r0, c02a9ac <psa_get_key_from_slot+0x50>
            psa_key_algorithm_permits( policy->alg2, alg ) );
 c02a9a2:	4631      	mov	r1, r6
 c02a9a4:	68e8      	ldr	r0, [r5, #12]
 c02a9a6:	f7ff ffa3 	bl	c02a8f0 <psa_key_algorithm_permits>
    return( psa_key_algorithm_permits( policy->alg, alg ) ||
 c02a9aa:	b140      	cbz	r0, c02a9be <psa_get_key_from_slot+0x62>
    *p_slot = slot;
 c02a9ac:	f8c8 5000 	str.w	r5, [r8]
}
 c02a9b0:	4620      	mov	r0, r4
 c02a9b2:	b002      	add	sp, #8
 c02a9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( PSA_ERROR_DOES_NOT_EXIST );
 c02a9b8:	f06f 048b 	mvn.w	r4, #139	; 0x8b
 c02a9bc:	e7f8      	b.n	c02a9b0 <psa_get_key_from_slot+0x54>
        return( PSA_ERROR_NOT_PERMITTED );
 c02a9be:	f06f 0484 	mvn.w	r4, #132	; 0x84
 c02a9c2:	e7f5      	b.n	c02a9b0 <psa_get_key_from_slot+0x54>

0c02a9c4 <prepare_raw_data_slot>:
{
 c02a9c4:	b538      	push	{r3, r4, r5, lr}
    switch( type )
 c02a9c6:	4b19      	ldr	r3, [pc, #100]	; (c02aa2c <prepare_raw_data_slot+0x68>)
{
 c02a9c8:	4615      	mov	r5, r2
    switch( type )
 c02a9ca:	4298      	cmp	r0, r3
 c02a9cc:	d01c      	beq.n	c02aa08 <prepare_raw_data_slot+0x44>
 c02a9ce:	d806      	bhi.n	c02a9de <prepare_raw_data_slot+0x1a>
 c02a9d0:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 c02a9d4:	4298      	cmp	r0, r3
 c02a9d6:	d01d      	beq.n	c02aa14 <prepare_raw_data_slot+0x50>
            return( PSA_ERROR_NOT_SUPPORTED );
 c02a9d8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c02a9dc:	e019      	b.n	c02aa12 <prepare_raw_data_slot+0x4e>
    switch( type )
 c02a9de:	f1b0 4fa2 	cmp.w	r0, #1358954496	; 0x51000000
 c02a9e2:	d002      	beq.n	c02a9ea <prepare_raw_data_slot+0x26>
 c02a9e4:	f1b0 4fa4 	cmp.w	r0, #1375731712	; 0x52000000
 c02a9e8:	d1f6      	bne.n	c02a9d8 <prepare_raw_data_slot+0x14>
    if( bits % 8 != 0 )
 c02a9ea:	f011 0407 	ands.w	r4, r1, #7
 c02a9ee:	d118      	bne.n	c02aa22 <prepare_raw_data_slot+0x5e>
    raw->bytes = PSA_BITS_TO_BYTES( bits );
 c02a9f0:	3107      	adds	r1, #7
 c02a9f2:	08c9      	lsrs	r1, r1, #3
 c02a9f4:	6069      	str	r1, [r5, #4]
    raw->data = mbedtls_calloc( 1, raw->bytes );
 c02a9f6:	2001      	movs	r0, #1
 c02a9f8:	f7ff fc3c 	bl	c02a274 <mbedtls_calloc>
 c02a9fc:	6028      	str	r0, [r5, #0]
    if( raw->data == NULL )
 c02a9fe:	b998      	cbnz	r0, c02aa28 <prepare_raw_data_slot+0x64>
        raw->bytes = 0;
 c02aa00:	6068      	str	r0, [r5, #4]
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c02aa02:	f06f 008c 	mvn.w	r0, #140	; 0x8c
 c02aa06:	e004      	b.n	c02aa12 <prepare_raw_data_slot+0x4e>
            if( bits == 0 )
 c02aa08:	2900      	cmp	r1, #0
 c02aa0a:	d1ee      	bne.n	c02a9ea <prepare_raw_data_slot+0x26>
                return( PSA_SUCCESS );
 c02aa0c:	4608      	mov	r0, r1
                raw->data = NULL;
 c02aa0e:	e9c2 1100 	strd	r1, r1, [r2]
}
 c02aa12:	bd38      	pop	{r3, r4, r5, pc}
            if( bits != 128 && bits != 192 && bits != 256 )
 c02aa14:	f021 0340 	bic.w	r3, r1, #64	; 0x40
 c02aa18:	2b80      	cmp	r3, #128	; 0x80
 c02aa1a:	d0e6      	beq.n	c02a9ea <prepare_raw_data_slot+0x26>
 c02aa1c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 c02aa20:	d0e3      	beq.n	c02a9ea <prepare_raw_data_slot+0x26>
                return( PSA_ERROR_INVALID_ARGUMENT );
 c02aa22:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c02aa26:	e7f4      	b.n	c02aa12 <prepare_raw_data_slot+0x4e>
    return( PSA_SUCCESS );
 c02aa28:	4620      	mov	r0, r4
 c02aa2a:	e7f2      	b.n	c02aa12 <prepare_raw_data_slot+0x4e>
 c02aa2c:	50000001 	.word	0x50000001

0c02aa30 <psa_get_key_bits>:
    if( key_type_is_raw_bytes( slot->type ) )
 c02aa30:	6802      	ldr	r2, [r0, #0]
{
 c02aa32:	b508      	push	{r3, lr}
    return( PSA_KEY_TYPE_IS_UNSTRUCTURED( type ) );
 c02aa34:	f002 43c0 	and.w	r3, r2, #1610612736	; 0x60000000
    if( key_type_is_raw_bytes( slot->type ) )
 c02aa38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c02aa3c:	d102      	bne.n	c02aa44 <psa_get_key_bits+0x14>
        return( slot->data.raw.bytes * 8 );
 c02aa3e:	6a00      	ldr	r0, [r0, #32]
        return( PSA_BYTES_TO_BITS( mbedtls_rsa_get_len( slot->data.rsa ) ) );
 c02aa40:	00c0      	lsls	r0, r0, #3
}
 c02aa42:	bd08      	pop	{r3, pc}
    if( PSA_KEY_TYPE_IS_RSA( slot->type ) )
 c02aa44:	4b08      	ldr	r3, [pc, #32]	; (c02aa68 <psa_get_key_bits+0x38>)
 c02aa46:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 c02aa4a:	4299      	cmp	r1, r3
 c02aa4c:	d103      	bne.n	c02aa56 <psa_get_key_bits+0x26>
        return( PSA_BYTES_TO_BITS( mbedtls_rsa_get_len( slot->data.rsa ) ) );
 c02aa4e:	69c0      	ldr	r0, [r0, #28]
 c02aa50:	f7f4 fe2b 	bl	c01f6aa <mbedtls_rsa_get_len>
 c02aa54:	e7f4      	b.n	c02aa40 <psa_get_key_bits+0x10>
    if( PSA_KEY_TYPE_IS_ECC( slot->type ) )
 c02aa56:	4b05      	ldr	r3, [pc, #20]	; (c02aa6c <psa_get_key_bits+0x3c>)
 c02aa58:	4013      	ands	r3, r2
 c02aa5a:	4a05      	ldr	r2, [pc, #20]	; (c02aa70 <psa_get_key_bits+0x40>)
 c02aa5c:	4293      	cmp	r3, r2
        return( slot->data.ecp->grp.pbits );
 c02aa5e:	bf0a      	itet	eq
 c02aa60:	69c3      	ldreq	r3, [r0, #28]
    return( 0 );
 c02aa62:	2000      	movne	r0, #0
        return( slot->data.ecp->grp.pbits );
 c02aa64:	6d98      	ldreq	r0, [r3, #88]	; 0x58
 c02aa66:	e7ec      	b.n	c02aa42 <psa_get_key_bits+0x12>
 c02aa68:	60010000 	.word	0x60010000
 c02aa6c:	efff0000 	.word	0xefff0000
 c02aa70:	60030000 	.word	0x60030000

0c02aa74 <psa_internal_export_key>:
{
 c02aa74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c02aa78:	4698      	mov	r8, r3
    *data_length = 0;
 c02aa7a:	2300      	movs	r3, #0
{
 c02aa7c:	b085      	sub	sp, #20
    *data_length = 0;
 c02aa7e:	f8c8 3000 	str.w	r3, [r8]
{
 c02aa82:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 c02aa86:	6803      	ldr	r3, [r0, #0]
 c02aa88:	4614      	mov	r4, r2
 c02aa8a:	4606      	mov	r6, r0
 c02aa8c:	460d      	mov	r5, r1
 c02aa8e:	f003 42c0 	and.w	r2, r3, #1610612736	; 0x60000000
    if( export_public_key && ! PSA_KEY_TYPE_IS_ASYMMETRIC( slot->type ) )
 c02aa92:	f1b9 0f00 	cmp.w	r9, #0
 c02aa96:	d005      	beq.n	c02aaa4 <psa_internal_export_key+0x30>
 c02aa98:	f1b2 4fc0 	cmp.w	r2, #1610612736	; 0x60000000
 c02aa9c:	d01e      	beq.n	c02aadc <psa_internal_export_key+0x68>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02aa9e:	f06f 0686 	mvn.w	r6, #134	; 0x86
 c02aaa2:	e007      	b.n	c02aab4 <psa_internal_export_key+0x40>
    if( key_type_is_raw_bytes( slot->type ) )
 c02aaa4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 c02aaa8:	d118      	bne.n	c02aadc <psa_internal_export_key+0x68>
        if( slot->data.raw.bytes > data_size )
 c02aaaa:	6a02      	ldr	r2, [r0, #32]
 c02aaac:	42a2      	cmp	r2, r4
 c02aaae:	d905      	bls.n	c02aabc <psa_internal_export_key+0x48>
            return( PSA_ERROR_BUFFER_TOO_SMALL );
 c02aab0:	f06f 0689 	mvn.w	r6, #137	; 0x89
}
 c02aab4:	4630      	mov	r0, r6
 c02aab6:	b005      	add	sp, #20
 c02aab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( data_size != 0 )
 c02aabc:	b14c      	cbz	r4, c02aad2 <psa_internal_export_key+0x5e>
            memcpy( data, slot->data.raw.data, slot->data.raw.bytes );
 c02aabe:	69c1      	ldr	r1, [r0, #28]
 c02aac0:	4628      	mov	r0, r5
 c02aac2:	f7ec ff5c 	bl	c01797e <memcpy>
            memset( data + slot->data.raw.bytes, 0,
 c02aac6:	6a30      	ldr	r0, [r6, #32]
 c02aac8:	4649      	mov	r1, r9
 c02aaca:	1a22      	subs	r2, r4, r0
 c02aacc:	4428      	add	r0, r5
 c02aace:	f7ec ff7a 	bl	c0179c6 <memset>
        *data_length = slot->data.raw.bytes;
 c02aad2:	6a33      	ldr	r3, [r6, #32]
 c02aad4:	f8c8 3000 	str.w	r3, [r8]
            return( PSA_SUCCESS );
 c02aad8:	2600      	movs	r6, #0
 c02aada:	e7eb      	b.n	c02aab4 <psa_internal_export_key+0x40>
    if( PSA_KEY_TYPE_IS_ECC_KEYPAIR( slot->type ) && !export_public_key )
 c02aadc:	0c1a      	lsrs	r2, r3, #16
 c02aade:	493f      	ldr	r1, [pc, #252]	; (c02abdc <psa_internal_export_key+0x168>)
 c02aae0:	0412      	lsls	r2, r2, #16
 c02aae2:	428a      	cmp	r2, r1
 c02aae4:	d11c      	bne.n	c02ab20 <psa_internal_export_key+0xac>
 c02aae6:	f1b9 0f00 	cmp.w	r9, #0
 c02aaea:	d119      	bne.n	c02ab20 <psa_internal_export_key+0xac>
        size_t bytes = PSA_BITS_TO_BYTES( psa_get_key_bits( slot ) );
 c02aaec:	4630      	mov	r0, r6
 c02aaee:	f7ff ff9f 	bl	c02aa30 <psa_get_key_bits>
 c02aaf2:	3007      	adds	r0, #7
 c02aaf4:	08c7      	lsrs	r7, r0, #3
        if( bytes > data_size )
 c02aaf6:	42a7      	cmp	r7, r4
 c02aaf8:	d8da      	bhi.n	c02aab0 <psa_internal_export_key+0x3c>
            mbedtls_mpi_write_binary( &slot->data.ecp->d, data, bytes ) );
 c02aafa:	69f0      	ldr	r0, [r6, #28]
        status = mbedtls_to_psa_error(
 c02aafc:	463a      	mov	r2, r7
 c02aafe:	4629      	mov	r1, r5
 c02ab00:	30a0      	adds	r0, #160	; 0xa0
 c02ab02:	f7fa fa30 	bl	c024f66 <mbedtls_mpi_write_binary>
 c02ab06:	f7ff fbd3 	bl	c02a2b0 <mbedtls_to_psa_error>
        if( status != PSA_SUCCESS )
 c02ab0a:	4606      	mov	r6, r0
 c02ab0c:	2800      	cmp	r0, #0
 c02ab0e:	d1d1      	bne.n	c02aab4 <psa_internal_export_key+0x40>
        memset( data + bytes, 0, data_size - bytes );
 c02ab10:	1be2      	subs	r2, r4, r7
 c02ab12:	4649      	mov	r1, r9
 c02ab14:	19e8      	adds	r0, r5, r7
 c02ab16:	f7ec ff56 	bl	c0179c6 <memset>
        *data_length = bytes;
 c02ab1a:	f8c8 7000 	str.w	r7, [r8]
        return( PSA_SUCCESS );
 c02ab1e:	e7c9      	b.n	c02aab4 <psa_internal_export_key+0x40>
        if( PSA_KEY_TYPE_IS_RSA( slot->type ) ||
 c02ab20:	4a2f      	ldr	r2, [pc, #188]	; (c02abe0 <psa_internal_export_key+0x16c>)
 c02ab22:	f023 5180 	bic.w	r1, r3, #268435456	; 0x10000000
 c02ab26:	4291      	cmp	r1, r2
 c02ab28:	d007      	beq.n	c02ab3a <psa_internal_export_key+0xc6>
            PSA_KEY_TYPE_IS_ECC( slot->type ) )
 c02ab2a:	4a2e      	ldr	r2, [pc, #184]	; (c02abe4 <psa_internal_export_key+0x170>)
 c02ab2c:	401a      	ands	r2, r3
        if( PSA_KEY_TYPE_IS_RSA( slot->type ) ||
 c02ab2e:	4b2e      	ldr	r3, [pc, #184]	; (c02abe8 <psa_internal_export_key+0x174>)
 c02ab30:	429a      	cmp	r2, r3
 c02ab32:	d029      	beq.n	c02ab88 <psa_internal_export_key+0x114>
            return( PSA_ERROR_NOT_SUPPORTED );
 c02ab34:	f06f 0685 	mvn.w	r6, #133	; 0x85
 c02ab38:	e7bc      	b.n	c02aab4 <psa_internal_export_key+0x40>
                mbedtls_pk_init( &pk );
 c02ab3a:	a802      	add	r0, sp, #8
 c02ab3c:	f7fd fdfb 	bl	c028736 <mbedtls_pk_init>
                pk.pk_info = &mbedtls_rsa_info;
 c02ab40:	4b2a      	ldr	r3, [pc, #168]	; (c02abec <psa_internal_export_key+0x178>)
                pk.pk_info = &mbedtls_eckey_info;
 c02ab42:	9302      	str	r3, [sp, #8]
                pk.pk_ctx = slot->data.ecp;
 c02ab44:	69f3      	ldr	r3, [r6, #28]
 c02ab46:	9303      	str	r3, [sp, #12]
            if( export_public_key || PSA_KEY_TYPE_IS_PUBLIC_KEY( slot->type ) )
 c02ab48:	f1b9 0f00 	cmp.w	r9, #0
 c02ab4c:	d105      	bne.n	c02ab5a <psa_internal_export_key+0xe6>
 c02ab4e:	6833      	ldr	r3, [r6, #0]
 c02ab50:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 c02ab54:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 c02ab58:	d11b      	bne.n	c02ab92 <psa_internal_export_key+0x11e>
    c = buf + size;
 c02ab5a:	192b      	adds	r3, r5, r4
 c02ab5c:	a804      	add	r0, sp, #16
 c02ab5e:	f840 3d0c 	str.w	r3, [r0, #-12]!
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_pk_write_pubkey( &c, buf, key ) );
 c02ab62:	aa02      	add	r2, sp, #8
 c02ab64:	4629      	mov	r1, r5
 c02ab66:	f7ff f9c3 	bl	c029ef0 <mbedtls_pk_write_pubkey>
            if( ret < 0 )
 c02ab6a:	2800      	cmp	r0, #0
                ret = mbedtls_pk_write_key_der( &pk, data, data_size );
 c02ab6c:	4606      	mov	r6, r0
            if( ret < 0 )
 c02ab6e:	da16      	bge.n	c02ab9e <psa_internal_export_key+0x12a>
                if( data_size != 0 )
 c02ab70:	b124      	cbz	r4, c02ab7c <psa_internal_export_key+0x108>
                    memset( data, 0, data_size );
 c02ab72:	4622      	mov	r2, r4
 c02ab74:	2100      	movs	r1, #0
 c02ab76:	4628      	mov	r0, r5
 c02ab78:	f7ec ff25 	bl	c0179c6 <memset>
                return( mbedtls_to_psa_error( ret ) );
 c02ab7c:	4630      	mov	r0, r6
}
 c02ab7e:	b005      	add	sp, #20
 c02ab80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                return( mbedtls_to_psa_error( ret ) );
 c02ab84:	f7ff bb94 	b.w	c02a2b0 <mbedtls_to_psa_error>
                mbedtls_pk_init( &pk );
 c02ab88:	a802      	add	r0, sp, #8
 c02ab8a:	f7fd fdd4 	bl	c028736 <mbedtls_pk_init>
                pk.pk_info = &mbedtls_eckey_info;
 c02ab8e:	4b18      	ldr	r3, [pc, #96]	; (c02abf0 <psa_internal_export_key+0x17c>)
 c02ab90:	e7d7      	b.n	c02ab42 <psa_internal_export_key+0xce>
                ret = mbedtls_pk_write_key_der( &pk, data, data_size );
 c02ab92:	4622      	mov	r2, r4
 c02ab94:	4629      	mov	r1, r5
 c02ab96:	a802      	add	r0, sp, #8
 c02ab98:	f7ff fa0e 	bl	c029fb8 <mbedtls_pk_write_key_der>
 c02ab9c:	e7e5      	b.n	c02ab6a <psa_internal_export_key+0xf6>
            if( 2 * (size_t) ret <= data_size )
 c02ab9e:	ebb4 0f40 	cmp.w	r4, r0, lsl #1
 c02aba2:	d30e      	bcc.n	c02abc2 <psa_internal_export_key+0x14e>
                memcpy( data, data + data_size - ret, ret );
 c02aba4:	1a24      	subs	r4, r4, r0
 c02aba6:	442c      	add	r4, r5
 c02aba8:	4602      	mov	r2, r0
 c02abaa:	4621      	mov	r1, r4
 c02abac:	4628      	mov	r0, r5
 c02abae:	f7ec fee6 	bl	c01797e <memcpy>
                memset( data + data_size - ret, 0, ret );
 c02abb2:	4632      	mov	r2, r6
 c02abb4:	2100      	movs	r1, #0
 c02abb6:	4620      	mov	r0, r4
                memset( data + ret, 0, data_size - ret );
 c02abb8:	f7ec ff05 	bl	c0179c6 <memset>
            *data_length = ret;
 c02abbc:	f8c8 6000 	str.w	r6, [r8]
 c02abc0:	e78a      	b.n	c02aad8 <psa_internal_export_key+0x64>
            else if( (size_t) ret < data_size )
 c02abc2:	42a0      	cmp	r0, r4
 c02abc4:	d2fa      	bcs.n	c02abbc <psa_internal_export_key+0x148>
                memmove( data, data + data_size - ret, ret );
 c02abc6:	1a24      	subs	r4, r4, r0
 c02abc8:	4602      	mov	r2, r0
 c02abca:	1929      	adds	r1, r5, r4
 c02abcc:	4628      	mov	r0, r5
 c02abce:	f7ec fee1 	bl	c017994 <memmove>
                memset( data + ret, 0, data_size - ret );
 c02abd2:	4622      	mov	r2, r4
 c02abd4:	2100      	movs	r1, #0
 c02abd6:	19a8      	adds	r0, r5, r6
 c02abd8:	e7ee      	b.n	c02abb8 <psa_internal_export_key+0x144>
 c02abda:	bf00      	nop
 c02abdc:	70030000 	.word	0x70030000
 c02abe0:	60010000 	.word	0x60010000
 c02abe4:	efff0000 	.word	0xefff0000
 c02abe8:	60030000 	.word	0x60030000
 c02abec:	0c0366a4 	.word	0x0c0366a4
 c02abf0:	0c036644 	.word	0x0c036644

0c02abf4 <psa_aead_setup.part.6>:
static psa_status_t psa_aead_setup( aead_operation_t *operation,
 c02abf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c02abf6:	4604      	mov	r4, r0
    key_bits = psa_get_key_bits( operation->slot );
 c02abf8:	6800      	ldr	r0, [r0, #0]
static psa_status_t psa_aead_setup( aead_operation_t *operation,
 c02abfa:	460d      	mov	r5, r1
    key_bits = psa_get_key_bits( operation->slot );
 c02abfc:	f7ff ff18 	bl	c02aa30 <psa_get_key_bits>
        mbedtls_cipher_info_from_psa( alg, operation->slot->type, key_bits,
 c02ac00:	6821      	ldr	r1, [r4, #0]
 c02ac02:	4602      	mov	r2, r0
    key_bits = psa_get_key_bits( operation->slot );
 c02ac04:	4606      	mov	r6, r0
        mbedtls_cipher_info_from_psa( alg, operation->slot->type, key_bits,
 c02ac06:	f10d 0307 	add.w	r3, sp, #7
 c02ac0a:	6809      	ldr	r1, [r1, #0]
 c02ac0c:	4628      	mov	r0, r5
 c02ac0e:	f7ff fda9 	bl	c02a764 <mbedtls_cipher_info_from_psa>
    operation->cipher_info =
 c02ac12:	6060      	str	r0, [r4, #4]
    if( operation->cipher_info == NULL )
 c02ac14:	b138      	cbz	r0, c02ac26 <psa_aead_setup.part.6+0x32>
    switch( PSA_ALG_AEAD_WITH_TAG_LENGTH( alg, 0 ) )
 c02ac16:	4a33      	ldr	r2, [pc, #204]	; (c02ace4 <psa_aead_setup.part.6+0xf0>)
 c02ac18:	f425 537c 	bic.w	r3, r5, #16128	; 0x3f00
 c02ac1c:	4293      	cmp	r3, r2
 c02ac1e:	d005      	beq.n	c02ac2c <psa_aead_setup.part.6+0x38>
 c02ac20:	3201      	adds	r2, #1
 c02ac22:	4293      	cmp	r3, r2
 c02ac24:	d03c      	beq.n	c02aca0 <psa_aead_setup.part.6+0xac>
            return( PSA_ERROR_NOT_SUPPORTED );
 c02ac26:	f06f 0685 	mvn.w	r6, #133	; 0x85
 c02ac2a:	e00e      	b.n	c02ac4a <psa_aead_setup.part.6+0x56>
            operation->core_alg = PSA_ALG_CCM;
 c02ac2c:	4b2e      	ldr	r3, [pc, #184]	; (c02ace8 <psa_aead_setup.part.6+0xf4>)
            if( PSA_BLOCK_CIPHER_BLOCK_SIZE( operation->slot->type ) != 16 )
 c02ac2e:	4a2f      	ldr	r2, [pc, #188]	; (c02acec <psa_aead_setup.part.6+0xf8>)
            operation->core_alg = PSA_ALG_CCM;
 c02ac30:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
            operation->full_tag_length = 16;
 c02ac34:	2310      	movs	r3, #16
 c02ac36:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
            if( PSA_BLOCK_CIPHER_BLOCK_SIZE( operation->slot->type ) != 16 )
 c02ac3a:	6823      	ldr	r3, [r4, #0]
 c02ac3c:	681b      	ldr	r3, [r3, #0]
 c02ac3e:	f023 0302 	bic.w	r3, r3, #2
 c02ac42:	4293      	cmp	r3, r2
 c02ac44:	d004      	beq.n	c02ac50 <psa_aead_setup.part.6+0x5c>
                return( PSA_ERROR_INVALID_ARGUMENT );
 c02ac46:	f06f 0686 	mvn.w	r6, #134	; 0x86
}
 c02ac4a:	4630      	mov	r0, r6
 c02ac4c:	b003      	add	sp, #12
 c02ac4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            mbedtls_ccm_init( &operation->ctx.ccm );
 c02ac50:	f104 0708 	add.w	r7, r4, #8
 c02ac54:	4638      	mov	r0, r7
 c02ac56:	f7f1 ffbb 	bl	c01cbd0 <mbedtls_ccm_init>
                                    operation->slot->data.raw.data,
 c02ac5a:	6822      	ldr	r2, [r4, #0]
            status = mbedtls_to_psa_error(
 c02ac5c:	4633      	mov	r3, r6
 c02ac5e:	69d2      	ldr	r2, [r2, #28]
 c02ac60:	f89d 1007 	ldrb.w	r1, [sp, #7]
 c02ac64:	4638      	mov	r0, r7
 c02ac66:	f7f1 ffb7 	bl	c01cbd8 <mbedtls_ccm_setkey>
 c02ac6a:	f7ff fb21 	bl	c02a2b0 <mbedtls_to_psa_error>
            if( status != 0 )
 c02ac6e:	4606      	mov	r6, r0
 c02ac70:	bb98      	cbnz	r0, c02acda <psa_aead_setup.part.6+0xe6>
    if( PSA_AEAD_TAG_LENGTH( alg ) > operation->full_tag_length )
 c02ac72:	f005 43fe 	and.w	r3, r5, #2130706432	; 0x7f000000
 c02ac76:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 c02ac7a:	bf18      	it	ne
 c02ac7c:	2200      	movne	r2, #0
 c02ac7e:	f894 114c 	ldrb.w	r1, [r4, #332]	; 0x14c
 c02ac82:	bf08      	it	eq
 c02ac84:	f3c5 2205 	ubfxeq	r2, r5, #8, #6
 c02ac88:	4291      	cmp	r1, r2
 c02ac8a:	d324      	bcc.n	c02acd6 <psa_aead_setup.part.6+0xe2>
    operation->tag_length = PSA_AEAD_TAG_LENGTH( alg );
 c02ac8c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 c02ac90:	bf14      	ite	ne
 c02ac92:	2500      	movne	r5, #0
 c02ac94:	f3c5 2505 	ubfxeq	r5, r5, #8, #6
 c02ac98:	f884 514d 	strb.w	r5, [r4, #333]	; 0x14d
    return( PSA_SUCCESS );
 c02ac9c:	2600      	movs	r6, #0
 c02ac9e:	e7d4      	b.n	c02ac4a <psa_aead_setup.part.6+0x56>
            operation->core_alg = PSA_ALG_GCM;
 c02aca0:	4b13      	ldr	r3, [pc, #76]	; (c02acf0 <psa_aead_setup.part.6+0xfc>)
            if( PSA_BLOCK_CIPHER_BLOCK_SIZE( operation->slot->type ) != 16 )
 c02aca2:	4a12      	ldr	r2, [pc, #72]	; (c02acec <psa_aead_setup.part.6+0xf8>)
            operation->core_alg = PSA_ALG_GCM;
 c02aca4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
            operation->full_tag_length = 16;
 c02aca8:	2310      	movs	r3, #16
 c02acaa:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
            if( PSA_BLOCK_CIPHER_BLOCK_SIZE( operation->slot->type ) != 16 )
 c02acae:	6823      	ldr	r3, [r4, #0]
 c02acb0:	681b      	ldr	r3, [r3, #0]
 c02acb2:	f023 0302 	bic.w	r3, r3, #2
 c02acb6:	4293      	cmp	r3, r2
 c02acb8:	d1c5      	bne.n	c02ac46 <psa_aead_setup.part.6+0x52>
            mbedtls_gcm_init( &operation->ctx.gcm );
 c02acba:	f104 0708 	add.w	r7, r4, #8
 c02acbe:	4638      	mov	r0, r7
 c02acc0:	f7f3 fe22 	bl	c01e908 <mbedtls_gcm_init>
                                    operation->slot->data.raw.data,
 c02acc4:	6822      	ldr	r2, [r4, #0]
            status = mbedtls_to_psa_error(
 c02acc6:	4633      	mov	r3, r6
 c02acc8:	69d2      	ldr	r2, [r2, #28]
 c02acca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 c02acce:	4638      	mov	r0, r7
 c02acd0:	f7f3 fe20 	bl	c01e914 <mbedtls_gcm_setkey>
 c02acd4:	e7cd      	b.n	c02ac72 <psa_aead_setup.part.6+0x7e>
        status = PSA_ERROR_INVALID_ARGUMENT;
 c02acd6:	f06f 0686 	mvn.w	r6, #134	; 0x86
    psa_aead_abort( operation );
 c02acda:	4620      	mov	r0, r4
 c02acdc:	f7ff fda6 	bl	c02a82c <psa_aead_abort>
 c02ace0:	e7b3      	b.n	c02ac4a <psa_aead_setup.part.6+0x56>
 c02ace2:	bf00      	nop
 c02ace4:	06000001 	.word	0x06000001
 c02ace8:	06001001 	.word	0x06001001
 c02acec:	40000001 	.word	0x40000001
 c02acf0:	06001002 	.word	0x06001002

0c02acf4 <psa_rsa_oaep_set_padding_mode>:
    psa_algorithm_t hash_alg = PSA_ALG_RSA_OAEP_GET_HASH( alg );
 c02acf4:	4b0e      	ldr	r3, [pc, #56]	; (c02ad30 <psa_rsa_oaep_set_padding_mode+0x3c>)
 c02acf6:	f020 02ff 	bic.w	r2, r0, #255	; 0xff
 c02acfa:	429a      	cmp	r2, r3
 c02acfc:	bf12      	itee	ne
 c02acfe:	2000      	movne	r0, #0
 c02ad00:	b2c0      	uxtbeq	r0, r0
 c02ad02:	f040 7080 	orreq.w	r0, r0, #16777216	; 0x1000000
 c02ad06:	f100 407f 	add.w	r0, r0, #4278190080	; 0xff000000
 c02ad0a:	3805      	subs	r0, #5
 c02ad0c:	2806      	cmp	r0, #6
 c02ad0e:	bf98      	it	ls
 c02ad10:	4b08      	ldrls	r3, [pc, #32]	; (c02ad34 <psa_rsa_oaep_set_padding_mode+0x40>)
{
 c02ad12:	b510      	push	{r4, lr}
 c02ad14:	bf94      	ite	ls
 c02ad16:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    psa_algorithm_t hash_alg = PSA_ALG_RSA_OAEP_GET_HASH( alg );
 c02ad1a:	2000      	movhi	r0, #0
{
 c02ad1c:	460c      	mov	r4, r1
    mbedtls_md_type_t md_alg = mbedtls_md_get_type( md_info );
 c02ad1e:	f7fd f9e8 	bl	c0280f2 <mbedtls_md_get_type>
    mbedtls_rsa_set_padding( rsa, MBEDTLS_RSA_PKCS_V21, md_alg );
 c02ad22:	2101      	movs	r1, #1
 c02ad24:	4602      	mov	r2, r0
 c02ad26:	4620      	mov	r0, r4
}
 c02ad28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_rsa_set_padding( rsa, MBEDTLS_RSA_PKCS_V21, md_alg );
 c02ad2c:	f7f4 bcba 	b.w	c01f6a4 <mbedtls_rsa_set_padding>
 c02ad30:	12030000 	.word	0x12030000
 c02ad34:	0c0368a4 	.word	0x0c0368a4

0c02ad38 <psa_rsa_decode_md_type>:
{
 c02ad38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH( alg );
 c02ad3c:	f420 3380 	bic.w	r3, r0, #65536	; 0x10000
{
 c02ad40:	4690      	mov	r8, r2
    psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH( alg );
 c02ad42:	4a1f      	ldr	r2, [pc, #124]	; (c02adc0 <psa_rsa_decode_md_type+0x88>)
 c02ad44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 c02ad48:	4293      	cmp	r3, r2
{
 c02ad4a:	4604      	mov	r4, r0
 c02ad4c:	460f      	mov	r7, r1
    psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH( alg );
 c02ad4e:	f020 06ff 	bic.w	r6, r0, #255	; 0xff
 c02ad52:	d007      	beq.n	c02ad64 <psa_rsa_decode_md_type+0x2c>
 c02ad54:	f420 3340 	bic.w	r3, r0, #196608	; 0x30000
 c02ad58:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 c02ad5c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 c02ad60:	4293      	cmp	r3, r2
 c02ad62:	d120      	bne.n	c02ada6 <psa_rsa_decode_md_type+0x6e>
 c02ad64:	f014 03ff 	ands.w	r3, r4, #255	; 0xff
 c02ad68:	d001      	beq.n	c02ad6e <psa_rsa_decode_md_type+0x36>
 c02ad6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c02ad6e:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 c02ad72:	3b05      	subs	r3, #5
 c02ad74:	2b06      	cmp	r3, #6
 c02ad76:	bf8e      	itee	hi
 c02ad78:	2500      	movhi	r5, #0
 c02ad7a:	4a12      	ldrls	r2, [pc, #72]	; (c02adc4 <psa_rsa_decode_md_type+0x8c>)
 c02ad7c:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    *md_alg = mbedtls_md_get_type( md_info );
 c02ad80:	4628      	mov	r0, r5
 c02ad82:	f7fd f9b6 	bl	c0280f2 <mbedtls_md_get_type>
    if( PSA_ALG_IS_RSA_PKCS1V15_SIGN( alg ) &&
 c02ad86:	4b0e      	ldr	r3, [pc, #56]	; (c02adc0 <psa_rsa_decode_md_type+0x88>)
    *md_alg = mbedtls_md_get_type( md_info );
 c02ad88:	f888 0000 	strb.w	r0, [r8]
    if( PSA_ALG_IS_RSA_PKCS1V15_SIGN( alg ) &&
 c02ad8c:	429e      	cmp	r6, r3
 c02ad8e:	d10c      	bne.n	c02adaa <psa_rsa_decode_md_type+0x72>
 c02ad90:	42b4      	cmp	r4, r6
 c02ad92:	d00e      	beq.n	c02adb2 <psa_rsa_decode_md_type+0x7a>
        if( md_info == NULL )
 c02ad94:	b185      	cbz	r5, c02adb8 <psa_rsa_decode_md_type+0x80>
        if( mbedtls_md_get_size( md_info ) != hash_length )
 c02ad96:	4628      	mov	r0, r5
 c02ad98:	f7fd f9a8 	bl	c0280ec <mbedtls_md_get_size>
 c02ad9c:	42b8      	cmp	r0, r7
 c02ad9e:	d008      	beq.n	c02adb2 <psa_rsa_decode_md_type+0x7a>
            return( PSA_ERROR_INVALID_ARGUMENT );
 c02ada0:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c02ada4:	e006      	b.n	c02adb4 <psa_rsa_decode_md_type+0x7c>
    psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH( alg );
 c02ada6:	2300      	movs	r3, #0
 c02ada8:	e7e1      	b.n	c02ad6e <psa_rsa_decode_md_type+0x36>
    if( PSA_ALG_IS_RSA_PSS( alg ) )
 c02adaa:	4b07      	ldr	r3, [pc, #28]	; (c02adc8 <psa_rsa_decode_md_type+0x90>)
 c02adac:	429e      	cmp	r6, r3
 c02adae:	d100      	bne.n	c02adb2 <psa_rsa_decode_md_type+0x7a>
        if( md_info == NULL )
 c02adb0:	b115      	cbz	r5, c02adb8 <psa_rsa_decode_md_type+0x80>
    return( PSA_SUCCESS );
 c02adb2:	2000      	movs	r0, #0
}
 c02adb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return( PSA_ERROR_NOT_SUPPORTED );
 c02adb8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c02adbc:	e7fa      	b.n	c02adb4 <psa_rsa_decode_md_type+0x7c>
 c02adbe:	bf00      	nop
 c02adc0:	10020000 	.word	0x10020000
 c02adc4:	0c0368a4 	.word	0x0c0368a4
 c02adc8:	10030000 	.word	0x10030000

0c02adcc <psa_import_ec_public_key>:
{
 c02adcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c02add0:	461e      	mov	r6, r3
 c02add2:	2300      	movs	r3, #0
 c02add4:	3812      	subs	r0, #18
 c02add6:	b280      	uxth	r0, r0
 c02add8:	280c      	cmp	r0, #12
 c02adda:	4691      	mov	r9, r2
 c02addc:	bf98      	it	ls
 c02adde:	4a1d      	ldrls	r2, [pc, #116]	; (c02ae54 <psa_import_ec_public_key+0x88>)
 c02ade0:	4688      	mov	r8, r1
 c02ade2:	bf98      	it	ls
 c02ade4:	5c14      	ldrbls	r4, [r2, r0]
    *p_ecp = NULL;
 c02ade6:	6033      	str	r3, [r6, #0]
    ecp = mbedtls_calloc( 1, sizeof( *ecp ) );
 c02ade8:	f04f 01d0 	mov.w	r1, #208	; 0xd0
 c02adec:	f04f 0001 	mov.w	r0, #1
{
 c02adf0:	bf88      	it	hi
 c02adf2:	461c      	movhi	r4, r3
    ecp = mbedtls_calloc( 1, sizeof( *ecp ) );
 c02adf4:	f7ff fa3e 	bl	c02a274 <mbedtls_calloc>
    if( ecp == NULL )
 c02adf8:	4605      	mov	r5, r0
 c02adfa:	b340      	cbz	r0, c02ae4e <psa_import_ec_public_key+0x82>
    mbedtls_ecp_keypair_init( ecp );
 c02adfc:	f7f2 fa6a 	bl	c01d2d4 <mbedtls_ecp_keypair_init>
    status = mbedtls_to_psa_error(
 c02ae00:	4621      	mov	r1, r4
 c02ae02:	4628      	mov	r0, r5
 c02ae04:	f7f3 fb44 	bl	c01e490 <mbedtls_ecp_group_load>
 c02ae08:	f7ff fa52 	bl	c02a2b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c02ae0c:	4604      	mov	r4, r0
 c02ae0e:	b9b8      	cbnz	r0, c02ae40 <psa_import_ec_public_key+0x74>
    status = mbedtls_to_psa_error(
 c02ae10:	f105 07ac 	add.w	r7, r5, #172	; 0xac
 c02ae14:	464b      	mov	r3, r9
 c02ae16:	4642      	mov	r2, r8
 c02ae18:	4639      	mov	r1, r7
 c02ae1a:	4628      	mov	r0, r5
 c02ae1c:	f7f2 fb8e 	bl	c01d53c <mbedtls_ecp_point_read_binary>
 c02ae20:	f7ff fa46 	bl	c02a2b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c02ae24:	4604      	mov	r4, r0
 c02ae26:	b958      	cbnz	r0, c02ae40 <psa_import_ec_public_key+0x74>
    status = mbedtls_to_psa_error(
 c02ae28:	4639      	mov	r1, r7
 c02ae2a:	4628      	mov	r0, r5
 c02ae2c:	f7f2 fbf6 	bl	c01d61c <mbedtls_ecp_check_pubkey>
 c02ae30:	f7ff fa3e 	bl	c02a2b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c02ae34:	4604      	mov	r4, r0
 c02ae36:	b918      	cbnz	r0, c02ae40 <psa_import_ec_public_key+0x74>
    *p_ecp = ecp;
 c02ae38:	6035      	str	r5, [r6, #0]
}
 c02ae3a:	4620      	mov	r0, r4
 c02ae3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        mbedtls_ecp_keypair_free( ecp );
 c02ae40:	4628      	mov	r0, r5
 c02ae42:	f7f2 fac9 	bl	c01d3d8 <mbedtls_ecp_keypair_free>
        mbedtls_free( ecp );
 c02ae46:	4628      	mov	r0, r5
 c02ae48:	f7ff fa1a 	bl	c02a280 <mbedtls_free>
    return( status );
 c02ae4c:	e7f5      	b.n	c02ae3a <psa_import_ec_public_key+0x6e>
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c02ae4e:	f06f 048c 	mvn.w	r4, #140	; 0x8c
 c02ae52:	e7f2      	b.n	c02ae3a <psa_import_ec_public_key+0x6e>
 c02ae54:	0c036895 	.word	0x0c036895

0c02ae58 <psa_restrict_key_policy>:
{
 c02ae58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        psa_key_policy_algorithm_intersection( policy->alg, constraint->alg );
 c02ae5c:	6846      	ldr	r6, [r0, #4]
 c02ae5e:	f8d1 a004 	ldr.w	sl, [r1, #4]
{
 c02ae62:	4604      	mov	r4, r0
    if( alg1 == alg2 )
 c02ae64:	4556      	cmp	r6, sl
{
 c02ae66:	4688      	mov	r8, r1
    if( alg1 == alg2 )
 c02ae68:	d021      	beq.n	c02aeae <psa_restrict_key_policy+0x56>
 c02ae6a:	4651      	mov	r1, sl
 c02ae6c:	4630      	mov	r0, r6
 c02ae6e:	f7ff fcef 	bl	c02a850 <psa_key_policy_algorithm_intersection.part.1>
 c02ae72:	4607      	mov	r7, r0
        psa_key_policy_algorithm_intersection( policy->alg2, constraint->alg2 );
 c02ae74:	68a5      	ldr	r5, [r4, #8]
 c02ae76:	f8d8 9008 	ldr.w	r9, [r8, #8]
    if( alg1 == alg2 )
 c02ae7a:	454d      	cmp	r5, r9
 c02ae7c:	d019      	beq.n	c02aeb2 <psa_restrict_key_policy+0x5a>
 c02ae7e:	4649      	mov	r1, r9
 c02ae80:	4628      	mov	r0, r5
 c02ae82:	f7ff fce5 	bl	c02a850 <psa_key_policy_algorithm_intersection.part.1>
    if( intersection_alg == 0 && policy->alg != 0 && constraint->alg != 0 )
 c02ae86:	b91f      	cbnz	r7, c02ae90 <psa_restrict_key_policy+0x38>
 c02ae88:	b116      	cbz	r6, c02ae90 <psa_restrict_key_policy+0x38>
 c02ae8a:	f1ba 0f00 	cmp.w	sl, #0
 c02ae8e:	d112      	bne.n	c02aeb6 <psa_restrict_key_policy+0x5e>
    if( intersection_alg2 == 0 && policy->alg2 != 0 && constraint->alg2 != 0 )
 c02ae90:	b918      	cbnz	r0, c02ae9a <psa_restrict_key_policy+0x42>
 c02ae92:	b115      	cbz	r5, c02ae9a <psa_restrict_key_policy+0x42>
 c02ae94:	f1b9 0f00 	cmp.w	r9, #0
 c02ae98:	d10d      	bne.n	c02aeb6 <psa_restrict_key_policy+0x5e>
    policy->usage &= constraint->usage;
 c02ae9a:	f8d8 2000 	ldr.w	r2, [r8]
    policy->alg2 = intersection_alg2;
 c02ae9e:	60a0      	str	r0, [r4, #8]
    return( PSA_SUCCESS );
 c02aea0:	2000      	movs	r0, #0
    policy->usage &= constraint->usage;
 c02aea2:	6823      	ldr	r3, [r4, #0]
 c02aea4:	4013      	ands	r3, r2
    policy->alg = intersection_alg;
 c02aea6:	e9c4 3700 	strd	r3, r7, [r4]
}
 c02aeaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( alg1 == alg2 )
 c02aeae:	4637      	mov	r7, r6
 c02aeb0:	e7e0      	b.n	c02ae74 <psa_restrict_key_policy+0x1c>
 c02aeb2:	4628      	mov	r0, r5
 c02aeb4:	e7e7      	b.n	c02ae86 <psa_restrict_key_policy+0x2e>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02aeb6:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c02aeba:	e7f6      	b.n	c02aeaa <psa_restrict_key_policy+0x52>

0c02aebc <psa_import_key_into_slot>:
{
 c02aebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( key_type_is_raw_bytes( slot->type ) )
 c02aec0:	6804      	ldr	r4, [r0, #0]
{
 c02aec2:	b089      	sub	sp, #36	; 0x24
    return( PSA_KEY_TYPE_IS_UNSTRUCTURED( type ) );
 c02aec4:	f004 43c0 	and.w	r3, r4, #1610612736	; 0x60000000
    if( key_type_is_raw_bytes( slot->type ) )
 c02aec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 c02aecc:	4606      	mov	r6, r0
 c02aece:	460f      	mov	r7, r1
 c02aed0:	4615      	mov	r5, r2
    if( key_type_is_raw_bytes( slot->type ) )
 c02aed2:	d115      	bne.n	c02af00 <psa_import_key_into_slot+0x44>
        if( data_length > SIZE_MAX / 8 )
 c02aed4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 c02aed8:	f080 8118 	bcs.w	c02b10c <psa_import_key_into_slot+0x250>
        status = prepare_raw_data_slot( slot->type,
 c02aedc:	f100 021c 	add.w	r2, r0, #28
 c02aee0:	00e9      	lsls	r1, r5, #3
 c02aee2:	4620      	mov	r0, r4
 c02aee4:	f7ff fd6e 	bl	c02a9c4 <prepare_raw_data_slot>
        if( status != PSA_SUCCESS )
 c02aee8:	4604      	mov	r4, r0
 c02aeea:	b928      	cbnz	r0, c02aef8 <psa_import_key_into_slot+0x3c>
        if( data_length != 0 )
 c02aeec:	b125      	cbz	r5, c02aef8 <psa_import_key_into_slot+0x3c>
            memcpy( slot->data.raw.data, data, data_length );
 c02aeee:	462a      	mov	r2, r5
 c02aef0:	4639      	mov	r1, r7
 c02aef2:	69f0      	ldr	r0, [r6, #28]
 c02aef4:	f7ec fd43 	bl	c01797e <memcpy>
}
 c02aef8:	4620      	mov	r0, r4
 c02aefa:	b009      	add	sp, #36	; 0x24
 c02aefc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( PSA_KEY_TYPE_IS_ECC_KEYPAIR( slot->type ) )
 c02af00:	0c23      	lsrs	r3, r4, #16
 c02af02:	4884      	ldr	r0, [pc, #528]	; (c02b114 <psa_import_key_into_slot+0x258>)
 c02af04:	041b      	lsls	r3, r3, #16
 c02af06:	4283      	cmp	r3, r0
 c02af08:	f040 809e 	bne.w	c02b048 <psa_import_key_into_slot+0x18c>
        status = psa_import_ec_private_key( PSA_KEY_TYPE_GET_CURVE( slot->type ),
 c02af0c:	b2a0      	uxth	r0, r4
 c02af0e:	f1a0 0312 	sub.w	r3, r0, #18
 c02af12:	b29b      	uxth	r3, r3
 c02af14:	2b0c      	cmp	r3, #12
 c02af16:	d872      	bhi.n	c02affe <psa_import_key_into_slot+0x142>
 c02af18:	4a7f      	ldr	r2, [pc, #508]	; (c02b118 <psa_import_key_into_slot+0x25c>)
 c02af1a:	5cd4      	ldrb	r4, [r2, r3]
    if( PSA_BITS_TO_BYTES( PSA_ECC_CURVE_BITS( curve ) ) != data_length )
 c02af1c:	1e82      	subs	r2, r0, #2
 c02af1e:	2a01      	cmp	r2, #1
 c02af20:	d971      	bls.n	c02b006 <psa_import_key_into_slot+0x14a>
 c02af22:	1f02      	subs	r2, r0, #4
 c02af24:	2a01      	cmp	r2, #1
 c02af26:	d970      	bls.n	c02b00a <psa_import_key_into_slot+0x14e>
 c02af28:	1f82      	subs	r2, r0, #6
 c02af2a:	2a02      	cmp	r2, #2
 c02af2c:	d96f      	bls.n	c02b00e <psa_import_key_into_slot+0x152>
 c02af2e:	f1a0 0209 	sub.w	r2, r0, #9
 c02af32:	2a01      	cmp	r2, #1
 c02af34:	d96d      	bls.n	c02b012 <psa_import_key_into_slot+0x156>
 c02af36:	f1a0 020b 	sub.w	r2, r0, #11
 c02af3a:	2a01      	cmp	r2, #1
 c02af3c:	d96b      	bls.n	c02b016 <psa_import_key_into_slot+0x15a>
 c02af3e:	f1a0 020d 	sub.w	r2, r0, #13
 c02af42:	2a01      	cmp	r2, #1
 c02af44:	d969      	bls.n	c02b01a <psa_import_key_into_slot+0x15e>
 c02af46:	f1a0 020f 	sub.w	r2, r0, #15
 c02af4a:	2a02      	cmp	r2, #2
 c02af4c:	d967      	bls.n	c02b01e <psa_import_key_into_slot+0x162>
 c02af4e:	2b01      	cmp	r3, #1
 c02af50:	d967      	bls.n	c02b022 <psa_import_key_into_slot+0x166>
 c02af52:	f1a0 0314 	sub.w	r3, r0, #20
 c02af56:	2b01      	cmp	r3, #1
 c02af58:	d965      	bls.n	c02b026 <psa_import_key_into_slot+0x16a>
 c02af5a:	f1a0 0316 	sub.w	r3, r0, #22
 c02af5e:	2b01      	cmp	r3, #1
 c02af60:	d969      	bls.n	c02b036 <psa_import_key_into_slot+0x17a>
 c02af62:	2818      	cmp	r0, #24
 c02af64:	d063      	beq.n	c02b02e <psa_import_key_into_slot+0x172>
 c02af66:	2819      	cmp	r0, #25
 c02af68:	d05f      	beq.n	c02b02a <psa_import_key_into_slot+0x16e>
 c02af6a:	281a      	cmp	r0, #26
 c02af6c:	d063      	beq.n	c02b036 <psa_import_key_into_slot+0x17a>
 c02af6e:	281b      	cmp	r0, #27
 c02af70:	d05d      	beq.n	c02b02e <psa_import_key_into_slot+0x172>
 c02af72:	281c      	cmp	r0, #28
 c02af74:	d05d      	beq.n	c02b032 <psa_import_key_into_slot+0x176>
 c02af76:	281d      	cmp	r0, #29
 c02af78:	d05d      	beq.n	c02b036 <psa_import_key_into_slot+0x17a>
 c02af7a:	281e      	cmp	r0, #30
 c02af7c:	bf14      	ite	ne
 c02af7e:	2300      	movne	r3, #0
 c02af80:	2338      	moveq	r3, #56	; 0x38
 c02af82:	429d      	cmp	r5, r3
 c02af84:	f040 80bc 	bne.w	c02b100 <psa_import_key_into_slot+0x244>
    *p_ecp = NULL;
 c02af88:	2300      	movs	r3, #0
    ecp = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 c02af8a:	21d0      	movs	r1, #208	; 0xd0
    *p_ecp = NULL;
 c02af8c:	61f3      	str	r3, [r6, #28]
    ecp = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 c02af8e:	2001      	movs	r0, #1
 c02af90:	f7ff f970 	bl	c02a274 <mbedtls_calloc>
    if( ecp == NULL )
 c02af94:	4680      	mov	r8, r0
 c02af96:	2800      	cmp	r0, #0
 c02af98:	f000 80b5 	beq.w	c02b106 <psa_import_key_into_slot+0x24a>
    mbedtls_ecp_keypair_init( ecp );
 c02af9c:	f7f2 f99a 	bl	c01d2d4 <mbedtls_ecp_keypair_init>
    status = mbedtls_to_psa_error(
 c02afa0:	4621      	mov	r1, r4
 c02afa2:	4640      	mov	r0, r8
 c02afa4:	f7f3 fa74 	bl	c01e490 <mbedtls_ecp_group_load>
 c02afa8:	f7ff f982 	bl	c02a2b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c02afac:	4604      	mov	r4, r0
 c02afae:	2800      	cmp	r0, #0
 c02afb0:	d143      	bne.n	c02b03a <psa_import_key_into_slot+0x17e>
    status = mbedtls_to_psa_error(
 c02afb2:	f108 09a0 	add.w	r9, r8, #160	; 0xa0
 c02afb6:	462a      	mov	r2, r5
 c02afb8:	4639      	mov	r1, r7
 c02afba:	4648      	mov	r0, r9
 c02afbc:	f7f9 ff66 	bl	c024e8c <mbedtls_mpi_read_binary>
 c02afc0:	f7ff f976 	bl	c02a2b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c02afc4:	4604      	mov	r4, r0
 c02afc6:	bbc0      	cbnz	r0, c02b03a <psa_import_key_into_slot+0x17e>
    status = mbedtls_to_psa_error(
 c02afc8:	4649      	mov	r1, r9
 c02afca:	4640      	mov	r0, r8
 c02afcc:	f7f2 fbd4 	bl	c01d778 <mbedtls_ecp_check_privkey>
 c02afd0:	f7ff f96e 	bl	c02a2b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c02afd4:	4604      	mov	r4, r0
 c02afd6:	bb80      	cbnz	r0, c02b03a <psa_import_key_into_slot+0x17e>
    status = mbedtls_to_psa_error(
 c02afd8:	4b50      	ldr	r3, [pc, #320]	; (c02b11c <psa_import_key_into_slot+0x260>)
 c02afda:	464a      	mov	r2, r9
 c02afdc:	9301      	str	r3, [sp, #4]
 c02afde:	4b50      	ldr	r3, [pc, #320]	; (c02b120 <psa_import_key_into_slot+0x264>)
 c02afe0:	f108 01ac 	add.w	r1, r8, #172	; 0xac
 c02afe4:	9300      	str	r3, [sp, #0]
 c02afe6:	4640      	mov	r0, r8
 c02afe8:	f108 0328 	add.w	r3, r8, #40	; 0x28
 c02afec:	f7f2 ff3c 	bl	c01de68 <mbedtls_ecp_mul>
 c02aff0:	f7ff f95e 	bl	c02a2b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c02aff4:	4604      	mov	r4, r0
 c02aff6:	bb00      	cbnz	r0, c02b03a <psa_import_key_into_slot+0x17e>
    *p_ecp = ecp;
 c02aff8:	f8c6 801c 	str.w	r8, [r6, #28]
 c02affc:	e77c      	b.n	c02aef8 <psa_import_key_into_slot+0x3c>
    if( PSA_BITS_TO_BYTES( PSA_ECC_CURVE_BITS( curve ) ) != data_length )
 c02affe:	2801      	cmp	r0, #1
 c02b000:	f04f 0400 	mov.w	r4, #0
 c02b004:	d18a      	bne.n	c02af1c <psa_import_key_into_slot+0x60>
 c02b006:	2315      	movs	r3, #21
 c02b008:	e7bb      	b.n	c02af82 <psa_import_key_into_slot+0xc6>
 c02b00a:	2319      	movs	r3, #25
 c02b00c:	e7b9      	b.n	c02af82 <psa_import_key_into_slot+0xc6>
 c02b00e:	231e      	movs	r3, #30
 c02b010:	e7b7      	b.n	c02af82 <psa_import_key_into_slot+0xc6>
 c02b012:	2324      	movs	r3, #36	; 0x24
 c02b014:	e7b5      	b.n	c02af82 <psa_import_key_into_slot+0xc6>
 c02b016:	2334      	movs	r3, #52	; 0x34
 c02b018:	e7b3      	b.n	c02af82 <psa_import_key_into_slot+0xc6>
 c02b01a:	2348      	movs	r3, #72	; 0x48
 c02b01c:	e7b1      	b.n	c02af82 <psa_import_key_into_slot+0xc6>
 c02b01e:	2314      	movs	r3, #20
 c02b020:	e7af      	b.n	c02af82 <psa_import_key_into_slot+0xc6>
 c02b022:	2318      	movs	r3, #24
 c02b024:	e7ad      	b.n	c02af82 <psa_import_key_into_slot+0xc6>
 c02b026:	231c      	movs	r3, #28
 c02b028:	e7ab      	b.n	c02af82 <psa_import_key_into_slot+0xc6>
 c02b02a:	2342      	movs	r3, #66	; 0x42
 c02b02c:	e7a9      	b.n	c02af82 <psa_import_key_into_slot+0xc6>
 c02b02e:	2330      	movs	r3, #48	; 0x30
 c02b030:	e7a7      	b.n	c02af82 <psa_import_key_into_slot+0xc6>
 c02b032:	2340      	movs	r3, #64	; 0x40
 c02b034:	e7a5      	b.n	c02af82 <psa_import_key_into_slot+0xc6>
 c02b036:	2320      	movs	r3, #32
 c02b038:	e7a3      	b.n	c02af82 <psa_import_key_into_slot+0xc6>
        mbedtls_ecp_keypair_free( ecp );
 c02b03a:	4640      	mov	r0, r8
 c02b03c:	f7f2 f9cc 	bl	c01d3d8 <mbedtls_ecp_keypair_free>
        mbedtls_free( ecp );
 c02b040:	4640      	mov	r0, r8
 c02b042:	f7ff f91d 	bl	c02a280 <mbedtls_free>
 c02b046:	e757      	b.n	c02aef8 <psa_import_key_into_slot+0x3c>
    else if( PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY( slot->type ) )
 c02b048:	4836      	ldr	r0, [pc, #216]	; (c02b124 <psa_import_key_into_slot+0x268>)
 c02b04a:	4283      	cmp	r3, r0
 c02b04c:	d106      	bne.n	c02b05c <psa_import_key_into_slot+0x1a0>
        status = psa_import_ec_public_key(
 c02b04e:	b2a0      	uxth	r0, r4
 c02b050:	f106 031c 	add.w	r3, r6, #28
 c02b054:	f7ff feba 	bl	c02adcc <psa_import_ec_public_key>
 c02b058:	4604      	mov	r4, r0
 c02b05a:	e74d      	b.n	c02aef8 <psa_import_key_into_slot+0x3c>
    if( PSA_KEY_TYPE_IS_RSA( slot->type ) )
 c02b05c:	4b32      	ldr	r3, [pc, #200]	; (c02b128 <psa_import_key_into_slot+0x26c>)
 c02b05e:	f024 5280 	bic.w	r2, r4, #268435456	; 0x10000000
 c02b062:	429a      	cmp	r2, r3
 c02b064:	d152      	bne.n	c02b10c <psa_import_key_into_slot+0x250>
    mbedtls_pk_init( &pk );
 c02b066:	a803      	add	r0, sp, #12
 c02b068:	f7fd fb65 	bl	c028736 <mbedtls_pk_init>
    if( PSA_KEY_TYPE_IS_KEYPAIR( type ) )
 c02b06c:	f004 40e0 	and.w	r0, r4, #1879048192	; 0x70000000
 c02b070:	f1b0 4fe0 	cmp.w	r0, #1879048192	; 0x70000000
 c02b074:	d136      	bne.n	c02b0e4 <psa_import_key_into_slot+0x228>
        status = mbedtls_to_psa_error(
 c02b076:	2300      	movs	r3, #0
 c02b078:	462a      	mov	r2, r5
 c02b07a:	9300      	str	r3, [sp, #0]
 c02b07c:	4639      	mov	r1, r7
 c02b07e:	a803      	add	r0, sp, #12
 c02b080:	f7fe fd48 	bl	c029b14 <mbedtls_pk_parse_key>
        status = mbedtls_to_psa_error(
 c02b084:	f7ff f914 	bl	c02a2b0 <mbedtls_to_psa_error>
 c02b088:	4604      	mov	r4, r0
    if( status != PSA_SUCCESS )
 c02b08a:	bb38      	cbnz	r0, c02b0dc <psa_import_key_into_slot+0x220>
    if( mbedtls_pk_get_type( &pk ) != MBEDTLS_PK_RSA )
 c02b08c:	a803      	add	r0, sp, #12
 c02b08e:	f7fd fb87 	bl	c0287a0 <mbedtls_pk_get_type>
 c02b092:	2801      	cmp	r0, #1
 c02b094:	d12c      	bne.n	c02b0f0 <psa_import_key_into_slot+0x234>
    rsa = mbedtls_pk_rsa( pk );
 c02b096:	9d04      	ldr	r5, [sp, #16]
    bits = PSA_BYTES_TO_BITS( mbedtls_rsa_get_len( rsa ) );
 c02b098:	4628      	mov	r0, r5
 c02b09a:	f7f4 fb06 	bl	c01f6aa <mbedtls_rsa_get_len>
 c02b09e:	00c0      	lsls	r0, r0, #3
    if( bits > PSA_VENDOR_RSA_MAX_KEY_BITS )
 c02b0a0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 c02b0a4:	d827      	bhi.n	c02b0f6 <psa_import_key_into_slot+0x23a>
    mbedtls_mpi_init( &n );
 c02b0a6:	a805      	add	r0, sp, #20
 c02b0a8:	f7f9 fd66 	bl	c024b78 <mbedtls_mpi_init>
    status = mbedtls_to_psa_error(
 c02b0ac:	4623      	mov	r3, r4
 c02b0ae:	4622      	mov	r2, r4
 c02b0b0:	e9cd 4400 	strd	r4, r4, [sp]
 c02b0b4:	a905      	add	r1, sp, #20
 c02b0b6:	4628      	mov	r0, r5
 c02b0b8:	f7f4 fa36 	bl	c01f528 <mbedtls_rsa_export>
 c02b0bc:	f7ff f8f8 	bl	c02a2b0 <mbedtls_to_psa_error>
    if( status == PSA_SUCCESS )
 c02b0c0:	4604      	mov	r4, r0
 c02b0c2:	b938      	cbnz	r0, c02b0d4 <psa_import_key_into_slot+0x218>
        if( mbedtls_mpi_bitlen( &n ) % 8 != 0 )
 c02b0c4:	a805      	add	r0, sp, #20
 c02b0c6:	f7f9 fe87 	bl	c024dd8 <mbedtls_mpi_bitlen>
            status = PSA_ERROR_NOT_SUPPORTED;
 c02b0ca:	f010 0f07 	tst.w	r0, #7
 c02b0ce:	bf18      	it	ne
 c02b0d0:	f06f 0485 	mvnne.w	r4, #133	; 0x85
    mbedtls_mpi_free( &n );
 c02b0d4:	a805      	add	r0, sp, #20
 c02b0d6:	f7f9 fd55 	bl	c024b84 <mbedtls_mpi_free>
    if( status != PSA_SUCCESS )
 c02b0da:	b17c      	cbz	r4, c02b0fc <psa_import_key_into_slot+0x240>
        mbedtls_pk_free( &pk );
 c02b0dc:	a803      	add	r0, sp, #12
 c02b0de:	f7fd fb2e 	bl	c02873e <mbedtls_pk_free>
 c02b0e2:	e709      	b.n	c02aef8 <psa_import_key_into_slot+0x3c>
        status = mbedtls_to_psa_error(
 c02b0e4:	462a      	mov	r2, r5
 c02b0e6:	4639      	mov	r1, r7
 c02b0e8:	a803      	add	r0, sp, #12
 c02b0ea:	f7fe fe33 	bl	c029d54 <mbedtls_pk_parse_public_key>
 c02b0ee:	e7c9      	b.n	c02b084 <psa_import_key_into_slot+0x1c8>
        status = PSA_ERROR_INVALID_ARGUMENT;
 c02b0f0:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c02b0f4:	e7f2      	b.n	c02b0dc <psa_import_key_into_slot+0x220>
        status = PSA_ERROR_NOT_SUPPORTED;
 c02b0f6:	f06f 0485 	mvn.w	r4, #133	; 0x85
 c02b0fa:	e7ef      	b.n	c02b0dc <psa_import_key_into_slot+0x220>
    *p_rsa = rsa;
 c02b0fc:	61f5      	str	r5, [r6, #28]
 c02b0fe:	e6fb      	b.n	c02aef8 <psa_import_key_into_slot+0x3c>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02b100:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c02b104:	e6f8      	b.n	c02aef8 <psa_import_key_into_slot+0x3c>
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c02b106:	f06f 048c 	mvn.w	r4, #140	; 0x8c
 c02b10a:	e6f5      	b.n	c02aef8 <psa_import_key_into_slot+0x3c>
            return( PSA_ERROR_NOT_SUPPORTED );
 c02b10c:	f06f 0485 	mvn.w	r4, #133	; 0x85
 c02b110:	e6f2      	b.n	c02aef8 <psa_import_key_into_slot+0x3c>
 c02b112:	bf00      	nop
 c02b114:	70030000 	.word	0x70030000
 c02b118:	0c036895 	.word	0x0c036895
 c02b11c:	300360c0 	.word	0x300360c0
 c02b120:	0c027525 	.word	0x0c027525
 c02b124:	60030000 	.word	0x60030000
 c02b128:	60010000 	.word	0x60010000

0c02b12c <psa_wipe_key_slot>:
{
 c02b12c:	b538      	push	{r3, r4, r5, lr}
    if( slot->type == PSA_KEY_TYPE_NONE )
 c02b12e:	6804      	ldr	r4, [r0, #0]
{
 c02b130:	4605      	mov	r5, r0
    if( slot->type == PSA_KEY_TYPE_NONE )
 c02b132:	b144      	cbz	r4, c02b146 <psa_wipe_key_slot+0x1a>
    return( PSA_KEY_TYPE_IS_UNSTRUCTURED( type ) );
 c02b134:	f004 43c0 	and.w	r3, r4, #1610612736	; 0x60000000
    else if( key_type_is_raw_bytes( slot->type ) )
 c02b138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c02b13c:	d10a      	bne.n	c02b154 <psa_wipe_key_slot+0x28>
        mbedtls_free( slot->data.ecp );
 c02b13e:	69e8      	ldr	r0, [r5, #28]
 c02b140:	f7ff f89e 	bl	c02a280 <mbedtls_free>
    return( PSA_SUCCESS );
 c02b144:	2400      	movs	r4, #0
    memset( slot, 0, sizeof( *slot ) );
 c02b146:	2224      	movs	r2, #36	; 0x24
 c02b148:	2100      	movs	r1, #0
 c02b14a:	4628      	mov	r0, r5
 c02b14c:	f7ec fc3b 	bl	c0179c6 <memset>
}
 c02b150:	4620      	mov	r0, r4
 c02b152:	bd38      	pop	{r3, r4, r5, pc}
    if( PSA_KEY_TYPE_IS_RSA( slot->type ) )
 c02b154:	4b0a      	ldr	r3, [pc, #40]	; (c02b180 <psa_wipe_key_slot+0x54>)
 c02b156:	f024 5280 	bic.w	r2, r4, #268435456	; 0x10000000
 c02b15a:	429a      	cmp	r2, r3
 c02b15c:	d103      	bne.n	c02b166 <psa_wipe_key_slot+0x3a>
        mbedtls_rsa_free( slot->data.rsa );
 c02b15e:	69c0      	ldr	r0, [r0, #28]
 c02b160:	f7f5 faca 	bl	c0206f8 <mbedtls_rsa_free>
 c02b164:	e7eb      	b.n	c02b13e <psa_wipe_key_slot+0x12>
    if( PSA_KEY_TYPE_IS_ECC( slot->type ) )
 c02b166:	4b07      	ldr	r3, [pc, #28]	; (c02b184 <psa_wipe_key_slot+0x58>)
 c02b168:	4a07      	ldr	r2, [pc, #28]	; (c02b188 <psa_wipe_key_slot+0x5c>)
 c02b16a:	4023      	ands	r3, r4
 c02b16c:	4293      	cmp	r3, r2
 c02b16e:	d103      	bne.n	c02b178 <psa_wipe_key_slot+0x4c>
        mbedtls_ecp_keypair_free( slot->data.ecp );
 c02b170:	69c0      	ldr	r0, [r0, #28]
 c02b172:	f7f2 f931 	bl	c01d3d8 <mbedtls_ecp_keypair_free>
 c02b176:	e7e2      	b.n	c02b13e <psa_wipe_key_slot+0x12>
        return( PSA_ERROR_TAMPERING_DETECTED );
 c02b178:	f06f 0496 	mvn.w	r4, #150	; 0x96
 c02b17c:	e7e3      	b.n	c02b146 <psa_wipe_key_slot+0x1a>
 c02b17e:	bf00      	nop
 c02b180:	60010000 	.word	0x60010000
 c02b184:	efff0000 	.word	0xefff0000
 c02b188:	60030000 	.word	0x60030000

0c02b18c <mbedcrypto__psa_import_key>:
{
 c02b18c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02b18e:	460e      	mov	r6, r1
    status = psa_get_empty_key_slot( handle, &slot );
 c02b190:	a901      	add	r1, sp, #4
{
 c02b192:	4614      	mov	r4, r2
 c02b194:	461d      	mov	r5, r3
    status = psa_get_empty_key_slot( handle, &slot );
 c02b196:	f7ff fa97 	bl	c02a6c8 <psa_get_empty_key_slot>
    if( status != PSA_SUCCESS )
 c02b19a:	b948      	cbnz	r0, c02b1b0 <mbedcrypto__psa_import_key+0x24>
    slot->type = type;
 c02b19c:	9801      	ldr	r0, [sp, #4]
    status = psa_import_key_into_slot( slot, data, data_length );
 c02b19e:	462a      	mov	r2, r5
    slot->type = type;
 c02b1a0:	6006      	str	r6, [r0, #0]
    status = psa_import_key_into_slot( slot, data, data_length );
 c02b1a2:	4621      	mov	r1, r4
 c02b1a4:	f7ff fe8a 	bl	c02aebc <psa_import_key_into_slot>
    if( status != PSA_SUCCESS )
 c02b1a8:	b110      	cbz	r0, c02b1b0 <mbedcrypto__psa_import_key+0x24>
        slot->type = PSA_KEY_TYPE_NONE;
 c02b1aa:	2200      	movs	r2, #0
 c02b1ac:	9b01      	ldr	r3, [sp, #4]
 c02b1ae:	601a      	str	r2, [r3, #0]
}
 c02b1b0:	b002      	add	sp, #8
 c02b1b2:	bd70      	pop	{r4, r5, r6, pc}

0c02b1b4 <mbedcrypto__psa_destroy_key>:
{
 c02b1b4:	b507      	push	{r0, r1, r2, lr}
    status = psa_get_key_slot( handle, &slot );
 c02b1b6:	a901      	add	r1, sp, #4
 c02b1b8:	f002 f88a 	bl	c02d2d0 <psa_get_key_slot>
    if( status != PSA_SUCCESS )
 c02b1bc:	b910      	cbnz	r0, c02b1c4 <mbedcrypto__psa_destroy_key+0x10>
    status = psa_wipe_key_slot( slot );
 c02b1be:	9801      	ldr	r0, [sp, #4]
 c02b1c0:	f7ff ffb4 	bl	c02b12c <psa_wipe_key_slot>
}
 c02b1c4:	b003      	add	sp, #12
 c02b1c6:	f85d fb04 	ldr.w	pc, [sp], #4

0c02b1ca <mbedcrypto__psa_get_key_information>:
{
 c02b1ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02b1cc:	4614      	mov	r4, r2
    if( type != NULL )
 c02b1ce:	460d      	mov	r5, r1
 c02b1d0:	b109      	cbz	r1, c02b1d6 <mbedcrypto__psa_get_key_information+0xc>
        *type = 0;
 c02b1d2:	2300      	movs	r3, #0
 c02b1d4:	600b      	str	r3, [r1, #0]
    if( bits != NULL )
 c02b1d6:	b10c      	cbz	r4, c02b1dc <mbedcrypto__psa_get_key_information+0x12>
        *bits = 0;
 c02b1d8:	2300      	movs	r3, #0
 c02b1da:	6023      	str	r3, [r4, #0]
    status = psa_get_key_slot( handle, &slot );
 c02b1dc:	a901      	add	r1, sp, #4
 c02b1de:	f002 f877 	bl	c02d2d0 <psa_get_key_slot>
    if( status != PSA_SUCCESS )
 c02b1e2:	4606      	mov	r6, r0
 c02b1e4:	b940      	cbnz	r0, c02b1f8 <mbedcrypto__psa_get_key_information+0x2e>
    if( slot->type == PSA_KEY_TYPE_NONE )
 c02b1e6:	9801      	ldr	r0, [sp, #4]
 c02b1e8:	6803      	ldr	r3, [r0, #0]
 c02b1ea:	b143      	cbz	r3, c02b1fe <mbedcrypto__psa_get_key_information+0x34>
    if( type != NULL )
 c02b1ec:	b105      	cbz	r5, c02b1f0 <mbedcrypto__psa_get_key_information+0x26>
        *type = slot->type;
 c02b1ee:	602b      	str	r3, [r5, #0]
    if( bits != NULL )
 c02b1f0:	b114      	cbz	r4, c02b1f8 <mbedcrypto__psa_get_key_information+0x2e>
        *bits = psa_get_key_bits( slot );
 c02b1f2:	f7ff fc1d 	bl	c02aa30 <psa_get_key_bits>
 c02b1f6:	6020      	str	r0, [r4, #0]
}
 c02b1f8:	4630      	mov	r0, r6
 c02b1fa:	b002      	add	sp, #8
 c02b1fc:	bd70      	pop	{r4, r5, r6, pc}
        return( PSA_ERROR_DOES_NOT_EXIST );
 c02b1fe:	f06f 068b 	mvn.w	r6, #139	; 0x8b
 c02b202:	e7f9      	b.n	c02b1f8 <mbedcrypto__psa_get_key_information+0x2e>

0c02b204 <mbedcrypto__psa_export_key>:
{
 c02b204:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 c02b206:	461c      	mov	r4, r3
    *data_length = 0;
 c02b208:	2300      	movs	r3, #0
{
 c02b20a:	460d      	mov	r5, r1
 c02b20c:	4616      	mov	r6, r2
    *data_length = 0;
 c02b20e:	6023      	str	r3, [r4, #0]
    status = psa_get_key_from_slot( handle, &slot, PSA_KEY_USAGE_EXPORT, 0 );
 c02b210:	2201      	movs	r2, #1
 c02b212:	a903      	add	r1, sp, #12
 c02b214:	f7ff fba2 	bl	c02a95c <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c02b218:	b930      	cbnz	r0, c02b228 <mbedcrypto__psa_export_key+0x24>
    return( psa_internal_export_key( slot, data, data_size,
 c02b21a:	9000      	str	r0, [sp, #0]
 c02b21c:	4623      	mov	r3, r4
 c02b21e:	4632      	mov	r2, r6
 c02b220:	4629      	mov	r1, r5
 c02b222:	9803      	ldr	r0, [sp, #12]
 c02b224:	f7ff fc26 	bl	c02aa74 <psa_internal_export_key>
}
 c02b228:	b004      	add	sp, #16
 c02b22a:	bd70      	pop	{r4, r5, r6, pc}

0c02b22c <mbedcrypto__psa_export_public_key>:
{
 c02b22c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 c02b22e:	461c      	mov	r4, r3
    *data_length = 0;
 c02b230:	2300      	movs	r3, #0
{
 c02b232:	460d      	mov	r5, r1
 c02b234:	4616      	mov	r6, r2
    *data_length = 0;
 c02b236:	6023      	str	r3, [r4, #0]
    status = psa_get_key_from_slot( handle, &slot, 0, 0 );
 c02b238:	461a      	mov	r2, r3
 c02b23a:	a903      	add	r1, sp, #12
 c02b23c:	f7ff fb8e 	bl	c02a95c <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c02b240:	b938      	cbnz	r0, c02b252 <mbedcrypto__psa_export_public_key+0x26>
    return( psa_internal_export_key( slot, data, data_size,
 c02b242:	2301      	movs	r3, #1
 c02b244:	4632      	mov	r2, r6
 c02b246:	9300      	str	r3, [sp, #0]
 c02b248:	4629      	mov	r1, r5
 c02b24a:	4623      	mov	r3, r4
 c02b24c:	9803      	ldr	r0, [sp, #12]
 c02b24e:	f7ff fc11 	bl	c02aa74 <psa_internal_export_key>
}
 c02b252:	b004      	add	sp, #16
 c02b254:	bd70      	pop	{r4, r5, r6, pc}
	...

0c02b258 <mbedcrypto__psa_copy_key>:
    psa_key_slot_t *source_slot = NULL;
 c02b258:	2300      	movs	r3, #0
{
 c02b25a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c02b25e:	b089      	sub	sp, #36	; 0x24
 c02b260:	460f      	mov	r7, r1
 c02b262:	4614      	mov	r4, r2
    status = psa_get_key_from_slot( source_handle, &source_slot, 0, 0 );
 c02b264:	a902      	add	r1, sp, #8
 c02b266:	461a      	mov	r2, r3
    psa_key_slot_t *target_slot = NULL;
 c02b268:	e9cd 3302 	strd	r3, r3, [sp, #8]
    status = psa_get_key_from_slot( source_handle, &source_slot, 0, 0 );
 c02b26c:	f7ff fb76 	bl	c02a95c <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c02b270:	4680      	mov	r8, r0
 c02b272:	bb40      	cbnz	r0, c02b2c6 <mbedcrypto__psa_copy_key+0x6e>
    status = psa_get_empty_key_slot( target_handle, &target_slot );
 c02b274:	a903      	add	r1, sp, #12
 c02b276:	4638      	mov	r0, r7
 c02b278:	f7ff fa26 	bl	c02a6c8 <psa_get_empty_key_slot>
    if( status != PSA_SUCCESS )
 c02b27c:	4680      	mov	r8, r0
 c02b27e:	bb10      	cbnz	r0, c02b2c6 <mbedcrypto__psa_copy_key+0x6e>
    new_policy = target_slot->policy;
 c02b280:	9b03      	ldr	r3, [sp, #12]
 c02b282:	ae05      	add	r6, sp, #20
 c02b284:	3304      	adds	r3, #4
 c02b286:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 c02b28a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    status = psa_restrict_key_policy( &new_policy, &source_slot->policy );
 c02b28e:	9902      	ldr	r1, [sp, #8]
 c02b290:	4630      	mov	r0, r6
 c02b292:	3104      	adds	r1, #4
 c02b294:	f7ff fde0 	bl	c02ae58 <psa_restrict_key_policy>
    if( status != PSA_SUCCESS )
 c02b298:	4680      	mov	r8, r0
 c02b29a:	b9a0      	cbnz	r0, c02b2c6 <mbedcrypto__psa_copy_key+0x6e>
    if( constraint != NULL )
 c02b29c:	b964      	cbnz	r4, c02b2b8 <mbedcrypto__psa_copy_key+0x60>
    status = psa_copy_key_material( source_slot, target_handle );
 c02b29e:	9d02      	ldr	r5, [sp, #8]
    buffer_size = PSA_KEY_EXPORT_MAX_SIZE( source->type,
 c02b2a0:	682b      	ldr	r3, [r5, #0]
 c02b2a2:	f003 42c0 	and.w	r2, r3, #1610612736	; 0x60000000
 c02b2a6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 c02b2aa:	d110      	bne.n	c02b2ce <mbedcrypto__psa_copy_key+0x76>
 c02b2ac:	4628      	mov	r0, r5
 c02b2ae:	f7ff fbbf 	bl	c02aa30 <psa_get_key_bits>
 c02b2b2:	3007      	adds	r0, #7
 c02b2b4:	08c4      	lsrs	r4, r0, #3
 c02b2b6:	e016      	b.n	c02b2e6 <mbedcrypto__psa_copy_key+0x8e>
        status = psa_restrict_key_policy( &new_policy, constraint );
 c02b2b8:	4621      	mov	r1, r4
 c02b2ba:	4630      	mov	r0, r6
 c02b2bc:	f7ff fdcc 	bl	c02ae58 <psa_restrict_key_policy>
        if( status != PSA_SUCCESS )
 c02b2c0:	4680      	mov	r8, r0
 c02b2c2:	2800      	cmp	r0, #0
 c02b2c4:	d0eb      	beq.n	c02b29e <mbedcrypto__psa_copy_key+0x46>
}
 c02b2c6:	4640      	mov	r0, r8
 c02b2c8:	b009      	add	sp, #36	; 0x24
 c02b2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buffer_size = PSA_KEY_EXPORT_MAX_SIZE( source->type,
 c02b2ce:	4a39      	ldr	r2, [pc, #228]	; (c02b3b4 <mbedcrypto__psa_copy_key+0x15c>)
 c02b2d0:	4293      	cmp	r3, r2
 c02b2d2:	d112      	bne.n	c02b2fa <mbedcrypto__psa_copy_key+0xa2>
 c02b2d4:	4628      	mov	r0, r5
 c02b2d6:	f7ff fbab 	bl	c02aa30 <psa_get_key_bits>
 c02b2da:	0844      	lsrs	r4, r0, #1
 c02b2dc:	3401      	adds	r4, #1
 c02b2de:	08e4      	lsrs	r4, r4, #3
 c02b2e0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 c02b2e4:	343b      	adds	r4, #59	; 0x3b
    buffer = mbedtls_calloc( 1, buffer_size );
 c02b2e6:	4621      	mov	r1, r4
 c02b2e8:	2001      	movs	r0, #1
 c02b2ea:	f7fe ffc3 	bl	c02a274 <mbedtls_calloc>
    if( buffer == NULL && buffer_size != 0 )
 c02b2ee:	4681      	mov	r9, r0
 c02b2f0:	bbb8      	cbnz	r0, c02b362 <mbedcrypto__psa_copy_key+0x10a>
 c02b2f2:	b3b4      	cbz	r4, c02b362 <mbedcrypto__psa_copy_key+0x10a>
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c02b2f4:	f06f 088c 	mvn.w	r8, #140	; 0x8c
 c02b2f8:	e7e5      	b.n	c02b2c6 <mbedcrypto__psa_copy_key+0x6e>
    buffer_size = PSA_KEY_EXPORT_MAX_SIZE( source->type,
 c02b2fa:	4a2f      	ldr	r2, [pc, #188]	; (c02b3b8 <mbedcrypto__psa_copy_key+0x160>)
 c02b2fc:	4293      	cmp	r3, r2
 c02b2fe:	d106      	bne.n	c02b30e <mbedcrypto__psa_copy_key+0xb6>
 c02b300:	4628      	mov	r0, r5
 c02b302:	f7ff fb95 	bl	c02aa30 <psa_get_key_bits>
 c02b306:	08c0      	lsrs	r0, r0, #3
 c02b308:	f100 0410 	add.w	r4, r0, #16
 c02b30c:	e7eb      	b.n	c02b2e6 <mbedcrypto__psa_copy_key+0x8e>
 c02b30e:	4a2b      	ldr	r2, [pc, #172]	; (c02b3bc <mbedcrypto__psa_copy_key+0x164>)
 c02b310:	4293      	cmp	r3, r2
 c02b312:	d108      	bne.n	c02b326 <mbedcrypto__psa_copy_key+0xce>
 c02b314:	4628      	mov	r0, r5
 c02b316:	f7ff fb8b 	bl	c02aa30 <psa_get_key_bits>
 c02b31a:	08c0      	lsrs	r0, r0, #3
 c02b31c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 c02b320:	f100 045a 	add.w	r4, r0, #90	; 0x5a
 c02b324:	e7df      	b.n	c02b2e6 <mbedcrypto__psa_copy_key+0x8e>
 c02b326:	4a26      	ldr	r2, [pc, #152]	; (c02b3c0 <mbedcrypto__psa_copy_key+0x168>)
 c02b328:	4293      	cmp	r3, r2
 c02b32a:	d108      	bne.n	c02b33e <mbedcrypto__psa_copy_key+0xe6>
 c02b32c:	4628      	mov	r0, r5
 c02b32e:	f7ff fb7f 	bl	c02aa30 <psa_get_key_bits>
 c02b332:	08c0      	lsrs	r0, r0, #3
 c02b334:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 c02b338:	f100 044a 	add.w	r4, r0, #74	; 0x4a
 c02b33c:	e7d3      	b.n	c02b2e6 <mbedcrypto__psa_copy_key+0x8e>
 c02b33e:	0c1b      	lsrs	r3, r3, #16
 c02b340:	4a20      	ldr	r2, [pc, #128]	; (c02b3c4 <mbedcrypto__psa_copy_key+0x16c>)
 c02b342:	041b      	lsls	r3, r3, #16
 c02b344:	4293      	cmp	r3, r2
 c02b346:	d0b1      	beq.n	c02b2ac <mbedcrypto__psa_copy_key+0x54>
 c02b348:	4a1f      	ldr	r2, [pc, #124]	; (c02b3c8 <mbedcrypto__psa_copy_key+0x170>)
 c02b34a:	4293      	cmp	r3, r2
 c02b34c:	d107      	bne.n	c02b35e <mbedcrypto__psa_copy_key+0x106>
 c02b34e:	4628      	mov	r0, r5
 c02b350:	f7ff fb6e 	bl	c02aa30 <psa_get_key_bits>
 c02b354:	3007      	adds	r0, #7
 c02b356:	08c0      	lsrs	r0, r0, #3
 c02b358:	0040      	lsls	r0, r0, #1
 c02b35a:	1c44      	adds	r4, r0, #1
 c02b35c:	e7c3      	b.n	c02b2e6 <mbedcrypto__psa_copy_key+0x8e>
 c02b35e:	2400      	movs	r4, #0
 c02b360:	e7c1      	b.n	c02b2e6 <mbedcrypto__psa_copy_key+0x8e>
    status = psa_internal_export_key( source, buffer, buffer_size, &length, 0 );
 c02b362:	2300      	movs	r3, #0
 c02b364:	4622      	mov	r2, r4
 c02b366:	9300      	str	r3, [sp, #0]
 c02b368:	4649      	mov	r1, r9
 c02b36a:	ab04      	add	r3, sp, #16
 c02b36c:	4628      	mov	r0, r5
 c02b36e:	f7ff fb81 	bl	c02aa74 <psa_internal_export_key>
    if( status != PSA_SUCCESS )
 c02b372:	4680      	mov	r8, r0
 c02b374:	b9c0      	cbnz	r0, c02b3a8 <mbedcrypto__psa_copy_key+0x150>
    status = psa_import_key( target, source->type, buffer, length );
 c02b376:	9b04      	ldr	r3, [sp, #16]
 c02b378:	464a      	mov	r2, r9
 c02b37a:	6829      	ldr	r1, [r5, #0]
 c02b37c:	4638      	mov	r0, r7
 c02b37e:	f7ff ff05 	bl	c02b18c <mbedcrypto__psa_import_key>
 c02b382:	4680      	mov	r8, r0
    if( buffer_size != 0 )
 c02b384:	b11c      	cbz	r4, c02b38e <mbedcrypto__psa_copy_key+0x136>
        mbedtls_platform_zeroize( buffer, buffer_size );
 c02b386:	4621      	mov	r1, r4
 c02b388:	4648      	mov	r0, r9
 c02b38a:	f7fe ff89 	bl	c02a2a0 <mbedtls_platform_zeroize>
    mbedtls_free( buffer );
 c02b38e:	4648      	mov	r0, r9
 c02b390:	f7fe ff76 	bl	c02a280 <mbedtls_free>
    if( status != PSA_SUCCESS )
 c02b394:	f1b8 0f00 	cmp.w	r8, #0
 c02b398:	d195      	bne.n	c02b2c6 <mbedcrypto__psa_copy_key+0x6e>
    target_slot->policy = new_policy;
 c02b39a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 c02b39e:	9b03      	ldr	r3, [sp, #12]
 c02b3a0:	3304      	adds	r3, #4
 c02b3a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return( PSA_SUCCESS );
 c02b3a6:	e78e      	b.n	c02b2c6 <mbedcrypto__psa_copy_key+0x6e>
    if( buffer_size != 0 )
 c02b3a8:	2c00      	cmp	r4, #0
 c02b3aa:	d1ec      	bne.n	c02b386 <mbedcrypto__psa_copy_key+0x12e>
    mbedtls_free( buffer );
 c02b3ac:	4648      	mov	r0, r9
 c02b3ae:	f7fe ff67 	bl	c02a280 <mbedtls_free>
 c02b3b2:	e788      	b.n	c02b2c6 <mbedcrypto__psa_copy_key+0x6e>
 c02b3b4:	70010000 	.word	0x70010000
 c02b3b8:	60010000 	.word	0x60010000
 c02b3bc:	70020000 	.word	0x70020000
 c02b3c0:	60020000 	.word	0x60020000
 c02b3c4:	70030000 	.word	0x70030000
 c02b3c8:	60030000 	.word	0x60030000

0c02b3cc <mbedcrypto__psa_hash_abort>:
    switch( operation->alg )
 c02b3cc:	6803      	ldr	r3, [r0, #0]
 c02b3ce:	4a10      	ldr	r2, [pc, #64]	; (c02b410 <mbedcrypto__psa_hash_abort+0x44>)
{
 c02b3d0:	b510      	push	{r4, lr}
    switch( operation->alg )
 c02b3d2:	4293      	cmp	r3, r2
{
 c02b3d4:	4604      	mov	r4, r0
    switch( operation->alg )
 c02b3d6:	d809      	bhi.n	c02b3ec <mbedcrypto__psa_hash_abort+0x20>
 c02b3d8:	3a01      	subs	r2, #1
 c02b3da:	4293      	cmp	r3, r2
 c02b3dc:	d213      	bcs.n	c02b406 <mbedcrypto__psa_hash_abort+0x3a>
 c02b3de:	b17b      	cbz	r3, c02b400 <mbedcrypto__psa_hash_abort+0x34>
 c02b3e0:	3a03      	subs	r2, #3
 c02b3e2:	4293      	cmp	r3, r2
 c02b3e4:	d009      	beq.n	c02b3fa <mbedcrypto__psa_hash_abort+0x2e>
            return( PSA_ERROR_BAD_STATE );
 c02b3e6:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02b3ea:	e00b      	b.n	c02b404 <mbedcrypto__psa_hash_abort+0x38>
    switch( operation->alg )
 c02b3ec:	4a09      	ldr	r2, [pc, #36]	; (c02b414 <mbedcrypto__psa_hash_abort+0x48>)
 c02b3ee:	4293      	cmp	r3, r2
 c02b3f0:	d8f9      	bhi.n	c02b3e6 <mbedcrypto__psa_hash_abort+0x1a>
            mbedtls_sha512_free( &operation->ctx.sha512 );
 c02b3f2:	3008      	adds	r0, #8
 c02b3f4:	f002 fae8 	bl	c02d9c8 <mbedtls_sha512_free>
            break;
 c02b3f8:	e002      	b.n	c02b400 <mbedcrypto__psa_hash_abort+0x34>
            mbedtls_sha1_free( &operation->ctx.sha1 );
 c02b3fa:	3008      	adds	r0, #8
 c02b3fc:	f7f5 fac2 	bl	c020984 <mbedtls_sha1_free>
    operation->alg = 0;
 c02b400:	2000      	movs	r0, #0
 c02b402:	6020      	str	r0, [r4, #0]
}
 c02b404:	bd10      	pop	{r4, pc}
            mbedtls_sha256_free( &operation->ctx.sha256 );
 c02b406:	3008      	adds	r0, #8
 c02b408:	f7f5 fb7c 	bl	c020b04 <mbedtls_sha256_free>
            break;
 c02b40c:	e7f8      	b.n	c02b400 <mbedcrypto__psa_hash_abort+0x34>
 c02b40e:	bf00      	nop
 c02b410:	01000009 	.word	0x01000009
 c02b414:	0100000b 	.word	0x0100000b

0c02b418 <psa_hmac_abort_internal>:
{
 c02b418:	b510      	push	{r4, lr}
 c02b41a:	4604      	mov	r4, r0
    mbedtls_platform_zeroize( hmac->opad, sizeof( hmac->opad ) );
 c02b41c:	2180      	movs	r1, #128	; 0x80
 c02b41e:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 c02b422:	f7fe ff3d 	bl	c02a2a0 <mbedtls_platform_zeroize>
    return( psa_hash_abort( &hmac->hash_ctx ) );
 c02b426:	4620      	mov	r0, r4
}
 c02b428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return( psa_hash_abort( &hmac->hash_ctx ) );
 c02b42c:	f7ff bfce 	b.w	c02b3cc <mbedcrypto__psa_hash_abort>

0c02b430 <mbedcrypto__psa_hash_update.part.7>:
psa_status_t psa_hash_update( psa_hash_operation_t *operation,
 c02b430:	b538      	push	{r3, r4, r5, lr}
    switch( operation->alg )
 c02b432:	6803      	ldr	r3, [r0, #0]
psa_status_t psa_hash_update( psa_hash_operation_t *operation,
 c02b434:	4604      	mov	r4, r0
    switch( operation->alg )
 c02b436:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 c02b43a:	3b05      	subs	r3, #5
 c02b43c:	2b06      	cmp	r3, #6
 c02b43e:	d81d      	bhi.n	c02b47c <mbedcrypto__psa_hash_update.part.7+0x4c>
 c02b440:	e8df f003 	tbb	[pc, r3]
 c02b444:	121c1c04 	.word	0x121c1c04
 c02b448:	1712      	.short	0x1712
 c02b44a:	17          	.byte	0x17
 c02b44b:	00          	.byte	0x00
            ret = mbedtls_sha1_update_ret( &operation->ctx.sha1,
 c02b44c:	f104 0008 	add.w	r0, r4, #8
 c02b450:	f7f5 fad7 	bl	c020a02 <mbedtls_sha1_update_ret>
            ret = mbedtls_sha512_update_ret( &operation->ctx.sha512,
 c02b454:	4605      	mov	r5, r0
    if( ret != 0 )
 c02b456:	b110      	cbz	r0, c02b45e <mbedcrypto__psa_hash_update.part.7+0x2e>
        psa_hash_abort( operation );
 c02b458:	4620      	mov	r0, r4
 c02b45a:	f7ff ffb7 	bl	c02b3cc <mbedcrypto__psa_hash_abort>
    return( mbedtls_to_psa_error( ret ) );
 c02b45e:	4628      	mov	r0, r5
}
 c02b460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return( mbedtls_to_psa_error( ret ) );
 c02b464:	f7fe bf24 	b.w	c02a2b0 <mbedtls_to_psa_error>
            ret = mbedtls_sha256_update_ret( &operation->ctx.sha256,
 c02b468:	f104 0008 	add.w	r0, r4, #8
 c02b46c:	f7f5 fb93 	bl	c020b96 <mbedtls_sha256_update_ret>
 c02b470:	e7f0      	b.n	c02b454 <mbedcrypto__psa_hash_update.part.7+0x24>
            ret = mbedtls_sha512_update_ret( &operation->ctx.sha512,
 c02b472:	f104 0008 	add.w	r0, r4, #8
 c02b476:	f003 f9fb 	bl	c02e870 <mbedtls_sha512_update_ret>
 c02b47a:	e7eb      	b.n	c02b454 <mbedcrypto__psa_hash_update.part.7+0x24>
}
 c02b47c:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02b480:	bd38      	pop	{r3, r4, r5, pc}

0c02b482 <mbedcrypto__psa_hash_setup>:
    if( operation->alg != 0 )
 c02b482:	6803      	ldr	r3, [r0, #0]
{
 c02b484:	b570      	push	{r4, r5, r6, lr}
 c02b486:	4604      	mov	r4, r0
 c02b488:	460e      	mov	r6, r1
    if( operation->alg != 0 )
 c02b48a:	2b00      	cmp	r3, #0
 c02b48c:	d14a      	bne.n	c02b524 <mbedcrypto__psa_hash_setup+0xa2>
    switch( alg )
 c02b48e:	f101 437f 	add.w	r3, r1, #4278190080	; 0xff000000
 c02b492:	3b05      	subs	r3, #5
 c02b494:	2b06      	cmp	r3, #6
 c02b496:	d837      	bhi.n	c02b508 <mbedcrypto__psa_hash_setup+0x86>
 c02b498:	e8df f003 	tbb	[pc, r3]
 c02b49c:	14363604 	.word	0x14363604
 c02b4a0:	251e      	.short	0x251e
 c02b4a2:	2f          	.byte	0x2f
 c02b4a3:	00          	.byte	0x00
            mbedtls_sha1_init( &operation->ctx.sha1 );
 c02b4a4:	f100 0508 	add.w	r5, r0, #8
 c02b4a8:	4628      	mov	r0, r5
 c02b4aa:	f7f5 fa53 	bl	c020954 <mbedtls_sha1_init>
            ret = mbedtls_sha1_starts_ret( &operation->ctx.sha1 );
 c02b4ae:	4628      	mov	r0, r5
 c02b4b0:	f7f5 fa78 	bl	c0209a4 <mbedtls_sha1_starts_ret>
            ret = mbedtls_sha512_starts_ret( &operation->ctx.sha512, 0 );
 c02b4b4:	4605      	mov	r5, r0
    if( ret == 0 )
 c02b4b6:	bb88      	cbnz	r0, c02b51c <mbedcrypto__psa_hash_setup+0x9a>
        operation->alg = alg;
 c02b4b8:	6026      	str	r6, [r4, #0]
    return( mbedtls_to_psa_error( ret ) );
 c02b4ba:	4628      	mov	r0, r5
}
 c02b4bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return( mbedtls_to_psa_error( ret ) );
 c02b4c0:	f7fe bef6 	b.w	c02a2b0 <mbedtls_to_psa_error>
            mbedtls_sha256_init( &operation->ctx.sha256 );
 c02b4c4:	f100 0508 	add.w	r5, r0, #8
 c02b4c8:	4628      	mov	r0, r5
 c02b4ca:	f7f5 fb03 	bl	c020ad4 <mbedtls_sha256_init>
            ret = mbedtls_sha256_starts_ret( &operation->ctx.sha256, 1 );
 c02b4ce:	2101      	movs	r1, #1
            ret = mbedtls_sha256_starts_ret( &operation->ctx.sha256, 0 );
 c02b4d0:	4628      	mov	r0, r5
 c02b4d2:	f7f5 fb27 	bl	c020b24 <mbedtls_sha256_starts_ret>
 c02b4d6:	e7ed      	b.n	c02b4b4 <mbedcrypto__psa_hash_setup+0x32>
            mbedtls_sha256_init( &operation->ctx.sha256 );
 c02b4d8:	f100 0508 	add.w	r5, r0, #8
 c02b4dc:	4628      	mov	r0, r5
 c02b4de:	f7f5 faf9 	bl	c020ad4 <mbedtls_sha256_init>
            ret = mbedtls_sha256_starts_ret( &operation->ctx.sha256, 0 );
 c02b4e2:	2100      	movs	r1, #0
 c02b4e4:	e7f4      	b.n	c02b4d0 <mbedcrypto__psa_hash_setup+0x4e>
            mbedtls_sha512_init( &operation->ctx.sha512 );
 c02b4e6:	f100 0508 	add.w	r5, r0, #8
 c02b4ea:	4628      	mov	r0, r5
 c02b4ec:	f002 fa68 	bl	c02d9c0 <mbedtls_sha512_init>
            ret = mbedtls_sha512_starts_ret( &operation->ctx.sha512, 1 );
 c02b4f0:	2101      	movs	r1, #1
            ret = mbedtls_sha512_starts_ret( &operation->ctx.sha512, 0 );
 c02b4f2:	4628      	mov	r0, r5
 c02b4f4:	f002 fa74 	bl	c02d9e0 <mbedtls_sha512_starts_ret>
 c02b4f8:	e7dc      	b.n	c02b4b4 <mbedcrypto__psa_hash_setup+0x32>
            mbedtls_sha512_init( &operation->ctx.sha512 );
 c02b4fa:	f100 0508 	add.w	r5, r0, #8
 c02b4fe:	4628      	mov	r0, r5
 c02b500:	f002 fa5e 	bl	c02d9c0 <mbedtls_sha512_init>
            ret = mbedtls_sha512_starts_ret( &operation->ctx.sha512, 0 );
 c02b504:	2100      	movs	r1, #0
 c02b506:	e7f4      	b.n	c02b4f2 <mbedcrypto__psa_hash_setup+0x70>
            return( PSA_ALG_IS_HASH( alg ) ?
 c02b508:	f001 46fe 	and.w	r6, r1, #2130706432	; 0x7f000000
                    PSA_ERROR_NOT_SUPPORTED :
 c02b50c:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
 c02b510:	bf0c      	ite	eq
 c02b512:	f06f 0085 	mvneq.w	r0, #133	; 0x85
 c02b516:	f06f 0086 	mvnne.w	r0, #134	; 0x86
}
 c02b51a:	bd70      	pop	{r4, r5, r6, pc}
        psa_hash_abort( operation );
 c02b51c:	4620      	mov	r0, r4
 c02b51e:	f7ff ff55 	bl	c02b3cc <mbedcrypto__psa_hash_abort>
 c02b522:	e7ca      	b.n	c02b4ba <mbedcrypto__psa_hash_setup+0x38>
        return( PSA_ERROR_BAD_STATE );
 c02b524:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02b528:	e7f7      	b.n	c02b51a <mbedcrypto__psa_hash_setup+0x98>

0c02b52a <mbedcrypto__psa_hash_update>:
    if( input_length == 0 )
 c02b52a:	b10a      	cbz	r2, c02b530 <mbedcrypto__psa_hash_update+0x6>
 c02b52c:	f7ff bf80 	b.w	c02b430 <mbedcrypto__psa_hash_update.part.7>
}
 c02b530:	4610      	mov	r0, r2
 c02b532:	4770      	bx	lr

0c02b534 <mbedcrypto__psa_hash_finish>:
{
 c02b534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t actual_hash_length = PSA_HASH_SIZE( operation->alg );
 c02b538:	7804      	ldrb	r4, [r0, #0]
{
 c02b53a:	461f      	mov	r7, r3
    size_t actual_hash_length = PSA_HASH_SIZE( operation->alg );
 c02b53c:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 c02b540:	f104 437f 	add.w	r3, r4, #4278190080	; 0xff000000
 c02b544:	3b01      	subs	r3, #1
 c02b546:	2b02      	cmp	r3, #2
{
 c02b548:	4605      	mov	r5, r0
 c02b54a:	460e      	mov	r6, r1
 c02b54c:	4690      	mov	r8, r2
    size_t actual_hash_length = PSA_HASH_SIZE( operation->alg );
 c02b54e:	d93c      	bls.n	c02b5ca <mbedcrypto__psa_hash_finish+0x96>
 c02b550:	f104 437f 	add.w	r3, r4, #4278190080	; 0xff000000
 c02b554:	3b04      	subs	r3, #4
 c02b556:	2b01      	cmp	r3, #1
 c02b558:	d939      	bls.n	c02b5ce <mbedcrypto__psa_hash_finish+0x9a>
 c02b55a:	4b35      	ldr	r3, [pc, #212]	; (c02b630 <mbedcrypto__psa_hash_finish+0xfc>)
 c02b55c:	429c      	cmp	r4, r3
 c02b55e:	d03a      	beq.n	c02b5d6 <mbedcrypto__psa_hash_finish+0xa2>
 c02b560:	3301      	adds	r3, #1
 c02b562:	429c      	cmp	r4, r3
 c02b564:	d039      	beq.n	c02b5da <mbedcrypto__psa_hash_finish+0xa6>
 c02b566:	3301      	adds	r3, #1
 c02b568:	429c      	cmp	r4, r3
 c02b56a:	d038      	beq.n	c02b5de <mbedcrypto__psa_hash_finish+0xaa>
 c02b56c:	3301      	adds	r3, #1
 c02b56e:	429c      	cmp	r4, r3
 c02b570:	d02f      	beq.n	c02b5d2 <mbedcrypto__psa_hash_finish+0x9e>
 c02b572:	3301      	adds	r3, #1
 c02b574:	429c      	cmp	r4, r3
 c02b576:	d02e      	beq.n	c02b5d6 <mbedcrypto__psa_hash_finish+0xa2>
 c02b578:	3301      	adds	r3, #1
 c02b57a:	429c      	cmp	r4, r3
 c02b57c:	d02d      	beq.n	c02b5da <mbedcrypto__psa_hash_finish+0xa6>
 c02b57e:	3303      	adds	r3, #3
 c02b580:	429c      	cmp	r4, r3
 c02b582:	d028      	beq.n	c02b5d6 <mbedcrypto__psa_hash_finish+0xa2>
 c02b584:	3301      	adds	r3, #1
 c02b586:	429c      	cmp	r4, r3
 c02b588:	d027      	beq.n	c02b5da <mbedcrypto__psa_hash_finish+0xa6>
 c02b58a:	3301      	adds	r3, #1
 c02b58c:	429c      	cmp	r4, r3
 c02b58e:	d026      	beq.n	c02b5de <mbedcrypto__psa_hash_finish+0xaa>
 c02b590:	3301      	adds	r3, #1
 c02b592:	429c      	cmp	r4, r3
 c02b594:	bf0c      	ite	eq
 c02b596:	2440      	moveq	r4, #64	; 0x40
 c02b598:	2400      	movne	r4, #0
    *hash_length = hash_size;
 c02b59a:	f8c7 8000 	str.w	r8, [r7]
    if( hash_size != 0 )
 c02b59e:	f1b8 0f00 	cmp.w	r8, #0
 c02b5a2:	d004      	beq.n	c02b5ae <mbedcrypto__psa_hash_finish+0x7a>
        memset( hash, '!', hash_size );
 c02b5a4:	4642      	mov	r2, r8
 c02b5a6:	2121      	movs	r1, #33	; 0x21
 c02b5a8:	4630      	mov	r0, r6
 c02b5aa:	f7ec fa0c 	bl	c0179c6 <memset>
    if( hash_size < actual_hash_length )
 c02b5ae:	4544      	cmp	r4, r8
 c02b5b0:	d832      	bhi.n	c02b618 <mbedcrypto__psa_hash_finish+0xe4>
    switch( operation->alg )
 c02b5b2:	682b      	ldr	r3, [r5, #0]
 c02b5b4:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 c02b5b8:	3b05      	subs	r3, #5
 c02b5ba:	2b06      	cmp	r3, #6
 c02b5bc:	d834      	bhi.n	c02b628 <mbedcrypto__psa_hash_finish+0xf4>
 c02b5be:	e8df f003 	tbb	[pc, r3]
 c02b5c2:	3310      	.short	0x3310
 c02b5c4:	251f1f33 	.word	0x251f1f33
 c02b5c8:	25          	.byte	0x25
 c02b5c9:	00          	.byte	0x00
    size_t actual_hash_length = PSA_HASH_SIZE( operation->alg );
 c02b5ca:	2410      	movs	r4, #16
 c02b5cc:	e7e5      	b.n	c02b59a <mbedcrypto__psa_hash_finish+0x66>
 c02b5ce:	2414      	movs	r4, #20
 c02b5d0:	e7e3      	b.n	c02b59a <mbedcrypto__psa_hash_finish+0x66>
 c02b5d2:	2440      	movs	r4, #64	; 0x40
 c02b5d4:	e7e1      	b.n	c02b59a <mbedcrypto__psa_hash_finish+0x66>
 c02b5d6:	241c      	movs	r4, #28
 c02b5d8:	e7df      	b.n	c02b59a <mbedcrypto__psa_hash_finish+0x66>
 c02b5da:	2420      	movs	r4, #32
 c02b5dc:	e7dd      	b.n	c02b59a <mbedcrypto__psa_hash_finish+0x66>
 c02b5de:	2430      	movs	r4, #48	; 0x30
 c02b5e0:	e7db      	b.n	c02b59a <mbedcrypto__psa_hash_finish+0x66>
            ret = mbedtls_sha1_finish_ret( &operation->ctx.sha1, hash );
 c02b5e2:	4631      	mov	r1, r6
 c02b5e4:	f105 0008 	add.w	r0, r5, #8
 c02b5e8:	f7f5 fa5a 	bl	c020aa0 <mbedtls_sha1_finish_ret>
    status = mbedtls_to_psa_error( ret );
 c02b5ec:	f7fe fe60 	bl	c02a2b0 <mbedtls_to_psa_error>
    if( status == PSA_SUCCESS )
 c02b5f0:	4606      	mov	r6, r0
 c02b5f2:	b998      	cbnz	r0, c02b61c <mbedcrypto__psa_hash_finish+0xe8>
        *hash_length = actual_hash_length;
 c02b5f4:	603c      	str	r4, [r7, #0]
        return( psa_hash_abort( operation ) );
 c02b5f6:	4628      	mov	r0, r5
}
 c02b5f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( psa_hash_abort( operation ) );
 c02b5fc:	f7ff bee6 	b.w	c02b3cc <mbedcrypto__psa_hash_abort>
            ret = mbedtls_sha256_finish_ret( &operation->ctx.sha256, hash );
 c02b600:	4631      	mov	r1, r6
 c02b602:	f105 0008 	add.w	r0, r5, #8
 c02b606:	f7f5 fb20 	bl	c020c4a <mbedtls_sha256_finish_ret>
            break;
 c02b60a:	e7ef      	b.n	c02b5ec <mbedcrypto__psa_hash_finish+0xb8>
            ret = mbedtls_sha512_finish_ret( &operation->ctx.sha512, hash );
 c02b60c:	4631      	mov	r1, r6
 c02b60e:	f105 0008 	add.w	r0, r5, #8
 c02b612:	f003 f980 	bl	c02e916 <mbedtls_sha512_finish_ret>
            break;
 c02b616:	e7e9      	b.n	c02b5ec <mbedcrypto__psa_hash_finish+0xb8>
        status = PSA_ERROR_BUFFER_TOO_SMALL;
 c02b618:	f06f 0689 	mvn.w	r6, #137	; 0x89
        psa_hash_abort( operation );
 c02b61c:	4628      	mov	r0, r5
 c02b61e:	f7ff fed5 	bl	c02b3cc <mbedcrypto__psa_hash_abort>
}
 c02b622:	4630      	mov	r0, r6
 c02b624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return( PSA_ERROR_BAD_STATE );
 c02b628:	f06f 0688 	mvn.w	r6, #136	; 0x88
 c02b62c:	e7f9      	b.n	c02b622 <mbedcrypto__psa_hash_finish+0xee>
 c02b62e:	bf00      	nop
 c02b630:	01000008 	.word	0x01000008

0c02b634 <psa_hmac_setup_internal>:
{
 c02b634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c02b638:	461f      	mov	r7, r3
    size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c02b63a:	b2db      	uxtb	r3, r3
{
 c02b63c:	b0a3      	sub	sp, #140	; 0x8c
    size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c02b63e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
{
 c02b642:	9201      	str	r2, [sp, #4]
    size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c02b644:	f103 427f 	add.w	r2, r3, #4278190080	; 0xff000000
 c02b648:	3a01      	subs	r2, #1
 c02b64a:	2a02      	cmp	r2, #2
{
 c02b64c:	4606      	mov	r6, r0
 c02b64e:	4688      	mov	r8, r1
    size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c02b650:	d932      	bls.n	c02b6b8 <psa_hmac_setup_internal+0x84>
 c02b652:	f103 427f 	add.w	r2, r3, #4278190080	; 0xff000000
 c02b656:	3a04      	subs	r2, #4
 c02b658:	2a01      	cmp	r2, #1
 c02b65a:	d92f      	bls.n	c02b6bc <psa_hmac_setup_internal+0x88>
 c02b65c:	4a4a      	ldr	r2, [pc, #296]	; (c02b788 <psa_hmac_setup_internal+0x154>)
 c02b65e:	4293      	cmp	r3, r2
 c02b660:	d030      	beq.n	c02b6c4 <psa_hmac_setup_internal+0x90>
 c02b662:	3201      	adds	r2, #1
 c02b664:	4293      	cmp	r3, r2
 c02b666:	d02f      	beq.n	c02b6c8 <psa_hmac_setup_internal+0x94>
 c02b668:	3201      	adds	r2, #1
 c02b66a:	4293      	cmp	r3, r2
 c02b66c:	d02e      	beq.n	c02b6cc <psa_hmac_setup_internal+0x98>
 c02b66e:	3201      	adds	r2, #1
 c02b670:	4293      	cmp	r3, r2
 c02b672:	d025      	beq.n	c02b6c0 <psa_hmac_setup_internal+0x8c>
 c02b674:	3201      	adds	r2, #1
 c02b676:	4293      	cmp	r3, r2
 c02b678:	d024      	beq.n	c02b6c4 <psa_hmac_setup_internal+0x90>
 c02b67a:	3201      	adds	r2, #1
 c02b67c:	4293      	cmp	r3, r2
 c02b67e:	d023      	beq.n	c02b6c8 <psa_hmac_setup_internal+0x94>
 c02b680:	3203      	adds	r2, #3
 c02b682:	4293      	cmp	r3, r2
 c02b684:	d01e      	beq.n	c02b6c4 <psa_hmac_setup_internal+0x90>
 c02b686:	3201      	adds	r2, #1
 c02b688:	4293      	cmp	r3, r2
 c02b68a:	d01d      	beq.n	c02b6c8 <psa_hmac_setup_internal+0x94>
 c02b68c:	3201      	adds	r2, #1
 c02b68e:	4293      	cmp	r3, r2
 c02b690:	d01c      	beq.n	c02b6cc <psa_hmac_setup_internal+0x98>
 c02b692:	3201      	adds	r2, #1
 c02b694:	4293      	cmp	r3, r2
 c02b696:	bf0c      	ite	eq
 c02b698:	2340      	moveq	r3, #64	; 0x40
 c02b69a:	2300      	movne	r3, #0
 c02b69c:	f107 427f 	add.w	r2, r7, #4278190080	; 0xff000000
 c02b6a0:	3a01      	subs	r2, #1
 c02b6a2:	2a0a      	cmp	r2, #10
 c02b6a4:	d814      	bhi.n	c02b6d0 <psa_hmac_setup_internal+0x9c>
 c02b6a6:	4939      	ldr	r1, [pc, #228]	; (c02b78c <psa_hmac_setup_internal+0x158>)
 c02b6a8:	f811 9002 	ldrb.w	r9, [r1, r2]
    if( block_size > sizeof( ipad ) )
 c02b6ac:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 c02b6b0:	d910      	bls.n	c02b6d4 <psa_hmac_setup_internal+0xa0>
        return( PSA_ERROR_NOT_SUPPORTED );
 c02b6b2:	f06f 0485 	mvn.w	r4, #133	; 0x85
 c02b6b6:	e04e      	b.n	c02b756 <psa_hmac_setup_internal+0x122>
    size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c02b6b8:	2310      	movs	r3, #16
 c02b6ba:	e7ef      	b.n	c02b69c <psa_hmac_setup_internal+0x68>
 c02b6bc:	2314      	movs	r3, #20
 c02b6be:	e7ed      	b.n	c02b69c <psa_hmac_setup_internal+0x68>
 c02b6c0:	2340      	movs	r3, #64	; 0x40
 c02b6c2:	e7eb      	b.n	c02b69c <psa_hmac_setup_internal+0x68>
 c02b6c4:	231c      	movs	r3, #28
 c02b6c6:	e7e9      	b.n	c02b69c <psa_hmac_setup_internal+0x68>
 c02b6c8:	2320      	movs	r3, #32
 c02b6ca:	e7e7      	b.n	c02b69c <psa_hmac_setup_internal+0x68>
 c02b6cc:	2330      	movs	r3, #48	; 0x30
 c02b6ce:	e7e5      	b.n	c02b69c <psa_hmac_setup_internal+0x68>
 c02b6d0:	f04f 0900 	mov.w	r9, #0
    if( block_size < hash_size )
 c02b6d4:	454b      	cmp	r3, r9
 c02b6d6:	d8ec      	bhi.n	c02b6b2 <psa_hmac_setup_internal+0x7e>
    if( key_length > block_size )
 c02b6d8:	9c01      	ldr	r4, [sp, #4]
 c02b6da:	ad02      	add	r5, sp, #8
 c02b6dc:	454c      	cmp	r4, r9
 c02b6de:	d93e      	bls.n	c02b75e <psa_hmac_setup_internal+0x12a>
        status = psa_hash_setup( &hmac->hash_ctx, hash_alg );
 c02b6e0:	4639      	mov	r1, r7
 c02b6e2:	4630      	mov	r0, r6
 c02b6e4:	f7ff fecd 	bl	c02b482 <mbedcrypto__psa_hash_setup>
        if( status != PSA_SUCCESS )
 c02b6e8:	4604      	mov	r4, r0
 c02b6ea:	bb80      	cbnz	r0, c02b74e <psa_hmac_setup_internal+0x11a>
        status = psa_hash_update( &hmac->hash_ctx, key, key_length );
 c02b6ec:	9a01      	ldr	r2, [sp, #4]
 c02b6ee:	4641      	mov	r1, r8
 c02b6f0:	4630      	mov	r0, r6
 c02b6f2:	f7ff ff1a 	bl	c02b52a <mbedcrypto__psa_hash_update>
        if( status != PSA_SUCCESS )
 c02b6f6:	4604      	mov	r4, r0
 c02b6f8:	bb48      	cbnz	r0, c02b74e <psa_hmac_setup_internal+0x11a>
        status = psa_hash_finish( &hmac->hash_ctx,
 c02b6fa:	ab01      	add	r3, sp, #4
 c02b6fc:	2280      	movs	r2, #128	; 0x80
 c02b6fe:	4629      	mov	r1, r5
 c02b700:	4630      	mov	r0, r6
 c02b702:	f7ff ff17 	bl	c02b534 <mbedcrypto__psa_hash_finish>
        if( status != PSA_SUCCESS )
 c02b706:	4604      	mov	r4, r0
 c02b708:	bb08      	cbnz	r0, c02b74e <psa_hmac_setup_internal+0x11a>
    for( i = 0; i < key_length; i++ )
 c02b70a:	2300      	movs	r3, #0
 c02b70c:	9c01      	ldr	r4, [sp, #4]
 c02b70e:	429c      	cmp	r4, r3
 c02b710:	d12d      	bne.n	c02b76e <psa_hmac_setup_internal+0x13a>
    memset( ipad + key_length, 0x36, block_size - key_length );
 c02b712:	eba9 0804 	sub.w	r8, r9, r4
 c02b716:	4642      	mov	r2, r8
 c02b718:	2136      	movs	r1, #54	; 0x36
 c02b71a:	1928      	adds	r0, r5, r4
 c02b71c:	f7ec f953 	bl	c0179c6 <memset>
 c02b720:	f506 72bc 	add.w	r2, r6, #376	; 0x178
    for( i = 0; i < key_length; i++ )
 c02b724:	2300      	movs	r3, #0
 c02b726:	4610      	mov	r0, r2
 c02b728:	42a3      	cmp	r3, r4
 c02b72a:	d126      	bne.n	c02b77a <psa_hmac_setup_internal+0x146>
    memset( hmac->opad + key_length, 0x5C, block_size - key_length );
 c02b72c:	4642      	mov	r2, r8
 c02b72e:	215c      	movs	r1, #92	; 0x5c
 c02b730:	4418      	add	r0, r3
 c02b732:	f7ec f948 	bl	c0179c6 <memset>
    status = psa_hash_setup( &hmac->hash_ctx, hash_alg );
 c02b736:	4639      	mov	r1, r7
 c02b738:	4630      	mov	r0, r6
 c02b73a:	f7ff fea2 	bl	c02b482 <mbedcrypto__psa_hash_setup>
    if( status != PSA_SUCCESS )
 c02b73e:	4604      	mov	r4, r0
 c02b740:	b928      	cbnz	r0, c02b74e <psa_hmac_setup_internal+0x11a>
    status = psa_hash_update( &hmac->hash_ctx, ipad, block_size );
 c02b742:	464a      	mov	r2, r9
 c02b744:	4629      	mov	r1, r5
 c02b746:	4630      	mov	r0, r6
 c02b748:	f7ff feef 	bl	c02b52a <mbedcrypto__psa_hash_update>
 c02b74c:	4604      	mov	r4, r0
    mbedtls_platform_zeroize( ipad, key_length );
 c02b74e:	9901      	ldr	r1, [sp, #4]
 c02b750:	4628      	mov	r0, r5
 c02b752:	f7fe fda5 	bl	c02a2a0 <mbedtls_platform_zeroize>
}
 c02b756:	4620      	mov	r0, r4
 c02b758:	b023      	add	sp, #140	; 0x8c
 c02b75a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if( key_length != 0 )
 c02b75e:	2c00      	cmp	r4, #0
 c02b760:	d0d7      	beq.n	c02b712 <psa_hmac_setup_internal+0xde>
        memcpy( ipad, key, key_length );
 c02b762:	4622      	mov	r2, r4
 c02b764:	4641      	mov	r1, r8
 c02b766:	4628      	mov	r0, r5
 c02b768:	f7ec f909 	bl	c01797e <memcpy>
 c02b76c:	e7cd      	b.n	c02b70a <psa_hmac_setup_internal+0xd6>
        ipad[i] ^= 0x36;
 c02b76e:	5cea      	ldrb	r2, [r5, r3]
 c02b770:	f082 0236 	eor.w	r2, r2, #54	; 0x36
 c02b774:	54ea      	strb	r2, [r5, r3]
    for( i = 0; i < key_length; i++ )
 c02b776:	3301      	adds	r3, #1
 c02b778:	e7c9      	b.n	c02b70e <psa_hmac_setup_internal+0xda>
        hmac->opad[i] = ipad[i] ^ 0x36 ^ 0x5C;
 c02b77a:	5ce9      	ldrb	r1, [r5, r3]
    for( i = 0; i < key_length; i++ )
 c02b77c:	3301      	adds	r3, #1
        hmac->opad[i] = ipad[i] ^ 0x36 ^ 0x5C;
 c02b77e:	f081 016a 	eor.w	r1, r1, #106	; 0x6a
 c02b782:	f802 1b01 	strb.w	r1, [r2], #1
 c02b786:	e7cf      	b.n	c02b728 <psa_hmac_setup_internal+0xf4>
 c02b788:	01000008 	.word	0x01000008
 c02b78c:	0c0368c0 	.word	0x0c0368c0

0c02b790 <psa_hmac_finish_internal>:
{
 c02b790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t hash_size = 0;
 c02b794:	2600      	movs	r6, #0
    psa_algorithm_t hash_alg = hmac->hash_ctx.alg;
 c02b796:	6807      	ldr	r7, [r0, #0]
{
 c02b798:	4691      	mov	r9, r2
 c02b79a:	f107 437f 	add.w	r3, r7, #4278190080	; 0xff000000
 c02b79e:	3b01      	subs	r3, #1
 c02b7a0:	2b0a      	cmp	r3, #10
 c02b7a2:	bf98      	it	ls
 c02b7a4:	4a1b      	ldrls	r2, [pc, #108]	; (c02b814 <psa_hmac_finish_internal+0x84>)
 c02b7a6:	b093      	sub	sp, #76	; 0x4c
    size_t hash_size = 0;
 c02b7a8:	9601      	str	r6, [sp, #4]
{
 c02b7aa:	4688      	mov	r8, r1
 c02b7ac:	bf98      	it	ls
 c02b7ae:	5cd6      	ldrbls	r6, [r2, r3]
    status = psa_hash_finish( &hmac->hash_ctx, tmp, sizeof( tmp ), &hash_size );
 c02b7b0:	a902      	add	r1, sp, #8
 c02b7b2:	ab01      	add	r3, sp, #4
 c02b7b4:	2240      	movs	r2, #64	; 0x40
{
 c02b7b6:	4605      	mov	r5, r0
    status = psa_hash_finish( &hmac->hash_ctx, tmp, sizeof( tmp ), &hash_size );
 c02b7b8:	f7ff febc 	bl	c02b534 <mbedcrypto__psa_hash_finish>
    if( status != PSA_SUCCESS )
 c02b7bc:	4604      	mov	r4, r0
 c02b7be:	bb28      	cbnz	r0, c02b80c <psa_hmac_finish_internal+0x7c>
    status = psa_hash_setup( &hmac->hash_ctx, hash_alg );
 c02b7c0:	4639      	mov	r1, r7
 c02b7c2:	4628      	mov	r0, r5
 c02b7c4:	f7ff fe5d 	bl	c02b482 <mbedcrypto__psa_hash_setup>
    if( status != PSA_SUCCESS )
 c02b7c8:	4604      	mov	r4, r0
 c02b7ca:	b9d8      	cbnz	r0, c02b804 <psa_hmac_finish_internal+0x74>
    status = psa_hash_update( &hmac->hash_ctx, hmac->opad, block_size );
 c02b7cc:	4632      	mov	r2, r6
 c02b7ce:	f505 71bc 	add.w	r1, r5, #376	; 0x178
 c02b7d2:	4628      	mov	r0, r5
 c02b7d4:	f7ff fea9 	bl	c02b52a <mbedcrypto__psa_hash_update>
    if( status != PSA_SUCCESS )
 c02b7d8:	4604      	mov	r4, r0
 c02b7da:	b998      	cbnz	r0, c02b804 <psa_hmac_finish_internal+0x74>
    status = psa_hash_update( &hmac->hash_ctx, tmp, hash_size );
 c02b7dc:	9a01      	ldr	r2, [sp, #4]
 c02b7de:	a902      	add	r1, sp, #8
 c02b7e0:	4628      	mov	r0, r5
 c02b7e2:	f7ff fea2 	bl	c02b52a <mbedcrypto__psa_hash_update>
    if( status != PSA_SUCCESS )
 c02b7e6:	4604      	mov	r4, r0
 c02b7e8:	b960      	cbnz	r0, c02b804 <psa_hmac_finish_internal+0x74>
    status = psa_hash_finish( &hmac->hash_ctx, tmp, sizeof( tmp ), &hash_size );
 c02b7ea:	ab01      	add	r3, sp, #4
 c02b7ec:	2240      	movs	r2, #64	; 0x40
 c02b7ee:	a902      	add	r1, sp, #8
 c02b7f0:	4628      	mov	r0, r5
 c02b7f2:	f7ff fe9f 	bl	c02b534 <mbedcrypto__psa_hash_finish>
    if( status != PSA_SUCCESS )
 c02b7f6:	4604      	mov	r4, r0
 c02b7f8:	b920      	cbnz	r0, c02b804 <psa_hmac_finish_internal+0x74>
    memcpy( mac, tmp, mac_size );
 c02b7fa:	464a      	mov	r2, r9
 c02b7fc:	a902      	add	r1, sp, #8
 c02b7fe:	4640      	mov	r0, r8
 c02b800:	f7ec f8bd 	bl	c01797e <memcpy>
    mbedtls_platform_zeroize( tmp, hash_size );
 c02b804:	9901      	ldr	r1, [sp, #4]
 c02b806:	a802      	add	r0, sp, #8
 c02b808:	f7fe fd4a 	bl	c02a2a0 <mbedtls_platform_zeroize>
}
 c02b80c:	4620      	mov	r0, r4
 c02b80e:	b013      	add	sp, #76	; 0x4c
 c02b810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c02b814:	0c0368c0 	.word	0x0c0368c0

0c02b818 <psa_mac_finish_internal>:
{
 c02b818:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 c02b81a:	4604      	mov	r4, r0
    if( ! operation->key_set )
 c02b81c:	7923      	ldrb	r3, [r4, #4]
{
 c02b81e:	4610      	mov	r0, r2
    if( ! operation->key_set )
 c02b820:	07da      	lsls	r2, r3, #31
{
 c02b822:	460e      	mov	r6, r1
    if( ! operation->key_set )
 c02b824:	d52e      	bpl.n	c02b884 <psa_mac_finish_internal+0x6c>
    if( operation->iv_required && ! operation->iv_set )
 c02b826:	f003 0306 	and.w	r3, r3, #6
 c02b82a:	2b02      	cmp	r3, #2
 c02b82c:	d02a      	beq.n	c02b884 <psa_mac_finish_internal+0x6c>
    if( mac_size < operation->mac_size )
 c02b82e:	7962      	ldrb	r2, [r4, #5]
 c02b830:	4282      	cmp	r2, r0
 c02b832:	d824      	bhi.n	c02b87e <psa_mac_finish_internal+0x66>
    if( operation->alg == PSA_ALG_CMAC )
 c02b834:	6820      	ldr	r0, [r4, #0]
 c02b836:	4b15      	ldr	r3, [pc, #84]	; (c02b88c <psa_mac_finish_internal+0x74>)
 c02b838:	4298      	cmp	r0, r3
 c02b83a:	d115      	bne.n	c02b868 <psa_mac_finish_internal+0x50>
        int ret = mbedtls_cipher_cmac_finish( &operation->ctx.cmac, tmp );
 c02b83c:	4669      	mov	r1, sp
 c02b83e:	f104 0008 	add.w	r0, r4, #8
 c02b842:	f7fb fbf5 	bl	c027030 <mbedtls_cipher_cmac_finish>
        if( ret == 0 )
 c02b846:	4605      	mov	r5, r0
 c02b848:	b920      	cbnz	r0, c02b854 <psa_mac_finish_internal+0x3c>
            memcpy( mac, tmp, operation->mac_size );
 c02b84a:	7962      	ldrb	r2, [r4, #5]
 c02b84c:	4669      	mov	r1, sp
 c02b84e:	4630      	mov	r0, r6
 c02b850:	f7ec f895 	bl	c01797e <memcpy>
        mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 c02b854:	4668      	mov	r0, sp
 c02b856:	2110      	movs	r1, #16
 c02b858:	f7fe fd22 	bl	c02a2a0 <mbedtls_platform_zeroize>
        return( mbedtls_to_psa_error( ret ) );
 c02b85c:	4628      	mov	r0, r5
}
 c02b85e:	b004      	add	sp, #16
 c02b860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_to_psa_error( ret ) );
 c02b864:	f7fe bd24 	b.w	c02a2b0 <mbedtls_to_psa_error>
    if( PSA_ALG_IS_HMAC( operation->alg ) )
 c02b868:	4b09      	ldr	r3, [pc, #36]	; (c02b890 <psa_mac_finish_internal+0x78>)
 c02b86a:	4003      	ands	r3, r0
 c02b86c:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 c02b870:	d108      	bne.n	c02b884 <psa_mac_finish_internal+0x6c>
        return( psa_hmac_finish_internal( &operation->ctx.hmac,
 c02b872:	f104 0008 	add.w	r0, r4, #8
 c02b876:	f7ff ff8b 	bl	c02b790 <psa_hmac_finish_internal>
}
 c02b87a:	b004      	add	sp, #16
 c02b87c:	bd70      	pop	{r4, r5, r6, pc}
        return( PSA_ERROR_BUFFER_TOO_SMALL );
 c02b87e:	f06f 0089 	mvn.w	r0, #137	; 0x89
 c02b882:	e7fa      	b.n	c02b87a <psa_mac_finish_internal+0x62>
        return( PSA_ERROR_BAD_STATE );
 c02b884:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02b888:	e7f7      	b.n	c02b87a <psa_mac_finish_internal+0x62>
 c02b88a:	bf00      	nop
 c02b88c:	02c00002 	.word	0x02c00002
 c02b890:	7fc00000 	.word	0x7fc00000

0c02b894 <psa_generator_tls12_prf_generate_next_block>:
{
 c02b894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    psa_algorithm_t hash_alg = PSA_ALG_HKDF_GET_HASH( alg );
 c02b898:	b2c9      	uxtb	r1, r1
 c02b89a:	f041 7580 	orr.w	r5, r1, #16777216	; 0x1000000
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c02b89e:	f105 437f 	add.w	r3, r5, #4278190080	; 0xff000000
 c02b8a2:	3b01      	subs	r3, #1
 c02b8a4:	2b02      	cmp	r3, #2
{
 c02b8a6:	b0ff      	sub	sp, #508	; 0x1fc
 c02b8a8:	4607      	mov	r7, r0
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c02b8aa:	d975      	bls.n	c02b998 <psa_generator_tls12_prf_generate_next_block+0x104>
 c02b8ac:	f105 437f 	add.w	r3, r5, #4278190080	; 0xff000000
 c02b8b0:	3b04      	subs	r3, #4
 c02b8b2:	2b01      	cmp	r3, #1
 c02b8b4:	d972      	bls.n	c02b99c <psa_generator_tls12_prf_generate_next_block+0x108>
 c02b8b6:	4b40      	ldr	r3, [pc, #256]	; (c02b9b8 <psa_generator_tls12_prf_generate_next_block+0x124>)
 c02b8b8:	429d      	cmp	r5, r3
 c02b8ba:	d073      	beq.n	c02b9a4 <psa_generator_tls12_prf_generate_next_block+0x110>
 c02b8bc:	3301      	adds	r3, #1
 c02b8be:	429d      	cmp	r5, r3
 c02b8c0:	d072      	beq.n	c02b9a8 <psa_generator_tls12_prf_generate_next_block+0x114>
 c02b8c2:	3301      	adds	r3, #1
 c02b8c4:	429d      	cmp	r5, r3
 c02b8c6:	d071      	beq.n	c02b9ac <psa_generator_tls12_prf_generate_next_block+0x118>
 c02b8c8:	3301      	adds	r3, #1
 c02b8ca:	429d      	cmp	r5, r3
 c02b8cc:	d068      	beq.n	c02b9a0 <psa_generator_tls12_prf_generate_next_block+0x10c>
 c02b8ce:	3301      	adds	r3, #1
 c02b8d0:	429d      	cmp	r5, r3
 c02b8d2:	d067      	beq.n	c02b9a4 <psa_generator_tls12_prf_generate_next_block+0x110>
 c02b8d4:	3301      	adds	r3, #1
 c02b8d6:	429d      	cmp	r5, r3
 c02b8d8:	d066      	beq.n	c02b9a8 <psa_generator_tls12_prf_generate_next_block+0x114>
 c02b8da:	3303      	adds	r3, #3
 c02b8dc:	429d      	cmp	r5, r3
 c02b8de:	d061      	beq.n	c02b9a4 <psa_generator_tls12_prf_generate_next_block+0x110>
 c02b8e0:	3301      	adds	r3, #1
 c02b8e2:	429d      	cmp	r5, r3
 c02b8e4:	d060      	beq.n	c02b9a8 <psa_generator_tls12_prf_generate_next_block+0x114>
 c02b8e6:	3301      	adds	r3, #1
 c02b8e8:	429d      	cmp	r5, r3
 c02b8ea:	d05f      	beq.n	c02b9ac <psa_generator_tls12_prf_generate_next_block+0x118>
 c02b8ec:	4c33      	ldr	r4, [pc, #204]	; (c02b9bc <psa_generator_tls12_prf_generate_next_block+0x128>)
 c02b8ee:	42a5      	cmp	r5, r4
 c02b8f0:	bf0c      	ite	eq
 c02b8f2:	2440      	moveq	r4, #64	; 0x40
 c02b8f4:	2400      	movne	r4, #0
    if( tls12_prf->block_number == 0xff )
 c02b8f6:	f897 6051 	ldrb.w	r6, [r7, #81]	; 0x51
 c02b8fa:	2eff      	cmp	r6, #255	; 0xff
 c02b8fc:	d058      	beq.n	c02b9b0 <psa_generator_tls12_prf_generate_next_block+0x11c>
    tls12_prf->offset_in_block = 0;
 c02b8fe:	2100      	movs	r1, #0
    ++tls12_prf->block_number;
 c02b900:	3601      	adds	r6, #1
 c02b902:	b2f6      	uxtb	r6, r6
 c02b904:	f887 6051 	strb.w	r6, [r7, #81]	; 0x51
    tls12_prf->offset_in_block = 0;
 c02b908:	f887 1050 	strb.w	r1, [r7, #80]	; 0x50
    memset( hmac, 0, sizeof( *hmac ) );
 c02b90c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 c02b910:	4668      	mov	r0, sp
 c02b912:	f7ec f858 	bl	c0179c6 <memset>
    status = psa_hmac_setup_internal( &hmac,
 c02b916:	e9d7 1200 	ldrd	r1, r2, [r7]
    if( tls12_prf->block_number == 1 )
 c02b91a:	2e01      	cmp	r6, #1
        Ai_len = tls12_prf->Ai_with_seed_len - hash_length;
 c02b91c:	bf08      	it	eq
 c02b91e:	68fb      	ldreq	r3, [r7, #12]
 c02b920:	f8d7 9008 	ldr.w	r9, [r7, #8]
 c02b924:	bf08      	it	eq
 c02b926:	eba3 0804 	subeq.w	r8, r3, r4
    status = psa_hmac_setup_internal( &hmac,
 c02b92a:	4668      	mov	r0, sp
 c02b92c:	462b      	mov	r3, r5
        Ai     = tls12_prf->Ai_with_seed + hash_length;
 c02b92e:	bf0c      	ite	eq
 c02b930:	44a1      	addeq	r9, r4
        Ai_len = hash_length;
 c02b932:	46a0      	movne	r8, r4
    status = psa_hmac_setup_internal( &hmac,
 c02b934:	f7ff fe7e 	bl	c02b634 <psa_hmac_setup_internal>
    if( status != PSA_SUCCESS )
 c02b938:	4606      	mov	r6, r0
 c02b93a:	bb18      	cbnz	r0, c02b984 <psa_generator_tls12_prf_generate_next_block+0xf0>
    status = psa_hash_update( &hmac.hash_ctx,
 c02b93c:	4642      	mov	r2, r8
 c02b93e:	4649      	mov	r1, r9
 c02b940:	4668      	mov	r0, sp
 c02b942:	f7ff fdf2 	bl	c02b52a <mbedcrypto__psa_hash_update>
    if( status != PSA_SUCCESS )
 c02b946:	4606      	mov	r6, r0
 c02b948:	b9e0      	cbnz	r0, c02b984 <psa_generator_tls12_prf_generate_next_block+0xf0>
    status = psa_hmac_finish_internal( &hmac,
 c02b94a:	4622      	mov	r2, r4
 c02b94c:	68b9      	ldr	r1, [r7, #8]
 c02b94e:	4668      	mov	r0, sp
 c02b950:	f7ff ff1e 	bl	c02b790 <psa_hmac_finish_internal>
    if( status != PSA_SUCCESS )
 c02b954:	4606      	mov	r6, r0
 c02b956:	b9a8      	cbnz	r0, c02b984 <psa_generator_tls12_prf_generate_next_block+0xf0>
    status = psa_hmac_setup_internal( &hmac,
 c02b958:	e9d7 1200 	ldrd	r1, r2, [r7]
 c02b95c:	462b      	mov	r3, r5
 c02b95e:	4668      	mov	r0, sp
 c02b960:	f7ff fe68 	bl	c02b634 <psa_hmac_setup_internal>
    if( status != PSA_SUCCESS )
 c02b964:	4606      	mov	r6, r0
 c02b966:	b968      	cbnz	r0, c02b984 <psa_generator_tls12_prf_generate_next_block+0xf0>
    status = psa_hash_update( &hmac.hash_ctx,
 c02b968:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 c02b96c:	4668      	mov	r0, sp
 c02b96e:	f7ff fddc 	bl	c02b52a <mbedcrypto__psa_hash_update>
    if( status != PSA_SUCCESS )
 c02b972:	4606      	mov	r6, r0
 c02b974:	b930      	cbnz	r0, c02b984 <psa_generator_tls12_prf_generate_next_block+0xf0>
    status = psa_hmac_finish_internal( &hmac,
 c02b976:	4622      	mov	r2, r4
 c02b978:	f107 0110 	add.w	r1, r7, #16
 c02b97c:	4668      	mov	r0, sp
 c02b97e:	f7ff ff07 	bl	c02b790 <psa_hmac_finish_internal>
 c02b982:	4606      	mov	r6, r0
    cleanup_status = psa_hmac_abort_internal( &hmac );
 c02b984:	4668      	mov	r0, sp
 c02b986:	f7ff fd47 	bl	c02b418 <psa_hmac_abort_internal>
    if( status == PSA_SUCCESS && cleanup_status != PSA_SUCCESS )
 c02b98a:	2e00      	cmp	r6, #0
 c02b98c:	bf08      	it	eq
 c02b98e:	4606      	moveq	r6, r0
}
 c02b990:	4630      	mov	r0, r6
 c02b992:	b07f      	add	sp, #508	; 0x1fc
 c02b994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c02b998:	2410      	movs	r4, #16
 c02b99a:	e7ac      	b.n	c02b8f6 <psa_generator_tls12_prf_generate_next_block+0x62>
 c02b99c:	2414      	movs	r4, #20
 c02b99e:	e7aa      	b.n	c02b8f6 <psa_generator_tls12_prf_generate_next_block+0x62>
 c02b9a0:	2440      	movs	r4, #64	; 0x40
 c02b9a2:	e7a8      	b.n	c02b8f6 <psa_generator_tls12_prf_generate_next_block+0x62>
 c02b9a4:	241c      	movs	r4, #28
 c02b9a6:	e7a6      	b.n	c02b8f6 <psa_generator_tls12_prf_generate_next_block+0x62>
 c02b9a8:	2420      	movs	r4, #32
 c02b9aa:	e7a4      	b.n	c02b8f6 <psa_generator_tls12_prf_generate_next_block+0x62>
 c02b9ac:	2430      	movs	r4, #48	; 0x30
 c02b9ae:	e7a2      	b.n	c02b8f6 <psa_generator_tls12_prf_generate_next_block+0x62>
        return( PSA_ERROR_BAD_STATE );
 c02b9b0:	f06f 0688 	mvn.w	r6, #136	; 0x88
 c02b9b4:	e7ec      	b.n	c02b990 <psa_generator_tls12_prf_generate_next_block+0xfc>
 c02b9b6:	bf00      	nop
 c02b9b8:	01000008 	.word	0x01000008
 c02b9bc:	01000013 	.word	0x01000013

0c02b9c0 <psa_key_derivation_internal>:
    const uint8_t *secret, size_t secret_length,
    psa_algorithm_t alg,
    const uint8_t *salt, size_t salt_length,
    const uint8_t *label, size_t label_length,
    size_t capacity )
{
 c02b9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02b9c4:	4606      	mov	r6, r0
    psa_status_t status;
    size_t max_capacity;

    /* Set generator->alg even on failure so that abort knows what to do. */
    generator->alg = alg;
 c02b9c6:	6003      	str	r3, [r0, #0]

    if( alg == PSA_ALG_SELECT_RAW )
 c02b9c8:	4898      	ldr	r0, [pc, #608]	; (c02bc2c <psa_key_derivation_internal+0x26c>)
{
 c02b9ca:	b085      	sub	sp, #20
    if( alg == PSA_ALG_SELECT_RAW )
 c02b9cc:	4283      	cmp	r3, r0
{
 c02b9ce:	4689      	mov	r9, r1
 c02b9d0:	4617      	mov	r7, r2
 c02b9d2:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 c02b9d6:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
    if( alg == PSA_ALG_SELECT_RAW )
 c02b9da:	d11e      	bne.n	c02ba1a <psa_key_derivation_internal+0x5a>
    {
        (void) salt;
        if( salt_length != 0 )
 c02b9dc:	b122      	cbz	r2, c02b9e8 <psa_key_derivation_internal+0x28>
            return( PSA_ERROR_INVALID_ARGUMENT );
 c02b9de:	f06f 0086 	mvn.w	r0, #134	; 0x86
        generator->capacity = max_capacity;
    else
        return( PSA_ERROR_INVALID_ARGUMENT );

    return( PSA_SUCCESS );
}
 c02b9e2:	b005      	add	sp, #20
 c02b9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( label_length != 0 )
 c02b9e8:	f1b8 0f00 	cmp.w	r8, #0
 c02b9ec:	d1f7      	bne.n	c02b9de <psa_key_derivation_internal+0x1e>
        generator->ctx.buffer.data = mbedtls_calloc( 1, secret_length );
 c02b9ee:	4639      	mov	r1, r7
 c02b9f0:	2001      	movs	r0, #1
 c02b9f2:	f7fe fc3f 	bl	c02a274 <mbedtls_calloc>
 c02b9f6:	60b0      	str	r0, [r6, #8]
        if( generator->ctx.buffer.data == NULL )
 c02b9f8:	b910      	cbnz	r0, c02ba00 <psa_key_derivation_internal+0x40>
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c02b9fa:	f06f 008c 	mvn.w	r0, #140	; 0x8c
 c02b9fe:	e7f0      	b.n	c02b9e2 <psa_key_derivation_internal+0x22>
        max_capacity = secret_length;
 c02ba00:	463d      	mov	r5, r7
        memcpy( generator->ctx.buffer.data, secret, secret_length );
 c02ba02:	463a      	mov	r2, r7
 c02ba04:	4649      	mov	r1, r9
 c02ba06:	f7eb ffba 	bl	c01797e <memcpy>
        generator->ctx.buffer.size = secret_length;
 c02ba0a:	60f7      	str	r7, [r6, #12]
    if( capacity <= max_capacity )
 c02ba0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 c02ba0e:	42ab      	cmp	r3, r5
 c02ba10:	f200 8102 	bhi.w	c02bc18 <psa_key_derivation_internal+0x258>
        generator->capacity = capacity;
 c02ba14:	6073      	str	r3, [r6, #4]
    return( PSA_SUCCESS );
 c02ba16:	2000      	movs	r0, #0
 c02ba18:	e7e3      	b.n	c02b9e2 <psa_key_derivation_internal+0x22>
    if( PSA_ALG_IS_HKDF( alg ) )
 c02ba1a:	4885      	ldr	r0, [pc, #532]	; (c02bc30 <psa_key_derivation_internal+0x270>)
 c02ba1c:	f023 0cff 	bic.w	ip, r3, #255	; 0xff
 c02ba20:	4584      	cmp	ip, r0
 c02ba22:	f040 809e 	bne.w	c02bb62 <psa_key_derivation_internal+0x1a2>
        psa_algorithm_t hash_alg = PSA_ALG_HKDF_GET_HASH( alg );
 c02ba26:	b2db      	uxtb	r3, r3
 c02ba28:	f043 7480 	orr.w	r4, r3, #16777216	; 0x1000000
        size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c02ba2c:	f104 4a7f 	add.w	sl, r4, #4278190080	; 0xff000000
 c02ba30:	f10a 3aff 	add.w	sl, sl, #4294967295
 c02ba34:	f1ba 0f02 	cmp.w	sl, #2
 c02ba38:	d925      	bls.n	c02ba86 <psa_key_derivation_internal+0xc6>
 c02ba3a:	f104 437f 	add.w	r3, r4, #4278190080	; 0xff000000
 c02ba3e:	3b04      	subs	r3, #4
 c02ba40:	2b01      	cmp	r3, #1
 c02ba42:	d97a      	bls.n	c02bb3a <psa_key_derivation_internal+0x17a>
 c02ba44:	4b7b      	ldr	r3, [pc, #492]	; (c02bc34 <psa_key_derivation_internal+0x274>)
 c02ba46:	429c      	cmp	r4, r3
 c02ba48:	d079      	beq.n	c02bb3e <psa_key_derivation_internal+0x17e>
 c02ba4a:	3301      	adds	r3, #1
 c02ba4c:	429c      	cmp	r4, r3
 c02ba4e:	d078      	beq.n	c02bb42 <psa_key_derivation_internal+0x182>
 c02ba50:	3301      	adds	r3, #1
 c02ba52:	429c      	cmp	r4, r3
 c02ba54:	d077      	beq.n	c02bb46 <psa_key_derivation_internal+0x186>
 c02ba56:	3301      	adds	r3, #1
 c02ba58:	429c      	cmp	r4, r3
 c02ba5a:	d012      	beq.n	c02ba82 <psa_key_derivation_internal+0xc2>
 c02ba5c:	3301      	adds	r3, #1
 c02ba5e:	429c      	cmp	r4, r3
 c02ba60:	d06d      	beq.n	c02bb3e <psa_key_derivation_internal+0x17e>
 c02ba62:	3301      	adds	r3, #1
 c02ba64:	429c      	cmp	r4, r3
 c02ba66:	d06c      	beq.n	c02bb42 <psa_key_derivation_internal+0x182>
 c02ba68:	3303      	adds	r3, #3
 c02ba6a:	429c      	cmp	r4, r3
 c02ba6c:	d067      	beq.n	c02bb3e <psa_key_derivation_internal+0x17e>
 c02ba6e:	3301      	adds	r3, #1
 c02ba70:	429c      	cmp	r4, r3
 c02ba72:	d066      	beq.n	c02bb42 <psa_key_derivation_internal+0x182>
 c02ba74:	3301      	adds	r3, #1
 c02ba76:	429c      	cmp	r4, r3
 c02ba78:	d065      	beq.n	c02bb46 <psa_key_derivation_internal+0x186>
 c02ba7a:	3301      	adds	r3, #1
 c02ba7c:	429c      	cmp	r4, r3
 c02ba7e:	f040 80d1 	bne.w	c02bc24 <psa_key_derivation_internal+0x264>
 c02ba82:	2540      	movs	r5, #64	; 0x40
 c02ba84:	e000      	b.n	c02ba88 <psa_key_derivation_internal+0xc8>
 c02ba86:	2510      	movs	r5, #16
    status = psa_hmac_setup_internal( &hkdf->hmac,
 c02ba88:	f106 0b10 	add.w	fp, r6, #16
 c02ba8c:	4623      	mov	r3, r4
 c02ba8e:	4658      	mov	r0, fp
        max_capacity = 255 * hash_size;
 c02ba90:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
    status = psa_hmac_setup_internal( &hkdf->hmac,
 c02ba94:	f7ff fdce 	bl	c02b634 <psa_hmac_setup_internal>
    if( status != PSA_SUCCESS )
 c02ba98:	2800      	cmp	r0, #0
 c02ba9a:	d1a2      	bne.n	c02b9e2 <psa_key_derivation_internal+0x22>
    status = psa_hash_update( &hkdf->hmac.hash_ctx, secret, secret_length );
 c02ba9c:	463a      	mov	r2, r7
 c02ba9e:	4649      	mov	r1, r9
 c02baa0:	4658      	mov	r0, fp
 c02baa2:	f7ff fd42 	bl	c02b52a <mbedcrypto__psa_hash_update>
    if( status != PSA_SUCCESS )
 c02baa6:	2800      	cmp	r0, #0
 c02baa8:	d19b      	bne.n	c02b9e2 <psa_key_derivation_internal+0x22>
    status = psa_hmac_finish_internal( &hkdf->hmac,
 c02baaa:	2240      	movs	r2, #64	; 0x40
 c02baac:	f506 7102 	add.w	r1, r6, #520	; 0x208
 c02bab0:	4658      	mov	r0, fp
 c02bab2:	f7ff fe6d 	bl	c02b790 <psa_hmac_finish_internal>
    if( status != PSA_SUCCESS )
 c02bab6:	2800      	cmp	r0, #0
 c02bab8:	d193      	bne.n	c02b9e2 <psa_key_derivation_internal+0x22>
    hkdf->offset_in_block = PSA_HASH_SIZE( hash_alg );
 c02baba:	f1ba 0f02 	cmp.w	sl, #2
 c02babe:	d944      	bls.n	c02bb4a <psa_key_derivation_internal+0x18a>
 c02bac0:	f104 437f 	add.w	r3, r4, #4278190080	; 0xff000000
 c02bac4:	3b04      	subs	r3, #4
 c02bac6:	2b01      	cmp	r3, #1
 c02bac8:	d941      	bls.n	c02bb4e <psa_key_derivation_internal+0x18e>
 c02baca:	4b5a      	ldr	r3, [pc, #360]	; (c02bc34 <psa_key_derivation_internal+0x274>)
 c02bacc:	429c      	cmp	r4, r3
 c02bace:	d042      	beq.n	c02bb56 <psa_key_derivation_internal+0x196>
 c02bad0:	3301      	adds	r3, #1
 c02bad2:	429c      	cmp	r4, r3
 c02bad4:	d041      	beq.n	c02bb5a <psa_key_derivation_internal+0x19a>
 c02bad6:	3301      	adds	r3, #1
 c02bad8:	429c      	cmp	r4, r3
 c02bada:	d040      	beq.n	c02bb5e <psa_key_derivation_internal+0x19e>
 c02badc:	3301      	adds	r3, #1
 c02bade:	429c      	cmp	r4, r3
 c02bae0:	d037      	beq.n	c02bb52 <psa_key_derivation_internal+0x192>
 c02bae2:	3301      	adds	r3, #1
 c02bae4:	429c      	cmp	r4, r3
 c02bae6:	d036      	beq.n	c02bb56 <psa_key_derivation_internal+0x196>
 c02bae8:	3301      	adds	r3, #1
 c02baea:	429c      	cmp	r4, r3
 c02baec:	d035      	beq.n	c02bb5a <psa_key_derivation_internal+0x19a>
 c02baee:	3303      	adds	r3, #3
 c02baf0:	429c      	cmp	r4, r3
 c02baf2:	d030      	beq.n	c02bb56 <psa_key_derivation_internal+0x196>
 c02baf4:	3301      	adds	r3, #1
 c02baf6:	429c      	cmp	r4, r3
 c02baf8:	d02f      	beq.n	c02bb5a <psa_key_derivation_internal+0x19a>
 c02bafa:	3301      	adds	r3, #1
 c02bafc:	429c      	cmp	r4, r3
 c02bafe:	d02e      	beq.n	c02bb5e <psa_key_derivation_internal+0x19e>
 c02bb00:	3301      	adds	r3, #1
 c02bb02:	429c      	cmp	r4, r3
 c02bb04:	bf0c      	ite	eq
 c02bb06:	2440      	moveq	r4, #64	; 0x40
 c02bb08:	2400      	movne	r4, #0
    hkdf->block_number = 0;
 c02bb0a:	2300      	movs	r3, #0
    hkdf->offset_in_block = PSA_HASH_SIZE( hash_alg );
 c02bb0c:	f886 4288 	strb.w	r4, [r6, #648]	; 0x288
    hkdf->block_number = 0;
 c02bb10:	f886 3289 	strb.w	r3, [r6, #649]	; 0x289
    hkdf->info_length = label_length;
 c02bb14:	f8c6 800c 	str.w	r8, [r6, #12]
    if( label_length != 0 )
 c02bb18:	f1b8 0f00 	cmp.w	r8, #0
 c02bb1c:	f43f af76 	beq.w	c02ba0c <psa_key_derivation_internal+0x4c>
        hkdf->info = mbedtls_calloc( 1, label_length );
 c02bb20:	4641      	mov	r1, r8
 c02bb22:	2001      	movs	r0, #1
 c02bb24:	f7fe fba6 	bl	c02a274 <mbedtls_calloc>
 c02bb28:	60b0      	str	r0, [r6, #8]
        if( hkdf->info == NULL )
 c02bb2a:	2800      	cmp	r0, #0
 c02bb2c:	f43f af65 	beq.w	c02b9fa <psa_key_derivation_internal+0x3a>
        memcpy( hkdf->info, label, label_length );
 c02bb30:	4642      	mov	r2, r8
 c02bb32:	9910      	ldr	r1, [sp, #64]	; 0x40
 c02bb34:	f7eb ff23 	bl	c01797e <memcpy>
 c02bb38:	e768      	b.n	c02ba0c <psa_key_derivation_internal+0x4c>
        size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c02bb3a:	2514      	movs	r5, #20
 c02bb3c:	e7a4      	b.n	c02ba88 <psa_key_derivation_internal+0xc8>
 c02bb3e:	251c      	movs	r5, #28
 c02bb40:	e7a2      	b.n	c02ba88 <psa_key_derivation_internal+0xc8>
 c02bb42:	2520      	movs	r5, #32
 c02bb44:	e7a0      	b.n	c02ba88 <psa_key_derivation_internal+0xc8>
 c02bb46:	2530      	movs	r5, #48	; 0x30
 c02bb48:	e79e      	b.n	c02ba88 <psa_key_derivation_internal+0xc8>
    hkdf->offset_in_block = PSA_HASH_SIZE( hash_alg );
 c02bb4a:	2410      	movs	r4, #16
 c02bb4c:	e7dd      	b.n	c02bb0a <psa_key_derivation_internal+0x14a>
 c02bb4e:	2414      	movs	r4, #20
 c02bb50:	e7db      	b.n	c02bb0a <psa_key_derivation_internal+0x14a>
 c02bb52:	2440      	movs	r4, #64	; 0x40
 c02bb54:	e7d9      	b.n	c02bb0a <psa_key_derivation_internal+0x14a>
 c02bb56:	241c      	movs	r4, #28
 c02bb58:	e7d7      	b.n	c02bb0a <psa_key_derivation_internal+0x14a>
 c02bb5a:	2420      	movs	r4, #32
 c02bb5c:	e7d5      	b.n	c02bb0a <psa_key_derivation_internal+0x14a>
 c02bb5e:	2430      	movs	r4, #48	; 0x30
 c02bb60:	e7d3      	b.n	c02bb0a <psa_key_derivation_internal+0x14a>
    else if( PSA_ALG_IS_TLS12_PRF( alg ) ||
 c02bb62:	f423 70ff 	bic.w	r0, r3, #510	; 0x1fe
 c02bb66:	4c34      	ldr	r4, [pc, #208]	; (c02bc38 <psa_key_derivation_internal+0x278>)
 c02bb68:	f020 0001 	bic.w	r0, r0, #1
 c02bb6c:	42a0      	cmp	r0, r4
 c02bb6e:	d159      	bne.n	c02bc24 <psa_key_derivation_internal+0x264>
        psa_algorithm_t hash_alg = PSA_ALG_TLS12_PRF_GET_HASH( alg );
 c02bb70:	b2db      	uxtb	r3, r3
 c02bb72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
        size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c02bb76:	f103 407f 	add.w	r0, r3, #4278190080	; 0xff000000
 c02bb7a:	3801      	subs	r0, #1
 c02bb7c:	2802      	cmp	r0, #2
 c02bb7e:	f103 407f 	add.w	r0, r3, #4278190080	; 0xff000000
 c02bb82:	d93a      	bls.n	c02bbfa <psa_key_derivation_internal+0x23a>
 c02bb84:	1f04      	subs	r4, r0, #4
 c02bb86:	2c01      	cmp	r4, #1
 c02bb88:	d939      	bls.n	c02bbfe <psa_key_derivation_internal+0x23e>
 c02bb8a:	4c2a      	ldr	r4, [pc, #168]	; (c02bc34 <psa_key_derivation_internal+0x274>)
 c02bb8c:	42a3      	cmp	r3, r4
 c02bb8e:	d03a      	beq.n	c02bc06 <psa_key_derivation_internal+0x246>
 c02bb90:	3401      	adds	r4, #1
 c02bb92:	42a3      	cmp	r3, r4
 c02bb94:	d039      	beq.n	c02bc0a <psa_key_derivation_internal+0x24a>
 c02bb96:	3401      	adds	r4, #1
 c02bb98:	42a3      	cmp	r3, r4
 c02bb9a:	d038      	beq.n	c02bc0e <psa_key_derivation_internal+0x24e>
 c02bb9c:	3401      	adds	r4, #1
 c02bb9e:	42a3      	cmp	r3, r4
 c02bba0:	d02f      	beq.n	c02bc02 <psa_key_derivation_internal+0x242>
 c02bba2:	3401      	adds	r4, #1
 c02bba4:	42a3      	cmp	r3, r4
 c02bba6:	d02e      	beq.n	c02bc06 <psa_key_derivation_internal+0x246>
 c02bba8:	3401      	adds	r4, #1
 c02bbaa:	42a3      	cmp	r3, r4
 c02bbac:	d02d      	beq.n	c02bc0a <psa_key_derivation_internal+0x24a>
 c02bbae:	3403      	adds	r4, #3
 c02bbb0:	42a3      	cmp	r3, r4
 c02bbb2:	d028      	beq.n	c02bc06 <psa_key_derivation_internal+0x246>
 c02bbb4:	3401      	adds	r4, #1
 c02bbb6:	42a3      	cmp	r3, r4
 c02bbb8:	d027      	beq.n	c02bc0a <psa_key_derivation_internal+0x24a>
 c02bbba:	3401      	adds	r4, #1
 c02bbbc:	42a3      	cmp	r3, r4
 c02bbbe:	d026      	beq.n	c02bc0e <psa_key_derivation_internal+0x24e>
 c02bbc0:	4d1e      	ldr	r5, [pc, #120]	; (c02bc3c <psa_key_derivation_internal+0x27c>)
 c02bbc2:	42ab      	cmp	r3, r5
 c02bbc4:	bf0c      	ite	eq
 c02bbc6:	2540      	moveq	r5, #64	; 0x40
 c02bbc8:	2500      	movne	r5, #0
        if( hash_alg != PSA_ALG_SHA_256 &&
 c02bbca:	3809      	subs	r0, #9
 c02bbcc:	2801      	cmp	r0, #1
 c02bbce:	d829      	bhi.n	c02bc24 <psa_key_derivation_internal+0x264>
        if( PSA_ALG_IS_TLS12_PRF( alg ) )
 c02bbd0:	4c19      	ldr	r4, [pc, #100]	; (c02bc38 <psa_key_derivation_internal+0x278>)
            status = psa_generator_tls12_prf_setup( &generator->ctx.tls12_prf,
 c02bbd2:	9100      	str	r1, [sp, #0]
        if( PSA_ALG_IS_TLS12_PRF( alg ) )
 c02bbd4:	45a4      	cmp	ip, r4
            status = psa_generator_tls12_prf_setup( &generator->ctx.tls12_prf,
 c02bbd6:	9c10      	ldr	r4, [sp, #64]	; 0x40
        max_capacity = 255 * hash_size;
 c02bbd8:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
            status = psa_generator_tls12_prf_setup( &generator->ctx.tls12_prf,
 c02bbdc:	e9cd 2401 	strd	r2, r4, [sp, #4]
 c02bbe0:	f106 0008 	add.w	r0, r6, #8
 c02bbe4:	f8cd 800c 	str.w	r8, [sp, #12]
 c02bbe8:	463a      	mov	r2, r7
 c02bbea:	4649      	mov	r1, r9
        if( PSA_ALG_IS_TLS12_PRF( alg ) )
 c02bbec:	d111      	bne.n	c02bc12 <psa_key_derivation_internal+0x252>
            status = psa_generator_tls12_prf_setup( &generator->ctx.tls12_prf,
 c02bbee:	f7fe fce3 	bl	c02a5b8 <psa_generator_tls12_prf_setup>
    if( status != PSA_SUCCESS )
 c02bbf2:	2800      	cmp	r0, #0
 c02bbf4:	f43f af0a 	beq.w	c02ba0c <psa_key_derivation_internal+0x4c>
 c02bbf8:	e6f3      	b.n	c02b9e2 <psa_key_derivation_internal+0x22>
        size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c02bbfa:	2510      	movs	r5, #16
 c02bbfc:	e7e5      	b.n	c02bbca <psa_key_derivation_internal+0x20a>
 c02bbfe:	2514      	movs	r5, #20
 c02bc00:	e7e3      	b.n	c02bbca <psa_key_derivation_internal+0x20a>
 c02bc02:	2540      	movs	r5, #64	; 0x40
 c02bc04:	e7e1      	b.n	c02bbca <psa_key_derivation_internal+0x20a>
 c02bc06:	251c      	movs	r5, #28
 c02bc08:	e7df      	b.n	c02bbca <psa_key_derivation_internal+0x20a>
 c02bc0a:	2520      	movs	r5, #32
 c02bc0c:	e7dd      	b.n	c02bbca <psa_key_derivation_internal+0x20a>
 c02bc0e:	2530      	movs	r5, #48	; 0x30
 c02bc10:	e7db      	b.n	c02bbca <psa_key_derivation_internal+0x20a>
            status = psa_generator_tls12_psk_to_ms_setup(
 c02bc12:	f7fe fd6c 	bl	c02a6ee <psa_generator_tls12_psk_to_ms_setup>
 c02bc16:	e7ec      	b.n	c02bbf2 <psa_key_derivation_internal+0x232>
    else if( capacity == PSA_GENERATOR_UNBRIDLED_CAPACITY )
 c02bc18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 c02bc1a:	3301      	adds	r3, #1
 c02bc1c:	f47f aedf 	bne.w	c02b9de <psa_key_derivation_internal+0x1e>
        generator->capacity = max_capacity;
 c02bc20:	6075      	str	r5, [r6, #4]
 c02bc22:	e6f8      	b.n	c02ba16 <psa_key_derivation_internal+0x56>
            return( PSA_ERROR_NOT_SUPPORTED );
 c02bc24:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c02bc28:	e6db      	b.n	c02b9e2 <psa_key_derivation_internal+0x22>
 c02bc2a:	bf00      	nop
 c02bc2c:	31000001 	.word	0x31000001
 c02bc30:	30000100 	.word	0x30000100
 c02bc34:	01000008 	.word	0x01000008
 c02bc38:	30000200 	.word	0x30000200
 c02bc3c:	01000013 	.word	0x01000013

0c02bc40 <psa_key_agreement_internal>:
static psa_status_t psa_key_agreement_internal( psa_crypto_generator_t *generator,
                                                psa_key_slot_t *private_key,
                                                const uint8_t *peer_key,
                                                size_t peer_key_length,
                                                psa_algorithm_t alg )
{
 c02bc40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    psa_status_t status;
    uint8_t shared_secret[PSA_KEY_AGREEMENT_MAX_SHARED_SECRET_SIZE];
    size_t shared_secret_length = 0;
 c02bc44:	2400      	movs	r4, #0
{
 c02bc46:	b0db      	sub	sp, #364	; 0x16c
 c02bc48:	4699      	mov	r9, r3
 c02bc4a:	9d62      	ldr	r5, [sp, #392]	; 0x188

    /* Step 1: run the secret agreement algorithm to generate the shared
     * secret. */
    switch( PSA_ALG_KEY_AGREEMENT_GET_BASE( alg ) )
 c02bc4c:	4b35      	ldr	r3, [pc, #212]	; (c02bd24 <psa_key_agreement_internal+0xe4>)
{
 c02bc4e:	4690      	mov	r8, r2
    switch( PSA_ALG_KEY_AGREEMENT_GET_BASE( alg ) )
 c02bc50:	4a35      	ldr	r2, [pc, #212]	; (c02bd28 <psa_key_agreement_internal+0xe8>)
 c02bc52:	402b      	ands	r3, r5
 c02bc54:	4293      	cmp	r3, r2
{
 c02bc56:	4606      	mov	r6, r0
    size_t shared_secret_length = 0;
 c02bc58:	9406      	str	r4, [sp, #24]
    switch( PSA_ALG_KEY_AGREEMENT_GET_BASE( alg ) )
 c02bc5a:	d15d      	bne.n	c02bd18 <psa_key_agreement_internal+0xd8>
    {
#if defined(MBEDTLS_ECDH_C)
        case PSA_ALG_ECDH_BASE:
            if( ! PSA_KEY_TYPE_IS_ECC_KEYPAIR( private_key->type ) )
 c02bc5c:	680b      	ldr	r3, [r1, #0]
 c02bc5e:	4a33      	ldr	r2, [pc, #204]	; (c02bd2c <psa_key_agreement_internal+0xec>)
 c02bc60:	0c1b      	lsrs	r3, r3, #16
 c02bc62:	041b      	lsls	r3, r3, #16
 c02bc64:	4293      	cmp	r3, r2
 c02bc66:	d15a      	bne.n	c02bd1e <psa_key_agreement_internal+0xde>
    mbedtls_ecdh_init( &ecdh );
 c02bc68:	a819      	add	r0, sp, #100	; 0x64
                return( PSA_ERROR_INVALID_ARGUMENT );
            status = psa_key_agreement_ecdh( peer_key, peer_key_length,
                                             private_key->data.ecp,
 c02bc6a:	69cf      	ldr	r7, [r1, #28]
    mbedtls_ecp_keypair *their_key = NULL;
 c02bc6c:	9407      	str	r4, [sp, #28]
    mbedtls_ecdh_init( &ecdh );
 c02bc6e:	f7fb fc8b 	bl	c027588 <mbedtls_ecdh_init>
 c02bc72:	783b      	ldrb	r3, [r7, #0]
    status = psa_import_ec_public_key(
 c02bc74:	4641      	mov	r1, r8
 c02bc76:	3b01      	subs	r3, #1
 c02bc78:	b2db      	uxtb	r3, r3
 c02bc7a:	2b0c      	cmp	r3, #12
 c02bc7c:	bf96      	itet	ls
 c02bc7e:	4a2c      	ldrls	r2, [pc, #176]	; (c02bd30 <psa_key_agreement_internal+0xf0>)
 c02bc80:	4620      	movhi	r0, r4
 c02bc82:	5cd0      	ldrbls	r0, [r2, r3]
 c02bc84:	ab07      	add	r3, sp, #28
 c02bc86:	464a      	mov	r2, r9
 c02bc88:	f7ff f8a0 	bl	c02adcc <psa_import_ec_public_key>
    if( status != PSA_SUCCESS )
 c02bc8c:	4604      	mov	r4, r0
 c02bc8e:	b9f0      	cbnz	r0, c02bcce <psa_key_agreement_internal+0x8e>
    status = mbedtls_to_psa_error(
 c02bc90:	2201      	movs	r2, #1
 c02bc92:	9907      	ldr	r1, [sp, #28]
 c02bc94:	a819      	add	r0, sp, #100	; 0x64
 c02bc96:	f7fb fcc7 	bl	c027628 <mbedtls_ecdh_get_params>
 c02bc9a:	f7fe fb09 	bl	c02a2b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c02bc9e:	4604      	mov	r4, r0
 c02bca0:	b9a8      	cbnz	r0, c02bcce <psa_key_agreement_internal+0x8e>
    status = mbedtls_to_psa_error(
 c02bca2:	4602      	mov	r2, r0
 c02bca4:	4639      	mov	r1, r7
 c02bca6:	a819      	add	r0, sp, #100	; 0x64
 c02bca8:	f7fb fcbe 	bl	c027628 <mbedtls_ecdh_get_params>
 c02bcac:	f7fe fb00 	bl	c02a2b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c02bcb0:	4604      	mov	r4, r0
 c02bcb2:	b960      	cbnz	r0, c02bcce <psa_key_agreement_internal+0x8e>
    status = mbedtls_to_psa_error(
 c02bcb4:	4b1f      	ldr	r3, [pc, #124]	; (c02bd34 <psa_key_agreement_internal+0xf4>)
 c02bcb6:	aa08      	add	r2, sp, #32
 c02bcb8:	9301      	str	r3, [sp, #4]
 c02bcba:	4b1f      	ldr	r3, [pc, #124]	; (c02bd38 <psa_key_agreement_internal+0xf8>)
 c02bcbc:	a906      	add	r1, sp, #24
 c02bcbe:	9300      	str	r3, [sp, #0]
 c02bcc0:	a819      	add	r0, sp, #100	; 0x64
 c02bcc2:	2342      	movs	r3, #66	; 0x42
 c02bcc4:	f7fb fce0 	bl	c027688 <mbedtls_ecdh_calc_secret>
 c02bcc8:	f7fe faf2 	bl	c02a2b0 <mbedtls_to_psa_error>
 c02bccc:	4604      	mov	r4, r0
    mbedtls_ecdh_free( &ecdh );
 c02bcce:	a819      	add	r0, sp, #100	; 0x64
 c02bcd0:	f7fb fc8c 	bl	c0275ec <mbedtls_ecdh_free>
    mbedtls_ecp_keypair_free( their_key );
 c02bcd4:	9807      	ldr	r0, [sp, #28]
 c02bcd6:	f7f1 fb7f 	bl	c01d3d8 <mbedtls_ecp_keypair_free>
    mbedtls_free( their_key );
 c02bcda:	9807      	ldr	r0, [sp, #28]
 c02bcdc:	f7fe fad0 	bl	c02a280 <mbedtls_free>
            (void) private_key;
            (void) peer_key;
            (void) peer_key_length;
            return( PSA_ERROR_NOT_SUPPORTED );
    }
    if( status != PSA_SUCCESS )
 c02bce0:	b994      	cbnz	r4, c02bd08 <psa_key_agreement_internal+0xc8>
        goto exit;

    /* Step 2: set up the key derivation to generate key material from
     * the shared secret. */
    status = psa_key_derivation_internal( generator,
 c02bce2:	f04f 32ff 	mov.w	r2, #4294967295
                                          shared_secret, shared_secret_length,
                                          PSA_ALG_KEY_AGREEMENT_GET_KDF( alg ),
 c02bce6:	f025 437e 	bic.w	r3, r5, #4261412864	; 0xfe000000
 c02bcea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    status = psa_key_derivation_internal( generator,
 c02bcee:	e9cd 4203 	strd	r4, r2, [sp, #12]
 c02bcf2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 c02bcf6:	9400      	str	r4, [sp, #0]
 c02bcf8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 c02bcfc:	9a06      	ldr	r2, [sp, #24]
 c02bcfe:	a908      	add	r1, sp, #32
 c02bd00:	4630      	mov	r0, r6
 c02bd02:	f7ff fe5d 	bl	c02b9c0 <psa_key_derivation_internal>
 c02bd06:	4604      	mov	r4, r0
                                          NULL, 0, NULL, 0,
                                          PSA_GENERATOR_UNBRIDLED_CAPACITY );
exit:
    mbedtls_platform_zeroize( shared_secret, shared_secret_length );
 c02bd08:	9906      	ldr	r1, [sp, #24]
 c02bd0a:	a808      	add	r0, sp, #32
 c02bd0c:	f7fe fac8 	bl	c02a2a0 <mbedtls_platform_zeroize>
    return( status );
}
 c02bd10:	4620      	mov	r0, r4
 c02bd12:	b05b      	add	sp, #364	; 0x16c
 c02bd14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return( PSA_ERROR_NOT_SUPPORTED );
 c02bd18:	f06f 0485 	mvn.w	r4, #133	; 0x85
 c02bd1c:	e7f8      	b.n	c02bd10 <psa_key_agreement_internal+0xd0>
                return( PSA_ERROR_INVALID_ARGUMENT );
 c02bd1e:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c02bd22:	e7f5      	b.n	c02bd10 <psa_key_agreement_internal+0xd0>
 c02bd24:	fef00000 	.word	0xfef00000
 c02bd28:	22200000 	.word	0x22200000
 c02bd2c:	70030000 	.word	0x70030000
 c02bd30:	0c036888 	.word	0x0c036888
 c02bd34:	300360c0 	.word	0x300360c0
 c02bd38:	0c027525 	.word	0x0c027525

0c02bd3c <mbedcrypto__psa_hash_verify>:
{
 c02bd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02bd3e:	b093      	sub	sp, #76	; 0x4c
    psa_status_t status = psa_hash_finish( operation,
 c02bd40:	ad02      	add	r5, sp, #8
{
 c02bd42:	460e      	mov	r6, r1
 c02bd44:	4617      	mov	r7, r2
    psa_status_t status = psa_hash_finish( operation,
 c02bd46:	ab01      	add	r3, sp, #4
 c02bd48:	2240      	movs	r2, #64	; 0x40
 c02bd4a:	4629      	mov	r1, r5
 c02bd4c:	f7ff fbf2 	bl	c02b534 <mbedcrypto__psa_hash_finish>
    if( status != PSA_SUCCESS )
 c02bd50:	b950      	cbnz	r0, c02bd68 <mbedcrypto__psa_hash_verify+0x2c>
    if( actual_hash_length != hash_length )
 c02bd52:	9c01      	ldr	r4, [sp, #4]
 c02bd54:	42bc      	cmp	r4, r7
 c02bd56:	d10f      	bne.n	c02bd78 <mbedcrypto__psa_hash_verify+0x3c>
    unsigned char diff = 0;
 c02bd58:	4602      	mov	r2, r0
    for( i = 0; i < n; i++ )
 c02bd5a:	4603      	mov	r3, r0
 c02bd5c:	429c      	cmp	r4, r3
 c02bd5e:	d105      	bne.n	c02bd6c <mbedcrypto__psa_hash_verify+0x30>
        return( PSA_ERROR_INVALID_SIGNATURE );
 c02bd60:	2a00      	cmp	r2, #0
 c02bd62:	bf18      	it	ne
 c02bd64:	f06f 0094 	mvnne.w	r0, #148	; 0x94
}
 c02bd68:	b013      	add	sp, #76	; 0x4c
 c02bd6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        diff |= a[i] ^ b[i];
 c02bd6c:	5cf1      	ldrb	r1, [r6, r3]
 c02bd6e:	5cef      	ldrb	r7, [r5, r3]
    for( i = 0; i < n; i++ )
 c02bd70:	3301      	adds	r3, #1
        diff |= a[i] ^ b[i];
 c02bd72:	4079      	eors	r1, r7
 c02bd74:	430a      	orrs	r2, r1
 c02bd76:	e7f1      	b.n	c02bd5c <mbedcrypto__psa_hash_verify+0x20>
        return( PSA_ERROR_INVALID_SIGNATURE );
 c02bd78:	f06f 0094 	mvn.w	r0, #148	; 0x94
 c02bd7c:	e7f4      	b.n	c02bd68 <mbedcrypto__psa_hash_verify+0x2c>
	...

0c02bd80 <mbedcrypto__psa_hash_clone>:
{
 c02bd80:	b538      	push	{r3, r4, r5, lr}
    if( target_operation->alg != 0 )
 c02bd82:	680b      	ldr	r3, [r1, #0]
{
 c02bd84:	4605      	mov	r5, r0
 c02bd86:	460c      	mov	r4, r1
    if( target_operation->alg != 0 )
 c02bd88:	bb43      	cbnz	r3, c02bddc <mbedcrypto__psa_hash_clone+0x5c>
    switch( source_operation->alg )
 c02bd8a:	6803      	ldr	r3, [r0, #0]
 c02bd8c:	4a15      	ldr	r2, [pc, #84]	; (c02bde4 <mbedcrypto__psa_hash_clone+0x64>)
 c02bd8e:	4293      	cmp	r3, r2
 c02bd90:	d809      	bhi.n	c02bda6 <mbedcrypto__psa_hash_clone+0x26>
 c02bd92:	3a01      	subs	r2, #1
 c02bd94:	4293      	cmp	r3, r2
 c02bd96:	d21a      	bcs.n	c02bdce <mbedcrypto__psa_hash_clone+0x4e>
 c02bd98:	b303      	cbz	r3, c02bddc <mbedcrypto__psa_hash_clone+0x5c>
 c02bd9a:	3a03      	subs	r2, #3
 c02bd9c:	4293      	cmp	r3, r2
 c02bd9e:	d00c      	beq.n	c02bdba <mbedcrypto__psa_hash_clone+0x3a>
            return( PSA_ERROR_NOT_SUPPORTED );
 c02bda0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 c02bda4:	bd38      	pop	{r3, r4, r5, pc}
    switch( source_operation->alg )
 c02bda6:	4a10      	ldr	r2, [pc, #64]	; (c02bde8 <mbedcrypto__psa_hash_clone+0x68>)
 c02bda8:	4293      	cmp	r3, r2
 c02bdaa:	d8f9      	bhi.n	c02bda0 <mbedcrypto__psa_hash_clone+0x20>
            mbedtls_sha512_clone( &target_operation->ctx.sha512,
 c02bdac:	f100 0108 	add.w	r1, r0, #8
 c02bdb0:	f104 0008 	add.w	r0, r4, #8
 c02bdb4:	f001 fe0d 	bl	c02d9d2 <mbedtls_sha512_clone>
            break;
 c02bdb8:	e005      	b.n	c02bdc6 <mbedcrypto__psa_hash_clone+0x46>
            mbedtls_sha1_clone( &target_operation->ctx.sha1,
 c02bdba:	f100 0108 	add.w	r1, r0, #8
 c02bdbe:	f104 0008 	add.w	r0, r4, #8
 c02bdc2:	f7f4 fde9 	bl	c020998 <mbedtls_sha1_clone>
    target_operation->alg = source_operation->alg;
 c02bdc6:	682b      	ldr	r3, [r5, #0]
    return( PSA_SUCCESS );
 c02bdc8:	2000      	movs	r0, #0
    target_operation->alg = source_operation->alg;
 c02bdca:	6023      	str	r3, [r4, #0]
    return( PSA_SUCCESS );
 c02bdcc:	e7ea      	b.n	c02bda4 <mbedcrypto__psa_hash_clone+0x24>
            mbedtls_sha256_clone( &target_operation->ctx.sha256,
 c02bdce:	f100 0108 	add.w	r1, r0, #8
 c02bdd2:	f104 0008 	add.w	r0, r4, #8
 c02bdd6:	f7f4 fe9f 	bl	c020b18 <mbedtls_sha256_clone>
            break;
 c02bdda:	e7f4      	b.n	c02bdc6 <mbedcrypto__psa_hash_clone+0x46>
            return( PSA_ERROR_BAD_STATE );
 c02bddc:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02bde0:	e7e0      	b.n	c02bda4 <mbedcrypto__psa_hash_clone+0x24>
 c02bde2:	bf00      	nop
 c02bde4:	01000009 	.word	0x01000009
 c02bde8:	0100000b 	.word	0x0100000b

0c02bdec <mbedcrypto__psa_mac_abort>:
    if( operation->alg == 0 )
 c02bdec:	6803      	ldr	r3, [r0, #0]
{
 c02bdee:	b510      	push	{r4, lr}
 c02bdf0:	4604      	mov	r4, r0
    if( operation->alg == 0 )
 c02bdf2:	b1fb      	cbz	r3, c02be34 <mbedcrypto__psa_mac_abort+0x48>
    if( operation->alg == PSA_ALG_CMAC )
 c02bdf4:	4a10      	ldr	r2, [pc, #64]	; (c02be38 <mbedcrypto__psa_mac_abort+0x4c>)
 c02bdf6:	4293      	cmp	r3, r2
 c02bdf8:	d10b      	bne.n	c02be12 <mbedcrypto__psa_mac_abort+0x26>
        mbedtls_cipher_free( &operation->ctx.cmac );
 c02bdfa:	3008      	adds	r0, #8
 c02bdfc:	f7fa fdcc 	bl	c026998 <mbedtls_cipher_free>
    operation->alg = 0;
 c02be00:	2000      	movs	r0, #0
    operation->key_set = 0;
 c02be02:	7923      	ldrb	r3, [r4, #4]
    operation->alg = 0;
 c02be04:	6020      	str	r0, [r4, #0]
    operation->is_sign = 0;
 c02be06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c02be0a:	f360 1304 	bfi	r3, r0, #4, #1
 c02be0e:	7123      	strb	r3, [r4, #4]
}
 c02be10:	bd10      	pop	{r4, pc}
    if( PSA_ALG_IS_HMAC( operation->alg ) )
 c02be12:	4a0a      	ldr	r2, [pc, #40]	; (c02be3c <mbedcrypto__psa_mac_abort+0x50>)
 c02be14:	401a      	ands	r2, r3
 c02be16:	f1b2 7f20 	cmp.w	r2, #41943040	; 0x2800000
 c02be1a:	d103      	bne.n	c02be24 <mbedcrypto__psa_mac_abort+0x38>
        psa_hmac_abort_internal( &operation->ctx.hmac );
 c02be1c:	3008      	adds	r0, #8
 c02be1e:	f7ff fafb 	bl	c02b418 <psa_hmac_abort_internal>
 c02be22:	e7ed      	b.n	c02be00 <mbedcrypto__psa_mac_abort+0x14>
    memset( operation, 0, sizeof( *operation ) );
 c02be24:	f44f 7200 	mov.w	r2, #512	; 0x200
 c02be28:	2100      	movs	r1, #0
 c02be2a:	f7eb fdcc 	bl	c0179c6 <memset>
 c02be2e:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02be32:	e7ed      	b.n	c02be10 <mbedcrypto__psa_mac_abort+0x24>
        return( PSA_SUCCESS );
 c02be34:	4618      	mov	r0, r3
 c02be36:	e7eb      	b.n	c02be10 <mbedcrypto__psa_mac_abort+0x24>
 c02be38:	02c00002 	.word	0x02c00002
 c02be3c:	7fc00000 	.word	0x7fc00000

0c02be40 <psa_mac_setup>:
{
 c02be40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 c02be44:	4688      	mov	r8, r1
    if( operation->alg != 0 )
 c02be46:	6801      	ldr	r1, [r0, #0]
{
 c02be48:	4604      	mov	r4, r0
 c02be4a:	4615      	mov	r5, r2
        is_sign ? PSA_KEY_USAGE_SIGN : PSA_KEY_USAGE_VERIFY;
 c02be4c:	469a      	mov	sl, r3
 c02be4e:	2b00      	cmp	r3, #0
 c02be50:	bf14      	ite	ne
 c02be52:	f44f 6980 	movne.w	r9, #1024	; 0x400
 c02be56:	f44f 6900 	moveq.w	r9, #2048	; 0x800
    psa_algorithm_t full_length_alg = PSA_ALG_FULL_LENGTH_MAC( alg );
 c02be5a:	f422 577c 	bic.w	r7, r2, #16128	; 0x3f00
    if( operation->alg != 0 )
 c02be5e:	2900      	cmp	r1, #0
 c02be60:	f040 80c3 	bne.w	c02bfea <psa_mac_setup+0x1aa>
    operation->key_set = 0;
 c02be64:	7906      	ldrb	r6, [r0, #4]
    if( alg == PSA_ALG_CMAC )
 c02be66:	4b66      	ldr	r3, [pc, #408]	; (c02c000 <psa_mac_setup+0x1c0>)
    operation->key_set = 0;
 c02be68:	f361 0600 	bfi	r6, r1, #0, #1
    operation->iv_set = 0;
 c02be6c:	f361 0682 	bfi	r6, r1, #2, #1
    operation->iv_required = 0;
 c02be70:	f361 0641 	bfi	r6, r1, #1, #1
    operation->has_input = 0;
 c02be74:	f361 06c3 	bfi	r6, r1, #3, #1
    operation->is_sign = 0;
 c02be78:	f361 1604 	bfi	r6, r1, #4, #1
    if( alg == PSA_ALG_CMAC )
 c02be7c:	429f      	cmp	r7, r3
    operation->alg = alg;
 c02be7e:	6007      	str	r7, [r0, #0]
    operation->is_sign = 0;
 c02be80:	7106      	strb	r6, [r0, #4]
    if( alg == PSA_ALG_CMAC )
 c02be82:	d129      	bne.n	c02bed8 <psa_mac_setup+0x98>
        mbedtls_cipher_init( &operation->ctx.cmac );
 c02be84:	3008      	adds	r0, #8
 c02be86:	f7fa fd83 	bl	c026990 <mbedtls_cipher_init>
    if( is_sign )
 c02be8a:	f1ba 0f00 	cmp.w	sl, #0
 c02be8e:	d003      	beq.n	c02be98 <psa_mac_setup+0x58>
        operation->is_sign = 1;
 c02be90:	7923      	ldrb	r3, [r4, #4]
 c02be92:	f043 0310 	orr.w	r3, r3, #16
 c02be96:	7123      	strb	r3, [r4, #4]
    status = psa_get_key_from_slot( handle, &slot, usage, alg );
 c02be98:	462b      	mov	r3, r5
 c02be9a:	464a      	mov	r2, r9
 c02be9c:	a901      	add	r1, sp, #4
 c02be9e:	4640      	mov	r0, r8
 c02bea0:	f7fe fd5c 	bl	c02a95c <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c02bea4:	4606      	mov	r6, r0
 c02bea6:	b998      	cbnz	r0, c02bed0 <psa_mac_setup+0x90>
    key_bits = psa_get_key_bits( slot );
 c02bea8:	9801      	ldr	r0, [sp, #4]
 c02beaa:	f7fe fdc1 	bl	c02aa30 <psa_get_key_bits>
    if( full_length_alg == PSA_ALG_CMAC )
 c02beae:	4b54      	ldr	r3, [pc, #336]	; (c02c000 <psa_mac_setup+0x1c0>)
    unsigned char truncated = PSA_MAC_TRUNCATED_LENGTH( alg );
 c02beb0:	f3c5 2805 	ubfx	r8, r5, #8, #6
    if( full_length_alg == PSA_ALG_CMAC )
 c02beb4:	429f      	cmp	r7, r3
    key_bits = psa_get_key_bits( slot );
 c02beb6:	4681      	mov	r9, r0
    if( full_length_alg == PSA_ALG_CMAC )
 c02beb8:	d149      	bne.n	c02bf4e <psa_mac_setup+0x10e>
        const mbedtls_cipher_info_t *cipher_info =
 c02beba:	9901      	ldr	r1, [sp, #4]
 c02bebc:	4602      	mov	r2, r0
 c02bebe:	6809      	ldr	r1, [r1, #0]
 c02bec0:	4633      	mov	r3, r6
 c02bec2:	4638      	mov	r0, r7
 c02bec4:	f7fe fc4e 	bl	c02a764 <mbedtls_cipher_info_from_psa>
        if( cipher_info == NULL )
 c02bec8:	4601      	mov	r1, r0
 c02beca:	b9e8      	cbnz	r0, c02bf08 <psa_mac_setup+0xc8>
            status = PSA_ERROR_NOT_SUPPORTED;
 c02becc:	f06f 0685 	mvn.w	r6, #133	; 0x85
        psa_mac_abort( operation );
 c02bed0:	4620      	mov	r0, r4
 c02bed2:	f7ff ff8b 	bl	c02bdec <mbedcrypto__psa_mac_abort>
 c02bed6:	e013      	b.n	c02bf00 <psa_mac_setup+0xc0>
    if( PSA_ALG_IS_HMAC( operation->alg ) )
 c02bed8:	4b4a      	ldr	r3, [pc, #296]	; (c02c004 <psa_mac_setup+0x1c4>)
 c02beda:	4013      	ands	r3, r2
 c02bedc:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 c02bee0:	d101      	bne.n	c02bee6 <psa_mac_setup+0xa6>
        operation->ctx.hmac.hash_ctx.alg = 0;
 c02bee2:	6081      	str	r1, [r0, #8]
 c02bee4:	e7d1      	b.n	c02be8a <psa_mac_setup+0x4a>
        if( ! PSA_ALG_IS_MAC( alg ) )
 c02bee6:	f002 45fe 	and.w	r5, r2, #2130706432	; 0x7f000000
    psa_status_t status = PSA_ERROR_NOT_SUPPORTED;
 c02beea:	f1b5 7f00 	cmp.w	r5, #33554432	; 0x2000000
        memset( operation, 0, sizeof( *operation ) );
 c02beee:	f44f 7200 	mov.w	r2, #512	; 0x200
    psa_status_t status = PSA_ERROR_NOT_SUPPORTED;
 c02bef2:	bf14      	ite	ne
 c02bef4:	f06f 0686 	mvnne.w	r6, #134	; 0x86
 c02bef8:	f06f 0685 	mvneq.w	r6, #133	; 0x85
        memset( operation, 0, sizeof( *operation ) );
 c02befc:	f7eb fd63 	bl	c0179c6 <memset>
}
 c02bf00:	4630      	mov	r0, r6
 c02bf02:	b002      	add	sp, #8
 c02bf04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        operation->mac_size = cipher_info->block_size;
 c02bf08:	6943      	ldr	r3, [r0, #20]
    ret = mbedtls_cipher_setup( &operation->ctx.cmac, cipher_info );
 c02bf0a:	f104 0508 	add.w	r5, r4, #8
        operation->mac_size = cipher_info->block_size;
 c02bf0e:	7163      	strb	r3, [r4, #5]
    ret = mbedtls_cipher_setup( &operation->ctx.cmac, cipher_info );
 c02bf10:	4628      	mov	r0, r5
        ret = psa_cmac_setup( operation, key_bits, slot, cipher_info );
 c02bf12:	9e01      	ldr	r6, [sp, #4]
    ret = mbedtls_cipher_setup( &operation->ctx.cmac, cipher_info );
 c02bf14:	f7fa ff36 	bl	c026d84 <mbedtls_cipher_setup>
    if( ret != 0 )
 c02bf18:	b920      	cbnz	r0, c02bf24 <psa_mac_setup+0xe4>
    ret = mbedtls_cipher_cmac_starts( &operation->ctx.cmac,
 c02bf1a:	464a      	mov	r2, r9
 c02bf1c:	69f1      	ldr	r1, [r6, #28]
 c02bf1e:	4628      	mov	r0, r5
 c02bf20:	f7fa fffa 	bl	c026f18 <mbedtls_cipher_cmac_starts>
        status = mbedtls_to_psa_error( ret );
 c02bf24:	f7fe f9c4 	bl	c02a2b0 <mbedtls_to_psa_error>
        status = psa_hmac_setup_internal( &operation->ctx.hmac,
 c02bf28:	4606      	mov	r6, r0
    if( truncated == 0 )
 c02bf2a:	f1b8 0f00 	cmp.w	r8, #0
 c02bf2e:	d007      	beq.n	c02bf40 <psa_mac_setup+0x100>
    else if( truncated < 4 )
 c02bf30:	f1b8 0f03 	cmp.w	r8, #3
 c02bf34:	d9ca      	bls.n	c02becc <psa_mac_setup+0x8c>
    else if( truncated > operation->mac_size )
 c02bf36:	7963      	ldrb	r3, [r4, #5]
 c02bf38:	4543      	cmp	r3, r8
 c02bf3a:	d333      	bcc.n	c02bfa4 <psa_mac_setup+0x164>
        operation->mac_size = truncated;
 c02bf3c:	f884 8005 	strb.w	r8, [r4, #5]
    if( status != PSA_SUCCESS )
 c02bf40:	2e00      	cmp	r6, #0
 c02bf42:	d1c5      	bne.n	c02bed0 <psa_mac_setup+0x90>
        operation->key_set = 1;
 c02bf44:	7923      	ldrb	r3, [r4, #4]
 c02bf46:	f043 0301 	orr.w	r3, r3, #1
 c02bf4a:	7123      	strb	r3, [r4, #4]
 c02bf4c:	e7d8      	b.n	c02bf00 <psa_mac_setup+0xc0>
    if( PSA_ALG_IS_HMAC( full_length_alg ) )
 c02bf4e:	4b2d      	ldr	r3, [pc, #180]	; (c02c004 <psa_mac_setup+0x1c4>)
 c02bf50:	402b      	ands	r3, r5
 c02bf52:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 c02bf56:	d14b      	bne.n	c02bff0 <psa_mac_setup+0x1b0>
        psa_algorithm_t hash_alg = PSA_ALG_HMAC_GET_HASH( alg );
 c02bf58:	b2eb      	uxtb	r3, r5
 c02bf5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
        operation->mac_size = PSA_HASH_SIZE( hash_alg );
 c02bf5e:	f103 427f 	add.w	r2, r3, #4278190080	; 0xff000000
 c02bf62:	3a01      	subs	r2, #1
 c02bf64:	2a02      	cmp	r2, #2
 c02bf66:	d937      	bls.n	c02bfd8 <psa_mac_setup+0x198>
 c02bf68:	f103 427f 	add.w	r2, r3, #4278190080	; 0xff000000
 c02bf6c:	3a04      	subs	r2, #4
 c02bf6e:	2a01      	cmp	r2, #1
 c02bf70:	d930      	bls.n	c02bfd4 <psa_mac_setup+0x194>
 c02bf72:	4a25      	ldr	r2, [pc, #148]	; (c02c008 <psa_mac_setup+0x1c8>)
 c02bf74:	4293      	cmp	r3, r2
 c02bf76:	d101      	bne.n	c02bf7c <psa_mac_setup+0x13c>
 c02bf78:	221c      	movs	r2, #28
 c02bf7a:	e00d      	b.n	c02bf98 <psa_mac_setup+0x158>
 c02bf7c:	4a23      	ldr	r2, [pc, #140]	; (c02c00c <psa_mac_setup+0x1cc>)
 c02bf7e:	4293      	cmp	r3, r2
 c02bf80:	d101      	bne.n	c02bf86 <psa_mac_setup+0x146>
 c02bf82:	2220      	movs	r2, #32
 c02bf84:	e008      	b.n	c02bf98 <psa_mac_setup+0x158>
 c02bf86:	4a22      	ldr	r2, [pc, #136]	; (c02c010 <psa_mac_setup+0x1d0>)
 c02bf88:	4293      	cmp	r3, r2
 c02bf8a:	d101      	bne.n	c02bf90 <psa_mac_setup+0x150>
 c02bf8c:	2230      	movs	r2, #48	; 0x30
 c02bf8e:	e003      	b.n	c02bf98 <psa_mac_setup+0x158>
 c02bf90:	4a20      	ldr	r2, [pc, #128]	; (c02c014 <psa_mac_setup+0x1d4>)
 c02bf92:	4293      	cmp	r3, r2
 c02bf94:	d109      	bne.n	c02bfaa <psa_mac_setup+0x16a>
 c02bf96:	2240      	movs	r2, #64	; 0x40
        if( slot->type != PSA_KEY_TYPE_HMAC )
 c02bf98:	9901      	ldr	r1, [sp, #4]
        operation->mac_size = PSA_HASH_SIZE( hash_alg );
 c02bf9a:	7162      	strb	r2, [r4, #5]
        if( slot->type != PSA_KEY_TYPE_HMAC )
 c02bf9c:	680a      	ldr	r2, [r1, #0]
 c02bf9e:	f1b2 4fa2 	cmp.w	r2, #1358954496	; 0x51000000
 c02bfa2:	d01b      	beq.n	c02bfdc <psa_mac_setup+0x19c>
            status = PSA_ERROR_INVALID_ARGUMENT;
 c02bfa4:	f06f 0686 	mvn.w	r6, #134	; 0x86
 c02bfa8:	e792      	b.n	c02bed0 <psa_mac_setup+0x90>
        operation->mac_size = PSA_HASH_SIZE( hash_alg );
 c02bfaa:	4a1b      	ldr	r2, [pc, #108]	; (c02c018 <psa_mac_setup+0x1d8>)
 c02bfac:	4293      	cmp	r3, r2
 c02bfae:	d0e3      	beq.n	c02bf78 <psa_mac_setup+0x138>
 c02bfb0:	3201      	adds	r2, #1
 c02bfb2:	4293      	cmp	r3, r2
 c02bfb4:	d0e5      	beq.n	c02bf82 <psa_mac_setup+0x142>
 c02bfb6:	3203      	adds	r2, #3
 c02bfb8:	4293      	cmp	r3, r2
 c02bfba:	d0dd      	beq.n	c02bf78 <psa_mac_setup+0x138>
 c02bfbc:	4a17      	ldr	r2, [pc, #92]	; (c02c01c <psa_mac_setup+0x1dc>)
 c02bfbe:	4293      	cmp	r3, r2
 c02bfc0:	d0df      	beq.n	c02bf82 <psa_mac_setup+0x142>
 c02bfc2:	4a17      	ldr	r2, [pc, #92]	; (c02c020 <psa_mac_setup+0x1e0>)
 c02bfc4:	4293      	cmp	r3, r2
 c02bfc6:	d0e1      	beq.n	c02bf8c <psa_mac_setup+0x14c>
 c02bfc8:	3201      	adds	r2, #1
 c02bfca:	4293      	cmp	r3, r2
 c02bfcc:	d0e3      	beq.n	c02bf96 <psa_mac_setup+0x156>
 c02bfce:	2300      	movs	r3, #0
 c02bfd0:	7163      	strb	r3, [r4, #5]
 c02bfd2:	e77b      	b.n	c02becc <psa_mac_setup+0x8c>
 c02bfd4:	2214      	movs	r2, #20
 c02bfd6:	e7df      	b.n	c02bf98 <psa_mac_setup+0x158>
 c02bfd8:	2210      	movs	r2, #16
 c02bfda:	e7dd      	b.n	c02bf98 <psa_mac_setup+0x158>
        status = psa_hmac_setup_internal( &operation->ctx.hmac,
 c02bfdc:	e9d1 1207 	ldrd	r1, r2, [r1, #28]
 c02bfe0:	f104 0008 	add.w	r0, r4, #8
 c02bfe4:	f7ff fb26 	bl	c02b634 <psa_hmac_setup_internal>
 c02bfe8:	e79e      	b.n	c02bf28 <psa_mac_setup+0xe8>
        return( PSA_ERROR_BAD_STATE );
 c02bfea:	f06f 0688 	mvn.w	r6, #136	; 0x88
 c02bfee:	e787      	b.n	c02bf00 <psa_mac_setup+0xc0>
    if( truncated == 0 )
 c02bff0:	f1b8 0f00 	cmp.w	r8, #0
 c02bff4:	f43f af6a 	beq.w	c02becc <psa_mac_setup+0x8c>
        status = PSA_ERROR_NOT_SUPPORTED;
 c02bff8:	f06f 0685 	mvn.w	r6, #133	; 0x85
 c02bffc:	e798      	b.n	c02bf30 <psa_mac_setup+0xf0>
 c02bffe:	bf00      	nop
 c02c000:	02c00002 	.word	0x02c00002
 c02c004:	7fc00000 	.word	0x7fc00000
 c02c008:	01000008 	.word	0x01000008
 c02c00c:	01000009 	.word	0x01000009
 c02c010:	0100000a 	.word	0x0100000a
 c02c014:	0100000b 	.word	0x0100000b
 c02c018:	0100000c 	.word	0x0100000c
 c02c01c:	01000011 	.word	0x01000011
 c02c020:	01000012 	.word	0x01000012

0c02c024 <mbedcrypto__psa_mac_sign_setup>:
    return( psa_mac_setup( operation, handle, alg, 1 ) );
 c02c024:	2301      	movs	r3, #1
 c02c026:	f7ff bf0b 	b.w	c02be40 <psa_mac_setup>

0c02c02a <mbedcrypto__psa_mac_verify_setup>:
    return( psa_mac_setup( operation, handle, alg, 0 ) );
 c02c02a:	2300      	movs	r3, #0
 c02c02c:	f7ff bf08 	b.w	c02be40 <psa_mac_setup>

0c02c030 <mbedcrypto__psa_mac_update>:
{
 c02c030:	b538      	push	{r3, r4, r5, lr}
    if( ! operation->key_set )
 c02c032:	7903      	ldrb	r3, [r0, #4]
{
 c02c034:	4604      	mov	r4, r0
    if( ! operation->key_set )
 c02c036:	07d8      	lsls	r0, r3, #31
 c02c038:	d403      	bmi.n	c02c042 <mbedcrypto__psa_mac_update+0x12>
        return( PSA_ERROR_BAD_STATE );
 c02c03a:	f06f 0588 	mvn.w	r5, #136	; 0x88
}
 c02c03e:	4628      	mov	r0, r5
 c02c040:	bd38      	pop	{r3, r4, r5, pc}
    if( operation->iv_required && ! operation->iv_set )
 c02c042:	f003 0006 	and.w	r0, r3, #6
 c02c046:	2802      	cmp	r0, #2
 c02c048:	d0f7      	beq.n	c02c03a <mbedcrypto__psa_mac_update+0xa>
    operation->has_input = 1;
 c02c04a:	f043 0308 	orr.w	r3, r3, #8
 c02c04e:	7123      	strb	r3, [r4, #4]
    if( operation->alg == PSA_ALG_CMAC )
 c02c050:	6820      	ldr	r0, [r4, #0]
 c02c052:	4b0d      	ldr	r3, [pc, #52]	; (c02c088 <mbedcrypto__psa_mac_update+0x58>)
 c02c054:	4298      	cmp	r0, r3
 c02c056:	d10c      	bne.n	c02c072 <mbedcrypto__psa_mac_update+0x42>
        int ret = mbedtls_cipher_cmac_update( &operation->ctx.cmac,
 c02c058:	f104 0008 	add.w	r0, r4, #8
 c02c05c:	f7fa ff82 	bl	c026f64 <mbedtls_cipher_cmac_update>
        status = mbedtls_to_psa_error( ret );
 c02c060:	f7fe f926 	bl	c02a2b0 <mbedtls_to_psa_error>
        status = psa_hash_update( &operation->ctx.hmac.hash_ctx, input,
 c02c064:	4605      	mov	r5, r0
    if( status != PSA_SUCCESS )
 c02c066:	2800      	cmp	r0, #0
 c02c068:	d0e9      	beq.n	c02c03e <mbedcrypto__psa_mac_update+0xe>
        psa_mac_abort( operation );
 c02c06a:	4620      	mov	r0, r4
 c02c06c:	f7ff febe 	bl	c02bdec <mbedcrypto__psa_mac_abort>
 c02c070:	e7e5      	b.n	c02c03e <mbedcrypto__psa_mac_update+0xe>
    if( PSA_ALG_IS_HMAC( operation->alg ) )
 c02c072:	4b06      	ldr	r3, [pc, #24]	; (c02c08c <mbedcrypto__psa_mac_update+0x5c>)
 c02c074:	4003      	ands	r3, r0
 c02c076:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 c02c07a:	d1de      	bne.n	c02c03a <mbedcrypto__psa_mac_update+0xa>
        status = psa_hash_update( &operation->ctx.hmac.hash_ctx, input,
 c02c07c:	f104 0008 	add.w	r0, r4, #8
 c02c080:	f7ff fa53 	bl	c02b52a <mbedcrypto__psa_hash_update>
 c02c084:	e7ee      	b.n	c02c064 <mbedcrypto__psa_mac_update+0x34>
 c02c086:	bf00      	nop
 c02c088:	02c00002 	.word	0x02c00002
 c02c08c:	7fc00000 	.word	0x7fc00000

0c02c090 <mbedcrypto__psa_mac_sign_finish>:
{
 c02c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c02c094:	4698      	mov	r8, r3
    if( operation->alg == 0 )
 c02c096:	6803      	ldr	r3, [r0, #0]
{
 c02c098:	4604      	mov	r4, r0
 c02c09a:	460f      	mov	r7, r1
 c02c09c:	4616      	mov	r6, r2
    if( operation->alg == 0 )
 c02c09e:	b923      	cbnz	r3, c02c0aa <mbedcrypto__psa_mac_sign_finish+0x1a>
        return( PSA_ERROR_BAD_STATE );
 c02c0a0:	f06f 0588 	mvn.w	r5, #136	; 0x88
}
 c02c0a4:	4628      	mov	r0, r5
 c02c0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *mac_length = mac_size;
 c02c0aa:	f8c8 2000 	str.w	r2, [r8]
    if( mac_size != 0 )
 c02c0ae:	b11a      	cbz	r2, c02c0b8 <mbedcrypto__psa_mac_sign_finish+0x28>
        memset( mac, '!', mac_size );
 c02c0b0:	2121      	movs	r1, #33	; 0x21
 c02c0b2:	4638      	mov	r0, r7
 c02c0b4:	f7eb fc87 	bl	c0179c6 <memset>
    if( ! operation->is_sign )
 c02c0b8:	7923      	ldrb	r3, [r4, #4]
 c02c0ba:	06db      	lsls	r3, r3, #27
 c02c0bc:	d5f0      	bpl.n	c02c0a0 <mbedcrypto__psa_mac_sign_finish+0x10>
    status = psa_mac_finish_internal( operation, mac, mac_size );
 c02c0be:	4632      	mov	r2, r6
 c02c0c0:	4639      	mov	r1, r7
 c02c0c2:	4620      	mov	r0, r4
 c02c0c4:	f7ff fba8 	bl	c02b818 <psa_mac_finish_internal>
    if( status == PSA_SUCCESS )
 c02c0c8:	4605      	mov	r5, r0
        status = psa_mac_abort( operation );
 c02c0ca:	4620      	mov	r0, r4
    if( status == PSA_SUCCESS )
 c02c0cc:	b96d      	cbnz	r5, c02c0ea <mbedcrypto__psa_mac_sign_finish+0x5a>
        status = psa_mac_abort( operation );
 c02c0ce:	f7ff fe8d 	bl	c02bdec <mbedcrypto__psa_mac_abort>
        if( status == PSA_SUCCESS )
 c02c0d2:	4605      	mov	r5, r0
 c02c0d4:	b918      	cbnz	r0, c02c0de <mbedcrypto__psa_mac_sign_finish+0x4e>
            *mac_length = operation->mac_size;
 c02c0d6:	7963      	ldrb	r3, [r4, #5]
 c02c0d8:	f8c8 3000 	str.w	r3, [r8]
 c02c0dc:	e7e2      	b.n	c02c0a4 <mbedcrypto__psa_mac_sign_finish+0x14>
            memset( mac, '!', mac_size );
 c02c0de:	4632      	mov	r2, r6
 c02c0e0:	2121      	movs	r1, #33	; 0x21
 c02c0e2:	4638      	mov	r0, r7
 c02c0e4:	f7eb fc6f 	bl	c0179c6 <memset>
 c02c0e8:	e7dc      	b.n	c02c0a4 <mbedcrypto__psa_mac_sign_finish+0x14>
        psa_mac_abort( operation );
 c02c0ea:	f7ff fe7f 	bl	c02bdec <mbedcrypto__psa_mac_abort>
 c02c0ee:	e7d9      	b.n	c02c0a4 <mbedcrypto__psa_mac_sign_finish+0x14>

0c02c0f0 <mbedcrypto__psa_mac_verify_finish>:
{
 c02c0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( operation->alg == 0 )
 c02c0f4:	6803      	ldr	r3, [r0, #0]
{
 c02c0f6:	b090      	sub	sp, #64	; 0x40
 c02c0f8:	4606      	mov	r6, r0
 c02c0fa:	4688      	mov	r8, r1
    if( operation->alg == 0 )
 c02c0fc:	b353      	cbz	r3, c02c154 <mbedcrypto__psa_mac_verify_finish+0x64>
    if( operation->is_sign )
 c02c0fe:	7904      	ldrb	r4, [r0, #4]
 c02c100:	f014 0410 	ands.w	r4, r4, #16
 c02c104:	d126      	bne.n	c02c154 <mbedcrypto__psa_mac_verify_finish+0x64>
    if( operation->mac_size != mac_length )
 c02c106:	7947      	ldrb	r7, [r0, #5]
 c02c108:	4297      	cmp	r7, r2
 c02c10a:	d11d      	bne.n	c02c148 <mbedcrypto__psa_mac_verify_finish+0x58>
    status = psa_mac_finish_internal( operation,
 c02c10c:	2240      	movs	r2, #64	; 0x40
 c02c10e:	4669      	mov	r1, sp
 c02c110:	f7ff fb82 	bl	c02b818 <psa_mac_finish_internal>
    for( i = 0; i < n; i++ )
 c02c114:	4623      	mov	r3, r4
    status = psa_mac_finish_internal( operation,
 c02c116:	4605      	mov	r5, r0
    for( i = 0; i < n; i++ )
 c02c118:	429f      	cmp	r7, r3
 c02c11a:	d80d      	bhi.n	c02c138 <mbedcrypto__psa_mac_verify_finish+0x48>
    if( safer_memcmp( mac, actual_mac, mac_length ) != 0 )
 c02c11c:	b9a4      	cbnz	r4, c02c148 <mbedcrypto__psa_mac_verify_finish+0x58>
    if( status == PSA_SUCCESS )
 c02c11e:	b9ad      	cbnz	r5, c02c14c <mbedcrypto__psa_mac_verify_finish+0x5c>
        status = psa_mac_abort( operation );
 c02c120:	4630      	mov	r0, r6
 c02c122:	f7ff fe63 	bl	c02bdec <mbedcrypto__psa_mac_abort>
 c02c126:	4605      	mov	r5, r0
    mbedtls_platform_zeroize( actual_mac, sizeof( actual_mac ) );
 c02c128:	2140      	movs	r1, #64	; 0x40
 c02c12a:	4668      	mov	r0, sp
 c02c12c:	f7fe f8b8 	bl	c02a2a0 <mbedtls_platform_zeroize>
}
 c02c130:	4628      	mov	r0, r5
 c02c132:	b010      	add	sp, #64	; 0x40
 c02c134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        diff |= a[i] ^ b[i];
 c02c138:	f818 2003 	ldrb.w	r2, [r8, r3]
 c02c13c:	f81d 1003 	ldrb.w	r1, [sp, r3]
    for( i = 0; i < n; i++ )
 c02c140:	3301      	adds	r3, #1
        diff |= a[i] ^ b[i];
 c02c142:	404a      	eors	r2, r1
 c02c144:	4314      	orrs	r4, r2
 c02c146:	e7e7      	b.n	c02c118 <mbedcrypto__psa_mac_verify_finish+0x28>
        status = PSA_ERROR_INVALID_SIGNATURE;
 c02c148:	f06f 0594 	mvn.w	r5, #148	; 0x94
        psa_mac_abort( operation );
 c02c14c:	4630      	mov	r0, r6
 c02c14e:	f7ff fe4d 	bl	c02bdec <mbedcrypto__psa_mac_abort>
 c02c152:	e7e9      	b.n	c02c128 <mbedcrypto__psa_mac_verify_finish+0x38>
        return( PSA_ERROR_BAD_STATE );
 c02c154:	f06f 0588 	mvn.w	r5, #136	; 0x88
 c02c158:	e7ea      	b.n	c02c130 <mbedcrypto__psa_mac_verify_finish+0x40>
	...

0c02c15c <mbedcrypto__psa_asymmetric_sign>:
{
 c02c15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02c160:	b08f      	sub	sp, #60	; 0x3c
 c02c162:	4698      	mov	r8, r3
 c02c164:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
    *signature_length = signature_size;
 c02c168:	9b1a      	ldr	r3, [sp, #104]	; 0x68
{
 c02c16a:	460c      	mov	r4, r1
    *signature_length = signature_size;
 c02c16c:	601f      	str	r7, [r3, #0]
{
 c02c16e:	4692      	mov	sl, r2
    status = psa_get_key_from_slot( handle, &slot, PSA_KEY_USAGE_SIGN, alg );
 c02c170:	460b      	mov	r3, r1
 c02c172:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c02c176:	a907      	add	r1, sp, #28
 c02c178:	f7fe fbf0 	bl	c02a95c <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c02c17c:	4605      	mov	r5, r0
 c02c17e:	b9d0      	cbnz	r0, c02c1b6 <mbedcrypto__psa_asymmetric_sign+0x5a>
    if( ! PSA_KEY_TYPE_IS_KEYPAIR( slot->type ) )
 c02c180:	9b07      	ldr	r3, [sp, #28]
 c02c182:	6819      	ldr	r1, [r3, #0]
 c02c184:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
 c02c188:	f1b2 4fe0 	cmp.w	r2, #1879048192	; 0x70000000
 c02c18c:	d14a      	bne.n	c02c224 <mbedcrypto__psa_asymmetric_sign+0xc8>
    if( slot->type == PSA_KEY_TYPE_RSA_KEYPAIR )
 c02c18e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 c02c192:	4291      	cmp	r1, r2
 c02c194:	d15a      	bne.n	c02c24c <mbedcrypto__psa_asymmetric_sign+0xf0>
    status = psa_rsa_decode_md_type( alg, hash_length, &md_alg );
 c02c196:	aa0b      	add	r2, sp, #44	; 0x2c
 c02c198:	4641      	mov	r1, r8
 c02c19a:	4620      	mov	r0, r4
        status = psa_rsa_sign( slot->data.rsa,
 c02c19c:	f8d3 901c 	ldr.w	r9, [r3, #28]
    status = psa_rsa_decode_md_type( alg, hash_length, &md_alg );
 c02c1a0:	f7fe fdca 	bl	c02ad38 <psa_rsa_decode_md_type>
    if( status != PSA_SUCCESS )
 c02c1a4:	4605      	mov	r5, r0
 c02c1a6:	b930      	cbnz	r0, c02c1b6 <mbedcrypto__psa_asymmetric_sign+0x5a>
    if( signature_size < mbedtls_rsa_get_len( rsa ) )
 c02c1a8:	4648      	mov	r0, r9
 c02c1aa:	f7f3 fa7e 	bl	c01f6aa <mbedtls_rsa_get_len>
 c02c1ae:	4287      	cmp	r7, r0
 c02c1b0:	d206      	bcs.n	c02c1c0 <mbedcrypto__psa_asymmetric_sign+0x64>
        return( PSA_ERROR_BUFFER_TOO_SMALL );
 c02c1b2:	f06f 0589 	mvn.w	r5, #137	; 0x89
    else if( signature_size != 0 )
 c02c1b6:	b377      	cbz	r7, c02c216 <mbedcrypto__psa_asymmetric_sign+0xba>
        memset( signature, '!', signature_size );
 c02c1b8:	463a      	mov	r2, r7
 c02c1ba:	2121      	movs	r1, #33	; 0x21
 c02c1bc:	4630      	mov	r0, r6
 c02c1be:	e028      	b.n	c02c212 <mbedcrypto__psa_asymmetric_sign+0xb6>
    if( PSA_ALG_IS_RSA_PKCS1V15_SIGN( alg ) )
 c02c1c0:	4b56      	ldr	r3, [pc, #344]	; (c02c31c <mbedcrypto__psa_asymmetric_sign+0x1c0>)
 c02c1c2:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
 c02c1c6:	429c      	cmp	r4, r3
 c02c1c8:	d129      	bne.n	c02c21e <mbedcrypto__psa_asymmetric_sign+0xc2>
        mbedtls_rsa_set_padding( rsa, MBEDTLS_RSA_PKCS_V15,
 c02c1ca:	462a      	mov	r2, r5
 c02c1cc:	4629      	mov	r1, r5
 c02c1ce:	4648      	mov	r0, r9
 c02c1d0:	f7f3 fa68 	bl	c01f6a4 <mbedtls_rsa_set_padding>
        ret = mbedtls_rsa_pkcs1_sign( rsa,
 c02c1d4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 c02c1d8:	e9cd a602 	strd	sl, r6, [sp, #8]
 c02c1dc:	9300      	str	r3, [sp, #0]
 c02c1de:	f8cd 8004 	str.w	r8, [sp, #4]
 c02c1e2:	2301      	movs	r3, #1
 c02c1e4:	4a4e      	ldr	r2, [pc, #312]	; (c02c320 <mbedcrypto__psa_asymmetric_sign+0x1c4>)
 c02c1e6:	494f      	ldr	r1, [pc, #316]	; (c02c324 <mbedcrypto__psa_asymmetric_sign+0x1c8>)
 c02c1e8:	4648      	mov	r0, r9
 c02c1ea:	f7f4 f903 	bl	c0203f4 <mbedtls_rsa_pkcs1_sign>
        ret = mbedtls_rsa_rsassa_pss_sign( rsa,
 c02c1ee:	4604      	mov	r4, r0
    if( ret == 0 )
 c02c1f0:	b920      	cbnz	r0, c02c1fc <mbedcrypto__psa_asymmetric_sign+0xa0>
        *signature_length = mbedtls_rsa_get_len( rsa );
 c02c1f2:	4648      	mov	r0, r9
 c02c1f4:	f7f3 fa59 	bl	c01f6aa <mbedtls_rsa_get_len>
 c02c1f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 c02c1fa:	6018      	str	r0, [r3, #0]
    return( mbedtls_to_psa_error( ret ) );
 c02c1fc:	4620      	mov	r0, r4
 c02c1fe:	f7fe f857 	bl	c02a2b0 <mbedtls_to_psa_error>
 c02c202:	4605      	mov	r5, r0
    if( status == PSA_SUCCESS )
 c02c204:	2800      	cmp	r0, #0
 c02c206:	d1d6      	bne.n	c02c1b6 <mbedcrypto__psa_asymmetric_sign+0x5a>
        memset( signature + *signature_length, '!',
 c02c208:	2121      	movs	r1, #33	; 0x21
 c02c20a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 c02c20c:	6818      	ldr	r0, [r3, #0]
 c02c20e:	1a3a      	subs	r2, r7, r0
 c02c210:	4430      	add	r0, r6
        memset( signature, '!', signature_size );
 c02c212:	f7eb fbd8 	bl	c0179c6 <memset>
}
 c02c216:	4628      	mov	r0, r5
 c02c218:	b00f      	add	sp, #60	; 0x3c
 c02c21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( PSA_ALG_IS_RSA_PSS( alg ) )
 c02c21e:	4b42      	ldr	r3, [pc, #264]	; (c02c328 <mbedcrypto__psa_asymmetric_sign+0x1cc>)
 c02c220:	429c      	cmp	r4, r3
 c02c222:	d002      	beq.n	c02c22a <mbedcrypto__psa_asymmetric_sign+0xce>
        status = PSA_ERROR_INVALID_ARGUMENT;
 c02c224:	f06f 0586 	mvn.w	r5, #134	; 0x86
 c02c228:	e7c5      	b.n	c02c1b6 <mbedcrypto__psa_asymmetric_sign+0x5a>
        mbedtls_rsa_set_padding( rsa, MBEDTLS_RSA_PKCS_V21, md_alg );
 c02c22a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 c02c22e:	4648      	mov	r0, r9
 c02c230:	2101      	movs	r1, #1
 c02c232:	f7f3 fa37 	bl	c01f6a4 <mbedtls_rsa_set_padding>
        ret = mbedtls_rsa_rsassa_pss_sign( rsa,
 c02c236:	e9cd a602 	strd	sl, r6, [sp, #8]
 c02c23a:	e9cd 5800 	strd	r5, r8, [sp]
 c02c23e:	2301      	movs	r3, #1
 c02c240:	4a37      	ldr	r2, [pc, #220]	; (c02c320 <mbedcrypto__psa_asymmetric_sign+0x1c4>)
 c02c242:	4938      	ldr	r1, [pc, #224]	; (c02c324 <mbedcrypto__psa_asymmetric_sign+0x1c8>)
 c02c244:	4648      	mov	r0, r9
 c02c246:	f7f3 ffa1 	bl	c02018c <mbedtls_rsa_rsassa_pss_sign>
 c02c24a:	e7d0      	b.n	c02c1ee <mbedcrypto__psa_asymmetric_sign+0x92>
    if( PSA_KEY_TYPE_IS_ECC( slot->type ) )
 c02c24c:	4a37      	ldr	r2, [pc, #220]	; (c02c32c <mbedcrypto__psa_asymmetric_sign+0x1d0>)
 c02c24e:	400a      	ands	r2, r1
 c02c250:	4937      	ldr	r1, [pc, #220]	; (c02c330 <mbedcrypto__psa_asymmetric_sign+0x1d4>)
 c02c252:	428a      	cmp	r2, r1
 c02c254:	d15f      	bne.n	c02c316 <mbedcrypto__psa_asymmetric_sign+0x1ba>
            PSA_ALG_IS_ECDSA( alg )
 c02c256:	f424 3280 	bic.w	r2, r4, #65536	; 0x10000
        if(
 c02c25a:	4936      	ldr	r1, [pc, #216]	; (c02c334 <mbedcrypto__psa_asymmetric_sign+0x1d8>)
            PSA_ALG_IS_ECDSA( alg )
 c02c25c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
        if(
 c02c260:	428a      	cmp	r2, r1
 c02c262:	d1df      	bne.n	c02c224 <mbedcrypto__psa_asymmetric_sign+0xc8>
            status = psa_ecdsa_sign( slot->data.ecp,
 c02c264:	f8d3 901c 	ldr.w	r9, [r3, #28]
    mbedtls_mpi_init( &r );
 c02c268:	a808      	add	r0, sp, #32
    size_t curve_bytes = PSA_BITS_TO_BYTES( ecp->grp.pbits );
 c02c26a:	f8d9 5058 	ldr.w	r5, [r9, #88]	; 0x58
    mbedtls_mpi_init( &r );
 c02c26e:	f7f8 fc83 	bl	c024b78 <mbedtls_mpi_init>
    size_t curve_bytes = PSA_BITS_TO_BYTES( ecp->grp.pbits );
 c02c272:	3507      	adds	r5, #7
 c02c274:	08ed      	lsrs	r5, r5, #3
    mbedtls_mpi_init( &s );
 c02c276:	a80b      	add	r0, sp, #44	; 0x2c
    if( signature_size < 2 * curve_bytes )
 c02c278:	ea4f 0b45 	mov.w	fp, r5, lsl #1
    mbedtls_mpi_init( &s );
 c02c27c:	f7f8 fc7c 	bl	c024b78 <mbedtls_mpi_init>
    if( signature_size < 2 * curve_bytes )
 c02c280:	455f      	cmp	r7, fp
 c02c282:	d346      	bcc.n	c02c312 <mbedcrypto__psa_asymmetric_sign+0x1b6>
    if( PSA_ALG_DSA_IS_DETERMINISTIC( alg ) )
 c02c284:	03e2      	lsls	r2, r4, #15
 c02c286:	f109 03a0 	add.w	r3, r9, #160	; 0xa0
 c02c28a:	d535      	bpl.n	c02c2f8 <mbedcrypto__psa_asymmetric_sign+0x19c>
        psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH( alg );
 c02c28c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 c02c290:	bf18      	it	ne
 c02c292:	f044 7480 	orrne.w	r4, r4, #16777216	; 0x1000000
 c02c296:	f104 447f 	add.w	r4, r4, #4278190080	; 0xff000000
 c02c29a:	3c05      	subs	r4, #5
 c02c29c:	2c06      	cmp	r4, #6
 c02c29e:	bf96      	itet	ls
 c02c2a0:	4a25      	ldrls	r2, [pc, #148]	; (c02c338 <mbedcrypto__psa_asymmetric_sign+0x1dc>)
{
 c02c2a2:	2000      	movhi	r0, #0
 c02c2a4:	f852 0024 	ldrls.w	r0, [r2, r4, lsl #2]
 c02c2a8:	9305      	str	r3, [sp, #20]
        mbedtls_md_type_t md_alg = mbedtls_md_get_type( md_info );
 c02c2aa:	f7fb ff22 	bl	c0280f2 <mbedtls_md_get_type>
        MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign_det( &ecp->grp, &r, &s, &ecp->d,
 c02c2ae:	f8cd a000 	str.w	sl, [sp]
 c02c2b2:	e9cd 8001 	strd	r8, r0, [sp, #4]
 c02c2b6:	9b05      	ldr	r3, [sp, #20]
 c02c2b8:	aa0b      	add	r2, sp, #44	; 0x2c
 c02c2ba:	a908      	add	r1, sp, #32
 c02c2bc:	4648      	mov	r0, r9
 c02c2be:	f7fb faa1 	bl	c027804 <mbedtls_ecdsa_sign_det>
 c02c2c2:	4604      	mov	r4, r0
 c02c2c4:	b960      	cbnz	r0, c02c2e0 <mbedcrypto__psa_asymmetric_sign+0x184>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &r,
 c02c2c6:	462a      	mov	r2, r5
 c02c2c8:	4631      	mov	r1, r6
 c02c2ca:	a808      	add	r0, sp, #32
 c02c2cc:	f7f8 fe4b 	bl	c024f66 <mbedtls_mpi_write_binary>
 c02c2d0:	4604      	mov	r4, r0
 c02c2d2:	b928      	cbnz	r0, c02c2e0 <mbedcrypto__psa_asymmetric_sign+0x184>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &s,
 c02c2d4:	462a      	mov	r2, r5
 c02c2d6:	1971      	adds	r1, r6, r5
 c02c2d8:	a80b      	add	r0, sp, #44	; 0x2c
 c02c2da:	f7f8 fe44 	bl	c024f66 <mbedtls_mpi_write_binary>
 c02c2de:	4604      	mov	r4, r0
    mbedtls_mpi_free( &r );
 c02c2e0:	a808      	add	r0, sp, #32
 c02c2e2:	f7f8 fc4f 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 c02c2e6:	a80b      	add	r0, sp, #44	; 0x2c
 c02c2e8:	f7f8 fc4c 	bl	c024b84 <mbedtls_mpi_free>
    if( ret == 0 )
 c02c2ec:	2c00      	cmp	r4, #0
 c02c2ee:	d185      	bne.n	c02c1fc <mbedcrypto__psa_asymmetric_sign+0xa0>
        *signature_length = 2 * curve_bytes;
 c02c2f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 c02c2f2:	f8c3 b000 	str.w	fp, [r3]
 c02c2f6:	e781      	b.n	c02c1fc <mbedcrypto__psa_asymmetric_sign+0xa0>
        MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ecp->grp, &r, &s, &ecp->d,
 c02c2f8:	4a09      	ldr	r2, [pc, #36]	; (c02c320 <mbedcrypto__psa_asymmetric_sign+0x1c4>)
 c02c2fa:	f8cd a000 	str.w	sl, [sp]
 c02c2fe:	9203      	str	r2, [sp, #12]
 c02c300:	4a08      	ldr	r2, [pc, #32]	; (c02c324 <mbedcrypto__psa_asymmetric_sign+0x1c8>)
 c02c302:	a908      	add	r1, sp, #32
 c02c304:	e9cd 8201 	strd	r8, r2, [sp, #4]
 c02c308:	4648      	mov	r0, r9
 c02c30a:	aa0b      	add	r2, sp, #44	; 0x2c
 c02c30c:	f7f0 fd22 	bl	c01cd54 <mbedtls_ecdsa_sign>
 c02c310:	e7d7      	b.n	c02c2c2 <mbedcrypto__psa_asymmetric_sign+0x166>
        ret = MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL;
 c02c312:	4c0a      	ldr	r4, [pc, #40]	; (c02c33c <mbedcrypto__psa_asymmetric_sign+0x1e0>)
 c02c314:	e7e4      	b.n	c02c2e0 <mbedcrypto__psa_asymmetric_sign+0x184>
        status = PSA_ERROR_NOT_SUPPORTED;
 c02c316:	f06f 0585 	mvn.w	r5, #133	; 0x85
 c02c31a:	e74c      	b.n	c02c1b6 <mbedcrypto__psa_asymmetric_sign+0x5a>
 c02c31c:	10020000 	.word	0x10020000
 c02c320:	300360c0 	.word	0x300360c0
 c02c324:	0c027525 	.word	0x0c027525
 c02c328:	10030000 	.word	0x10030000
 c02c32c:	efff0000 	.word	0xefff0000
 c02c330:	60030000 	.word	0x60030000
 c02c334:	10060000 	.word	0x10060000
 c02c338:	0c0368a4 	.word	0x0c0368a4
 c02c33c:	ffffb100 	.word	0xffffb100

0c02c340 <mbedcrypto__psa_asymmetric_verify>:
{
 c02c340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02c344:	b08d      	sub	sp, #52	; 0x34
 c02c346:	460d      	mov	r5, r1
 c02c348:	e9dd 7916 	ldrd	r7, r9, [sp, #88]	; 0x58
 c02c34c:	4690      	mov	r8, r2
 c02c34e:	461e      	mov	r6, r3
    status = psa_get_key_from_slot( handle, &slot, PSA_KEY_USAGE_VERIFY, alg );
 c02c350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c02c354:	460b      	mov	r3, r1
 c02c356:	a905      	add	r1, sp, #20
 c02c358:	f7fe fb00 	bl	c02a95c <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c02c35c:	4604      	mov	r4, r0
 c02c35e:	2800      	cmp	r0, #0
 c02c360:	d149      	bne.n	c02c3f6 <mbedcrypto__psa_asymmetric_verify+0xb6>
    if( PSA_KEY_TYPE_IS_RSA( slot->type ) )
 c02c362:	9b05      	ldr	r3, [sp, #20]
 c02c364:	4a49      	ldr	r2, [pc, #292]	; (c02c48c <mbedcrypto__psa_asymmetric_verify+0x14c>)
 c02c366:	6819      	ldr	r1, [r3, #0]
 c02c368:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 c02c36c:	4290      	cmp	r0, r2
 c02c36e:	d146      	bne.n	c02c3fe <mbedcrypto__psa_asymmetric_verify+0xbe>
    status = psa_rsa_decode_md_type( alg, hash_length, &md_alg );
 c02c370:	aa09      	add	r2, sp, #36	; 0x24
 c02c372:	4631      	mov	r1, r6
 c02c374:	4628      	mov	r0, r5
        return( psa_rsa_verify( slot->data.rsa,
 c02c376:	f8d3 a01c 	ldr.w	sl, [r3, #28]
    status = psa_rsa_decode_md_type( alg, hash_length, &md_alg );
 c02c37a:	f7fe fcdd 	bl	c02ad38 <psa_rsa_decode_md_type>
    if( status != PSA_SUCCESS )
 c02c37e:	4604      	mov	r4, r0
 c02c380:	2800      	cmp	r0, #0
 c02c382:	d138      	bne.n	c02c3f6 <mbedcrypto__psa_asymmetric_verify+0xb6>
    if( signature_length < mbedtls_rsa_get_len( rsa ) )
 c02c384:	4650      	mov	r0, sl
 c02c386:	f7f3 f990 	bl	c01f6aa <mbedtls_rsa_get_len>
 c02c38a:	4581      	cmp	r9, r0
 c02c38c:	d331      	bcc.n	c02c3f2 <mbedcrypto__psa_asymmetric_verify+0xb2>
    if( PSA_ALG_IS_RSA_PKCS1V15_SIGN( alg ) )
 c02c38e:	4b40      	ldr	r3, [pc, #256]	; (c02c490 <mbedcrypto__psa_asymmetric_verify+0x150>)
 c02c390:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 c02c394:	429d      	cmp	r5, r3
 c02c396:	d118      	bne.n	c02c3ca <mbedcrypto__psa_asymmetric_verify+0x8a>
        mbedtls_rsa_set_padding( rsa, MBEDTLS_RSA_PKCS_V15,
 c02c398:	4622      	mov	r2, r4
 c02c39a:	4621      	mov	r1, r4
 c02c39c:	4650      	mov	r0, sl
 c02c39e:	f7f3 f981 	bl	c01f6a4 <mbedtls_rsa_set_padding>
        ret = mbedtls_rsa_pkcs1_verify( rsa,
 c02c3a2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 c02c3a6:	e9cd 8702 	strd	r8, r7, [sp, #8]
 c02c3aa:	9300      	str	r3, [sp, #0]
 c02c3ac:	9601      	str	r6, [sp, #4]
 c02c3ae:	4623      	mov	r3, r4
 c02c3b0:	4a38      	ldr	r2, [pc, #224]	; (c02c494 <mbedcrypto__psa_asymmetric_verify+0x154>)
 c02c3b2:	4939      	ldr	r1, [pc, #228]	; (c02c498 <mbedcrypto__psa_asymmetric_verify+0x158>)
 c02c3b4:	4650      	mov	r0, sl
 c02c3b6:	f7f4 f989 	bl	c0206cc <mbedtls_rsa_pkcs1_verify>
    if( ret == MBEDTLS_ERR_RSA_INVALID_PADDING )
 c02c3ba:	f510 4f82 	cmn.w	r0, #16640	; 0x4100
 c02c3be:	d05b      	beq.n	c02c478 <mbedcrypto__psa_asymmetric_verify+0x138>
}
 c02c3c0:	b00d      	add	sp, #52	; 0x34
 c02c3c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_to_psa_error( ret ) );
 c02c3c6:	f7fd bf73 	b.w	c02a2b0 <mbedtls_to_psa_error>
    if( PSA_ALG_IS_RSA_PSS( alg ) )
 c02c3ca:	4b34      	ldr	r3, [pc, #208]	; (c02c49c <mbedcrypto__psa_asymmetric_verify+0x15c>)
 c02c3cc:	429d      	cmp	r5, r3
 c02c3ce:	d159      	bne.n	c02c484 <mbedcrypto__psa_asymmetric_verify+0x144>
        mbedtls_rsa_set_padding( rsa, MBEDTLS_RSA_PKCS_V21, md_alg );
 c02c3d0:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 c02c3d4:	4650      	mov	r0, sl
 c02c3d6:	2101      	movs	r1, #1
 c02c3d8:	f7f3 f964 	bl	c01f6a4 <mbedtls_rsa_set_padding>
        ret = mbedtls_rsa_rsassa_pss_verify( rsa,
 c02c3dc:	e9cd 8702 	strd	r8, r7, [sp, #8]
 c02c3e0:	e9cd 4600 	strd	r4, r6, [sp]
 c02c3e4:	4623      	mov	r3, r4
 c02c3e6:	4a2b      	ldr	r2, [pc, #172]	; (c02c494 <mbedcrypto__psa_asymmetric_verify+0x154>)
 c02c3e8:	492b      	ldr	r1, [pc, #172]	; (c02c498 <mbedcrypto__psa_asymmetric_verify+0x158>)
 c02c3ea:	4650      	mov	r0, sl
 c02c3ec:	f7f4 f8f0 	bl	c0205d0 <mbedtls_rsa_rsassa_pss_verify>
 c02c3f0:	e7e3      	b.n	c02c3ba <mbedcrypto__psa_asymmetric_verify+0x7a>
        return( PSA_ERROR_BUFFER_TOO_SMALL );
 c02c3f2:	f06f 0489 	mvn.w	r4, #137	; 0x89
}
 c02c3f6:	4620      	mov	r0, r4
 c02c3f8:	b00d      	add	sp, #52	; 0x34
 c02c3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( PSA_KEY_TYPE_IS_ECC( slot->type ) )
 c02c3fe:	4a28      	ldr	r2, [pc, #160]	; (c02c4a0 <mbedcrypto__psa_asymmetric_verify+0x160>)
 c02c400:	400a      	ands	r2, r1
 c02c402:	4928      	ldr	r1, [pc, #160]	; (c02c4a4 <mbedcrypto__psa_asymmetric_verify+0x164>)
 c02c404:	428a      	cmp	r2, r1
 c02c406:	d13a      	bne.n	c02c47e <mbedcrypto__psa_asymmetric_verify+0x13e>
        if( PSA_ALG_IS_ECDSA( alg ) )
 c02c408:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 c02c40c:	4a26      	ldr	r2, [pc, #152]	; (c02c4a8 <mbedcrypto__psa_asymmetric_verify+0x168>)
 c02c40e:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 c02c412:	4295      	cmp	r5, r2
 c02c414:	d136      	bne.n	c02c484 <mbedcrypto__psa_asymmetric_verify+0x144>
            return( psa_ecdsa_verify( slot->data.ecp,
 c02c416:	69dd      	ldr	r5, [r3, #28]
    mbedtls_mpi_init( &r );
 c02c418:	f10d 0b18 	add.w	fp, sp, #24
    size_t curve_bytes = PSA_BITS_TO_BYTES( ecp->grp.pbits );
 c02c41c:	6dac      	ldr	r4, [r5, #88]	; 0x58
    mbedtls_mpi_init( &r );
 c02c41e:	4658      	mov	r0, fp
    size_t curve_bytes = PSA_BITS_TO_BYTES( ecp->grp.pbits );
 c02c420:	3407      	adds	r4, #7
    mbedtls_mpi_init( &s );
 c02c422:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    mbedtls_mpi_init( &r );
 c02c426:	f7f8 fba7 	bl	c024b78 <mbedtls_mpi_init>
    size_t curve_bytes = PSA_BITS_TO_BYTES( ecp->grp.pbits );
 c02c42a:	08e4      	lsrs	r4, r4, #3
    mbedtls_mpi_init( &s );
 c02c42c:	4650      	mov	r0, sl
 c02c42e:	f7f8 fba3 	bl	c024b78 <mbedtls_mpi_init>
    if( signature_length != 2 * curve_bytes )
 c02c432:	ebb9 0f44 	cmp.w	r9, r4, lsl #1
 c02c436:	d11f      	bne.n	c02c478 <mbedcrypto__psa_asymmetric_verify+0x138>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &r,
 c02c438:	4622      	mov	r2, r4
 c02c43a:	4639      	mov	r1, r7
 c02c43c:	4658      	mov	r0, fp
 c02c43e:	f7f8 fd25 	bl	c024e8c <mbedtls_mpi_read_binary>
 c02c442:	4681      	mov	r9, r0
 c02c444:	b980      	cbnz	r0, c02c468 <mbedcrypto__psa_asymmetric_verify+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &s,
 c02c446:	4622      	mov	r2, r4
 c02c448:	1939      	adds	r1, r7, r4
 c02c44a:	4650      	mov	r0, sl
 c02c44c:	f7f8 fd1e 	bl	c024e8c <mbedtls_mpi_read_binary>
 c02c450:	4681      	mov	r9, r0
 c02c452:	b948      	cbnz	r0, c02c468 <mbedcrypto__psa_asymmetric_verify+0x128>
    ret = mbedtls_ecdsa_verify( &ecp->grp, hash, hash_length,
 c02c454:	e9cd ba00 	strd	fp, sl, [sp]
 c02c458:	f105 03ac 	add.w	r3, r5, #172	; 0xac
 c02c45c:	4632      	mov	r2, r6
 c02c45e:	4641      	mov	r1, r8
 c02c460:	4628      	mov	r0, r5
 c02c462:	f7f0 fd5f 	bl	c01cf24 <mbedtls_ecdsa_verify>
 c02c466:	4681      	mov	r9, r0
    mbedtls_mpi_free( &r );
 c02c468:	4658      	mov	r0, fp
 c02c46a:	f7f8 fb8b 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 c02c46e:	4650      	mov	r0, sl
 c02c470:	f7f8 fb88 	bl	c024b84 <mbedtls_mpi_free>
    return( mbedtls_to_psa_error( ret ) );
 c02c474:	4648      	mov	r0, r9
 c02c476:	e7a3      	b.n	c02c3c0 <mbedcrypto__psa_asymmetric_verify+0x80>
        return( PSA_ERROR_INVALID_SIGNATURE );
 c02c478:	f06f 0494 	mvn.w	r4, #148	; 0x94
            return( psa_ecdsa_verify( slot->data.ecp,
 c02c47c:	e7bb      	b.n	c02c3f6 <mbedcrypto__psa_asymmetric_verify+0xb6>
        return( PSA_ERROR_NOT_SUPPORTED );
 c02c47e:	f06f 0485 	mvn.w	r4, #133	; 0x85
 c02c482:	e7b8      	b.n	c02c3f6 <mbedcrypto__psa_asymmetric_verify+0xb6>
            return( PSA_ERROR_INVALID_ARGUMENT );
 c02c484:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c02c488:	e7b5      	b.n	c02c3f6 <mbedcrypto__psa_asymmetric_verify+0xb6>
 c02c48a:	bf00      	nop
 c02c48c:	60010000 	.word	0x60010000
 c02c490:	10020000 	.word	0x10020000
 c02c494:	300360c0 	.word	0x300360c0
 c02c498:	0c027525 	.word	0x0c027525
 c02c49c:	10030000 	.word	0x10030000
 c02c4a0:	efff0000 	.word	0xefff0000
 c02c4a4:	60030000 	.word	0x60030000
 c02c4a8:	10060000 	.word	0x10060000

0c02c4ac <mbedcrypto__psa_asymmetric_encrypt>:
{
 c02c4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02c4b0:	b08d      	sub	sp, #52	; 0x34
 c02c4b2:	4698      	mov	r8, r3
 c02c4b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 c02c4b6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 c02c4b8:	9308      	str	r3, [sp, #32]
 c02c4ba:	e9dd 7317 	ldrd	r7, r3, [sp, #92]	; 0x5c
 c02c4be:	9307      	str	r3, [sp, #28]
 c02c4c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    if( ! PSA_ALG_IS_RSA_OAEP( alg ) && salt_length != 0 )
 c02c4c2:	f021 0bff 	bic.w	fp, r1, #255	; 0xff
{
 c02c4c6:	9309      	str	r3, [sp, #36]	; 0x24
    *output_length = 0;
 c02c4c8:	2300      	movs	r3, #0
 c02c4ca:	6033      	str	r3, [r6, #0]
    if( ! PSA_ALG_IS_RSA_OAEP( alg ) && salt_length != 0 )
 c02c4cc:	4b2d      	ldr	r3, [pc, #180]	; (c02c584 <mbedcrypto__psa_asymmetric_encrypt+0xd8>)
{
 c02c4ce:	460d      	mov	r5, r1
    if( ! PSA_ALG_IS_RSA_OAEP( alg ) && salt_length != 0 )
 c02c4d0:	459b      	cmp	fp, r3
{
 c02c4d2:	4691      	mov	r9, r2
    if( ! PSA_ALG_IS_RSA_OAEP( alg ) && salt_length != 0 )
 c02c4d4:	d006      	beq.n	c02c4e4 <mbedcrypto__psa_asymmetric_encrypt+0x38>
 c02c4d6:	b12f      	cbz	r7, c02c4e4 <mbedcrypto__psa_asymmetric_encrypt+0x38>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02c4d8:	f06f 0a86 	mvn.w	sl, #134	; 0x86
}
 c02c4dc:	4650      	mov	r0, sl
 c02c4de:	b00d      	add	sp, #52	; 0x34
 c02c4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = psa_get_key_from_slot( handle, &slot, PSA_KEY_USAGE_ENCRYPT, alg );
 c02c4e4:	462b      	mov	r3, r5
 c02c4e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 c02c4ea:	a90b      	add	r1, sp, #44	; 0x2c
 c02c4ec:	f7fe fa36 	bl	c02a95c <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c02c4f0:	4682      	mov	sl, r0
 c02c4f2:	2800      	cmp	r0, #0
 c02c4f4:	d1f2      	bne.n	c02c4dc <mbedcrypto__psa_asymmetric_encrypt+0x30>
    if( ! ( PSA_KEY_TYPE_IS_PUBLIC_KEY( slot->type ) ||
 c02c4f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 c02c4f8:	680a      	ldr	r2, [r1, #0]
 c02c4fa:	f002 40c0 	and.w	r0, r2, #1610612736	; 0x60000000
 c02c4fe:	f1b0 4fc0 	cmp.w	r0, #1610612736	; 0x60000000
 c02c502:	d1e9      	bne.n	c02c4d8 <mbedcrypto__psa_asymmetric_encrypt+0x2c>
    if( PSA_KEY_TYPE_IS_RSA( slot->type ) )
 c02c504:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 c02c508:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 c02c50c:	4282      	cmp	r2, r0
 c02c50e:	d135      	bne.n	c02c57c <mbedcrypto__psa_asymmetric_encrypt+0xd0>
        mbedtls_rsa_context *rsa = slot->data.rsa;
 c02c510:	69cc      	ldr	r4, [r1, #28]
        if( output_size < mbedtls_rsa_get_len( rsa ) )
 c02c512:	4620      	mov	r0, r4
 c02c514:	f7f3 f8c9 	bl	c01f6aa <mbedtls_rsa_get_len>
 c02c518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c02c51a:	4298      	cmp	r0, r3
 c02c51c:	d8dc      	bhi.n	c02c4d8 <mbedcrypto__psa_asymmetric_encrypt+0x2c>
        if( alg == PSA_ALG_RSA_PKCS1V15_CRYPT )
 c02c51e:	4a1a      	ldr	r2, [pc, #104]	; (c02c588 <mbedcrypto__psa_asymmetric_encrypt+0xdc>)
 c02c520:	4295      	cmp	r5, r2
 c02c522:	d116      	bne.n	c02c552 <mbedcrypto__psa_asymmetric_encrypt+0xa6>
            ret = mbedtls_rsa_pkcs1_encrypt( rsa,
 c02c524:	9b07      	ldr	r3, [sp, #28]
 c02c526:	f8cd 8000 	str.w	r8, [sp]
 c02c52a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 c02c52e:	4a17      	ldr	r2, [pc, #92]	; (c02c58c <mbedcrypto__psa_asymmetric_encrypt+0xe0>)
 c02c530:	4653      	mov	r3, sl
 c02c532:	4917      	ldr	r1, [pc, #92]	; (c02c590 <mbedcrypto__psa_asymmetric_encrypt+0xe4>)
 c02c534:	4620      	mov	r0, r4
 c02c536:	f7f3 fc3f 	bl	c01fdb8 <mbedtls_rsa_pkcs1_encrypt>
            ret = mbedtls_rsa_rsaes_oaep_encrypt( rsa,
 c02c53a:	4605      	mov	r5, r0
        if( ret == 0 )
 c02c53c:	b918      	cbnz	r0, c02c546 <mbedcrypto__psa_asymmetric_encrypt+0x9a>
            *output_length = mbedtls_rsa_get_len( rsa );
 c02c53e:	4620      	mov	r0, r4
 c02c540:	f7f3 f8b3 	bl	c01f6aa <mbedtls_rsa_get_len>
 c02c544:	6030      	str	r0, [r6, #0]
        return( mbedtls_to_psa_error( ret ) );
 c02c546:	4628      	mov	r0, r5
}
 c02c548:	b00d      	add	sp, #52	; 0x34
 c02c54a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return( mbedtls_to_psa_error( ret ) );
 c02c54e:	f7fd beaf 	b.w	c02a2b0 <mbedtls_to_psa_error>
        if( PSA_ALG_IS_RSA_OAEP( alg ) )
 c02c552:	4a0c      	ldr	r2, [pc, #48]	; (c02c584 <mbedcrypto__psa_asymmetric_encrypt+0xd8>)
 c02c554:	4593      	cmp	fp, r2
 c02c556:	d1bf      	bne.n	c02c4d8 <mbedcrypto__psa_asymmetric_encrypt+0x2c>
            psa_rsa_oaep_set_padding_mode( alg, rsa );
 c02c558:	4621      	mov	r1, r4
 c02c55a:	4628      	mov	r0, r5
 c02c55c:	f7fe fbca 	bl	c02acf4 <psa_rsa_oaep_set_padding_mode>
            ret = mbedtls_rsa_rsaes_oaep_encrypt( rsa,
 c02c560:	9b07      	ldr	r3, [sp, #28]
 c02c562:	e9cd 7801 	strd	r7, r8, [sp, #4]
 c02c566:	e9cd 9303 	strd	r9, r3, [sp, #12]
 c02c56a:	9b08      	ldr	r3, [sp, #32]
 c02c56c:	4a07      	ldr	r2, [pc, #28]	; (c02c58c <mbedcrypto__psa_asymmetric_encrypt+0xe0>)
 c02c56e:	9300      	str	r3, [sp, #0]
 c02c570:	4907      	ldr	r1, [pc, #28]	; (c02c590 <mbedcrypto__psa_asymmetric_encrypt+0xe4>)
 c02c572:	4653      	mov	r3, sl
 c02c574:	4620      	mov	r0, r4
 c02c576:	f7f3 fb1f 	bl	c01fbb8 <mbedtls_rsa_rsaes_oaep_encrypt>
 c02c57a:	e7de      	b.n	c02c53a <mbedcrypto__psa_asymmetric_encrypt+0x8e>
        return( PSA_ERROR_NOT_SUPPORTED );
 c02c57c:	f06f 0a85 	mvn.w	sl, #133	; 0x85
 c02c580:	e7ac      	b.n	c02c4dc <mbedcrypto__psa_asymmetric_encrypt+0x30>
 c02c582:	bf00      	nop
 c02c584:	12030000 	.word	0x12030000
 c02c588:	12020000 	.word	0x12020000
 c02c58c:	300360c0 	.word	0x300360c0
 c02c590:	0c027525 	.word	0x0c027525

0c02c594 <mbedcrypto__psa_asymmetric_decrypt>:
{
 c02c594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02c598:	b08b      	sub	sp, #44	; 0x2c
 c02c59a:	9306      	str	r3, [sp, #24]
 c02c59c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 c02c59e:	e9dd a617 	ldrd	sl, r6, [sp, #92]	; 0x5c
 c02c5a2:	9307      	str	r3, [sp, #28]
    *output_length = 0;
 c02c5a4:	2300      	movs	r3, #0
{
 c02c5a6:	e9dd 7915 	ldrd	r7, r9, [sp, #84]	; 0x54
    *output_length = 0;
 c02c5aa:	6033      	str	r3, [r6, #0]
    if( ! PSA_ALG_IS_RSA_OAEP( alg ) && salt_length != 0 )
 c02c5ac:	4b28      	ldr	r3, [pc, #160]	; (c02c650 <mbedcrypto__psa_asymmetric_decrypt+0xbc>)
 c02c5ae:	f021 0bff 	bic.w	fp, r1, #255	; 0xff
 c02c5b2:	459b      	cmp	fp, r3
{
 c02c5b4:	460d      	mov	r5, r1
 c02c5b6:	4690      	mov	r8, r2
    if( ! PSA_ALG_IS_RSA_OAEP( alg ) && salt_length != 0 )
 c02c5b8:	d005      	beq.n	c02c5c6 <mbedcrypto__psa_asymmetric_decrypt+0x32>
 c02c5ba:	b127      	cbz	r7, c02c5c6 <mbedcrypto__psa_asymmetric_decrypt+0x32>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02c5bc:	f06f 0086 	mvn.w	r0, #134	; 0x86
}
 c02c5c0:	b00b      	add	sp, #44	; 0x2c
 c02c5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = psa_get_key_from_slot( handle, &slot, PSA_KEY_USAGE_DECRYPT, alg );
 c02c5c6:	462b      	mov	r3, r5
 c02c5c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 c02c5cc:	a909      	add	r1, sp, #36	; 0x24
 c02c5ce:	f7fe f9c5 	bl	c02a95c <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c02c5d2:	2800      	cmp	r0, #0
 c02c5d4:	d1f4      	bne.n	c02c5c0 <mbedcrypto__psa_asymmetric_decrypt+0x2c>
    if( ! PSA_KEY_TYPE_IS_KEYPAIR( slot->type ) )
 c02c5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c02c5d8:	681a      	ldr	r2, [r3, #0]
 c02c5da:	f002 41e0 	and.w	r1, r2, #1879048192	; 0x70000000
 c02c5de:	f1b1 4fe0 	cmp.w	r1, #1879048192	; 0x70000000
 c02c5e2:	d1eb      	bne.n	c02c5bc <mbedcrypto__psa_asymmetric_decrypt+0x28>
    if( slot->type == PSA_KEY_TYPE_RSA_KEYPAIR )
 c02c5e4:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 c02c5e8:	428a      	cmp	r2, r1
 c02c5ea:	d12d      	bne.n	c02c648 <mbedcrypto__psa_asymmetric_decrypt+0xb4>
        mbedtls_rsa_context *rsa = slot->data.rsa;
 c02c5ec:	69dc      	ldr	r4, [r3, #28]
        if( input_length != mbedtls_rsa_get_len( rsa ) )
 c02c5ee:	4620      	mov	r0, r4
 c02c5f0:	f7f3 f85b 	bl	c01f6aa <mbedtls_rsa_get_len>
 c02c5f4:	9b06      	ldr	r3, [sp, #24]
 c02c5f6:	4298      	cmp	r0, r3
 c02c5f8:	d1e0      	bne.n	c02c5bc <mbedcrypto__psa_asymmetric_decrypt+0x28>
        if( alg == PSA_ALG_RSA_PKCS1V15_CRYPT )
 c02c5fa:	4b16      	ldr	r3, [pc, #88]	; (c02c654 <mbedcrypto__psa_asymmetric_decrypt+0xc0>)
 c02c5fc:	429d      	cmp	r5, r3
 c02c5fe:	d10e      	bne.n	c02c61e <mbedcrypto__psa_asymmetric_decrypt+0x8a>
            ret = mbedtls_rsa_pkcs1_decrypt( rsa,
 c02c600:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 c02c604:	e9cd 6800 	strd	r6, r8, [sp]
 c02c608:	2301      	movs	r3, #1
 c02c60a:	4a13      	ldr	r2, [pc, #76]	; (c02c658 <mbedcrypto__psa_asymmetric_decrypt+0xc4>)
 c02c60c:	4913      	ldr	r1, [pc, #76]	; (c02c65c <mbedcrypto__psa_asymmetric_decrypt+0xc8>)
 c02c60e:	4620      	mov	r0, r4
 c02c610:	f7f3 fd9c 	bl	c02014c <mbedtls_rsa_pkcs1_decrypt>
}
 c02c614:	b00b      	add	sp, #44	; 0x2c
 c02c616:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return( mbedtls_to_psa_error( ret ) );
 c02c61a:	f7fd be49 	b.w	c02a2b0 <mbedtls_to_psa_error>
        if( PSA_ALG_IS_RSA_OAEP( alg ) )
 c02c61e:	4b0c      	ldr	r3, [pc, #48]	; (c02c650 <mbedcrypto__psa_asymmetric_decrypt+0xbc>)
 c02c620:	459b      	cmp	fp, r3
 c02c622:	d1cb      	bne.n	c02c5bc <mbedcrypto__psa_asymmetric_decrypt+0x28>
            psa_rsa_oaep_set_padding_mode( alg, rsa );
 c02c624:	4621      	mov	r1, r4
 c02c626:	4628      	mov	r0, r5
 c02c628:	f7fe fb64 	bl	c02acf4 <psa_rsa_oaep_set_padding_mode>
            ret = mbedtls_rsa_rsaes_oaep_decrypt( rsa,
 c02c62c:	9b07      	ldr	r3, [sp, #28]
 c02c62e:	e9cd 9a04 	strd	r9, sl, [sp, #16]
 c02c632:	9300      	str	r3, [sp, #0]
 c02c634:	e9cd 6802 	strd	r6, r8, [sp, #8]
 c02c638:	9701      	str	r7, [sp, #4]
 c02c63a:	2301      	movs	r3, #1
 c02c63c:	4a06      	ldr	r2, [pc, #24]	; (c02c658 <mbedcrypto__psa_asymmetric_decrypt+0xc4>)
 c02c63e:	4907      	ldr	r1, [pc, #28]	; (c02c65c <mbedcrypto__psa_asymmetric_decrypt+0xc8>)
 c02c640:	4620      	mov	r0, r4
 c02c642:	f7f3 fbd7 	bl	c01fdf4 <mbedtls_rsa_rsaes_oaep_decrypt>
 c02c646:	e7e5      	b.n	c02c614 <mbedcrypto__psa_asymmetric_decrypt+0x80>
        return( PSA_ERROR_NOT_SUPPORTED );
 c02c648:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c02c64c:	e7b8      	b.n	c02c5c0 <mbedcrypto__psa_asymmetric_decrypt+0x2c>
 c02c64e:	bf00      	nop
 c02c650:	12030000 	.word	0x12030000
 c02c654:	12020000 	.word	0x12020000
 c02c658:	300360c0 	.word	0x300360c0
 c02c65c:	0c027525 	.word	0x0c027525

0c02c660 <mbedcrypto__psa_cipher_abort>:
{
 c02c660:	b510      	push	{r4, lr}
 c02c662:	4604      	mov	r4, r0
    if( operation->alg == 0 )
 c02c664:	6800      	ldr	r0, [r0, #0]
 c02c666:	b190      	cbz	r0, c02c68e <mbedcrypto__psa_cipher_abort+0x2e>
    if( ! PSA_ALG_IS_CIPHER( operation->alg ) )
 c02c668:	f000 40fe 	and.w	r0, r0, #2130706432	; 0x7f000000
 c02c66c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 c02c670:	d10e      	bne.n	c02c690 <mbedcrypto__psa_cipher_abort+0x30>
    mbedtls_cipher_free( &operation->ctx.cipher );
 c02c672:	f104 0008 	add.w	r0, r4, #8
 c02c676:	f7fa f98f 	bl	c026998 <mbedtls_cipher_free>
    operation->alg = 0;
 c02c67a:	2000      	movs	r0, #0
    operation->key_set = 0;
 c02c67c:	7923      	ldrb	r3, [r4, #4]
    operation->alg = 0;
 c02c67e:	6020      	str	r0, [r4, #0]
    operation->iv_required = 0;
 c02c680:	f003 03fa 	and.w	r3, r3, #250	; 0xfa
 c02c684:	f360 0341 	bfi	r3, r0, #1, #1
    operation->iv_size = 0;
 c02c688:	7160      	strb	r0, [r4, #5]
    operation->block_size = 0;
 c02c68a:	71a0      	strb	r0, [r4, #6]
    operation->iv_required = 0;
 c02c68c:	7123      	strb	r3, [r4, #4]
}
 c02c68e:	bd10      	pop	{r4, pc}
        return( PSA_ERROR_BAD_STATE );
 c02c690:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02c694:	e7fb      	b.n	c02c68e <mbedcrypto__psa_cipher_abort+0x2e>
	...

0c02c698 <psa_cipher_setup>:
{
 c02c698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c02c69c:	460e      	mov	r6, r1
    if( operation->alg != 0 )
 c02c69e:	6801      	ldr	r1, [r0, #0]
                              PSA_KEY_USAGE_ENCRYPT :
 c02c6a0:	2b01      	cmp	r3, #1
{
 c02c6a2:	4604      	mov	r4, r0
 c02c6a4:	4615      	mov	r5, r2
 c02c6a6:	461f      	mov	r7, r3
                              PSA_KEY_USAGE_ENCRYPT :
 c02c6a8:	bf0c      	ite	eq
 c02c6aa:	f44f 7880 	moveq.w	r8, #256	; 0x100
 c02c6ae:	f44f 7800 	movne.w	r8, #512	; 0x200
    if( operation->alg != 0 )
 c02c6b2:	2900      	cmp	r1, #0
 c02c6b4:	f040 8099 	bne.w	c02c7ea <psa_cipher_setup+0x152>
    if( ! PSA_ALG_IS_CIPHER( alg ) )
 c02c6b8:	f002 43fe 	and.w	r3, r2, #2130706432	; 0x7f000000
 c02c6bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c02c6c0:	d008      	beq.n	c02c6d4 <psa_cipher_setup+0x3c>
        memset( operation, 0, sizeof( *operation ) );
 c02c6c2:	224c      	movs	r2, #76	; 0x4c
 c02c6c4:	f7eb f97f 	bl	c0179c6 <memset>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02c6c8:	f06f 0686 	mvn.w	r6, #134	; 0x86
}
 c02c6cc:	4630      	mov	r0, r6
 c02c6ce:	b003      	add	sp, #12
 c02c6d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    operation->alg = alg;
 c02c6d4:	6022      	str	r2, [r4, #0]
    operation->key_set = 0;
 c02c6d6:	7903      	ldrb	r3, [r0, #4]
    mbedtls_cipher_init( &operation->ctx.cipher );
 c02c6d8:	f100 0908 	add.w	r9, r0, #8
    operation->key_set = 0;
 c02c6dc:	f361 0300 	bfi	r3, r1, #0, #1
    operation->iv_set = 0;
 c02c6e0:	f361 0382 	bfi	r3, r1, #2, #1
    operation->iv_required = 1;
 c02c6e4:	b2db      	uxtb	r3, r3
 c02c6e6:	f043 0302 	orr.w	r3, r3, #2
 c02c6ea:	7103      	strb	r3, [r0, #4]
    operation->iv_size = 0;
 c02c6ec:	7141      	strb	r1, [r0, #5]
    operation->block_size = 0;
 c02c6ee:	7181      	strb	r1, [r0, #6]
    mbedtls_cipher_init( &operation->ctx.cipher );
 c02c6f0:	4648      	mov	r0, r9
 c02c6f2:	f7fa f94d 	bl	c026990 <mbedtls_cipher_init>
    status = psa_get_key_from_slot( handle, &slot, usage, alg);
 c02c6f6:	4630      	mov	r0, r6
 c02c6f8:	462b      	mov	r3, r5
 c02c6fa:	4642      	mov	r2, r8
 c02c6fc:	a901      	add	r1, sp, #4
 c02c6fe:	f7fe f92d 	bl	c02a95c <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c02c702:	4606      	mov	r6, r0
 c02c704:	2800      	cmp	r0, #0
 c02c706:	d16c      	bne.n	c02c7e2 <psa_cipher_setup+0x14a>
    key_bits = psa_get_key_bits( slot );
 c02c708:	9801      	ldr	r0, [sp, #4]
 c02c70a:	f7fe f991 	bl	c02aa30 <psa_get_key_bits>
    cipher_info = mbedtls_cipher_info_from_psa( alg, slot->type, key_bits, NULL );
 c02c70e:	9901      	ldr	r1, [sp, #4]
 c02c710:	4602      	mov	r2, r0
 c02c712:	6809      	ldr	r1, [r1, #0]
    key_bits = psa_get_key_bits( slot );
 c02c714:	4680      	mov	r8, r0
    cipher_info = mbedtls_cipher_info_from_psa( alg, slot->type, key_bits, NULL );
 c02c716:	4633      	mov	r3, r6
 c02c718:	4628      	mov	r0, r5
 c02c71a:	f7fe f823 	bl	c02a764 <mbedtls_cipher_info_from_psa>
    if( cipher_info == NULL )
 c02c71e:	4601      	mov	r1, r0
 c02c720:	2800      	cmp	r0, #0
 c02c722:	d05c      	beq.n	c02c7de <psa_cipher_setup+0x146>
    ret = mbedtls_cipher_setup( &operation->ctx.cipher, cipher_info );
 c02c724:	4648      	mov	r0, r9
 c02c726:	f7fa fb2d 	bl	c026d84 <mbedtls_cipher_setup>
    if( ret != 0 )
 c02c72a:	4606      	mov	r6, r0
 c02c72c:	2800      	cmp	r0, #0
 c02c72e:	d139      	bne.n	c02c7a4 <psa_cipher_setup+0x10c>
        ret = mbedtls_cipher_setkey( &operation->ctx.cipher,
 c02c730:	9901      	ldr	r1, [sp, #4]
 c02c732:	463b      	mov	r3, r7
 c02c734:	4642      	mov	r2, r8
 c02c736:	69c9      	ldr	r1, [r1, #28]
 c02c738:	4648      	mov	r0, r9
 c02c73a:	f7fa f945 	bl	c0269c8 <mbedtls_cipher_setkey>
    if( ret != 0 )
 c02c73e:	4606      	mov	r6, r0
 c02c740:	bb80      	cbnz	r0, c02c7a4 <psa_cipher_setup+0x10c>
    switch( alg )
 c02c742:	4b2c      	ldr	r3, [pc, #176]	; (c02c7f4 <psa_cipher_setup+0x15c>)
 c02c744:	429d      	cmp	r5, r3
 c02c746:	d034      	beq.n	c02c7b2 <psa_cipher_setup+0x11a>
 c02c748:	3301      	adds	r3, #1
 c02c74a:	429d      	cmp	r5, r3
 c02c74c:	d03b      	beq.n	c02c7c6 <psa_cipher_setup+0x12e>
    operation->key_set = 1;
 c02c74e:	7923      	ldrb	r3, [r4, #4]
 c02c750:	f043 0301 	orr.w	r3, r3, #1
 c02c754:	7123      	strb	r3, [r4, #4]
    operation->block_size = ( PSA_ALG_IS_STREAM_CIPHER( alg ) ? 1 :
 c02c756:	f005 43ff 	and.w	r3, r5, #2139095040	; 0x7f800000
 c02c75a:	f1b3 6f90 	cmp.w	r3, #75497472	; 0x4800000
 c02c75e:	d034      	beq.n	c02c7ca <psa_cipher_setup+0x132>
                              PSA_BLOCK_CIPHER_BLOCK_SIZE( slot->type ) );
 c02c760:	9b01      	ldr	r3, [sp, #4]
    operation->block_size = ( PSA_ALG_IS_STREAM_CIPHER( alg ) ? 1 :
 c02c762:	4a25      	ldr	r2, [pc, #148]	; (c02c7f8 <psa_cipher_setup+0x160>)
                              PSA_BLOCK_CIPHER_BLOCK_SIZE( slot->type ) );
 c02c764:	681b      	ldr	r3, [r3, #0]
    operation->block_size = ( PSA_ALG_IS_STREAM_CIPHER( alg ) ? 1 :
 c02c766:	4293      	cmp	r3, r2
 c02c768:	d033      	beq.n	c02c7d2 <psa_cipher_setup+0x13a>
 c02c76a:	3201      	adds	r2, #1
 c02c76c:	4293      	cmp	r3, r2
 c02c76e:	d02e      	beq.n	c02c7ce <psa_cipher_setup+0x136>
 c02c770:	3201      	adds	r2, #1
 c02c772:	4293      	cmp	r3, r2
 c02c774:	d02d      	beq.n	c02c7d2 <psa_cipher_setup+0x13a>
 c02c776:	3201      	adds	r2, #1
 c02c778:	1a98      	subs	r0, r3, r2
 c02c77a:	4243      	negs	r3, r0
 c02c77c:	4143      	adcs	r3, r0
    if( alg & PSA_ALG_CIPHER_FROM_BLOCK_FLAG )
 c02c77e:	0269      	lsls	r1, r5, #9
    operation->block_size = ( PSA_ALG_IS_STREAM_CIPHER( alg ) ? 1 :
 c02c780:	71a3      	strb	r3, [r4, #6]
    if( alg & PSA_ALG_CIPHER_FROM_BLOCK_FLAG )
 c02c782:	d50f      	bpl.n	c02c7a4 <psa_cipher_setup+0x10c>
        operation->iv_size = PSA_BLOCK_CIPHER_BLOCK_SIZE( slot->type );
 c02c784:	9b01      	ldr	r3, [sp, #4]
 c02c786:	4a1c      	ldr	r2, [pc, #112]	; (c02c7f8 <psa_cipher_setup+0x160>)
 c02c788:	681b      	ldr	r3, [r3, #0]
 c02c78a:	4293      	cmp	r3, r2
 c02c78c:	d025      	beq.n	c02c7da <psa_cipher_setup+0x142>
 c02c78e:	3201      	adds	r2, #1
 c02c790:	4293      	cmp	r3, r2
 c02c792:	d020      	beq.n	c02c7d6 <psa_cipher_setup+0x13e>
 c02c794:	3201      	adds	r2, #1
 c02c796:	4293      	cmp	r3, r2
 c02c798:	d01f      	beq.n	c02c7da <psa_cipher_setup+0x142>
 c02c79a:	3201      	adds	r2, #1
 c02c79c:	1a9a      	subs	r2, r3, r2
 c02c79e:	4253      	negs	r3, r2
 c02c7a0:	4153      	adcs	r3, r2
 c02c7a2:	7163      	strb	r3, [r4, #5]
        status = mbedtls_to_psa_error( ret );
 c02c7a4:	4630      	mov	r0, r6
 c02c7a6:	f7fd fd83 	bl	c02a2b0 <mbedtls_to_psa_error>
    if( status != 0 )
 c02c7aa:	4606      	mov	r6, r0
 c02c7ac:	2800      	cmp	r0, #0
 c02c7ae:	d08d      	beq.n	c02c6cc <psa_cipher_setup+0x34>
 c02c7b0:	e017      	b.n	c02c7e2 <psa_cipher_setup+0x14a>
            ret = mbedtls_cipher_set_padding_mode( &operation->ctx.cipher,
 c02c7b2:	2104      	movs	r1, #4
            ret = mbedtls_cipher_set_padding_mode( &operation->ctx.cipher,
 c02c7b4:	4648      	mov	r0, r9
 c02c7b6:	f7fa faa7 	bl	c026d08 <mbedtls_cipher_set_padding_mode>
    if( ret != 0 )
 c02c7ba:	b9c8      	cbnz	r0, c02c7f0 <psa_cipher_setup+0x158>
    operation->key_set = 1;
 c02c7bc:	7923      	ldrb	r3, [r4, #4]
 c02c7be:	f043 0301 	orr.w	r3, r3, #1
 c02c7c2:	7123      	strb	r3, [r4, #4]
 c02c7c4:	e7cc      	b.n	c02c760 <psa_cipher_setup+0xc8>
            ret = mbedtls_cipher_set_padding_mode( &operation->ctx.cipher,
 c02c7c6:	4601      	mov	r1, r0
 c02c7c8:	e7f4      	b.n	c02c7b4 <psa_cipher_setup+0x11c>
    operation->block_size = ( PSA_ALG_IS_STREAM_CIPHER( alg ) ? 1 :
 c02c7ca:	2301      	movs	r3, #1
 c02c7cc:	e7d7      	b.n	c02c77e <psa_cipher_setup+0xe6>
 c02c7ce:	2308      	movs	r3, #8
 c02c7d0:	e7d5      	b.n	c02c77e <psa_cipher_setup+0xe6>
 c02c7d2:	2310      	movs	r3, #16
 c02c7d4:	e7d3      	b.n	c02c77e <psa_cipher_setup+0xe6>
        operation->iv_size = PSA_BLOCK_CIPHER_BLOCK_SIZE( slot->type );
 c02c7d6:	2308      	movs	r3, #8
 c02c7d8:	e7e3      	b.n	c02c7a2 <psa_cipher_setup+0x10a>
 c02c7da:	2310      	movs	r3, #16
 c02c7dc:	e7e1      	b.n	c02c7a2 <psa_cipher_setup+0x10a>
        status = PSA_ERROR_NOT_SUPPORTED;
 c02c7de:	f06f 0685 	mvn.w	r6, #133	; 0x85
        psa_cipher_abort( operation );
 c02c7e2:	4620      	mov	r0, r4
 c02c7e4:	f7ff ff3c 	bl	c02c660 <mbedcrypto__psa_cipher_abort>
 c02c7e8:	e770      	b.n	c02c6cc <psa_cipher_setup+0x34>
        return( PSA_ERROR_BAD_STATE );
 c02c7ea:	f06f 0688 	mvn.w	r6, #136	; 0x88
 c02c7ee:	e76d      	b.n	c02c6cc <psa_cipher_setup+0x34>
    if( ret != 0 )
 c02c7f0:	4606      	mov	r6, r0
 c02c7f2:	e7d7      	b.n	c02c7a4 <psa_cipher_setup+0x10c>
 c02c7f4:	04600100 	.word	0x04600100
 c02c7f8:	40000001 	.word	0x40000001

0c02c7fc <mbedcrypto__psa_cipher_encrypt_setup>:
    return( psa_cipher_setup( operation, handle, alg, MBEDTLS_ENCRYPT ) );
 c02c7fc:	2301      	movs	r3, #1
 c02c7fe:	f7ff bf4b 	b.w	c02c698 <psa_cipher_setup>

0c02c802 <mbedcrypto__psa_cipher_decrypt_setup>:
    return( psa_cipher_setup( operation, handle, alg, MBEDTLS_DECRYPT ) );
 c02c802:	2300      	movs	r3, #0
 c02c804:	f7ff bf48 	b.w	c02c698 <psa_cipher_setup>

0c02c808 <mbedcrypto__psa_cipher_set_iv>:
{
 c02c808:	b538      	push	{r3, r4, r5, lr}
 c02c80a:	4604      	mov	r4, r0
    if( operation->iv_set || ! operation->iv_required )
 c02c80c:	7923      	ldrb	r3, [r4, #4]
 c02c80e:	f003 0306 	and.w	r3, r3, #6
 c02c812:	2b02      	cmp	r3, #2
 c02c814:	d116      	bne.n	c02c844 <mbedcrypto__psa_cipher_set_iv+0x3c>
    if( iv_length != operation->iv_size )
 c02c816:	7963      	ldrb	r3, [r4, #5]
 c02c818:	4293      	cmp	r3, r2
 c02c81a:	d10d      	bne.n	c02c838 <mbedcrypto__psa_cipher_set_iv+0x30>
    ret = mbedtls_cipher_set_iv( &operation->ctx.cipher, iv, iv_length );
 c02c81c:	f104 0008 	add.w	r0, r4, #8
 c02c820:	f7fa f8f2 	bl	c026a08 <mbedtls_cipher_set_iv>
    status = mbedtls_to_psa_error( ret );
 c02c824:	f7fd fd44 	bl	c02a2b0 <mbedtls_to_psa_error>
    if( status == PSA_SUCCESS )
 c02c828:	4605      	mov	r5, r0
 c02c82a:	b938      	cbnz	r0, c02c83c <mbedcrypto__psa_cipher_set_iv+0x34>
        operation->iv_set = 1;
 c02c82c:	7923      	ldrb	r3, [r4, #4]
 c02c82e:	f043 0304 	orr.w	r3, r3, #4
 c02c832:	7123      	strb	r3, [r4, #4]
}
 c02c834:	4628      	mov	r0, r5
 c02c836:	bd38      	pop	{r3, r4, r5, pc}
        status = PSA_ERROR_INVALID_ARGUMENT;
 c02c838:	f06f 0586 	mvn.w	r5, #134	; 0x86
        psa_cipher_abort( operation );
 c02c83c:	4620      	mov	r0, r4
 c02c83e:	f7ff ff0f 	bl	c02c660 <mbedcrypto__psa_cipher_abort>
 c02c842:	e7f7      	b.n	c02c834 <mbedcrypto__psa_cipher_set_iv+0x2c>
        return( PSA_ERROR_BAD_STATE );
 c02c844:	f06f 0588 	mvn.w	r5, #136	; 0x88
 c02c848:	e7f4      	b.n	c02c834 <mbedcrypto__psa_cipher_set_iv+0x2c>
	...

0c02c84c <mbedcrypto__psa_cipher_generate_iv>:
{
 c02c84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c02c84e:	4605      	mov	r5, r0
    if( operation->iv_set || ! operation->iv_required )
 c02c850:	7900      	ldrb	r0, [r0, #4]
{
 c02c852:	460c      	mov	r4, r1
    if( operation->iv_set || ! operation->iv_required )
 c02c854:	f000 0006 	and.w	r0, r0, #6
 c02c858:	2802      	cmp	r0, #2
{
 c02c85a:	4617      	mov	r7, r2
 c02c85c:	461e      	mov	r6, r3
    if( operation->iv_set || ! operation->iv_required )
 c02c85e:	d119      	bne.n	c02c894 <mbedcrypto__psa_cipher_generate_iv+0x48>
    if( iv_size < operation->iv_size )
 c02c860:	796a      	ldrb	r2, [r5, #5]
 c02c862:	42ba      	cmp	r2, r7
 c02c864:	d810      	bhi.n	c02c888 <mbedcrypto__psa_cipher_generate_iv+0x3c>
    ret = mbedtls_ctr_drbg_random( &global_data.ctr_drbg,
 c02c866:	480d      	ldr	r0, [pc, #52]	; (c02c89c <mbedcrypto__psa_cipher_generate_iv+0x50>)
 c02c868:	f7fa fe5c 	bl	c027524 <mbedtls_ctr_drbg_random>
    if( ret != 0 )
 c02c86c:	b128      	cbz	r0, c02c87a <mbedcrypto__psa_cipher_generate_iv+0x2e>
        status = mbedtls_to_psa_error( ret );
 c02c86e:	f7fd fd1f 	bl	c02a2b0 <mbedtls_to_psa_error>
    status = psa_cipher_set_iv( operation, iv, *iv_length );
 c02c872:	4604      	mov	r4, r0
    if( status != PSA_SUCCESS )
 c02c874:	b950      	cbnz	r0, c02c88c <mbedcrypto__psa_cipher_generate_iv+0x40>
}
 c02c876:	4620      	mov	r0, r4
 c02c878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *iv_length = operation->iv_size;
 c02c87a:	796a      	ldrb	r2, [r5, #5]
    status = psa_cipher_set_iv( operation, iv, *iv_length );
 c02c87c:	4621      	mov	r1, r4
    *iv_length = operation->iv_size;
 c02c87e:	6032      	str	r2, [r6, #0]
    status = psa_cipher_set_iv( operation, iv, *iv_length );
 c02c880:	4628      	mov	r0, r5
 c02c882:	f7ff ffc1 	bl	c02c808 <mbedcrypto__psa_cipher_set_iv>
 c02c886:	e7f4      	b.n	c02c872 <mbedcrypto__psa_cipher_generate_iv+0x26>
        status = PSA_ERROR_BUFFER_TOO_SMALL;
 c02c888:	f06f 0489 	mvn.w	r4, #137	; 0x89
        psa_cipher_abort( operation );
 c02c88c:	4628      	mov	r0, r5
 c02c88e:	f7ff fee7 	bl	c02c660 <mbedcrypto__psa_cipher_abort>
 c02c892:	e7f0      	b.n	c02c876 <mbedcrypto__psa_cipher_generate_iv+0x2a>
        return( PSA_ERROR_BAD_STATE );
 c02c894:	f06f 0488 	mvn.w	r4, #136	; 0x88
 c02c898:	e7ed      	b.n	c02c876 <mbedcrypto__psa_cipher_generate_iv+0x2a>
 c02c89a:	bf00      	nop
 c02c89c:	300360c0 	.word	0x300360c0

0c02c8a0 <mbedcrypto__psa_cipher_update>:
{
 c02c8a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c02c8a2:	4604      	mov	r4, r0
    if( operation->alg == 0 )
 c02c8a4:	6800      	ldr	r0, [r0, #0]
 c02c8a6:	b310      	cbz	r0, c02c8ee <mbedcrypto__psa_cipher_update+0x4e>
    if( ! PSA_ALG_IS_STREAM_CIPHER( operation->alg ) )
 c02c8a8:	f000 40ff 	and.w	r0, r0, #2139095040	; 0x7f800000
 c02c8ac:	f1b0 6f90 	cmp.w	r0, #75497472	; 0x4800000
            ( operation->ctx.cipher.unprocessed_len + input_length )
 c02c8b0:	bf1f      	itttt	ne
 c02c8b2:	6ae5      	ldrne	r5, [r4, #44]	; 0x2c
            / operation->block_size * operation->block_size;
 c02c8b4:	79a0      	ldrbne	r0, [r4, #6]
            ( operation->ctx.cipher.unprocessed_len + input_length )
 c02c8b6:	18ad      	addne	r5, r5, r2
            / operation->block_size * operation->block_size;
 c02c8b8:	fbb5 f5f0 	udivne	r5, r5, r0
        expected_output_size = input_length;
 c02c8bc:	bf0c      	ite	eq
 c02c8be:	4610      	moveq	r0, r2
        expected_output_size =
 c02c8c0:	4368      	mulne	r0, r5
    if( output_size < expected_output_size )
 c02c8c2:	9d06      	ldr	r5, [sp, #24]
 c02c8c4:	42a8      	cmp	r0, r5
 c02c8c6:	d80c      	bhi.n	c02c8e2 <mbedcrypto__psa_cipher_update+0x42>
    ret = mbedtls_cipher_update( &operation->ctx.cipher, input,
 c02c8c8:	9807      	ldr	r0, [sp, #28]
 c02c8ca:	9000      	str	r0, [sp, #0]
 c02c8cc:	f104 0008 	add.w	r0, r4, #8
 c02c8d0:	f7fa f8c6 	bl	c026a60 <mbedtls_cipher_update>
    status = mbedtls_to_psa_error( ret );
 c02c8d4:	f7fd fcec 	bl	c02a2b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c02c8d8:	4605      	mov	r5, r0
 c02c8da:	b920      	cbnz	r0, c02c8e6 <mbedcrypto__psa_cipher_update+0x46>
}
 c02c8dc:	4628      	mov	r0, r5
 c02c8de:	b003      	add	sp, #12
 c02c8e0:	bd30      	pop	{r4, r5, pc}
        status = PSA_ERROR_BUFFER_TOO_SMALL;
 c02c8e2:	f06f 0589 	mvn.w	r5, #137	; 0x89
        psa_cipher_abort( operation );
 c02c8e6:	4620      	mov	r0, r4
 c02c8e8:	f7ff feba 	bl	c02c660 <mbedcrypto__psa_cipher_abort>
 c02c8ec:	e7f6      	b.n	c02c8dc <mbedcrypto__psa_cipher_update+0x3c>
        return( PSA_ERROR_BAD_STATE );
 c02c8ee:	f06f 0588 	mvn.w	r5, #136	; 0x88
 c02c8f2:	e7f3      	b.n	c02c8dc <mbedcrypto__psa_cipher_update+0x3c>

0c02c8f4 <mbedcrypto__psa_cipher_finish>:
{
 c02c8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02c8f6:	4617      	mov	r7, r2
    if( ! operation->key_set )
 c02c8f8:	7902      	ldrb	r2, [r0, #4]
{
 c02c8fa:	461e      	mov	r6, r3
    if( ! operation->key_set )
 c02c8fc:	07d3      	lsls	r3, r2, #31
{
 c02c8fe:	b085      	sub	sp, #20
 c02c900:	4604      	mov	r4, r0
 c02c902:	460d      	mov	r5, r1
    if( ! operation->key_set )
 c02c904:	d53a      	bpl.n	c02c97c <mbedcrypto__psa_cipher_finish+0x88>
    if( operation->iv_required && ! operation->iv_set )
 c02c906:	f002 0206 	and.w	r2, r2, #6
 c02c90a:	2a02      	cmp	r2, #2
 c02c90c:	d036      	beq.n	c02c97c <mbedcrypto__psa_cipher_finish+0x88>
    if( operation->ctx.cipher.operation == MBEDTLS_ENCRYPT &&
 c02c90e:	f990 3010 	ldrsb.w	r3, [r0, #16]
 c02c912:	2b01      	cmp	r3, #1
 c02c914:	d105      	bne.n	c02c922 <mbedcrypto__psa_cipher_finish+0x2e>
 c02c916:	6802      	ldr	r2, [r0, #0]
 c02c918:	4b1a      	ldr	r3, [pc, #104]	; (c02c984 <mbedcrypto__psa_cipher_finish+0x90>)
 c02c91a:	429a      	cmp	r2, r3
 c02c91c:	d101      	bne.n	c02c922 <mbedcrypto__psa_cipher_finish+0x2e>
        operation->alg == PSA_ALG_CBC_NO_PADDING &&
 c02c91e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 c02c920:	bb33      	cbnz	r3, c02c970 <mbedcrypto__psa_cipher_finish+0x7c>
    cipher_ret = mbedtls_cipher_finish( &operation->ctx.cipher,
 c02c922:	4632      	mov	r2, r6
 c02c924:	4669      	mov	r1, sp
 c02c926:	f104 0008 	add.w	r0, r4, #8
 c02c92a:	f7fa f98b 	bl	c026c44 <mbedtls_cipher_finish>
    if( cipher_ret != 0 )
 c02c92e:	b160      	cbz	r0, c02c94a <mbedcrypto__psa_cipher_finish+0x56>
        status = mbedtls_to_psa_error( cipher_ret );
 c02c930:	f7fd fcbe 	bl	c02a2b0 <mbedtls_to_psa_error>
 c02c934:	4605      	mov	r5, r0
    *output_length = 0;
 c02c936:	2300      	movs	r3, #0
    mbedtls_platform_zeroize( temp_output_buffer, sizeof( temp_output_buffer ) );
 c02c938:	4668      	mov	r0, sp
    *output_length = 0;
 c02c93a:	6033      	str	r3, [r6, #0]
    mbedtls_platform_zeroize( temp_output_buffer, sizeof( temp_output_buffer ) );
 c02c93c:	2110      	movs	r1, #16
 c02c93e:	f7fd fcaf 	bl	c02a2a0 <mbedtls_platform_zeroize>
    (void) psa_cipher_abort( operation );
 c02c942:	4620      	mov	r0, r4
 c02c944:	f7ff fe8c 	bl	c02c660 <mbedcrypto__psa_cipher_abort>
    return( status );
 c02c948:	e00f      	b.n	c02c96a <mbedcrypto__psa_cipher_finish+0x76>
    if( *output_length == 0 )
 c02c94a:	6832      	ldr	r2, [r6, #0]
 c02c94c:	b12a      	cbz	r2, c02c95a <mbedcrypto__psa_cipher_finish+0x66>
    else if( output_size >= *output_length )
 c02c94e:	42ba      	cmp	r2, r7
 c02c950:	d811      	bhi.n	c02c976 <mbedcrypto__psa_cipher_finish+0x82>
        memcpy( output, temp_output_buffer, *output_length );
 c02c952:	4669      	mov	r1, sp
 c02c954:	4628      	mov	r0, r5
 c02c956:	f7eb f812 	bl	c01797e <memcpy>
    mbedtls_platform_zeroize( temp_output_buffer, sizeof( temp_output_buffer ) );
 c02c95a:	2110      	movs	r1, #16
 c02c95c:	4668      	mov	r0, sp
 c02c95e:	f7fd fc9f 	bl	c02a2a0 <mbedtls_platform_zeroize>
    status = psa_cipher_abort( operation );
 c02c962:	4620      	mov	r0, r4
 c02c964:	f7ff fe7c 	bl	c02c660 <mbedcrypto__psa_cipher_abort>
 c02c968:	4605      	mov	r5, r0
}
 c02c96a:	4628      	mov	r0, r5
 c02c96c:	b005      	add	sp, #20
 c02c96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            status = PSA_ERROR_INVALID_ARGUMENT;
 c02c970:	f06f 0586 	mvn.w	r5, #134	; 0x86
 c02c974:	e7df      	b.n	c02c936 <mbedcrypto__psa_cipher_finish+0x42>
        status = PSA_ERROR_BUFFER_TOO_SMALL;
 c02c976:	f06f 0589 	mvn.w	r5, #137	; 0x89
 c02c97a:	e7dc      	b.n	c02c936 <mbedcrypto__psa_cipher_finish+0x42>
        return( PSA_ERROR_BAD_STATE );
 c02c97c:	f06f 0588 	mvn.w	r5, #136	; 0x88
 c02c980:	e7f3      	b.n	c02c96a <mbedcrypto__psa_cipher_finish+0x76>
 c02c982:	bf00      	nop
 c02c984:	04600100 	.word	0x04600100

0c02c988 <mbedcrypto__psa_set_key_policy>:
{
 c02c988:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( policy == NULL )
 c02c98a:	460c      	mov	r4, r1
 c02c98c:	b921      	cbnz	r1, c02c998 <mbedcrypto__psa_set_key_policy+0x10>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02c98e:	f06f 0586 	mvn.w	r5, #134	; 0x86
}
 c02c992:	4628      	mov	r0, r5
 c02c994:	b003      	add	sp, #12
 c02c996:	bd30      	pop	{r4, r5, pc}
    status = psa_get_empty_key_slot( handle, &slot );
 c02c998:	a901      	add	r1, sp, #4
 c02c99a:	f7fd fe95 	bl	c02a6c8 <psa_get_empty_key_slot>
    if( status != PSA_SUCCESS )
 c02c99e:	4605      	mov	r5, r0
 c02c9a0:	2800      	cmp	r0, #0
 c02c9a2:	d1f6      	bne.n	c02c992 <mbedcrypto__psa_set_key_policy+0xa>
    if( ( policy->usage & ~( PSA_KEY_USAGE_EXPORT |
 c02c9a4:	6823      	ldr	r3, [r4, #0]
 c02c9a6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 c02c9aa:	f023 0301 	bic.w	r3, r3, #1
 c02c9ae:	2b00      	cmp	r3, #0
 c02c9b0:	d1ed      	bne.n	c02c98e <mbedcrypto__psa_set_key_policy+0x6>
    slot->policy = *policy;
 c02c9b2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 c02c9b6:	9b01      	ldr	r3, [sp, #4]
 c02c9b8:	3304      	adds	r3, #4
 c02c9ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return( PSA_SUCCESS );
 c02c9be:	e7e8      	b.n	c02c992 <mbedcrypto__psa_set_key_policy+0xa>

0c02c9c0 <mbedcrypto__psa_get_key_policy>:
{
 c02c9c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( policy == NULL )
 c02c9c2:	460c      	mov	r4, r1
 c02c9c4:	b169      	cbz	r1, c02c9e2 <mbedcrypto__psa_get_key_policy+0x22>
    status = psa_get_key_slot( handle, &slot );
 c02c9c6:	a901      	add	r1, sp, #4
 c02c9c8:	f000 fc82 	bl	c02d2d0 <psa_get_key_slot>
    if( status != PSA_SUCCESS )
 c02c9cc:	4605      	mov	r5, r0
 c02c9ce:	b928      	cbnz	r0, c02c9dc <mbedcrypto__psa_get_key_policy+0x1c>
    *policy = slot->policy;
 c02c9d0:	9b01      	ldr	r3, [sp, #4]
 c02c9d2:	3304      	adds	r3, #4
 c02c9d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 c02c9d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 c02c9dc:	4628      	mov	r0, r5
 c02c9de:	b003      	add	sp, #12
 c02c9e0:	bd30      	pop	{r4, r5, pc}
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02c9e2:	f06f 0586 	mvn.w	r5, #134	; 0x86
 c02c9e6:	e7f9      	b.n	c02c9dc <mbedcrypto__psa_get_key_policy+0x1c>

0c02c9e8 <mbedcrypto__psa_get_key_lifetime>:
{
 c02c9e8:	b513      	push	{r0, r1, r4, lr}
 c02c9ea:	460c      	mov	r4, r1
    status = psa_get_key_slot( handle, &slot );
 c02c9ec:	a901      	add	r1, sp, #4
 c02c9ee:	f000 fc6f 	bl	c02d2d0 <psa_get_key_slot>
    if( status != PSA_SUCCESS )
 c02c9f2:	b910      	cbnz	r0, c02c9fa <mbedcrypto__psa_get_key_lifetime+0x12>
    *lifetime = slot->lifetime;
 c02c9f4:	9b01      	ldr	r3, [sp, #4]
 c02c9f6:	691b      	ldr	r3, [r3, #16]
 c02c9f8:	6023      	str	r3, [r4, #0]
}
 c02c9fa:	b002      	add	sp, #8
 c02c9fc:	bd10      	pop	{r4, pc}
	...

0c02ca00 <mbedcrypto__psa_aead_encrypt>:
{
 c02ca00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02ca04:	4698      	mov	r8, r3
    *ciphertext_length = 0;
 c02ca06:	2300      	movs	r3, #0
{
 c02ca08:	b0dd      	sub	sp, #372	; 0x174
 c02ca0a:	ac69      	add	r4, sp, #420	; 0x1a4
 c02ca0c:	e894 0470 	ldmia.w	r4, {r4, r5, r6, sl}
 c02ca10:	468b      	mov	fp, r1
    *ciphertext_length = 0;
 c02ca12:	f8ca 3000 	str.w	r3, [sl]
{
 c02ca16:	4617      	mov	r7, r2
    status = psa_get_key_from_slot( handle, &operation->slot, usage, alg );
 c02ca18:	460b      	mov	r3, r1
 c02ca1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 c02ca1e:	a908      	add	r1, sp, #32
 c02ca20:	f7fd ff9c 	bl	c02a95c <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c02ca24:	4681      	mov	r9, r0
 c02ca26:	2800      	cmp	r0, #0
 c02ca28:	d134      	bne.n	c02ca94 <mbedcrypto__psa_aead_encrypt+0x94>
 c02ca2a:	4659      	mov	r1, fp
 c02ca2c:	a808      	add	r0, sp, #32
 c02ca2e:	f7fe f8e1 	bl	c02abf4 <psa_aead_setup.part.6>
    if( status != PSA_SUCCESS )
 c02ca32:	4681      	mov	r9, r0
 c02ca34:	bb70      	cbnz	r0, c02ca94 <mbedcrypto__psa_aead_encrypt+0x94>
    if( ciphertext_size < ( plaintext_length + operation.tag_length ) )
 c02ca36:	f89d 316d 	ldrb.w	r3, [sp, #365]	; 0x16d
 c02ca3a:	191a      	adds	r2, r3, r4
 c02ca3c:	42b2      	cmp	r2, r6
 c02ca3e:	d840      	bhi.n	c02cac2 <mbedcrypto__psa_aead_encrypt+0xc2>
    if( operation.core_alg == PSA_ALG_GCM )
 c02ca40:	995a      	ldr	r1, [sp, #360]	; 0x168
 c02ca42:	4823      	ldr	r0, [pc, #140]	; (c02cad0 <mbedcrypto__psa_aead_encrypt+0xd0>)
    tag = ciphertext + plaintext_length;
 c02ca44:	192a      	adds	r2, r5, r4
    if( operation.core_alg == PSA_ALG_GCM )
 c02ca46:	4281      	cmp	r1, r0
 c02ca48:	d128      	bne.n	c02ca9c <mbedcrypto__psa_aead_encrypt+0x9c>
        status = mbedtls_to_psa_error(
 c02ca4a:	e9cd 3205 	strd	r3, r2, [sp, #20]
 c02ca4e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 c02ca50:	9504      	str	r5, [sp, #16]
 c02ca52:	9303      	str	r3, [sp, #12]
 c02ca54:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 c02ca56:	4622      	mov	r2, r4
 c02ca58:	9302      	str	r3, [sp, #8]
 c02ca5a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 c02ca5c:	2101      	movs	r1, #1
 c02ca5e:	e9cd 8300 	strd	r8, r3, [sp]
 c02ca62:	a80a      	add	r0, sp, #40	; 0x28
 c02ca64:	463b      	mov	r3, r7
 c02ca66:	f7f2 f880 	bl	c01eb6a <mbedtls_gcm_crypt_and_tag>
        status = mbedtls_to_psa_error(
 c02ca6a:	f7fd fc21 	bl	c02a2b0 <mbedtls_to_psa_error>
 c02ca6e:	4681      	mov	r9, r0
    if( status != PSA_SUCCESS && ciphertext_size != 0 )
 c02ca70:	b128      	cbz	r0, c02ca7e <mbedcrypto__psa_aead_encrypt+0x7e>
 c02ca72:	b126      	cbz	r6, c02ca7e <mbedcrypto__psa_aead_encrypt+0x7e>
        memset( ciphertext, 0, ciphertext_size );
 c02ca74:	4632      	mov	r2, r6
 c02ca76:	2100      	movs	r1, #0
 c02ca78:	4628      	mov	r0, r5
 c02ca7a:	f7ea ffa4 	bl	c0179c6 <memset>
    psa_aead_abort( &operation );
 c02ca7e:	a808      	add	r0, sp, #32
 c02ca80:	f7fd fed4 	bl	c02a82c <psa_aead_abort>
    if( status == PSA_SUCCESS )
 c02ca84:	f1b9 0f00 	cmp.w	r9, #0
 c02ca88:	d104      	bne.n	c02ca94 <mbedcrypto__psa_aead_encrypt+0x94>
        *ciphertext_length = plaintext_length + operation.tag_length;
 c02ca8a:	f89d 216d 	ldrb.w	r2, [sp, #365]	; 0x16d
 c02ca8e:	4414      	add	r4, r2
 c02ca90:	f8ca 4000 	str.w	r4, [sl]
}
 c02ca94:	4648      	mov	r0, r9
 c02ca96:	b05d      	add	sp, #372	; 0x174
 c02ca98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( operation.core_alg == PSA_ALG_CCM )
 c02ca9c:	480d      	ldr	r0, [pc, #52]	; (c02cad4 <mbedcrypto__psa_aead_encrypt+0xd4>)
 c02ca9e:	4281      	cmp	r1, r0
 c02caa0:	d112      	bne.n	c02cac8 <mbedcrypto__psa_aead_encrypt+0xc8>
        status = mbedtls_to_psa_error(
 c02caa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 c02caa6:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 c02caa8:	9503      	str	r5, [sp, #12]
 c02caaa:	9302      	str	r3, [sp, #8]
 c02caac:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 c02caae:	463a      	mov	r2, r7
 c02cab0:	9301      	str	r3, [sp, #4]
 c02cab2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 c02cab4:	4621      	mov	r1, r4
 c02cab6:	9300      	str	r3, [sp, #0]
 c02cab8:	a80a      	add	r0, sp, #40	; 0x28
 c02caba:	4643      	mov	r3, r8
 c02cabc:	f7f0 f908 	bl	c01ccd0 <mbedtls_ccm_encrypt_and_tag>
 c02cac0:	e7d3      	b.n	c02ca6a <mbedcrypto__psa_aead_encrypt+0x6a>
        status = PSA_ERROR_BUFFER_TOO_SMALL;
 c02cac2:	f06f 0989 	mvn.w	r9, #137	; 0x89
 c02cac6:	e7da      	b.n	c02ca7e <mbedcrypto__psa_aead_encrypt+0x7e>
        return( PSA_ERROR_NOT_SUPPORTED );
 c02cac8:	f06f 0985 	mvn.w	r9, #133	; 0x85
 c02cacc:	e7e2      	b.n	c02ca94 <mbedcrypto__psa_aead_encrypt+0x94>
 c02cace:	bf00      	nop
 c02cad0:	06001002 	.word	0x06001002
 c02cad4:	06001001 	.word	0x06001001

0c02cad8 <mbedcrypto__psa_aead_decrypt>:
{
 c02cad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02cadc:	4699      	mov	r9, r3
    *plaintext_length = 0;
 c02cade:	2300      	movs	r3, #0
{
 c02cae0:	b0db      	sub	sp, #364	; 0x16c
 c02cae2:	4690      	mov	r8, r2
    *plaintext_length = 0;
 c02cae4:	9a6a      	ldr	r2, [sp, #424]	; 0x1a8
{
 c02cae6:	468b      	mov	fp, r1
    *plaintext_length = 0;
 c02cae8:	6013      	str	r3, [r2, #0]
    status = psa_get_key_from_slot( handle, &operation->slot, usage, alg );
 c02caea:	460b      	mov	r3, r1
 c02caec:	f44f 7200 	mov.w	r2, #512	; 0x200
 c02caf0:	a906      	add	r1, sp, #24
{
 c02caf2:	9d66      	ldr	r5, [sp, #408]	; 0x198
 c02caf4:	9c67      	ldr	r4, [sp, #412]	; 0x19c
 c02caf6:	9f68      	ldr	r7, [sp, #416]	; 0x1a0
 c02caf8:	9e69      	ldr	r6, [sp, #420]	; 0x1a4
    status = psa_get_key_from_slot( handle, &operation->slot, usage, alg );
 c02cafa:	f7fd ff2f 	bl	c02a95c <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c02cafe:	4682      	mov	sl, r0
 c02cb00:	2800      	cmp	r0, #0
 c02cb02:	d133      	bne.n	c02cb6c <mbedcrypto__psa_aead_decrypt+0x94>
 c02cb04:	4659      	mov	r1, fp
 c02cb06:	a806      	add	r0, sp, #24
 c02cb08:	f7fe f874 	bl	c02abf4 <psa_aead_setup.part.6>
    if( status != PSA_SUCCESS )
 c02cb0c:	4682      	mov	sl, r0
 c02cb0e:	bb68      	cbnz	r0, c02cb6c <mbedcrypto__psa_aead_decrypt+0x94>
    if( operation.core_alg == PSA_ALG_GCM )
 c02cb10:	9b58      	ldr	r3, [sp, #352]	; 0x160
 c02cb12:	4a29      	ldr	r2, [pc, #164]	; (c02cbb8 <mbedcrypto__psa_aead_decrypt+0xe0>)
 c02cb14:	4293      	cmp	r3, r2
 c02cb16:	d12d      	bne.n	c02cb74 <mbedcrypto__psa_aead_decrypt+0x9c>
        status = psa_aead_unpadded_locate_tag( operation.tag_length,
 c02cb18:	f89d 3165 	ldrb.w	r3, [sp, #357]	; 0x165
    if( tag_length > ciphertext_length )
 c02cb1c:	42a3      	cmp	r3, r4
 c02cb1e:	d842      	bhi.n	c02cba6 <mbedcrypto__psa_aead_decrypt+0xce>
    payload_length = ciphertext_length - tag_length;
 c02cb20:	1ae1      	subs	r1, r4, r3
    if( payload_length > plaintext_size )
 c02cb22:	428e      	cmp	r6, r1
 c02cb24:	d342      	bcc.n	c02cbac <mbedcrypto__psa_aead_decrypt+0xd4>
        status = mbedtls_to_psa_error(
 c02cb26:	9303      	str	r3, [sp, #12]
 c02cb28:	9b65      	ldr	r3, [sp, #404]	; 0x194
 c02cb2a:	e9cd 5704 	strd	r5, r7, [sp, #16]
 c02cb2e:	9301      	str	r3, [sp, #4]
 c02cb30:	9b64      	ldr	r3, [sp, #400]	; 0x190
    *p_tag = ciphertext + payload_length;
 c02cb32:	440d      	add	r5, r1
        status = mbedtls_to_psa_error(
 c02cb34:	9300      	str	r3, [sp, #0]
 c02cb36:	9502      	str	r5, [sp, #8]
 c02cb38:	464b      	mov	r3, r9
 c02cb3a:	4642      	mov	r2, r8
 c02cb3c:	a808      	add	r0, sp, #32
 c02cb3e:	f7f2 f837 	bl	c01ebb0 <mbedtls_gcm_auth_decrypt>
        status = mbedtls_to_psa_error(
 c02cb42:	f7fd fbb5 	bl	c02a2b0 <mbedtls_to_psa_error>
 c02cb46:	4682      	mov	sl, r0
    if( status != PSA_SUCCESS && plaintext_size != 0 )
 c02cb48:	b128      	cbz	r0, c02cb56 <mbedcrypto__psa_aead_decrypt+0x7e>
 c02cb4a:	b126      	cbz	r6, c02cb56 <mbedcrypto__psa_aead_decrypt+0x7e>
        memset( plaintext, 0, plaintext_size );
 c02cb4c:	4632      	mov	r2, r6
 c02cb4e:	2100      	movs	r1, #0
 c02cb50:	4638      	mov	r0, r7
 c02cb52:	f7ea ff38 	bl	c0179c6 <memset>
    psa_aead_abort( &operation );
 c02cb56:	a806      	add	r0, sp, #24
 c02cb58:	f7fd fe68 	bl	c02a82c <psa_aead_abort>
    if( status == PSA_SUCCESS )
 c02cb5c:	f1ba 0f00 	cmp.w	sl, #0
 c02cb60:	d104      	bne.n	c02cb6c <mbedcrypto__psa_aead_decrypt+0x94>
        *plaintext_length = ciphertext_length - operation.tag_length;
 c02cb62:	f89d 2165 	ldrb.w	r2, [sp, #357]	; 0x165
 c02cb66:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 c02cb68:	1aa4      	subs	r4, r4, r2
 c02cb6a:	601c      	str	r4, [r3, #0]
}
 c02cb6c:	4650      	mov	r0, sl
 c02cb6e:	b05b      	add	sp, #364	; 0x16c
 c02cb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( operation.core_alg == PSA_ALG_CCM )
 c02cb74:	4a11      	ldr	r2, [pc, #68]	; (c02cbbc <mbedcrypto__psa_aead_decrypt+0xe4>)
 c02cb76:	4293      	cmp	r3, r2
 c02cb78:	d11b      	bne.n	c02cbb2 <mbedcrypto__psa_aead_decrypt+0xda>
        status = psa_aead_unpadded_locate_tag( operation.tag_length,
 c02cb7a:	f89d 3165 	ldrb.w	r3, [sp, #357]	; 0x165
    if( tag_length > ciphertext_length )
 c02cb7e:	42a3      	cmp	r3, r4
 c02cb80:	d811      	bhi.n	c02cba6 <mbedcrypto__psa_aead_decrypt+0xce>
    payload_length = ciphertext_length - tag_length;
 c02cb82:	1ae1      	subs	r1, r4, r3
    if( payload_length > plaintext_size )
 c02cb84:	428e      	cmp	r6, r1
 c02cb86:	d311      	bcc.n	c02cbac <mbedcrypto__psa_aead_decrypt+0xd4>
        status = mbedtls_to_psa_error(
 c02cb88:	9305      	str	r3, [sp, #20]
    *p_tag = ciphertext + payload_length;
 c02cb8a:	186b      	adds	r3, r5, r1
        status = mbedtls_to_psa_error(
 c02cb8c:	e9cd 7303 	strd	r7, r3, [sp, #12]
 c02cb90:	9b65      	ldr	r3, [sp, #404]	; 0x194
 c02cb92:	9502      	str	r5, [sp, #8]
 c02cb94:	9301      	str	r3, [sp, #4]
 c02cb96:	9b64      	ldr	r3, [sp, #400]	; 0x190
 c02cb98:	4642      	mov	r2, r8
 c02cb9a:	9300      	str	r3, [sp, #0]
 c02cb9c:	a808      	add	r0, sp, #32
 c02cb9e:	464b      	mov	r3, r9
 c02cba0:	f7f0 f8ce 	bl	c01cd40 <mbedtls_ccm_auth_decrypt>
 c02cba4:	e7cd      	b.n	c02cb42 <mbedcrypto__psa_aead_decrypt+0x6a>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02cba6:	f06f 0a86 	mvn.w	sl, #134	; 0x86
 c02cbaa:	e7d4      	b.n	c02cb56 <mbedcrypto__psa_aead_decrypt+0x7e>
        return( PSA_ERROR_BUFFER_TOO_SMALL );
 c02cbac:	f06f 0a89 	mvn.w	sl, #137	; 0x89
 c02cbb0:	e7d1      	b.n	c02cb56 <mbedcrypto__psa_aead_decrypt+0x7e>
        return( PSA_ERROR_NOT_SUPPORTED );
 c02cbb2:	f06f 0a85 	mvn.w	sl, #133	; 0x85
 c02cbb6:	e7d9      	b.n	c02cb6c <mbedcrypto__psa_aead_decrypt+0x94>
 c02cbb8:	06001002 	.word	0x06001002
 c02cbbc:	06001001 	.word	0x06001001

0c02cbc0 <mbedcrypto__psa_generator_abort>:
{
 c02cbc0:	b538      	push	{r3, r4, r5, lr}
    if( generator->alg == 0 )
 c02cbc2:	6803      	ldr	r3, [r0, #0]
{
 c02cbc4:	4604      	mov	r4, r0
    if( generator->alg == 0 )
 c02cbc6:	b943      	cbnz	r3, c02cbda <mbedcrypto__psa_generator_abort+0x1a>
    psa_status_t status = PSA_SUCCESS;
 c02cbc8:	2500      	movs	r5, #0
    memset( generator, 0, sizeof( *generator ) );
 c02cbca:	f44f 7224 	mov.w	r2, #656	; 0x290
 c02cbce:	2100      	movs	r1, #0
 c02cbd0:	4620      	mov	r0, r4
 c02cbd2:	f7ea fef8 	bl	c0179c6 <memset>
}
 c02cbd6:	4628      	mov	r0, r5
 c02cbd8:	bd38      	pop	{r3, r4, r5, pc}
    if( generator->alg == PSA_ALG_SELECT_RAW )
 c02cbda:	4a1a      	ldr	r2, [pc, #104]	; (c02cc44 <mbedcrypto__psa_generator_abort+0x84>)
 c02cbdc:	4293      	cmp	r3, r2
 c02cbde:	d109      	bne.n	c02cbf4 <mbedcrypto__psa_generator_abort+0x34>
        if( generator->ctx.buffer.data != NULL )
 c02cbe0:	6880      	ldr	r0, [r0, #8]
 c02cbe2:	2800      	cmp	r0, #0
 c02cbe4:	d0f0      	beq.n	c02cbc8 <mbedcrypto__psa_generator_abort+0x8>
            mbedtls_platform_zeroize( generator->ctx.buffer.data,
 c02cbe6:	68e1      	ldr	r1, [r4, #12]
 c02cbe8:	f7fd fb5a 	bl	c02a2a0 <mbedtls_platform_zeroize>
            mbedtls_free( generator->ctx.buffer.data );
 c02cbec:	68a0      	ldr	r0, [r4, #8]
 c02cbee:	f7fd fb47 	bl	c02a280 <mbedtls_free>
 c02cbf2:	e7e9      	b.n	c02cbc8 <mbedcrypto__psa_generator_abort+0x8>
    if( PSA_ALG_IS_HKDF( generator->alg ) )
 c02cbf4:	4a14      	ldr	r2, [pc, #80]	; (c02cc48 <mbedcrypto__psa_generator_abort+0x88>)
 c02cbf6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 c02cbfa:	4291      	cmp	r1, r2
 c02cbfc:	d108      	bne.n	c02cc10 <mbedcrypto__psa_generator_abort+0x50>
        mbedtls_free( generator->ctx.hkdf.info );
 c02cbfe:	6880      	ldr	r0, [r0, #8]
 c02cc00:	f7fd fb3e 	bl	c02a280 <mbedtls_free>
        status = psa_hmac_abort_internal( &generator->ctx.hkdf.hmac );
 c02cc04:	f104 0010 	add.w	r0, r4, #16
 c02cc08:	f7fe fc06 	bl	c02b418 <psa_hmac_abort_internal>
 c02cc0c:	4605      	mov	r5, r0
 c02cc0e:	e7dc      	b.n	c02cbca <mbedcrypto__psa_generator_abort+0xa>
    else if( PSA_ALG_IS_TLS12_PRF( generator->alg ) ||
 c02cc10:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 c02cc14:	4a0d      	ldr	r2, [pc, #52]	; (c02cc4c <mbedcrypto__psa_generator_abort+0x8c>)
 c02cc16:	f023 0301 	bic.w	r3, r3, #1
 c02cc1a:	4293      	cmp	r3, r2
 c02cc1c:	d10f      	bne.n	c02cc3e <mbedcrypto__psa_generator_abort+0x7e>
        if( generator->ctx.tls12_prf.key != NULL )
 c02cc1e:	6880      	ldr	r0, [r0, #8]
 c02cc20:	b128      	cbz	r0, c02cc2e <mbedcrypto__psa_generator_abort+0x6e>
            mbedtls_platform_zeroize( generator->ctx.tls12_prf.key,
 c02cc22:	68e1      	ldr	r1, [r4, #12]
 c02cc24:	f7fd fb3c 	bl	c02a2a0 <mbedtls_platform_zeroize>
            mbedtls_free( generator->ctx.tls12_prf.key );
 c02cc28:	68a0      	ldr	r0, [r4, #8]
 c02cc2a:	f7fd fb29 	bl	c02a280 <mbedtls_free>
        if( generator->ctx.tls12_prf.Ai_with_seed != NULL )
 c02cc2e:	6920      	ldr	r0, [r4, #16]
 c02cc30:	2800      	cmp	r0, #0
 c02cc32:	d0c9      	beq.n	c02cbc8 <mbedcrypto__psa_generator_abort+0x8>
            mbedtls_platform_zeroize( generator->ctx.tls12_prf.Ai_with_seed,
 c02cc34:	6961      	ldr	r1, [r4, #20]
 c02cc36:	f7fd fb33 	bl	c02a2a0 <mbedtls_platform_zeroize>
            mbedtls_free( generator->ctx.tls12_prf.Ai_with_seed );
 c02cc3a:	6920      	ldr	r0, [r4, #16]
 c02cc3c:	e7d7      	b.n	c02cbee <mbedcrypto__psa_generator_abort+0x2e>
        status = PSA_ERROR_BAD_STATE;
 c02cc3e:	f06f 0588 	mvn.w	r5, #136	; 0x88
 c02cc42:	e7c2      	b.n	c02cbca <mbedcrypto__psa_generator_abort+0xa>
 c02cc44:	31000001 	.word	0x31000001
 c02cc48:	30000100 	.word	0x30000100
 c02cc4c:	30000200 	.word	0x30000200

0c02cc50 <mbedcrypto__psa_get_generator_capacity>:
    if( generator->alg == 0 )
 c02cc50:	6803      	ldr	r3, [r0, #0]
 c02cc52:	b11b      	cbz	r3, c02cc5c <mbedcrypto__psa_get_generator_capacity+0xc>
    *capacity = generator->capacity;
 c02cc54:	6843      	ldr	r3, [r0, #4]
    return( PSA_SUCCESS );
 c02cc56:	2000      	movs	r0, #0
    *capacity = generator->capacity;
 c02cc58:	600b      	str	r3, [r1, #0]
    return( PSA_SUCCESS );
 c02cc5a:	4770      	bx	lr
        return PSA_ERROR_BAD_STATE;
 c02cc5c:	f06f 0088 	mvn.w	r0, #136	; 0x88
}
 c02cc60:	4770      	bx	lr
	...

0c02cc64 <mbedcrypto__psa_generator_read>:
{
 c02cc64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( generator->alg == 0 )
 c02cc68:	6805      	ldr	r5, [r0, #0]
{
 c02cc6a:	4604      	mov	r4, r0
 c02cc6c:	468a      	mov	sl, r1
 c02cc6e:	4617      	mov	r7, r2
    if( generator->alg == 0 )
 c02cc70:	b92d      	cbnz	r5, c02cc7e <mbedcrypto__psa_generator_read+0x1a>
        return PSA_ERROR_BAD_STATE;
 c02cc72:	f06f 0388 	mvn.w	r3, #136	; 0x88
}
 c02cc76:	4618      	mov	r0, r3
 c02cc78:	b003      	add	sp, #12
 c02cc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( output_length > generator->capacity )
 c02cc7e:	6841      	ldr	r1, [r0, #4]
 c02cc80:	4291      	cmp	r1, r2
 c02cc82:	d210      	bcs.n	c02cca6 <mbedcrypto__psa_generator_read+0x42>
        generator->capacity = 0;
 c02cc84:	2300      	movs	r3, #0
 c02cc86:	6043      	str	r3, [r0, #4]
        status = PSA_ERROR_INSUFFICIENT_DATA;
 c02cc88:	f06f 038e 	mvn.w	r3, #142	; 0x8e
        psa_algorithm_t alg = generator->alg;
 c02cc8c:	6825      	ldr	r5, [r4, #0]
        psa_generator_abort( generator );
 c02cc8e:	4620      	mov	r0, r4
 c02cc90:	9300      	str	r3, [sp, #0]
 c02cc92:	f7ff ff95 	bl	c02cbc0 <mbedcrypto__psa_generator_abort>
        generator->alg = alg;
 c02cc96:	6025      	str	r5, [r4, #0]
        memset( output, '!', output_length );
 c02cc98:	463a      	mov	r2, r7
 c02cc9a:	2121      	movs	r1, #33	; 0x21
 c02cc9c:	4650      	mov	r0, sl
 c02cc9e:	f7ea fe92 	bl	c0179c6 <memset>
 c02cca2:	9b00      	ldr	r3, [sp, #0]
 c02cca4:	e7e7      	b.n	c02cc76 <mbedcrypto__psa_generator_read+0x12>
    if( output_length == 0 && generator->capacity == 0 )
 c02cca6:	b912      	cbnz	r2, c02ccae <mbedcrypto__psa_generator_read+0x4a>
 c02cca8:	2900      	cmp	r1, #0
 c02ccaa:	f000 8124 	beq.w	c02cef6 <mbedcrypto__psa_generator_read+0x292>
    if( generator->alg == PSA_ALG_SELECT_RAW )
 c02ccae:	4b93      	ldr	r3, [pc, #588]	; (c02cefc <mbedcrypto__psa_generator_read+0x298>)
    generator->capacity -= output_length;
 c02ccb0:	1bc9      	subs	r1, r1, r7
    if( generator->alg == PSA_ALG_SELECT_RAW )
 c02ccb2:	429d      	cmp	r5, r3
    generator->capacity -= output_length;
 c02ccb4:	6061      	str	r1, [r4, #4]
    if( generator->alg == PSA_ALG_SELECT_RAW )
 c02ccb6:	d10a      	bne.n	c02ccce <mbedcrypto__psa_generator_read+0x6a>
            generator->ctx.buffer.size - generator->capacity - output_length;
 c02ccb8:	68e3      	ldr	r3, [r4, #12]
        memcpy( output, generator->ctx.buffer.data + offset, output_length );
 c02ccba:	463a      	mov	r2, r7
            generator->ctx.buffer.size - generator->capacity - output_length;
 c02ccbc:	1a59      	subs	r1, r3, r1
        memcpy( output, generator->ctx.buffer.data + offset, output_length );
 c02ccbe:	68a3      	ldr	r3, [r4, #8]
        size_t offset =
 c02ccc0:	1bc9      	subs	r1, r1, r7
        memcpy( output, generator->ctx.buffer.data + offset, output_length );
 c02ccc2:	4419      	add	r1, r3
 c02ccc4:	4650      	mov	r0, sl
 c02ccc6:	f7ea fe5a 	bl	c01797e <memcpy>
        status = PSA_SUCCESS;
 c02ccca:	2300      	movs	r3, #0
 c02cccc:	e7d3      	b.n	c02cc76 <mbedcrypto__psa_generator_read+0x12>
    if( PSA_ALG_IS_HKDF( generator->alg ) )
 c02ccce:	4b8c      	ldr	r3, [pc, #560]	; (c02cf00 <mbedcrypto__psa_generator_read+0x29c>)
 c02ccd0:	f025 02ff 	bic.w	r2, r5, #255	; 0xff
 c02ccd4:	429a      	cmp	r2, r3
 c02ccd6:	f040 809c 	bne.w	c02ce12 <mbedcrypto__psa_generator_read+0x1ae>
        psa_algorithm_t hash_alg = PSA_ALG_HKDF_GET_HASH( generator->alg );
 c02ccda:	b2ed      	uxtb	r5, r5
 c02ccdc:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c02cce0:	f105 437f 	add.w	r3, r5, #4278190080	; 0xff000000
 c02cce4:	3b01      	subs	r3, #1
 c02cce6:	2b02      	cmp	r3, #2
 c02cce8:	d97e      	bls.n	c02cde8 <mbedcrypto__psa_generator_read+0x184>
 c02ccea:	f105 437f 	add.w	r3, r5, #4278190080	; 0xff000000
 c02ccee:	3b04      	subs	r3, #4
 c02ccf0:	2b01      	cmp	r3, #1
 c02ccf2:	d97b      	bls.n	c02cdec <mbedcrypto__psa_generator_read+0x188>
 c02ccf4:	4b83      	ldr	r3, [pc, #524]	; (c02cf04 <mbedcrypto__psa_generator_read+0x2a0>)
 c02ccf6:	429d      	cmp	r5, r3
 c02ccf8:	d07c      	beq.n	c02cdf4 <mbedcrypto__psa_generator_read+0x190>
 c02ccfa:	3301      	adds	r3, #1
 c02ccfc:	429d      	cmp	r5, r3
 c02ccfe:	d07b      	beq.n	c02cdf8 <mbedcrypto__psa_generator_read+0x194>
 c02cd00:	3301      	adds	r3, #1
 c02cd02:	429d      	cmp	r5, r3
 c02cd04:	d07a      	beq.n	c02cdfc <mbedcrypto__psa_generator_read+0x198>
 c02cd06:	3301      	adds	r3, #1
 c02cd08:	429d      	cmp	r5, r3
 c02cd0a:	d071      	beq.n	c02cdf0 <mbedcrypto__psa_generator_read+0x18c>
 c02cd0c:	3301      	adds	r3, #1
 c02cd0e:	429d      	cmp	r5, r3
 c02cd10:	d070      	beq.n	c02cdf4 <mbedcrypto__psa_generator_read+0x190>
 c02cd12:	3301      	adds	r3, #1
 c02cd14:	429d      	cmp	r5, r3
 c02cd16:	d06f      	beq.n	c02cdf8 <mbedcrypto__psa_generator_read+0x194>
 c02cd18:	3303      	adds	r3, #3
 c02cd1a:	429d      	cmp	r5, r3
 c02cd1c:	d06a      	beq.n	c02cdf4 <mbedcrypto__psa_generator_read+0x190>
 c02cd1e:	3301      	adds	r3, #1
 c02cd20:	429d      	cmp	r5, r3
 c02cd22:	d069      	beq.n	c02cdf8 <mbedcrypto__psa_generator_read+0x194>
 c02cd24:	3301      	adds	r3, #1
 c02cd26:	429d      	cmp	r5, r3
 c02cd28:	d068      	beq.n	c02cdfc <mbedcrypto__psa_generator_read+0x198>
 c02cd2a:	4e77      	ldr	r6, [pc, #476]	; (c02cf08 <mbedcrypto__psa_generator_read+0x2a4>)
 c02cd2c:	42b5      	cmp	r5, r6
 c02cd2e:	bf0c      	ite	eq
 c02cd30:	2640      	moveq	r6, #64	; 0x40
 c02cd32:	2600      	movne	r6, #0
 c02cd34:	46b8      	mov	r8, r7
 c02cd36:	f8cd a000 	str.w	sl, [sp]
        memcpy( output, hkdf->output_block + hkdf->offset_in_block, n );
 c02cd3a:	f504 7b12 	add.w	fp, r4, #584	; 0x248
        status = psa_hmac_setup_internal( &hkdf->hmac,
 c02cd3e:	f104 0910 	add.w	r9, r4, #16
    while( output_length != 0 )
 c02cd42:	f1b8 0f00 	cmp.w	r8, #0
 c02cd46:	d0c0      	beq.n	c02ccca <mbedcrypto__psa_generator_read+0x66>
        uint8_t n = hash_length - hkdf->offset_in_block;
 c02cd48:	f894 1288 	ldrb.w	r1, [r4, #648]	; 0x288
        memcpy( output, hkdf->output_block + hkdf->offset_in_block, n );
 c02cd4c:	9800      	ldr	r0, [sp, #0]
        uint8_t n = hash_length - hkdf->offset_in_block;
 c02cd4e:	1a73      	subs	r3, r6, r1
 c02cd50:	b2db      	uxtb	r3, r3
        if( n > output_length )
 c02cd52:	4543      	cmp	r3, r8
            n = (uint8_t) output_length;
 c02cd54:	bf88      	it	hi
 c02cd56:	fa5f f388 	uxtbhi.w	r3, r8
        memcpy( output, hkdf->output_block + hkdf->offset_in_block, n );
 c02cd5a:	461a      	mov	r2, r3
 c02cd5c:	4459      	add	r1, fp
 c02cd5e:	9301      	str	r3, [sp, #4]
 c02cd60:	f7ea fe0d 	bl	c01797e <memcpy>
        output += n;
 c02cd64:	e9dd 2300 	ldrd	r2, r3, [sp]
 c02cd68:	441a      	add	r2, r3
 c02cd6a:	9200      	str	r2, [sp, #0]
        hkdf->offset_in_block += n;
 c02cd6c:	f894 2288 	ldrb.w	r2, [r4, #648]	; 0x288
        if( output_length == 0 )
 c02cd70:	ebb8 0803 	subs.w	r8, r8, r3
        hkdf->offset_in_block += n;
 c02cd74:	441a      	add	r2, r3
 c02cd76:	f884 2288 	strb.w	r2, [r4, #648]	; 0x288
        if( output_length == 0 )
 c02cd7a:	d0a6      	beq.n	c02ccca <mbedcrypto__psa_generator_read+0x66>
        if( hkdf->block_number == 0xff )
 c02cd7c:	f894 3289 	ldrb.w	r3, [r4, #649]	; 0x289
 c02cd80:	2bff      	cmp	r3, #255	; 0xff
 c02cd82:	f000 80b5 	beq.w	c02cef0 <mbedcrypto__psa_generator_read+0x28c>
        ++hkdf->block_number;
 c02cd86:	3301      	adds	r3, #1
 c02cd88:	f884 3289 	strb.w	r3, [r4, #649]	; 0x289
        hkdf->offset_in_block = 0;
 c02cd8c:	2300      	movs	r3, #0
        status = psa_hmac_setup_internal( &hkdf->hmac,
 c02cd8e:	4632      	mov	r2, r6
        hkdf->offset_in_block = 0;
 c02cd90:	f884 3288 	strb.w	r3, [r4, #648]	; 0x288
        status = psa_hmac_setup_internal( &hkdf->hmac,
 c02cd94:	f504 7102 	add.w	r1, r4, #520	; 0x208
 c02cd98:	462b      	mov	r3, r5
 c02cd9a:	4648      	mov	r0, r9
 c02cd9c:	f7fe fc4a 	bl	c02b634 <psa_hmac_setup_internal>
        if( status != PSA_SUCCESS )
 c02cda0:	4603      	mov	r3, r0
 c02cda2:	2800      	cmp	r0, #0
 c02cda4:	f47f af72 	bne.w	c02cc8c <mbedcrypto__psa_generator_read+0x28>
        if( hkdf->block_number != 1 )
 c02cda8:	f894 3289 	ldrb.w	r3, [r4, #649]	; 0x289
 c02cdac:	2b01      	cmp	r3, #1
 c02cdae:	d127      	bne.n	c02ce00 <mbedcrypto__psa_generator_read+0x19c>
        status = psa_hash_update( &hkdf->hmac.hash_ctx,
 c02cdb0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 c02cdb4:	4648      	mov	r0, r9
 c02cdb6:	f7fe fbb8 	bl	c02b52a <mbedcrypto__psa_hash_update>
        if( status != PSA_SUCCESS )
 c02cdba:	4603      	mov	r3, r0
 c02cdbc:	2800      	cmp	r0, #0
 c02cdbe:	f47f af65 	bne.w	c02cc8c <mbedcrypto__psa_generator_read+0x28>
 c02cdc2:	2201      	movs	r2, #1
 c02cdc4:	f204 2189 	addw	r1, r4, #649	; 0x289
 c02cdc8:	4648      	mov	r0, r9
 c02cdca:	f7fe fb31 	bl	c02b430 <mbedcrypto__psa_hash_update.part.7>
        if( status != PSA_SUCCESS )
 c02cdce:	4603      	mov	r3, r0
 c02cdd0:	2800      	cmp	r0, #0
 c02cdd2:	f47f af5b 	bne.w	c02cc8c <mbedcrypto__psa_generator_read+0x28>
        status = psa_hmac_finish_internal( &hkdf->hmac,
 c02cdd6:	2240      	movs	r2, #64	; 0x40
 c02cdd8:	4659      	mov	r1, fp
 c02cdda:	4648      	mov	r0, r9
 c02cddc:	f7fe fcd8 	bl	c02b790 <psa_hmac_finish_internal>
        if( status != PSA_SUCCESS )
 c02cde0:	4603      	mov	r3, r0
 c02cde2:	2800      	cmp	r0, #0
 c02cde4:	d0ad      	beq.n	c02cd42 <mbedcrypto__psa_generator_read+0xde>
 c02cde6:	e751      	b.n	c02cc8c <mbedcrypto__psa_generator_read+0x28>
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c02cde8:	2610      	movs	r6, #16
 c02cdea:	e7a3      	b.n	c02cd34 <mbedcrypto__psa_generator_read+0xd0>
 c02cdec:	2614      	movs	r6, #20
 c02cdee:	e7a1      	b.n	c02cd34 <mbedcrypto__psa_generator_read+0xd0>
 c02cdf0:	2640      	movs	r6, #64	; 0x40
 c02cdf2:	e79f      	b.n	c02cd34 <mbedcrypto__psa_generator_read+0xd0>
 c02cdf4:	261c      	movs	r6, #28
 c02cdf6:	e79d      	b.n	c02cd34 <mbedcrypto__psa_generator_read+0xd0>
 c02cdf8:	2620      	movs	r6, #32
 c02cdfa:	e79b      	b.n	c02cd34 <mbedcrypto__psa_generator_read+0xd0>
 c02cdfc:	2630      	movs	r6, #48	; 0x30
 c02cdfe:	e799      	b.n	c02cd34 <mbedcrypto__psa_generator_read+0xd0>
            status = psa_hash_update( &hkdf->hmac.hash_ctx,
 c02ce00:	4632      	mov	r2, r6
 c02ce02:	4659      	mov	r1, fp
 c02ce04:	4648      	mov	r0, r9
 c02ce06:	f7fe fb90 	bl	c02b52a <mbedcrypto__psa_hash_update>
            if( status != PSA_SUCCESS )
 c02ce0a:	4603      	mov	r3, r0
 c02ce0c:	2800      	cmp	r0, #0
 c02ce0e:	d0cf      	beq.n	c02cdb0 <mbedcrypto__psa_generator_read+0x14c>
 c02ce10:	e73c      	b.n	c02cc8c <mbedcrypto__psa_generator_read+0x28>
    else if( PSA_ALG_IS_TLS12_PRF( generator->alg ) ||
 c02ce12:	f425 73ff 	bic.w	r3, r5, #510	; 0x1fe
 c02ce16:	4a3d      	ldr	r2, [pc, #244]	; (c02cf0c <mbedcrypto__psa_generator_read+0x2a8>)
 c02ce18:	f023 0301 	bic.w	r3, r3, #1
 c02ce1c:	4293      	cmp	r3, r2
 c02ce1e:	f47f af28 	bne.w	c02cc72 <mbedcrypto__psa_generator_read+0xe>
    psa_algorithm_t hash_alg = PSA_ALG_TLS12_PRF_GET_HASH( alg );
 c02ce22:	b2ee      	uxtb	r6, r5
        status = psa_generator_tls12_prf_read( &generator->ctx.tls12_prf,
 c02ce24:	f104 0308 	add.w	r3, r4, #8
    psa_algorithm_t hash_alg = PSA_ALG_TLS12_PRF_GET_HASH( alg );
 c02ce28:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
        status = psa_generator_tls12_prf_read( &generator->ctx.tls12_prf,
 c02ce2c:	9300      	str	r3, [sp, #0]
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c02ce2e:	f106 437f 	add.w	r3, r6, #4278190080	; 0xff000000
 c02ce32:	3b01      	subs	r3, #1
 c02ce34:	2b02      	cmp	r3, #2
 c02ce36:	d93b      	bls.n	c02ceb0 <mbedcrypto__psa_generator_read+0x24c>
 c02ce38:	f106 437f 	add.w	r3, r6, #4278190080	; 0xff000000
 c02ce3c:	3b04      	subs	r3, #4
 c02ce3e:	2b01      	cmp	r3, #1
 c02ce40:	d938      	bls.n	c02ceb4 <mbedcrypto__psa_generator_read+0x250>
 c02ce42:	4b30      	ldr	r3, [pc, #192]	; (c02cf04 <mbedcrypto__psa_generator_read+0x2a0>)
 c02ce44:	429e      	cmp	r6, r3
 c02ce46:	d039      	beq.n	c02cebc <mbedcrypto__psa_generator_read+0x258>
 c02ce48:	3301      	adds	r3, #1
 c02ce4a:	429e      	cmp	r6, r3
 c02ce4c:	d038      	beq.n	c02cec0 <mbedcrypto__psa_generator_read+0x25c>
 c02ce4e:	3301      	adds	r3, #1
 c02ce50:	429e      	cmp	r6, r3
 c02ce52:	d037      	beq.n	c02cec4 <mbedcrypto__psa_generator_read+0x260>
 c02ce54:	3301      	adds	r3, #1
 c02ce56:	429e      	cmp	r6, r3
 c02ce58:	d02e      	beq.n	c02ceb8 <mbedcrypto__psa_generator_read+0x254>
 c02ce5a:	3301      	adds	r3, #1
 c02ce5c:	429e      	cmp	r6, r3
 c02ce5e:	d02d      	beq.n	c02cebc <mbedcrypto__psa_generator_read+0x258>
 c02ce60:	3301      	adds	r3, #1
 c02ce62:	429e      	cmp	r6, r3
 c02ce64:	d02c      	beq.n	c02cec0 <mbedcrypto__psa_generator_read+0x25c>
 c02ce66:	3303      	adds	r3, #3
 c02ce68:	429e      	cmp	r6, r3
 c02ce6a:	d027      	beq.n	c02cebc <mbedcrypto__psa_generator_read+0x258>
 c02ce6c:	3301      	adds	r3, #1
 c02ce6e:	429e      	cmp	r6, r3
 c02ce70:	d026      	beq.n	c02cec0 <mbedcrypto__psa_generator_read+0x25c>
 c02ce72:	3301      	adds	r3, #1
 c02ce74:	429e      	cmp	r6, r3
 c02ce76:	d025      	beq.n	c02cec4 <mbedcrypto__psa_generator_read+0x260>
 c02ce78:	3301      	adds	r3, #1
 c02ce7a:	429e      	cmp	r6, r3
 c02ce7c:	bf0c      	ite	eq
 c02ce7e:	2640      	moveq	r6, #64	; 0x40
 c02ce80:	2600      	movne	r6, #0
 c02ce82:	46b8      	mov	r8, r7
 c02ce84:	46d3      	mov	fp, sl
        memcpy( output, tls12_prf->output_block + tls12_prf->offset_in_block,
 c02ce86:	f104 0918 	add.w	r9, r4, #24
    while( output_length != 0 )
 c02ce8a:	f1b8 0f00 	cmp.w	r8, #0
 c02ce8e:	f43f af1c 	beq.w	c02ccca <mbedcrypto__psa_generator_read+0x66>
        uint8_t n = hash_length - tls12_prf->offset_in_block;
 c02ce92:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 c02ce96:	1a73      	subs	r3, r6, r1
        if( n == 0 )
 c02ce98:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 c02ce9c:	d114      	bne.n	c02cec8 <mbedcrypto__psa_generator_read+0x264>
            status = psa_generator_tls12_prf_generate_next_block( tls12_prf,
 c02ce9e:	4629      	mov	r1, r5
 c02cea0:	9800      	ldr	r0, [sp, #0]
 c02cea2:	f7fe fcf7 	bl	c02b894 <psa_generator_tls12_prf_generate_next_block>
            if( status != PSA_SUCCESS )
 c02cea6:	4603      	mov	r3, r0
 c02cea8:	2800      	cmp	r0, #0
 c02ceaa:	f47f aeef 	bne.w	c02cc8c <mbedcrypto__psa_generator_read+0x28>
 c02ceae:	e7ec      	b.n	c02ce8a <mbedcrypto__psa_generator_read+0x226>
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c02ceb0:	2610      	movs	r6, #16
 c02ceb2:	e7e6      	b.n	c02ce82 <mbedcrypto__psa_generator_read+0x21e>
 c02ceb4:	2614      	movs	r6, #20
 c02ceb6:	e7e4      	b.n	c02ce82 <mbedcrypto__psa_generator_read+0x21e>
 c02ceb8:	2640      	movs	r6, #64	; 0x40
 c02ceba:	e7e2      	b.n	c02ce82 <mbedcrypto__psa_generator_read+0x21e>
 c02cebc:	261c      	movs	r6, #28
 c02cebe:	e7e0      	b.n	c02ce82 <mbedcrypto__psa_generator_read+0x21e>
 c02cec0:	2620      	movs	r6, #32
 c02cec2:	e7de      	b.n	c02ce82 <mbedcrypto__psa_generator_read+0x21e>
 c02cec4:	2630      	movs	r6, #48	; 0x30
 c02cec6:	e7dc      	b.n	c02ce82 <mbedcrypto__psa_generator_read+0x21e>
        if( n > output_length )
 c02cec8:	4543      	cmp	r3, r8
            n = (uint8_t) output_length;
 c02ceca:	bf88      	it	hi
 c02cecc:	fa5f f388 	uxtbhi.w	r3, r8
        memcpy( output, tls12_prf->output_block + tls12_prf->offset_in_block,
 c02ced0:	461a      	mov	r2, r3
 c02ced2:	4658      	mov	r0, fp
 c02ced4:	4449      	add	r1, r9
 c02ced6:	9301      	str	r3, [sp, #4]
 c02ced8:	f7ea fd51 	bl	c01797e <memcpy>
        output += n;
 c02cedc:	9b01      	ldr	r3, [sp, #4]
        tls12_prf->offset_in_block += n;
 c02cede:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
        output += n;
 c02cee2:	449b      	add	fp, r3
        output_length -= n;
 c02cee4:	eba8 0803 	sub.w	r8, r8, r3
        tls12_prf->offset_in_block += n;
 c02cee8:	4413      	add	r3, r2
 c02ceea:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 c02ceee:	e7cc      	b.n	c02ce8a <mbedcrypto__psa_generator_read+0x226>
            return( PSA_ERROR_BAD_STATE );
 c02cef0:	f06f 0388 	mvn.w	r3, #136	; 0x88
 c02cef4:	e6ca      	b.n	c02cc8c <mbedcrypto__psa_generator_read+0x28>
        return( PSA_ERROR_INSUFFICIENT_DATA );
 c02cef6:	f06f 038e 	mvn.w	r3, #142	; 0x8e
 c02cefa:	e6bc      	b.n	c02cc76 <mbedcrypto__psa_generator_read+0x12>
 c02cefc:	31000001 	.word	0x31000001
 c02cf00:	30000100 	.word	0x30000100
 c02cf04:	01000008 	.word	0x01000008
 c02cf08:	01000013 	.word	0x01000013
 c02cf0c:	30000200 	.word	0x30000200

0c02cf10 <mbedcrypto__psa_generator_import_key>:
{
 c02cf10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c02cf14:	461c      	mov	r4, r3
    return( PSA_KEY_TYPE_IS_UNSTRUCTURED( type ) );
 c02cf16:	f001 43c0 	and.w	r3, r1, #1610612736	; 0x60000000
    size_t bytes = PSA_BITS_TO_BYTES( bits );
 c02cf1a:	1dd5      	adds	r5, r2, #7
    if( ! key_type_is_raw_bytes( type ) )
 c02cf1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 c02cf20:	4680      	mov	r8, r0
 c02cf22:	460f      	mov	r7, r1
    size_t bytes = PSA_BITS_TO_BYTES( bits );
 c02cf24:	ea4f 05d5 	mov.w	r5, r5, lsr #3
    if( ! key_type_is_raw_bytes( type ) )
 c02cf28:	d11b      	bne.n	c02cf62 <mbedcrypto__psa_generator_import_key+0x52>
    if( bits % 8 != 0 )
 c02cf2a:	0753      	lsls	r3, r2, #29
 c02cf2c:	d119      	bne.n	c02cf62 <mbedcrypto__psa_generator_import_key+0x52>
    data = mbedtls_calloc( 1, bytes );
 c02cf2e:	4629      	mov	r1, r5
 c02cf30:	2001      	movs	r0, #1
 c02cf32:	f7fd f99f 	bl	c02a274 <mbedtls_calloc>
    if( data == NULL )
 c02cf36:	4606      	mov	r6, r0
 c02cf38:	b1b0      	cbz	r0, c02cf68 <mbedcrypto__psa_generator_import_key+0x58>
    status = psa_generator_read( generator, data, bytes );
 c02cf3a:	4601      	mov	r1, r0
 c02cf3c:	462a      	mov	r2, r5
 c02cf3e:	4620      	mov	r0, r4
 c02cf40:	f7ff fe90 	bl	c02cc64 <mbedcrypto__psa_generator_read>
    if( status != PSA_SUCCESS )
 c02cf44:	4604      	mov	r4, r0
 c02cf46:	b930      	cbnz	r0, c02cf56 <mbedcrypto__psa_generator_import_key+0x46>
    status = psa_import_key( handle, type, data, bytes );
 c02cf48:	462b      	mov	r3, r5
 c02cf4a:	4632      	mov	r2, r6
 c02cf4c:	4639      	mov	r1, r7
 c02cf4e:	4640      	mov	r0, r8
 c02cf50:	f7fe f91c 	bl	c02b18c <mbedcrypto__psa_import_key>
 c02cf54:	4604      	mov	r4, r0
    mbedtls_free( data );
 c02cf56:	4630      	mov	r0, r6
 c02cf58:	f7fd f992 	bl	c02a280 <mbedtls_free>
}
 c02cf5c:	4620      	mov	r0, r4
 c02cf5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02cf62:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c02cf66:	e7f9      	b.n	c02cf5c <mbedcrypto__psa_generator_import_key+0x4c>
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c02cf68:	f06f 048c 	mvn.w	r4, #140	; 0x8c
 c02cf6c:	e7f6      	b.n	c02cf5c <mbedcrypto__psa_generator_import_key+0x4c>

0c02cf6e <mbedcrypto__psa_key_derivation>:
{
 c02cf6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02cf70:	4605      	mov	r5, r0
 c02cf72:	461f      	mov	r7, r3
    if( generator->alg != 0 )
 c02cf74:	682b      	ldr	r3, [r5, #0]
{
 c02cf76:	b089      	sub	sp, #36	; 0x24
 c02cf78:	4608      	mov	r0, r1
 c02cf7a:	4616      	mov	r6, r2
    if( generator->alg != 0 )
 c02cf7c:	bb6b      	cbnz	r3, c02cfda <mbedcrypto__psa_key_derivation+0x6c>
    if( ! PSA_ALG_IS_KEY_DERIVATION( alg ) )
 c02cf7e:	f002 43fe 	and.w	r3, r2, #2130706432	; 0x7f000000
 c02cf82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c02cf86:	d004      	beq.n	c02cf92 <mbedcrypto__psa_key_derivation+0x24>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02cf88:	f06f 0486 	mvn.w	r4, #134	; 0x86
}
 c02cf8c:	4620      	mov	r0, r4
 c02cf8e:	b009      	add	sp, #36	; 0x24
 c02cf90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = psa_get_key_from_slot( handle, &slot, PSA_KEY_USAGE_DERIVE, alg );
 c02cf92:	4613      	mov	r3, r2
 c02cf94:	a907      	add	r1, sp, #28
 c02cf96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 c02cf9a:	f7fd fcdf 	bl	c02a95c <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c02cf9e:	4604      	mov	r4, r0
 c02cfa0:	2800      	cmp	r0, #0
 c02cfa2:	d1f3      	bne.n	c02cf8c <mbedcrypto__psa_key_derivation+0x1e>
    if( slot->type != PSA_KEY_TYPE_DERIVE )
 c02cfa4:	9907      	ldr	r1, [sp, #28]
 c02cfa6:	680b      	ldr	r3, [r1, #0]
 c02cfa8:	f1b3 4fa4 	cmp.w	r3, #1375731712	; 0x52000000
 c02cfac:	d1ec      	bne.n	c02cf88 <mbedcrypto__psa_key_derivation+0x1a>
    status = psa_key_derivation_internal( generator,
 c02cfae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 c02cfb0:	4628      	mov	r0, r5
 c02cfb2:	9304      	str	r3, [sp, #16]
 c02cfb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c02cfb6:	9303      	str	r3, [sp, #12]
 c02cfb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 c02cfba:	9302      	str	r3, [sp, #8]
 c02cfbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c02cfbe:	e9cd 7300 	strd	r7, r3, [sp]
 c02cfc2:	4633      	mov	r3, r6
 c02cfc4:	e9d1 1207 	ldrd	r1, r2, [r1, #28]
 c02cfc8:	f7fe fcfa 	bl	c02b9c0 <psa_key_derivation_internal>
    if( status != PSA_SUCCESS )
 c02cfcc:	4604      	mov	r4, r0
 c02cfce:	2800      	cmp	r0, #0
 c02cfd0:	d0dc      	beq.n	c02cf8c <mbedcrypto__psa_key_derivation+0x1e>
        psa_generator_abort( generator );
 c02cfd2:	4628      	mov	r0, r5
 c02cfd4:	f7ff fdf4 	bl	c02cbc0 <mbedcrypto__psa_generator_abort>
 c02cfd8:	e7d8      	b.n	c02cf8c <mbedcrypto__psa_key_derivation+0x1e>
        return( PSA_ERROR_BAD_STATE );
 c02cfda:	f06f 0488 	mvn.w	r4, #136	; 0x88
 c02cfde:	e7d5      	b.n	c02cf8c <mbedcrypto__psa_key_derivation+0x1e>

0c02cfe0 <mbedcrypto__psa_key_agreement>:
psa_status_t psa_key_agreement( psa_crypto_generator_t *generator,
                                psa_key_handle_t private_key,
                                const uint8_t *peer_key,
                                size_t peer_key_length,
                                psa_algorithm_t alg )
{
 c02cfe0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 c02cfe4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 c02cfe6:	4698      	mov	r8, r3
    psa_key_slot_t *slot;
    psa_status_t status;
    if( ! PSA_ALG_IS_KEY_AGREEMENT( alg ) )
 c02cfe8:	f005 43fc 	and.w	r3, r5, #2113929216	; 0x7e000000
 c02cfec:	f1b3 5f08 	cmp.w	r3, #570425344	; 0x22000000
{
 c02cff0:	4606      	mov	r6, r0
 c02cff2:	4617      	mov	r7, r2
 c02cff4:	4608      	mov	r0, r1
    if( ! PSA_ALG_IS_KEY_AGREEMENT( alg ) )
 c02cff6:	d117      	bne.n	c02d028 <mbedcrypto__psa_key_agreement+0x48>
        return( PSA_ERROR_INVALID_ARGUMENT );
    status = psa_get_key_from_slot( private_key, &slot,
 c02cff8:	462b      	mov	r3, r5
 c02cffa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 c02cffe:	a903      	add	r1, sp, #12
 c02d000:	f7fd fcac 	bl	c02a95c <psa_get_key_from_slot>
                                    PSA_KEY_USAGE_DERIVE, alg );
    if( status != PSA_SUCCESS )
 c02d004:	4604      	mov	r4, r0
 c02d006:	b958      	cbnz	r0, c02d020 <mbedcrypto__psa_key_agreement+0x40>
        return( status );
    status = psa_key_agreement_internal( generator,
 c02d008:	9500      	str	r5, [sp, #0]
 c02d00a:	4643      	mov	r3, r8
 c02d00c:	463a      	mov	r2, r7
 c02d00e:	9903      	ldr	r1, [sp, #12]
 c02d010:	4630      	mov	r0, r6
 c02d012:	f7fe fe15 	bl	c02bc40 <psa_key_agreement_internal>
                                         slot,
                                         peer_key, peer_key_length,
                                         alg );
    if( status != PSA_SUCCESS )
 c02d016:	4604      	mov	r4, r0
 c02d018:	b110      	cbz	r0, c02d020 <mbedcrypto__psa_key_agreement+0x40>
        psa_generator_abort( generator );
 c02d01a:	4630      	mov	r0, r6
 c02d01c:	f7ff fdd0 	bl	c02cbc0 <mbedcrypto__psa_generator_abort>
    return( status );
}
 c02d020:	4620      	mov	r0, r4
 c02d022:	b004      	add	sp, #16
 c02d024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02d028:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c02d02c:	e7f8      	b.n	c02d020 <mbedcrypto__psa_key_agreement+0x40>
	...

0c02d030 <mbedcrypto__psa_generate_random>:
/* Random generation */
/****************************************************************/

psa_status_t psa_generate_random( uint8_t *output,
                                  size_t output_size )
{
 c02d030:	b508      	push	{r3, lr}
    int ret;
    GUARD_MODULE_INITIALIZED;
 c02d032:	4b09      	ldr	r3, [pc, #36]	; (c02d058 <mbedcrypto__psa_generate_random+0x28>)
{
 c02d034:	460a      	mov	r2, r1
    GUARD_MODULE_INITIALIZED;
 c02d036:	f893 13d8 	ldrb.w	r1, [r3, #984]	; 0x3d8
 c02d03a:	07c9      	lsls	r1, r1, #31
 c02d03c:	d508      	bpl.n	c02d050 <mbedcrypto__psa_generate_random+0x20>

    ret = mbedtls_ctr_drbg_random( &global_data.ctr_drbg, output, output_size );
 c02d03e:	4601      	mov	r1, r0
 c02d040:	f503 7020 	add.w	r0, r3, #640	; 0x280
 c02d044:	f7fa fa6e 	bl	c027524 <mbedtls_ctr_drbg_random>
    return( mbedtls_to_psa_error( ret ) );
}
 c02d048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return( mbedtls_to_psa_error( ret ) );
 c02d04c:	f7fd b930 	b.w	c02a2b0 <mbedtls_to_psa_error>
}
 c02d050:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02d054:	bd08      	pop	{r3, pc}
 c02d056:	bf00      	nop
 c02d058:	30035e40 	.word	0x30035e40

0c02d05c <mbedcrypto__psa_generate_key>:
psa_status_t psa_generate_key( psa_key_handle_t handle,
                               psa_key_type_t type,
                               size_t bits,
                               const void *extra,
                               size_t extra_size )
{
 c02d05c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 c02d060:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 c02d062:	460d      	mov	r5, r1
 c02d064:	4616      	mov	r6, r2
    psa_key_slot_t *slot;
    psa_status_t status;

    if( extra == NULL && extra_size != 0 )
 c02d066:	4698      	mov	r8, r3
 c02d068:	b933      	cbnz	r3, c02d078 <mbedcrypto__psa_generate_key+0x1c>
 c02d06a:	b12f      	cbz	r7, c02d078 <mbedcrypto__psa_generate_key+0x1c>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02d06c:	f06f 0486 	mvn.w	r4, #134	; 0x86
        return( psa_save_generated_persistent_key( slot, bits ) );
    }
#endif /* defined(MBEDTLS_PSA_CRYPTO_STORAGE_C) */

    return( status );
}
 c02d070:	4620      	mov	r0, r4
 c02d072:	b004      	add	sp, #16
 c02d074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = psa_get_empty_key_slot( handle, &slot );
 c02d078:	a903      	add	r1, sp, #12
 c02d07a:	f7fd fb25 	bl	c02a6c8 <psa_get_empty_key_slot>
    if( status != PSA_SUCCESS )
 c02d07e:	4604      	mov	r4, r0
 c02d080:	2800      	cmp	r0, #0
 c02d082:	d1f5      	bne.n	c02d070 <mbedcrypto__psa_generate_key+0x14>
    return( PSA_KEY_TYPE_IS_UNSTRUCTURED( type ) );
 c02d084:	f005 43c0 	and.w	r3, r5, #1610612736	; 0x60000000
    if( key_type_is_raw_bytes( type ) )
 c02d088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c02d08c:	d116      	bne.n	c02d0bc <mbedcrypto__psa_generate_key+0x60>
        status = prepare_raw_data_slot( type, bits, &slot->data.raw );
 c02d08e:	9a03      	ldr	r2, [sp, #12]
 c02d090:	4631      	mov	r1, r6
 c02d092:	321c      	adds	r2, #28
 c02d094:	4628      	mov	r0, r5
 c02d096:	f7fd fc95 	bl	c02a9c4 <prepare_raw_data_slot>
        if( status != PSA_SUCCESS )
 c02d09a:	2800      	cmp	r0, #0
 c02d09c:	f040 8085 	bne.w	c02d1aa <mbedcrypto__psa_generate_key+0x14e>
        status = psa_generate_random( slot->data.raw.data,
 c02d0a0:	9b03      	ldr	r3, [sp, #12]
 c02d0a2:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 c02d0a6:	f7ff ffc3 	bl	c02d030 <mbedcrypto__psa_generate_random>
        if( status != PSA_SUCCESS )
 c02d0aa:	4606      	mov	r6, r0
 c02d0ac:	2800      	cmp	r0, #0
 c02d0ae:	d042      	beq.n	c02d136 <mbedcrypto__psa_generate_key+0xda>
            mbedtls_free( slot->data.raw.data );
 c02d0b0:	9b03      	ldr	r3, [sp, #12]
            return( status );
 c02d0b2:	4634      	mov	r4, r6
            mbedtls_free( slot->data.raw.data );
 c02d0b4:	69d8      	ldr	r0, [r3, #28]
 c02d0b6:	f7fd f8e3 	bl	c02a280 <mbedtls_free>
            return( status );
 c02d0ba:	e7d9      	b.n	c02d070 <mbedcrypto__psa_generate_key+0x14>
    if ( type == PSA_KEY_TYPE_RSA_KEYPAIR )
 c02d0bc:	4b3c      	ldr	r3, [pc, #240]	; (c02d1b0 <mbedcrypto__psa_generate_key+0x154>)
 c02d0be:	429d      	cmp	r5, r3
 c02d0c0:	d13c      	bne.n	c02d13c <mbedcrypto__psa_generate_key+0xe0>
        if( bits > PSA_VENDOR_RSA_MAX_KEY_BITS )
 c02d0c2:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 c02d0c6:	d902      	bls.n	c02d0ce <mbedcrypto__psa_generate_key+0x72>
            return( PSA_ERROR_NOT_SUPPORTED );
 c02d0c8:	f06f 0485 	mvn.w	r4, #133	; 0x85
 c02d0cc:	e7d0      	b.n	c02d070 <mbedcrypto__psa_generate_key+0x14>
        if( bits % 8 != 0 )
 c02d0ce:	0773      	lsls	r3, r6, #29
 c02d0d0:	d1fa      	bne.n	c02d0c8 <mbedcrypto__psa_generate_key+0x6c>
        if( extra != NULL )
 c02d0d2:	f1b8 0f00 	cmp.w	r8, #0
 c02d0d6:	d00f      	beq.n	c02d0f8 <mbedcrypto__psa_generate_key+0x9c>
            if( extra_size != sizeof( *p ) )
 c02d0d8:	2f04      	cmp	r7, #4
 c02d0da:	d1c7      	bne.n	c02d06c <mbedcrypto__psa_generate_key+0x10>
            if( p->e > INT_MAX )
 c02d0dc:	f8d8 8000 	ldr.w	r8, [r8]
 c02d0e0:	f1b8 0f00 	cmp.w	r8, #0
 c02d0e4:	dbf0      	blt.n	c02d0c8 <mbedcrypto__psa_generate_key+0x6c>
        rsa = mbedtls_calloc( 1, sizeof( *rsa ) );
 c02d0e6:	21ac      	movs	r1, #172	; 0xac
 c02d0e8:	2001      	movs	r0, #1
 c02d0ea:	f7fd f8c3 	bl	c02a274 <mbedtls_calloc>
        if( rsa == NULL )
 c02d0ee:	4607      	mov	r7, r0
 c02d0f0:	b928      	cbnz	r0, c02d0fe <mbedcrypto__psa_generate_key+0xa2>
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c02d0f2:	f06f 048c 	mvn.w	r4, #140	; 0x8c
 c02d0f6:	e7bb      	b.n	c02d070 <mbedcrypto__psa_generate_key+0x14>
        int exponent = 65537;
 c02d0f8:	f04f 1801 	mov.w	r8, #65537	; 0x10001
 c02d0fc:	e7f3      	b.n	c02d0e6 <mbedcrypto__psa_generate_key+0x8a>
        mbedtls_rsa_init( rsa, MBEDTLS_RSA_PKCS_V15, MBEDTLS_MD_NONE );
 c02d0fe:	2200      	movs	r2, #0
 c02d100:	4611      	mov	r1, r2
 c02d102:	f7f2 fac5 	bl	c01f690 <mbedtls_rsa_init>
        ret = mbedtls_rsa_gen_key( rsa,
 c02d106:	4633      	mov	r3, r6
 c02d108:	f8cd 8000 	str.w	r8, [sp]
 c02d10c:	4a29      	ldr	r2, [pc, #164]	; (c02d1b4 <mbedcrypto__psa_generate_key+0x158>)
 c02d10e:	492a      	ldr	r1, [pc, #168]	; (c02d1b8 <mbedcrypto__psa_generate_key+0x15c>)
 c02d110:	4638      	mov	r0, r7
 c02d112:	f7f3 fb2b 	bl	c02076c <mbedtls_rsa_gen_key>
        if( ret != 0 )
 c02d116:	4606      	mov	r6, r0
 c02d118:	b158      	cbz	r0, c02d132 <mbedcrypto__psa_generate_key+0xd6>
            mbedtls_rsa_free( rsa );
 c02d11a:	4638      	mov	r0, r7
 c02d11c:	f7f3 faec 	bl	c0206f8 <mbedtls_rsa_free>
            mbedtls_free( rsa );
 c02d120:	4638      	mov	r0, r7
 c02d122:	f7fd f8ad 	bl	c02a280 <mbedtls_free>
            return( mbedtls_to_psa_error( ret ) );
 c02d126:	4630      	mov	r0, r6
}
 c02d128:	b004      	add	sp, #16
 c02d12a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            return( mbedtls_to_psa_error( ret ) );
 c02d12e:	f7fd b8bf 	b.w	c02a2b0 <mbedtls_to_psa_error>
        slot->data.rsa = rsa;
 c02d132:	9b03      	ldr	r3, [sp, #12]
 c02d134:	61df      	str	r7, [r3, #28]
    slot->type = type;
 c02d136:	9b03      	ldr	r3, [sp, #12]
 c02d138:	601d      	str	r5, [r3, #0]
    return( status );
 c02d13a:	e799      	b.n	c02d070 <mbedcrypto__psa_generate_key+0x14>
    if ( PSA_KEY_TYPE_IS_ECC( type ) && PSA_KEY_TYPE_IS_KEYPAIR( type ) )
 c02d13c:	0c2b      	lsrs	r3, r5, #16
 c02d13e:	4a1f      	ldr	r2, [pc, #124]	; (c02d1bc <mbedcrypto__psa_generate_key+0x160>)
 c02d140:	041b      	lsls	r3, r3, #16
 c02d142:	4293      	cmp	r3, r2
 c02d144:	d1c0      	bne.n	c02d0c8 <mbedcrypto__psa_generate_key+0x6c>
 c02d146:	f1a5 0312 	sub.w	r3, r5, #18
 c02d14a:	b29b      	uxth	r3, r3
 c02d14c:	2b0c      	cmp	r3, #12
        psa_ecc_curve_t curve = PSA_KEY_TYPE_GET_CURVE( type );
 c02d14e:	bf8e      	itee	hi
 c02d150:	4607      	movhi	r7, r0
 c02d152:	4a1b      	ldrls	r2, [pc, #108]	; (c02d1c0 <mbedcrypto__psa_generate_key+0x164>)
 c02d154:	5cd7      	ldrbls	r7, [r2, r3]
        const mbedtls_ecp_curve_info *curve_info =
 c02d156:	4638      	mov	r0, r7
 c02d158:	f7f0 f86a 	bl	c01d230 <mbedtls_ecp_curve_info_from_grp_id>
        if( extra != NULL )
 c02d15c:	f1b8 0f00 	cmp.w	r8, #0
 c02d160:	d1b2      	bne.n	c02d0c8 <mbedcrypto__psa_generate_key+0x6c>
        if( grp_id == MBEDTLS_ECP_DP_NONE || curve_info == NULL )
 c02d162:	2f00      	cmp	r7, #0
 c02d164:	d0b0      	beq.n	c02d0c8 <mbedcrypto__psa_generate_key+0x6c>
 c02d166:	2800      	cmp	r0, #0
 c02d168:	d0ae      	beq.n	c02d0c8 <mbedcrypto__psa_generate_key+0x6c>
        if( curve_info->bit_size != bits )
 c02d16a:	8883      	ldrh	r3, [r0, #4]
 c02d16c:	42b3      	cmp	r3, r6
 c02d16e:	f47f af7d 	bne.w	c02d06c <mbedcrypto__psa_generate_key+0x10>
        ecp = mbedtls_calloc( 1, sizeof( *ecp ) );
 c02d172:	21d0      	movs	r1, #208	; 0xd0
 c02d174:	2001      	movs	r0, #1
 c02d176:	f7fd f87d 	bl	c02a274 <mbedtls_calloc>
        if( ecp == NULL )
 c02d17a:	4606      	mov	r6, r0
 c02d17c:	2800      	cmp	r0, #0
 c02d17e:	d0b8      	beq.n	c02d0f2 <mbedcrypto__psa_generate_key+0x96>
        mbedtls_ecp_keypair_init( ecp );
 c02d180:	f7f0 f8a8 	bl	c01d2d4 <mbedtls_ecp_keypair_init>
        ret = mbedtls_ecp_gen_key( grp_id, ecp,
 c02d184:	4638      	mov	r0, r7
 c02d186:	4b0b      	ldr	r3, [pc, #44]	; (c02d1b4 <mbedcrypto__psa_generate_key+0x158>)
 c02d188:	4a0b      	ldr	r2, [pc, #44]	; (c02d1b8 <mbedcrypto__psa_generate_key+0x15c>)
 c02d18a:	4631      	mov	r1, r6
 c02d18c:	f7f0 ff22 	bl	c01dfd4 <mbedtls_ecp_gen_key>
        if( ret != 0 )
 c02d190:	4607      	mov	r7, r0
 c02d192:	b138      	cbz	r0, c02d1a4 <mbedcrypto__psa_generate_key+0x148>
            mbedtls_ecp_keypair_free( ecp );
 c02d194:	4630      	mov	r0, r6
 c02d196:	f7f0 f91f 	bl	c01d3d8 <mbedtls_ecp_keypair_free>
            mbedtls_free( ecp );
 c02d19a:	4630      	mov	r0, r6
 c02d19c:	f7fd f870 	bl	c02a280 <mbedtls_free>
            return( mbedtls_to_psa_error( ret ) );
 c02d1a0:	4638      	mov	r0, r7
 c02d1a2:	e7c1      	b.n	c02d128 <mbedcrypto__psa_generate_key+0xcc>
        slot->data.ecp = ecp;
 c02d1a4:	9b03      	ldr	r3, [sp, #12]
 c02d1a6:	61de      	str	r6, [r3, #28]
 c02d1a8:	e7c5      	b.n	c02d136 <mbedcrypto__psa_generate_key+0xda>
 c02d1aa:	4604      	mov	r4, r0
 c02d1ac:	e760      	b.n	c02d070 <mbedcrypto__psa_generate_key+0x14>
 c02d1ae:	bf00      	nop
 c02d1b0:	70010000 	.word	0x70010000
 c02d1b4:	300360c0 	.word	0x300360c0
 c02d1b8:	0c027525 	.word	0x0c027525
 c02d1bc:	70030000 	.word	0x70030000
 c02d1c0:	0c036895 	.word	0x0c036895

0c02d1c4 <mbedtls_psa_crypto_free>:
    global_data.entropy_free = entropy_free;
    return( PSA_SUCCESS );
}

void mbedtls_psa_crypto_free( void )
{
 c02d1c4:	b510      	push	{r4, lr}
    psa_wipe_all_key_slots( );
    if( global_data.rng_state != RNG_NOT_INITIALIZED )
 c02d1c6:	4c0b      	ldr	r4, [pc, #44]	; (c02d1f4 <mbedtls_psa_crypto_free+0x30>)
    psa_wipe_all_key_slots( );
 c02d1c8:	f000 f8a8 	bl	c02d31c <psa_wipe_all_key_slots>
    if( global_data.rng_state != RNG_NOT_INITIALIZED )
 c02d1cc:	f894 33d8 	ldrb.w	r3, [r4, #984]	; 0x3d8
 c02d1d0:	f013 0f06 	tst.w	r3, #6
 c02d1d4:	d007      	beq.n	c02d1e6 <mbedtls_psa_crypto_free+0x22>
    {
        mbedtls_ctr_drbg_free( &global_data.ctr_drbg );
 c02d1d6:	f504 7020 	add.w	r0, r4, #640	; 0x280
 c02d1da:	f7fa f8b6 	bl	c02734a <mbedtls_ctr_drbg_free>
        global_data.entropy_free( &global_data.entropy );
 c02d1de:	6863      	ldr	r3, [r4, #4]
 c02d1e0:	f104 0008 	add.w	r0, r4, #8
 c02d1e4:	4798      	blx	r3
    }
    /* Wipe all remaining data, including configuration.
     * In particular, this sets all state indicator to the value
     * indicating "uninitialized". */
    mbedtls_platform_zeroize( &global_data, sizeof( global_data ) );
}
 c02d1e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( &global_data, sizeof( global_data ) );
 c02d1ea:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 c02d1ee:	4801      	ldr	r0, [pc, #4]	; (c02d1f4 <mbedtls_psa_crypto_free+0x30>)
 c02d1f0:	f7fd b856 	b.w	c02a2a0 <mbedtls_platform_zeroize>
 c02d1f4:	30035e40 	.word	0x30035e40

0c02d1f8 <mbedcrypto__psa_crypto_init>:

psa_status_t psa_crypto_init( void )
{
 c02d1f8:	b530      	push	{r4, r5, lr}
    psa_status_t status;
    const unsigned char drbg_seed[] = "PSA";
 c02d1fa:	4b21      	ldr	r3, [pc, #132]	; (c02d280 <mbedcrypto__psa_crypto_init+0x88>)

    /* Double initialization is explicitly allowed. */
    if( global_data.initialized != 0 )
 c02d1fc:	4c21      	ldr	r4, [pc, #132]	; (c02d284 <mbedcrypto__psa_crypto_init+0x8c>)
{
 c02d1fe:	b085      	sub	sp, #20
    const unsigned char drbg_seed[] = "PSA";
 c02d200:	9303      	str	r3, [sp, #12]
    if( global_data.initialized != 0 )
 c02d202:	f894 33d8 	ldrb.w	r3, [r4, #984]	; 0x3d8
 c02d206:	07db      	lsls	r3, r3, #31
 c02d208:	d435      	bmi.n	c02d276 <mbedcrypto__psa_crypto_init+0x7e>
        return( PSA_SUCCESS );

    /* Set default configuration if
     * mbedtls_psa_crypto_configure_entropy_sources() hasn't been called. */
    if( global_data.entropy_init == NULL )
 c02d20a:	6823      	ldr	r3, [r4, #0]
 c02d20c:	b90b      	cbnz	r3, c02d212 <mbedcrypto__psa_crypto_init+0x1a>
        global_data.entropy_init = mbedtls_entropy_init;
 c02d20e:	4b1e      	ldr	r3, [pc, #120]	; (c02d288 <mbedcrypto__psa_crypto_init+0x90>)
 c02d210:	6023      	str	r3, [r4, #0]
    if( global_data.entropy_free == NULL )
 c02d212:	6863      	ldr	r3, [r4, #4]
 c02d214:	b90b      	cbnz	r3, c02d21a <mbedcrypto__psa_crypto_init+0x22>
        global_data.entropy_free = mbedtls_entropy_free;
 c02d216:	4b1d      	ldr	r3, [pc, #116]	; (c02d28c <mbedcrypto__psa_crypto_init+0x94>)
 c02d218:	6063      	str	r3, [r4, #4]

    /* Initialize the random generator. */
    global_data.entropy_init( &global_data.entropy );
 c02d21a:	6823      	ldr	r3, [r4, #0]
 c02d21c:	481c      	ldr	r0, [pc, #112]	; (c02d290 <mbedcrypto__psa_crypto_init+0x98>)
 c02d21e:	4798      	blx	r3
    mbedtls_entropy_add_source( &global_data.entropy,
                                mbedtls_nv_seed_poll, NULL,
                                MBEDTLS_ENTROPY_BLOCK_SIZE,
                                MBEDTLS_ENTROPY_SOURCE_STRONG );
#endif
    mbedtls_ctr_drbg_init( &global_data.ctr_drbg );
 c02d220:	481c      	ldr	r0, [pc, #112]	; (c02d294 <mbedcrypto__psa_crypto_init+0x9c>)
 c02d222:	f7fa f88d 	bl	c027340 <mbedtls_ctr_drbg_init>
    global_data.rng_state = RNG_INITIALIZED;
 c02d226:	2201      	movs	r2, #1
 c02d228:	f894 33d8 	ldrb.w	r3, [r4, #984]	; 0x3d8
    status = mbedtls_to_psa_error(
 c02d22c:	491a      	ldr	r1, [pc, #104]	; (c02d298 <mbedcrypto__psa_crypto_init+0xa0>)
    global_data.rng_state = RNG_INITIALIZED;
 c02d22e:	f362 0342 	bfi	r3, r2, #1, #2
 c02d232:	f884 33d8 	strb.w	r3, [r4, #984]	; 0x3d8
    status = mbedtls_to_psa_error(
 c02d236:	2303      	movs	r3, #3
 c02d238:	4a15      	ldr	r2, [pc, #84]	; (c02d290 <mbedcrypto__psa_crypto_init+0x98>)
 c02d23a:	9300      	str	r3, [sp, #0]
 c02d23c:	f502 701e 	add.w	r0, r2, #632	; 0x278
 c02d240:	ab03      	add	r3, sp, #12
 c02d242:	f7fa f8fb 	bl	c02743c <mbedtls_ctr_drbg_seed>
 c02d246:	f7fd f833 	bl	c02a2b0 <mbedtls_to_psa_error>
        mbedtls_ctr_drbg_seed( &global_data.ctr_drbg,
                               mbedtls_entropy_func,
                               &global_data.entropy,
                               drbg_seed, sizeof( drbg_seed ) - 1 ) );
    if( status != PSA_SUCCESS )
 c02d24a:	4605      	mov	r5, r0
 c02d24c:	b9a8      	cbnz	r0, c02d27a <mbedcrypto__psa_crypto_init+0x82>
        goto exit;
    global_data.rng_state = RNG_SEEDED;
 c02d24e:	2202      	movs	r2, #2
 c02d250:	f894 33d8 	ldrb.w	r3, [r4, #984]	; 0x3d8
 c02d254:	f362 0342 	bfi	r3, r2, #1, #2
 c02d258:	f884 33d8 	strb.w	r3, [r4, #984]	; 0x3d8

    status = psa_initialize_key_slots( );
 c02d25c:	f000 f852 	bl	c02d304 <psa_initialize_key_slots>
    if( status != PSA_SUCCESS )
 c02d260:	4605      	mov	r5, r0
 c02d262:	b950      	cbnz	r0, c02d27a <mbedcrypto__psa_crypto_init+0x82>
        goto exit;

    /* All done. */
    global_data.initialized = 1;
 c02d264:	f894 33d8 	ldrb.w	r3, [r4, #984]	; 0x3d8
 c02d268:	f043 0301 	orr.w	r3, r3, #1
 c02d26c:	f884 33d8 	strb.w	r3, [r4, #984]	; 0x3d8

exit:
    if( status != PSA_SUCCESS )
        mbedtls_psa_crypto_free( );
    return( status );
}
 c02d270:	4628      	mov	r0, r5
 c02d272:	b005      	add	sp, #20
 c02d274:	bd30      	pop	{r4, r5, pc}
        return( PSA_SUCCESS );
 c02d276:	2500      	movs	r5, #0
 c02d278:	e7fa      	b.n	c02d270 <mbedcrypto__psa_crypto_init+0x78>
        mbedtls_psa_crypto_free( );
 c02d27a:	f7ff ffa3 	bl	c02d1c4 <mbedtls_psa_crypto_free>
 c02d27e:	e7f7      	b.n	c02d270 <mbedcrypto__psa_crypto_init+0x78>
 c02d280:	00415350 	.word	0x00415350
 c02d284:	30035e40 	.word	0x30035e40
 c02d288:	0c027acd 	.word	0x0c027acd
 c02d28c:	0c027b15 	.word	0x0c027b15
 c02d290:	30035e48 	.word	0x30035e48
 c02d294:	300360c0 	.word	0x300360c0
 c02d298:	0c027b35 	.word	0x0c027b35

0c02d29c <psa_internal_allocate_key_slot>:
 * \retval #PSA_SUCCESS
 * \retval #PSA_ERROR_INSUFFICIENT_MEMORY
 */
static psa_status_t psa_internal_allocate_key_slot( psa_key_handle_t *handle )
{
    for( *handle = PSA_KEY_SLOT_COUNT; *handle != 0; --( *handle ) )
 c02d29c:	2320      	movs	r3, #32
{
 c02d29e:	b570      	push	{r4, r5, r6, lr}
    {
        psa_key_slot_t *slot = &global_data.key_slots[*handle - 1];
        if( ! slot->allocated )
 c02d2a0:	2624      	movs	r6, #36	; 0x24
 c02d2a2:	4d0a      	ldr	r5, [pc, #40]	; (c02d2cc <psa_internal_allocate_key_slot+0x30>)
    for( *handle = PSA_KEY_SLOT_COUNT; *handle != 0; --( *handle ) )
 c02d2a4:	8003      	strh	r3, [r0, #0]
 c02d2a6:	8803      	ldrh	r3, [r0, #0]
 c02d2a8:	b913      	cbnz	r3, c02d2b0 <psa_internal_allocate_key_slot+0x14>
        {
            slot->allocated = 1;
            return( PSA_SUCCESS );
        }
    }
    return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c02d2aa:	f06f 008c 	mvn.w	r0, #140	; 0x8c
 c02d2ae:	e00a      	b.n	c02d2c6 <psa_internal_allocate_key_slot+0x2a>
        psa_key_slot_t *slot = &global_data.key_slots[*handle - 1];
 c02d2b0:	3b01      	subs	r3, #1
        if( ! slot->allocated )
 c02d2b2:	fb06 5403 	mla	r4, r6, r3, r5
 c02d2b6:	7e22      	ldrb	r2, [r4, #24]
 c02d2b8:	f012 0101 	ands.w	r1, r2, #1
 c02d2bc:	d104      	bne.n	c02d2c8 <psa_internal_allocate_key_slot+0x2c>
            return( PSA_SUCCESS );
 c02d2be:	4608      	mov	r0, r1
            slot->allocated = 1;
 c02d2c0:	f042 0201 	orr.w	r2, r2, #1
 c02d2c4:	7622      	strb	r2, [r4, #24]
}
 c02d2c6:	bd70      	pop	{r4, r5, r6, pc}
    for( *handle = PSA_KEY_SLOT_COUNT; *handle != 0; --( *handle ) )
 c02d2c8:	8003      	strh	r3, [r0, #0]
 c02d2ca:	e7ec      	b.n	c02d2a6 <psa_internal_allocate_key_slot+0xa>
 c02d2cc:	30036220 	.word	0x30036220

0c02d2d0 <psa_get_key_slot>:
    if( ! global_data.key_slots_initialized )
 c02d2d0:	4b0b      	ldr	r3, [pc, #44]	; (c02d300 <psa_get_key_slot+0x30>)
 c02d2d2:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 c02d2d6:	07d2      	lsls	r2, r2, #31
 c02d2d8:	d50c      	bpl.n	c02d2f4 <psa_get_key_slot+0x24>
    if( handle == 0 || handle > ARRAY_LENGTH( global_data.key_slots ) )
 c02d2da:	3801      	subs	r0, #1
 c02d2dc:	b282      	uxth	r2, r0
 c02d2de:	2a1f      	cmp	r2, #31
 c02d2e0:	d80b      	bhi.n	c02d2fa <psa_get_key_slot+0x2a>
    slot = &global_data.key_slots[handle - 1];
 c02d2e2:	2224      	movs	r2, #36	; 0x24
 c02d2e4:	fb02 3000 	mla	r0, r2, r0, r3
    if( ! slot->allocated )
 c02d2e8:	7e03      	ldrb	r3, [r0, #24]
 c02d2ea:	07db      	lsls	r3, r3, #31
 c02d2ec:	d505      	bpl.n	c02d2fa <psa_get_key_slot+0x2a>
    *p_slot = slot;
 c02d2ee:	6008      	str	r0, [r1, #0]
    return( PSA_SUCCESS );
 c02d2f0:	2000      	movs	r0, #0
 c02d2f2:	4770      	bx	lr
        return( PSA_ERROR_BAD_STATE );
 c02d2f4:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02d2f8:	4770      	bx	lr
        return( PSA_ERROR_INVALID_HANDLE );
 c02d2fa:	f06f 0087 	mvn.w	r0, #135	; 0x87
}
 c02d2fe:	4770      	bx	lr
 c02d300:	30036220 	.word	0x30036220

0c02d304 <psa_initialize_key_slots>:
    global_data.key_slots_initialized = 1;
 c02d304:	4a04      	ldr	r2, [pc, #16]	; (c02d318 <psa_initialize_key_slots+0x14>)
}
 c02d306:	2000      	movs	r0, #0
    global_data.key_slots_initialized = 1;
 c02d308:	f892 3480 	ldrb.w	r3, [r2, #1152]	; 0x480
 c02d30c:	f043 0301 	orr.w	r3, r3, #1
 c02d310:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
}
 c02d314:	4770      	bx	lr
 c02d316:	bf00      	nop
 c02d318:	30036220 	.word	0x30036220

0c02d31c <psa_wipe_all_key_slots>:
{
 c02d31c:	b570      	push	{r4, r5, r6, lr}
 c02d31e:	2400      	movs	r4, #0
        (void) psa_wipe_key_slot( slot );
 c02d320:	2624      	movs	r6, #36	; 0x24
 c02d322:	4d07      	ldr	r5, [pc, #28]	; (c02d340 <psa_wipe_all_key_slots+0x24>)
 c02d324:	fb06 5004 	mla	r0, r6, r4, r5
 c02d328:	3401      	adds	r4, #1
 c02d32a:	f7fd feff 	bl	c02b12c <psa_wipe_key_slot>
    for( key = 1; key <= PSA_KEY_SLOT_COUNT; key++ )
 c02d32e:	2c20      	cmp	r4, #32
 c02d330:	d1f8      	bne.n	c02d324 <psa_wipe_all_key_slots+0x8>
    global_data.key_slots_initialized = 0;
 c02d332:	f895 3480 	ldrb.w	r3, [r5, #1152]	; 0x480
 c02d336:	f36f 0300 	bfc	r3, #0, #1
 c02d33a:	f885 3480 	strb.w	r3, [r5, #1152]	; 0x480
}
 c02d33e:	bd70      	pop	{r4, r5, r6, pc}
 c02d340:	30036220 	.word	0x30036220

0c02d344 <mbedcrypto__psa_allocate_key>:
    return( psa_wipe_key_slot( slot ) );
}

psa_status_t psa_allocate_key( psa_key_handle_t *handle )
{
    *handle = 0;
 c02d344:	2200      	movs	r2, #0
 c02d346:	8002      	strh	r2, [r0, #0]
    return( psa_internal_allocate_key_slot( handle ) );
 c02d348:	f7ff bfa8 	b.w	c02d29c <psa_internal_allocate_key_slot>

0c02d34c <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 c02d34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02d350:	b099      	sub	sp, #100	; 0x64
 c02d352:	4614      	mov	r4, r2
    uint16_t order;    /* Order of 2 in DE - 1 */

    mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */
    mbedtls_mpi K;  /* Temporary holding the current candidate */

    const unsigned char primes[] = { 2,
 c02d354:	aa0a      	add	r2, sp, #40	; 0x28
{
 c02d356:	4605      	mov	r5, r0
 c02d358:	4689      	mov	r9, r1
 c02d35a:	4690      	mov	r8, r2
 c02d35c:	461f      	mov	r7, r3
    const unsigned char primes[] = { 2,
 c02d35e:	4b78      	ldr	r3, [pc, #480]	; (c02d540 <mbedtls_rsa_deduce_primes+0x1f4>)
{
 c02d360:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
    const unsigned char primes[] = { 2,
 c02d364:	f103 0c30 	add.w	ip, r3, #48	; 0x30
 c02d368:	4616      	mov	r6, r2
 c02d36a:	6818      	ldr	r0, [r3, #0]
 c02d36c:	6859      	ldr	r1, [r3, #4]
 c02d36e:	3308      	adds	r3, #8
 c02d370:	c603      	stmia	r6!, {r0, r1}
 c02d372:	4563      	cmp	r3, ip
 c02d374:	4632      	mov	r2, r6
 c02d376:	d1f7      	bne.n	c02d368 <mbedtls_rsa_deduce_primes+0x1c>
 c02d378:	6818      	ldr	r0, [r3, #0]
 c02d37a:	889b      	ldrh	r3, [r3, #4]
 c02d37c:	6030      	str	r0, [r6, #0]
 c02d37e:	80b3      	strh	r3, [r6, #4]
         229,  233,  239,  241,  251
    };

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 c02d380:	b92f      	cbnz	r7, c02d38e <mbedtls_rsa_deduce_primes+0x42>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c02d382:	f06f 0403 	mvn.w	r4, #3
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
 c02d386:	4620      	mov	r0, r4
 c02d388:	b019      	add	sp, #100	; 0x64
 c02d38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 c02d38e:	f1ba 0f00 	cmp.w	sl, #0
 c02d392:	d0f6      	beq.n	c02d382 <mbedtls_rsa_deduce_primes+0x36>
 c02d394:	68bb      	ldr	r3, [r7, #8]
 c02d396:	2b00      	cmp	r3, #0
 c02d398:	d1f3      	bne.n	c02d382 <mbedtls_rsa_deduce_primes+0x36>
 c02d39a:	f8da 1008 	ldr.w	r1, [sl, #8]
 c02d39e:	2900      	cmp	r1, #0
 c02d3a0:	d1ef      	bne.n	c02d382 <mbedtls_rsa_deduce_primes+0x36>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 c02d3a2:	4628      	mov	r0, r5
 c02d3a4:	f7f7 ff6c 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02d3a8:	2800      	cmp	r0, #0
 c02d3aa:	ddea      	ble.n	c02d382 <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 c02d3ac:	2101      	movs	r1, #1
 c02d3ae:	4620      	mov	r0, r4
 c02d3b0:	f7f7 ff66 	bl	c025280 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 c02d3b4:	2800      	cmp	r0, #0
 c02d3b6:	dde4      	ble.n	c02d382 <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 c02d3b8:	4629      	mov	r1, r5
 c02d3ba:	4620      	mov	r0, r4
 c02d3bc:	f7f7 ff20 	bl	c025200 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 c02d3c0:	2800      	cmp	r0, #0
 c02d3c2:	dade      	bge.n	c02d382 <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 c02d3c4:	2101      	movs	r1, #1
 c02d3c6:	4648      	mov	r0, r9
 c02d3c8:	f7f7 ff5a 	bl	c025280 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 c02d3cc:	2800      	cmp	r0, #0
 c02d3ce:	ddd8      	ble.n	c02d382 <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 c02d3d0:	4629      	mov	r1, r5
 c02d3d2:	4648      	mov	r0, r9
 c02d3d4:	f7f7 ff14 	bl	c025200 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 c02d3d8:	2800      	cmp	r0, #0
 c02d3da:	dad2      	bge.n	c02d382 <mbedtls_rsa_deduce_primes+0x36>
    mbedtls_mpi_init( &K );
 c02d3dc:	a807      	add	r0, sp, #28
    mbedtls_mpi_init( &T );
 c02d3de:	ae04      	add	r6, sp, #16
    mbedtls_mpi_init( &K );
 c02d3e0:	f7f7 fbca 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 c02d3e4:	4630      	mov	r0, r6
 c02d3e6:	f7f7 fbc7 	bl	c024b78 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 c02d3ea:	4621      	mov	r1, r4
 c02d3ec:	464a      	mov	r2, r9
 c02d3ee:	4630      	mov	r0, r6
 c02d3f0:	f7f8 f86c 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c02d3f4:	4604      	mov	r4, r0
 c02d3f6:	b980      	cbnz	r0, c02d41a <mbedtls_rsa_deduce_primes+0xce>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 c02d3f8:	2201      	movs	r2, #1
 c02d3fa:	4631      	mov	r1, r6
 c02d3fc:	4630      	mov	r0, r6
 c02d3fe:	f7f8 f84f 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c02d402:	4604      	mov	r4, r0
 c02d404:	b948      	cbnz	r0, c02d41a <mbedtls_rsa_deduce_primes+0xce>
    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 c02d406:	4630      	mov	r0, r6
 c02d408:	f7f7 fccb 	bl	c024da2 <mbedtls_mpi_lsb>
 c02d40c:	fa1f fb80 	uxth.w	fp, r0
 c02d410:	f1bb 0f00 	cmp.w	fp, #0
 c02d414:	d108      	bne.n	c02d428 <mbedtls_rsa_deduce_primes+0xdc>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 c02d416:	f06f 0403 	mvn.w	r4, #3
    mbedtls_mpi_free( &K );
 c02d41a:	a807      	add	r0, sp, #28
 c02d41c:	f7f7 fbb2 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 c02d420:	a804      	add	r0, sp, #16
 c02d422:	f7f7 fbaf 	bl	c024b84 <mbedtls_mpi_free>
    return( ret );
 c02d426:	e7ae      	b.n	c02d386 <mbedtls_rsa_deduce_primes+0x3a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 c02d428:	b281      	uxth	r1, r0
 c02d42a:	4630      	mov	r0, r6
 c02d42c:	f7f7 fe18 	bl	c025060 <mbedtls_mpi_shift_r>
 c02d430:	4604      	mov	r4, r0
 c02d432:	2800      	cmp	r0, #0
 c02d434:	d1f1      	bne.n	c02d41a <mbedtls_rsa_deduce_primes+0xce>
 c02d436:	4681      	mov	r9, r0
    if( N->p[0] % 8 == 1 )
 c02d438:	68ab      	ldr	r3, [r5, #8]
 c02d43a:	681b      	ldr	r3, [r3, #0]
 c02d43c:	f003 0307 	and.w	r3, r3, #7
 c02d440:	1e5a      	subs	r2, r3, #1
 c02d442:	4253      	negs	r3, r2
 c02d444:	4153      	adcs	r3, r2
    for( ; attempt < num_primes; ++attempt )
 c02d446:	b29a      	uxth	r2, r3
        mbedtls_mpi_lset( &K, primes[attempt] );
 c02d448:	4443      	add	r3, r8
    for( ; attempt < num_primes; ++attempt )
 c02d44a:	9202      	str	r2, [sp, #8]
        mbedtls_mpi_lset( &K, primes[attempt] );
 c02d44c:	9303      	str	r3, [sp, #12]
 c02d44e:	9b03      	ldr	r3, [sp, #12]
 c02d450:	a807      	add	r0, sp, #28
 c02d452:	f813 1009 	ldrb.w	r1, [r3, r9]
 c02d456:	f7f7 fc4f 	bl	c024cf8 <mbedtls_mpi_lset>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 c02d45a:	462a      	mov	r2, r5
 c02d45c:	a907      	add	r1, sp, #28
 c02d45e:	4638      	mov	r0, r7
 c02d460:	f7f8 fd9d 	bl	c025f9e <mbedtls_mpi_gcd>
 c02d464:	4604      	mov	r4, r0
 c02d466:	2800      	cmp	r0, #0
 c02d468:	d1d7      	bne.n	c02d41a <mbedtls_rsa_deduce_primes+0xce>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 c02d46a:	2101      	movs	r1, #1
 c02d46c:	4638      	mov	r0, r7
 c02d46e:	f7f7 ff07 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02d472:	b138      	cbz	r0, c02d484 <mbedtls_rsa_deduce_primes+0x138>
    for( ; attempt < num_primes; ++attempt )
 c02d474:	9b02      	ldr	r3, [sp, #8]
 c02d476:	f109 0901 	add.w	r9, r9, #1
 c02d47a:	444b      	add	r3, r9
 c02d47c:	b29b      	uxth	r3, r3
 c02d47e:	2b35      	cmp	r3, #53	; 0x35
 c02d480:	d9e5      	bls.n	c02d44e <mbedtls_rsa_deduce_primes+0x102>
 c02d482:	e7c8      	b.n	c02d416 <mbedtls_rsa_deduce_primes+0xca>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 c02d484:	a907      	add	r1, sp, #28
 c02d486:	f8cd a000 	str.w	sl, [sp]
 c02d48a:	462b      	mov	r3, r5
 c02d48c:	4632      	mov	r2, r6
 c02d48e:	4608      	mov	r0, r1
 c02d490:	f7f8 fb4e 	bl	c025b30 <mbedtls_mpi_exp_mod>
 c02d494:	4604      	mov	r4, r0
 c02d496:	2800      	cmp	r0, #0
 c02d498:	d1bf      	bne.n	c02d41a <mbedtls_rsa_deduce_primes+0xce>
        for( iter = 1; iter <= order; ++iter )
 c02d49a:	f04f 0801 	mov.w	r8, #1
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 c02d49e:	2101      	movs	r1, #1
 c02d4a0:	a807      	add	r0, sp, #28
 c02d4a2:	f7f7 feed 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02d4a6:	2800      	cmp	r0, #0
 c02d4a8:	d042      	beq.n	c02d530 <mbedtls_rsa_deduce_primes+0x1e4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 c02d4aa:	a907      	add	r1, sp, #28
 c02d4ac:	2201      	movs	r2, #1
 c02d4ae:	4608      	mov	r0, r1
 c02d4b0:	f7f7 ffe0 	bl	c025474 <mbedtls_mpi_add_int>
 c02d4b4:	4604      	mov	r4, r0
 c02d4b6:	2800      	cmp	r0, #0
 c02d4b8:	d1af      	bne.n	c02d41a <mbedtls_rsa_deduce_primes+0xce>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 c02d4ba:	462a      	mov	r2, r5
 c02d4bc:	a907      	add	r1, sp, #28
 c02d4be:	4638      	mov	r0, r7
 c02d4c0:	f7f8 fd6d 	bl	c025f9e <mbedtls_mpi_gcd>
 c02d4c4:	4604      	mov	r4, r0
 c02d4c6:	2800      	cmp	r0, #0
 c02d4c8:	d1a7      	bne.n	c02d41a <mbedtls_rsa_deduce_primes+0xce>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 c02d4ca:	2101      	movs	r1, #1
 c02d4cc:	4638      	mov	r0, r7
 c02d4ce:	f7f7 fed7 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02d4d2:	2801      	cmp	r0, #1
 c02d4d4:	d10d      	bne.n	c02d4f2 <mbedtls_rsa_deduce_primes+0x1a6>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 c02d4d6:	4629      	mov	r1, r5
 c02d4d8:	4638      	mov	r0, r7
 c02d4da:	f7f7 fe91 	bl	c025200 <mbedtls_mpi_cmp_mpi>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 c02d4de:	3001      	adds	r0, #1
 c02d4e0:	d107      	bne.n	c02d4f2 <mbedtls_rsa_deduce_primes+0x1a6>
                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 c02d4e2:	4621      	mov	r1, r4
 c02d4e4:	463b      	mov	r3, r7
 c02d4e6:	462a      	mov	r2, r5
 c02d4e8:	4650      	mov	r0, sl
 c02d4ea:	f7f8 f8f5 	bl	c0256d8 <mbedtls_mpi_div_mpi>
 c02d4ee:	4604      	mov	r4, r0
cleanup:
 c02d4f0:	e793      	b.n	c02d41a <mbedtls_rsa_deduce_primes+0xce>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 c02d4f2:	a907      	add	r1, sp, #28
 c02d4f4:	2201      	movs	r2, #1
 c02d4f6:	4608      	mov	r0, r1
 c02d4f8:	f7f7 ffd2 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c02d4fc:	4604      	mov	r4, r0
 c02d4fe:	2800      	cmp	r0, #0
 c02d500:	d18b      	bne.n	c02d41a <mbedtls_rsa_deduce_primes+0xce>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 c02d502:	aa07      	add	r2, sp, #28
 c02d504:	4611      	mov	r1, r2
 c02d506:	4610      	mov	r0, r2
 c02d508:	f7f7 ffe0 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c02d50c:	4604      	mov	r4, r0
 c02d50e:	2800      	cmp	r0, #0
 c02d510:	d183      	bne.n	c02d41a <mbedtls_rsa_deduce_primes+0xce>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 c02d512:	a907      	add	r1, sp, #28
 c02d514:	462a      	mov	r2, r5
 c02d516:	4608      	mov	r0, r1
 c02d518:	f7f8 fa94 	bl	c025a44 <mbedtls_mpi_mod_mpi>
 c02d51c:	4604      	mov	r4, r0
 c02d51e:	2800      	cmp	r0, #0
 c02d520:	f47f af7b 	bne.w	c02d41a <mbedtls_rsa_deduce_primes+0xce>
        for( iter = 1; iter <= order; ++iter )
 c02d524:	f108 0801 	add.w	r8, r8, #1
 c02d528:	fa1f f888 	uxth.w	r8, r8
 c02d52c:	45c3      	cmp	fp, r8
 c02d52e:	d2b6      	bcs.n	c02d49e <mbedtls_rsa_deduce_primes+0x152>
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 c02d530:	2101      	movs	r1, #1
 c02d532:	a807      	add	r0, sp, #28
 c02d534:	f7f7 fea4 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02d538:	2800      	cmp	r0, #0
 c02d53a:	d09b      	beq.n	c02d474 <mbedtls_rsa_deduce_primes+0x128>
 c02d53c:	e76b      	b.n	c02d416 <mbedtls_rsa_deduce_primes+0xca>
 c02d53e:	bf00      	nop
 c02d540:	0c0368cb 	.word	0x0c0368cb

0c02d544 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 c02d544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c02d548:	4604      	mov	r4, r0
 c02d54a:	b086      	sub	sp, #24
 c02d54c:	460f      	mov	r7, r1
 c02d54e:	4616      	mov	r6, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 c02d550:	461d      	mov	r5, r3
 c02d552:	b92b      	cbnz	r3, c02d560 <mbedtls_rsa_deduce_private_exponent+0x1c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c02d554:	f06f 0403 	mvn.w	r4, #3

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &L );

    return( ret );
}
 c02d558:	4620      	mov	r0, r4
 c02d55a:	b006      	add	sp, #24
 c02d55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 c02d560:	2100      	movs	r1, #0
 c02d562:	4618      	mov	r0, r3
 c02d564:	f7f7 fe8c 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02d568:	4680      	mov	r8, r0
 c02d56a:	2800      	cmp	r0, #0
 c02d56c:	d1f2      	bne.n	c02d554 <mbedtls_rsa_deduce_private_exponent+0x10>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 c02d56e:	2101      	movs	r1, #1
 c02d570:	4620      	mov	r0, r4
 c02d572:	f7f7 fe85 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02d576:	2800      	cmp	r0, #0
 c02d578:	ddec      	ble.n	c02d554 <mbedtls_rsa_deduce_private_exponent+0x10>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 c02d57a:	2101      	movs	r1, #1
 c02d57c:	4638      	mov	r0, r7
 c02d57e:	f7f7 fe7f 	bl	c025280 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 c02d582:	2800      	cmp	r0, #0
 c02d584:	dde6      	ble.n	c02d554 <mbedtls_rsa_deduce_private_exponent+0x10>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 c02d586:	4641      	mov	r1, r8
 c02d588:	4630      	mov	r0, r6
 c02d58a:	f7f7 fe79 	bl	c025280 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 c02d58e:	2800      	cmp	r0, #0
 c02d590:	d0e0      	beq.n	c02d554 <mbedtls_rsa_deduce_private_exponent+0x10>
    mbedtls_mpi_init( &K );
 c02d592:	4668      	mov	r0, sp
 c02d594:	f7f7 faf0 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 c02d598:	a803      	add	r0, sp, #12
 c02d59a:	f7f7 faed 	bl	c024b78 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 c02d59e:	4621      	mov	r1, r4
 c02d5a0:	2201      	movs	r2, #1
 c02d5a2:	4668      	mov	r0, sp
 c02d5a4:	f7f7 ff7c 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c02d5a8:	4604      	mov	r4, r0
 c02d5aa:	bb10      	cbnz	r0, c02d5f2 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 c02d5ac:	2201      	movs	r2, #1
 c02d5ae:	4639      	mov	r1, r7
 c02d5b0:	a803      	add	r0, sp, #12
 c02d5b2:	f7f7 ff75 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c02d5b6:	4604      	mov	r4, r0
 c02d5b8:	b9d8      	cbnz	r0, c02d5f2 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 c02d5ba:	aa03      	add	r2, sp, #12
 c02d5bc:	4669      	mov	r1, sp
 c02d5be:	4628      	mov	r0, r5
 c02d5c0:	f7f8 fced 	bl	c025f9e <mbedtls_mpi_gcd>
 c02d5c4:	4604      	mov	r4, r0
 c02d5c6:	b9a0      	cbnz	r0, c02d5f2 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 c02d5c8:	aa03      	add	r2, sp, #12
 c02d5ca:	4669      	mov	r1, sp
 c02d5cc:	4668      	mov	r0, sp
 c02d5ce:	f7f7 ff7d 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c02d5d2:	4604      	mov	r4, r0
 c02d5d4:	b968      	cbnz	r0, c02d5f2 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 c02d5d6:	4601      	mov	r1, r0
 c02d5d8:	462b      	mov	r3, r5
 c02d5da:	466a      	mov	r2, sp
 c02d5dc:	4668      	mov	r0, sp
 c02d5de:	f7f8 f87b 	bl	c0256d8 <mbedtls_mpi_div_mpi>
 c02d5e2:	4604      	mov	r4, r0
 c02d5e4:	b928      	cbnz	r0, c02d5f2 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 c02d5e6:	466a      	mov	r2, sp
 c02d5e8:	4631      	mov	r1, r6
 c02d5ea:	4628      	mov	r0, r5
 c02d5ec:	f7f8 fe51 	bl	c026292 <mbedtls_mpi_inv_mod>
 c02d5f0:	4604      	mov	r4, r0
    mbedtls_mpi_free( &K );
 c02d5f2:	4668      	mov	r0, sp
 c02d5f4:	f7f7 fac6 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 c02d5f8:	a803      	add	r0, sp, #12
 c02d5fa:	f7f7 fac3 	bl	c024b84 <mbedtls_mpi_free>
    return( ret );
 c02d5fe:	e7ab      	b.n	c02d558 <mbedtls_rsa_deduce_private_exponent+0x14>

0c02d600 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 c02d600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c02d604:	4699      	mov	r9, r3
 c02d606:	b087      	sub	sp, #28
 c02d608:	4604      	mov	r4, r0
 c02d60a:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	; 0x38
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 c02d60e:	4668      	mov	r0, sp
{
 c02d610:	460d      	mov	r5, r1
 c02d612:	4690      	mov	r8, r2
    mbedtls_mpi_init( &K );
 c02d614:	f7f7 fab0 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 c02d618:	a803      	add	r0, sp, #12
 c02d61a:	f7f7 faad 	bl	c024b78 <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 c02d61e:	f1b9 0f00 	cmp.w	r9, #0
 c02d622:	d104      	bne.n	c02d62e <mbedtls_rsa_validate_crt+0x2e>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 c02d624:	bb67      	cbnz	r7, c02d680 <mbedtls_rsa_validate_crt+0x80>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 c02d626:	2e00      	cmp	r6, #0
 c02d628:	d145      	bne.n	c02d6b6 <mbedtls_rsa_validate_crt+0xb6>
{
 c02d62a:	2400      	movs	r4, #0
 c02d62c:	e001      	b.n	c02d632 <mbedtls_rsa_validate_crt+0x32>
        if( P == NULL )
 c02d62e:	b954      	cbnz	r4, c02d646 <mbedtls_rsa_validate_crt+0x46>
{
 c02d630:	4c34      	ldr	r4, [pc, #208]	; (c02d704 <mbedtls_rsa_validate_crt+0x104>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
 c02d632:	4668      	mov	r0, sp
 c02d634:	f7f7 faa6 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 c02d638:	a803      	add	r0, sp, #12
 c02d63a:	f7f7 faa3 	bl	c024b84 <mbedtls_mpi_free>

    return( ret );
}
 c02d63e:	4620      	mov	r0, r4
 c02d640:	b007      	add	sp, #28
 c02d642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 c02d646:	2201      	movs	r2, #1
 c02d648:	4621      	mov	r1, r4
 c02d64a:	4668      	mov	r0, sp
 c02d64c:	f7f7 ff28 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c02d650:	2800      	cmp	r0, #0
 c02d652:	d14d      	bne.n	c02d6f0 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 c02d654:	4642      	mov	r2, r8
 c02d656:	4649      	mov	r1, r9
 c02d658:	a803      	add	r0, sp, #12
 c02d65a:	f7f7 fee8 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c02d65e:	2800      	cmp	r0, #0
 c02d660:	d146      	bne.n	c02d6f0 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 c02d662:	a903      	add	r1, sp, #12
 c02d664:	466a      	mov	r2, sp
 c02d666:	4608      	mov	r0, r1
 c02d668:	f7f8 f9ec 	bl	c025a44 <mbedtls_mpi_mod_mpi>
 c02d66c:	2800      	cmp	r0, #0
 c02d66e:	d13f      	bne.n	c02d6f0 <mbedtls_rsa_validate_crt+0xf0>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 c02d670:	4601      	mov	r1, r0
 c02d672:	a803      	add	r0, sp, #12
 c02d674:	f7f7 fe04 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02d678:	2800      	cmp	r0, #0
 c02d67a:	d0d3      	beq.n	c02d624 <mbedtls_rsa_validate_crt+0x24>
{
 c02d67c:	4c22      	ldr	r4, [pc, #136]	; (c02d708 <mbedtls_rsa_validate_crt+0x108>)
 c02d67e:	e7d8      	b.n	c02d632 <mbedtls_rsa_validate_crt+0x32>
        if( Q == NULL )
 c02d680:	2d00      	cmp	r5, #0
 c02d682:	d0d5      	beq.n	c02d630 <mbedtls_rsa_validate_crt+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 c02d684:	2201      	movs	r2, #1
 c02d686:	4629      	mov	r1, r5
 c02d688:	4668      	mov	r0, sp
 c02d68a:	f7f7 ff09 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c02d68e:	bb78      	cbnz	r0, c02d6f0 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 c02d690:	4642      	mov	r2, r8
 c02d692:	4639      	mov	r1, r7
 c02d694:	a803      	add	r0, sp, #12
 c02d696:	f7f7 feca 	bl	c02542e <mbedtls_mpi_sub_mpi>
 c02d69a:	bb48      	cbnz	r0, c02d6f0 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 c02d69c:	a903      	add	r1, sp, #12
 c02d69e:	466a      	mov	r2, sp
 c02d6a0:	4608      	mov	r0, r1
 c02d6a2:	f7f8 f9cf 	bl	c025a44 <mbedtls_mpi_mod_mpi>
 c02d6a6:	bb18      	cbnz	r0, c02d6f0 <mbedtls_rsa_validate_crt+0xf0>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 c02d6a8:	4601      	mov	r1, r0
 c02d6aa:	a803      	add	r0, sp, #12
 c02d6ac:	f7f7 fde8 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02d6b0:	2800      	cmp	r0, #0
 c02d6b2:	d1e3      	bne.n	c02d67c <mbedtls_rsa_validate_crt+0x7c>
 c02d6b4:	e7b7      	b.n	c02d626 <mbedtls_rsa_validate_crt+0x26>
        if( P == NULL || Q == NULL )
 c02d6b6:	2c00      	cmp	r4, #0
 c02d6b8:	d0ba      	beq.n	c02d630 <mbedtls_rsa_validate_crt+0x30>
 c02d6ba:	2d00      	cmp	r5, #0
 c02d6bc:	d0b8      	beq.n	c02d630 <mbedtls_rsa_validate_crt+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 c02d6be:	462a      	mov	r2, r5
 c02d6c0:	4631      	mov	r1, r6
 c02d6c2:	4668      	mov	r0, sp
 c02d6c4:	f7f7 ff02 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c02d6c8:	b990      	cbnz	r0, c02d6f0 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 c02d6ca:	2201      	movs	r2, #1
 c02d6cc:	4669      	mov	r1, sp
 c02d6ce:	4668      	mov	r0, sp
 c02d6d0:	f7f7 fee6 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c02d6d4:	b960      	cbnz	r0, c02d6f0 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 c02d6d6:	4622      	mov	r2, r4
 c02d6d8:	4669      	mov	r1, sp
 c02d6da:	4668      	mov	r0, sp
 c02d6dc:	f7f8 f9b2 	bl	c025a44 <mbedtls_mpi_mod_mpi>
 c02d6e0:	b930      	cbnz	r0, c02d6f0 <mbedtls_rsa_validate_crt+0xf0>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 c02d6e2:	4601      	mov	r1, r0
 c02d6e4:	4668      	mov	r0, sp
 c02d6e6:	f7f7 fdcb 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02d6ea:	2800      	cmp	r0, #0
 c02d6ec:	d1c6      	bne.n	c02d67c <mbedtls_rsa_validate_crt+0x7c>
 c02d6ee:	e79c      	b.n	c02d62a <mbedtls_rsa_validate_crt+0x2a>
    if( ret != 0 &&
 c02d6f0:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 c02d6f4:	d0c2      	beq.n	c02d67c <mbedtls_rsa_validate_crt+0x7c>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 c02d6f6:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 c02d6fa:	d099      	beq.n	c02d630 <mbedtls_rsa_validate_crt+0x30>
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 c02d6fc:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 c02d700:	e797      	b.n	c02d632 <mbedtls_rsa_validate_crt+0x32>
 c02d702:	bf00      	nop
 c02d704:	ffffbf80 	.word	0xffffbf80
 c02d708:	ffffbe00 	.word	0xffffbe00

0c02d70c <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 c02d70c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c02d710:	b087      	sub	sp, #28
 c02d712:	4605      	mov	r5, r0
 c02d714:	e9dd 940e 	ldrd	r9, r4, [sp, #56]	; 0x38
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 c02d718:	4668      	mov	r0, sp
{
 c02d71a:	460e      	mov	r6, r1
 c02d71c:	4617      	mov	r7, r2
 c02d71e:	4698      	mov	r8, r3
    mbedtls_mpi_init( &K );
 c02d720:	f7f7 fa2a 	bl	c024b78 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 c02d724:	a803      	add	r0, sp, #12
 c02d726:	f7f7 fa27 	bl	c024b78 <mbedtls_mpi_init>
    /*
     * When generating keys, the strongest security we support aims for an error
     * rate of at most 2^-100 and we are aiming for the same certainty here as
     * well.
     */
    if( f_rng != NULL && P != NULL &&
 c02d72a:	2c00      	cmp	r4, #0
 c02d72c:	f000 808f 	beq.w	c02d84e <mbedtls_rsa_validate_params+0x142>
 c02d730:	b146      	cbz	r6, c02d744 <mbedtls_rsa_validate_params+0x38>
 c02d732:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c02d734:	4622      	mov	r2, r4
 c02d736:	2132      	movs	r1, #50	; 0x32
 c02d738:	4630      	mov	r0, r6
 c02d73a:	f7f8 fefd 	bl	c026538 <mbedtls_mpi_is_prime_ext>
 c02d73e:	2800      	cmp	r0, #0
 c02d740:	f040 80b7 	bne.w	c02d8b2 <mbedtls_rsa_validate_params+0x1a6>
    {
        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
        goto cleanup;
    }

    if( f_rng != NULL && Q != NULL &&
 c02d744:	2f00      	cmp	r7, #0
 c02d746:	f000 8085 	beq.w	c02d854 <mbedtls_rsa_validate_params+0x148>
 c02d74a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c02d74c:	4622      	mov	r2, r4
 c02d74e:	2132      	movs	r1, #50	; 0x32
 c02d750:	4638      	mov	r0, r7
 c02d752:	f7f8 fef1 	bl	c026538 <mbedtls_mpi_is_prime_ext>
 c02d756:	2800      	cmp	r0, #0
 c02d758:	f040 80ab 	bne.w	c02d8b2 <mbedtls_rsa_validate_params+0x1a6>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 c02d75c:	2e00      	cmp	r6, #0
 c02d75e:	d079      	beq.n	c02d854 <mbedtls_rsa_validate_params+0x148>
 c02d760:	b1d5      	cbz	r5, c02d798 <mbedtls_rsa_validate_params+0x8c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 c02d762:	463a      	mov	r2, r7
 c02d764:	4631      	mov	r1, r6
 c02d766:	4668      	mov	r0, sp
 c02d768:	f7f7 feb0 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c02d76c:	4604      	mov	r4, r0
 c02d76e:	2800      	cmp	r0, #0
 c02d770:	d173      	bne.n	c02d85a <mbedtls_rsa_validate_params+0x14e>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 c02d772:	2101      	movs	r1, #1
 c02d774:	4628      	mov	r0, r5
 c02d776:	f7f7 fd83 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02d77a:	2800      	cmp	r0, #0
 c02d77c:	f340 8099 	ble.w	c02d8b2 <mbedtls_rsa_validate_params+0x1a6>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 c02d780:	4629      	mov	r1, r5
 c02d782:	4668      	mov	r0, sp
 c02d784:	f7f7 fd3c 	bl	c025200 <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 c02d788:	2800      	cmp	r0, #0
 c02d78a:	f040 8092 	bne.w	c02d8b2 <mbedtls_rsa_validate_params+0x1a6>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 c02d78e:	f1b8 0f00 	cmp.w	r8, #0
 c02d792:	d172      	bne.n	c02d87a <mbedtls_rsa_validate_params+0x16e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 c02d794:	2e00      	cmp	r6, #0
 c02d796:	d05f      	beq.n	c02d858 <mbedtls_rsa_validate_params+0x14c>
 c02d798:	2f00      	cmp	r7, #0
 c02d79a:	d05d      	beq.n	c02d858 <mbedtls_rsa_validate_params+0x14c>
 c02d79c:	f1b8 0f00 	cmp.w	r8, #0
 c02d7a0:	d05a      	beq.n	c02d858 <mbedtls_rsa_validate_params+0x14c>
 c02d7a2:	f1b9 0f00 	cmp.w	r9, #0
 c02d7a6:	d057      	beq.n	c02d858 <mbedtls_rsa_validate_params+0x14c>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 c02d7a8:	2101      	movs	r1, #1
 c02d7aa:	4630      	mov	r0, r6
 c02d7ac:	f7f7 fd68 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02d7b0:	2800      	cmp	r0, #0
 c02d7b2:	dd7e      	ble.n	c02d8b2 <mbedtls_rsa_validate_params+0x1a6>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 c02d7b4:	2101      	movs	r1, #1
 c02d7b6:	4638      	mov	r0, r7
 c02d7b8:	f7f7 fd62 	bl	c025280 <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 c02d7bc:	2800      	cmp	r0, #0
 c02d7be:	dd78      	ble.n	c02d8b2 <mbedtls_rsa_validate_params+0x1a6>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 c02d7c0:	464a      	mov	r2, r9
 c02d7c2:	4641      	mov	r1, r8
 c02d7c4:	4668      	mov	r0, sp
 c02d7c6:	f7f7 fe81 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c02d7ca:	4604      	mov	r4, r0
 c02d7cc:	2800      	cmp	r0, #0
 c02d7ce:	d144      	bne.n	c02d85a <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 c02d7d0:	2201      	movs	r2, #1
 c02d7d2:	4669      	mov	r1, sp
 c02d7d4:	4668      	mov	r0, sp
 c02d7d6:	f7f7 fe63 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c02d7da:	4604      	mov	r4, r0
 c02d7dc:	2800      	cmp	r0, #0
 c02d7de:	d13c      	bne.n	c02d85a <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 c02d7e0:	2201      	movs	r2, #1
 c02d7e2:	4631      	mov	r1, r6
 c02d7e4:	a803      	add	r0, sp, #12
 c02d7e6:	f7f7 fe5b 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c02d7ea:	4604      	mov	r4, r0
 c02d7ec:	bba8      	cbnz	r0, c02d85a <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 c02d7ee:	aa03      	add	r2, sp, #12
 c02d7f0:	4669      	mov	r1, sp
 c02d7f2:	4668      	mov	r0, sp
 c02d7f4:	f7f8 f926 	bl	c025a44 <mbedtls_mpi_mod_mpi>
 c02d7f8:	4604      	mov	r4, r0
 c02d7fa:	bb70      	cbnz	r0, c02d85a <mbedtls_rsa_validate_params+0x14e>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 c02d7fc:	4601      	mov	r1, r0
 c02d7fe:	4668      	mov	r0, sp
 c02d800:	f7f7 fd3e 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02d804:	2800      	cmp	r0, #0
 c02d806:	d154      	bne.n	c02d8b2 <mbedtls_rsa_validate_params+0x1a6>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 c02d808:	464a      	mov	r2, r9
 c02d80a:	4641      	mov	r1, r8
 c02d80c:	4668      	mov	r0, sp
 c02d80e:	f7f7 fe5d 	bl	c0254cc <mbedtls_mpi_mul_mpi>
 c02d812:	4604      	mov	r4, r0
 c02d814:	bb08      	cbnz	r0, c02d85a <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 c02d816:	2201      	movs	r2, #1
 c02d818:	4669      	mov	r1, sp
 c02d81a:	4668      	mov	r0, sp
 c02d81c:	f7f7 fe40 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c02d820:	4604      	mov	r4, r0
 c02d822:	b9d0      	cbnz	r0, c02d85a <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 c02d824:	2201      	movs	r2, #1
 c02d826:	4639      	mov	r1, r7
 c02d828:	a803      	add	r0, sp, #12
 c02d82a:	f7f7 fe39 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c02d82e:	4604      	mov	r4, r0
 c02d830:	b998      	cbnz	r0, c02d85a <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 c02d832:	aa03      	add	r2, sp, #12
 c02d834:	4669      	mov	r1, sp
 c02d836:	4668      	mov	r0, sp
 c02d838:	f7f8 f904 	bl	c025a44 <mbedtls_mpi_mod_mpi>
 c02d83c:	4604      	mov	r4, r0
 c02d83e:	b960      	cbnz	r0, c02d85a <mbedtls_rsa_validate_params+0x14e>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 c02d840:	4601      	mov	r1, r0
 c02d842:	4668      	mov	r0, sp
 c02d844:	f7f7 fd1c 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02d848:	4604      	mov	r4, r0
 c02d84a:	b130      	cbz	r0, c02d85a <mbedtls_rsa_validate_params+0x14e>
 c02d84c:	e031      	b.n	c02d8b2 <mbedtls_rsa_validate_params+0x1a6>
    if( P != NULL && Q != NULL && N != NULL )
 c02d84e:	b10e      	cbz	r6, c02d854 <mbedtls_rsa_validate_params+0x148>
 c02d850:	2f00      	cmp	r7, #0
 c02d852:	d185      	bne.n	c02d760 <mbedtls_rsa_validate_params+0x54>
    if( N != NULL && D != NULL && E != NULL )
 c02d854:	2d00      	cmp	r5, #0
 c02d856:	d19a      	bne.n	c02d78e <mbedtls_rsa_validate_params+0x82>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 c02d858:	2400      	movs	r4, #0
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 c02d85a:	4668      	mov	r0, sp
 c02d85c:	f7f7 f992 	bl	c024b84 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 c02d860:	a803      	add	r0, sp, #12
 c02d862:	f7f7 f98f 	bl	c024b84 <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 c02d866:	b124      	cbz	r4, c02d872 <mbedtls_rsa_validate_params+0x166>
 c02d868:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 c02d86c:	d001      	beq.n	c02d872 <mbedtls_rsa_validate_params+0x166>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 c02d86e:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
}
 c02d872:	4620      	mov	r0, r4
 c02d874:	b007      	add	sp, #28
 c02d876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( N != NULL && D != NULL && E != NULL )
 c02d87a:	f1b9 0f00 	cmp.w	r9, #0
 c02d87e:	d089      	beq.n	c02d794 <mbedtls_rsa_validate_params+0x88>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 c02d880:	2101      	movs	r1, #1
 c02d882:	4640      	mov	r0, r8
 c02d884:	f7f7 fcfc 	bl	c025280 <mbedtls_mpi_cmp_int>
 c02d888:	2800      	cmp	r0, #0
 c02d88a:	dd12      	ble.n	c02d8b2 <mbedtls_rsa_validate_params+0x1a6>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 c02d88c:	2101      	movs	r1, #1
 c02d88e:	4648      	mov	r0, r9
 c02d890:	f7f7 fcf6 	bl	c025280 <mbedtls_mpi_cmp_int>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 c02d894:	2800      	cmp	r0, #0
 c02d896:	dd0c      	ble.n	c02d8b2 <mbedtls_rsa_validate_params+0x1a6>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 c02d898:	4629      	mov	r1, r5
 c02d89a:	4640      	mov	r0, r8
 c02d89c:	f7f7 fcb0 	bl	c025200 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 c02d8a0:	2800      	cmp	r0, #0
 c02d8a2:	da06      	bge.n	c02d8b2 <mbedtls_rsa_validate_params+0x1a6>
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 c02d8a4:	4629      	mov	r1, r5
 c02d8a6:	4648      	mov	r0, r9
 c02d8a8:	f7f7 fcaa 	bl	c025200 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 c02d8ac:	2800      	cmp	r0, #0
 c02d8ae:	f6ff af71 	blt.w	c02d794 <mbedtls_rsa_validate_params+0x88>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 c02d8b2:	4c01      	ldr	r4, [pc, #4]	; (c02d8b8 <mbedtls_rsa_validate_params+0x1ac>)
            goto cleanup;
 c02d8b4:	e7d1      	b.n	c02d85a <mbedtls_rsa_validate_params+0x14e>
 c02d8b6:	bf00      	nop
 c02d8b8:	ffffbe00 	.word	0xffffbe00

0c02d8bc <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 c02d8bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c02d8c0:	469a      	mov	sl, r3
 c02d8c2:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 c02d8c6:	4607      	mov	r7, r0
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 c02d8c8:	a801      	add	r0, sp, #4
{
 c02d8ca:	460e      	mov	r6, r1
 c02d8cc:	4691      	mov	r9, r2
    mbedtls_mpi_init( &K );
 c02d8ce:	f7f7 f953 	bl	c024b78 <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 c02d8d2:	f1ba 0f00 	cmp.w	sl, #0
 c02d8d6:	d105      	bne.n	c02d8e4 <mbedtls_rsa_deduce_crt+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 c02d8d8:	f1b8 0f00 	cmp.w	r8, #0
 c02d8dc:	d118      	bne.n	c02d910 <mbedtls_rsa_deduce_crt+0x54>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 c02d8de:	bb45      	cbnz	r5, c02d932 <mbedtls_rsa_deduce_crt+0x76>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
    }

cleanup:
 c02d8e0:	462c      	mov	r4, r5
 c02d8e2:	e00e      	b.n	c02d902 <mbedtls_rsa_deduce_crt+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 c02d8e4:	2201      	movs	r2, #1
 c02d8e6:	4639      	mov	r1, r7
 c02d8e8:	a801      	add	r0, sp, #4
 c02d8ea:	f7f7 fdd9 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c02d8ee:	4604      	mov	r4, r0
 c02d8f0:	b938      	cbnz	r0, c02d902 <mbedtls_rsa_deduce_crt+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 c02d8f2:	aa01      	add	r2, sp, #4
 c02d8f4:	4649      	mov	r1, r9
 c02d8f6:	4650      	mov	r0, sl
 c02d8f8:	f7f8 f8a4 	bl	c025a44 <mbedtls_mpi_mod_mpi>
 c02d8fc:	4604      	mov	r4, r0
 c02d8fe:	2800      	cmp	r0, #0
 c02d900:	d0ea      	beq.n	c02d8d8 <mbedtls_rsa_deduce_crt+0x1c>
    mbedtls_mpi_free( &K );
 c02d902:	a801      	add	r0, sp, #4
 c02d904:	f7f7 f93e 	bl	c024b84 <mbedtls_mpi_free>

    return( ret );
}
 c02d908:	4620      	mov	r0, r4
 c02d90a:	b004      	add	sp, #16
 c02d90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 c02d910:	2201      	movs	r2, #1
 c02d912:	4631      	mov	r1, r6
 c02d914:	a801      	add	r0, sp, #4
 c02d916:	f7f7 fdc3 	bl	c0254a0 <mbedtls_mpi_sub_int>
 c02d91a:	4604      	mov	r4, r0
 c02d91c:	2800      	cmp	r0, #0
 c02d91e:	d1f0      	bne.n	c02d902 <mbedtls_rsa_deduce_crt+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 c02d920:	aa01      	add	r2, sp, #4
 c02d922:	4649      	mov	r1, r9
 c02d924:	4640      	mov	r0, r8
 c02d926:	f7f8 f88d 	bl	c025a44 <mbedtls_mpi_mod_mpi>
 c02d92a:	4604      	mov	r4, r0
 c02d92c:	2800      	cmp	r0, #0
 c02d92e:	d0d6      	beq.n	c02d8de <mbedtls_rsa_deduce_crt+0x22>
 c02d930:	e7e7      	b.n	c02d902 <mbedtls_rsa_deduce_crt+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 c02d932:	463a      	mov	r2, r7
 c02d934:	4631      	mov	r1, r6
 c02d936:	4628      	mov	r0, r5
 c02d938:	f7f8 fcab 	bl	c026292 <mbedtls_mpi_inv_mod>
 c02d93c:	4604      	mov	r4, r0
cleanup:
 c02d93e:	e7e0      	b.n	c02d902 <mbedtls_rsa_deduce_crt+0x46>

0c02d940 <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 c02d940:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02d942:	b0dd      	sub	sp, #372	; 0x174
 c02d944:	4606      	mov	r6, r0
    mbedtls_sha1_context ctx;

    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha1_init( &ctx );
 c02d946:	a801      	add	r0, sp, #4
{
 c02d948:	460f      	mov	r7, r1
 c02d94a:	4615      	mov	r5, r2
    mbedtls_sha1_init( &ctx );
 c02d94c:	f7f3 f802 	bl	c020954 <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
 c02d950:	a801      	add	r0, sp, #4
 c02d952:	f7f3 f827 	bl	c0209a4 <mbedtls_sha1_starts_ret>
 c02d956:	4604      	mov	r4, r0
 c02d958:	b958      	cbnz	r0, c02d972 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
 c02d95a:	463a      	mov	r2, r7
 c02d95c:	4631      	mov	r1, r6
 c02d95e:	a801      	add	r0, sp, #4
 c02d960:	f7f3 f84f 	bl	c020a02 <mbedtls_sha1_update_ret>
 c02d964:	4604      	mov	r4, r0
 c02d966:	b920      	cbnz	r0, c02d972 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
 c02d968:	4629      	mov	r1, r5
 c02d96a:	a801      	add	r0, sp, #4
 c02d96c:	f7f3 f898 	bl	c020aa0 <mbedtls_sha1_finish_ret>
 c02d970:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
 c02d972:	a801      	add	r0, sp, #4
 c02d974:	f7f3 f806 	bl	c020984 <mbedtls_sha1_free>

    return( ret );
}
 c02d978:	4620      	mov	r0, r4
 c02d97a:	b05d      	add	sp, #372	; 0x174
 c02d97c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c02d97e <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 c02d97e:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02d980:	461c      	mov	r4, r3
 c02d982:	b0dd      	sub	sp, #372	; 0x174
 c02d984:	4606      	mov	r6, r0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
 c02d986:	4668      	mov	r0, sp
{
 c02d988:	460f      	mov	r7, r1
 c02d98a:	4615      	mov	r5, r2
    mbedtls_sha256_init( &ctx );
 c02d98c:	f7f3 f8a2 	bl	c020ad4 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 c02d990:	4621      	mov	r1, r4
 c02d992:	4668      	mov	r0, sp
 c02d994:	f7f3 f8c6 	bl	c020b24 <mbedtls_sha256_starts_ret>
 c02d998:	4604      	mov	r4, r0
 c02d99a:	b958      	cbnz	r0, c02d9b4 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 c02d99c:	463a      	mov	r2, r7
 c02d99e:	4631      	mov	r1, r6
 c02d9a0:	4668      	mov	r0, sp
 c02d9a2:	f7f3 f8f8 	bl	c020b96 <mbedtls_sha256_update_ret>
 c02d9a6:	4604      	mov	r4, r0
 c02d9a8:	b920      	cbnz	r0, c02d9b4 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 c02d9aa:	4629      	mov	r1, r5
 c02d9ac:	4668      	mov	r0, sp
 c02d9ae:	f7f3 f94c 	bl	c020c4a <mbedtls_sha256_finish_ret>
 c02d9b2:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 c02d9b4:	4668      	mov	r0, sp
 c02d9b6:	f7f3 f8a5 	bl	c020b04 <mbedtls_sha256_free>

    return( ret );
}
 c02d9ba:	4620      	mov	r0, r4
 c02d9bc:	b05d      	add	sp, #372	; 0x174
 c02d9be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c02d9c0 <mbedtls_sha512_init>:

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 c02d9c0:	22d8      	movs	r2, #216	; 0xd8
 c02d9c2:	2100      	movs	r1, #0
 c02d9c4:	f7e9 bfff 	b.w	c0179c6 <memset>

0c02d9c8 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 c02d9c8:	b110      	cbz	r0, c02d9d0 <mbedtls_sha512_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
 c02d9ca:	21d8      	movs	r1, #216	; 0xd8
 c02d9cc:	f7fc bc68 	b.w	c02a2a0 <mbedtls_platform_zeroize>
}
 c02d9d0:	4770      	bx	lr

0c02d9d2 <mbedtls_sha512_clone>:

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 c02d9d2:	b508      	push	{r3, lr}
    SHA512_VALIDATE( dst != NULL );
    SHA512_VALIDATE( src != NULL );

    *dst = *src;
 c02d9d4:	22d8      	movs	r2, #216	; 0xd8
 c02d9d6:	f7e9 ffd2 	bl	c01797e <memcpy>
}
 c02d9da:	bd08      	pop	{r3, pc}
 c02d9dc:	0000      	movs	r0, r0
	...

0c02d9e0 <mbedtls_sha512_starts_ret>:
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
 c02d9e0:	2200      	movs	r2, #0
 c02d9e2:	2300      	movs	r3, #0
 c02d9e4:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 c02d9e8:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 c02d9ec:	2900      	cmp	r1, #0
 c02d9ee:	d12b      	bne.n	c02da48 <mbedtls_sha512_starts_ret+0x68>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 c02d9f0:	a329      	add	r3, pc, #164	; (adr r3, c02da98 <mbedtls_sha512_starts_ret+0xb8>)
 c02d9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02d9f6:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 c02d9fa:	a329      	add	r3, pc, #164	; (adr r3, c02daa0 <mbedtls_sha512_starts_ret+0xc0>)
 c02d9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02da00:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 c02da04:	a328      	add	r3, pc, #160	; (adr r3, c02daa8 <mbedtls_sha512_starts_ret+0xc8>)
 c02da06:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02da0a:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 c02da0e:	a328      	add	r3, pc, #160	; (adr r3, c02dab0 <mbedtls_sha512_starts_ret+0xd0>)
 c02da10:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02da14:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 c02da18:	a327      	add	r3, pc, #156	; (adr r3, c02dab8 <mbedtls_sha512_starts_ret+0xd8>)
 c02da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02da1e:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 c02da22:	a327      	add	r3, pc, #156	; (adr r3, c02dac0 <mbedtls_sha512_starts_ret+0xe0>)
 c02da24:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02da28:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 c02da2c:	a326      	add	r3, pc, #152	; (adr r3, c02dac8 <mbedtls_sha512_starts_ret+0xe8>)
 c02da2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02da32:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 c02da36:	a326      	add	r3, pc, #152	; (adr r3, c02dad0 <mbedtls_sha512_starts_ret+0xf0>)
 c02da38:	e9d3 2300 	ldrd	r2, r3, [r3]
        ctx->state[2] = UL64(0x9159015A3070DD17);
        ctx->state[3] = UL64(0x152FECD8F70E5939);
        ctx->state[4] = UL64(0x67332667FFC00B31);
        ctx->state[5] = UL64(0x8EB44A8768581511);
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 c02da3c:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 c02da40:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
 c02da44:	2000      	movs	r0, #0
 c02da46:	4770      	bx	lr
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 c02da48:	a323      	add	r3, pc, #140	; (adr r3, c02dad8 <mbedtls_sha512_starts_ret+0xf8>)
 c02da4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02da4e:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 c02da52:	a323      	add	r3, pc, #140	; (adr r3, c02dae0 <mbedtls_sha512_starts_ret+0x100>)
 c02da54:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02da58:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 c02da5c:	a322      	add	r3, pc, #136	; (adr r3, c02dae8 <mbedtls_sha512_starts_ret+0x108>)
 c02da5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02da62:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 c02da66:	a322      	add	r3, pc, #136	; (adr r3, c02daf0 <mbedtls_sha512_starts_ret+0x110>)
 c02da68:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02da6c:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 c02da70:	a321      	add	r3, pc, #132	; (adr r3, c02daf8 <mbedtls_sha512_starts_ret+0x118>)
 c02da72:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02da76:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 c02da7a:	a321      	add	r3, pc, #132	; (adr r3, c02db00 <mbedtls_sha512_starts_ret+0x120>)
 c02da7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02da80:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 c02da84:	a320      	add	r3, pc, #128	; (adr r3, c02db08 <mbedtls_sha512_starts_ret+0x128>)
 c02da86:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02da8a:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 c02da8e:	a320      	add	r3, pc, #128	; (adr r3, c02db10 <mbedtls_sha512_starts_ret+0x130>)
 c02da90:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02da94:	e7d2      	b.n	c02da3c <mbedtls_sha512_starts_ret+0x5c>
 c02da96:	bf00      	nop
 c02da98:	f3bcc908 	.word	0xf3bcc908
 c02da9c:	6a09e667 	.word	0x6a09e667
 c02daa0:	84caa73b 	.word	0x84caa73b
 c02daa4:	bb67ae85 	.word	0xbb67ae85
 c02daa8:	fe94f82b 	.word	0xfe94f82b
 c02daac:	3c6ef372 	.word	0x3c6ef372
 c02dab0:	5f1d36f1 	.word	0x5f1d36f1
 c02dab4:	a54ff53a 	.word	0xa54ff53a
 c02dab8:	ade682d1 	.word	0xade682d1
 c02dabc:	510e527f 	.word	0x510e527f
 c02dac0:	2b3e6c1f 	.word	0x2b3e6c1f
 c02dac4:	9b05688c 	.word	0x9b05688c
 c02dac8:	fb41bd6b 	.word	0xfb41bd6b
 c02dacc:	1f83d9ab 	.word	0x1f83d9ab
 c02dad0:	137e2179 	.word	0x137e2179
 c02dad4:	5be0cd19 	.word	0x5be0cd19
 c02dad8:	c1059ed8 	.word	0xc1059ed8
 c02dadc:	cbbb9d5d 	.word	0xcbbb9d5d
 c02dae0:	367cd507 	.word	0x367cd507
 c02dae4:	629a292a 	.word	0x629a292a
 c02dae8:	3070dd17 	.word	0x3070dd17
 c02daec:	9159015a 	.word	0x9159015a
 c02daf0:	f70e5939 	.word	0xf70e5939
 c02daf4:	152fecd8 	.word	0x152fecd8
 c02daf8:	ffc00b31 	.word	0xffc00b31
 c02dafc:	67332667 	.word	0x67332667
 c02db00:	68581511 	.word	0x68581511
 c02db04:	8eb44a87 	.word	0x8eb44a87
 c02db08:	64f98fa7 	.word	0x64f98fa7
 c02db0c:	db0c2e0d 	.word	0xdb0c2e0d
 c02db10:	befa4fa4 	.word	0xbefa4fa4
 c02db14:	47b5481d 	.word	0x47b5481d

0c02db18 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 c02db18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02db1c:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 c02db20:	4686      	mov	lr, r0
 c02db22:	f101 0680 	add.w	r6, r1, #128	; 0x80
 c02db26:	a87e      	add	r0, sp, #504	; 0x1f8
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 c02db28:	f04f 0a00 	mov.w	sl, #0
 c02db2c:	2500      	movs	r5, #0
 c02db2e:	780a      	ldrb	r2, [r1, #0]
 c02db30:	784c      	ldrb	r4, [r1, #1]
 c02db32:	ea4f 6b02 	mov.w	fp, r2, lsl #24
 c02db36:	ea4f 4804 	mov.w	r8, r4, lsl #16
 c02db3a:	79cc      	ldrb	r4, [r1, #7]
 c02db3c:	ea4a 020a 	orr.w	r2, sl, sl
 c02db40:	ea48 030b 	orr.w	r3, r8, fp
 c02db44:	ea42 0704 	orr.w	r7, r2, r4
 c02db48:	ea43 0805 	orr.w	r8, r3, r5
 c02db4c:	463a      	mov	r2, r7
 c02db4e:	4643      	mov	r3, r8
 c02db50:	4654      	mov	r4, sl
 c02db52:	f891 8002 	ldrb.w	r8, [r1, #2]
 c02db56:	f891 9003 	ldrb.w	r9, [r1, #3]
 c02db5a:	ea4f 2508 	mov.w	r5, r8, lsl #8
 c02db5e:	4322      	orrs	r2, r4
 c02db60:	432b      	orrs	r3, r5
 c02db62:	ea42 040a 	orr.w	r4, r2, sl
 c02db66:	ea43 0509 	orr.w	r5, r3, r9
 c02db6a:	4622      	mov	r2, r4
 c02db6c:	462b      	mov	r3, r5
 c02db6e:	f891 8004 	ldrb.w	r8, [r1, #4]
 c02db72:	3108      	adds	r1, #8
 c02db74:	ea4f 2518 	mov.w	r5, r8, lsr #8
 c02db78:	ea4f 6408 	mov.w	r4, r8, lsl #24
 c02db7c:	f811 8c03 	ldrb.w	r8, [r1, #-3]
 c02db80:	4322      	orrs	r2, r4
 c02db82:	432b      	orrs	r3, r5
 c02db84:	ea4f 4408 	mov.w	r4, r8, lsl #16
 c02db88:	ea4f 4518 	mov.w	r5, r8, lsr #16
 c02db8c:	ea43 0805 	orr.w	r8, r3, r5
 c02db90:	ea42 0704 	orr.w	r7, r2, r4
 c02db94:	4643      	mov	r3, r8
 c02db96:	463a      	mov	r2, r7
 c02db98:	f811 8c02 	ldrb.w	r8, [r1, #-2]
    for( i = 0; i < 16; i++ )
 c02db9c:	428e      	cmp	r6, r1
        GET_UINT64_BE( W[i], data, i << 3 );
 c02db9e:	ea4f 6518 	mov.w	r5, r8, lsr #24
 c02dba2:	ea4f 2408 	mov.w	r4, r8, lsl #8
 c02dba6:	ea42 0204 	orr.w	r2, r2, r4
 c02dbaa:	ea43 0305 	orr.w	r3, r3, r5
 c02dbae:	e9e0 2302 	strd	r2, r3, [r0, #8]!
    for( i = 0; i < 16; i++ )
 c02dbb2:	d1b9      	bne.n	c02db28 <mbedtls_internal_sha512_process+0x10>
 c02dbb4:	ab80      	add	r3, sp, #512	; 0x200
 c02dbb6:	461a      	mov	r2, r3
 c02dbb8:	f50d 6880 	add.w	r8, sp, #1024	; 0x400
 c02dbbc:	4616      	mov	r6, r2
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 c02dbbe:	e9d2 971c 	ldrd	r9, r7, [r2, #112]	; 0x70
               S0(W[i - 15]) + W[i - 16];
 c02dbc2:	e9d2 ac02 	ldrd	sl, ip, [r2, #8]
        W[i] = S1(W[i -  2]) + W[i -  7] +
 c02dbc6:	ea4f 41d9 	mov.w	r1, r9, lsr #19
 c02dbca:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
 c02dbce:	9100      	str	r1, [sp, #0]
 c02dbd0:	0cf9      	lsrs	r1, r7, #19
 c02dbd2:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
 c02dbd6:	9101      	str	r1, [sp, #4]
 c02dbd8:	00f9      	lsls	r1, r7, #3
 c02dbda:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
 c02dbde:	9103      	str	r1, [sp, #12]
 c02dbe0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 c02dbe4:	ea41 7157 	orr.w	r1, r1, r7, lsr #29
 c02dbe8:	9102      	str	r1, [sp, #8]
 c02dbea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c02dbee:	e9dd 4500 	ldrd	r4, r5, [sp]
 c02dbf2:	4044      	eors	r4, r0
 c02dbf4:	ea4f 1099 	mov.w	r0, r9, lsr #6
 c02dbf8:	ea40 6087 	orr.w	r0, r0, r7, lsl #26
 c02dbfc:	404d      	eors	r5, r1
 c02dbfe:	09b9      	lsrs	r1, r7, #6
 c02dc00:	4044      	eors	r4, r0
 c02dc02:	404d      	eors	r5, r1
 c02dc04:	e9cd 4508 	strd	r4, r5, [sp, #32]
               S0(W[i - 15]) + W[i - 16];
 c02dc08:	e9d6 0112 	ldrd	r0, r1, [r6, #72]	; 0x48
 c02dc0c:	e9d6 6700 	ldrd	r6, r7, [r6]
 c02dc10:	1834      	adds	r4, r6, r0
 c02dc12:	eb47 0501 	adc.w	r5, r7, r1
 c02dc16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c02dc1a:	1900      	adds	r0, r0, r4
 c02dc1c:	4169      	adcs	r1, r5
 c02dc1e:	4606      	mov	r6, r0
 c02dc20:	460f      	mov	r7, r1
 c02dc22:	ea4f 015a 	mov.w	r1, sl, lsr #1
 c02dc26:	ea41 71cc 	orr.w	r1, r1, ip, lsl #31
 c02dc2a:	9104      	str	r1, [sp, #16]
 c02dc2c:	ea4f 015c 	mov.w	r1, ip, lsr #1
 c02dc30:	ea41 71ca 	orr.w	r1, r1, sl, lsl #31
 c02dc34:	9105      	str	r1, [sp, #20]
 c02dc36:	ea4f 211a 	mov.w	r1, sl, lsr #8
 c02dc3a:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
 c02dc3e:	9106      	str	r1, [sp, #24]
 c02dc40:	ea4f 211c 	mov.w	r1, ip, lsr #8
 c02dc44:	ea41 610a 	orr.w	r1, r1, sl, lsl #24
 c02dc48:	9107      	str	r1, [sp, #28]
 c02dc4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 c02dc4e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 c02dc52:	4044      	eors	r4, r0
 c02dc54:	ea4f 10da 	mov.w	r0, sl, lsr #7
 c02dc58:	ea40 604c 	orr.w	r0, r0, ip, lsl #25
 c02dc5c:	404d      	eors	r5, r1
 c02dc5e:	ea80 0904 	eor.w	r9, r0, r4
 c02dc62:	ea4f 11dc 	mov.w	r1, ip, lsr #7
 c02dc66:	eb19 0006 	adds.w	r0, r9, r6
 c02dc6a:	f102 0208 	add.w	r2, r2, #8
 c02dc6e:	ea81 0a05 	eor.w	sl, r1, r5
 c02dc72:	eb4a 0107 	adc.w	r1, sl, r7
    for( ; i < 80; i++ )
 c02dc76:	4590      	cmp	r8, r2
        W[i] = S1(W[i -  2]) + W[i -  7] +
 c02dc78:	e9c2 011e 	strd	r0, r1, [r2, #120]	; 0x78
    for( ; i < 80; i++ )
 c02dc7c:	d19e      	bne.n	c02dbbc <mbedtls_internal_sha512_process+0xa4>
    }

    A = ctx->state[0];
 c02dc7e:	e9de 1204 	ldrd	r1, r2, [lr, #16]
 c02dc82:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    B = ctx->state[1];
 c02dc86:	e9de 1206 	ldrd	r1, r2, [lr, #24]
 c02dc8a:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
    C = ctx->state[2];
 c02dc8e:	e9de 1208 	ldrd	r1, r2, [lr, #32]
 c02dc92:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
    D = ctx->state[3];
 c02dc96:	e9de 120a 	ldrd	r1, r2, [lr, #40]	; 0x28
 c02dc9a:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
    E = ctx->state[4];
 c02dc9e:	e9de 120c 	ldrd	r1, r2, [lr, #48]	; 0x30
 c02dca2:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
    F = ctx->state[5];
 c02dca6:	e9de 120e 	ldrd	r1, r2, [lr, #56]	; 0x38
 c02dcaa:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
    G = ctx->state[6];
 c02dcae:	e9de 1210 	ldrd	r1, r2, [lr, #64]	; 0x40
 c02dcb2:	e9cd 121c 	strd	r1, r2, [sp, #112]	; 0x70
    H = ctx->state[7];
 c02dcb6:	e9de 1212 	ldrd	r1, r2, [lr, #72]	; 0x48
 c02dcba:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
 c02dcbe:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 c02dcc2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    G = ctx->state[6];
 c02dcc6:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 c02dcca:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    F = ctx->state[5];
 c02dcce:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 c02dcd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    E = ctx->state[4];
 c02dcd6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 c02dcda:	e9cd 0108 	strd	r0, r1, [sp, #32]
    D = ctx->state[3];
 c02dcde:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 c02dce2:	e9cd 0106 	strd	r0, r1, [sp, #24]
    C = ctx->state[2];
 c02dce6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 c02dcea:	e9cd 0104 	strd	r0, r1, [sp, #16]
    B = ctx->state[1];
 c02dcee:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 c02dcf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    A = ctx->state[0];
 c02dcf6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 c02dcfa:	e9cd 0100 	strd	r0, r1, [sp]
 c02dcfe:	4a02      	ldr	r2, [pc, #8]	; (c02dd08 <mbedtls_internal_sha512_process+0x1f0>)
 c02dd00:	f503 7c20 	add.w	ip, r3, #640	; 0x280
 c02dd04:	e002      	b.n	c02dd0c <mbedtls_internal_sha512_process+0x1f4>
 c02dd06:	bf00      	nop
 c02dd08:	0c036908 	.word	0x0c036908
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 c02dd0c:	9908      	ldr	r1, [sp, #32]
 c02dd0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 c02dd10:	0b89      	lsrs	r1, r1, #14
 c02dd12:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 c02dd16:	9120      	str	r1, [sp, #128]	; 0x80
 c02dd18:	0b81      	lsrs	r1, r0, #14
 c02dd1a:	9808      	ldr	r0, [sp, #32]
 c02dd1c:	e9d3 4500 	ldrd	r4, r5, [r3]
 c02dd20:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 c02dd24:	9121      	str	r1, [sp, #132]	; 0x84
 c02dd26:	0c81      	lsrs	r1, r0, #18
 c02dd28:	9809      	ldr	r0, [sp, #36]	; 0x24
 c02dd2a:	e9dd 6720 	ldrd	r6, r7, [sp, #128]	; 0x80
 c02dd2e:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 c02dd32:	9122      	str	r1, [sp, #136]	; 0x88
 c02dd34:	0c81      	lsrs	r1, r0, #18
 c02dd36:	9808      	ldr	r0, [sp, #32]
 c02dd38:	3340      	adds	r3, #64	; 0x40
 c02dd3a:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 c02dd3e:	9123      	str	r1, [sp, #140]	; 0x8c
 c02dd40:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 c02dd44:	404f      	eors	r7, r1
 c02dd46:	9909      	ldr	r1, [sp, #36]	; 0x24
 c02dd48:	4046      	eors	r6, r0
 c02dd4a:	9808      	ldr	r0, [sp, #32]
 c02dd4c:	05c9      	lsls	r1, r1, #23
 c02dd4e:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 c02dd52:	9125      	str	r1, [sp, #148]	; 0x94
 c02dd54:	05c1      	lsls	r1, r0, #23
 c02dd56:	9809      	ldr	r0, [sp, #36]	; 0x24
 c02dd58:	3240      	adds	r2, #64	; 0x40
 c02dd5a:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 c02dd5e:	9124      	str	r1, [sp, #144]	; 0x90
 c02dd60:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 c02dd64:	4070      	eors	r0, r6
 c02dd66:	4079      	eors	r1, r7
 c02dd68:	4606      	mov	r6, r0
 c02dd6a:	460f      	mov	r7, r1
 c02dd6c:	e952 0110 	ldrd	r0, r1, [r2, #-64]	; 0x40
 c02dd70:	eb10 0804 	adds.w	r8, r0, r4
 c02dd74:	eb41 0905 	adc.w	r9, r1, r5
 c02dd78:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 c02dd7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 c02dd80:	4060      	eors	r0, r4
 c02dd82:	4069      	eors	r1, r5
 c02dd84:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 c02dd88:	4004      	ands	r4, r0
 c02dd8a:	4620      	mov	r0, r4
 c02dd8c:	400d      	ands	r5, r1
 c02dd8e:	4629      	mov	r1, r5
 c02dd90:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 c02dd94:	eb16 0a08 	adds.w	sl, r6, r8
 c02dd98:	ea84 0400 	eor.w	r4, r4, r0
 c02dd9c:	eb47 0b09 	adc.w	fp, r7, r9
 c02dda0:	404d      	eors	r5, r1
 c02dda2:	eb1a 0604 	adds.w	r6, sl, r4
 c02dda6:	eb4b 0705 	adc.w	r7, fp, r5
 c02ddaa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 c02ddae:	1980      	adds	r0, r0, r6
 c02ddb0:	4606      	mov	r6, r0
 c02ddb2:	4179      	adcs	r1, r7
 c02ddb4:	460f      	mov	r7, r1
 c02ddb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 c02ddba:	1980      	adds	r0, r0, r6
 c02ddbc:	4179      	adcs	r1, r7
 c02ddbe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 c02ddc2:	9900      	ldr	r1, [sp, #0]
 c02ddc4:	9801      	ldr	r0, [sp, #4]
 c02ddc6:	0f09      	lsrs	r1, r1, #28
 c02ddc8:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02ddcc:	9126      	str	r1, [sp, #152]	; 0x98
 c02ddce:	0f01      	lsrs	r1, r0, #28
 c02ddd0:	9800      	ldr	r0, [sp, #0]
 c02ddd2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02ddd6:	9127      	str	r1, [sp, #156]	; 0x9c
 c02ddd8:	9901      	ldr	r1, [sp, #4]
 c02ddda:	0789      	lsls	r1, r1, #30
 c02dddc:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02dde0:	9129      	str	r1, [sp, #164]	; 0xa4
 c02dde2:	0781      	lsls	r1, r0, #30
 c02dde4:	9801      	ldr	r0, [sp, #4]
 c02dde6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 c02ddea:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02ddee:	9128      	str	r1, [sp, #160]	; 0xa0
 c02ddf0:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 c02ddf4:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 c02ddf8:	4060      	eors	r0, r4
 c02ddfa:	9c01      	ldr	r4, [sp, #4]
 c02ddfc:	4069      	eors	r1, r5
 c02ddfe:	9d00      	ldr	r5, [sp, #0]
 c02de00:	0664      	lsls	r4, r4, #25
 c02de02:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02de06:	942b      	str	r4, [sp, #172]	; 0xac
 c02de08:	066c      	lsls	r4, r5, #25
 c02de0a:	9d01      	ldr	r5, [sp, #4]
 c02de0c:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 c02de10:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02de14:	942a      	str	r4, [sp, #168]	; 0xa8
 c02de16:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 c02de1a:	4044      	eors	r4, r0
 c02de1c:	4620      	mov	r0, r4
 c02de1e:	404d      	eors	r5, r1
 c02de20:	4629      	mov	r1, r5
 c02de22:	e9dd 4500 	ldrd	r4, r5, [sp]
 c02de26:	ea48 0804 	orr.w	r8, r8, r4
 c02de2a:	ea49 0905 	orr.w	r9, r9, r5
 c02de2e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 c02de32:	ea04 0408 	and.w	r4, r4, r8
 c02de36:	ea05 0509 	and.w	r5, r5, r9
 c02de3a:	e9dd 8900 	ldrd	r8, r9, [sp]
 c02de3e:	ea0a 0a08 	and.w	sl, sl, r8
 c02de42:	ea4a 0804 	orr.w	r8, sl, r4
 c02de46:	ea0b 0b09 	and.w	fp, fp, r9
 c02de4a:	eb18 0400 	adds.w	r4, r8, r0
 c02de4e:	ea4b 0905 	orr.w	r9, fp, r5
 c02de52:	eb49 0501 	adc.w	r5, r9, r1
 c02de56:	19a0      	adds	r0, r4, r6
 c02de58:	eb45 0107 	adc.w	r1, r5, r7
 c02de5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 c02de60:	e953 450e 	ldrd	r4, r5, [r3, #-56]	; 0x38
 c02de64:	e952 010e 	ldrd	r0, r1, [r2, #-56]	; 0x38
 c02de68:	1826      	adds	r6, r4, r0
 c02de6a:	eb45 0701 	adc.w	r7, r5, r1
 c02de6e:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 c02de72:	19a4      	adds	r4, r4, r6
 c02de74:	417d      	adcs	r5, r7
 c02de76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c02de7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 c02de7e:	4070      	eors	r0, r6
 c02de80:	4079      	eors	r1, r7
 c02de82:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 c02de86:	4006      	ands	r6, r0
 c02de88:	4630      	mov	r0, r6
 c02de8a:	400f      	ands	r7, r1
 c02de8c:	4639      	mov	r1, r7
 c02de8e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 c02de92:	4046      	eors	r6, r0
 c02de94:	1930      	adds	r0, r6, r4
 c02de96:	ea87 0701 	eor.w	r7, r7, r1
 c02de9a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 c02de9c:	eb47 0105 	adc.w	r1, r7, r5
 c02dea0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 c02dea2:	0ba4      	lsrs	r4, r4, #14
 c02dea4:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02dea8:	942c      	str	r4, [sp, #176]	; 0xb0
 c02deaa:	0bac      	lsrs	r4, r5, #14
 c02deac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 c02deae:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02deb2:	942d      	str	r4, [sp, #180]	; 0xb4
 c02deb4:	0cac      	lsrs	r4, r5, #18
 c02deb6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 c02deb8:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02debc:	942e      	str	r4, [sp, #184]	; 0xb8
 c02debe:	0cac      	lsrs	r4, r5, #18
 c02dec0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 c02dec2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02dec6:	942f      	str	r4, [sp, #188]	; 0xbc
 c02dec8:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 c02decc:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 c02ded0:	4074      	eors	r4, r6
 c02ded2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 c02ded4:	407d      	eors	r5, r7
 c02ded6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 c02ded8:	05f6      	lsls	r6, r6, #23
 c02deda:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 c02dede:	9631      	str	r6, [sp, #196]	; 0xc4
 c02dee0:	05fe      	lsls	r6, r7, #23
 c02dee2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 c02dee4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 c02dee8:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 c02deec:	9630      	str	r6, [sp, #192]	; 0xc0
 c02deee:	e9dd 6730 	ldrd	r6, r7, [sp, #192]	; 0xc0
 c02def2:	4066      	eors	r6, r4
 c02def4:	1986      	adds	r6, r0, r6
 c02def6:	ea87 0705 	eor.w	r7, r7, r5
 c02defa:	eb41 0707 	adc.w	r7, r1, r7
 c02defe:	9906      	ldr	r1, [sp, #24]
 c02df00:	9807      	ldr	r0, [sp, #28]
 c02df02:	0f09      	lsrs	r1, r1, #28
 c02df04:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02df08:	9132      	str	r1, [sp, #200]	; 0xc8
 c02df0a:	0f01      	lsrs	r1, r0, #28
 c02df0c:	9806      	ldr	r0, [sp, #24]
 c02df0e:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 c02df12:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02df16:	9133      	str	r1, [sp, #204]	; 0xcc
 c02df18:	9907      	ldr	r1, [sp, #28]
 c02df1a:	eb18 0806 	adds.w	r8, r8, r6
 c02df1e:	ea4f 7181 	mov.w	r1, r1, lsl #30
 c02df22:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02df26:	9135      	str	r1, [sp, #212]	; 0xd4
 c02df28:	ea4f 7180 	mov.w	r1, r0, lsl #30
 c02df2c:	9807      	ldr	r0, [sp, #28]
 c02df2e:	eb49 0907 	adc.w	r9, r9, r7
 c02df32:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02df36:	9134      	str	r1, [sp, #208]	; 0xd0
 c02df38:	e9dd 4534 	ldrd	r4, r5, [sp, #208]	; 0xd0
 c02df3c:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 c02df40:	4060      	eors	r0, r4
 c02df42:	9c07      	ldr	r4, [sp, #28]
 c02df44:	4069      	eors	r1, r5
 c02df46:	9d06      	ldr	r5, [sp, #24]
 c02df48:	0664      	lsls	r4, r4, #25
 c02df4a:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02df4e:	9437      	str	r4, [sp, #220]	; 0xdc
 c02df50:	066c      	lsls	r4, r5, #25
 c02df52:	9d07      	ldr	r5, [sp, #28]
 c02df54:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02df58:	9436      	str	r4, [sp, #216]	; 0xd8
 c02df5a:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
 c02df5e:	4044      	eors	r4, r0
 c02df60:	404d      	eors	r5, r1
 c02df62:	e9cd 4504 	strd	r4, r5, [sp, #16]
 c02df66:	e9dd 4500 	ldrd	r4, r5, [sp]
 c02df6a:	ea44 040a 	orr.w	r4, r4, sl
 c02df6e:	ea45 050b 	orr.w	r5, r5, fp
 c02df72:	4620      	mov	r0, r4
 c02df74:	e9dd ab00 	ldrd	sl, fp, [sp]
 c02df78:	4629      	mov	r1, r5
 c02df7a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 c02df7e:	4004      	ands	r4, r0
 c02df80:	400d      	ands	r5, r1
 c02df82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 c02df86:	ea0a 0a00 	and.w	sl, sl, r0
 c02df8a:	ea4a 0a04 	orr.w	sl, sl, r4
 c02df8e:	ea0b 0b01 	and.w	fp, fp, r1
 c02df92:	ea4b 0b05 	orr.w	fp, fp, r5
 c02df96:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 c02df9a:	eb14 040a 	adds.w	r4, r4, sl
 c02df9e:	eb45 050b 	adc.w	r5, r5, fp
 c02dfa2:	19a0      	adds	r0, r4, r6
 c02dfa4:	eb45 0107 	adc.w	r1, r5, r7
 c02dfa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 c02dfac:	e953 450c 	ldrd	r4, r5, [r3, #-48]	; 0x30
 c02dfb0:	e952 010c 	ldrd	r0, r1, [r2, #-48]	; 0x30
 c02dfb4:	1826      	adds	r6, r4, r0
 c02dfb6:	eb45 0701 	adc.w	r7, r5, r1
 c02dfba:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 c02dfbe:	19a4      	adds	r4, r4, r6
 c02dfc0:	417d      	adcs	r5, r7
 c02dfc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c02dfc6:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 c02dfca:	4070      	eors	r0, r6
 c02dfcc:	ea00 0008 	and.w	r0, r0, r8
 c02dfd0:	4079      	eors	r1, r7
 c02dfd2:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 c02dfd6:	4046      	eors	r6, r0
 c02dfd8:	1930      	adds	r0, r6, r4
 c02dfda:	ea4f 3498 	mov.w	r4, r8, lsr #14
 c02dfde:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
 c02dfe2:	9438      	str	r4, [sp, #224]	; 0xe0
 c02dfe4:	ea4f 3499 	mov.w	r4, r9, lsr #14
 c02dfe8:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
 c02dfec:	9439      	str	r4, [sp, #228]	; 0xe4
 c02dfee:	ea4f 4498 	mov.w	r4, r8, lsr #18
 c02dff2:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
 c02dff6:	943a      	str	r4, [sp, #232]	; 0xe8
 c02dff8:	ea4f 4499 	mov.w	r4, r9, lsr #18
 c02dffc:	ea01 0109 	and.w	r1, r1, r9
 c02e000:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
 c02e004:	943b      	str	r4, [sp, #236]	; 0xec
 c02e006:	ea87 0701 	eor.w	r7, r7, r1
 c02e00a:	eb47 0105 	adc.w	r1, r7, r5
 c02e00e:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 c02e012:	e9dd 4538 	ldrd	r4, r5, [sp, #224]	; 0xe0
 c02e016:	4074      	eors	r4, r6
 c02e018:	ea4f 56c9 	mov.w	r6, r9, lsl #23
 c02e01c:	ea46 2658 	orr.w	r6, r6, r8, lsr #9
 c02e020:	963d      	str	r6, [sp, #244]	; 0xf4
 c02e022:	ea4f 56c8 	mov.w	r6, r8, lsl #23
 c02e026:	ea46 2659 	orr.w	r6, r6, r9, lsr #9
 c02e02a:	963c      	str	r6, [sp, #240]	; 0xf0
 c02e02c:	407d      	eors	r5, r7
 c02e02e:	e9dd 673c 	ldrd	r6, r7, [sp, #240]	; 0xf0
 c02e032:	4066      	eors	r6, r4
 c02e034:	1986      	adds	r6, r0, r6
 c02e036:	ea87 0705 	eor.w	r7, r7, r5
 c02e03a:	eb41 0707 	adc.w	r7, r1, r7
 c02e03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c02e042:	1980      	adds	r0, r0, r6
 c02e044:	4179      	adcs	r1, r7
 c02e046:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 c02e04a:	9904      	ldr	r1, [sp, #16]
 c02e04c:	9805      	ldr	r0, [sp, #20]
 c02e04e:	0f09      	lsrs	r1, r1, #28
 c02e050:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02e054:	913e      	str	r1, [sp, #248]	; 0xf8
 c02e056:	0f01      	lsrs	r1, r0, #28
 c02e058:	9804      	ldr	r0, [sp, #16]
 c02e05a:	ac40      	add	r4, sp, #256	; 0x100
 c02e05c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02e060:	913f      	str	r1, [sp, #252]	; 0xfc
 c02e062:	9905      	ldr	r1, [sp, #20]
 c02e064:	0789      	lsls	r1, r1, #30
 c02e066:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02e06a:	9141      	str	r1, [sp, #260]	; 0x104
 c02e06c:	0781      	lsls	r1, r0, #30
 c02e06e:	9805      	ldr	r0, [sp, #20]
 c02e070:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02e074:	9140      	str	r1, [sp, #256]	; 0x100
 c02e076:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e07a:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 c02e07e:	4060      	eors	r0, r4
 c02e080:	9c05      	ldr	r4, [sp, #20]
 c02e082:	4069      	eors	r1, r5
 c02e084:	9d04      	ldr	r5, [sp, #16]
 c02e086:	0664      	lsls	r4, r4, #25
 c02e088:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02e08c:	9443      	str	r4, [sp, #268]	; 0x10c
 c02e08e:	066c      	lsls	r4, r5, #25
 c02e090:	9d05      	ldr	r5, [sp, #20]
 c02e092:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 c02e096:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02e09a:	9442      	str	r4, [sp, #264]	; 0x108
 c02e09c:	ac42      	add	r4, sp, #264	; 0x108
 c02e09e:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e0a2:	4044      	eors	r4, r0
 c02e0a4:	404d      	eors	r5, r1
 c02e0a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 c02e0aa:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 c02e0ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 c02e0b2:	ea44 040a 	orr.w	r4, r4, sl
 c02e0b6:	ea45 050b 	orr.w	r5, r5, fp
 c02e0ba:	e9dd ab00 	ldrd	sl, fp, [sp]
 c02e0be:	ea0a 0a04 	and.w	sl, sl, r4
 c02e0c2:	4654      	mov	r4, sl
 c02e0c4:	ea0b 0b05 	and.w	fp, fp, r5
 c02e0c8:	465d      	mov	r5, fp
 c02e0ca:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 c02e0ce:	ea0a 0a00 	and.w	sl, sl, r0
 c02e0d2:	ea4a 0a04 	orr.w	sl, sl, r4
 c02e0d6:	ea0b 0b01 	and.w	fp, fp, r1
 c02e0da:	ea4b 0b05 	orr.w	fp, fp, r5
 c02e0de:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 c02e0e2:	eb14 040a 	adds.w	r4, r4, sl
 c02e0e6:	eb45 050b 	adc.w	r5, r5, fp
 c02e0ea:	19a0      	adds	r0, r4, r6
 c02e0ec:	eb45 0107 	adc.w	r1, r5, r7
 c02e0f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 c02e0f4:	e953 450a 	ldrd	r4, r5, [r3, #-40]	; 0x28
 c02e0f8:	e952 010a 	ldrd	r0, r1, [r2, #-40]	; 0x28
 c02e0fc:	1826      	adds	r6, r4, r0
 c02e0fe:	eb45 0701 	adc.w	r7, r5, r1
 c02e102:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 c02e106:	ea80 0008 	eor.w	r0, r0, r8
 c02e10a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 c02e10e:	ea81 0109 	eor.w	r1, r1, r9
 c02e112:	19a4      	adds	r4, r4, r6
 c02e114:	4606      	mov	r6, r0
 c02e116:	417d      	adcs	r5, r7
 c02e118:	460f      	mov	r7, r1
 c02e11a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 c02e11e:	4030      	ands	r0, r6
 c02e120:	4039      	ands	r1, r7
 c02e122:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 c02e126:	4046      	eors	r6, r0
 c02e128:	1930      	adds	r0, r6, r4
 c02e12a:	ea87 0701 	eor.w	r7, r7, r1
 c02e12e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 c02e130:	eb47 0105 	adc.w	r1, r7, r5
 c02e134:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 c02e136:	0ba4      	lsrs	r4, r4, #14
 c02e138:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02e13c:	9444      	str	r4, [sp, #272]	; 0x110
 c02e13e:	0bac      	lsrs	r4, r5, #14
 c02e140:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 c02e142:	ae46      	add	r6, sp, #280	; 0x118
 c02e144:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02e148:	9445      	str	r4, [sp, #276]	; 0x114
 c02e14a:	0cac      	lsrs	r4, r5, #18
 c02e14c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 c02e14e:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02e152:	9446      	str	r4, [sp, #280]	; 0x118
 c02e154:	0cac      	lsrs	r4, r5, #18
 c02e156:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 c02e158:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02e15c:	9447      	str	r4, [sp, #284]	; 0x11c
 c02e15e:	ac44      	add	r4, sp, #272	; 0x110
 c02e160:	e9d6 6700 	ldrd	r6, r7, [r6]
 c02e164:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e168:	4074      	eors	r4, r6
 c02e16a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 c02e16c:	407d      	eors	r5, r7
 c02e16e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 c02e170:	05f6      	lsls	r6, r6, #23
 c02e172:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 c02e176:	9649      	str	r6, [sp, #292]	; 0x124
 c02e178:	05fe      	lsls	r6, r7, #23
 c02e17a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 c02e17c:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 c02e180:	9648      	str	r6, [sp, #288]	; 0x120
 c02e182:	ae48      	add	r6, sp, #288	; 0x120
 c02e184:	e9d6 6700 	ldrd	r6, r7, [r6]
 c02e188:	4066      	eors	r6, r4
 c02e18a:	1986      	adds	r6, r0, r6
 c02e18c:	ea87 0705 	eor.w	r7, r7, r5
 c02e190:	eb41 0707 	adc.w	r7, r1, r7
 c02e194:	e9cd 6708 	strd	r6, r7, [sp, #32]
 c02e198:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c02e19c:	e9dd 6700 	ldrd	r6, r7, [sp]
 c02e1a0:	1836      	adds	r6, r6, r0
 c02e1a2:	414f      	adcs	r7, r1
 c02e1a4:	9902      	ldr	r1, [sp, #8]
 c02e1a6:	9803      	ldr	r0, [sp, #12]
 c02e1a8:	0f09      	lsrs	r1, r1, #28
 c02e1aa:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02e1ae:	914a      	str	r1, [sp, #296]	; 0x128
 c02e1b0:	0f01      	lsrs	r1, r0, #28
 c02e1b2:	9802      	ldr	r0, [sp, #8]
 c02e1b4:	ac4c      	add	r4, sp, #304	; 0x130
 c02e1b6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02e1ba:	914b      	str	r1, [sp, #300]	; 0x12c
 c02e1bc:	9903      	ldr	r1, [sp, #12]
 c02e1be:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 c02e1c2:	0789      	lsls	r1, r1, #30
 c02e1c4:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02e1c8:	914d      	str	r1, [sp, #308]	; 0x134
 c02e1ca:	0781      	lsls	r1, r0, #30
 c02e1cc:	9803      	ldr	r0, [sp, #12]
 c02e1ce:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02e1d2:	914c      	str	r1, [sp, #304]	; 0x130
 c02e1d4:	a94a      	add	r1, sp, #296	; 0x128
 c02e1d6:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e1da:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02e1de:	4060      	eors	r0, r4
 c02e1e0:	9c03      	ldr	r4, [sp, #12]
 c02e1e2:	4069      	eors	r1, r5
 c02e1e4:	9d02      	ldr	r5, [sp, #8]
 c02e1e6:	0664      	lsls	r4, r4, #25
 c02e1e8:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02e1ec:	944f      	str	r4, [sp, #316]	; 0x13c
 c02e1ee:	066c      	lsls	r4, r5, #25
 c02e1f0:	9d03      	ldr	r5, [sp, #12]
 c02e1f2:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02e1f6:	944e      	str	r4, [sp, #312]	; 0x138
 c02e1f8:	ac4e      	add	r4, sp, #312	; 0x138
 c02e1fa:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e1fe:	4044      	eors	r4, r0
 c02e200:	404d      	eors	r5, r1
 c02e202:	e9cd 4500 	strd	r4, r5, [sp]
 c02e206:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 c02e20a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c02e20e:	ea44 040a 	orr.w	r4, r4, sl
 c02e212:	ea45 050b 	orr.w	r5, r5, fp
 c02e216:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 c02e21a:	ea0a 0a04 	and.w	sl, sl, r4
 c02e21e:	4654      	mov	r4, sl
 c02e220:	ea0b 0b05 	and.w	fp, fp, r5
 c02e224:	465d      	mov	r5, fp
 c02e226:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 c02e22a:	ea0a 0a00 	and.w	sl, sl, r0
 c02e22e:	ea4a 0a04 	orr.w	sl, sl, r4
 c02e232:	ea0b 0b01 	and.w	fp, fp, r1
 c02e236:	ea4b 0b05 	orr.w	fp, fp, r5
 c02e23a:	e9dd 4500 	ldrd	r4, r5, [sp]
 c02e23e:	eb14 040a 	adds.w	r4, r4, sl
 c02e242:	eb45 050b 	adc.w	r5, r5, fp
 c02e246:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c02e24a:	1900      	adds	r0, r0, r4
 c02e24c:	4169      	adcs	r1, r5
 c02e24e:	e9cd 0100 	strd	r0, r1, [sp]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 c02e252:	e953 4508 	ldrd	r4, r5, [r3, #-32]
 c02e256:	e952 0108 	ldrd	r0, r1, [r2, #-32]
 c02e25a:	eb10 0a04 	adds.w	sl, r0, r4
 c02e25e:	eb41 0b05 	adc.w	fp, r1, r5
 c02e262:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 c02e266:	eb10 000a 	adds.w	r0, r0, sl
 c02e26a:	eb41 010b 	adc.w	r1, r1, fp
 c02e26e:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 c02e272:	ea8a 0a08 	eor.w	sl, sl, r8
 c02e276:	ea8b 0b09 	eor.w	fp, fp, r9
 c02e27a:	ea0a 0406 	and.w	r4, sl, r6
 c02e27e:	ea0b 0507 	and.w	r5, fp, r7
 c02e282:	ea84 0a08 	eor.w	sl, r4, r8
 c02e286:	eb1a 0400 	adds.w	r4, sl, r0
 c02e28a:	ea85 0b09 	eor.w	fp, r5, r9
 c02e28e:	eb4b 0501 	adc.w	r5, fp, r1
 c02e292:	0bb1      	lsrs	r1, r6, #14
 c02e294:	ea41 4187 	orr.w	r1, r1, r7, lsl #18
 c02e298:	9150      	str	r1, [sp, #320]	; 0x140
 c02e29a:	0bb9      	lsrs	r1, r7, #14
 c02e29c:	ea41 4186 	orr.w	r1, r1, r6, lsl #18
 c02e2a0:	9151      	str	r1, [sp, #324]	; 0x144
 c02e2a2:	0cb1      	lsrs	r1, r6, #18
 c02e2a4:	ea41 3187 	orr.w	r1, r1, r7, lsl #14
 c02e2a8:	9152      	str	r1, [sp, #328]	; 0x148
 c02e2aa:	0cb9      	lsrs	r1, r7, #18
 c02e2ac:	ea41 3186 	orr.w	r1, r1, r6, lsl #14
 c02e2b0:	9153      	str	r1, [sp, #332]	; 0x14c
 c02e2b2:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 c02e2b6:	a950      	add	r1, sp, #320	; 0x140
 c02e2b8:	e9da ab00 	ldrd	sl, fp, [sl]
 c02e2bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02e2c0:	ea80 000a 	eor.w	r0, r0, sl
 c02e2c4:	4682      	mov	sl, r0
 c02e2c6:	ea81 010b 	eor.w	r1, r1, fp
 c02e2ca:	468b      	mov	fp, r1
 c02e2cc:	05f9      	lsls	r1, r7, #23
 c02e2ce:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 c02e2d2:	9155      	str	r1, [sp, #340]	; 0x154
 c02e2d4:	05f1      	lsls	r1, r6, #23
 c02e2d6:	ea41 2157 	orr.w	r1, r1, r7, lsr #9
 c02e2da:	9154      	str	r1, [sp, #336]	; 0x150
 c02e2dc:	a954      	add	r1, sp, #336	; 0x150
 c02e2de:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02e2e2:	ea80 000a 	eor.w	r0, r0, sl
 c02e2e6:	eb14 0a00 	adds.w	sl, r4, r0
 c02e2ea:	ea81 010b 	eor.w	r1, r1, fp
 c02e2ee:	eb45 0b01 	adc.w	fp, r5, r1
 c02e2f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 c02e2f6:	eb10 000a 	adds.w	r0, r0, sl
 c02e2fa:	eb41 010b 	adc.w	r1, r1, fp
 c02e2fe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 c02e302:	9900      	ldr	r1, [sp, #0]
 c02e304:	9801      	ldr	r0, [sp, #4]
 c02e306:	0f09      	lsrs	r1, r1, #28
 c02e308:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02e30c:	9156      	str	r1, [sp, #344]	; 0x158
 c02e30e:	0f01      	lsrs	r1, r0, #28
 c02e310:	9800      	ldr	r0, [sp, #0]
 c02e312:	ac58      	add	r4, sp, #352	; 0x160
 c02e314:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02e318:	9157      	str	r1, [sp, #348]	; 0x15c
 c02e31a:	9901      	ldr	r1, [sp, #4]
 c02e31c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 c02e320:	0789      	lsls	r1, r1, #30
 c02e322:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02e326:	9159      	str	r1, [sp, #356]	; 0x164
 c02e328:	0781      	lsls	r1, r0, #30
 c02e32a:	9801      	ldr	r0, [sp, #4]
 c02e32c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02e330:	9158      	str	r1, [sp, #352]	; 0x160
 c02e332:	a956      	add	r1, sp, #344	; 0x158
 c02e334:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e338:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02e33c:	4060      	eors	r0, r4
 c02e33e:	9c01      	ldr	r4, [sp, #4]
 c02e340:	4069      	eors	r1, r5
 c02e342:	9d00      	ldr	r5, [sp, #0]
 c02e344:	0664      	lsls	r4, r4, #25
 c02e346:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02e34a:	945b      	str	r4, [sp, #364]	; 0x16c
 c02e34c:	066c      	lsls	r4, r5, #25
 c02e34e:	9d01      	ldr	r5, [sp, #4]
 c02e350:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02e354:	945a      	str	r4, [sp, #360]	; 0x168
 c02e356:	ac5a      	add	r4, sp, #360	; 0x168
 c02e358:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e35c:	4044      	eors	r4, r0
 c02e35e:	404d      	eors	r5, r1
 c02e360:	e9cd 4506 	strd	r4, r5, [sp, #24]
 c02e364:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 c02e368:	e9dd ab00 	ldrd	sl, fp, [sp]
 c02e36c:	ea44 040a 	orr.w	r4, r4, sl
 c02e370:	ea45 050b 	orr.w	r5, r5, fp
 c02e374:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 c02e378:	ea0a 0a04 	and.w	sl, sl, r4
 c02e37c:	4654      	mov	r4, sl
 c02e37e:	e9dd 0100 	ldrd	r0, r1, [sp]
 c02e382:	ea0b 0b05 	and.w	fp, fp, r5
 c02e386:	465d      	mov	r5, fp
 c02e388:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 c02e38c:	ea0a 0a00 	and.w	sl, sl, r0
 c02e390:	ea4a 0a04 	orr.w	sl, sl, r4
 c02e394:	ea0b 0b01 	and.w	fp, fp, r1
 c02e398:	ea4b 0b05 	orr.w	fp, fp, r5
 c02e39c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 c02e3a0:	eb14 040a 	adds.w	r4, r4, sl
 c02e3a4:	eb45 050b 	adc.w	r5, r5, fp
 c02e3a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c02e3ac:	1900      	adds	r0, r0, r4
 c02e3ae:	4169      	adcs	r1, r5
 c02e3b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 c02e3b4:	e953 4506 	ldrd	r4, r5, [r3, #-24]
 c02e3b8:	e952 0106 	ldrd	r0, r1, [r2, #-24]
 c02e3bc:	eb10 0a04 	adds.w	sl, r0, r4
 c02e3c0:	eb41 0b05 	adc.w	fp, r1, r5
 c02e3c4:	eb1a 0008 	adds.w	r0, sl, r8
 c02e3c8:	eb4b 0109 	adc.w	r1, fp, r9
 c02e3cc:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 c02e3d0:	ea88 0806 	eor.w	r8, r8, r6
 c02e3d4:	ea89 0907 	eor.w	r9, r9, r7
 c02e3d8:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 c02e3dc:	ea04 0408 	and.w	r4, r4, r8
 c02e3e0:	46a0      	mov	r8, r4
 c02e3e2:	ea05 0509 	and.w	r5, r5, r9
 c02e3e6:	46a9      	mov	r9, r5
 c02e3e8:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 c02e3ec:	ea84 0408 	eor.w	r4, r4, r8
 c02e3f0:	eb14 0800 	adds.w	r8, r4, r0
 c02e3f4:	ea85 0509 	eor.w	r5, r5, r9
 c02e3f8:	eb45 0901 	adc.w	r9, r5, r1
 c02e3fc:	990e      	ldr	r1, [sp, #56]	; 0x38
 c02e3fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 c02e400:	0b89      	lsrs	r1, r1, #14
 c02e402:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 c02e406:	915c      	str	r1, [sp, #368]	; 0x170
 c02e408:	0b81      	lsrs	r1, r0, #14
 c02e40a:	980e      	ldr	r0, [sp, #56]	; 0x38
 c02e40c:	ac5e      	add	r4, sp, #376	; 0x178
 c02e40e:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 c02e412:	915d      	str	r1, [sp, #372]	; 0x174
 c02e414:	0c81      	lsrs	r1, r0, #18
 c02e416:	980f      	ldr	r0, [sp, #60]	; 0x3c
 c02e418:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 c02e41c:	915e      	str	r1, [sp, #376]	; 0x178
 c02e41e:	0c81      	lsrs	r1, r0, #18
 c02e420:	980e      	ldr	r0, [sp, #56]	; 0x38
 c02e422:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 c02e426:	915f      	str	r1, [sp, #380]	; 0x17c
 c02e428:	a95c      	add	r1, sp, #368	; 0x170
 c02e42a:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e42e:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02e432:	4060      	eors	r0, r4
 c02e434:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 c02e436:	4069      	eors	r1, r5
 c02e438:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 c02e43a:	05e4      	lsls	r4, r4, #23
 c02e43c:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 c02e440:	9461      	str	r4, [sp, #388]	; 0x184
 c02e442:	05ec      	lsls	r4, r5, #23
 c02e444:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 c02e446:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 c02e44a:	9460      	str	r4, [sp, #384]	; 0x180
 c02e44c:	ac60      	add	r4, sp, #384	; 0x180
 c02e44e:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e452:	4044      	eors	r4, r0
 c02e454:	eb18 0404 	adds.w	r4, r8, r4
 c02e458:	ea85 0501 	eor.w	r5, r5, r1
 c02e45c:	eb49 0505 	adc.w	r5, r9, r5
 c02e460:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 c02e464:	e9cd 4508 	strd	r4, r5, [sp, #32]
 c02e468:	1824      	adds	r4, r4, r0
 c02e46a:	414d      	adcs	r5, r1
 c02e46c:	4620      	mov	r0, r4
 c02e46e:	4629      	mov	r1, r5
 c02e470:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 c02e474:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 c02e478:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 c02e47c:	9906      	ldr	r1, [sp, #24]
 c02e47e:	9807      	ldr	r0, [sp, #28]
 c02e480:	0f09      	lsrs	r1, r1, #28
 c02e482:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02e486:	9162      	str	r1, [sp, #392]	; 0x188
 c02e488:	0f01      	lsrs	r1, r0, #28
 c02e48a:	9806      	ldr	r0, [sp, #24]
 c02e48c:	ac64      	add	r4, sp, #400	; 0x190
 c02e48e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02e492:	9163      	str	r1, [sp, #396]	; 0x18c
 c02e494:	9907      	ldr	r1, [sp, #28]
 c02e496:	0789      	lsls	r1, r1, #30
 c02e498:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02e49c:	9165      	str	r1, [sp, #404]	; 0x194
 c02e49e:	0781      	lsls	r1, r0, #30
 c02e4a0:	9807      	ldr	r0, [sp, #28]
 c02e4a2:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02e4a6:	9164      	str	r1, [sp, #400]	; 0x190
 c02e4a8:	a962      	add	r1, sp, #392	; 0x188
 c02e4aa:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e4ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02e4b2:	4060      	eors	r0, r4
 c02e4b4:	9c07      	ldr	r4, [sp, #28]
 c02e4b6:	4069      	eors	r1, r5
 c02e4b8:	9d06      	ldr	r5, [sp, #24]
 c02e4ba:	0664      	lsls	r4, r4, #25
 c02e4bc:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02e4c0:	9467      	str	r4, [sp, #412]	; 0x19c
 c02e4c2:	066c      	lsls	r4, r5, #25
 c02e4c4:	9d07      	ldr	r5, [sp, #28]
 c02e4c6:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02e4ca:	9466      	str	r4, [sp, #408]	; 0x198
 c02e4cc:	ac66      	add	r4, sp, #408	; 0x198
 c02e4ce:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e4d2:	4044      	eors	r4, r0
 c02e4d4:	404d      	eors	r5, r1
 c02e4d6:	4620      	mov	r0, r4
 c02e4d8:	4629      	mov	r1, r5
 c02e4da:	e9dd 4500 	ldrd	r4, r5, [sp]
 c02e4de:	ea44 0408 	orr.w	r4, r4, r8
 c02e4e2:	ea45 0509 	orr.w	r5, r5, r9
 c02e4e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 c02e4ea:	ea08 0804 	and.w	r8, r8, r4
 c02e4ee:	4644      	mov	r4, r8
 c02e4f0:	ea09 0905 	and.w	r9, r9, r5
 c02e4f4:	464d      	mov	r5, r9
 c02e4f6:	e9dd 8900 	ldrd	r8, r9, [sp]
 c02e4fa:	ea08 080a 	and.w	r8, r8, sl
 c02e4fe:	ea09 090b 	and.w	r9, r9, fp
 c02e502:	ea48 0804 	orr.w	r8, r8, r4
 c02e506:	eb18 0400 	adds.w	r4, r8, r0
 c02e50a:	ea49 0905 	orr.w	r9, r9, r5
 c02e50e:	eb49 0501 	adc.w	r5, r9, r1
 c02e512:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c02e516:	1900      	adds	r0, r0, r4
 c02e518:	4169      	adcs	r1, r5
 c02e51a:	e9cd 0104 	strd	r0, r1, [sp, #16]
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 c02e51e:	e953 4504 	ldrd	r4, r5, [r3, #-16]
 c02e522:	e952 0104 	ldrd	r0, r1, [r2, #-16]
 c02e526:	eb10 0804 	adds.w	r8, r0, r4
 c02e52a:	eb41 0905 	adc.w	r9, r1, r5
 c02e52e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 c02e532:	4070      	eors	r0, r6
 c02e534:	4079      	eors	r1, r7
 c02e536:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 c02e53a:	4004      	ands	r4, r0
 c02e53c:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 c02e540:	4074      	eors	r4, r6
 c02e542:	eb1a 0a08 	adds.w	sl, sl, r8
 c02e546:	ea05 0501 	and.w	r5, r5, r1
 c02e54a:	eb4b 0b09 	adc.w	fp, fp, r9
 c02e54e:	407d      	eors	r5, r7
 c02e550:	eb14 080a 	adds.w	r8, r4, sl
 c02e554:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 c02e556:	eb45 090b 	adc.w	r9, r5, fp
 c02e55a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 c02e55c:	0ba4      	lsrs	r4, r4, #14
 c02e55e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02e562:	9468      	str	r4, [sp, #416]	; 0x1a0
 c02e564:	0bac      	lsrs	r4, r5, #14
 c02e566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c02e568:	a968      	add	r1, sp, #416	; 0x1a0
 c02e56a:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02e56e:	9469      	str	r4, [sp, #420]	; 0x1a4
 c02e570:	0cac      	lsrs	r4, r5, #18
 c02e572:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 c02e574:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02e578:	946a      	str	r4, [sp, #424]	; 0x1a8
 c02e57a:	0cac      	lsrs	r4, r5, #18
 c02e57c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c02e57e:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02e582:	946b      	str	r4, [sp, #428]	; 0x1ac
 c02e584:	e9d1 4500 	ldrd	r4, r5, [r1]
 c02e588:	a96a      	add	r1, sp, #424	; 0x1a8
 c02e58a:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02e58e:	404d      	eors	r5, r1
 c02e590:	990d      	ldr	r1, [sp, #52]	; 0x34
 c02e592:	4044      	eors	r4, r0
 c02e594:	ea4f 5ac1 	mov.w	sl, r1, lsl #23
 c02e598:	990c      	ldr	r1, [sp, #48]	; 0x30
 c02e59a:	ea4a 2151 	orr.w	r1, sl, r1, lsr #9
 c02e59e:	916d      	str	r1, [sp, #436]	; 0x1b4
 c02e5a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 c02e5a2:	ea4f 5ac1 	mov.w	sl, r1, lsl #23
 c02e5a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 c02e5a8:	ea4a 2151 	orr.w	r1, sl, r1, lsr #9
 c02e5ac:	916c      	str	r1, [sp, #432]	; 0x1b0
 c02e5ae:	a96c      	add	r1, sp, #432	; 0x1b0
 c02e5b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02e5b4:	4060      	eors	r0, r4
 c02e5b6:	eb18 0a00 	adds.w	sl, r8, r0
 c02e5ba:	ea81 0105 	eor.w	r1, r1, r5
 c02e5be:	eb49 0b01 	adc.w	fp, r9, r1
 c02e5c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c02e5c6:	eb10 000a 	adds.w	r0, r0, sl
 c02e5ca:	eb41 010b 	adc.w	r1, r1, fp
 c02e5ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 c02e5d2:	9904      	ldr	r1, [sp, #16]
 c02e5d4:	9805      	ldr	r0, [sp, #20]
 c02e5d6:	0f09      	lsrs	r1, r1, #28
 c02e5d8:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02e5dc:	916e      	str	r1, [sp, #440]	; 0x1b8
 c02e5de:	0f01      	lsrs	r1, r0, #28
 c02e5e0:	9804      	ldr	r0, [sp, #16]
 c02e5e2:	ac70      	add	r4, sp, #448	; 0x1c0
 c02e5e4:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02e5e8:	916f      	str	r1, [sp, #444]	; 0x1bc
 c02e5ea:	9905      	ldr	r1, [sp, #20]
 c02e5ec:	0789      	lsls	r1, r1, #30
 c02e5ee:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02e5f2:	9171      	str	r1, [sp, #452]	; 0x1c4
 c02e5f4:	0781      	lsls	r1, r0, #30
 c02e5f6:	9805      	ldr	r0, [sp, #20]
 c02e5f8:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02e5fc:	9170      	str	r1, [sp, #448]	; 0x1c0
 c02e5fe:	a96e      	add	r1, sp, #440	; 0x1b8
 c02e600:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e604:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02e608:	4060      	eors	r0, r4
 c02e60a:	9c05      	ldr	r4, [sp, #20]
 c02e60c:	4069      	eors	r1, r5
 c02e60e:	9d04      	ldr	r5, [sp, #16]
 c02e610:	0664      	lsls	r4, r4, #25
 c02e612:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02e616:	9473      	str	r4, [sp, #460]	; 0x1cc
 c02e618:	066c      	lsls	r4, r5, #25
 c02e61a:	9d05      	ldr	r5, [sp, #20]
 c02e61c:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02e620:	9472      	str	r4, [sp, #456]	; 0x1c8
 c02e622:	ac72      	add	r4, sp, #456	; 0x1c8
 c02e624:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e628:	4044      	eors	r4, r0
 c02e62a:	404d      	eors	r5, r1
 c02e62c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 c02e630:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 c02e634:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 c02e638:	4320      	orrs	r0, r4
 c02e63a:	4329      	orrs	r1, r5
 c02e63c:	e9dd 8900 	ldrd	r8, r9, [sp]
 c02e640:	ea08 0800 	and.w	r8, r8, r0
 c02e644:	ea09 0901 	and.w	r9, r9, r1
 c02e648:	4644      	mov	r4, r8
 c02e64a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 c02e64e:	464d      	mov	r5, r9
 c02e650:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 c02e654:	ea00 0008 	and.w	r0, r0, r8
 c02e658:	ea40 0804 	orr.w	r8, r0, r4
 c02e65c:	ea01 0109 	and.w	r1, r1, r9
 c02e660:	ea41 0905 	orr.w	r9, r1, r5
 c02e664:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 c02e668:	eb14 0408 	adds.w	r4, r4, r8
 c02e66c:	eb45 0509 	adc.w	r5, r5, r9
 c02e670:	eb1a 0004 	adds.w	r0, sl, r4
 c02e674:	eb4b 0105 	adc.w	r1, fp, r5
 c02e678:	e9cd 0102 	strd	r0, r1, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 c02e67c:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 c02e680:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 c02e684:	eb14 0800 	adds.w	r8, r4, r0
 c02e688:	eb45 0901 	adc.w	r9, r5, r1
 c02e68c:	eb18 0406 	adds.w	r4, r8, r6
 c02e690:	eb49 0507 	adc.w	r5, r9, r7
 c02e694:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 c02e698:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 c02e69c:	4070      	eors	r0, r6
 c02e69e:	4079      	eors	r1, r7
 c02e6a0:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 c02e6a4:	4006      	ands	r6, r0
 c02e6a6:	4630      	mov	r0, r6
 c02e6a8:	400f      	ands	r7, r1
 c02e6aa:	4639      	mov	r1, r7
 c02e6ac:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 c02e6b0:	4046      	eors	r6, r0
 c02e6b2:	1930      	adds	r0, r6, r4
 c02e6b4:	ea87 0701 	eor.w	r7, r7, r1
 c02e6b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 c02e6ba:	eb47 0105 	adc.w	r1, r7, r5
 c02e6be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 c02e6c0:	0ba4      	lsrs	r4, r4, #14
 c02e6c2:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02e6c6:	9474      	str	r4, [sp, #464]	; 0x1d0
 c02e6c8:	0bac      	lsrs	r4, r5, #14
 c02e6ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 c02e6cc:	ae76      	add	r6, sp, #472	; 0x1d8
 c02e6ce:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02e6d2:	9475      	str	r4, [sp, #468]	; 0x1d4
 c02e6d4:	0cac      	lsrs	r4, r5, #18
 c02e6d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 c02e6d8:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02e6dc:	9476      	str	r4, [sp, #472]	; 0x1d8
 c02e6de:	0cac      	lsrs	r4, r5, #18
 c02e6e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 c02e6e2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02e6e6:	9477      	str	r4, [sp, #476]	; 0x1dc
 c02e6e8:	ac74      	add	r4, sp, #464	; 0x1d0
 c02e6ea:	e9d6 6700 	ldrd	r6, r7, [r6]
 c02e6ee:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e6f2:	4074      	eors	r4, r6
 c02e6f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 c02e6f6:	407d      	eors	r5, r7
 c02e6f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 c02e6fa:	05f6      	lsls	r6, r6, #23
 c02e6fc:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 c02e700:	9679      	str	r6, [sp, #484]	; 0x1e4
 c02e702:	05fe      	lsls	r6, r7, #23
 c02e704:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 c02e706:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 c02e70a:	9678      	str	r6, [sp, #480]	; 0x1e0
 c02e70c:	ae78      	add	r6, sp, #480	; 0x1e0
 c02e70e:	e9d6 6700 	ldrd	r6, r7, [r6]
 c02e712:	4066      	eors	r6, r4
 c02e714:	1986      	adds	r6, r0, r6
 c02e716:	ea87 0705 	eor.w	r7, r7, r5
 c02e71a:	eb41 0707 	adc.w	r7, r1, r7
 c02e71e:	e9dd 0100 	ldrd	r0, r1, [sp]
 c02e722:	1980      	adds	r0, r0, r6
 c02e724:	4179      	adcs	r1, r7
 c02e726:	e9cd 0108 	strd	r0, r1, [sp, #32]
 c02e72a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 c02e72e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 c02e732:	9902      	ldr	r1, [sp, #8]
 c02e734:	9803      	ldr	r0, [sp, #12]
 c02e736:	0f09      	lsrs	r1, r1, #28
 c02e738:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02e73c:	917a      	str	r1, [sp, #488]	; 0x1e8
 c02e73e:	0f01      	lsrs	r1, r0, #28
 c02e740:	9802      	ldr	r0, [sp, #8]
 c02e742:	ac7c      	add	r4, sp, #496	; 0x1f0
 c02e744:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02e748:	917b      	str	r1, [sp, #492]	; 0x1ec
 c02e74a:	9903      	ldr	r1, [sp, #12]
 c02e74c:	0789      	lsls	r1, r1, #30
 c02e74e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02e752:	917d      	str	r1, [sp, #500]	; 0x1f4
 c02e754:	0781      	lsls	r1, r0, #30
 c02e756:	9803      	ldr	r0, [sp, #12]
 c02e758:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02e75c:	917c      	str	r1, [sp, #496]	; 0x1f0
 c02e75e:	a97a      	add	r1, sp, #488	; 0x1e8
 c02e760:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e764:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02e768:	4060      	eors	r0, r4
 c02e76a:	9c03      	ldr	r4, [sp, #12]
 c02e76c:	4069      	eors	r1, r5
 c02e76e:	9d02      	ldr	r5, [sp, #8]
 c02e770:	0664      	lsls	r4, r4, #25
 c02e772:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02e776:	947f      	str	r4, [sp, #508]	; 0x1fc
 c02e778:	066c      	lsls	r4, r5, #25
 c02e77a:	9d03      	ldr	r5, [sp, #12]
 c02e77c:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02e780:	947e      	str	r4, [sp, #504]	; 0x1f8
 c02e782:	ac7e      	add	r4, sp, #504	; 0x1f8
 c02e784:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02e788:	4044      	eors	r4, r0
 c02e78a:	404d      	eors	r5, r1
 c02e78c:	4620      	mov	r0, r4
 c02e78e:	4629      	mov	r1, r5
 c02e790:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 c02e794:	ea44 0408 	orr.w	r4, r4, r8
 c02e798:	ea45 0509 	orr.w	r5, r5, r9
 c02e79c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 c02e7a0:	ea08 0804 	and.w	r8, r8, r4
 c02e7a4:	4644      	mov	r4, r8
 c02e7a6:	ea09 0905 	and.w	r9, r9, r5
 c02e7aa:	464d      	mov	r5, r9
 c02e7ac:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 c02e7b0:	ea08 080a 	and.w	r8, r8, sl
 c02e7b4:	ea09 090b 	and.w	r9, r9, fp
 c02e7b8:	ea48 0804 	orr.w	r8, r8, r4
 c02e7bc:	eb18 0400 	adds.w	r4, r8, r0
 c02e7c0:	ea49 0905 	orr.w	r9, r9, r5
 c02e7c4:	eb49 0501 	adc.w	r5, r9, r1
 c02e7c8:	19a0      	adds	r0, r4, r6
 c02e7ca:	eb45 0107 	adc.w	r1, r5, r7
    }
    while( i < 80 );
 c02e7ce:	459c      	cmp	ip, r3
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 c02e7d0:	e9cd 0100 	strd	r0, r1, [sp]
    while( i < 80 );
 c02e7d4:	f47f aa9a 	bne.w	c02dd0c <mbedtls_internal_sha512_process+0x1f4>

    ctx->state[0] += A;
 c02e7d8:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
    ctx->state[1] += B;
 c02e7dc:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
    ctx->state[2] += C;
 c02e7e0:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    ctx->state[0] += A;
 c02e7e4:	1824      	adds	r4, r4, r0
 c02e7e6:	414d      	adcs	r5, r1
 c02e7e8:	e9ce 4504 	strd	r4, r5, [lr, #16]
    ctx->state[1] += B;
 c02e7ec:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 c02e7f0:	eb13 030a 	adds.w	r3, r3, sl
 c02e7f4:	eb44 040b 	adc.w	r4, r4, fp
 c02e7f8:	469a      	mov	sl, r3
 c02e7fa:	46a3      	mov	fp, r4
    ctx->state[2] += C;
 c02e7fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 c02e800:	eb13 0308 	adds.w	r3, r3, r8
 c02e804:	eb44 0409 	adc.w	r4, r4, r9
 c02e808:	4698      	mov	r8, r3
    ctx->state[3] += D;
 c02e80a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ctx->state[2] += C;
 c02e80e:	46a1      	mov	r9, r4
    ctx->state[3] += D;
 c02e810:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;

    return( 0 );
}
 c02e814:	2000      	movs	r0, #0
    ctx->state[3] += D;
 c02e816:	18a4      	adds	r4, r4, r2
 c02e818:	415d      	adcs	r5, r3
 c02e81a:	e9ce 450a 	strd	r4, r5, [lr, #40]	; 0x28
    ctx->state[4] += E;
 c02e81e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 c02e822:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 c02e826:	18a4      	adds	r4, r4, r2
 c02e828:	415d      	adcs	r5, r3
 c02e82a:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
 c02e82e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 c02e832:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 c02e836:	18a4      	adds	r4, r4, r2
 c02e838:	415d      	adcs	r5, r3
 c02e83a:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
 c02e83e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 c02e842:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 c02e846:	18a4      	adds	r4, r4, r2
 c02e848:	415d      	adcs	r5, r3
 c02e84a:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;
 c02e84e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 c02e852:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 c02e856:	18a4      	adds	r4, r4, r2
 c02e858:	415d      	adcs	r5, r3
    ctx->state[1] += B;
 c02e85a:	e9ce ab06 	strd	sl, fp, [lr, #24]
    ctx->state[2] += C;
 c02e85e:	e9ce 8908 	strd	r8, r9, [lr, #32]
    ctx->state[7] += H;
 c02e862:	e9ce 4512 	strd	r4, r5, [lr, #72]	; 0x48
}
 c02e866:	f20d 4d84 	addw	sp, sp, #1156	; 0x484
 c02e86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c02e86e:	bf00      	nop

0c02e870 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 c02e870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02e874:	4605      	mov	r5, r0
 c02e876:	460e      	mov	r6, r1
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 c02e878:	4614      	mov	r4, r2
 c02e87a:	b912      	cbnz	r2, c02e882 <mbedtls_sha512_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 c02e87c:	2000      	movs	r0, #0
}
 c02e87e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c02e882:	2300      	movs	r3, #0
    left = (unsigned int) (ctx->total[0] & 0x7F);
 c02e884:	e9d0 ab00 	ldrd	sl, fp, [r0]
 c02e888:	eb1a 0002 	adds.w	r0, sl, r2
 c02e88c:	eb5b 0103 	adcs.w	r1, fp, r3
 c02e890:	f04f 0800 	mov.w	r8, #0
 c02e894:	f04f 0900 	mov.w	r9, #0
 c02e898:	bf24      	itt	cs
 c02e89a:	f04f 0801 	movcs.w	r8, #1
 c02e89e:	f04f 0900 	movcs.w	r9, #0
    if( ctx->total[0] < (uint64_t) ilen )
 c02e8a2:	ea58 0309 	orrs.w	r3, r8, r9
    left = (unsigned int) (ctx->total[0] & 0x7F);
 c02e8a6:	f00a 077f 	and.w	r7, sl, #127	; 0x7f
    ctx->total[0] += (uint64_t) ilen;
 c02e8aa:	e9c5 0100 	strd	r0, r1, [r5]
    if( ctx->total[0] < (uint64_t) ilen )
 c02e8ae:	d006      	beq.n	c02e8be <mbedtls_sha512_update_ret+0x4e>
        ctx->total[1]++;
 c02e8b0:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 c02e8b4:	1c50      	adds	r0, r2, #1
 c02e8b6:	f143 0100 	adc.w	r1, r3, #0
 c02e8ba:	e9c5 0102 	strd	r0, r1, [r5, #8]
    if( left && ilen >= fill )
 c02e8be:	b1af      	cbz	r7, c02e8ec <mbedtls_sha512_update_ret+0x7c>
    fill = 128 - left;
 c02e8c0:	f1c7 0880 	rsb	r8, r7, #128	; 0x80
    if( left && ilen >= fill )
 c02e8c4:	4544      	cmp	r4, r8
 c02e8c6:	d311      	bcc.n	c02e8ec <mbedtls_sha512_update_ret+0x7c>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 c02e8c8:	f105 0950 	add.w	r9, r5, #80	; 0x50
 c02e8cc:	4631      	mov	r1, r6
 c02e8ce:	4642      	mov	r2, r8
 c02e8d0:	eb09 0007 	add.w	r0, r9, r7
 c02e8d4:	f7e9 f853 	bl	c01797e <memcpy>
        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 c02e8d8:	4649      	mov	r1, r9
 c02e8da:	4628      	mov	r0, r5
 c02e8dc:	f7ff f91c 	bl	c02db18 <mbedtls_internal_sha512_process>
 c02e8e0:	2800      	cmp	r0, #0
 c02e8e2:	d1cc      	bne.n	c02e87e <mbedtls_sha512_update_ret+0xe>
        left = 0;
 c02e8e4:	4607      	mov	r7, r0
        input += fill;
 c02e8e6:	4446      	add	r6, r8
        ilen  -= fill;
 c02e8e8:	eba4 0408 	sub.w	r4, r4, r8
 c02e8ec:	4426      	add	r6, r4
 c02e8ee:	e005      	b.n	c02e8fc <mbedtls_sha512_update_ret+0x8c>
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 c02e8f0:	4628      	mov	r0, r5
 c02e8f2:	f7ff f911 	bl	c02db18 <mbedtls_internal_sha512_process>
 c02e8f6:	2800      	cmp	r0, #0
 c02e8f8:	d1c1      	bne.n	c02e87e <mbedtls_sha512_update_ret+0xe>
        ilen  -= 128;
 c02e8fa:	3c80      	subs	r4, #128	; 0x80
    while( ilen >= 128 )
 c02e8fc:	2c7f      	cmp	r4, #127	; 0x7f
 c02e8fe:	eba6 0104 	sub.w	r1, r6, r4
 c02e902:	d8f5      	bhi.n	c02e8f0 <mbedtls_sha512_update_ret+0x80>
    if( ilen > 0 )
 c02e904:	2c00      	cmp	r4, #0
 c02e906:	d0b9      	beq.n	c02e87c <mbedtls_sha512_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 c02e908:	f105 0050 	add.w	r0, r5, #80	; 0x50
 c02e90c:	4622      	mov	r2, r4
 c02e90e:	4438      	add	r0, r7
 c02e910:	f7e9 f835 	bl	c01797e <memcpy>
 c02e914:	e7b2      	b.n	c02e87c <mbedtls_sha512_update_ret+0xc>

0c02e916 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 c02e916:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 c02e91a:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 c02e91c:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x7F;
 c02e91e:	6803      	ldr	r3, [r0, #0]
 c02e920:	f100 0650 	add.w	r6, r0, #80	; 0x50
 c02e924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ctx->buffer[used++] = 0x80;
 c02e928:	1c5a      	adds	r2, r3, #1

    if( used <= 112 )
 c02e92a:	2a70      	cmp	r2, #112	; 0x70
    ctx->buffer[used++] = 0x80;
 c02e92c:	4403      	add	r3, r0
{
 c02e92e:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
 c02e930:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
 c02e934:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 112 )
 c02e938:	f200 8118 	bhi.w	c02eb6c <mbedtls_sha512_finish_ret+0x256>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 c02e93c:	2100      	movs	r1, #0
 c02e93e:	f1c2 0270 	rsb	r2, r2, #112	; 0x70
        memset( ctx->buffer + used, 0, 128 - used );

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 112 );
 c02e942:	f7e9 f840 	bl	c0179c6 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
 c02e946:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    high = ( ctx->total[0] >> 61 )
 c02e94a:	e9d4 2300 	ldrd	r2, r3, [r4]
         | ( ctx->total[1] <<  3 );
 c02e94e:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    high = ( ctx->total[0] >> 61 )
 c02e952:	2100      	movs	r1, #0
         | ( ctx->total[1] <<  3 );
 c02e954:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 c02e958:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    high = ( ctx->total[0] >> 61 )
 c02e95c:	0f58      	lsrs	r0, r3, #29
 c02e95e:	ea40 0b08 	orr.w	fp, r0, r8
 c02e962:	ea41 0c09 	orr.w	ip, r1, r9
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02e966:	ea4f 611b 	mov.w	r1, fp, lsr #24
    low  = ( ctx->total[0] <<  3 );
 c02e96a:	00db      	lsls	r3, r3, #3
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02e96c:	f884 10c4 	strb.w	r1, [r4, #196]	; 0xc4
 c02e970:	ea4f 411b 	mov.w	r1, fp, lsr #16
    low  = ( ctx->total[0] <<  3 );
 c02e974:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02e978:	f884 10c5 	strb.w	r1, [r4, #197]	; 0xc5
 c02e97c:	ea4f 211b 	mov.w	r1, fp, lsr #8
 c02e980:	f884 10c6 	strb.w	r1, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02e984:	0e19      	lsrs	r1, r3, #24
    low  = ( ctx->total[0] <<  3 );
 c02e986:	00d2      	lsls	r2, r2, #3
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02e988:	f884 10c8 	strb.w	r1, [r4, #200]	; 0xc8
 c02e98c:	0c19      	lsrs	r1, r3, #16
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02e98e:	ea4f 671c 	mov.w	r7, ip, lsr #24
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02e992:	f884 10c9 	strb.w	r1, [r4, #201]	; 0xc9
 c02e996:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
 c02e99a:	0a19      	lsrs	r1, r3, #8
 c02e99c:	0e13      	lsrs	r3, r2, #24
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02e99e:	f884 70c0 	strb.w	r7, [r4, #192]	; 0xc0
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02e9a2:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02e9a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02e9aa:	0c13      	lsrs	r3, r2, #16
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02e9ac:	f884 70c1 	strb.w	r7, [r4, #193]	; 0xc1
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02e9b0:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02e9b4:	ea4f 271c 	mov.w	r7, ip, lsr #8
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02e9b8:	0a13      	lsrs	r3, r2, #8
 c02e9ba:	f884 10ca 	strb.w	r1, [r4, #202]	; 0xca
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02e9be:	f884 70c2 	strb.w	r7, [r4, #194]	; 0xc2
 c02e9c2:	f884 c0c3 	strb.w	ip, [r4, #195]	; 0xc3
 c02e9c6:	f884 b0c7 	strb.w	fp, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02e9ca:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 c02e9ce:	f884 20cf 	strb.w	r2, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 c02e9d2:	4631      	mov	r1, r6
 c02e9d4:	4620      	mov	r0, r4
 c02e9d6:	f7ff f89f 	bl	c02db18 <mbedtls_internal_sha512_process>
 c02e9da:	2800      	cmp	r0, #0
 c02e9dc:	f040 80c4 	bne.w	c02eb68 <mbedtls_sha512_finish_ret+0x252>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 c02e9e0:	7de3      	ldrb	r3, [r4, #23]
 c02e9e2:	702b      	strb	r3, [r5, #0]
 c02e9e4:	8ae3      	ldrh	r3, [r4, #22]
 c02e9e6:	706b      	strb	r3, [r5, #1]
 c02e9e8:	6963      	ldr	r3, [r4, #20]
 c02e9ea:	0a1b      	lsrs	r3, r3, #8
 c02e9ec:	70ab      	strb	r3, [r5, #2]
 c02e9ee:	6963      	ldr	r3, [r4, #20]
 c02e9f0:	70eb      	strb	r3, [r5, #3]
 c02e9f2:	7ce3      	ldrb	r3, [r4, #19]
 c02e9f4:	712b      	strb	r3, [r5, #4]
 c02e9f6:	8a63      	ldrh	r3, [r4, #18]
 c02e9f8:	716b      	strb	r3, [r5, #5]
 c02e9fa:	6923      	ldr	r3, [r4, #16]
 c02e9fc:	0a1b      	lsrs	r3, r3, #8
 c02e9fe:	71ab      	strb	r3, [r5, #6]
 c02ea00:	6923      	ldr	r3, [r4, #16]
 c02ea02:	71eb      	strb	r3, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 c02ea04:	7fe3      	ldrb	r3, [r4, #31]
 c02ea06:	722b      	strb	r3, [r5, #8]
 c02ea08:	8be3      	ldrh	r3, [r4, #30]
 c02ea0a:	726b      	strb	r3, [r5, #9]
 c02ea0c:	69e3      	ldr	r3, [r4, #28]
 c02ea0e:	0a1b      	lsrs	r3, r3, #8
 c02ea10:	72ab      	strb	r3, [r5, #10]
 c02ea12:	69e3      	ldr	r3, [r4, #28]
 c02ea14:	72eb      	strb	r3, [r5, #11]
 c02ea16:	7ee3      	ldrb	r3, [r4, #27]
 c02ea18:	732b      	strb	r3, [r5, #12]
 c02ea1a:	8b63      	ldrh	r3, [r4, #26]
 c02ea1c:	736b      	strb	r3, [r5, #13]
 c02ea1e:	69a3      	ldr	r3, [r4, #24]
 c02ea20:	0a1b      	lsrs	r3, r3, #8
 c02ea22:	73ab      	strb	r3, [r5, #14]
 c02ea24:	69a3      	ldr	r3, [r4, #24]
 c02ea26:	73eb      	strb	r3, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 c02ea28:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 c02ea2c:	742b      	strb	r3, [r5, #16]
 c02ea2e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 c02ea30:	746b      	strb	r3, [r5, #17]
 c02ea32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c02ea34:	0a1b      	lsrs	r3, r3, #8
 c02ea36:	74ab      	strb	r3, [r5, #18]
 c02ea38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c02ea3a:	74eb      	strb	r3, [r5, #19]
 c02ea3c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 c02ea40:	752b      	strb	r3, [r5, #20]
 c02ea42:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 c02ea44:	756b      	strb	r3, [r5, #21]
 c02ea46:	6a23      	ldr	r3, [r4, #32]
 c02ea48:	0a1b      	lsrs	r3, r3, #8
 c02ea4a:	75ab      	strb	r3, [r5, #22]
 c02ea4c:	6a23      	ldr	r3, [r4, #32]
 c02ea4e:	75eb      	strb	r3, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 c02ea50:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 c02ea54:	762b      	strb	r3, [r5, #24]
 c02ea56:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 c02ea58:	766b      	strb	r3, [r5, #25]
 c02ea5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 c02ea5c:	0a1b      	lsrs	r3, r3, #8
 c02ea5e:	76ab      	strb	r3, [r5, #26]
 c02ea60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 c02ea62:	76eb      	strb	r3, [r5, #27]
 c02ea64:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 c02ea68:	772b      	strb	r3, [r5, #28]
 c02ea6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 c02ea6c:	776b      	strb	r3, [r5, #29]
 c02ea6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 c02ea70:	0a1b      	lsrs	r3, r3, #8
 c02ea72:	77ab      	strb	r3, [r5, #30]
 c02ea74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 c02ea76:	77eb      	strb	r3, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 c02ea78:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 c02ea7c:	f885 3020 	strb.w	r3, [r5, #32]
 c02ea80:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 c02ea82:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 c02ea86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c02ea88:	0a1b      	lsrs	r3, r3, #8
 c02ea8a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 c02ea8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c02ea90:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 c02ea94:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 c02ea98:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 c02ea9c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 c02ea9e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 c02eaa2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 c02eaa4:	0a1b      	lsrs	r3, r3, #8
 c02eaa6:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
 c02eaaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 c02eaac:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 c02eab0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 c02eab4:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 c02eab8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 c02eaba:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
 c02eabe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 c02eac0:	0a1b      	lsrs	r3, r3, #8
 c02eac2:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
 c02eac6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 c02eac8:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
 c02eacc:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 c02ead0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 c02ead4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 c02ead6:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
 c02eada:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 c02eadc:	0a1b      	lsrs	r3, r3, #8
 c02eade:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
 c02eae2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 c02eae4:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 c02eae8:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 c02eaec:	2b00      	cmp	r3, #0
 c02eaee:	d13b      	bne.n	c02eb68 <mbedtls_sha512_finish_ret+0x252>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 c02eaf0:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 c02eaf4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 c02eaf8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 c02eafc:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 c02eb00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 c02eb02:	0a1b      	lsrs	r3, r3, #8
 c02eb04:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 c02eb08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 c02eb0a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 c02eb0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 c02eb12:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 c02eb16:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 c02eb1a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 c02eb1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c02eb20:	0a1b      	lsrs	r3, r3, #8
 c02eb22:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 c02eb26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c02eb28:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 c02eb2c:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 c02eb30:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 c02eb34:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 c02eb38:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 c02eb3c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 c02eb3e:	0a1b      	lsrs	r3, r3, #8
 c02eb40:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 c02eb44:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 c02eb46:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 c02eb4a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 c02eb4e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 c02eb52:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 c02eb56:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 c02eb5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 c02eb5c:	0a1b      	lsrs	r3, r3, #8
 c02eb5e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 c02eb62:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 c02eb64:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
    }

    return( 0 );
}
 c02eb68:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        memset( ctx->buffer + used, 0, 128 - used );
 c02eb6c:	2100      	movs	r1, #0
 c02eb6e:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 c02eb72:	f7e8 ff28 	bl	c0179c6 <memset>
        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 c02eb76:	4631      	mov	r1, r6
 c02eb78:	4620      	mov	r0, r4
 c02eb7a:	f7fe ffcd 	bl	c02db18 <mbedtls_internal_sha512_process>
 c02eb7e:	2800      	cmp	r0, #0
 c02eb80:	d1f2      	bne.n	c02eb68 <mbedtls_sha512_finish_ret+0x252>
        memset( ctx->buffer, 0, 112 );
 c02eb82:	4601      	mov	r1, r0
 c02eb84:	2270      	movs	r2, #112	; 0x70
 c02eb86:	4630      	mov	r0, r6
 c02eb88:	e6db      	b.n	c02e942 <mbedtls_sha512_finish_ret+0x2c>

0c02eb8a <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 c02eb8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02eb8c:	461c      	mov	r4, r3
 c02eb8e:	b0b7      	sub	sp, #220	; 0xdc
 c02eb90:	4606      	mov	r6, r0

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
 c02eb92:	4668      	mov	r0, sp
{
 c02eb94:	460f      	mov	r7, r1
 c02eb96:	4615      	mov	r5, r2
    mbedtls_sha512_init( &ctx );
 c02eb98:	f7fe ff12 	bl	c02d9c0 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 c02eb9c:	4621      	mov	r1, r4
 c02eb9e:	4668      	mov	r0, sp
 c02eba0:	f7fe ff1e 	bl	c02d9e0 <mbedtls_sha512_starts_ret>
 c02eba4:	4604      	mov	r4, r0
 c02eba6:	b958      	cbnz	r0, c02ebc0 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 c02eba8:	463a      	mov	r2, r7
 c02ebaa:	4631      	mov	r1, r6
 c02ebac:	4668      	mov	r0, sp
 c02ebae:	f7ff fe5f 	bl	c02e870 <mbedtls_sha512_update_ret>
 c02ebb2:	4604      	mov	r4, r0
 c02ebb4:	b920      	cbnz	r0, c02ebc0 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 c02ebb6:	4629      	mov	r1, r5
 c02ebb8:	4668      	mov	r0, sp
 c02ebba:	f7ff feac 	bl	c02e916 <mbedtls_sha512_finish_ret>
 c02ebbe:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
 c02ebc0:	4668      	mov	r0, sp
 c02ebc2:	f7fe ff01 	bl	c02d9c8 <mbedtls_sha512_free>

    return( ret );
}
 c02ebc6:	4620      	mov	r0, r4
 c02ebc8:	b037      	add	sp, #220	; 0xdc
 c02ebca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c02ebcc <UsefulOutBuf_Init>:
 Public function -- see UsefulBuf.h

 Code Reviewers: THIS FUNCTION DOES POINTER MATH
 */
void UsefulOutBuf_Init(UsefulOutBuf *pMe, UsefulBuf Storage)
{
 c02ebcc:	b082      	sub	sp, #8
 c02ebce:	4603      	mov	r3, r0
 c02ebd0:	4668      	mov	r0, sp
 c02ebd2:	e880 0006 	stmia.w	r0, {r1, r2}
    pMe->magic  = USEFUL_OUT_BUF_MAGIC;
 c02ebd6:	f640 310f 	movw	r1, #2831	; 0xb0f
 c02ebda:	8199      	strh	r1, [r3, #12]



static inline void UsefulOutBuf_Reset(UsefulOutBuf *pMe)
{
   pMe->data_len = 0;
 c02ebdc:	2100      	movs	r1, #0
 c02ebde:	6099      	str	r1, [r3, #8]
   pMe->err      = 0;
 c02ebe0:	7399      	strb	r1, [r3, #14]
    UsefulOutBuf_Reset(pMe);
    pMe->UB     = Storage;
 c02ebe2:	c803      	ldmia	r0, {r0, r1}
 c02ebe4:	e883 0005 	stmia.w	r3, {r0, r2}
    // based off of pStorage in the rest of this code.
    const uintptr_t ptrM = UINTPTR_MAX - Storage.len;
    if(Storage.ptr && (uintptr_t)Storage.ptr > ptrM) // Check #0
        me->err = 1;
#endif
}
 c02ebe8:	b002      	add	sp, #8
 c02ebea:	4770      	bx	lr

0c02ebec <UsefulOutBuf_InsertUsefulBuf>:

 4. Put the new data in at the insertion position.

 */
void UsefulOutBuf_InsertUsefulBuf(UsefulOutBuf *pMe, UsefulBufC NewData, size_t uInsertionPos)
{
 c02ebec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02ebee:	4604      	mov	r4, r0
 c02ebf0:	461d      	mov	r5, r3
   if(pMe->err) {
 c02ebf2:	7ba3      	ldrb	r3, [r4, #14]
{
 c02ebf4:	a802      	add	r0, sp, #8
 c02ebf6:	e900 0006 	stmdb	r0, {r1, r2}
   if(pMe->err) {
 c02ebfa:	b933      	cbnz	r3, c02ec0a <UsefulOutBuf_InsertUsefulBuf+0x1e>
   /* 0. Sanity check the UsefulOutBuf structure */
   // A "counter measure". If magic number is not the right number it
   // probably means me was not initialized or it was corrupted. Attackers
   // can defeat this, but it is a hurdle and does good with very
   // little code.
   if(pMe->magic != USEFUL_OUT_BUF_MAGIC) {
 c02ebfc:	f640 330f 	movw	r3, #2831	; 0xb0f
 c02ec00:	89a2      	ldrh	r2, [r4, #12]
 c02ec02:	429a      	cmp	r2, r3
 c02ec04:	d003      	beq.n	c02ec0e <UsefulOutBuf_InsertUsefulBuf+0x22>
      pMe->err = 1;
 c02ec06:	2301      	movs	r3, #1
 c02ec08:	73a3      	strb	r3, [r4, #14]
   if(pMe->UB.ptr) {
      // To know memmove won't go off end of destination, see PtrMath #6
      memmove(pInsertionPoint, NewData.ptr, NewData.len);
   }
   pMe->data_len += NewData.len ;
}
 c02ec0a:	b002      	add	sp, #8
 c02ec0c:	bd70      	pop	{r4, r5, r6, pc}
   if(pMe->data_len > pMe->UB.len) {  // Check #1
 c02ec0e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 c02ec12:	429a      	cmp	r2, r3
 c02ec14:	d8f7      	bhi.n	c02ec06 <UsefulOutBuf_InsertUsefulBuf+0x1a>
 c02ec16:	9e01      	ldr	r6, [sp, #4]
}


static inline size_t UsefulOutBuf_RoomLeft(UsefulOutBuf *pMe)
{
   return pMe->UB.len - pMe->data_len;
 c02ec18:	1a9b      	subs	r3, r3, r2
   if(! UsefulOutBuf_WillItFit(pMe, NewData.len)) { // Check #2
 c02ec1a:	42b3      	cmp	r3, r6
 c02ec1c:	d3f3      	bcc.n	c02ec06 <UsefulOutBuf_InsertUsefulBuf+0x1a>
   if(uInsertionPos > pMe->data_len) { // Check #3
 c02ec1e:	42aa      	cmp	r2, r5
 c02ec20:	d3f1      	bcc.n	c02ec06 <UsefulOutBuf_InsertUsefulBuf+0x1a>
   if(uNumBytesToMove && pMe->UB.ptr) {
 c02ec22:	1b52      	subs	r2, r2, r5
 c02ec24:	d005      	beq.n	c02ec32 <UsefulOutBuf_InsertUsefulBuf+0x46>
   uint8_t *pSourceOfMove       = ((uint8_t *)pMe->UB.ptr) + uInsertionPos; // PtrMath #1
 c02ec26:	6821      	ldr	r1, [r4, #0]
   if(uNumBytesToMove && pMe->UB.ptr) {
 c02ec28:	b119      	cbz	r1, c02ec32 <UsefulOutBuf_InsertUsefulBuf+0x46>
   uint8_t *pSourceOfMove       = ((uint8_t *)pMe->UB.ptr) + uInsertionPos; // PtrMath #1
 c02ec2a:	4429      	add	r1, r5
      memmove(pDestinationOfMove, pSourceOfMove, uNumBytesToMove);
 c02ec2c:	1988      	adds	r0, r1, r6
 c02ec2e:	f7e8 feb1 	bl	c017994 <memmove>
   uint8_t *pInsertionPoint = ((uint8_t *)pMe->UB.ptr) + uInsertionPos; // PtrMath #5
 c02ec32:	6820      	ldr	r0, [r4, #0]
   if(pMe->UB.ptr) {
 c02ec34:	b120      	cbz	r0, c02ec40 <UsefulOutBuf_InsertUsefulBuf+0x54>
      memmove(pInsertionPoint, NewData.ptr, NewData.len);
 c02ec36:	4632      	mov	r2, r6
 c02ec38:	9900      	ldr	r1, [sp, #0]
 c02ec3a:	4428      	add	r0, r5
 c02ec3c:	f7e8 feaa 	bl	c017994 <memmove>
   pMe->data_len += NewData.len ;
 c02ec40:	68a3      	ldr	r3, [r4, #8]
 c02ec42:	441e      	add	r6, r3
 c02ec44:	60a6      	str	r6, [r4, #8]
 c02ec46:	e7e0      	b.n	c02ec0a <UsefulOutBuf_InsertUsefulBuf+0x1e>

0c02ec48 <UsefulOutBuf_OutUBuf>:
/*
 Public function -- see UsefulBuf.h
 */
UsefulBufC UsefulOutBuf_OutUBuf(UsefulOutBuf *pMe)
{
   if(pMe->err) {
 c02ec48:	7b8b      	ldrb	r3, [r1, #14]
{
 c02ec4a:	b510      	push	{r4, lr}
   if(pMe->err) {
 c02ec4c:	b11b      	cbz	r3, c02ec56 <UsefulOutBuf_OutUBuf+0xe>
      return NULLUsefulBufC;
 c02ec4e:	2300      	movs	r3, #0
   }

   if(pMe->magic != USEFUL_OUT_BUF_MAGIC) {
      pMe->err = 1;
      return NULLUsefulBufC;
 c02ec50:	6003      	str	r3, [r0, #0]
   }

   return (UsefulBufC){pMe->UB.ptr, pMe->data_len};
 c02ec52:	6043      	str	r3, [r0, #4]
}
 c02ec54:	bd10      	pop	{r4, pc}
   if(pMe->magic != USEFUL_OUT_BUF_MAGIC) {
 c02ec56:	f640 320f 	movw	r2, #2831	; 0xb0f
 c02ec5a:	898c      	ldrh	r4, [r1, #12]
 c02ec5c:	4294      	cmp	r4, r2
 c02ec5e:	d002      	beq.n	c02ec66 <UsefulOutBuf_OutUBuf+0x1e>
      pMe->err = 1;
 c02ec60:	2201      	movs	r2, #1
 c02ec62:	738a      	strb	r2, [r1, #14]
 c02ec64:	e7f4      	b.n	c02ec50 <UsefulOutBuf_OutUBuf+0x8>
   return (UsefulBufC){pMe->UB.ptr, pMe->data_len};
 c02ec66:	680a      	ldr	r2, [r1, #0]
 c02ec68:	688b      	ldr	r3, [r1, #8]
 c02ec6a:	6002      	str	r2, [r0, #0]
 c02ec6c:	e7f1      	b.n	c02ec52 <UsefulOutBuf_OutUBuf+0xa>

0c02ec6e <attest_token_start>:
enum attest_token_err_t attest_token_start(struct attest_token_ctx *me,
                                           uint32_t opt_flags,
                                           int32_t key_select,
                                           int32_t cose_alg_id,
                                           const struct q_useful_buf *out_buf)
{
 c02ec6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c02ec70:	4605      	mov	r5, r0
 c02ec72:	460c      	mov	r4, r1
 c02ec74:	4616      	mov	r6, r2
 c02ec76:	461f      	mov	r7, r3
 c02ec78:	9b08      	ldr	r3, [sp, #32]
    enum t_cose_err_t cose_return_value;
    enum attest_token_err_t return_value;

    /* Remember some of the configuration values */
    me->opt_flags  = opt_flags;
    me->key_select = key_select;
 c02ec7a:	e9c0 1226 	strd	r1, r2, [r0, #152]	; 0x98

    /* Spin up the CBOR encoder */
    QCBOREncode_Init(&(me->cbor_enc_ctx), *out_buf);
 c02ec7e:	e893 0006 	ldmia.w	r3, {r1, r2}
 c02ec82:	f002 f856 	bl	c030d32 <QCBOREncode_Init>


    /* Initialize COSE signer. This will cause the cose headers to be
     * encoded and written into out_buf using me->cbor_enc_ctx
     */
    cose_return_value = t_cose_sign1_init(&(me->signer_ctx),
 c02ec86:	0fe1      	lsrs	r1, r4, #31
 c02ec88:	9500      	str	r5, [sp, #0]
 c02ec8a:	4633      	mov	r3, r6
 c02ec8c:	463a      	mov	r2, r7
 c02ec8e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 c02ec92:	f003 fdc7 	bl	c032824 <t_cose_sign1_init>
                                          opt_flags &
                                            TOKEN_OPT_SHORT_CIRCUIT_SIGN,
                                          cose_alg_id,
                                          key_select,
                                          &(me->cbor_enc_ctx));
    if(cose_return_value) {
 c02ec96:	4604      	mov	r4, r0
 c02ec98:	b128      	cbz	r0, c02eca6 <attest_token_start+0x38>
    switch(err) {
 c02ec9a:	2803      	cmp	r0, #3
        return ATTEST_TOKEN_ERR_GENERAL;
 c02ec9c:	bf0c      	ite	eq
 c02ec9e:	2004      	moveq	r0, #4
 c02eca0:	2003      	movne	r0, #3

    return_value = ATTEST_TOKEN_ERR_SUCCESS;

Done:
    return return_value;
}
 c02eca2:	b003      	add	sp, #12
 c02eca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
}


static inline void QCBOREncode_BstrWrap(QCBOREncodeContext *pCtx)
{
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_BYTE_STRING);
 c02eca6:	2102      	movs	r1, #2
 c02eca8:	4628      	mov	r0, r5
 c02ecaa:	f002 f89a 	bl	c030de2 <QCBOREncode_OpenMapOrArray>
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP);
 c02ecae:	4628      	mov	r0, r5
 c02ecb0:	2105      	movs	r1, #5
 c02ecb2:	f002 f896 	bl	c030de2 <QCBOREncode_OpenMapOrArray>
    return_value = ATTEST_TOKEN_ERR_SUCCESS;
 c02ecb6:	4620      	mov	r0, r4
 c02ecb8:	e7f3      	b.n	c02eca2 <attest_token_start+0x34>

0c02ecba <attest_token_borrow_cbor_cntxt>:
 Public function. See attest_token.h
 */
QCBOREncodeContext *attest_token_borrow_cbor_cntxt(struct attest_token_ctx *me)
{
    return &(me->cbor_enc_ctx);
}
 c02ecba:	4770      	bx	lr

0c02ecbc <attest_token_add_integer>:
 Public function. See attest_token.h
 */
void attest_token_add_integer(struct attest_token_ctx *me,
                              int32_t label,
                              int64_t Value)
{
 c02ecbc:	b5d0      	push	{r4, r6, r7, lr}
 c02ecbe:	4604      	mov	r4, r0
 c02ecc0:	4616      	mov	r6, r2
 c02ecc2:	461f      	mov	r7, r3
   QCBOREncode_AddInt64(pCtx, nLabel);
 c02ecc4:	460a      	mov	r2, r1
 c02ecc6:	17cb      	asrs	r3, r1, #31
 c02ecc8:	f002 f849 	bl	c030d5e <QCBOREncode_AddInt64>
   QCBOREncode_AddInt64(pCtx, uNum);
 c02eccc:	4632      	mov	r2, r6
 c02ecce:	463b      	mov	r3, r7
 c02ecd0:	4620      	mov	r0, r4
    QCBOREncode_AddInt64ToMapN(&(me->cbor_enc_ctx), label, Value);
}
 c02ecd2:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 c02ecd6:	f002 b842 	b.w	c030d5e <QCBOREncode_AddInt64>

0c02ecda <attest_token_add_bstr>:
 Public function. See attest_token.h
 */
void attest_token_add_bstr(struct attest_token_ctx *me,
                           int32_t label,
                           const struct q_useful_buf_c *bstr)
{
 c02ecda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02ecdc:	e9d2 6500 	ldrd	r6, r5, [r2]
 c02ece0:	4604      	mov	r4, r0
   QCBOREncode_AddInt64(pCtx, nLabel);
 c02ece2:	460a      	mov	r2, r1
 c02ece4:	17cb      	asrs	r3, r1, #31
 c02ece6:	f002 f83a 	bl	c030d5e <QCBOREncode_AddInt64>
   QCBOREncode_AddBuffer(pCtx, CBOR_MAJOR_TYPE_BYTE_STRING, Bytes);
 c02ecea:	2102      	movs	r1, #2
 c02ecec:	4620      	mov	r0, r4
 c02ecee:	e9cd 6500 	strd	r6, r5, [sp]
 c02ecf2:	ab02      	add	r3, sp, #8
 c02ecf4:	e913 000c 	ldmdb	r3, {r2, r3}
    QCBOREncode_AddBytesToMapN(&(me->cbor_enc_ctx),
                               label,
                               *bstr);
}
 c02ecf8:	b002      	add	sp, #8
 c02ecfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 c02ecfe:	f002 b849 	b.w	c030d94 <QCBOREncode_AddBuffer>

0c02ed02 <attest_token_add_tstr>:
 Public function. See attest_token.h
 */
void attest_token_add_tstr(struct attest_token_ctx *me,
                           int32_t label,
                           const struct q_useful_buf_c *tstr)
{
 c02ed02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02ed04:	e9d2 6500 	ldrd	r6, r5, [r2]
 c02ed08:	4604      	mov	r4, r0
   QCBOREncode_AddInt64(pCtx, nLabel);
 c02ed0a:	460a      	mov	r2, r1
 c02ed0c:	17cb      	asrs	r3, r1, #31
 c02ed0e:	f002 f826 	bl	c030d5e <QCBOREncode_AddInt64>
   QCBOREncode_AddBuffer(pCtx, CBOR_MAJOR_TYPE_TEXT_STRING, Text);
 c02ed12:	2103      	movs	r1, #3
 c02ed14:	4620      	mov	r0, r4
 c02ed16:	e9cd 6500 	strd	r6, r5, [sp]
 c02ed1a:	ab02      	add	r3, sp, #8
 c02ed1c:	e913 000c 	ldmdb	r3, {r2, r3}
    QCBOREncode_AddTextToMapN(&(me->cbor_enc_ctx), label, *tstr);
}
 c02ed20:	b002      	add	sp, #8
 c02ed22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 c02ed26:	f002 b835 	b.w	c030d94 <QCBOREncode_AddBuffer>

0c02ed2a <attest_token_finish>:
 Public function. See attest_token.h
 */
enum attest_token_err_t
attest_token_finish(struct attest_token_ctx *me,
                    struct q_useful_buf_c *completed_token)
{
 c02ed2a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 c02ed2c:	4605      	mov	r5, r0
   QCBOREncode_BstrWrap(pCtx);
}

static inline void QCBOREncode_CloseBstrWrap(QCBOREncodeContext *pCtx, UsefulBufC *pWrappedCBOR)
{
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_BYTE_STRING, pWrappedCBOR);
 c02ed2e:	466c      	mov	r4, sp
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP, NULL);
 c02ed30:	2200      	movs	r2, #0
 c02ed32:	460e      	mov	r6, r1
 c02ed34:	2105      	movs	r1, #5
 c02ed36:	f002 f874 	bl	c030e22 <QCBOREncode_CloseMapOrArray>
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_BYTE_STRING, pWrappedCBOR);
 c02ed3a:	4622      	mov	r2, r4
 c02ed3c:	2102      	movs	r1, #2
 c02ed3e:	4628      	mov	r0, r5
 c02ed40:	f002 f86f 	bl	c030e22 <QCBOREncode_CloseMapOrArray>
     */
    QCBOREncode_CloseBstrWrap(&(me->cbor_enc_ctx), &token_payload_ub);

    /* Finish off the cose signature. This does all the interesting work of
     hashing and signing */
    cose_return_value =
 c02ed44:	e894 0006 	ldmia.w	r4, {r1, r2}
 c02ed48:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 c02ed4c:	f003 fdcc 	bl	c0328e8 <t_cose_sign1_finish>
        t_cose_sign1_finish(&(me->signer_ctx), token_payload_ub);
    if(cose_return_value) {
 c02ed50:	b128      	cbz	r0, c02ed5e <attest_token_finish+0x34>
    switch(err) {
 c02ed52:	2803      	cmp	r0, #3
        return ATTEST_TOKEN_ERR_GENERAL;
 c02ed54:	bf0c      	ite	eq
 c02ed56:	2004      	moveq	r0, #4
 c02ed58:	2003      	movne	r0, #3
        *completed_token = completed_token_ub;
    }

Done:
    return return_value;
}
 c02ed5a:	b004      	add	sp, #16
 c02ed5c:	bd70      	pop	{r4, r5, r6, pc}
    qcbor_result = QCBOREncode_Finish(&(me->cbor_enc_ctx),
 c02ed5e:	ac02      	add	r4, sp, #8
 c02ed60:	4621      	mov	r1, r4
 c02ed62:	4628      	mov	r0, r5
 c02ed64:	f002 f89b 	bl	c030e9e <QCBOREncode_Finish>
    if(qcbor_result == QCBOR_ERR_BUFFER_TOO_SMALL) {
 c02ed68:	2801      	cmp	r0, #1
    qcbor_result = QCBOREncode_Finish(&(me->cbor_enc_ctx),
 c02ed6a:	4603      	mov	r3, r0
    if(qcbor_result == QCBOR_ERR_BUFFER_TOO_SMALL) {
 c02ed6c:	d004      	beq.n	c02ed78 <attest_token_finish+0x4e>
    } else if (qcbor_result != QCBOR_SUCCESS) {
 c02ed6e:	b928      	cbnz	r0, c02ed7c <attest_token_finish+0x52>
        *completed_token = completed_token_ub;
 c02ed70:	e894 0003 	ldmia.w	r4, {r0, r1}
 c02ed74:	e886 0003 	stmia.w	r6, {r0, r1}
        return_value = ATTEST_TOKEN_ERR_TOO_SMALL;
 c02ed78:	4618      	mov	r0, r3
 c02ed7a:	e7ee      	b.n	c02ed5a <attest_token_finish+0x30>
        return_value = ATTEST_TOKEN_ERR_CBOR_FORMATTING;
 c02ed7c:	2002      	movs	r0, #2
 c02ed7e:	e7ec      	b.n	c02ed5a <attest_token_finish+0x30>

0c02ed80 <attest_get_tlv_by_module>:
 */
static int32_t attest_get_tlv_by_module(uint8_t    module,
                                        uint8_t   *claim,
                                        uint16_t  *tlv_len,
                                        uint8_t  **tlv_ptr)
{
 c02ed80:	b5f0      	push	{r4, r5, r6, r7, lr}
    struct shared_data_tlv_entry tlv_entry;
    uint8_t *tlv_end;
    uint8_t *tlv_curr;

    if (boot_data.header.tlv_magic != SHARED_DATA_TLV_INFO_MAGIC) {
 c02ed82:	f242 0516 	movw	r5, #8214	; 0x2016
 c02ed86:	4c11      	ldr	r4, [pc, #68]	; (c02edcc <attest_get_tlv_by_module+0x4c>)
 c02ed88:	8826      	ldrh	r6, [r4, #0]
 c02ed8a:	42ae      	cmp	r6, r5
 c02ed8c:	d11b      	bne.n	c02edc6 <attest_get_tlv_by_module+0x46>
        return -1;
    }

    /* Get the boundaries of TLV section where to lookup*/
    tlv_end = (uint8_t *)&boot_data + boot_data.header.tlv_tot_len;
 c02ed8e:	8866      	ldrh	r6, [r4, #2]
    if (*tlv_ptr == NULL) {
 c02ed90:	681d      	ldr	r5, [r3, #0]
    tlv_end = (uint8_t *)&boot_data + boot_data.header.tlv_tot_len;
 c02ed92:	4426      	add	r6, r4
    if (*tlv_ptr == NULL) {
 c02ed94:	b12d      	cbz	r5, c02eda2 <attest_get_tlv_by_module+0x22>
        /* At first call set to the beginning of the TLV section */
        tlv_curr = boot_data.data;
    } else {
        /* Any subsequent call set to the next TLV entry */
        (void)tfm_memcpy(&tlv_entry, *tlv_ptr, SHARED_DATA_ENTRY_HEADER_SIZE);
        tlv_curr  = (*tlv_ptr) + tlv_entry.tlv_len;
 c02ed96:	886c      	ldrh	r4, [r5, #2]
 c02ed98:	442c      	add	r4, r5
    }

    /* Iterates over the TLV section and returns the address and size of TLVs
     * with requested module identifier
     */
    for (; tlv_curr < tlv_end; tlv_curr += tlv_entry.tlv_len) {
 c02ed9a:	42b4      	cmp	r4, r6
 c02ed9c:	d303      	bcc.n	c02eda6 <attest_get_tlv_by_module+0x26>
            *tlv_len = tlv_entry.tlv_len;
            return 1;
        }
    }

    return 0;
 c02ed9e:	2000      	movs	r0, #0
 c02eda0:	e00e      	b.n	c02edc0 <attest_get_tlv_by_module+0x40>
        tlv_curr = boot_data.data;
 c02eda2:	3404      	adds	r4, #4
 c02eda4:	e7f9      	b.n	c02ed9a <attest_get_tlv_by_module+0x1a>
 c02eda6:	6825      	ldr	r5, [r4, #0]
        if (GET_IAS_MODULE(tlv_entry.tlv_type) == module) {
 c02eda8:	f3c5 1c85 	ubfx	ip, r5, #6, #6
 c02edac:	4584      	cmp	ip, r0
 c02edae:	ea4f 4715 	mov.w	r7, r5, lsr #16
 c02edb2:	d106      	bne.n	c02edc2 <attest_get_tlv_by_module+0x42>
            return 1;
 c02edb4:	2001      	movs	r0, #1
            *claim   = GET_IAS_CLAIM(tlv_entry.tlv_type);
 c02edb6:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 c02edba:	700d      	strb	r5, [r1, #0]
            *tlv_ptr = tlv_curr;
 c02edbc:	601c      	str	r4, [r3, #0]
            *tlv_len = tlv_entry.tlv_len;
 c02edbe:	8017      	strh	r7, [r2, #0]
}
 c02edc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (; tlv_curr < tlv_end; tlv_curr += tlv_entry.tlv_len) {
 c02edc2:	443c      	add	r4, r7
 c02edc4:	e7e9      	b.n	c02ed9a <attest_get_tlv_by_module+0x1a>
        return -1;
 c02edc6:	f04f 30ff 	mov.w	r0, #4294967295
 c02edca:	e7f9      	b.n	c02edc0 <attest_get_tlv_by_module+0x40>
 c02edcc:	300366a4 	.word	0x300366a4

0c02edd0 <attest_add_sw_component_claim>:
 */
static enum psa_attest_err_t
attest_add_sw_component_claim(struct attest_token_ctx *token_ctx,
                              uint8_t tlv_id,
                              const struct q_useful_buf_c *claim_value)
{
 c02edd0:	b508      	push	{r3, lr}
    switch (tlv_id) {
 c02edd2:	2909      	cmp	r1, #9
 c02edd4:	d815      	bhi.n	c02ee02 <attest_add_sw_component_claim+0x32>
 c02edd6:	e8df f001 	tbb	[pc, r1]
 c02edda:	100e      	.short	0x100e
 c02eddc:	14141214 	.word	0x14141214
 c02ede0:	0a051414 	.word	0x0a051414
    case SW_MEASURE_VALUE:
        attest_token_add_bstr(token_ctx,
 c02ede4:	2102      	movs	r1, #2
        attest_token_add_tstr(token_ctx,
                              EAT_CBOR_SW_COMPONENT_VERSION,
                              claim_value);
        break;
    case SW_SIGNER_ID:
        attest_token_add_bstr(token_ctx,
 c02ede6:	f7ff ff78 	bl	c02ecda <attest_token_add_bstr>
        break;
    default:
        return PSA_ATTEST_ERR_GENERAL;
    }

    return PSA_ATTEST_ERR_SUCCESS;
 c02edea:	2000      	movs	r0, #0
}
 c02edec:	bd08      	pop	{r3, pc}
        attest_token_add_tstr(token_ctx,
 c02edee:	2106      	movs	r1, #6
        attest_token_add_tstr(token_ctx,
 c02edf0:	f7ff ff87 	bl	c02ed02 <attest_token_add_tstr>
 c02edf4:	e7f9      	b.n	c02edea <attest_add_sw_component_claim+0x1a>
        attest_token_add_tstr(token_ctx,
 c02edf6:	2104      	movs	r1, #4
 c02edf8:	e7fa      	b.n	c02edf0 <attest_add_sw_component_claim+0x20>
        attest_token_add_bstr(token_ctx,
 c02edfa:	2105      	movs	r1, #5
 c02edfc:	e7f3      	b.n	c02ede6 <attest_add_sw_component_claim+0x16>
        attest_token_add_tstr(token_ctx,
 c02edfe:	2101      	movs	r1, #1
 c02ee00:	e7f6      	b.n	c02edf0 <attest_add_sw_component_claim+0x20>
        return PSA_ATTEST_ERR_GENERAL;
 c02ee02:	2005      	movs	r0, #5
 c02ee04:	e7f2      	b.n	c02edec <attest_add_sw_component_claim+0x1c>

0c02ee06 <attest_get_tlv_by_id.constprop.1>:
    *tlv_ptr = NULL;
 c02ee06:	2300      	movs	r3, #0
static int32_t attest_get_tlv_by_id(uint8_t    claim,
 c02ee08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02ee0a:	4605      	mov	r5, r0
 c02ee0c:	460e      	mov	r6, r1
 c02ee0e:	4614      	mov	r4, r2
    *tlv_ptr = NULL;
 c02ee10:	6013      	str	r3, [r2, #0]
        found = attest_get_tlv_by_module(module, &tlv_id,
 c02ee12:	4623      	mov	r3, r4
 c02ee14:	4632      	mov	r2, r6
 c02ee16:	f10d 0107 	add.w	r1, sp, #7
 c02ee1a:	2000      	movs	r0, #0
 c02ee1c:	f7ff ffb0 	bl	c02ed80 <attest_get_tlv_by_module>
        if (found != 1) {
 c02ee20:	2801      	cmp	r0, #1
 c02ee22:	d103      	bne.n	c02ee2c <attest_get_tlv_by_id.constprop.1+0x26>
        if (claim == tlv_id) {
 c02ee24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 c02ee28:	42ab      	cmp	r3, r5
 c02ee2a:	d1f2      	bne.n	c02ee12 <attest_get_tlv_by_id.constprop.1+0xc>
}
 c02ee2c:	b002      	add	sp, #8
 c02ee2e:	bd70      	pop	{r4, r5, r6, pc}

0c02ee30 <attest_create_token>:
 */
static enum psa_attest_err_t
attest_create_token(struct q_useful_buf_c *challenge,
                    struct q_useful_buf   *token,
                    struct q_useful_buf_c *completed_token)
{
 c02ee30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02ee34:	b0c9      	sub	sp, #292	; 0x124
 c02ee36:	9203      	str	r2, [sp, #12]
#endif

    /* Get started creating the token. This sets up the CBOR and COSE contexts
     * which causes the COSE headers to be constructed.
     */
    token_err = attest_token_start(&attest_token_ctx,
 c02ee38:	2200      	movs	r2, #0
 c02ee3a:	9100      	str	r1, [sp, #0]
{
 c02ee3c:	4605      	mov	r5, r0
    token_err = attest_token_start(&attest_token_ctx,
 c02ee3e:	f06f 0306 	mvn.w	r3, #6
 c02ee42:	4611      	mov	r1, r2
 c02ee44:	a816      	add	r0, sp, #88	; 0x58
 c02ee46:	f7ff ff12 	bl	c02ec6e <attest_token_start>
                                   option_flags,         /* option_flags */
                                   key_select,           /* key_select   */
                                   COSE_ALGORITHM_ES256, /* alg_select   */
                                   token);

    if (token_err != ATTEST_TOKEN_ERR_SUCCESS) {
 c02ee4a:	4604      	mov	r4, r0
 c02ee4c:	b138      	cbz	r0, c02ee5e <attest_create_token+0x2e>
    switch (token_err) {
 c02ee4e:	2801      	cmp	r0, #1
 c02ee50:	f040 80dc 	bne.w	c02f00c <attest_create_token+0x1dc>
        return PSA_ATTEST_ERR_TOKEN_BUFFER_OVERFLOW;
 c02ee54:	2402      	movs	r4, #2
        goto error;
    }

error:
    return attest_err;
}
 c02ee56:	4620      	mov	r0, r4
 c02ee58:	b049      	add	sp, #292	; 0x124
 c02ee5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    attest_token_add_bstr(token_ctx, EAT_CBOR_ARM_LABEL_CHALLENGE, challenge);
 c02ee5e:	462a      	mov	r2, r5
 c02ee60:	49a3      	ldr	r1, [pc, #652]	; (c02f0f0 <attest_create_token+0x2c0>)
 c02ee62:	a816      	add	r0, sp, #88	; 0x58
    uint8_t *tlv_ptr = NULL;
 c02ee64:	ad48      	add	r5, sp, #288	; 0x120
    attest_token_add_bstr(token_ctx, EAT_CBOR_ARM_LABEL_CHALLENGE, challenge);
 c02ee66:	f7ff ff38 	bl	c02ecda <attest_token_add_bstr>
    uint8_t *tlv_ptr = NULL;
 c02ee6a:	f845 4df8 	str.w	r4, [r5, #-248]!
    found = attest_get_tlv_by_id(BOOT_SEED, &tlv_len, &tlv_ptr);
 c02ee6e:	462a      	mov	r2, r5
 c02ee70:	a909      	add	r1, sp, #36	; 0x24
 c02ee72:	4620      	mov	r0, r4
    struct q_useful_buf_c claim_value = {0};
 c02ee74:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
    found = attest_get_tlv_by_id(BOOT_SEED, &tlv_len, &tlv_ptr);
 c02ee78:	f7ff ffc5 	bl	c02ee06 <attest_get_tlv_by_id.constprop.1>
    if (found == 1) {
 c02ee7c:	2801      	cmp	r0, #1
 c02ee7e:	ae0d      	add	r6, sp, #52	; 0x34
 c02ee80:	f040 80b3 	bne.w	c02efea <attest_create_token+0x1ba>
        claim_value.ptr = tlv_ptr + SHARED_DATA_ENTRY_HEADER_SIZE;
 c02ee84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c02ee86:	3304      	adds	r3, #4
 c02ee88:	930b      	str	r3, [sp, #44]	; 0x2c
        claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02ee8a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 c02ee8e:	3b04      	subs	r3, #4
    attest_token_add_bstr(token_ctx,
 c02ee90:	4998      	ldr	r1, [pc, #608]	; (c02f0f4 <attest_create_token+0x2c4>)
 c02ee92:	a816      	add	r0, sp, #88	; 0x58
 c02ee94:	aa0b      	add	r2, sp, #44	; 0x2c
        claim_value.len = BOOT_SEED_SIZE;
 c02ee96:	930c      	str	r3, [sp, #48]	; 0x30
    attest_token_add_bstr(token_ctx,
 c02ee98:	f7ff ff1f 	bl	c02ecda <attest_token_add_bstr>
    uint32_t size = sizeof(instance_id);
 c02ee9c:	2321      	movs	r3, #33	; 0x21
    res_plat = tfm_plat_get_instance_id(&size, instance_id);
 c02ee9e:	4631      	mov	r1, r6
 c02eea0:	4628      	mov	r0, r5
    uint32_t size = sizeof(instance_id);
 c02eea2:	930a      	str	r3, [sp, #40]	; 0x28
    res_plat = tfm_plat_get_instance_id(&size, instance_id);
 c02eea4:	f7eb fa98 	bl	c01a3d8 <tfm_plat_get_instance_id>
    if (res_plat != TFM_PLAT_ERR_SUCCESS) {
 c02eea8:	2800      	cmp	r0, #0
 c02eeaa:	f040 80a3 	bne.w	c02eff4 <attest_create_token+0x1c4>
    claim_value.len  = size;
 c02eeae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    attest_token_add_bstr(token_ctx,
 c02eeb0:	4991      	ldr	r1, [pc, #580]	; (c02f0f8 <attest_create_token+0x2c8>)
 c02eeb2:	a816      	add	r0, sp, #88	; 0x58
 c02eeb4:	aa0b      	add	r2, sp, #44	; 0x2c
    claim_value.len  = size;
 c02eeb6:	930c      	str	r3, [sp, #48]	; 0x30
    claim_value.ptr = instance_id;
 c02eeb8:	960b      	str	r6, [sp, #44]	; 0x2c
    attest_token_add_bstr(token_ctx,
 c02eeba:	f7ff ff0e 	bl	c02ecda <attest_token_add_bstr>
    uint32_t size = sizeof(implementation_id);
 c02eebe:	2320      	movs	r3, #32
    res_plat = tfm_plat_get_implementation_id(&size, implementation_id);
 c02eec0:	4631      	mov	r1, r6
 c02eec2:	4628      	mov	r0, r5
    uint32_t size = sizeof(implementation_id);
 c02eec4:	930a      	str	r3, [sp, #40]	; 0x28
    res_plat = tfm_plat_get_implementation_id(&size, implementation_id);
 c02eec6:	f7eb fa9d 	bl	c01a404 <tfm_plat_get_implementation_id>
    if (res_plat != TFM_PLAT_ERR_SUCCESS) {
 c02eeca:	2800      	cmp	r0, #0
 c02eecc:	f040 8092 	bne.w	c02eff4 <attest_create_token+0x1c4>
    claim_value.len  = size;
 c02eed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    attest_token_add_bstr(token_ctx,
 c02eed2:	aa0b      	add	r2, sp, #44	; 0x2c
 c02eed4:	4989      	ldr	r1, [pc, #548]	; (c02f0fc <attest_create_token+0x2cc>)
 c02eed6:	a816      	add	r0, sp, #88	; 0x58
    claim_value.len  = size;
 c02eed8:	930c      	str	r3, [sp, #48]	; 0x30
    claim_value.ptr = implementation_id;
 c02eeda:	960b      	str	r6, [sp, #44]	; 0x2c
    attest_token_add_bstr(token_ctx,
 c02eedc:	f7ff fefd 	bl	c02ecda <attest_token_add_bstr>
    res = attest_get_caller_client_id(&caller_id);
 c02eee0:	4630      	mov	r0, r6
 c02eee2:	f003 fe5d 	bl	c032ba0 <attest_get_caller_client_id>
    if (res != PSA_ATTEST_ERR_SUCCESS) {
 c02eee6:	4604      	mov	r4, r0
 c02eee8:	2800      	cmp	r0, #0
 c02eeea:	d1b4      	bne.n	c02ee56 <attest_create_token+0x26>
    attest_token_add_integer(token_ctx,
 c02eeec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 c02eeee:	4984      	ldr	r1, [pc, #528]	; (c02f100 <attest_create_token+0x2d0>)
 c02eef0:	17d3      	asrs	r3, r2, #31
 c02eef2:	a816      	add	r0, sp, #88	; 0x58
 c02eef4:	f7ff fee2 	bl	c02ecbc <attest_token_add_integer>
    found = attest_get_tlv_by_id(SECURITY_LIFECYCLE, &tlv_len, &tlv_ptr);
 c02eef8:	4632      	mov	r2, r6
 c02eefa:	a90b      	add	r1, sp, #44	; 0x2c
 c02eefc:	2002      	movs	r0, #2
    uint8_t *tlv_ptr = NULL;
 c02eefe:	940d      	str	r4, [sp, #52]	; 0x34
    found = attest_get_tlv_by_id(SECURITY_LIFECYCLE, &tlv_len, &tlv_ptr);
 c02ef00:	f7ff ff81 	bl	c02ee06 <attest_get_tlv_by_id.constprop.1>
    if (found == 1) {
 c02ef04:	2801      	cmp	r0, #1
 c02ef06:	d17e      	bne.n	c02f006 <attest_create_token+0x1d6>
        claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02ef08:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
        claim_value.ptr = tlv_ptr + SHARED_DATA_ENTRY_HEADER_SIZE;
 c02ef0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02ef0e:	3b04      	subs	r3, #4
    switch (len) {
 c02ef10:	2b02      	cmp	r3, #2
 c02ef12:	d074      	beq.n	c02effe <attest_create_token+0x1ce>
 c02ef14:	2b04      	cmp	r3, #4
 c02ef16:	d074      	beq.n	c02f002 <attest_create_token+0x1d2>
 c02ef18:	2b01      	cmp	r3, #1
 c02ef1a:	d177      	bne.n	c02f00c <attest_create_token+0x1dc>
        *value = (uint32_t)(*(uint8_t  *)(int_ptr));
 c02ef1c:	7910      	ldrb	r0, [r2, #4]
        security_lifecycle = (enum tfm_security_lifecycle_t)slc_value;
 c02ef1e:	b280      	uxth	r0, r0
    if (security_lifecycle < TFM_SLC_UNKNOWN ||
 c02ef20:	f5b0 4fc0 	cmp.w	r0, #24576	; 0x6000
 c02ef24:	d872      	bhi.n	c02f00c <attest_create_token+0x1dc>
    attest_token_add_integer(token_ctx,
 c02ef26:	b282      	uxth	r2, r0
 c02ef28:	2300      	movs	r3, #0
 c02ef2a:	4976      	ldr	r1, [pc, #472]	; (c02f104 <attest_create_token+0x2d4>)
 c02ef2c:	a816      	add	r0, sp, #88	; 0x58
 c02ef2e:	f7ff fec5 	bl	c02ecbc <attest_token_add_integer>
    uint32_t cnt = 0;
 c02ef32:	f04f 0900 	mov.w	r9, #0
    for (module = 1; module < SW_MAX; ++module) {
 c02ef36:	f04f 0801 	mov.w	r8, #1
        tlv_ptr = NULL;
 c02ef3a:	2300      	movs	r3, #0
        found = attest_get_tlv_by_module(module, &tlv_id,
 c02ef3c:	fa5f fa88 	uxtb.w	sl, r8
        tlv_ptr = NULL;
 c02ef40:	9308      	str	r3, [sp, #32]
        found = attest_get_tlv_by_module(module, &tlv_id,
 c02ef42:	f10d 021a 	add.w	r2, sp, #26
 c02ef46:	ab08      	add	r3, sp, #32
 c02ef48:	f10d 0117 	add.w	r1, sp, #23
 c02ef4c:	4650      	mov	r0, sl
 c02ef4e:	f7ff ff17 	bl	c02ed80 <attest_get_tlv_by_module>
        if (found == -1) {
 c02ef52:	1c42      	adds	r2, r0, #1
 c02ef54:	d047      	beq.n	c02efe6 <attest_create_token+0x1b6>
        if (found == 1) {
 c02ef56:	2801      	cmp	r0, #1
 c02ef58:	f040 8089 	bne.w	c02f06e <attest_create_token+0x23e>
            cnt++;
 c02ef5c:	f109 0901 	add.w	r9, r9, #1
            if (cnt == 1) {
 c02ef60:	f1b9 0f01 	cmp.w	r9, #1
 c02ef64:	d10c      	bne.n	c02ef80 <attest_create_token+0x150>
                cbor_encode_ctx = attest_token_borrow_cbor_cntxt(token_ctx);
 c02ef66:	a816      	add	r0, sp, #88	; 0x58
 c02ef68:	f7ff fea7 	bl	c02ecba <attest_token_borrow_cbor_cntxt>
 c02ef6c:	4683      	mov	fp, r0
   QCBOREncode_AddInt64(pCtx, nLabel);
 c02ef6e:	4a66      	ldr	r2, [pc, #408]	; (c02f108 <attest_create_token+0x2d8>)
 c02ef70:	f04f 33ff 	mov.w	r3, #4294967295
 c02ef74:	f001 fef3 	bl	c030d5e <QCBOREncode_AddInt64>
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_ARRAY);
 c02ef78:	2104      	movs	r1, #4
 c02ef7a:	4658      	mov	r0, fp
 c02ef7c:	f001 ff31 	bl	c030de2 <QCBOREncode_OpenMapOrArray>
            res = attest_add_single_sw_component(token_ctx, module, tlv_ptr);
 c02ef80:	9b08      	ldr	r3, [sp, #32]
    tlv_id = GET_IAS_CLAIM(tlv_entry.tlv_type);
 c02ef82:	ae06      	add	r6, sp, #24
    uint8_t *tlv_ptr = tlv_address;
 c02ef84:	9309      	str	r3, [sp, #36]	; 0x24
 c02ef86:	681b      	ldr	r3, [r3, #0]
    cbor_encode_ctx = attest_token_borrow_cbor_cntxt(token_ctx);
 c02ef88:	a816      	add	r0, sp, #88	; 0x58
    tlv_len = tlv_entry.tlv_len;
 c02ef8a:	f3c3 420f 	ubfx	r2, r3, #16, #16
    tlv_id = GET_IAS_CLAIM(tlv_entry.tlv_type);
 c02ef8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    tlv_len = tlv_entry.tlv_len;
 c02ef92:	f8ad 201c 	strh.w	r2, [sp, #28]
    tlv_id = GET_IAS_CLAIM(tlv_entry.tlv_type);
 c02ef96:	7033      	strb	r3, [r6, #0]
    cbor_encode_ctx = attest_token_borrow_cbor_cntxt(token_ctx);
 c02ef98:	f7ff fe8f 	bl	c02ecba <attest_token_borrow_cbor_cntxt>
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP);
 c02ef9c:	2105      	movs	r1, #5
 c02ef9e:	9002      	str	r0, [sp, #8]
    uint32_t measurement_claim_cnt = 0;
 c02efa0:	2700      	movs	r7, #0
 c02efa2:	f001 ff1e 	bl	c030de2 <QCBOREncode_OpenMapOrArray>
        if (GET_IAS_MEASUREMENT_CLAIM(tlv_id)) {
 c02efa6:	7831      	ldrb	r1, [r6, #0]
 c02efa8:	08cb      	lsrs	r3, r1, #3
 c02efaa:	d044      	beq.n	c02f036 <attest_create_token+0x206>
            if (measurement_claim_cnt == 0) {
 c02efac:	2f00      	cmp	r7, #0
 c02efae:	d14f      	bne.n	c02f050 <attest_create_token+0x220>
                res = attest_add_single_sw_measurment(
 c02efb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    tlv_id = GET_IAS_CLAIM(tlv_entry.tlv_type);
 c02efb2:	f10d 0719 	add.w	r7, sp, #25
    uint8_t *tlv_ptr = tlv_address;
 c02efb6:	930a      	str	r3, [sp, #40]	; 0x28
 c02efb8:	681b      	ldr	r3, [r3, #0]
    cbor_encode_ctx = attest_token_borrow_cbor_cntxt(token_ctx);
 c02efba:	a816      	add	r0, sp, #88	; 0x58
    tlv_len = tlv_entry.tlv_len;
 c02efbc:	f3c3 420f 	ubfx	r2, r3, #16, #16
    tlv_id = GET_IAS_CLAIM(tlv_entry.tlv_type);
 c02efc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    tlv_len = tlv_entry.tlv_len;
 c02efc4:	f8ad 201e 	strh.w	r2, [sp, #30]
    tlv_id = GET_IAS_CLAIM(tlv_entry.tlv_type);
 c02efc8:	703b      	strb	r3, [r7, #0]
    cbor_encode_ctx = attest_token_borrow_cbor_cntxt(token_ctx);
 c02efca:	f7ff fe76 	bl	c02ecba <attest_token_borrow_cbor_cntxt>
        if (GET_IAS_MEASUREMENT_CLAIM(tlv_id)) {
 c02efce:	7839      	ldrb	r1, [r7, #0]
 c02efd0:	08cb      	lsrs	r3, r1, #3
 c02efd2:	d11d      	bne.n	c02f010 <attest_create_token+0x1e0>
        found = attest_get_tlv_by_module(module, &tlv_id,
 c02efd4:	462b      	mov	r3, r5
 c02efd6:	f10d 021e 	add.w	r2, sp, #30
 c02efda:	4639      	mov	r1, r7
 c02efdc:	4650      	mov	r0, sl
 c02efde:	f7ff fecf 	bl	c02ed80 <attest_get_tlv_by_module>
        if (found == -1) {
 c02efe2:	1c43      	adds	r3, r0, #1
 c02efe4:	d123      	bne.n	c02f02e <attest_create_token+0x1fe>
            return PSA_ATTEST_ERR_CLAIM_UNAVAILABLE;
 c02efe6:	2003      	movs	r0, #3
 c02efe8:	e01f      	b.n	c02f02a <attest_create_token+0x1fa>
        res = tfm_plat_get_boot_seed(sizeof(boot_seed), boot_seed);
 c02efea:	4631      	mov	r1, r6
 c02efec:	2020      	movs	r0, #32
 c02efee:	f7eb f9f1 	bl	c01a3d4 <tfm_plat_get_boot_seed>
        if (res != TFM_PLAT_ERR_SUCCESS) {
 c02eff2:	b108      	cbz	r0, c02eff8 <attest_create_token+0x1c8>
            return PSA_ATTEST_ERR_CLAIM_UNAVAILABLE;
 c02eff4:	2403      	movs	r4, #3
 c02eff6:	e72e      	b.n	c02ee56 <attest_create_token+0x26>
        claim_value.ptr = boot_seed;
 c02eff8:	960b      	str	r6, [sp, #44]	; 0x2c
        claim_value.len = BOOT_SEED_SIZE;
 c02effa:	2320      	movs	r3, #32
 c02effc:	e748      	b.n	c02ee90 <attest_create_token+0x60>
        *value = (uint32_t)uint16;
 c02effe:	8890      	ldrh	r0, [r2, #4]
 c02f000:	e78d      	b.n	c02ef1e <attest_create_token+0xee>
 c02f002:	6850      	ldr	r0, [r2, #4]
 c02f004:	e78b      	b.n	c02ef1e <attest_create_token+0xee>
        security_lifecycle = tfm_attest_hal_get_security_lifecycle();
 c02f006:	f7ed fcfe 	bl	c01ca06 <tfm_attest_hal_get_security_lifecycle>
 c02f00a:	e789      	b.n	c02ef20 <attest_create_token+0xf0>
        return PSA_ATTEST_ERR_GENERAL;
 c02f00c:	2405      	movs	r4, #5
 c02f00e:	e722      	b.n	c02ee56 <attest_create_token+0x26>
            claim_value.ptr = tlv_ptr + SHARED_DATA_ENTRY_HEADER_SIZE;
 c02f010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            res = attest_add_sw_component_claim(token_ctx,
 c02f012:	aa0d      	add	r2, sp, #52	; 0x34
            claim_value.ptr = tlv_ptr + SHARED_DATA_ENTRY_HEADER_SIZE;
 c02f014:	3304      	adds	r3, #4
 c02f016:	930d      	str	r3, [sp, #52]	; 0x34
            claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02f018:	f8bd 301e 	ldrh.w	r3, [sp, #30]
            res = attest_add_sw_component_claim(token_ctx,
 c02f01c:	a816      	add	r0, sp, #88	; 0x58
            claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02f01e:	3b04      	subs	r3, #4
 c02f020:	930e      	str	r3, [sp, #56]	; 0x38
            res = attest_add_sw_component_claim(token_ctx,
 c02f022:	f7ff fed5 	bl	c02edd0 <attest_add_sw_component_claim>
            if (res != PSA_ATTEST_ERR_SUCCESS) {
 c02f026:	2800      	cmp	r0, #0
 c02f028:	d0d4      	beq.n	c02efd4 <attest_create_token+0x1a4>
 c02f02a:	4604      	mov	r4, r0
 c02f02c:	e713      	b.n	c02ee56 <attest_create_token+0x26>
    while (found) {
 c02f02e:	2800      	cmp	r0, #0
 c02f030:	d1cd      	bne.n	c02efce <attest_create_token+0x19e>
                measurement_claim_cnt++;
 c02f032:	2701      	movs	r7, #1
 c02f034:	e00c      	b.n	c02f050 <attest_create_token+0x220>
            claim_value.ptr = tlv_ptr + SHARED_DATA_ENTRY_HEADER_SIZE;
 c02f036:	9b09      	ldr	r3, [sp, #36]	; 0x24
            res = attest_add_sw_component_claim(token_ctx,
 c02f038:	aa0b      	add	r2, sp, #44	; 0x2c
            claim_value.ptr = tlv_ptr + SHARED_DATA_ENTRY_HEADER_SIZE;
 c02f03a:	3304      	adds	r3, #4
 c02f03c:	930b      	str	r3, [sp, #44]	; 0x2c
            claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02f03e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            res = attest_add_sw_component_claim(token_ctx,
 c02f042:	a816      	add	r0, sp, #88	; 0x58
            claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02f044:	3b04      	subs	r3, #4
 c02f046:	930c      	str	r3, [sp, #48]	; 0x30
            res = attest_add_sw_component_claim(token_ctx,
 c02f048:	f7ff fec2 	bl	c02edd0 <attest_add_sw_component_claim>
            if (res != PSA_ATTEST_ERR_SUCCESS) {
 c02f04c:	2800      	cmp	r0, #0
 c02f04e:	d1ec      	bne.n	c02f02a <attest_create_token+0x1fa>
        found = attest_get_tlv_by_module(module, &tlv_id,
 c02f050:	aa07      	add	r2, sp, #28
 c02f052:	4631      	mov	r1, r6
 c02f054:	ab09      	add	r3, sp, #36	; 0x24
 c02f056:	4650      	mov	r0, sl
 c02f058:	f7ff fe92 	bl	c02ed80 <attest_get_tlv_by_module>
        if (found == -1) {
 c02f05c:	1c41      	adds	r1, r0, #1
        found = attest_get_tlv_by_module(module, &tlv_id,
 c02f05e:	4602      	mov	r2, r0
        if (found == -1) {
 c02f060:	d0c1      	beq.n	c02efe6 <attest_create_token+0x1b6>
    while (found) {
 c02f062:	2800      	cmp	r0, #0
 c02f064:	d19f      	bne.n	c02efa6 <attest_create_token+0x176>
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP, NULL);
 c02f066:	2105      	movs	r1, #5
 c02f068:	9802      	ldr	r0, [sp, #8]
 c02f06a:	f001 feda 	bl	c030e22 <QCBOREncode_CloseMapOrArray>
    for (module = 1; module < SW_MAX; ++module) {
 c02f06e:	f108 0801 	add.w	r8, r8, #1
 c02f072:	f1b8 0f07 	cmp.w	r8, #7
 c02f076:	f47f af60 	bne.w	c02ef3a <attest_create_token+0x10a>
    if (cnt != 0) {
 c02f07a:	f1b9 0f00 	cmp.w	r9, #0
 c02f07e:	d026      	beq.n	c02f0ce <attest_create_token+0x29e>
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_ARRAY, NULL);
 c02f080:	2200      	movs	r2, #0
 c02f082:	2104      	movs	r1, #4
 c02f084:	4658      	mov	r0, fp
 c02f086:	f001 fecc 	bl	c030e22 <QCBOREncode_CloseMapOrArray>
    uint32_t size = sizeof(hw_version);
 c02f08a:	2312      	movs	r3, #18
 c02f08c:	9309      	str	r3, [sp, #36]	; 0x24
    struct q_useful_buf_c claim_value = {0};
 c02f08e:	2300      	movs	r3, #0
    found = attest_get_tlv_by_id(HW_VERSION, &tlv_len, &tlv_ptr);
 c02f090:	462a      	mov	r2, r5
 c02f092:	a908      	add	r1, sp, #32
 c02f094:	2001      	movs	r0, #1
    struct q_useful_buf_c claim_value = {0};
 c02f096:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    uint8_t *tlv_ptr = NULL;
 c02f09a:	930a      	str	r3, [sp, #40]	; 0x28
    found = attest_get_tlv_by_id(HW_VERSION, &tlv_len, &tlv_ptr);
 c02f09c:	f7ff feb3 	bl	c02ee06 <attest_get_tlv_by_id.constprop.1>
    if (found == 1) {
 c02f0a0:	2801      	cmp	r0, #1
 c02f0a2:	d11b      	bne.n	c02f0dc <attest_create_token+0x2ac>
        claim_value.ptr = tlv_ptr + SHARED_DATA_ENTRY_HEADER_SIZE;
 c02f0a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c02f0a6:	3304      	adds	r3, #4
 c02f0a8:	930b      	str	r3, [sp, #44]	; 0x2c
        claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02f0aa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 c02f0ae:	3b04      	subs	r3, #4
    attest_token_add_tstr(token_ctx,
 c02f0b0:	4916      	ldr	r1, [pc, #88]	; (c02f10c <attest_create_token+0x2dc>)
 c02f0b2:	a816      	add	r0, sp, #88	; 0x58
 c02f0b4:	aa0b      	add	r2, sp, #44	; 0x2c
        claim_value.len = size;
 c02f0b6:	930c      	str	r3, [sp, #48]	; 0x30
    attest_token_add_tstr(token_ctx,
 c02f0b8:	f7ff fe23 	bl	c02ed02 <attest_token_add_tstr>
    token_err = attest_token_finish(&attest_token_ctx, completed_token);
 c02f0bc:	9903      	ldr	r1, [sp, #12]
 c02f0be:	a816      	add	r0, sp, #88	; 0x58
 c02f0c0:	f7ff fe33 	bl	c02ed2a <attest_token_finish>
    if (token_err) {
 c02f0c4:	2800      	cmp	r0, #0
 c02f0c6:	f43f aec6 	beq.w	c02ee56 <attest_create_token+0x26>
    switch (token_err) {
 c02f0ca:	2801      	cmp	r0, #1
 c02f0cc:	e6c0      	b.n	c02ee50 <attest_create_token+0x20>
        attest_token_add_integer(token_ctx,
 c02f0ce:	2201      	movs	r2, #1
 c02f0d0:	2300      	movs	r3, #0
 c02f0d2:	490f      	ldr	r1, [pc, #60]	; (c02f110 <attest_create_token+0x2e0>)
 c02f0d4:	a816      	add	r0, sp, #88	; 0x58
 c02f0d6:	f7ff fdf1 	bl	c02ecbc <attest_token_add_integer>
 c02f0da:	e7d6      	b.n	c02f08a <attest_create_token+0x25a>
        res_plat = tfm_plat_get_hw_version(&size, hw_version);
 c02f0dc:	ad0d      	add	r5, sp, #52	; 0x34
 c02f0de:	4629      	mov	r1, r5
 c02f0e0:	a809      	add	r0, sp, #36	; 0x24
 c02f0e2:	f7eb f99f 	bl	c01a424 <tfm_plat_get_hw_version>
        if (res_plat != TFM_PLAT_ERR_SUCCESS) {
 c02f0e6:	2800      	cmp	r0, #0
 c02f0e8:	d184      	bne.n	c02eff4 <attest_create_token+0x1c4>
        claim_value.ptr = hw_version;
 c02f0ea:	950b      	str	r5, [sp, #44]	; 0x2c
        claim_value.len = size;
 c02f0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c02f0ee:	e7df      	b.n	c02f0b0 <attest_create_token+0x280>
 c02f0f0:	fffedb00 	.word	0xfffedb00
 c02f0f4:	fffedb04 	.word	0xfffedb04
 c02f0f8:	fffedaff 	.word	0xfffedaff
 c02f0fc:	fffedb05 	.word	0xfffedb05
 c02f100:	fffedb07 	.word	0xfffedb07
 c02f104:	fffedb06 	.word	0xfffedb06
 c02f108:	fffedb02 	.word	0xfffedb02
 c02f10c:	fffedb03 	.word	0xfffedb03
 c02f110:	fffedb01 	.word	0xfffedb01

0c02f114 <attest_init>:
    res = attest_get_boot_data(TLV_MAJOR_IAS,
 c02f114:	f44f 7200 	mov.w	r2, #512	; 0x200
 c02f118:	4901      	ldr	r1, [pc, #4]	; (c02f120 <attest_init+0xc>)
 c02f11a:	2001      	movs	r0, #1
 c02f11c:	f003 bd48 	b.w	c032bb0 <attest_get_boot_data>
 c02f120:	300366a4 	.word	0x300366a4

0c02f124 <initial_attest_get_token>:
 *    service.
 */
enum psa_attest_err_t
initial_attest_get_token(const psa_invec  *in_vec,  uint32_t num_invec,
                               psa_outvec *out_vec, uint32_t num_outvec)
{
 c02f124:	b510      	push	{r4, lr}
 c02f126:	4614      	mov	r4, r2
    struct q_useful_buf token;
    struct q_useful_buf_c completed_token;

    challenge.ptr = in_vec[0].base;
    challenge.len = in_vec[0].len;
    token.ptr = out_vec[0].base;
 c02f128:	6812      	ldr	r2, [r2, #0]
{
 c02f12a:	b086      	sub	sp, #24
    challenge.len = in_vec[0].len;
 c02f12c:	6841      	ldr	r1, [r0, #4]
    challenge.ptr = in_vec[0].base;
 c02f12e:	6803      	ldr	r3, [r0, #0]
    token.ptr = out_vec[0].base;
 c02f130:	9202      	str	r2, [sp, #8]
    token.len = out_vec[0].len;
 c02f132:	6862      	ldr	r2, [r4, #4]
    switch (challenge_size) {
 c02f134:	2930      	cmp	r1, #48	; 0x30
    challenge.ptr = in_vec[0].base;
 c02f136:	9300      	str	r3, [sp, #0]
    challenge.len = in_vec[0].len;
 c02f138:	9101      	str	r1, [sp, #4]
    token.len = out_vec[0].len;
 c02f13a:	9203      	str	r2, [sp, #12]
    switch (challenge_size) {
 c02f13c:	d003      	beq.n	c02f146 <initial_attest_get_token+0x22>
 c02f13e:	2940      	cmp	r1, #64	; 0x40
 c02f140:	d001      	beq.n	c02f146 <initial_attest_get_token+0x22>
 c02f142:	2920      	cmp	r1, #32
 c02f144:	d117      	bne.n	c02f176 <initial_attest_get_token+0x52>
    attest_err = attest_verify_challenge_size(challenge.len);
    if (attest_err != PSA_ATTEST_ERR_SUCCESS) {
        goto error;
    }

    attest_err = attest_check_memory_access((void *)challenge.ptr,
 c02f146:	2201      	movs	r2, #1
 c02f148:	4618      	mov	r0, r3
 c02f14a:	f003 fd27 	bl	c032b9c <attest_check_memory_access>
                                            challenge.len,
                                            TFM_ATTEST_ACCESS_RO);
    if (attest_err != PSA_ATTEST_ERR_SUCCESS) {
 c02f14e:	b980      	cbnz	r0, c02f172 <initial_attest_get_token+0x4e>
        goto error;
    }

    if (token.len == 0) {
 c02f150:	9903      	ldr	r1, [sp, #12]
 c02f152:	b181      	cbz	r1, c02f176 <initial_attest_get_token+0x52>
        attest_err = PSA_ATTEST_ERR_INVALID_INPUT;
        goto error;
    }

    attest_err = attest_check_memory_access(token.ptr,
 c02f154:	2202      	movs	r2, #2
 c02f156:	9802      	ldr	r0, [sp, #8]
 c02f158:	f003 fd20 	bl	c032b9c <attest_check_memory_access>
                                            token.len,
                                            TFM_ATTEST_ACCESS_RW);
    if (attest_err != PSA_ATTEST_ERR_SUCCESS) {
 c02f15c:	b948      	cbnz	r0, c02f172 <initial_attest_get_token+0x4e>
        goto error;
    }

    attest_err = attest_create_token(&challenge, &token, &completed_token);
 c02f15e:	aa04      	add	r2, sp, #16
 c02f160:	a902      	add	r1, sp, #8
 c02f162:	4668      	mov	r0, sp
 c02f164:	f7ff fe64 	bl	c02ee30 <attest_create_token>
    if (attest_err != PSA_ATTEST_ERR_SUCCESS) {
 c02f168:	b918      	cbnz	r0, c02f172 <initial_attest_get_token+0x4e>
        goto error;
    }

    out_vec[0].base = (void *)completed_token.ptr;
 c02f16a:	9b04      	ldr	r3, [sp, #16]
 c02f16c:	6023      	str	r3, [r4, #0]
    out_vec[0].len  = completed_token.len;
 c02f16e:	9b05      	ldr	r3, [sp, #20]
 c02f170:	6063      	str	r3, [r4, #4]

error:
    return attest_err;
}
 c02f172:	b006      	add	sp, #24
 c02f174:	bd10      	pop	{r4, pc}
        attest_err = PSA_ATTEST_ERR_INVALID_INPUT;
 c02f176:	2004      	movs	r0, #4
    return attest_err;
 c02f178:	e7fb      	b.n	c02f172 <initial_attest_get_token+0x4e>

0c02f17a <initial_attest_get_token_size>:
    struct q_useful_buf_c challenge;
    struct q_useful_buf token;
    struct q_useful_buf_c completed_token;

    /* Only the size of the challenge is needed */
    challenge.ptr = NULL;
 c02f17a:	2100      	movs	r1, #0
{
 c02f17c:	b510      	push	{r4, lr}
    uint32_t  challenge_size = *(uint32_t *)in_vec[0].base;
 c02f17e:	6803      	ldr	r3, [r0, #0]
{
 c02f180:	b086      	sub	sp, #24
    uint32_t  challenge_size = *(uint32_t *)in_vec[0].base;
 c02f182:	681b      	ldr	r3, [r3, #0]
    challenge.len = challenge_size;

    /* Special value to get the size of the token, but token is not created */
    token.ptr = NULL;
 c02f184:	9102      	str	r1, [sp, #8]
    challenge.len = challenge_size;
 c02f186:	e9cd 1300 	strd	r1, r3, [sp]
    token.len = INT32_MAX;
 c02f18a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    uint32_t *token_buf_size = (uint32_t *)out_vec[0].base;
 c02f18e:	6814      	ldr	r4, [r2, #0]

    if (out_vec[0].len < sizeof(uint32_t)) {
 c02f190:	6852      	ldr	r2, [r2, #4]
    token.len = INT32_MAX;
 c02f192:	9103      	str	r1, [sp, #12]
    if (out_vec[0].len < sizeof(uint32_t)) {
 c02f194:	2a03      	cmp	r2, #3
 c02f196:	d90f      	bls.n	c02f1b8 <initial_attest_get_token_size+0x3e>
    switch (challenge_size) {
 c02f198:	2b30      	cmp	r3, #48	; 0x30
 c02f19a:	d003      	beq.n	c02f1a4 <initial_attest_get_token_size+0x2a>
 c02f19c:	2b40      	cmp	r3, #64	; 0x40
 c02f19e:	d001      	beq.n	c02f1a4 <initial_attest_get_token_size+0x2a>
 c02f1a0:	2b20      	cmp	r3, #32
 c02f1a2:	d109      	bne.n	c02f1b8 <initial_attest_get_token_size+0x3e>
    attest_err = attest_verify_challenge_size(challenge_size);
    if (attest_err != PSA_ATTEST_ERR_SUCCESS) {
        goto error;
    }

    attest_err = attest_create_token(&challenge, &token, &completed_token);
 c02f1a4:	aa04      	add	r2, sp, #16
 c02f1a6:	a902      	add	r1, sp, #8
 c02f1a8:	4668      	mov	r0, sp
 c02f1aa:	f7ff fe41 	bl	c02ee30 <attest_create_token>
    if (attest_err != PSA_ATTEST_ERR_SUCCESS) {
 c02f1ae:	b908      	cbnz	r0, c02f1b4 <initial_attest_get_token_size+0x3a>
        goto error;
    }

    *token_buf_size = completed_token.len;
 c02f1b0:	9b05      	ldr	r3, [sp, #20]
 c02f1b2:	6023      	str	r3, [r4, #0]

error:
    return attest_err;
}
 c02f1b4:	b006      	add	sp, #24
 c02f1b6:	bd10      	pop	{r4, pc}
    return PSA_ATTEST_ERR_INVALID_INPUT;
 c02f1b8:	2004      	movs	r0, #4
    return attest_err;
 c02f1ba:	e7fb      	b.n	c02f1b4 <initial_attest_get_token_size+0x3a>

0c02f1bc <attest_register_initial_attestation_private_key>:
    return psa_curve;
}

enum psa_attest_err_t
attest_register_initial_attestation_private_key(psa_key_handle_t *private_key)
{
 c02f1bc:	b570      	push	{r4, r5, r6, lr}
 c02f1be:	b0a2      	sub	sp, #136	; 0x88
 c02f1c0:	4604      	mov	r4, r0
    enum tfm_plat_err_t plat_res;
    psa_ecc_curve_t psa_curve;
    enum ecc_curve_t cose_curve;
    struct ecc_key_t attest_key = {0};
 c02f1c2:	2218      	movs	r2, #24
 c02f1c4:	2100      	movs	r1, #0
 c02f1c6:	a804      	add	r0, sp, #16
 c02f1c8:	f7e8 fbfd 	bl	c0179c6 <memset>

#define PSA_KEY_POLICY_INIT {0, 0, 0}
static inline struct psa_key_policy_s psa_key_policy_init( void )
{
    const struct psa_key_policy_s v = PSA_KEY_POLICY_INIT;
    return( v );
 c02f1cc:	2300      	movs	r3, #0
    psa_key_type_t attest_key_type;
    psa_status_t crypto_res;
    psa_key_policy_t policy = psa_key_policy_init();

    /* Private key should be unregistered at this point */
    if (private_key_registered != 0) {
 c02f1ce:	4d1e      	ldr	r5, [pc, #120]	; (c02f248 <attest_register_initial_attestation_private_key+0x8c>)
 c02f1d0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 c02f1d4:	9303      	str	r3, [sp, #12]
 c02f1d6:	682b      	ldr	r3, [r5, #0]
 c02f1d8:	b113      	cbz	r3, c02f1e0 <attest_register_initial_attestation_private_key+0x24>
        return PSA_ATTEST_ERR_GENERAL;
 c02f1da:	2005      	movs	r0, #5
        return PSA_ATTEST_ERR_GENERAL;
    }
    private_key_registered = 1;

    return PSA_ATTEST_ERR_SUCCESS;
}
 c02f1dc:	b022      	add	sp, #136	; 0x88
 c02f1de:	bd70      	pop	{r4, r5, r6, pc}
    crypto_res = psa_allocate_key(private_key);
 c02f1e0:	4620      	mov	r0, r4
 c02f1e2:	f7eb f968 	bl	c01a4b6 <psa_allocate_key>
    if (crypto_res != PSA_SUCCESS) {
 c02f1e6:	2800      	cmp	r0, #0
 c02f1e8:	d1f7      	bne.n	c02f1da <attest_register_initial_attestation_private_key+0x1e>
    plat_res = tfm_plat_get_initial_attest_key(key_buf, sizeof(key_buf),
 c02f1ea:	f10d 0303 	add.w	r3, sp, #3
 c02f1ee:	aa04      	add	r2, sp, #16
 c02f1f0:	2160      	movs	r1, #96	; 0x60
 c02f1f2:	a80a      	add	r0, sp, #40	; 0x28
 c02f1f4:	f7eb f8b4 	bl	c01a360 <tfm_plat_get_initial_attest_key>
    if (plat_res != TFM_PLAT_ERR_SUCCESS || attest_key.priv_key == NULL) {
 c02f1f8:	2800      	cmp	r0, #0
 c02f1fa:	d1ee      	bne.n	c02f1da <attest_register_initial_attestation_private_key+0x1e>
 c02f1fc:	9b04      	ldr	r3, [sp, #16]
 c02f1fe:	2b00      	cmp	r3, #0
 c02f200:	d0eb      	beq.n	c02f1da <attest_register_initial_attestation_private_key+0x1e>
 c02f202:	f89d 3003 	ldrb.w	r3, [sp, #3]
 c02f206:	3b01      	subs	r3, #1
 c02f208:	b2db      	uxtb	r3, r3
 c02f20a:	2b04      	cmp	r3, #4
 c02f20c:	d8e5      	bhi.n	c02f1da <attest_register_initial_attestation_private_key+0x1e>
 c02f20e:	4a0f      	ldr	r2, [pc, #60]	; (c02f24c <attest_register_initial_attestation_private_key+0x90>)
    psa_key_policy_set_usage(&policy,
 c02f210:	f44f 6180 	mov.w	r1, #1024	; 0x400
 c02f214:	5cd6      	ldrb	r6, [r2, r3]
 c02f216:	a801      	add	r0, sp, #4
 c02f218:	4a0d      	ldr	r2, [pc, #52]	; (c02f250 <attest_register_initial_attestation_private_key+0x94>)
 c02f21a:	f7eb fa95 	bl	c01a748 <psa_key_policy_set_usage>
    crypto_res = psa_set_key_policy(*private_key, &policy);
 c02f21e:	a901      	add	r1, sp, #4
 c02f220:	8820      	ldrh	r0, [r4, #0]
 c02f222:	f7eb fa98 	bl	c01a756 <psa_set_key_policy>
    if (crypto_res != PSA_SUCCESS) {
 c02f226:	2800      	cmp	r0, #0
 c02f228:	d1d7      	bne.n	c02f1da <attest_register_initial_attestation_private_key+0x1e>
    crypto_res = psa_import_key(*private_key,
 c02f22a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c02f22e:	f046 41e0 	orr.w	r1, r6, #1879048192	; 0x70000000
 c02f232:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
 c02f236:	8820      	ldrh	r0, [r4, #0]
 c02f238:	f7eb f96d 	bl	c01a516 <psa_import_key>
    if (crypto_res != PSA_SUCCESS) {
 c02f23c:	2800      	cmp	r0, #0
 c02f23e:	d1cc      	bne.n	c02f1da <attest_register_initial_attestation_private_key+0x1e>
    private_key_registered = 1;
 c02f240:	2301      	movs	r3, #1
 c02f242:	602b      	str	r3, [r5, #0]
    return PSA_ATTEST_ERR_SUCCESS;
 c02f244:	e7ca      	b.n	c02f1dc <attest_register_initial_attestation_private_key+0x20>
 c02f246:	bf00      	nop
 c02f248:	300368a8 	.word	0x300368a8
 c02f24c:	0c036b88 	.word	0x0c036b88
 c02f250:	10060009 	.word	0x10060009

0c02f254 <attest_unregister_initial_attestation_private_key>:

enum psa_attest_err_t
attest_unregister_initial_attestation_private_key(psa_key_handle_t private_key)
{
 c02f254:	b510      	push	{r4, lr}
    psa_status_t crypto_res;

    /* Private key must be registered at this point */
    if (private_key_registered != 1) {
 c02f256:	4c06      	ldr	r4, [pc, #24]	; (c02f270 <attest_unregister_initial_attestation_private_key+0x1c>)
 c02f258:	6823      	ldr	r3, [r4, #0]
 c02f25a:	2b01      	cmp	r3, #1
 c02f25c:	d001      	beq.n	c02f262 <attest_unregister_initial_attestation_private_key+0xe>
        return PSA_ATTEST_ERR_GENERAL;
 c02f25e:	2005      	movs	r0, #5
        return PSA_ATTEST_ERR_GENERAL;
    }
    private_key_registered = 0;

    return PSA_ATTEST_ERR_SUCCESS;
}
 c02f260:	bd10      	pop	{r4, pc}
    crypto_res = psa_destroy_key(private_key);
 c02f262:	f7eb f985 	bl	c01a570 <psa_destroy_key>
    if (crypto_res != PSA_SUCCESS) {
 c02f266:	2800      	cmp	r0, #0
 c02f268:	d1f9      	bne.n	c02f25e <attest_unregister_initial_attestation_private_key+0xa>
    private_key_registered = 0;
 c02f26a:	6020      	str	r0, [r4, #0]
    return PSA_ATTEST_ERR_SUCCESS;
 c02f26c:	e7f8      	b.n	c02f260 <attest_unregister_initial_attestation_private_key+0xc>
 c02f26e:	bf00      	nop
 c02f270:	300368a8 	.word	0x300368a8

0c02f274 <tfm_crypto_aead_encrypt>:
/*!@{*/
psa_status_t tfm_crypto_aead_encrypt(psa_invec in_vec[],
                                     size_t in_len,
                                     psa_outvec out_vec[],
                                     size_t out_len)
{
 c02f274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02f278:	4614      	mov	r4, r2
#if (TFM_CRYPTO_AEAD_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;

    if ( !((in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02f27a:	1e8a      	subs	r2, r1, #2
 c02f27c:	2a01      	cmp	r2, #1
{
 c02f27e:	b08d      	sub	sp, #52	; 0x34
    if ( !((in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02f280:	d833      	bhi.n	c02f2ea <tfm_crypto_aead_encrypt+0x76>
 c02f282:	2b01      	cmp	r3, #1
 c02f284:	d131      	bne.n	c02f2ea <tfm_crypto_aead_encrypt+0x76>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
 c02f286:	6843      	ldr	r3, [r0, #4]
 c02f288:	2b34      	cmp	r3, #52	; 0x34
 c02f28a:	d12e      	bne.n	c02f2ea <tfm_crypto_aead_encrypt+0x76>
    psa_key_handle_t key_handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;
    const uint8_t *nonce = aead_pack_input->nonce;
    size_t nonce_length = aead_pack_input->nonce_length;
    const uint8_t *plaintext = in_vec[1].base;
    size_t plaintext_length = in_vec[1].len;
 c02f28c:	e9d0 ab02 	ldrd	sl, fp, [r0, #8]
    uint8_t *ciphertext = out_vec[0].base;
 c02f290:	6822      	ldr	r2, [r4, #0]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02f292:	6805      	ldr	r5, [r0, #0]
    uint8_t *ciphertext = out_vec[0].base;
 c02f294:	9209      	str	r2, [sp, #36]	; 0x24
    size_t ciphertext_size = out_vec[0].len;
 c02f296:	6862      	ldr	r2, [r4, #4]
    psa_key_handle_t key_handle = iov->key_handle;
 c02f298:	88ae      	ldrh	r6, [r5, #4]
    size_t ciphertext_size = out_vec[0].len;
 c02f29a:	920a      	str	r2, [sp, #40]	; 0x28
 c02f29c:	2200      	movs	r2, #0
    const uint8_t *additional_data = NULL;
    size_t additional_data_length = 0;

    /* Check if additional data has been passed and initialise it */
    if (in_len == 3) {
 c02f29e:	2903      	cmp	r1, #3
    size_t nonce_length = aead_pack_input->nonce_length;
 c02f2a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        additional_data = in_vec[2].base;
        additional_data_length = in_vec[2].len;
 c02f2a2:	bf08      	it	eq
 c02f2a4:	e9d0 7804 	ldrdeq	r7, r8, [r0, #16]
    psa_algorithm_t alg = iov->alg;
 c02f2a8:	f8d5 9010 	ldr.w	r9, [r5, #16]
    }

    /* Initialise ciphertext_length to zero */
    out_vec[0].len = 0;

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02f2ac:	f04f 0100 	mov.w	r1, #0
    out_vec[0].len = 0;
 c02f2b0:	6062      	str	r2, [r4, #4]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02f2b2:	4630      	mov	r0, r6
 c02f2b4:	930b      	str	r3, [sp, #44]	; 0x2c
    size_t additional_data_length = 0;
 c02f2b6:	bf1c      	itt	ne
 c02f2b8:	4690      	movne	r8, r2
    const uint8_t *additional_data = NULL;
 c02f2ba:	4617      	movne	r7, r2
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02f2bc:	f000 fe7c 	bl	c02ffb8 <tfm_crypto_check_handle_owner>
    if (status == PSA_SUCCESS) {
 c02f2c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c02f2c2:	b978      	cbnz	r0, c02f2e4 <tfm_crypto_aead_encrypt+0x70>

        status = psa_aead_encrypt(key_handle, alg, nonce, nonce_length,
 c02f2c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c02f2c6:	3404      	adds	r4, #4
 c02f2c8:	9205      	str	r2, [sp, #20]
 c02f2ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c02f2cc:	9406      	str	r4, [sp, #24]
 c02f2ce:	e9cd b203 	strd	fp, r2, [sp, #12]
 c02f2d2:	e9cd 8a01 	strd	r8, sl, [sp, #4]
 c02f2d6:	9700      	str	r7, [sp, #0]
 c02f2d8:	f105 0220 	add.w	r2, r5, #32
 c02f2dc:	4649      	mov	r1, r9
 c02f2de:	4630      	mov	r0, r6
 c02f2e0:	f7fd fb8e 	bl	c02ca00 <mbedcrypto__psa_aead_encrypt>
                                  ciphertext, ciphertext_size, &out_vec[0].len);
    }

    return status;
#endif /* TFM_CRYPTO_AEAD_MODULE_DISABLED */
}
 c02f2e4:	b00d      	add	sp, #52	; 0x34
 c02f2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f2ea:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02f2ee:	e7f9      	b.n	c02f2e4 <tfm_crypto_aead_encrypt+0x70>

0c02f2f0 <tfm_crypto_aead_decrypt>:

psa_status_t tfm_crypto_aead_decrypt(psa_invec in_vec[],
                                     size_t in_len,
                                     psa_outvec out_vec[],
                                     size_t out_len)
{
 c02f2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02f2f4:	4614      	mov	r4, r2
#if (TFM_CRYPTO_AEAD_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;

    if ( !((in_len == 2) || (in_len == 3)) || (out_len > 1)) {
 c02f2f6:	1e8a      	subs	r2, r1, #2
 c02f2f8:	2a01      	cmp	r2, #1
{
 c02f2fa:	b08d      	sub	sp, #52	; 0x34
    if ( !((in_len == 2) || (in_len == 3)) || (out_len > 1)) {
 c02f2fc:	d833      	bhi.n	c02f366 <tfm_crypto_aead_decrypt+0x76>
 c02f2fe:	2b01      	cmp	r3, #1
 c02f300:	d831      	bhi.n	c02f366 <tfm_crypto_aead_decrypt+0x76>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
 c02f302:	6843      	ldr	r3, [r0, #4]
 c02f304:	2b34      	cmp	r3, #52	; 0x34
 c02f306:	d12e      	bne.n	c02f366 <tfm_crypto_aead_decrypt+0x76>
    psa_key_handle_t key_handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;
    const uint8_t *nonce = aead_pack_input->nonce;
    size_t nonce_length = aead_pack_input->nonce_length;
    const uint8_t *ciphertext = in_vec[1].base;
    size_t ciphertext_length = in_vec[1].len;
 c02f308:	e9d0 ab02 	ldrd	sl, fp, [r0, #8]
    uint8_t *plaintext = out_vec[0].base;
 c02f30c:	6822      	ldr	r2, [r4, #0]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02f30e:	6805      	ldr	r5, [r0, #0]
    uint8_t *plaintext = out_vec[0].base;
 c02f310:	9209      	str	r2, [sp, #36]	; 0x24
    size_t plaintext_size = out_vec[0].len;
 c02f312:	6862      	ldr	r2, [r4, #4]
    psa_key_handle_t key_handle = iov->key_handle;
 c02f314:	88ae      	ldrh	r6, [r5, #4]
    size_t plaintext_size = out_vec[0].len;
 c02f316:	920a      	str	r2, [sp, #40]	; 0x28
 c02f318:	2200      	movs	r2, #0
    const uint8_t *additional_data = NULL;
    size_t additional_data_length = 0;

    /* Check if additional data has been passed and initialise it */
    if (in_len == 3) {
 c02f31a:	2903      	cmp	r1, #3
    size_t nonce_length = aead_pack_input->nonce_length;
 c02f31c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        additional_data = in_vec[2].base;
        additional_data_length = in_vec[2].len;
 c02f31e:	bf08      	it	eq
 c02f320:	e9d0 7804 	ldrdeq	r7, r8, [r0, #16]
    psa_algorithm_t alg = iov->alg;
 c02f324:	f8d5 9010 	ldr.w	r9, [r5, #16]
    }

    /* Initialise plaintext_length to zero */
    out_vec[0].len = 0;

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02f328:	f04f 0100 	mov.w	r1, #0
    out_vec[0].len = 0;
 c02f32c:	6062      	str	r2, [r4, #4]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02f32e:	4630      	mov	r0, r6
 c02f330:	930b      	str	r3, [sp, #44]	; 0x2c
    size_t additional_data_length = 0;
 c02f332:	bf1c      	itt	ne
 c02f334:	4690      	movne	r8, r2
    const uint8_t *additional_data = NULL;
 c02f336:	4617      	movne	r7, r2
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02f338:	f000 fe3e 	bl	c02ffb8 <tfm_crypto_check_handle_owner>
    if (status == PSA_SUCCESS) {
 c02f33c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c02f33e:	b978      	cbnz	r0, c02f360 <tfm_crypto_aead_decrypt+0x70>

        status = psa_aead_decrypt(key_handle, alg, nonce, nonce_length,
 c02f340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c02f342:	3404      	adds	r4, #4
 c02f344:	9205      	str	r2, [sp, #20]
 c02f346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c02f348:	9406      	str	r4, [sp, #24]
 c02f34a:	e9cd b203 	strd	fp, r2, [sp, #12]
 c02f34e:	e9cd 8a01 	strd	r8, sl, [sp, #4]
 c02f352:	9700      	str	r7, [sp, #0]
 c02f354:	f105 0220 	add.w	r2, r5, #32
 c02f358:	4649      	mov	r1, r9
 c02f35a:	4630      	mov	r0, r6
 c02f35c:	f7fd fbbc 	bl	c02cad8 <mbedcrypto__psa_aead_decrypt>
                                  plaintext, plaintext_size, &out_vec[0].len);
    }

    return status;
#endif /* TFM_CRYPTO_AEAD_MODULE_DISABLED */
}
 c02f360:	b00d      	add	sp, #52	; 0x34
 c02f362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f366:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02f36a:	e7f9      	b.n	c02f360 <tfm_crypto_aead_decrypt+0x70>

0c02f36c <tfm_crypto_init_alloc>:
 *
 */

/*!@{*/
psa_status_t tfm_crypto_init_alloc(void)
{
 c02f36c:	b508      	push	{r3, lr}
}

__attribute__ ((always_inline)) __STATIC_INLINE
void *tfm_memset(void *ptr, int value, size_t num)
{
    return (memset(ptr, value, num));
 c02f36e:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
 c02f372:	2100      	movs	r1, #0
 c02f374:	4802      	ldr	r0, [pc, #8]	; (c02f380 <tfm_crypto_init_alloc+0x14>)
 c02f376:	f7e8 fb26 	bl	c0179c6 <memset>
    /* Clear the contents of the local contexts */
    (void)tfm_memset(operation, 0, sizeof(operation));
    return PSA_SUCCESS;
}
 c02f37a:	2000      	movs	r0, #0
 c02f37c:	bd08      	pop	{r3, pc}
 c02f37e:	bf00      	nop
 c02f380:	300368b0 	.word	0x300368b0

0c02f384 <tfm_crypto_operation_alloc>:
psa_status_t tfm_crypto_operation_alloc(enum tfm_crypto_operation_type type,
                                        uint32_t *handle,
                                        void **ctx)
{
    uint32_t i = 0;
    int32_t partition_id = 0;
 c02f384:	2300      	movs	r3, #0
{
 c02f386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c02f388:	4607      	mov	r7, r0
    int32_t partition_id = 0;
 c02f38a:	a802      	add	r0, sp, #8
 c02f38c:	f840 3d04 	str.w	r3, [r0, #-4]!
{
 c02f390:	460e      	mov	r6, r1
 c02f392:	4615      	mov	r5, r2
    psa_status_t status;

    status = tfm_crypto_get_caller_id(&partition_id);
 c02f394:	f000 fd18 	bl	c02fdc8 <tfm_crypto_get_caller_id>
    if (status != PSA_SUCCESS) {
 c02f398:	b9b8      	cbnz	r0, c02f3ca <tfm_crypto_operation_alloc+0x46>
        return status;
    }

    /* Handle must be initialised before calling a setup function */
    if (*handle != TFM_CRYPTO_INVALID_HANDLE) {
 c02f39a:	6833      	ldr	r3, [r6, #0]
 c02f39c:	b9e3      	cbnz	r3, c02f3d8 <tfm_crypto_operation_alloc+0x54>
        return PSA_ERROR_BAD_STATE;
    }

    /* Init to invalid values */
    if (ctx == NULL) {
 c02f39e:	b1f5      	cbz	r5, c02f3de <tfm_crypto_operation_alloc+0x5a>
 c02f3a0:	f44f 7e28 	mov.w	lr, #672	; 0x2a0
        return PSA_ERROR_INVALID_ARGUMENT;
    }
    *ctx = NULL;

    for (i=0; i<TFM_CRYPTO_CONC_OPER_NUM; i++) {
        if (operation[i].in_use == TFM_CRYPTO_NOT_IN_USE) {
 c02f3a4:	4a0f      	ldr	r2, [pc, #60]	; (c02f3e4 <tfm_crypto_operation_alloc+0x60>)
    *ctx = NULL;
 c02f3a6:	602b      	str	r3, [r5, #0]
 c02f3a8:	fb0e f403 	mul.w	r4, lr, r3
        if (operation[i].in_use == TFM_CRYPTO_NOT_IN_USE) {
 c02f3ac:	58a1      	ldr	r1, [r4, r2]
 c02f3ae:	3301      	adds	r3, #1
 c02f3b0:	eb04 0c02 	add.w	ip, r4, r2
 c02f3b4:	b959      	cbnz	r1, c02f3ce <tfm_crypto_operation_alloc+0x4a>
            operation[i].in_use = TFM_CRYPTO_IN_USE;
 c02f3b6:	2101      	movs	r1, #1
            operation[i].owner = partition_id;
            operation[i].type = type;
            *handle = i + 1;
            *ctx = (void *) &(operation[i].operation);
 c02f3b8:	3410      	adds	r4, #16
            operation[i].in_use = TFM_CRYPTO_IN_USE;
 c02f3ba:	f8cc 1000 	str.w	r1, [ip]
            operation[i].owner = partition_id;
 c02f3be:	9901      	ldr	r1, [sp, #4]
            *ctx = (void *) &(operation[i].operation);
 c02f3c0:	4414      	add	r4, r2
            operation[i].type = type;
 c02f3c2:	e9cc 1701 	strd	r1, r7, [ip, #4]
            *handle = i + 1;
 c02f3c6:	6033      	str	r3, [r6, #0]
            *ctx = (void *) &(operation[i].operation);
 c02f3c8:	602c      	str	r4, [r5, #0]
            return PSA_SUCCESS;
        }
    }

    return PSA_ERROR_NOT_PERMITTED;
}
 c02f3ca:	b003      	add	sp, #12
 c02f3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (i=0; i<TFM_CRYPTO_CONC_OPER_NUM; i++) {
 c02f3ce:	2b08      	cmp	r3, #8
 c02f3d0:	d1ea      	bne.n	c02f3a8 <tfm_crypto_operation_alloc+0x24>
    return PSA_ERROR_NOT_PERMITTED;
 c02f3d2:	f06f 0084 	mvn.w	r0, #132	; 0x84
 c02f3d6:	e7f8      	b.n	c02f3ca <tfm_crypto_operation_alloc+0x46>
        return PSA_ERROR_BAD_STATE;
 c02f3d8:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02f3dc:	e7f5      	b.n	c02f3ca <tfm_crypto_operation_alloc+0x46>
        return PSA_ERROR_INVALID_ARGUMENT;
 c02f3de:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c02f3e2:	e7f2      	b.n	c02f3ca <tfm_crypto_operation_alloc+0x46>
 c02f3e4:	300368b0 	.word	0x300368b0

0c02f3e8 <tfm_crypto_operation_release>:

psa_status_t tfm_crypto_operation_release(uint32_t *handle)
{
    uint32_t h_val = *handle;
    int32_t partition_id = 0;
 c02f3e8:	2300      	movs	r3, #0
{
 c02f3ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t h_val = *handle;
 c02f3ec:	6806      	ldr	r6, [r0, #0]
{
 c02f3ee:	4607      	mov	r7, r0
    int32_t partition_id = 0;
 c02f3f0:	a802      	add	r0, sp, #8
 c02f3f2:	f840 3d04 	str.w	r3, [r0, #-4]!
    psa_status_t status;

    status = tfm_crypto_get_caller_id(&partition_id);
 c02f3f6:	f000 fce7 	bl	c02fdc8 <tfm_crypto_get_caller_id>
    if (status != PSA_SUCCESS) {
 c02f3fa:	4605      	mov	r5, r0
 c02f3fc:	bb20      	cbnz	r0, c02f448 <tfm_crypto_operation_release+0x60>
        return status;
    }

    if ( (h_val != TFM_CRYPTO_INVALID_HANDLE) &&
 c02f3fe:	3e01      	subs	r6, #1
 c02f400:	2e07      	cmp	r6, #7
 c02f402:	d824      	bhi.n	c02f44e <tfm_crypto_operation_release+0x66>
         (h_val <= TFM_CRYPTO_CONC_OPER_NUM) &&
         (operation[h_val - 1].in_use == TFM_CRYPTO_IN_USE) &&
 c02f404:	f44f 7028 	mov.w	r0, #672	; 0x2a0
 c02f408:	4370      	muls	r0, r6
 c02f40a:	4c12      	ldr	r4, [pc, #72]	; (c02f454 <tfm_crypto_operation_release+0x6c>)
         (h_val <= TFM_CRYPTO_CONC_OPER_NUM) &&
 c02f40c:	5822      	ldr	r2, [r4, r0]
         (operation[h_val - 1].in_use == TFM_CRYPTO_IN_USE) &&
 c02f40e:	1823      	adds	r3, r4, r0
         (h_val <= TFM_CRYPTO_CONC_OPER_NUM) &&
 c02f410:	2a01      	cmp	r2, #1
 c02f412:	d11c      	bne.n	c02f44e <tfm_crypto_operation_release+0x66>
         (operation[h_val - 1].in_use == TFM_CRYPTO_IN_USE) &&
 c02f414:	6859      	ldr	r1, [r3, #4]
 c02f416:	9a01      	ldr	r2, [sp, #4]
 c02f418:	4291      	cmp	r1, r2
 c02f41a:	d118      	bne.n	c02f44e <tfm_crypto_operation_release+0x66>
 c02f41c:	689b      	ldr	r3, [r3, #8]
    uint8_t *mem_ptr = (uint8_t *) &(operation[index].operation);
 c02f41e:	3010      	adds	r0, #16
 c02f420:	3b01      	subs	r3, #1
 c02f422:	2b03      	cmp	r3, #3
 c02f424:	bf96      	itet	ls
 c02f426:	4a0c      	ldrls	r2, [pc, #48]	; (c02f458 <tfm_crypto_operation_release+0x70>)
    switch(operation[index].type) {
 c02f428:	462a      	movhi	r2, r5
 c02f42a:	f832 2013 	ldrhls.w	r2, [r2, r3, lsl #1]
    uint8_t *mem_ptr = (uint8_t *) &(operation[index].operation);
 c02f42e:	4420      	add	r0, r4
 c02f430:	2100      	movs	r1, #0
 c02f432:	f7e8 fac8 	bl	c0179c6 <memset>
         (operation[h_val - 1].owner == partition_id)) {

        memset_operation_context(h_val - 1);
        operation[h_val - 1].in_use = TFM_CRYPTO_NOT_IN_USE;
 c02f436:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 c02f43a:	435e      	muls	r6, r3
 c02f43c:	2300      	movs	r3, #0
 c02f43e:	19a2      	adds	r2, r4, r6
 c02f440:	51a3      	str	r3, [r4, r6]
        operation[h_val - 1].type = TFM_CRYPTO_OPERATION_NONE;
        operation[h_val - 1].owner = 0;
 c02f442:	e9c2 3301 	strd	r3, r3, [r2, #4]
        *handle = TFM_CRYPTO_INVALID_HANDLE;
 c02f446:	603b      	str	r3, [r7, #0]
        return PSA_SUCCESS;
    }

    return PSA_ERROR_INVALID_ARGUMENT;
}
 c02f448:	4628      	mov	r0, r5
 c02f44a:	b003      	add	sp, #12
 c02f44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PSA_ERROR_INVALID_ARGUMENT;
 c02f44e:	f06f 0586 	mvn.w	r5, #134	; 0x86
 c02f452:	e7f9      	b.n	c02f448 <tfm_crypto_operation_release+0x60>
 c02f454:	300368b0 	.word	0x300368b0
 c02f458:	0c036b8e 	.word	0x0c036b8e

0c02f45c <tfm_crypto_operation_lookup>:

psa_status_t tfm_crypto_operation_lookup(enum tfm_crypto_operation_type type,
                                         uint32_t handle,
                                         void **ctx)
{
    int32_t partition_id = 0;
 c02f45c:	2300      	movs	r3, #0
{
 c02f45e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02f460:	4606      	mov	r6, r0
    int32_t partition_id = 0;
 c02f462:	a802      	add	r0, sp, #8
 c02f464:	f840 3d04 	str.w	r3, [r0, #-4]!
{
 c02f468:	460c      	mov	r4, r1
 c02f46a:	4615      	mov	r5, r2
    psa_status_t status;

    status = tfm_crypto_get_caller_id(&partition_id);
 c02f46c:	f000 fcac 	bl	c02fdc8 <tfm_crypto_get_caller_id>
    if (status != PSA_SUCCESS) {
 c02f470:	b9a0      	cbnz	r0, c02f49c <tfm_crypto_operation_lookup+0x40>
        return status;
    }

    if ( (handle != TFM_CRYPTO_INVALID_HANDLE) &&
 c02f472:	1e63      	subs	r3, r4, #1
 c02f474:	2b07      	cmp	r3, #7
 c02f476:	d813      	bhi.n	c02f4a0 <tfm_crypto_operation_lookup+0x44>
         (handle <= TFM_CRYPTO_CONC_OPER_NUM) &&
         (operation[handle - 1].in_use == TFM_CRYPTO_IN_USE) &&
 c02f478:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 c02f47c:	4359      	muls	r1, r3
 c02f47e:	4c0a      	ldr	r4, [pc, #40]	; (c02f4a8 <tfm_crypto_operation_lookup+0x4c>)
         (handle <= TFM_CRYPTO_CONC_OPER_NUM) &&
 c02f480:	5862      	ldr	r2, [r4, r1]
         (operation[handle - 1].in_use == TFM_CRYPTO_IN_USE) &&
 c02f482:	1863      	adds	r3, r4, r1
         (handle <= TFM_CRYPTO_CONC_OPER_NUM) &&
 c02f484:	2a01      	cmp	r2, #1
 c02f486:	d10b      	bne.n	c02f4a0 <tfm_crypto_operation_lookup+0x44>
         (operation[handle - 1].in_use == TFM_CRYPTO_IN_USE) &&
 c02f488:	689a      	ldr	r2, [r3, #8]
 c02f48a:	42b2      	cmp	r2, r6
 c02f48c:	d108      	bne.n	c02f4a0 <tfm_crypto_operation_lookup+0x44>
         (operation[handle - 1].type == type) &&
 c02f48e:	685a      	ldr	r2, [r3, #4]
 c02f490:	9b01      	ldr	r3, [sp, #4]
 c02f492:	429a      	cmp	r2, r3
 c02f494:	d104      	bne.n	c02f4a0 <tfm_crypto_operation_lookup+0x44>
         (operation[handle - 1].owner == partition_id)) {

        *ctx = (void *) &(operation[handle - 1].operation);
 c02f496:	3110      	adds	r1, #16
 c02f498:	4421      	add	r1, r4
 c02f49a:	6029      	str	r1, [r5, #0]
        return PSA_SUCCESS;
    }

    return PSA_ERROR_BAD_STATE;
}
 c02f49c:	b002      	add	sp, #8
 c02f49e:	bd70      	pop	{r4, r5, r6, pc}
    return PSA_ERROR_BAD_STATE;
 c02f4a0:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02f4a4:	e7fa      	b.n	c02f49c <tfm_crypto_operation_lookup+0x40>
 c02f4a6:	bf00      	nop
 c02f4a8:	300368b0 	.word	0x300368b0

0c02f4ac <tfm_crypto_asymmetric_sign>:
                                        size_t out_len)
{
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 2) || (out_len != 1)) {
 c02f4ac:	2902      	cmp	r1, #2
{
 c02f4ae:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c02f4b2:	4614      	mov	r4, r2
    if ((in_len != 2) || (out_len != 1)) {
 c02f4b4:	d11e      	bne.n	c02f4f4 <tfm_crypto_asymmetric_sign+0x48>
 c02f4b6:	2b01      	cmp	r3, #1
 c02f4b8:	d11c      	bne.n	c02f4f4 <tfm_crypto_asymmetric_sign+0x48>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
 c02f4ba:	6843      	ldr	r3, [r0, #4]
 c02f4bc:	2b34      	cmp	r3, #52	; 0x34
 c02f4be:	d119      	bne.n	c02f4f4 <tfm_crypto_asymmetric_sign+0x48>
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;
    const uint8_t *hash = in_vec[1].base;
    size_t hash_length = in_vec[1].len;
 c02f4c0:	e9d0 7802 	ldrd	r7, r8, [r0, #8]
    uint8_t *signature = out_vec[0].base;
    size_t signature_size = out_vec[0].len;
 c02f4c4:	e9d2 9a00 	ldrd	r9, sl, [r2]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02f4c8:	6803      	ldr	r3, [r0, #0]
    psa_status_t status = tfm_crypto_check_handle_owner(handle, NULL);
 c02f4ca:	2100      	movs	r1, #0
    psa_key_handle_t handle = iov->key_handle;
 c02f4cc:	889d      	ldrh	r5, [r3, #4]
    psa_algorithm_t alg = iov->alg;
 c02f4ce:	691e      	ldr	r6, [r3, #16]
    psa_status_t status = tfm_crypto_check_handle_owner(handle, NULL);
 c02f4d0:	4628      	mov	r0, r5
 c02f4d2:	f000 fd71 	bl	c02ffb8 <tfm_crypto_check_handle_owner>

    if (status != PSA_SUCCESS) {
 c02f4d6:	b950      	cbnz	r0, c02f4ee <tfm_crypto_asymmetric_sign+0x42>
        return status;
    }

    return psa_asymmetric_sign(handle, alg, hash, hash_length,
 c02f4d8:	3404      	adds	r4, #4
 c02f4da:	e9cd a401 	strd	sl, r4, [sp, #4]
 c02f4de:	f8cd 9000 	str.w	r9, [sp]
 c02f4e2:	4643      	mov	r3, r8
 c02f4e4:	463a      	mov	r2, r7
 c02f4e6:	4631      	mov	r1, r6
 c02f4e8:	4628      	mov	r0, r5
 c02f4ea:	f7fc fe37 	bl	c02c15c <mbedcrypto__psa_asymmetric_sign>
                               signature, signature_size, &(out_vec[0].len));
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c02f4ee:	b004      	add	sp, #16
 c02f4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f4f4:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02f4f8:	e7f9      	b.n	c02f4ee <tfm_crypto_asymmetric_sign+0x42>

0c02f4fa <tfm_crypto_asymmetric_verify>:
                                          size_t out_len)
{
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 3) || (out_len != 0)) {
 c02f4fa:	2903      	cmp	r1, #3
{
 c02f4fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if ((in_len != 3) || (out_len != 0)) {
 c02f500:	d11a      	bne.n	c02f538 <tfm_crypto_asymmetric_verify+0x3e>
 c02f502:	b9cb      	cbnz	r3, c02f538 <tfm_crypto_asymmetric_verify+0x3e>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
 c02f504:	6842      	ldr	r2, [r0, #4]
 c02f506:	2a34      	cmp	r2, #52	; 0x34
 c02f508:	d116      	bne.n	c02f538 <tfm_crypto_asymmetric_verify+0x3e>
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;
    const uint8_t *hash = in_vec[1].base;
    size_t hash_length = in_vec[1].len;
 c02f50a:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
    const uint8_t *signature = in_vec[2].base;
    size_t signature_length = in_vec[2].len;
 c02f50e:	e9d0 8904 	ldrd	r8, r9, [r0, #16]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02f512:	6802      	ldr	r2, [r0, #0]
    psa_status_t status = tfm_crypto_check_handle_owner(handle, NULL);
 c02f514:	4619      	mov	r1, r3
    psa_key_handle_t handle = iov->key_handle;
 c02f516:	8894      	ldrh	r4, [r2, #4]
    psa_algorithm_t alg = iov->alg;
 c02f518:	6915      	ldr	r5, [r2, #16]
    psa_status_t status = tfm_crypto_check_handle_owner(handle, NULL);
 c02f51a:	4620      	mov	r0, r4
 c02f51c:	f000 fd4c 	bl	c02ffb8 <tfm_crypto_check_handle_owner>

    if (status != PSA_SUCCESS) {
 c02f520:	b938      	cbnz	r0, c02f532 <tfm_crypto_asymmetric_verify+0x38>
        return status;
    }

    return psa_asymmetric_verify(handle, alg, hash, hash_length,
 c02f522:	e9cd 8900 	strd	r8, r9, [sp]
 c02f526:	463b      	mov	r3, r7
 c02f528:	4632      	mov	r2, r6
 c02f52a:	4629      	mov	r1, r5
 c02f52c:	4620      	mov	r0, r4
 c02f52e:	f7fc ff07 	bl	c02c340 <mbedcrypto__psa_asymmetric_verify>
                                 signature, signature_length);
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c02f532:	b003      	add	sp, #12
 c02f534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f538:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02f53c:	e7f9      	b.n	c02f532 <tfm_crypto_asymmetric_verify+0x38>
	...

0c02f540 <tfm_crypto_asymmetric_encrypt>:

psa_status_t tfm_crypto_asymmetric_encrypt(psa_invec in_vec[],
                                           size_t in_len,
                                           psa_outvec out_vec[],
                                           size_t out_len)
{
 c02f540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02f544:	4614      	mov	r4, r2
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;

    if (!((in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02f546:	1e8a      	subs	r2, r1, #2
 c02f548:	2a01      	cmp	r2, #1
{
 c02f54a:	b08b      	sub	sp, #44	; 0x2c
    if (!((in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02f54c:	d83c      	bhi.n	c02f5c8 <tfm_crypto_asymmetric_encrypt+0x88>
 c02f54e:	2b01      	cmp	r3, #1
 c02f550:	d13a      	bne.n	c02f5c8 <tfm_crypto_asymmetric_encrypt+0x88>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
 c02f552:	6843      	ldr	r3, [r0, #4]
 c02f554:	2b34      	cmp	r3, #52	; 0x34
 c02f556:	d137      	bne.n	c02f5c8 <tfm_crypto_asymmetric_encrypt+0x88>
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;
    const uint8_t *input = in_vec[1].base;
    size_t input_length = in_vec[1].len;
 c02f558:	e9d0 9a02 	ldrd	r9, sl, [r0, #8]
    uint8_t *output = out_vec[0].base;
    size_t output_size = out_vec[0].len;
    psa_key_type_t type;
    size_t key_bits;

    if (in_len == 3) {
 c02f55c:	2903      	cmp	r1, #3
    size_t salt_length = 0;
 c02f55e:	bf14      	ite	ne
 c02f560:	f04f 0b00 	movne.w	fp, #0
        salt = in_vec[2].base;
        salt_length = in_vec[2].len;
 c02f564:	e9d0 6b04 	ldrdeq	r6, fp, [r0, #16]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02f568:	6803      	ldr	r3, [r0, #0]
    }

    status = tfm_crypto_check_handle_owner(handle, NULL);
 c02f56a:	f04f 0100 	mov.w	r1, #0
    psa_key_handle_t handle = iov->key_handle;
 c02f56e:	889d      	ldrh	r5, [r3, #4]
    psa_algorithm_t alg = iov->alg;
 c02f570:	f8d3 8010 	ldr.w	r8, [r3, #16]
    uint8_t *output = out_vec[0].base;
 c02f574:	6823      	ldr	r3, [r4, #0]
    status = tfm_crypto_check_handle_owner(handle, NULL);
 c02f576:	4628      	mov	r0, r5
    const uint8_t *salt = NULL;
 c02f578:	bf18      	it	ne
 c02f57a:	465e      	movne	r6, fp
    uint8_t *output = out_vec[0].base;
 c02f57c:	9307      	str	r3, [sp, #28]
    size_t output_size = out_vec[0].len;
 c02f57e:	6867      	ldr	r7, [r4, #4]
    status = tfm_crypto_check_handle_owner(handle, NULL);
 c02f580:	f000 fd1a 	bl	c02ffb8 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02f584:	b9e8      	cbnz	r0, c02f5c2 <tfm_crypto_asymmetric_encrypt+0x82>
        return status;
    }

    status = psa_get_key_information(handle, &type, &key_bits);
 c02f586:	aa09      	add	r2, sp, #36	; 0x24
 c02f588:	a908      	add	r1, sp, #32
 c02f58a:	4628      	mov	r0, r5
 c02f58c:	f7fb fe1d 	bl	c02b1ca <mbedcrypto__psa_get_key_information>
    if (status != PSA_SUCCESS) {
 c02f590:	b9b8      	cbnz	r0, c02f5c2 <tfm_crypto_asymmetric_encrypt+0x82>
        return status;
    }

    /* Check that the output buffer is large enough */
    if (output_size < PSA_ASYMMETRIC_ENCRYPT_OUTPUT_SIZE(type, key_bits, alg)) {
 c02f592:	9a08      	ldr	r2, [sp, #32]
 c02f594:	490f      	ldr	r1, [pc, #60]	; (c02f5d4 <tfm_crypto_asymmetric_encrypt+0x94>)
 c02f596:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 c02f59a:	428a      	cmp	r2, r1
 c02f59c:	d104      	bne.n	c02f5a8 <tfm_crypto_asymmetric_encrypt+0x68>
 c02f59e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c02f5a0:	3207      	adds	r2, #7
 c02f5a2:	ebb7 0fd2 	cmp.w	r7, r2, lsr #3
 c02f5a6:	d312      	bcc.n	c02f5ce <tfm_crypto_asymmetric_encrypt+0x8e>
        return PSA_ERROR_BUFFER_TOO_SMALL;
    }

    return psa_asymmetric_encrypt(handle, alg, input, input_length,
 c02f5a8:	9b07      	ldr	r3, [sp, #28]
 c02f5aa:	3404      	adds	r4, #4
 c02f5ac:	e9cd b301 	strd	fp, r3, [sp, #4]
 c02f5b0:	e9cd 7403 	strd	r7, r4, [sp, #12]
 c02f5b4:	9600      	str	r6, [sp, #0]
 c02f5b6:	4653      	mov	r3, sl
 c02f5b8:	464a      	mov	r2, r9
 c02f5ba:	4641      	mov	r1, r8
 c02f5bc:	4628      	mov	r0, r5
 c02f5be:	f7fc ff75 	bl	c02c4ac <mbedcrypto__psa_asymmetric_encrypt>
                                  salt, salt_length,
                                  output, output_size, &(out_vec[0].len));
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c02f5c2:	b00b      	add	sp, #44	; 0x2c
 c02f5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f5c8:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02f5cc:	e7f9      	b.n	c02f5c2 <tfm_crypto_asymmetric_encrypt+0x82>
        return PSA_ERROR_BUFFER_TOO_SMALL;
 c02f5ce:	f06f 0089 	mvn.w	r0, #137	; 0x89
 c02f5d2:	e7f6      	b.n	c02f5c2 <tfm_crypto_asymmetric_encrypt+0x82>
 c02f5d4:	60010000 	.word	0x60010000

0c02f5d8 <tfm_crypto_asymmetric_decrypt>:

psa_status_t tfm_crypto_asymmetric_decrypt(psa_invec in_vec[],
                                           size_t in_len,
                                           psa_outvec out_vec[],
                                           size_t out_len)
{
 c02f5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02f5dc:	4614      	mov	r4, r2
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if (!((in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02f5de:	1e8a      	subs	r2, r1, #2
 c02f5e0:	2a01      	cmp	r2, #1
{
 c02f5e2:	b089      	sub	sp, #36	; 0x24
    if (!((in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02f5e4:	d829      	bhi.n	c02f63a <tfm_crypto_asymmetric_decrypt+0x62>
 c02f5e6:	2b01      	cmp	r3, #1
 c02f5e8:	d127      	bne.n	c02f63a <tfm_crypto_asymmetric_decrypt+0x62>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
 c02f5ea:	6843      	ldr	r3, [r0, #4]
 c02f5ec:	2b34      	cmp	r3, #52	; 0x34
 c02f5ee:	d124      	bne.n	c02f63a <tfm_crypto_asymmetric_decrypt+0x62>
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;
    const uint8_t *input = in_vec[1].base;
    size_t input_length = in_vec[1].len;
 c02f5f0:	e9d0 8902 	ldrd	r8, r9, [r0, #8]
    const uint8_t *salt = NULL;
    size_t salt_length = 0;
    uint8_t *output = out_vec[0].base;
    size_t output_size = out_vec[0].len;
 c02f5f4:	e9d4 ab00 	ldrd	sl, fp, [r4]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02f5f8:	6803      	ldr	r3, [r0, #0]
    psa_status_t status;

    if (in_len == 3) {
 c02f5fa:	2903      	cmp	r1, #3
    psa_key_handle_t handle = iov->key_handle;
 c02f5fc:	889d      	ldrh	r5, [r3, #4]
    psa_algorithm_t alg = iov->alg;
 c02f5fe:	691f      	ldr	r7, [r3, #16]
    size_t salt_length = 0;
 c02f600:	bf14      	ite	ne
 c02f602:	2300      	movne	r3, #0
        salt = in_vec[2].base;
        salt_length = in_vec[2].len;
 c02f604:	e9d0 6304 	ldrdeq	r6, r3, [r0, #16]
    }

    status = tfm_crypto_check_handle_owner(handle, NULL);
 c02f608:	f04f 0100 	mov.w	r1, #0
 c02f60c:	4628      	mov	r0, r5
    const uint8_t *salt = NULL;
 c02f60e:	bf18      	it	ne
 c02f610:	461e      	movne	r6, r3
 c02f612:	9307      	str	r3, [sp, #28]
    status = tfm_crypto_check_handle_owner(handle, NULL);
 c02f614:	f000 fcd0 	bl	c02ffb8 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02f618:	9b07      	ldr	r3, [sp, #28]
 c02f61a:	b958      	cbnz	r0, c02f634 <tfm_crypto_asymmetric_decrypt+0x5c>
        return status;
    }

    return psa_asymmetric_decrypt(handle, alg, input, input_length,
 c02f61c:	3404      	adds	r4, #4
 c02f61e:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 c02f622:	e9cd b403 	strd	fp, r4, [sp, #12]
 c02f626:	9600      	str	r6, [sp, #0]
 c02f628:	464b      	mov	r3, r9
 c02f62a:	4642      	mov	r2, r8
 c02f62c:	4639      	mov	r1, r7
 c02f62e:	4628      	mov	r0, r5
 c02f630:	f7fc ffb0 	bl	c02c594 <mbedcrypto__psa_asymmetric_decrypt>
                                  salt, salt_length,
                                  output, output_size, &(out_vec[0].len));
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c02f634:	b009      	add	sp, #36	; 0x24
 c02f636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f63a:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02f63e:	e7f9      	b.n	c02f634 <tfm_crypto_asymmetric_decrypt+0x5c>

0c02f640 <tfm_crypto_cipher_generate_iv>:
/*!@{*/
psa_status_t tfm_crypto_cipher_generate_iv(psa_invec in_vec[],
                                           size_t in_len,
                                           psa_outvec out_vec[],
                                           size_t out_len)
{
 c02f640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c02f644:	4615      	mov	r5, r2
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_cipher_operation_t *operation = NULL;
 c02f646:	2200      	movs	r2, #0

    if ((in_len != 1) || (out_len != 2)) {
 c02f648:	2901      	cmp	r1, #1
{
 c02f64a:	4604      	mov	r4, r0
    psa_cipher_operation_t *operation = NULL;
 c02f64c:	9201      	str	r2, [sp, #4]
{
 c02f64e:	4608      	mov	r0, r1
    if ((in_len != 1) || (out_len != 2)) {
 c02f650:	d124      	bne.n	c02f69c <tfm_crypto_cipher_generate_iv+0x5c>
 c02f652:	2b02      	cmp	r3, #2
 c02f654:	d122      	bne.n	c02f69c <tfm_crypto_cipher_generate_iv+0x5c>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02f656:	6863      	ldr	r3, [r4, #4]
 c02f658:	2b34      	cmp	r3, #52	; 0x34
 c02f65a:	d11f      	bne.n	c02f69c <tfm_crypto_cipher_generate_iv+0x5c>
 c02f65c:	686b      	ldr	r3, [r5, #4]
 c02f65e:	2b04      	cmp	r3, #4
 c02f660:	d11c      	bne.n	c02f69c <tfm_crypto_cipher_generate_iv+0x5c>

    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    unsigned char *iv = out_vec[1].base;
    size_t iv_size = out_vec[1].len;
 c02f662:	e9d5 8902 	ldrd	r8, r9, [r5, #8]
    uint32_t handle = iov->op_handle;
 c02f666:	6823      	ldr	r3, [r4, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02f668:	682e      	ldr	r6, [r5, #0]
    uint32_t handle = iov->op_handle;
 c02f66a:	699f      	ldr	r7, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02f66c:	aa01      	add	r2, sp, #4
    *handle_out = iov->op_handle;
 c02f66e:	6037      	str	r7, [r6, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02f670:	4639      	mov	r1, r7
 c02f672:	f7ff fef3 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02f676:	4604      	mov	r4, r0
 c02f678:	b960      	cbnz	r0, c02f694 <tfm_crypto_cipher_generate_iv+0x54>
        return status;
    }

    *handle_out = handle;
 c02f67a:	6037      	str	r7, [r6, #0]

    status = psa_cipher_generate_iv(operation, iv, iv_size, &out_vec[1].len);
 c02f67c:	f105 030c 	add.w	r3, r5, #12
 c02f680:	464a      	mov	r2, r9
 c02f682:	4641      	mov	r1, r8
 c02f684:	9801      	ldr	r0, [sp, #4]
 c02f686:	f7fd f8e1 	bl	c02c84c <mbedcrypto__psa_cipher_generate_iv>
    if (status != PSA_SUCCESS) {
 c02f68a:	4604      	mov	r4, r0
 c02f68c:	b110      	cbz	r0, c02f694 <tfm_crypto_cipher_generate_iv+0x54>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02f68e:	4630      	mov	r0, r6
 c02f690:	f7ff feaa 	bl	c02f3e8 <tfm_crypto_operation_release>
        return status;
    }

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c02f694:	4620      	mov	r0, r4
 c02f696:	b003      	add	sp, #12
 c02f698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f69c:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02f6a0:	e7f8      	b.n	c02f694 <tfm_crypto_cipher_generate_iv+0x54>

0c02f6a2 <tfm_crypto_cipher_set_iv>:

psa_status_t tfm_crypto_cipher_set_iv(psa_invec in_vec[],
                                      size_t in_len,
                                      psa_outvec out_vec[],
                                      size_t out_len)
{
 c02f6a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_cipher_operation_t *operation = NULL;
 c02f6a4:	2400      	movs	r4, #0

    if ((in_len != 2) || (out_len != 1)) {
 c02f6a6:	2902      	cmp	r1, #2
    psa_cipher_operation_t *operation = NULL;
 c02f6a8:	9401      	str	r4, [sp, #4]
    if ((in_len != 2) || (out_len != 1)) {
 c02f6aa:	d120      	bne.n	c02f6ee <tfm_crypto_cipher_set_iv+0x4c>
 c02f6ac:	2b01      	cmp	r3, #1
 c02f6ae:	d11e      	bne.n	c02f6ee <tfm_crypto_cipher_set_iv+0x4c>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02f6b0:	6841      	ldr	r1, [r0, #4]
 c02f6b2:	2934      	cmp	r1, #52	; 0x34
 c02f6b4:	d11b      	bne.n	c02f6ee <tfm_crypto_cipher_set_iv+0x4c>
 c02f6b6:	6851      	ldr	r1, [r2, #4]
 c02f6b8:	2904      	cmp	r1, #4
 c02f6ba:	d118      	bne.n	c02f6ee <tfm_crypto_cipher_set_iv+0x4c>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    const unsigned char *iv = in_vec[1].base;
    size_t iv_length = in_vec[1].len;
 c02f6bc:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
    uint32_t handle = iov->op_handle;
 c02f6c0:	6801      	ldr	r1, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02f6c2:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02f6c4:	6989      	ldr	r1, [r1, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02f6c6:	aa01      	add	r2, sp, #4
    *handle_out = iov->op_handle;
 c02f6c8:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02f6ca:	4618      	mov	r0, r3
 c02f6cc:	f7ff fec6 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02f6d0:	4604      	mov	r4, r0
 c02f6d2:	b948      	cbnz	r0, c02f6e8 <tfm_crypto_cipher_set_iv+0x46>
        return status;
    }

    status = psa_cipher_set_iv(operation, iv, iv_length);
 c02f6d4:	463a      	mov	r2, r7
 c02f6d6:	4631      	mov	r1, r6
 c02f6d8:	9801      	ldr	r0, [sp, #4]
 c02f6da:	f7fd f895 	bl	c02c808 <mbedcrypto__psa_cipher_set_iv>
    if (status != PSA_SUCCESS) {
 c02f6de:	4604      	mov	r4, r0
 c02f6e0:	b110      	cbz	r0, c02f6e8 <tfm_crypto_cipher_set_iv+0x46>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02f6e2:	4628      	mov	r0, r5
 c02f6e4:	f7ff fe80 	bl	c02f3e8 <tfm_crypto_operation_release>
        return status;
    }

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c02f6e8:	4620      	mov	r0, r4
 c02f6ea:	b003      	add	sp, #12
 c02f6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f6ee:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02f6f2:	e7f9      	b.n	c02f6e8 <tfm_crypto_cipher_set_iv+0x46>

0c02f6f4 <tfm_crypto_cipher_encrypt_setup>:

psa_status_t tfm_crypto_cipher_encrypt_setup(psa_invec in_vec[],
                                             size_t in_len,
                                             psa_outvec out_vec[],
                                             size_t out_len)
{
 c02f6f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 c02f6f8:	461f      	mov	r7, r3
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_cipher_operation_t *operation = NULL;
 c02f6fa:	2300      	movs	r3, #0

    if ((in_len != 1) || (out_len != 1)) {
 c02f6fc:	2901      	cmp	r1, #1
    psa_cipher_operation_t *operation = NULL;
 c02f6fe:	9300      	str	r3, [sp, #0]
    if ((in_len != 1) || (out_len != 1)) {
 c02f700:	d12b      	bne.n	c02f75a <tfm_crypto_cipher_encrypt_setup+0x66>
 c02f702:	2f01      	cmp	r7, #1
 c02f704:	d129      	bne.n	c02f75a <tfm_crypto_cipher_encrypt_setup+0x66>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((out_vec[0].len != sizeof(uint32_t)) ||
 c02f706:	6851      	ldr	r1, [r2, #4]
 c02f708:	2904      	cmp	r1, #4
 c02f70a:	d126      	bne.n	c02f75a <tfm_crypto_cipher_encrypt_setup+0x66>
 c02f70c:	6841      	ldr	r1, [r0, #4]
 c02f70e:	2934      	cmp	r1, #52	; 0x34
 c02f710:	d123      	bne.n	c02f75a <tfm_crypto_cipher_encrypt_setup+0x66>
        (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02f712:	6801      	ldr	r1, [r0, #0]
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
 c02f714:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02f716:	6988      	ldr	r0, [r1, #24]
    psa_key_handle_t key_handle = iov->key_handle;
 c02f718:	888e      	ldrh	r6, [r1, #4]
    uint32_t handle = iov->op_handle;
 c02f71a:	9001      	str	r0, [sp, #4]
    psa_algorithm_t alg = iov->alg;
 c02f71c:	f8d1 8010 	ldr.w	r8, [r1, #16]

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02f720:	4630      	mov	r0, r6
 c02f722:	4619      	mov	r1, r3
 c02f724:	f000 fc48 	bl	c02ffb8 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02f728:	4604      	mov	r4, r0
 c02f72a:	b990      	cbnz	r0, c02f752 <tfm_crypto_cipher_encrypt_setup+0x5e>
        return status;
    }

    /* Allocate the operation context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_CIPHER_OPERATION,
 c02f72c:	466a      	mov	r2, sp
 c02f72e:	a901      	add	r1, sp, #4
 c02f730:	4638      	mov	r0, r7
 c02f732:	f7ff fe27 	bl	c02f384 <tfm_crypto_operation_alloc>
                                        &handle,
                                        (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02f736:	4604      	mov	r4, r0
 c02f738:	b958      	cbnz	r0, c02f752 <tfm_crypto_cipher_encrypt_setup+0x5e>
        return status;
    }

    *handle_out = handle;
 c02f73a:	9b01      	ldr	r3, [sp, #4]

    status = psa_cipher_encrypt_setup(operation, key_handle, alg);
 c02f73c:	4642      	mov	r2, r8
    *handle_out = handle;
 c02f73e:	602b      	str	r3, [r5, #0]
    status = psa_cipher_encrypt_setup(operation, key_handle, alg);
 c02f740:	4631      	mov	r1, r6
 c02f742:	9800      	ldr	r0, [sp, #0]
 c02f744:	f7fd f85a 	bl	c02c7fc <mbedcrypto__psa_cipher_encrypt_setup>
    if (status != PSA_SUCCESS) {
 c02f748:	4604      	mov	r4, r0
 c02f74a:	b110      	cbz	r0, c02f752 <tfm_crypto_cipher_encrypt_setup+0x5e>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02f74c:	4628      	mov	r0, r5
 c02f74e:	f7ff fe4b 	bl	c02f3e8 <tfm_crypto_operation_release>
        return status;
    }

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c02f752:	4620      	mov	r0, r4
 c02f754:	b002      	add	sp, #8
 c02f756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f75a:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02f75e:	e7f8      	b.n	c02f752 <tfm_crypto_cipher_encrypt_setup+0x5e>

0c02f760 <tfm_crypto_cipher_decrypt_setup>:

psa_status_t tfm_crypto_cipher_decrypt_setup(psa_invec in_vec[],
                                             size_t in_len,
                                             psa_outvec out_vec[],
                                             size_t out_len)
{
 c02f760:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 c02f764:	461f      	mov	r7, r3
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_cipher_operation_t *operation = NULL;
 c02f766:	2300      	movs	r3, #0

    if ((in_len != 1) || (out_len != 1)) {
 c02f768:	2901      	cmp	r1, #1
    psa_cipher_operation_t *operation = NULL;
 c02f76a:	9300      	str	r3, [sp, #0]
    if ((in_len != 1) || (out_len != 1)) {
 c02f76c:	d12b      	bne.n	c02f7c6 <tfm_crypto_cipher_decrypt_setup+0x66>
 c02f76e:	2f01      	cmp	r7, #1
 c02f770:	d129      	bne.n	c02f7c6 <tfm_crypto_cipher_decrypt_setup+0x66>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((out_vec[0].len != sizeof(uint32_t)) ||
 c02f772:	6851      	ldr	r1, [r2, #4]
 c02f774:	2904      	cmp	r1, #4
 c02f776:	d126      	bne.n	c02f7c6 <tfm_crypto_cipher_decrypt_setup+0x66>
 c02f778:	6841      	ldr	r1, [r0, #4]
 c02f77a:	2934      	cmp	r1, #52	; 0x34
 c02f77c:	d123      	bne.n	c02f7c6 <tfm_crypto_cipher_decrypt_setup+0x66>
        (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02f77e:	6801      	ldr	r1, [r0, #0]
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
 c02f780:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02f782:	6988      	ldr	r0, [r1, #24]
    psa_key_handle_t key_handle = iov->key_handle;
 c02f784:	888e      	ldrh	r6, [r1, #4]
    uint32_t handle = iov->op_handle;
 c02f786:	9001      	str	r0, [sp, #4]
    psa_algorithm_t alg = iov->alg;
 c02f788:	f8d1 8010 	ldr.w	r8, [r1, #16]

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02f78c:	4630      	mov	r0, r6
 c02f78e:	4619      	mov	r1, r3
 c02f790:	f000 fc12 	bl	c02ffb8 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02f794:	4604      	mov	r4, r0
 c02f796:	b990      	cbnz	r0, c02f7be <tfm_crypto_cipher_decrypt_setup+0x5e>
        return status;
    }

    /* Allocate the operation context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_CIPHER_OPERATION,
 c02f798:	466a      	mov	r2, sp
 c02f79a:	a901      	add	r1, sp, #4
 c02f79c:	4638      	mov	r0, r7
 c02f79e:	f7ff fdf1 	bl	c02f384 <tfm_crypto_operation_alloc>
                                        &handle,
                                        (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02f7a2:	4604      	mov	r4, r0
 c02f7a4:	b958      	cbnz	r0, c02f7be <tfm_crypto_cipher_decrypt_setup+0x5e>
        return status;
    }

    *handle_out = handle;
 c02f7a6:	9b01      	ldr	r3, [sp, #4]

    status = psa_cipher_decrypt_setup(operation, key_handle, alg);
 c02f7a8:	4642      	mov	r2, r8
    *handle_out = handle;
 c02f7aa:	602b      	str	r3, [r5, #0]
    status = psa_cipher_decrypt_setup(operation, key_handle, alg);
 c02f7ac:	4631      	mov	r1, r6
 c02f7ae:	9800      	ldr	r0, [sp, #0]
 c02f7b0:	f7fd f827 	bl	c02c802 <mbedcrypto__psa_cipher_decrypt_setup>
    if (status != PSA_SUCCESS) {
 c02f7b4:	4604      	mov	r4, r0
 c02f7b6:	b110      	cbz	r0, c02f7be <tfm_crypto_cipher_decrypt_setup+0x5e>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02f7b8:	4628      	mov	r0, r5
 c02f7ba:	f7ff fe15 	bl	c02f3e8 <tfm_crypto_operation_release>
        return status;
    }

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c02f7be:	4620      	mov	r0, r4
 c02f7c0:	b002      	add	sp, #8
 c02f7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f7c6:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02f7ca:	e7f8      	b.n	c02f7be <tfm_crypto_cipher_decrypt_setup+0x5e>

0c02f7cc <tfm_crypto_cipher_update>:

psa_status_t tfm_crypto_cipher_update(psa_invec in_vec[],
                                      size_t in_len,
                                      psa_outvec out_vec[],
                                      size_t out_len)
{
 c02f7cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c02f7d0:	4615      	mov	r5, r2
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_cipher_operation_t *operation = NULL;
 c02f7d2:	2200      	movs	r2, #0

    if ((in_len != 2) || (out_len != 2)) {
 c02f7d4:	2902      	cmp	r1, #2
    psa_cipher_operation_t *operation = NULL;
 c02f7d6:	9203      	str	r2, [sp, #12]
    if ((in_len != 2) || (out_len != 2)) {
 c02f7d8:	d128      	bne.n	c02f82c <tfm_crypto_cipher_update+0x60>
 c02f7da:	2b02      	cmp	r3, #2
 c02f7dc:	d126      	bne.n	c02f82c <tfm_crypto_cipher_update+0x60>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02f7de:	6843      	ldr	r3, [r0, #4]
 c02f7e0:	2b34      	cmp	r3, #52	; 0x34
 c02f7e2:	d123      	bne.n	c02f82c <tfm_crypto_cipher_update+0x60>
 c02f7e4:	686b      	ldr	r3, [r5, #4]
 c02f7e6:	2b04      	cmp	r3, #4
 c02f7e8:	d120      	bne.n	c02f82c <tfm_crypto_cipher_update+0x60>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    const uint8_t *input = in_vec[1].base;
    size_t input_length = in_vec[1].len;
 c02f7ea:	e9d0 7802 	ldrd	r7, r8, [r0, #8]
    unsigned char *output = out_vec[1].base;
    size_t output_size = out_vec[1].len;
 c02f7ee:	e9d5 9a02 	ldrd	r9, sl, [r5, #8]
    uint32_t handle = iov->op_handle;
 c02f7f2:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02f7f4:	682e      	ldr	r6, [r5, #0]
    uint32_t handle = iov->op_handle;
 c02f7f6:	6999      	ldr	r1, [r3, #24]

    /* Initialise the output_length to zero */
    out_vec[1].len = 0;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02f7f8:	2001      	movs	r0, #1
    *handle_out = iov->op_handle;
 c02f7fa:	6031      	str	r1, [r6, #0]
    out_vec[1].len = 0;
 c02f7fc:	60ea      	str	r2, [r5, #12]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02f7fe:	aa03      	add	r2, sp, #12
 c02f800:	f7ff fe2c 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02f804:	4604      	mov	r4, r0
 c02f806:	b968      	cbnz	r0, c02f824 <tfm_crypto_cipher_update+0x58>
        return status;
    }

    status = psa_cipher_update(operation, input, input_length,
 c02f808:	350c      	adds	r5, #12
 c02f80a:	e9cd a500 	strd	sl, r5, [sp]
 c02f80e:	464b      	mov	r3, r9
 c02f810:	4642      	mov	r2, r8
 c02f812:	4639      	mov	r1, r7
 c02f814:	9803      	ldr	r0, [sp, #12]
 c02f816:	f7fd f843 	bl	c02c8a0 <mbedcrypto__psa_cipher_update>
                               output, output_size, &out_vec[1].len);
    if (status != PSA_SUCCESS) {
 c02f81a:	4604      	mov	r4, r0
 c02f81c:	b110      	cbz	r0, c02f824 <tfm_crypto_cipher_update+0x58>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02f81e:	4630      	mov	r0, r6
 c02f820:	f7ff fde2 	bl	c02f3e8 <tfm_crypto_operation_release>
        return status;
    }

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c02f824:	4620      	mov	r0, r4
 c02f826:	b004      	add	sp, #16
 c02f828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f82c:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02f830:	e7f8      	b.n	c02f824 <tfm_crypto_cipher_update+0x58>

0c02f832 <tfm_crypto_cipher_finish>:

psa_status_t tfm_crypto_cipher_finish(psa_invec in_vec[],
                                      size_t in_len,
                                      psa_outvec out_vec[],
                                      size_t out_len)
{
 c02f832:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 c02f836:	4615      	mov	r5, r2
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_cipher_operation_t *operation = NULL;
 c02f838:	2200      	movs	r2, #0

    if ((in_len != 1) || (out_len != 2)) {
 c02f83a:	2901      	cmp	r1, #1
{
 c02f83c:	4604      	mov	r4, r0
    psa_cipher_operation_t *operation = NULL;
 c02f83e:	9201      	str	r2, [sp, #4]
{
 c02f840:	4608      	mov	r0, r1
    if ((in_len != 1) || (out_len != 2)) {
 c02f842:	d127      	bne.n	c02f894 <tfm_crypto_cipher_finish+0x62>
 c02f844:	2b02      	cmp	r3, #2
 c02f846:	d125      	bne.n	c02f894 <tfm_crypto_cipher_finish+0x62>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02f848:	6863      	ldr	r3, [r4, #4]
 c02f84a:	2b34      	cmp	r3, #52	; 0x34
 c02f84c:	d122      	bne.n	c02f894 <tfm_crypto_cipher_finish+0x62>
 c02f84e:	686b      	ldr	r3, [r5, #4]
 c02f850:	2b04      	cmp	r3, #4
 c02f852:	d11f      	bne.n	c02f894 <tfm_crypto_cipher_finish+0x62>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    unsigned char *output = out_vec[1].base;
    size_t output_size = out_vec[1].len;
 c02f854:	e9d5 7802 	ldrd	r7, r8, [r5, #8]
    uint32_t handle = iov->op_handle;
 c02f858:	6823      	ldr	r3, [r4, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02f85a:	682e      	ldr	r6, [r5, #0]
    uint32_t handle = iov->op_handle;
 c02f85c:	6999      	ldr	r1, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;
 c02f85e:	6031      	str	r1, [r6, #0]

    /* Initialise the output_length to zero */
    out_vec[1].len = 0;
 c02f860:	60ea      	str	r2, [r5, #12]

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02f862:	aa01      	add	r2, sp, #4
 c02f864:	f7ff fdfa 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02f868:	4604      	mov	r4, r0
 c02f86a:	b958      	cbnz	r0, c02f884 <tfm_crypto_cipher_finish+0x52>
        return status;
    }

    status = psa_cipher_finish(operation, output, output_size, &out_vec[1].len);
 c02f86c:	f105 030c 	add.w	r3, r5, #12
 c02f870:	4642      	mov	r2, r8
 c02f872:	4639      	mov	r1, r7
 c02f874:	9801      	ldr	r0, [sp, #4]
 c02f876:	f7fd f83d 	bl	c02c8f4 <mbedcrypto__psa_cipher_finish>
    if (status != PSA_SUCCESS) {
 c02f87a:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02f87c:	4630      	mov	r0, r6
    if (status != PSA_SUCCESS) {
 c02f87e:	b12c      	cbz	r4, c02f88c <tfm_crypto_cipher_finish+0x5a>
        (void)tfm_crypto_operation_release(handle_out);
 c02f880:	f7ff fdb2 	bl	c02f3e8 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c02f884:	4620      	mov	r0, r4
 c02f886:	b002      	add	sp, #8
 c02f888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = tfm_crypto_operation_release(handle_out);
 c02f88c:	f7ff fdac 	bl	c02f3e8 <tfm_crypto_operation_release>
 c02f890:	4604      	mov	r4, r0
    return status;
 c02f892:	e7f7      	b.n	c02f884 <tfm_crypto_cipher_finish+0x52>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f894:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02f898:	e7f4      	b.n	c02f884 <tfm_crypto_cipher_finish+0x52>

0c02f89a <tfm_crypto_cipher_abort>:

psa_status_t tfm_crypto_cipher_abort(psa_invec in_vec[],
                                     size_t in_len,
                                     psa_outvec out_vec[],
                                     size_t out_len)
{
 c02f89a:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_cipher_operation_t *operation = NULL;
 c02f89c:	2400      	movs	r4, #0

    if ((in_len != 1) || (out_len != 1)) {
 c02f89e:	2901      	cmp	r1, #1
    psa_cipher_operation_t *operation = NULL;
 c02f8a0:	9401      	str	r4, [sp, #4]
    if ((in_len != 1) || (out_len != 1)) {
 c02f8a2:	d11f      	bne.n	c02f8e4 <tfm_crypto_cipher_abort+0x4a>
 c02f8a4:	2b01      	cmp	r3, #1
 c02f8a6:	d11d      	bne.n	c02f8e4 <tfm_crypto_cipher_abort+0x4a>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02f8a8:	6841      	ldr	r1, [r0, #4]
 c02f8aa:	2934      	cmp	r1, #52	; 0x34
 c02f8ac:	d11a      	bne.n	c02f8e4 <tfm_crypto_cipher_abort+0x4a>
 c02f8ae:	6851      	ldr	r1, [r2, #4]
 c02f8b0:	2904      	cmp	r1, #4
 c02f8b2:	d117      	bne.n	c02f8e4 <tfm_crypto_cipher_abort+0x4a>
        (out_vec[0].len != sizeof(uint32_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
 c02f8b4:	6801      	ldr	r1, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02f8b6:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02f8b8:	6989      	ldr	r1, [r1, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02f8ba:	aa01      	add	r2, sp, #4
    *handle_out = iov->op_handle;
 c02f8bc:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02f8be:	4618      	mov	r0, r3
 c02f8c0:	f7ff fdcc 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02f8c4:	b938      	cbnz	r0, c02f8d6 <tfm_crypto_cipher_abort+0x3c>
        /* Operation does not exist, so abort has no effect */
        return PSA_SUCCESS;
    }

    status = psa_cipher_abort(operation);
 c02f8c6:	9801      	ldr	r0, [sp, #4]
 c02f8c8:	f7fc feca 	bl	c02c660 <mbedcrypto__psa_cipher_abort>

    if (status != PSA_SUCCESS) {
 c02f8cc:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02f8ce:	4628      	mov	r0, r5
    if (status != PSA_SUCCESS) {
 c02f8d0:	b124      	cbz	r4, c02f8dc <tfm_crypto_cipher_abort+0x42>
        (void)tfm_crypto_operation_release(handle_out);
 c02f8d2:	f7ff fd89 	bl	c02f3e8 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c02f8d6:	4620      	mov	r0, r4
 c02f8d8:	b003      	add	sp, #12
 c02f8da:	bd30      	pop	{r4, r5, pc}
    status = tfm_crypto_operation_release(handle_out);
 c02f8dc:	f7ff fd84 	bl	c02f3e8 <tfm_crypto_operation_release>
 c02f8e0:	4604      	mov	r4, r0
    return status;
 c02f8e2:	e7f8      	b.n	c02f8d6 <tfm_crypto_cipher_abort+0x3c>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f8e4:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02f8e8:	e7f5      	b.n	c02f8d6 <tfm_crypto_cipher_abort+0x3c>

0c02f8ea <tfm_crypto_get_generator_capacity>:
{
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    if ((in_len != 1) || (out_len != 1)) {
 c02f8ea:	2901      	cmp	r1, #1
{
 c02f8ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if ((in_len != 1) || (out_len != 1)) {
 c02f8ee:	d11a      	bne.n	c02f926 <tfm_crypto_get_generator_capacity+0x3c>
 c02f8f0:	2b01      	cmp	r3, #1
 c02f8f2:	d118      	bne.n	c02f926 <tfm_crypto_get_generator_capacity+0x3c>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02f8f4:	6843      	ldr	r3, [r0, #4]
 c02f8f6:	2b34      	cmp	r3, #52	; 0x34
 c02f8f8:	d115      	bne.n	c02f926 <tfm_crypto_get_generator_capacity+0x3c>
 c02f8fa:	6853      	ldr	r3, [r2, #4]
 c02f8fc:	2b04      	cmp	r3, #4
 c02f8fe:	d112      	bne.n	c02f926 <tfm_crypto_get_generator_capacity+0x3c>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    uint32_t handle = iov->op_handle;
    size_t *capacity = out_vec[0].base;
    psa_crypto_generator_t *generator = NULL;
 c02f900:	2500      	movs	r5, #0
    uint32_t handle = iov->op_handle;
 c02f902:	6801      	ldr	r1, [r0, #0]
    size_t *capacity = out_vec[0].base;
 c02f904:	6814      	ldr	r4, [r2, #0]
    psa_crypto_generator_t *generator = NULL;
 c02f906:	aa02      	add	r2, sp, #8
    uint32_t handle = iov->op_handle;
 c02f908:	6989      	ldr	r1, [r1, #24]
    psa_crypto_generator_t *generator = NULL;
 c02f90a:	f842 5d04 	str.w	r5, [r2, #-4]!

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_GENERATOR_OPERATION,
 c02f90e:	4618      	mov	r0, r3
 c02f910:	f7ff fda4 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&generator);
    if (status != PSA_SUCCESS) {
 c02f914:	b110      	cbz	r0, c02f91c <tfm_crypto_get_generator_capacity+0x32>
        *capacity = 0;
 c02f916:	6025      	str	r5, [r4, #0]
        return status;
    }

    return psa_get_generator_capacity(generator, capacity);
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02f918:	b003      	add	sp, #12
 c02f91a:	bd30      	pop	{r4, r5, pc}
    return psa_get_generator_capacity(generator, capacity);
 c02f91c:	4621      	mov	r1, r4
 c02f91e:	9801      	ldr	r0, [sp, #4]
 c02f920:	f7fd f996 	bl	c02cc50 <mbedcrypto__psa_get_generator_capacity>
 c02f924:	e7f8      	b.n	c02f918 <tfm_crypto_get_generator_capacity+0x2e>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f926:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02f92a:	e7f5      	b.n	c02f918 <tfm_crypto_get_generator_capacity+0x2e>

0c02f92c <tfm_crypto_generator_read>:
{
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    if ((in_len != 1) || (out_len != 1)) {
 c02f92c:	2901      	cmp	r1, #1
{
 c02f92e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if ((in_len != 1) || (out_len != 1)) {
 c02f930:	d117      	bne.n	c02f962 <tfm_crypto_generator_read+0x36>
 c02f932:	2b01      	cmp	r3, #1
 c02f934:	d115      	bne.n	c02f962 <tfm_crypto_generator_read+0x36>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
 c02f936:	6843      	ldr	r3, [r0, #4]
 c02f938:	2b34      	cmp	r3, #52	; 0x34
 c02f93a:	d112      	bne.n	c02f962 <tfm_crypto_generator_read+0x36>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    uint32_t handle = iov->op_handle;
    uint8_t *output = out_vec[0].base;
    size_t output_length = out_vec[0].len;
 c02f93c:	e9d2 4500 	ldrd	r4, r5, [r2]
    uint32_t handle = iov->op_handle;
 c02f940:	6803      	ldr	r3, [r0, #0]
    psa_crypto_generator_t *generator = NULL;
 c02f942:	aa02      	add	r2, sp, #8
    uint32_t handle = iov->op_handle;
 c02f944:	6999      	ldr	r1, [r3, #24]
    psa_crypto_generator_t *generator = NULL;
 c02f946:	2300      	movs	r3, #0

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_GENERATOR_OPERATION,
 c02f948:	2004      	movs	r0, #4
    psa_crypto_generator_t *generator = NULL;
 c02f94a:	f842 3d04 	str.w	r3, [r2, #-4]!
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_GENERATOR_OPERATION,
 c02f94e:	f7ff fd85 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&generator);
    if (status != PSA_SUCCESS) {
 c02f952:	b920      	cbnz	r0, c02f95e <tfm_crypto_generator_read+0x32>
        return status;
    }

    return psa_generator_read(generator, output, output_length);
 c02f954:	462a      	mov	r2, r5
 c02f956:	4621      	mov	r1, r4
 c02f958:	9801      	ldr	r0, [sp, #4]
 c02f95a:	f7fd f983 	bl	c02cc64 <mbedcrypto__psa_generator_read>
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02f95e:	b003      	add	sp, #12
 c02f960:	bd30      	pop	{r4, r5, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f962:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02f966:	e7fa      	b.n	c02f95e <tfm_crypto_generator_read+0x32>

0c02f968 <tfm_crypto_generator_import_key>:
{
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    if ((in_len != 2) || (out_len != 0)) {
 c02f968:	2902      	cmp	r1, #2
{
 c02f96a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if ((in_len != 2) || (out_len != 0)) {
 c02f96e:	d122      	bne.n	c02f9b6 <tfm_crypto_generator_import_key+0x4e>
 c02f970:	bb0b      	cbnz	r3, c02f9b6 <tfm_crypto_generator_import_key+0x4e>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02f972:	6842      	ldr	r2, [r0, #4]
 c02f974:	2a34      	cmp	r2, #52	; 0x34
 c02f976:	d11e      	bne.n	c02f9b6 <tfm_crypto_generator_import_key+0x4e>
 c02f978:	68c5      	ldr	r5, [r0, #12]
 c02f97a:	2d04      	cmp	r5, #4
 c02f97c:	d11b      	bne.n	c02f9b6 <tfm_crypto_generator_import_key+0x4e>
        (in_vec[1].len != sizeof(size_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02f97e:	6802      	ldr	r2, [r0, #0]
    psa_key_handle_t key_handle = iov->key_handle;
    psa_key_type_t type = iov->type;
    size_t bits = *(size_t *)(in_vec[1].base);
    psa_crypto_generator_t *generator = NULL;

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02f980:	4619      	mov	r1, r3
    psa_key_handle_t key_handle = iov->key_handle;
 c02f982:	8894      	ldrh	r4, [r2, #4]
    uint32_t handle = iov->op_handle;
 c02f984:	f8d2 8018 	ldr.w	r8, [r2, #24]
    psa_key_type_t type = iov->type;
 c02f988:	6896      	ldr	r6, [r2, #8]
    size_t bits = *(size_t *)(in_vec[1].base);
 c02f98a:	6882      	ldr	r2, [r0, #8]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02f98c:	4620      	mov	r0, r4
    size_t bits = *(size_t *)(in_vec[1].base);
 c02f98e:	6817      	ldr	r7, [r2, #0]
    psa_crypto_generator_t *generator = NULL;
 c02f990:	9301      	str	r3, [sp, #4]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02f992:	f000 fb11 	bl	c02ffb8 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02f996:	b958      	cbnz	r0, c02f9b0 <tfm_crypto_generator_import_key+0x48>
        return status;
    }

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_GENERATOR_OPERATION,
 c02f998:	aa01      	add	r2, sp, #4
 c02f99a:	4641      	mov	r1, r8
 c02f99c:	4628      	mov	r0, r5
 c02f99e:	f7ff fd5d 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&generator);
    if (status != PSA_SUCCESS) {
 c02f9a2:	b928      	cbnz	r0, c02f9b0 <tfm_crypto_generator_import_key+0x48>
        return status;
    }

    return psa_generator_import_key(key_handle, type, bits, generator);
 c02f9a4:	9b01      	ldr	r3, [sp, #4]
 c02f9a6:	463a      	mov	r2, r7
 c02f9a8:	4631      	mov	r1, r6
 c02f9aa:	4620      	mov	r0, r4
 c02f9ac:	f7fd fab0 	bl	c02cf10 <mbedcrypto__psa_generator_import_key>
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02f9b0:	b002      	add	sp, #8
 c02f9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02f9b6:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02f9ba:	e7f9      	b.n	c02f9b0 <tfm_crypto_generator_import_key+0x48>

0c02f9bc <tfm_crypto_generator_abort>:
{
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    if ((in_len != 1) || (out_len != 1)) {
 c02f9bc:	2901      	cmp	r1, #1
{
 c02f9be:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if ((in_len != 1) || (out_len != 1)) {
 c02f9c0:	d124      	bne.n	c02fa0c <tfm_crypto_generator_abort+0x50>
 c02f9c2:	2b01      	cmp	r3, #1
 c02f9c4:	d122      	bne.n	c02fa0c <tfm_crypto_generator_abort+0x50>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02f9c6:	6843      	ldr	r3, [r0, #4]
 c02f9c8:	2b34      	cmp	r3, #52	; 0x34
 c02f9ca:	d11f      	bne.n	c02fa0c <tfm_crypto_generator_abort+0x50>
 c02f9cc:	6853      	ldr	r3, [r2, #4]
 c02f9ce:	2b04      	cmp	r3, #4
 c02f9d0:	d11c      	bne.n	c02fa0c <tfm_crypto_generator_abort+0x50>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    psa_crypto_generator_t *generator = NULL;
 c02f9d2:	2400      	movs	r4, #0
    uint32_t handle = iov->op_handle;
 c02f9d4:	6801      	ldr	r1, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02f9d6:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02f9d8:	698e      	ldr	r6, [r1, #24]
    psa_crypto_generator_t *generator = NULL;
 c02f9da:	aa02      	add	r2, sp, #8
 c02f9dc:	f842 4d04 	str.w	r4, [r2, #-4]!

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_GENERATOR_OPERATION,
 c02f9e0:	4631      	mov	r1, r6
    *handle_out = iov->op_handle;
 c02f9e2:	602e      	str	r6, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_GENERATOR_OPERATION,
 c02f9e4:	4618      	mov	r0, r3
 c02f9e6:	f7ff fd39 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&generator);
    if (status != PSA_SUCCESS) {
 c02f9ea:	b940      	cbnz	r0, c02f9fe <tfm_crypto_generator_abort+0x42>
        /* Operation does not exist, so abort has no effect */
        return PSA_SUCCESS;
    }

    *handle_out = handle;
 c02f9ec:	602e      	str	r6, [r5, #0]

    status = psa_generator_abort(generator);
 c02f9ee:	9801      	ldr	r0, [sp, #4]
 c02f9f0:	f7fd f8e6 	bl	c02cbc0 <mbedcrypto__psa_generator_abort>
    if (status != PSA_SUCCESS) {
 c02f9f4:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02f9f6:	4628      	mov	r0, r5
    if (status != PSA_SUCCESS) {
 c02f9f8:	b124      	cbz	r4, c02fa04 <tfm_crypto_generator_abort+0x48>
        (void)tfm_crypto_operation_release(handle_out);
 c02f9fa:	f7ff fcf5 	bl	c02f3e8 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02f9fe:	4620      	mov	r0, r4
 c02fa00:	b002      	add	sp, #8
 c02fa02:	bd70      	pop	{r4, r5, r6, pc}
    status = tfm_crypto_operation_release(handle_out);
 c02fa04:	f7ff fcf0 	bl	c02f3e8 <tfm_crypto_operation_release>
 c02fa08:	4604      	mov	r4, r0
    return status;
 c02fa0a:	e7f8      	b.n	c02f9fe <tfm_crypto_generator_abort+0x42>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02fa0c:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02fa10:	e7f5      	b.n	c02f9fe <tfm_crypto_generator_abort+0x42>

0c02fa12 <tfm_crypto_key_derivation>:

psa_status_t tfm_crypto_key_derivation(psa_invec in_vec[],
                                       size_t in_len,
                                       psa_outvec out_vec[],
                                       size_t out_len)
{
 c02fa12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    if (!((in_len == 1) || (in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02fa16:	1e4c      	subs	r4, r1, #1
 c02fa18:	2c02      	cmp	r4, #2
{
 c02fa1a:	b089      	sub	sp, #36	; 0x24
    if (!((in_len == 1) || (in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02fa1c:	d843      	bhi.n	c02faa6 <tfm_crypto_key_derivation+0x94>
 c02fa1e:	2b01      	cmp	r3, #1
 c02fa20:	d141      	bne.n	c02faa6 <tfm_crypto_key_derivation+0x94>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02fa22:	6843      	ldr	r3, [r0, #4]
 c02fa24:	2b34      	cmp	r3, #52	; 0x34
 c02fa26:	d13e      	bne.n	c02faa6 <tfm_crypto_key_derivation+0x94>
 c02fa28:	6853      	ldr	r3, [r2, #4]
 c02fa2a:	2b04      	cmp	r3, #4
 c02fa2c:	d13b      	bne.n	c02faa6 <tfm_crypto_key_derivation+0x94>
    const uint8_t *salt = NULL;
    size_t salt_length = 0;
    const uint8_t *label = NULL;
    size_t label_length = 0;
    size_t capacity = iov->capacity;
    psa_crypto_generator_t *generator = NULL;
 c02fa2e:	2500      	movs	r5, #0
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02fa30:	6803      	ldr	r3, [r0, #0]

    if (in_len > 1) {
 c02fa32:	2901      	cmp	r1, #1
    uint32_t handle = iov->op_handle;
 c02fa34:	699c      	ldr	r4, [r3, #24]
    psa_key_handle_t key_handle = iov->key_handle;
 c02fa36:	889f      	ldrh	r7, [r3, #4]
    psa_algorithm_t alg = iov->alg;
 c02fa38:	f8d3 9010 	ldr.w	r9, [r3, #16]
    size_t capacity = iov->capacity;
 c02fa3c:	69db      	ldr	r3, [r3, #28]
    uint32_t handle = iov->op_handle;
 c02fa3e:	9406      	str	r4, [sp, #24]
    uint32_t *handle_out = out_vec[0].base;
 c02fa40:	6816      	ldr	r6, [r2, #0]
    size_t capacity = iov->capacity;
 c02fa42:	9305      	str	r3, [sp, #20]
    psa_crypto_generator_t *generator = NULL;
 c02fa44:	9507      	str	r5, [sp, #28]
    if (in_len > 1) {
 c02fa46:	d028      	beq.n	c02fa9a <tfm_crypto_key_derivation+0x88>
        salt = in_vec[1].base;
        salt_length = in_vec[1].len;
 c02fa48:	e9d0 8b02 	ldrd	r8, fp, [r0, #8]
    }

    if (in_len > 2) {
 c02fa4c:	2903      	cmp	r1, #3
 c02fa4e:	d128      	bne.n	c02faa2 <tfm_crypto_key_derivation+0x90>
        label = in_vec[2].base;
        label_length = in_vec[2].len;
 c02fa50:	e9d0 a504 	ldrd	sl, r5, [r0, #16]
    }

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02fa54:	2100      	movs	r1, #0
 c02fa56:	4638      	mov	r0, r7
 c02fa58:	f000 faae 	bl	c02ffb8 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02fa5c:	4604      	mov	r4, r0
 c02fa5e:	b9c0      	cbnz	r0, c02fa92 <tfm_crypto_key_derivation+0x80>
        return status;
    }

    /* Allocate the generator context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_GENERATOR_OPERATION,
 c02fa60:	aa07      	add	r2, sp, #28
 c02fa62:	a906      	add	r1, sp, #24
 c02fa64:	2004      	movs	r0, #4
 c02fa66:	f7ff fc8d 	bl	c02f384 <tfm_crypto_operation_alloc>
                                        &handle,
                                        (void **)&generator);
    if (status != PSA_SUCCESS) {
 c02fa6a:	4604      	mov	r4, r0
 c02fa6c:	b988      	cbnz	r0, c02fa92 <tfm_crypto_key_derivation+0x80>
        return status;
    }

    *handle_out = handle;
 c02fa6e:	9a06      	ldr	r2, [sp, #24]

    status = psa_key_derivation(generator, key_handle, alg, salt, salt_length,
 c02fa70:	9b05      	ldr	r3, [sp, #20]
    *handle_out = handle;
 c02fa72:	6032      	str	r2, [r6, #0]
    status = psa_key_derivation(generator, key_handle, alg, salt, salt_length,
 c02fa74:	4639      	mov	r1, r7
 c02fa76:	e9cd 5302 	strd	r5, r3, [sp, #8]
 c02fa7a:	e9cd ba00 	strd	fp, sl, [sp]
 c02fa7e:	4643      	mov	r3, r8
 c02fa80:	464a      	mov	r2, r9
 c02fa82:	9807      	ldr	r0, [sp, #28]
 c02fa84:	f7fd fa73 	bl	c02cf6e <mbedcrypto__psa_key_derivation>
                                label, label_length, capacity);
    if (status != PSA_SUCCESS) {
 c02fa88:	4604      	mov	r4, r0
 c02fa8a:	b110      	cbz	r0, c02fa92 <tfm_crypto_key_derivation+0x80>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02fa8c:	4630      	mov	r0, r6
 c02fa8e:	f7ff fcab 	bl	c02f3e8 <tfm_crypto_operation_release>
    }

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02fa92:	4620      	mov	r0, r4
 c02fa94:	b009      	add	sp, #36	; 0x24
 c02fa96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t salt_length = 0;
 c02fa9a:	46ab      	mov	fp, r5
    const uint8_t *salt = NULL;
 c02fa9c:	46a8      	mov	r8, r5
    const uint8_t *label = NULL;
 c02fa9e:	46aa      	mov	sl, r5
 c02faa0:	e7d8      	b.n	c02fa54 <tfm_crypto_key_derivation+0x42>
 c02faa2:	46aa      	mov	sl, r5
 c02faa4:	e7d6      	b.n	c02fa54 <tfm_crypto_key_derivation+0x42>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02faa6:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02faaa:	e7f2      	b.n	c02fa92 <tfm_crypto_key_derivation+0x80>

0c02faac <tfm_crypto_key_agreement>:
{
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    if ((in_len != 2) || (out_len != 1)) {
 c02faac:	2902      	cmp	r1, #2
{
 c02faae:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if ((in_len != 2) || (out_len != 1)) {
 c02fab2:	d131      	bne.n	c02fb18 <tfm_crypto_key_agreement+0x6c>
 c02fab4:	2b01      	cmp	r3, #1
 c02fab6:	d12f      	bne.n	c02fb18 <tfm_crypto_key_agreement+0x6c>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02fab8:	6843      	ldr	r3, [r0, #4]
 c02faba:	2b34      	cmp	r3, #52	; 0x34
 c02fabc:	d12c      	bne.n	c02fb18 <tfm_crypto_key_agreement+0x6c>
 c02fabe:	6857      	ldr	r7, [r2, #4]
 c02fac0:	2f04      	cmp	r7, #4
 c02fac2:	d129      	bne.n	c02fb18 <tfm_crypto_key_agreement+0x6c>
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    psa_key_handle_t private_key = iov->key_handle;
    psa_algorithm_t alg = iov->alg;
    const uint8_t *peer_key = in_vec[1].base;
    size_t peer_key_length = in_vec[1].len;
 c02fac4:	e9d0 8a02 	ldrd	r8, sl, [r0, #8]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02fac8:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02faca:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02facc:	6999      	ldr	r1, [r3, #24]
    psa_key_handle_t private_key = iov->key_handle;
 c02face:	889e      	ldrh	r6, [r3, #4]
    uint32_t handle = iov->op_handle;
 c02fad0:	9102      	str	r1, [sp, #8]
    psa_crypto_generator_t *generator = NULL;
 c02fad2:	2100      	movs	r1, #0

    status = tfm_crypto_check_handle_owner(private_key, NULL);
 c02fad4:	4630      	mov	r0, r6
    psa_algorithm_t alg = iov->alg;
 c02fad6:	f8d3 9010 	ldr.w	r9, [r3, #16]
    psa_crypto_generator_t *generator = NULL;
 c02fada:	9103      	str	r1, [sp, #12]
    status = tfm_crypto_check_handle_owner(private_key, NULL);
 c02fadc:	f000 fa6c 	bl	c02ffb8 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02fae0:	4604      	mov	r4, r0
 c02fae2:	b9a8      	cbnz	r0, c02fb10 <tfm_crypto_key_agreement+0x64>
        return status;
    }

    /* Allocate the generator context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_GENERATOR_OPERATION,
 c02fae4:	aa03      	add	r2, sp, #12
 c02fae6:	a902      	add	r1, sp, #8
 c02fae8:	4638      	mov	r0, r7
 c02faea:	f7ff fc4b 	bl	c02f384 <tfm_crypto_operation_alloc>
                                        &handle,
                                        (void **)&generator);
    if (status != PSA_SUCCESS) {
 c02faee:	4604      	mov	r4, r0
 c02faf0:	b970      	cbnz	r0, c02fb10 <tfm_crypto_key_agreement+0x64>
        return status;
    }

    *handle_out = handle;
 c02faf2:	9b02      	ldr	r3, [sp, #8]

    status = psa_key_agreement(generator, private_key,
 c02faf4:	4642      	mov	r2, r8
    *handle_out = handle;
 c02faf6:	602b      	str	r3, [r5, #0]
    status = psa_key_agreement(generator, private_key,
 c02faf8:	4631      	mov	r1, r6
 c02fafa:	f8cd 9000 	str.w	r9, [sp]
 c02fafe:	4653      	mov	r3, sl
 c02fb00:	9803      	ldr	r0, [sp, #12]
 c02fb02:	f7fd fa6d 	bl	c02cfe0 <mbedcrypto__psa_key_agreement>
                               peer_key, peer_key_length, alg);
    if (status != PSA_SUCCESS) {
 c02fb06:	4604      	mov	r4, r0
 c02fb08:	b110      	cbz	r0, c02fb10 <tfm_crypto_key_agreement+0x64>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02fb0a:	4628      	mov	r0, r5
 c02fb0c:	f7ff fc6c 	bl	c02f3e8 <tfm_crypto_operation_release>
    }

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02fb10:	4620      	mov	r0, r4
 c02fb12:	b004      	add	sp, #16
 c02fb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02fb18:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02fb1c:	e7f8      	b.n	c02fb10 <tfm_crypto_key_agreement+0x64>

0c02fb1e <tfm_crypto_generate_random>:
                                        size_t out_len)
{
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 1) || (out_len != 1)) {
 c02fb1e:	2901      	cmp	r1, #1
 c02fb20:	d108      	bne.n	c02fb34 <tfm_crypto_generate_random+0x16>
 c02fb22:	2b01      	cmp	r3, #1
 c02fb24:	d106      	bne.n	c02fb34 <tfm_crypto_generate_random+0x16>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) {
 c02fb26:	6843      	ldr	r3, [r0, #4]
 c02fb28:	2b34      	cmp	r3, #52	; 0x34
 c02fb2a:	d103      	bne.n	c02fb34 <tfm_crypto_generate_random+0x16>
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    uint8_t *output = out_vec[0].base;
    size_t output_size = out_vec[0].len;

    return psa_generate_random(output, output_size);
 c02fb2c:	e9d2 0100 	ldrd	r0, r1, [r2]
 c02fb30:	f7fd ba7e 	b.w	c02d030 <mbedcrypto__psa_generate_random>
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02fb34:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02fb38:	4770      	bx	lr

0c02fb3a <tfm_crypto_generate_key>:

psa_status_t tfm_crypto_generate_key(psa_invec in_vec[],
                                     size_t in_len,
                                     psa_outvec out_vec[],
                                     size_t out_len)
{
 c02fb3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c02fb3e:	461d      	mov	r5, r3
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if (!((in_len == 2) || (in_len == 3)) || (out_len != 0)) {
 c02fb40:	1e8b      	subs	r3, r1, #2
 c02fb42:	2b01      	cmp	r3, #1
{
 c02fb44:	4604      	mov	r4, r0
 c02fb46:	460f      	mov	r7, r1
    if (!((in_len == 2) || (in_len == 3)) || (out_len != 0)) {
 c02fb48:	d820      	bhi.n	c02fb8c <tfm_crypto_generate_key+0x52>
 c02fb4a:	b9fd      	cbnz	r5, c02fb8c <tfm_crypto_generate_key+0x52>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02fb4c:	6843      	ldr	r3, [r0, #4]
 c02fb4e:	2b34      	cmp	r3, #52	; 0x34
 c02fb50:	d11c      	bne.n	c02fb8c <tfm_crypto_generate_key+0x52>
 c02fb52:	68c3      	ldr	r3, [r0, #12]
 c02fb54:	2b04      	cmp	r3, #4
 c02fb56:	d119      	bne.n	c02fb8c <tfm_crypto_generate_key+0x52>
        (in_vec[1].len != sizeof(size_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02fb58:	6803      	ldr	r3, [r0, #0]
    size_t bits = *((size_t *)(in_vec[1].base));
    const void *extra = NULL;
    size_t extra_size = 0;
    psa_status_t status;

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02fb5a:	4629      	mov	r1, r5
    psa_key_handle_t key_handle = iov->key_handle;
 c02fb5c:	889e      	ldrh	r6, [r3, #4]
    psa_key_type_t type = iov->type;
 c02fb5e:	f8d3 8008 	ldr.w	r8, [r3, #8]
    size_t bits = *((size_t *)(in_vec[1].base));
 c02fb62:	6883      	ldr	r3, [r0, #8]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02fb64:	4630      	mov	r0, r6
    size_t bits = *((size_t *)(in_vec[1].base));
 c02fb66:	f8d3 9000 	ldr.w	r9, [r3]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02fb6a:	f000 fa25 	bl	c02ffb8 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02fb6e:	b950      	cbnz	r0, c02fb86 <tfm_crypto_generate_key+0x4c>
        return status;
    }

    if (in_len == 3) {
 c02fb70:	2f03      	cmp	r7, #3
        extra = in_vec[2].base;
        extra_size = in_vec[2].len;
 c02fb72:	bf0c      	ite	eq
 c02fb74:	e9d4 3504 	ldrdeq	r3, r5, [r4, #16]
    const void *extra = NULL;
 c02fb78:	462b      	movne	r3, r5
    }

    return psa_generate_key(key_handle, type, bits, extra, extra_size);
 c02fb7a:	9500      	str	r5, [sp, #0]
 c02fb7c:	464a      	mov	r2, r9
 c02fb7e:	4641      	mov	r1, r8
 c02fb80:	4630      	mov	r0, r6
 c02fb82:	f7fd fa6b 	bl	c02d05c <mbedcrypto__psa_generate_key>
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02fb86:	b003      	add	sp, #12
 c02fb88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02fb8c:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02fb90:	e7f9      	b.n	c02fb86 <tfm_crypto_generate_key+0x4c>

0c02fb92 <tfm_crypto_hash_setup>:
/*!@{*/
psa_status_t tfm_crypto_hash_setup(psa_invec in_vec[],
                                   size_t in_len,
                                   psa_outvec out_vec[],
                                   size_t out_len)
{
 c02fb92:	b573      	push	{r0, r1, r4, r5, r6, lr}
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_hash_operation_t *operation = NULL;
 c02fb94:	2400      	movs	r4, #0

    if ((in_len != 1) || (out_len != 1)) {
 c02fb96:	2901      	cmp	r1, #1
    psa_hash_operation_t *operation = NULL;
 c02fb98:	9400      	str	r4, [sp, #0]
    if ((in_len != 1) || (out_len != 1)) {
 c02fb9a:	d122      	bne.n	c02fbe2 <tfm_crypto_hash_setup+0x50>
 c02fb9c:	2b01      	cmp	r3, #1
 c02fb9e:	d120      	bne.n	c02fbe2 <tfm_crypto_hash_setup+0x50>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((out_vec[0].len != sizeof(uint32_t)) ||
 c02fba0:	6853      	ldr	r3, [r2, #4]
 c02fba2:	2b04      	cmp	r3, #4
 c02fba4:	d11d      	bne.n	c02fbe2 <tfm_crypto_hash_setup+0x50>
 c02fba6:	6843      	ldr	r3, [r0, #4]
 c02fba8:	2b34      	cmp	r3, #52	; 0x34
 c02fbaa:	d11a      	bne.n	c02fbe2 <tfm_crypto_hash_setup+0x50>
        (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02fbac:	6801      	ldr	r1, [r0, #0]
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
 c02fbae:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02fbb0:	698b      	ldr	r3, [r1, #24]
    psa_algorithm_t alg = iov->alg;
 c02fbb2:	690e      	ldr	r6, [r1, #16]
    uint32_t handle = iov->op_handle;
 c02fbb4:	9301      	str	r3, [sp, #4]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Allocate the operation context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_HASH_OPERATION,
 c02fbb6:	466a      	mov	r2, sp
    *handle_out = iov->op_handle;
 c02fbb8:	602b      	str	r3, [r5, #0]
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_HASH_OPERATION,
 c02fbba:	a901      	add	r1, sp, #4
 c02fbbc:	2003      	movs	r0, #3
 c02fbbe:	f7ff fbe1 	bl	c02f384 <tfm_crypto_operation_alloc>
                                        &handle,
                                        (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02fbc2:	4604      	mov	r4, r0
 c02fbc4:	b950      	cbnz	r0, c02fbdc <tfm_crypto_hash_setup+0x4a>
        return status;
    }

    *handle_out = handle;
 c02fbc6:	9b01      	ldr	r3, [sp, #4]

    status = psa_hash_setup(operation, alg);
 c02fbc8:	4631      	mov	r1, r6
    *handle_out = handle;
 c02fbca:	602b      	str	r3, [r5, #0]
    status = psa_hash_setup(operation, alg);
 c02fbcc:	9800      	ldr	r0, [sp, #0]
 c02fbce:	f7fb fc58 	bl	c02b482 <mbedcrypto__psa_hash_setup>
    if (status != PSA_SUCCESS) {
 c02fbd2:	4604      	mov	r4, r0
 c02fbd4:	b110      	cbz	r0, c02fbdc <tfm_crypto_hash_setup+0x4a>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02fbd6:	4628      	mov	r0, r5
 c02fbd8:	f7ff fc06 	bl	c02f3e8 <tfm_crypto_operation_release>
        return status;
    }

    return PSA_SUCCESS;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c02fbdc:	4620      	mov	r0, r4
 c02fbde:	b002      	add	sp, #8
 c02fbe0:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02fbe2:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02fbe6:	e7f9      	b.n	c02fbdc <tfm_crypto_hash_setup+0x4a>

0c02fbe8 <tfm_crypto_hash_update>:

psa_status_t tfm_crypto_hash_update(psa_invec in_vec[],
                                    size_t in_len,
                                    psa_outvec out_vec[],
                                    size_t out_len)
{
 c02fbe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_hash_operation_t *operation = NULL;
 c02fbea:	2400      	movs	r4, #0

    if ((in_len != 2) || (out_len != 1)) {
 c02fbec:	2902      	cmp	r1, #2
    psa_hash_operation_t *operation = NULL;
 c02fbee:	9401      	str	r4, [sp, #4]
    if ((in_len != 2) || (out_len != 1)) {
 c02fbf0:	d120      	bne.n	c02fc34 <tfm_crypto_hash_update+0x4c>
 c02fbf2:	2b01      	cmp	r3, #1
 c02fbf4:	d11e      	bne.n	c02fc34 <tfm_crypto_hash_update+0x4c>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02fbf6:	6843      	ldr	r3, [r0, #4]
 c02fbf8:	2b34      	cmp	r3, #52	; 0x34
 c02fbfa:	d11b      	bne.n	c02fc34 <tfm_crypto_hash_update+0x4c>
 c02fbfc:	6853      	ldr	r3, [r2, #4]
 c02fbfe:	2b04      	cmp	r3, #4
 c02fc00:	d118      	bne.n	c02fc34 <tfm_crypto_hash_update+0x4c>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    const uint8_t *input = in_vec[1].base;
    size_t input_length = in_vec[1].len;
 c02fc02:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
    uint32_t handle = iov->op_handle;
 c02fc06:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02fc08:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02fc0a:	6999      	ldr	r1, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02fc0c:	aa01      	add	r2, sp, #4
    *handle_out = iov->op_handle;
 c02fc0e:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02fc10:	2003      	movs	r0, #3
 c02fc12:	f7ff fc23 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02fc16:	4604      	mov	r4, r0
 c02fc18:	b948      	cbnz	r0, c02fc2e <tfm_crypto_hash_update+0x46>
        return status;
    }

    status = psa_hash_update(operation, input, input_length);
 c02fc1a:	463a      	mov	r2, r7
 c02fc1c:	4631      	mov	r1, r6
 c02fc1e:	9801      	ldr	r0, [sp, #4]
 c02fc20:	f7fb fc83 	bl	c02b52a <mbedcrypto__psa_hash_update>
    if (status != PSA_SUCCESS) {
 c02fc24:	4604      	mov	r4, r0
 c02fc26:	b110      	cbz	r0, c02fc2e <tfm_crypto_hash_update+0x46>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02fc28:	4628      	mov	r0, r5
 c02fc2a:	f7ff fbdd 	bl	c02f3e8 <tfm_crypto_operation_release>
        return status;
    }

    return PSA_SUCCESS;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c02fc2e:	4620      	mov	r0, r4
 c02fc30:	b003      	add	sp, #12
 c02fc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02fc34:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02fc38:	e7f9      	b.n	c02fc2e <tfm_crypto_hash_update+0x46>

0c02fc3a <tfm_crypto_hash_finish>:

psa_status_t tfm_crypto_hash_finish(psa_invec in_vec[],
                                    size_t in_len,
                                    psa_outvec out_vec[],
                                    size_t out_len)
{
 c02fc3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 c02fc3e:	4615      	mov	r5, r2
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_hash_operation_t *operation = NULL;
 c02fc40:	2200      	movs	r2, #0

    if ((in_len != 1) || (out_len != 2)) {
 c02fc42:	2901      	cmp	r1, #1
    psa_hash_operation_t *operation = NULL;
 c02fc44:	9201      	str	r2, [sp, #4]
    if ((in_len != 1) || (out_len != 2)) {
 c02fc46:	d128      	bne.n	c02fc9a <tfm_crypto_hash_finish+0x60>
 c02fc48:	2b02      	cmp	r3, #2
 c02fc4a:	d126      	bne.n	c02fc9a <tfm_crypto_hash_finish+0x60>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02fc4c:	6843      	ldr	r3, [r0, #4]
 c02fc4e:	2b34      	cmp	r3, #52	; 0x34
 c02fc50:	d123      	bne.n	c02fc9a <tfm_crypto_hash_finish+0x60>
 c02fc52:	686b      	ldr	r3, [r5, #4]
 c02fc54:	2b04      	cmp	r3, #4
 c02fc56:	d120      	bne.n	c02fc9a <tfm_crypto_hash_finish+0x60>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    uint8_t *hash = out_vec[1].base;
    size_t hash_size = out_vec[1].len;
 c02fc58:	e9d5 7802 	ldrd	r7, r8, [r5, #8]
    uint32_t handle = iov->op_handle;
 c02fc5c:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02fc5e:	682e      	ldr	r6, [r5, #0]
    uint32_t handle = iov->op_handle;
 c02fc60:	6999      	ldr	r1, [r3, #24]

    /* Initialise hash_length to zero */
    out_vec[1].len = 0;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02fc62:	2003      	movs	r0, #3
    *handle_out = iov->op_handle;
 c02fc64:	6031      	str	r1, [r6, #0]
    out_vec[1].len = 0;
 c02fc66:	60ea      	str	r2, [r5, #12]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02fc68:	aa01      	add	r2, sp, #4
 c02fc6a:	f7ff fbf7 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02fc6e:	4604      	mov	r4, r0
 c02fc70:	b958      	cbnz	r0, c02fc8a <tfm_crypto_hash_finish+0x50>
        return status;
    }

    status = psa_hash_finish(operation, hash, hash_size, &out_vec[1].len);
 c02fc72:	f105 030c 	add.w	r3, r5, #12
 c02fc76:	4642      	mov	r2, r8
 c02fc78:	4639      	mov	r1, r7
 c02fc7a:	9801      	ldr	r0, [sp, #4]
 c02fc7c:	f7fb fc5a 	bl	c02b534 <mbedcrypto__psa_hash_finish>
    if (status != PSA_SUCCESS) {
 c02fc80:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02fc82:	4630      	mov	r0, r6
    if (status != PSA_SUCCESS) {
 c02fc84:	b12c      	cbz	r4, c02fc92 <tfm_crypto_hash_finish+0x58>
        (void)tfm_crypto_operation_release(handle_out);
 c02fc86:	f7ff fbaf 	bl	c02f3e8 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c02fc8a:	4620      	mov	r0, r4
 c02fc8c:	b002      	add	sp, #8
 c02fc8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = tfm_crypto_operation_release(handle_out);
 c02fc92:	f7ff fba9 	bl	c02f3e8 <tfm_crypto_operation_release>
 c02fc96:	4604      	mov	r4, r0
    return status;
 c02fc98:	e7f7      	b.n	c02fc8a <tfm_crypto_hash_finish+0x50>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02fc9a:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02fc9e:	e7f4      	b.n	c02fc8a <tfm_crypto_hash_finish+0x50>

0c02fca0 <tfm_crypto_hash_verify>:

psa_status_t tfm_crypto_hash_verify(psa_invec in_vec[],
                                    size_t in_len,
                                    psa_outvec out_vec[],
                                    size_t out_len)
{
 c02fca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_hash_operation_t *operation = NULL;
 c02fca2:	2400      	movs	r4, #0

    if ((in_len != 2) || (out_len != 1)) {
 c02fca4:	2902      	cmp	r1, #2
    psa_hash_operation_t *operation = NULL;
 c02fca6:	9401      	str	r4, [sp, #4]
    if ((in_len != 2) || (out_len != 1)) {
 c02fca8:	d124      	bne.n	c02fcf4 <tfm_crypto_hash_verify+0x54>
 c02fcaa:	2b01      	cmp	r3, #1
 c02fcac:	d122      	bne.n	c02fcf4 <tfm_crypto_hash_verify+0x54>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02fcae:	6843      	ldr	r3, [r0, #4]
 c02fcb0:	2b34      	cmp	r3, #52	; 0x34
 c02fcb2:	d11f      	bne.n	c02fcf4 <tfm_crypto_hash_verify+0x54>
 c02fcb4:	6853      	ldr	r3, [r2, #4]
 c02fcb6:	2b04      	cmp	r3, #4
 c02fcb8:	d11c      	bne.n	c02fcf4 <tfm_crypto_hash_verify+0x54>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    const uint8_t *hash = in_vec[1].base;
    size_t hash_length = in_vec[1].len;
 c02fcba:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
    uint32_t handle = iov->op_handle;
 c02fcbe:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02fcc0:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02fcc2:	6999      	ldr	r1, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02fcc4:	aa01      	add	r2, sp, #4
    *handle_out = iov->op_handle;
 c02fcc6:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02fcc8:	2003      	movs	r0, #3
 c02fcca:	f7ff fbc7 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02fcce:	4604      	mov	r4, r0
 c02fcd0:	b948      	cbnz	r0, c02fce6 <tfm_crypto_hash_verify+0x46>
        return status;
    }

    status = psa_hash_verify(operation, hash, hash_length);
 c02fcd2:	463a      	mov	r2, r7
 c02fcd4:	4631      	mov	r1, r6
 c02fcd6:	9801      	ldr	r0, [sp, #4]
 c02fcd8:	f7fc f830 	bl	c02bd3c <mbedcrypto__psa_hash_verify>
    if (status != PSA_SUCCESS) {
 c02fcdc:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02fcde:	4628      	mov	r0, r5
    if (status != PSA_SUCCESS) {
 c02fce0:	b124      	cbz	r4, c02fcec <tfm_crypto_hash_verify+0x4c>
        (void)tfm_crypto_operation_release(handle_out);
 c02fce2:	f7ff fb81 	bl	c02f3e8 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c02fce6:	4620      	mov	r0, r4
 c02fce8:	b003      	add	sp, #12
 c02fcea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = tfm_crypto_operation_release(handle_out);
 c02fcec:	f7ff fb7c 	bl	c02f3e8 <tfm_crypto_operation_release>
 c02fcf0:	4604      	mov	r4, r0
    return status;
 c02fcf2:	e7f8      	b.n	c02fce6 <tfm_crypto_hash_verify+0x46>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02fcf4:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02fcf8:	e7f5      	b.n	c02fce6 <tfm_crypto_hash_verify+0x46>

0c02fcfa <tfm_crypto_hash_abort>:

psa_status_t tfm_crypto_hash_abort(psa_invec in_vec[],
                                   size_t in_len,
                                   psa_outvec out_vec[],
                                   size_t out_len)
{
 c02fcfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_hash_operation_t *operation = NULL;
 c02fcfc:	2400      	movs	r4, #0

    if ((in_len != 1) || (out_len != 1)) {
 c02fcfe:	2901      	cmp	r1, #1
    psa_hash_operation_t *operation = NULL;
 c02fd00:	9401      	str	r4, [sp, #4]
    if ((in_len != 1) || (out_len != 1)) {
 c02fd02:	d11f      	bne.n	c02fd44 <tfm_crypto_hash_abort+0x4a>
 c02fd04:	2b01      	cmp	r3, #1
 c02fd06:	d11d      	bne.n	c02fd44 <tfm_crypto_hash_abort+0x4a>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02fd08:	6843      	ldr	r3, [r0, #4]
 c02fd0a:	2b34      	cmp	r3, #52	; 0x34
 c02fd0c:	d11a      	bne.n	c02fd44 <tfm_crypto_hash_abort+0x4a>
 c02fd0e:	6853      	ldr	r3, [r2, #4]
 c02fd10:	2b04      	cmp	r3, #4
 c02fd12:	d117      	bne.n	c02fd44 <tfm_crypto_hash_abort+0x4a>
        (out_vec[0].len != sizeof(uint32_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
 c02fd14:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02fd16:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02fd18:	6999      	ldr	r1, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02fd1a:	aa01      	add	r2, sp, #4
    *handle_out = iov->op_handle;
 c02fd1c:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02fd1e:	2003      	movs	r0, #3
 c02fd20:	f7ff fb9c 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02fd24:	b938      	cbnz	r0, c02fd36 <tfm_crypto_hash_abort+0x3c>
        /* Operation does not exist, so abort has no effect */
        return PSA_SUCCESS;
    }

    status = psa_hash_abort(operation);
 c02fd26:	9801      	ldr	r0, [sp, #4]
 c02fd28:	f7fb fb50 	bl	c02b3cc <mbedcrypto__psa_hash_abort>
    if (status != PSA_SUCCESS) {
 c02fd2c:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02fd2e:	4628      	mov	r0, r5
    if (status != PSA_SUCCESS) {
 c02fd30:	b124      	cbz	r4, c02fd3c <tfm_crypto_hash_abort+0x42>
        (void)tfm_crypto_operation_release(handle_out);
 c02fd32:	f7ff fb59 	bl	c02f3e8 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c02fd36:	4620      	mov	r0, r4
 c02fd38:	b003      	add	sp, #12
 c02fd3a:	bd30      	pop	{r4, r5, pc}
    status = tfm_crypto_operation_release(handle_out);
 c02fd3c:	f7ff fb54 	bl	c02f3e8 <tfm_crypto_operation_release>
 c02fd40:	4604      	mov	r4, r0
    return status;
 c02fd42:	e7f8      	b.n	c02fd36 <tfm_crypto_hash_abort+0x3c>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02fd44:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02fd48:	e7f5      	b.n	c02fd36 <tfm_crypto_hash_abort+0x3c>

0c02fd4a <tfm_crypto_hash_clone>:

psa_status_t tfm_crypto_hash_clone(psa_invec in_vec[],
                                   size_t in_len,
                                   psa_outvec out_vec[],
                                   size_t out_len)
{
 c02fd4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_hash_operation_t *source_operation = NULL;
 c02fd4c:	2400      	movs	r4, #0
    psa_hash_operation_t *target_operation = NULL;

    if ((in_len != 1) || (out_len != 1)) {
 c02fd4e:	2901      	cmp	r1, #1
    psa_hash_operation_t *target_operation = NULL;
 c02fd50:	e9cd 4400 	strd	r4, r4, [sp]
    if ((in_len != 1) || (out_len != 1)) {
 c02fd54:	d123      	bne.n	c02fd9e <tfm_crypto_hash_clone+0x54>
 c02fd56:	2b01      	cmp	r3, #1
 c02fd58:	d121      	bne.n	c02fd9e <tfm_crypto_hash_clone+0x54>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02fd5a:	6843      	ldr	r3, [r0, #4]
 c02fd5c:	2b34      	cmp	r3, #52	; 0x34
 c02fd5e:	d11e      	bne.n	c02fd9e <tfm_crypto_hash_clone+0x54>
 c02fd60:	6853      	ldr	r3, [r2, #4]
 c02fd62:	2b04      	cmp	r3, #4
 c02fd64:	d11b      	bne.n	c02fd9e <tfm_crypto_hash_clone+0x54>
        (out_vec[0].len != sizeof(uint32_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t source_handle = iov->op_handle;
 c02fd66:	6803      	ldr	r3, [r0, #0]
    uint32_t *target_handle = out_vec[0].base;
 c02fd68:	6815      	ldr	r5, [r2, #0]

    /* Look up the corresponding source operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02fd6a:	6999      	ldr	r1, [r3, #24]
 c02fd6c:	466a      	mov	r2, sp
 c02fd6e:	2003      	movs	r0, #3
 c02fd70:	f7ff fb74 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         source_handle,
                                         (void **)&source_operation);
    if (status != PSA_SUCCESS) {
 c02fd74:	4604      	mov	r4, r0
 c02fd76:	b978      	cbnz	r0, c02fd98 <tfm_crypto_hash_clone+0x4e>
        return status;
    }

    /* Allocate the target operation context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_HASH_OPERATION,
 c02fd78:	aa01      	add	r2, sp, #4
 c02fd7a:	4629      	mov	r1, r5
 c02fd7c:	2003      	movs	r0, #3
 c02fd7e:	f7ff fb01 	bl	c02f384 <tfm_crypto_operation_alloc>
                                        target_handle,
                                        (void **)&target_operation);
    if (status != PSA_SUCCESS) {
 c02fd82:	4604      	mov	r4, r0
 c02fd84:	b940      	cbnz	r0, c02fd98 <tfm_crypto_hash_clone+0x4e>
        return status;
    }

    status = psa_hash_clone(source_operation, target_operation);
 c02fd86:	e9dd 0100 	ldrd	r0, r1, [sp]
 c02fd8a:	f7fb fff9 	bl	c02bd80 <mbedcrypto__psa_hash_clone>
    if (status != PSA_SUCCESS) {
 c02fd8e:	4604      	mov	r4, r0
 c02fd90:	b110      	cbz	r0, c02fd98 <tfm_crypto_hash_clone+0x4e>
        /* Release the target operation context, ignore if it fails. */
        (void)tfm_crypto_operation_release(target_handle);
 c02fd92:	4628      	mov	r0, r5
 c02fd94:	f7ff fb28 	bl	c02f3e8 <tfm_crypto_operation_release>
        return status;
    }

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c02fd98:	4620      	mov	r0, r4
 c02fd9a:	b003      	add	sp, #12
 c02fd9c:	bd30      	pop	{r4, r5, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02fd9e:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02fda2:	e7f9      	b.n	c02fd98 <tfm_crypto_hash_clone+0x4e>

0c02fda4 <tfm_crypto_clear_scratch>:

    return PSA_SUCCESS;
}

static psa_status_t tfm_crypto_clear_scratch(void)
{
 c02fda4:	b510      	push	{r4, lr}
    scratch.alloc_index = 0;
 c02fda6:	2400      	movs	r4, #0
 c02fda8:	4806      	ldr	r0, [pc, #24]	; (c02fdc4 <tfm_crypto_clear_scratch+0x20>)
 c02fdaa:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 c02fdae:	f500 53a0 	add.w	r3, r0, #5120	; 0x1400
 c02fdb2:	601c      	str	r4, [r3, #0]
    scratch.owner = 0;
 c02fdb4:	f241 4304 	movw	r3, #5124	; 0x1404
 c02fdb8:	4621      	mov	r1, r4
 c02fdba:	50c4      	str	r4, [r0, r3]
 c02fdbc:	f7e7 fe03 	bl	c0179c6 <memset>
    (void)tfm_memset(scratch.buf, 0, sizeof(scratch.buf));

    return PSA_SUCCESS;
}
 c02fdc0:	4620      	mov	r0, r4
 c02fdc2:	bd10      	pop	{r4, pc}
 c02fdc4:	30039db0 	.word	0x30039db0

0c02fdc8 <tfm_crypto_get_caller_id>:
    *id = scratch.owner;
 c02fdc8:	f241 4304 	movw	r3, #5124	; 0x1404
 c02fdcc:	4a02      	ldr	r2, [pc, #8]	; (c02fdd8 <tfm_crypto_get_caller_id+0x10>)
 c02fdce:	58d3      	ldr	r3, [r2, r3]
 c02fdd0:	6003      	str	r3, [r0, #0]
        return PSA_ERROR_NOT_PERMITTED;
    } else {
        return PSA_SUCCESS;
    }
#endif
}
 c02fdd2:	2000      	movs	r0, #0
 c02fdd4:	4770      	bx	lr
 c02fdd6:	bf00      	nop
 c02fdd8:	30039db0 	.word	0x30039db0

0c02fddc <tfm_crypto_init>:

psa_status_t tfm_crypto_init(void)
{
 c02fddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02fde0:	b0ad      	sub	sp, #180	; 0xb4
    return tfm_crypto_init_alloc();
 c02fde2:	f7ff fac3 	bl	c02f36c <tfm_crypto_init_alloc>
    psa_status_t status;

    /* Initialise other modules of the service */
    status = tfm_crypto_module_init();
    if (status != PSA_SUCCESS) {
 c02fde6:	2800      	cmp	r0, #0
 c02fde8:	f040 80d9 	bne.w	c02ff9e <tfm_crypto_init+0x1c2>
    mbedtls_memory_buffer_alloc_init(mbedtls_mem_buf,
 c02fdec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c02fdf0:	486c      	ldr	r0, [pc, #432]	; (c02ffa4 <tfm_crypto_init+0x1c8>)
 c02fdf2:	f7f8 fb21 	bl	c028438 <mbedtls_memory_buffer_alloc_init>
    return psa_crypto_init();
 c02fdf6:	f7fd f9ff 	bl	c02d1f8 <mbedcrypto__psa_crypto_init>
        return status;
    }

    /* Initialise the engine layer */
    status = tfm_crypto_engine_init();
    if (status != PSA_SUCCESS) {
 c02fdfa:	2800      	cmp	r0, #0
 c02fdfc:	f040 80cf 	bne.w	c02ff9e <tfm_crypto_init+0x1c2>
    struct tfm_crypto_pack_iovec iov = {0};
 c02fe00:	f10d 0b7c 	add.w	fp, sp, #124	; 0x7c
 c02fe04:	4601      	mov	r1, r0
 c02fe06:	2234      	movs	r2, #52	; 0x34
 c02fe08:	4658      	mov	r0, fp
 c02fe0a:	f7e7 fddc 	bl	c0179c6 <memset>
    uint32_t sfn_id = TFM_CRYPTO_SID_INVALID;
 c02fe0e:	f04f 36ff 	mov.w	r6, #4294967295
        signals = psa_wait(PSA_WAIT_ANY, PSA_BLOCK);
 c02fe12:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 c02fe16:	f04f 30ff 	mov.w	r0, #4294967295
 c02fe1a:	f7ea fb2b 	bl	c01a474 <psa_wait>
        if (signals & TFM_CRYPTO_SIG) {
 c02fe1e:	06c5      	lsls	r5, r0, #27
 c02fe20:	f140 80bc 	bpl.w	c02ff9c <tfm_crypto_init+0x1c0>
            if (psa_get(TFM_CRYPTO_SIG, &msg) != PSA_SUCCESS) {
 c02fe24:	a913      	add	r1, sp, #76	; 0x4c
 c02fe26:	2010      	movs	r0, #16
 c02fe28:	f7ea fb26 	bl	c01a478 <psa_get>
 c02fe2c:	b100      	cbz	r0, c02fe30 <tfm_crypto_init+0x54>
 c02fe2e:	e7fe      	b.n	c02fe2e <tfm_crypto_init+0x52>
            switch (msg.type) {
 c02fe30:	9913      	ldr	r1, [sp, #76]	; 0x4c
 c02fe32:	1c8c      	adds	r4, r1, #2
 c02fe34:	db02      	blt.n	c02fe3c <tfm_crypto_init+0x60>
 c02fe36:	1c4a      	adds	r2, r1, #1
 c02fe38:	dd01      	ble.n	c02fe3e <tfm_crypto_init+0x62>
 c02fe3a:	b129      	cbz	r1, c02fe48 <tfm_crypto_init+0x6c>
 c02fe3c:	e7fe      	b.n	c02fe3c <tfm_crypto_init+0x60>
                psa_reply(msg.handle, PSA_SUCCESS);
 c02fe3e:	4601      	mov	r1, r0
                psa_reply(msg.handle, status);
 c02fe40:	9814      	ldr	r0, [sp, #80]	; 0x50
 c02fe42:	f7ea fb23 	bl	c01a48c <psa_reply>
 c02fe46:	e7e4      	b.n	c02fe12 <tfm_crypto_init+0x36>
    read_size = psa_read(msg->handle,
 c02fe48:	2334      	movs	r3, #52	; 0x34
 c02fe4a:	465a      	mov	r2, fp
 c02fe4c:	9814      	ldr	r0, [sp, #80]	; 0x50
 c02fe4e:	f7ea fb17 	bl	c01a480 <psa_read>
    if (read_size != sizeof(struct tfm_crypto_pack_iovec)) {
 c02fe52:	2834      	cmp	r0, #52	; 0x34
 c02fe54:	d105      	bne.n	c02fe62 <tfm_crypto_init+0x86>
    if (iov->sfn_id >= TFM_CRYPTO_SID_MAX) {
 c02fe56:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 c02fe58:	2e2a      	cmp	r6, #42	; 0x2a
 c02fe5a:	d904      	bls.n	c02fe66 <tfm_crypto_init+0x8a>
        *sfn_id_p = TFM_CRYPTO_SID_INVALID;
 c02fe5c:	f04f 36ff 	mov.w	r6, #4294967295
 c02fe60:	e01f      	b.n	c02fea2 <tfm_crypto_init+0xc6>
                if (sfn_id != TFM_CRYPTO_SID_INVALID) {
 c02fe62:	1c73      	adds	r3, r6, #1
 c02fe64:	d01d      	beq.n	c02fea2 <tfm_crypto_init+0xc6>
    size_t in_len = PSA_MAX_IOVEC, out_len = PSA_MAX_IOVEC, i;
 c02fe66:	2704      	movs	r7, #4
    psa_invec in_vec[PSA_MAX_IOVEC] = { {0} };
 c02fe68:	f10d 090c 	add.w	r9, sp, #12
 c02fe6c:	2220      	movs	r2, #32
 c02fe6e:	2100      	movs	r1, #0
 c02fe70:	4648      	mov	r0, r9
    psa_outvec out_vec[PSA_MAX_IOVEC] = { {0} };
 c02fe72:	ad0b      	add	r5, sp, #44	; 0x2c
    psa_invec in_vec[PSA_MAX_IOVEC] = { {0} };
 c02fe74:	f7e7 fda7 	bl	c0179c6 <memset>
    psa_outvec out_vec[PSA_MAX_IOVEC] = { {0} };
 c02fe78:	2220      	movs	r2, #32
 c02fe7a:	2100      	movs	r1, #0
 c02fe7c:	4628      	mov	r0, r5
 c02fe7e:	f7e7 fda2 	bl	c0179c6 <memset>
 c02fe82:	ab1b      	add	r3, sp, #108	; 0x6c
    while ((in_len > 0) && (msg->in_size[in_len - 1] == 0)) {
 c02fe84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 c02fe88:	1e79      	subs	r1, r7, #1
 c02fe8a:	b13a      	cbz	r2, c02fe9c <tfm_crypto_init+0xc0>
    in_vec[0].len = sizeof(struct tfm_crypto_pack_iovec);
 c02fe8c:	2334      	movs	r3, #52	; 0x34
    in_vec[0].base = iov;
 c02fe8e:	f8cd b00c 	str.w	fp, [sp, #12]
    in_vec[0].len = sizeof(struct tfm_crypto_pack_iovec);
 c02fe92:	9304      	str	r3, [sp, #16]
 c02fe94:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    for (i = 1; i < in_len; i++) {
 c02fe98:	2401      	movs	r4, #1
 c02fe9a:	e027      	b.n	c02feec <tfm_crypto_init+0x110>
    while ((in_len > 0) && (msg->in_size[in_len - 1] == 0)) {
 c02fe9c:	460f      	mov	r7, r1
 c02fe9e:	2900      	cmp	r1, #0
 c02fea0:	d1f0      	bne.n	c02fe84 <tfm_crypto_init+0xa8>
                    status = PSA_ERROR_GENERIC_ERROR;
 c02fea2:	f06f 0883 	mvn.w	r8, #131	; 0x83
 c02fea6:	e06c      	b.n	c02ff82 <tfm_crypto_init+0x1a6>
    if (requested_size > (sizeof(scratch.buf) - scratch.alloc_index)) {
 c02fea8:	493f      	ldr	r1, [pc, #252]	; (c02ffa8 <tfm_crypto_init+0x1cc>)
        status = tfm_crypto_alloc_scratch(msg->in_size[i], &alloc_buf_ptr);
 c02feaa:	f8d8 3000 	ldr.w	r3, [r8]
    if (requested_size > (sizeof(scratch.buf) - scratch.alloc_index)) {
 c02feae:	6809      	ldr	r1, [r1, #0]
    requested_size = ALIGN(requested_size, TFM_CRYPTO_IOVEC_ALIGNMENT);
 c02feb0:	1cda      	adds	r2, r3, #3
 c02feb2:	f022 0203 	bic.w	r2, r2, #3
    if (requested_size > (sizeof(scratch.buf) - scratch.alloc_index)) {
 c02feb6:	f5c1 50a0 	rsb	r0, r1, #5120	; 0x1400
 c02feba:	4282      	cmp	r2, r0
 c02febc:	46c2      	mov	sl, r8
 c02febe:	d85c      	bhi.n	c02ff7a <tfm_crypto_init+0x19e>
    *buf = (void *)&scratch.buf[scratch.alloc_index];
 c02fec0:	483a      	ldr	r0, [pc, #232]	; (c02ffac <tfm_crypto_init+0x1d0>)
    scratch.alloc_index += requested_size;
 c02fec2:	440a      	add	r2, r1
    *buf = (void *)&scratch.buf[scratch.alloc_index];
 c02fec4:	1808      	adds	r0, r1, r0
    scratch.alloc_index += requested_size;
 c02fec6:	4938      	ldr	r1, [pc, #224]	; (c02ffa8 <tfm_crypto_init+0x1cc>)
    *buf = (void *)&scratch.buf[scratch.alloc_index];
 c02fec8:	9001      	str	r0, [sp, #4]
    scratch.alloc_index += requested_size;
 c02feca:	600a      	str	r2, [r1, #0]
        (void) psa_read(msg->handle, i, alloc_buf_ptr, msg->in_size[i]);
 c02fecc:	4602      	mov	r2, r0
 c02fece:	4621      	mov	r1, r4
 c02fed0:	9814      	ldr	r0, [sp, #80]	; 0x50
 c02fed2:	f7ea fad5 	bl	c01a480 <psa_read>
        in_vec[i].base = alloc_buf_ptr;
 c02fed6:	9b01      	ldr	r3, [sp, #4]
        in_vec[i].len = msg->in_size[i];
 c02fed8:	f8da 2000 	ldr.w	r2, [sl]
        in_vec[i].base = alloc_buf_ptr;
 c02fedc:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
        in_vec[i].len = msg->in_size[i];
 c02fee0:	eb09 03c4 	add.w	r3, r9, r4, lsl #3
 c02fee4:	f108 0804 	add.w	r8, r8, #4
 c02fee8:	605a      	str	r2, [r3, #4]
    for (i = 1; i < in_len; i++) {
 c02feea:	3401      	adds	r4, #1
 c02feec:	42bc      	cmp	r4, r7
 c02feee:	d3db      	bcc.n	c02fea8 <tfm_crypto_init+0xcc>
 c02fef0:	465b      	mov	r3, fp
    size_t in_len = PSA_MAX_IOVEC, out_len = PSA_MAX_IOVEC, i;
 c02fef2:	2104      	movs	r1, #4
    while ((out_len > 0) && (msg->out_size[out_len - 1] == 0)) {
 c02fef4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 c02fef8:	1e4a      	subs	r2, r1, #1
 c02fefa:	b324      	cbz	r4, c02ff46 <tfm_crypto_init+0x16a>
 c02fefc:	f04f 0c00 	mov.w	ip, #0
 c02ff00:	4663      	mov	r3, ip
 c02ff02:	4c29      	ldr	r4, [pc, #164]	; (c02ffa8 <tfm_crypto_init+0x1cc>)
 c02ff04:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 c02ff08:	6822      	ldr	r2, [r4, #0]
        status = tfm_crypto_alloc_scratch(msg->out_size[i], &alloc_buf_ptr);
 c02ff0a:	f85e af04 	ldr.w	sl, [lr, #4]!
    if (requested_size > (sizeof(scratch.buf) - scratch.alloc_index)) {
 c02ff0e:	f5c2 58a0 	rsb	r8, r2, #5120	; 0x1400
    requested_size = ALIGN(requested_size, TFM_CRYPTO_IOVEC_ALIGNMENT);
 c02ff12:	f10a 0003 	add.w	r0, sl, #3
 c02ff16:	f020 0003 	bic.w	r0, r0, #3
    if (requested_size > (sizeof(scratch.buf) - scratch.alloc_index)) {
 c02ff1a:	4540      	cmp	r0, r8
    requested_size = ALIGN(requested_size, TFM_CRYPTO_IOVEC_ALIGNMENT);
 c02ff1c:	9001      	str	r0, [sp, #4]
    if (requested_size > (sizeof(scratch.buf) - scratch.alloc_index)) {
 c02ff1e:	d828      	bhi.n	c02ff72 <tfm_crypto_init+0x196>
    *buf = (void *)&scratch.buf[scratch.alloc_index];
 c02ff20:	4822      	ldr	r0, [pc, #136]	; (c02ffac <tfm_crypto_init+0x1d0>)
 c02ff22:	eb02 0c00 	add.w	ip, r2, r0
    scratch.alloc_index += requested_size;
 c02ff26:	9801      	ldr	r0, [sp, #4]
        out_vec[i].base = alloc_buf_ptr;
 c02ff28:	f845 c033 	str.w	ip, [r5, r3, lsl #3]
    scratch.alloc_index += requested_size;
 c02ff2c:	4402      	add	r2, r0
        out_vec[i].len = msg->out_size[i];
 c02ff2e:	eb05 00c3 	add.w	r0, r5, r3, lsl #3
    for (i = 0; i < out_len; i++) {
 c02ff32:	3301      	adds	r3, #1
 c02ff34:	428b      	cmp	r3, r1
        out_vec[i].len = msg->out_size[i];
 c02ff36:	f8c0 a004 	str.w	sl, [r0, #4]
 c02ff3a:	f04f 0c01 	mov.w	ip, #1
    for (i = 0; i < out_len; i++) {
 c02ff3e:	d1e4      	bne.n	c02ff0a <tfm_crypto_init+0x12e>
 c02ff40:	6022      	str	r2, [r4, #0]
 c02ff42:	461c      	mov	r4, r3
 c02ff44:	e002      	b.n	c02ff4c <tfm_crypto_init+0x170>
    while ((out_len > 0) && (msg->out_size[out_len - 1] == 0)) {
 c02ff46:	4611      	mov	r1, r2
 c02ff48:	2a00      	cmp	r2, #0
 c02ff4a:	d1d3      	bne.n	c02fef4 <tfm_crypto_init+0x118>
    scratch.owner = id;
 c02ff4c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 c02ff4e:	4b18      	ldr	r3, [pc, #96]	; (c02ffb0 <tfm_crypto_init+0x1d4>)
    status = sfid_func_table[sfn_id](in_vec, in_len, out_vec, out_len);
 c02ff50:	4639      	mov	r1, r7
    scratch.owner = id;
 c02ff52:	601a      	str	r2, [r3, #0]
    status = sfid_func_table[sfn_id](in_vec, in_len, out_vec, out_len);
 c02ff54:	4b17      	ldr	r3, [pc, #92]	; (c02ffb4 <tfm_crypto_init+0x1d8>)
 c02ff56:	462a      	mov	r2, r5
 c02ff58:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 c02ff5c:	4648      	mov	r0, r9
 c02ff5e:	4623      	mov	r3, r4
 c02ff60:	47c0      	blx	r8
    for (i = 0; i < out_len; i++) {
 c02ff62:	2700      	movs	r7, #0
    status = sfid_func_table[sfn_id](in_vec, in_len, out_vec, out_len);
 c02ff64:	4680      	mov	r8, r0
    for (i = 0; i < out_len; i++) {
 c02ff66:	42a7      	cmp	r7, r4
 c02ff68:	d10d      	bne.n	c02ff86 <tfm_crypto_init+0x1aa>
    if (tfm_crypto_clear_scratch() != PSA_SUCCESS) {
 c02ff6a:	f7ff ff1b 	bl	c02fda4 <tfm_crypto_clear_scratch>
 c02ff6e:	b140      	cbz	r0, c02ff82 <tfm_crypto_init+0x1a6>
 c02ff70:	e797      	b.n	c02fea2 <tfm_crypto_init+0xc6>
 c02ff72:	f1bc 0f00 	cmp.w	ip, #0
 c02ff76:	d000      	beq.n	c02ff7a <tfm_crypto_init+0x19e>
 c02ff78:	6022      	str	r2, [r4, #0]
            (void)tfm_crypto_clear_scratch();
 c02ff7a:	f7ff ff13 	bl	c02fda4 <tfm_crypto_clear_scratch>
        return PSA_ERROR_INSUFFICIENT_MEMORY;
 c02ff7e:	f06f 088c 	mvn.w	r8, #140	; 0x8c
                psa_reply(msg.handle, status);
 c02ff82:	4641      	mov	r1, r8
 c02ff84:	e75c      	b.n	c02fe40 <tfm_crypto_init+0x64>
        psa_write(msg->handle, i, out_vec[i].base, out_vec[i].len);
 c02ff86:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
 c02ff8a:	f855 2037 	ldr.w	r2, [r5, r7, lsl #3]
 c02ff8e:	4639      	mov	r1, r7
 c02ff90:	685b      	ldr	r3, [r3, #4]
 c02ff92:	9814      	ldr	r0, [sp, #80]	; 0x50
 c02ff94:	f7ea fa78 	bl	c01a488 <psa_write>
    for (i = 0; i < out_len; i++) {
 c02ff98:	3701      	adds	r7, #1
 c02ff9a:	e7e4      	b.n	c02ff66 <tfm_crypto_init+0x18a>
 c02ff9c:	e7fe      	b.n	c02ff9c <tfm_crypto_init+0x1c0>
    /* Should not return in normal operations */
    tfm_crypto_ipc_handler();
#endif

    return status;
}
 c02ff9e:	b02d      	add	sp, #180	; 0xb4
 c02ffa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c02ffa4:	30037db0 	.word	0x30037db0
 c02ffa8:	3003b1b0 	.word	0x3003b1b0
 c02ffac:	30039db0 	.word	0x30039db0
 c02ffb0:	3003b1b4 	.word	0x3003b1b4
 c02ffb4:	0c036b98 	.word	0x0c036b98

0c02ffb8 <tfm_crypto_check_handle_owner>:
                                           uint32_t *index)
{
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    int32_t partition_id = 0;
 c02ffb8:	2300      	movs	r3, #0
{
 c02ffba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02ffbc:	4605      	mov	r5, r0
    int32_t partition_id = 0;
 c02ffbe:	a802      	add	r0, sp, #8
 c02ffc0:	f840 3d04 	str.w	r3, [r0, #-4]!
{
 c02ffc4:	460c      	mov	r4, r1
    uint32_t i = 0;
    psa_status_t status;

    status = tfm_crypto_get_caller_id(&partition_id);
 c02ffc6:	f7ff feff 	bl	c02fdc8 <tfm_crypto_get_caller_id>
    if (status != PSA_SUCCESS) {
 c02ffca:	b978      	cbnz	r0, c02ffec <tfm_crypto_check_handle_owner+0x34>
        return status;
    }

    for (i = 0; i < TFM_CRYPTO_MAX_KEY_HANDLES; i++) {
 c02ffcc:	4603      	mov	r3, r0
 c02ffce:	4a0d      	ldr	r2, [pc, #52]	; (c030004 <tfm_crypto_check_handle_owner+0x4c>)
 c02ffd0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
        if (handle_owner[i].in_use && handle_owner[i].handle == handle) {
 c02ffd4:	798e      	ldrb	r6, [r1, #6]
 c02ffd6:	b15e      	cbz	r6, c02fff0 <tfm_crypto_check_handle_owner+0x38>
 c02ffd8:	8889      	ldrh	r1, [r1, #4]
 c02ffda:	42a9      	cmp	r1, r5
 c02ffdc:	d108      	bne.n	c02fff0 <tfm_crypto_check_handle_owner+0x38>
            if (handle_owner[i].owner == partition_id) {
 c02ffde:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 c02ffe2:	9a01      	ldr	r2, [sp, #4]
 c02ffe4:	4291      	cmp	r1, r2
 c02ffe6:	d109      	bne.n	c02fffc <tfm_crypto_check_handle_owner+0x44>
                if (index != NULL) {
 c02ffe8:	b104      	cbz	r4, c02ffec <tfm_crypto_check_handle_owner+0x34>
                    *index = i;
 c02ffea:	6023      	str	r3, [r4, #0]
        }
    }

    return PSA_ERROR_INVALID_HANDLE;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c02ffec:	b002      	add	sp, #8
 c02ffee:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < TFM_CRYPTO_MAX_KEY_HANDLES; i++) {
 c02fff0:	3301      	adds	r3, #1
 c02fff2:	2b10      	cmp	r3, #16
 c02fff4:	d1ec      	bne.n	c02ffd0 <tfm_crypto_check_handle_owner+0x18>
    return PSA_ERROR_INVALID_HANDLE;
 c02fff6:	f06f 0087 	mvn.w	r0, #135	; 0x87
 c02fffa:	e7f7      	b.n	c02ffec <tfm_crypto_check_handle_owner+0x34>
                return PSA_ERROR_NOT_PERMITTED;
 c02fffc:	f06f 0084 	mvn.w	r0, #132	; 0x84
 c030000:	e7f4      	b.n	c02ffec <tfm_crypto_check_handle_owner+0x34>
 c030002:	bf00      	nop
 c030004:	3003b1b8 	.word	0x3003b1b8

0c030008 <tfm_crypto_allocate_key>:
                                     size_t out_len)
{
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 1) || (out_len != 1)) {
 c030008:	2901      	cmp	r1, #1
{
 c03000a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((in_len != 1) || (out_len != 1)) {
 c03000c:	d116      	bne.n	c03003c <tfm_crypto_allocate_key+0x34>
 c03000e:	2b01      	cmp	r3, #1
 c030010:	d114      	bne.n	c03003c <tfm_crypto_allocate_key+0x34>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c030012:	6843      	ldr	r3, [r0, #4]
 c030014:	2b34      	cmp	r3, #52	; 0x34
 c030016:	d111      	bne.n	c03003c <tfm_crypto_allocate_key+0x34>
 c030018:	6853      	ldr	r3, [r2, #4]
 c03001a:	2b02      	cmp	r3, #2
 c03001c:	d10e      	bne.n	c03003c <tfm_crypto_allocate_key+0x34>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    psa_key_handle_t *key_handle = out_vec[0].base;
    uint32_t i = 0;
    int32_t partition_id = 0;
 c03001e:	2400      	movs	r4, #0
    psa_key_handle_t *key_handle = out_vec[0].base;
 c030020:	6816      	ldr	r6, [r2, #0]
    bool empty_found = false;
    psa_status_t status;

    for (i = 0; i < TFM_CRYPTO_MAX_KEY_HANDLES; i++) {
        if (handle_owner[i].in_use == TFM_CRYPTO_NOT_IN_USE) {
 c030022:	4f11      	ldr	r7, [pc, #68]	; (c030068 <tfm_crypto_allocate_key+0x60>)
    int32_t partition_id = 0;
 c030024:	9401      	str	r4, [sp, #4]
        if (handle_owner[i].in_use == TFM_CRYPTO_NOT_IN_USE) {
 c030026:	eb07 05c4 	add.w	r5, r7, r4, lsl #3
 c03002a:	79ab      	ldrb	r3, [r5, #6]
 c03002c:	b14b      	cbz	r3, c030042 <tfm_crypto_allocate_key+0x3a>
    for (i = 0; i < TFM_CRYPTO_MAX_KEY_HANDLES; i++) {
 c03002e:	3401      	adds	r4, #1
 c030030:	2c10      	cmp	r4, #16
 c030032:	d1f8      	bne.n	c030026 <tfm_crypto_allocate_key+0x1e>
            break;
        }
    }

    if (!empty_found) {
        return PSA_ERROR_INSUFFICIENT_MEMORY;
 c030034:	f06f 008c 	mvn.w	r0, #140	; 0x8c
        handle_owner[i].in_use = TFM_CRYPTO_IN_USE;
    }

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c030038:	b003      	add	sp, #12
 c03003a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c03003c:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c030040:	e7fa      	b.n	c030038 <tfm_crypto_allocate_key+0x30>
    status = tfm_crypto_get_caller_id(&partition_id);
 c030042:	a801      	add	r0, sp, #4
 c030044:	f7ff fec0 	bl	c02fdc8 <tfm_crypto_get_caller_id>
    if (status != PSA_SUCCESS) {
 c030048:	2800      	cmp	r0, #0
 c03004a:	d1f5      	bne.n	c030038 <tfm_crypto_allocate_key+0x30>
    status = psa_allocate_key(key_handle);
 c03004c:	4630      	mov	r0, r6
 c03004e:	f7fd f979 	bl	c02d344 <mbedcrypto__psa_allocate_key>
    if (status == PSA_SUCCESS) {
 c030052:	2800      	cmp	r0, #0
 c030054:	d1f0      	bne.n	c030038 <tfm_crypto_allocate_key+0x30>
        handle_owner[i].owner = partition_id;
 c030056:	9b01      	ldr	r3, [sp, #4]
 c030058:	f847 3034 	str.w	r3, [r7, r4, lsl #3]
        handle_owner[i].handle = *key_handle;
 c03005c:	8833      	ldrh	r3, [r6, #0]
 c03005e:	80ab      	strh	r3, [r5, #4]
        handle_owner[i].in_use = TFM_CRYPTO_IN_USE;
 c030060:	2301      	movs	r3, #1
 c030062:	71ab      	strb	r3, [r5, #6]
 c030064:	e7e8      	b.n	c030038 <tfm_crypto_allocate_key+0x30>
 c030066:	bf00      	nop
 c030068:	3003b1b8 	.word	0x3003b1b8

0c03006c <tfm_crypto_import_key>:
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    (void)out_vec;

    if ((in_len != 2) || (out_len != 0)) {
 c03006c:	2902      	cmp	r1, #2
{
 c03006e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ((in_len != 2) || (out_len != 0)) {
 c030072:	d115      	bne.n	c0300a0 <tfm_crypto_import_key+0x34>
 c030074:	b9a3      	cbnz	r3, c0300a0 <tfm_crypto_import_key+0x34>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) {
 c030076:	6842      	ldr	r2, [r0, #4]
 c030078:	2a34      	cmp	r2, #52	; 0x34
 c03007a:	d111      	bne.n	c0300a0 <tfm_crypto_import_key+0x34>
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
    psa_key_type_t type = iov->type;
    const uint8_t *data = in_vec[1].base;
    size_t data_length = in_vec[1].len;
 c03007c:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c030080:	6802      	ldr	r2, [r0, #0]
    psa_status_t status = tfm_crypto_check_handle_owner(key, NULL);
 c030082:	4619      	mov	r1, r3
    psa_key_handle_t key = iov->key_handle;
 c030084:	8894      	ldrh	r4, [r2, #4]
    psa_key_type_t type = iov->type;
 c030086:	6895      	ldr	r5, [r2, #8]
    psa_status_t status = tfm_crypto_check_handle_owner(key, NULL);
 c030088:	4620      	mov	r0, r4
 c03008a:	f7ff ff95 	bl	c02ffb8 <tfm_crypto_check_handle_owner>

    if (status != PSA_SUCCESS) {
 c03008e:	b948      	cbnz	r0, c0300a4 <tfm_crypto_import_key+0x38>
        return status;
    }

    return psa_import_key(key, type, data, data_length);
 c030090:	463b      	mov	r3, r7
 c030092:	4632      	mov	r2, r6
 c030094:	4629      	mov	r1, r5
 c030096:	4620      	mov	r0, r4
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c030098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return psa_import_key(key, type, data, data_length);
 c03009c:	f7fb b876 	b.w	c02b18c <mbedcrypto__psa_import_key>
        return PSA_ERROR_CONNECTION_REFUSED;
 c0300a0:	f06f 0081 	mvn.w	r0, #129	; 0x81
}
 c0300a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0c0300a8 <tfm_crypto_destroy_key>:
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    (void)out_vec;

    if ((in_len != 1) || (out_len != 0)) {
 c0300a8:	2901      	cmp	r1, #1
{
 c0300aa:	b513      	push	{r0, r1, r4, lr}
    if ((in_len != 1) || (out_len != 0)) {
 c0300ac:	d118      	bne.n	c0300e0 <tfm_crypto_destroy_key+0x38>
 c0300ae:	b9bb      	cbnz	r3, c0300e0 <tfm_crypto_destroy_key+0x38>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) {
 c0300b0:	6843      	ldr	r3, [r0, #4]
 c0300b2:	2b34      	cmp	r3, #52	; 0x34
 c0300b4:	d114      	bne.n	c0300e0 <tfm_crypto_destroy_key+0x38>
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
 c0300b6:	6803      	ldr	r3, [r0, #0]
    uint32_t index;
    psa_status_t status = tfm_crypto_check_handle_owner(key, &index);
 c0300b8:	a901      	add	r1, sp, #4
    psa_key_handle_t key = iov->key_handle;
 c0300ba:	889c      	ldrh	r4, [r3, #4]
    psa_status_t status = tfm_crypto_check_handle_owner(key, &index);
 c0300bc:	4620      	mov	r0, r4
 c0300be:	f7ff ff7b 	bl	c02ffb8 <tfm_crypto_check_handle_owner>

    if (status != PSA_SUCCESS) {
 c0300c2:	b958      	cbnz	r0, c0300dc <tfm_crypto_destroy_key+0x34>
        return status;
    }

    status = psa_destroy_key(key);
 c0300c4:	4620      	mov	r0, r4
 c0300c6:	f7fb f875 	bl	c02b1b4 <mbedcrypto__psa_destroy_key>

    if (status == PSA_SUCCESS) {
 c0300ca:	b938      	cbnz	r0, c0300dc <tfm_crypto_destroy_key+0x34>
        handle_owner[index].owner = 0;
 c0300cc:	9a01      	ldr	r2, [sp, #4]
 c0300ce:	4b06      	ldr	r3, [pc, #24]	; (c0300e8 <tfm_crypto_destroy_key+0x40>)
 c0300d0:	f843 0032 	str.w	r0, [r3, r2, lsl #3]
        handle_owner[index].handle = 0;
 c0300d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 c0300d8:	8098      	strh	r0, [r3, #4]
        handle_owner[index].in_use = TFM_CRYPTO_NOT_IN_USE;
 c0300da:	7198      	strb	r0, [r3, #6]
    }

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c0300dc:	b002      	add	sp, #8
 c0300de:	bd10      	pop	{r4, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c0300e0:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c0300e4:	e7fa      	b.n	c0300dc <tfm_crypto_destroy_key+0x34>
 c0300e6:	bf00      	nop
 c0300e8:	3003b1b8 	.word	0x3003b1b8

0c0300ec <tfm_crypto_get_key_information>:
                                            size_t out_len)
{
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 1) || (out_len != 2)) {
 c0300ec:	2901      	cmp	r1, #1
{
 c0300ee:	b410      	push	{r4}
 c0300f0:	4614      	mov	r4, r2
    if ((in_len != 1) || (out_len != 2)) {
 c0300f2:	d111      	bne.n	c030118 <tfm_crypto_get_key_information+0x2c>
 c0300f4:	2b02      	cmp	r3, #2
 c0300f6:	d10f      	bne.n	c030118 <tfm_crypto_get_key_information+0x2c>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c0300f8:	6843      	ldr	r3, [r0, #4]
 c0300fa:	2b34      	cmp	r3, #52	; 0x34
 c0300fc:	d10c      	bne.n	c030118 <tfm_crypto_get_key_information+0x2c>
 c0300fe:	6853      	ldr	r3, [r2, #4]
 c030100:	2b04      	cmp	r3, #4
 c030102:	d109      	bne.n	c030118 <tfm_crypto_get_key_information+0x2c>
        (out_vec[0].len != sizeof(psa_key_type_t)) ||
 c030104:	68d3      	ldr	r3, [r2, #12]
 c030106:	2b04      	cmp	r3, #4
 c030108:	d106      	bne.n	c030118 <tfm_crypto_get_key_information+0x2c>
        (out_vec[1].len != sizeof(size_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
 c03010a:	6803      	ldr	r3, [r0, #0]
    psa_key_type_t *type = out_vec[0].base;
    size_t *bits = out_vec[1].base;

    return psa_get_key_information(key, type, bits);
 c03010c:	6821      	ldr	r1, [r4, #0]
 c03010e:	6892      	ldr	r2, [r2, #8]
 c030110:	8898      	ldrh	r0, [r3, #4]
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c030112:	bc10      	pop	{r4}
    return psa_get_key_information(key, type, bits);
 c030114:	f7fb b859 	b.w	c02b1ca <mbedcrypto__psa_get_key_information>
}
 c030118:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c03011c:	bc10      	pop	{r4}
 c03011e:	4770      	bx	lr

0c030120 <tfm_crypto_export_key>:
                                   size_t out_len)
{
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 1) || (out_len != 1)) {
 c030120:	2901      	cmp	r1, #1
{
 c030122:	b410      	push	{r4}
    if ((in_len != 1) || (out_len != 1)) {
 c030124:	d10c      	bne.n	c030140 <tfm_crypto_export_key+0x20>
 c030126:	2b01      	cmp	r3, #1
 c030128:	d10a      	bne.n	c030140 <tfm_crypto_export_key+0x20>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) {
 c03012a:	6843      	ldr	r3, [r0, #4]
 c03012c:	2b34      	cmp	r3, #52	; 0x34
 c03012e:	d107      	bne.n	c030140 <tfm_crypto_export_key+0x20>
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
 c030130:	6800      	ldr	r0, [r0, #0]
    uint8_t *data = out_vec[0].base;
    size_t data_size = out_vec[0].len;

    return psa_export_key(key, data, data_size, &(out_vec[0].len));
 c030132:	1d13      	adds	r3, r2, #4
 c030134:	8880      	ldrh	r0, [r0, #4]
 c030136:	e9d2 1200 	ldrd	r1, r2, [r2]
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c03013a:	bc10      	pop	{r4}
    return psa_export_key(key, data, data_size, &(out_vec[0].len));
 c03013c:	f7fb b862 	b.w	c02b204 <mbedcrypto__psa_export_key>
}
 c030140:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c030144:	bc10      	pop	{r4}
 c030146:	4770      	bx	lr

0c030148 <tfm_crypto_export_public_key>:
                                          size_t out_len)
{
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 1) || (out_len != 1)) {
 c030148:	2901      	cmp	r1, #1
{
 c03014a:	b410      	push	{r4}
    if ((in_len != 1) || (out_len != 1)) {
 c03014c:	d10c      	bne.n	c030168 <tfm_crypto_export_public_key+0x20>
 c03014e:	2b01      	cmp	r3, #1
 c030150:	d10a      	bne.n	c030168 <tfm_crypto_export_public_key+0x20>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) {
 c030152:	6843      	ldr	r3, [r0, #4]
 c030154:	2b34      	cmp	r3, #52	; 0x34
 c030156:	d107      	bne.n	c030168 <tfm_crypto_export_public_key+0x20>
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
 c030158:	6800      	ldr	r0, [r0, #0]
    uint8_t *data = out_vec[0].base;
    size_t data_size = out_vec[0].len;

    return psa_export_public_key(key, data, data_size, &(out_vec[0].len));
 c03015a:	1d13      	adds	r3, r2, #4
 c03015c:	8880      	ldrh	r0, [r0, #4]
 c03015e:	e9d2 1200 	ldrd	r1, r2, [r2]
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c030162:	bc10      	pop	{r4}
    return psa_export_public_key(key, data, data_size, &(out_vec[0].len));
 c030164:	f7fb b862 	b.w	c02b22c <mbedcrypto__psa_export_public_key>
}
 c030168:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c03016c:	bc10      	pop	{r4}
 c03016e:	4770      	bx	lr

0c030170 <tfm_crypto_copy_key>:
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    (void)out_vec;

    if ((in_len != 3) || (out_len != 0)) {
 c030170:	2903      	cmp	r1, #3
 c030172:	d110      	bne.n	c030196 <tfm_crypto_copy_key+0x26>
 c030174:	b97b      	cbnz	r3, c030196 <tfm_crypto_copy_key+0x26>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c030176:	6843      	ldr	r3, [r0, #4]
 c030178:	2b34      	cmp	r3, #52	; 0x34
 c03017a:	d10c      	bne.n	c030196 <tfm_crypto_copy_key+0x26>
 c03017c:	68c3      	ldr	r3, [r0, #12]
 c03017e:	2b02      	cmp	r3, #2
 c030180:	d109      	bne.n	c030196 <tfm_crypto_copy_key+0x26>
        (in_vec[1].len != sizeof(psa_key_handle_t)) ||
 c030182:	6943      	ldr	r3, [r0, #20]
 c030184:	2b0c      	cmp	r3, #12
 c030186:	d106      	bne.n	c030196 <tfm_crypto_copy_key+0x26>
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t source_handle = iov->key_handle;
    psa_key_handle_t target_handle = *((psa_key_handle_t *)in_vec[1].base);
 c030188:	6881      	ldr	r1, [r0, #8]
    psa_key_handle_t source_handle = iov->key_handle;
 c03018a:	6803      	ldr	r3, [r0, #0]
    const psa_key_policy_t *policy = in_vec[2].base;

    return psa_copy_key(source_handle, target_handle, policy);
 c03018c:	6902      	ldr	r2, [r0, #16]
 c03018e:	8809      	ldrh	r1, [r1, #0]
 c030190:	8898      	ldrh	r0, [r3, #4]
 c030192:	f7fb b861 	b.w	c02b258 <mbedcrypto__psa_copy_key>
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c030196:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c03019a:	4770      	bx	lr

0c03019c <tfm_crypto_set_key_policy>:
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    (void)out_vec;

    if ((in_len != 2) || (out_len != 0)) {
 c03019c:	2902      	cmp	r1, #2
{
 c03019e:	b538      	push	{r3, r4, r5, lr}
    if ((in_len != 2) || (out_len != 0)) {
 c0301a0:	d114      	bne.n	c0301cc <tfm_crypto_set_key_policy+0x30>
 c0301a2:	b99b      	cbnz	r3, c0301cc <tfm_crypto_set_key_policy+0x30>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c0301a4:	6842      	ldr	r2, [r0, #4]
 c0301a6:	2a34      	cmp	r2, #52	; 0x34
 c0301a8:	d110      	bne.n	c0301cc <tfm_crypto_set_key_policy+0x30>
 c0301aa:	68c2      	ldr	r2, [r0, #12]
 c0301ac:	2a0c      	cmp	r2, #12
 c0301ae:	d10d      	bne.n	c0301cc <tfm_crypto_set_key_policy+0x30>
        (in_vec[1].len != sizeof(psa_key_policy_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
 c0301b0:	6802      	ldr	r2, [r0, #0]
    const psa_key_policy_t *policy = in_vec[1].base;
 c0301b2:	6885      	ldr	r5, [r0, #8]
    psa_key_handle_t key = iov->key_handle;
 c0301b4:	8894      	ldrh	r4, [r2, #4]
    psa_status_t status = tfm_crypto_check_handle_owner(key, NULL);
 c0301b6:	4619      	mov	r1, r3
 c0301b8:	4620      	mov	r0, r4
 c0301ba:	f7ff fefd 	bl	c02ffb8 <tfm_crypto_check_handle_owner>

    if (status == PSA_SUCCESS) {
 c0301be:	b938      	cbnz	r0, c0301d0 <tfm_crypto_set_key_policy+0x34>
        return psa_set_key_policy(key, policy);
 c0301c0:	4629      	mov	r1, r5
 c0301c2:	4620      	mov	r0, r4
    } else {
        return status;
    }
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c0301c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return psa_set_key_policy(key, policy);
 c0301c8:	f7fc bbde 	b.w	c02c988 <mbedcrypto__psa_set_key_policy>
        return PSA_ERROR_CONNECTION_REFUSED;
 c0301cc:	f06f 0081 	mvn.w	r0, #129	; 0x81
}
 c0301d0:	bd38      	pop	{r3, r4, r5, pc}

0c0301d2 <tfm_crypto_get_key_policy>:
                                       size_t out_len)
{
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 1) || (out_len != 1)) {
 c0301d2:	2901      	cmp	r1, #1
 c0301d4:	d10c      	bne.n	c0301f0 <tfm_crypto_get_key_policy+0x1e>
 c0301d6:	2b01      	cmp	r3, #1
 c0301d8:	d10a      	bne.n	c0301f0 <tfm_crypto_get_key_policy+0x1e>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c0301da:	6843      	ldr	r3, [r0, #4]
 c0301dc:	2b34      	cmp	r3, #52	; 0x34
 c0301de:	d107      	bne.n	c0301f0 <tfm_crypto_get_key_policy+0x1e>
 c0301e0:	6853      	ldr	r3, [r2, #4]
 c0301e2:	2b0c      	cmp	r3, #12
 c0301e4:	d104      	bne.n	c0301f0 <tfm_crypto_get_key_policy+0x1e>
        (out_vec[0].len != sizeof(psa_key_policy_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
 c0301e6:	6803      	ldr	r3, [r0, #0]
    psa_key_policy_t *policy = out_vec[0].base;

    return psa_get_key_policy(key, policy);
 c0301e8:	6811      	ldr	r1, [r2, #0]
 c0301ea:	8898      	ldrh	r0, [r3, #4]
 c0301ec:	f7fc bbe8 	b.w	c02c9c0 <mbedcrypto__psa_get_key_policy>
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c0301f0:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c0301f4:	4770      	bx	lr

0c0301f6 <tfm_crypto_get_key_lifetime>:
                                         size_t out_len)
{
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 1) || (out_len != 1)) {
 c0301f6:	2901      	cmp	r1, #1
 c0301f8:	d10c      	bne.n	c030214 <tfm_crypto_get_key_lifetime+0x1e>
 c0301fa:	2b01      	cmp	r3, #1
 c0301fc:	d10a      	bne.n	c030214 <tfm_crypto_get_key_lifetime+0x1e>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c0301fe:	6843      	ldr	r3, [r0, #4]
 c030200:	2b34      	cmp	r3, #52	; 0x34
 c030202:	d107      	bne.n	c030214 <tfm_crypto_get_key_lifetime+0x1e>
 c030204:	6853      	ldr	r3, [r2, #4]
 c030206:	2b04      	cmp	r3, #4
 c030208:	d104      	bne.n	c030214 <tfm_crypto_get_key_lifetime+0x1e>
        (out_vec[0].len != sizeof(psa_key_lifetime_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
 c03020a:	6803      	ldr	r3, [r0, #0]
    psa_key_lifetime_t *lifetime = out_vec[0].base;

    return psa_get_key_lifetime(key, lifetime);
 c03020c:	6811      	ldr	r1, [r2, #0]
 c03020e:	8898      	ldrh	r0, [r3, #4]
 c030210:	f7fc bbea 	b.w	c02c9e8 <mbedcrypto__psa_get_key_lifetime>
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c030214:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c030218:	4770      	bx	lr

0c03021a <tfm_crypto_mac_sign_setup>:
/*!@{*/
psa_status_t tfm_crypto_mac_sign_setup(psa_invec in_vec[],
                                       size_t in_len,
                                       psa_outvec out_vec[],
                                       size_t out_len)
{
 c03021a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_mac_operation_t *operation = NULL;
 c03021e:	2400      	movs	r4, #0

    if ((in_len != 1) || (out_len != 1)) {
 c030220:	2901      	cmp	r1, #1
    psa_mac_operation_t *operation = NULL;
 c030222:	9400      	str	r4, [sp, #0]
    if ((in_len != 1) || (out_len != 1)) {
 c030224:	d12d      	bne.n	c030282 <tfm_crypto_mac_sign_setup+0x68>
 c030226:	2b01      	cmp	r3, #1
 c030228:	d12b      	bne.n	c030282 <tfm_crypto_mac_sign_setup+0x68>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((out_vec[0].len != sizeof(uint32_t)) ||
 c03022a:	6853      	ldr	r3, [r2, #4]
 c03022c:	2b04      	cmp	r3, #4
 c03022e:	d128      	bne.n	c030282 <tfm_crypto_mac_sign_setup+0x68>
 c030230:	6843      	ldr	r3, [r0, #4]
 c030232:	2b34      	cmp	r3, #52	; 0x34
 c030234:	d125      	bne.n	c030282 <tfm_crypto_mac_sign_setup+0x68>
        (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c030236:	6805      	ldr	r5, [r0, #0]
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    psa_key_handle_t key_handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c030238:	4621      	mov	r1, r4
    psa_key_handle_t key_handle = iov->key_handle;
 c03023a:	88af      	ldrh	r7, [r5, #4]
    uint32_t handle = iov->op_handle;
 c03023c:	69ab      	ldr	r3, [r5, #24]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c03023e:	4638      	mov	r0, r7
    uint32_t handle = iov->op_handle;
 c030240:	9301      	str	r3, [sp, #4]
    uint32_t *handle_out = out_vec[0].base;
 c030242:	6816      	ldr	r6, [r2, #0]
    psa_algorithm_t alg = iov->alg;
 c030244:	f8d5 8010 	ldr.w	r8, [r5, #16]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c030248:	f7ff feb6 	bl	c02ffb8 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c03024c:	4604      	mov	r4, r0
 c03024e:	b9a0      	cbnz	r0, c03027a <tfm_crypto_mac_sign_setup+0x60>
        return status;
    }

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;
 c030250:	69ab      	ldr	r3, [r5, #24]

    /* Allocate the operation context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_MAC_OPERATION,
 c030252:	466a      	mov	r2, sp
    *handle_out = iov->op_handle;
 c030254:	6033      	str	r3, [r6, #0]
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_MAC_OPERATION,
 c030256:	a901      	add	r1, sp, #4
 c030258:	2002      	movs	r0, #2
 c03025a:	f7ff f893 	bl	c02f384 <tfm_crypto_operation_alloc>
                                        &handle,
                                        (void **)&operation);
    if (status != PSA_SUCCESS) {
 c03025e:	4604      	mov	r4, r0
 c030260:	b958      	cbnz	r0, c03027a <tfm_crypto_mac_sign_setup+0x60>
        return status;
    }

    *handle_out = handle;
 c030262:	9b01      	ldr	r3, [sp, #4]

    status = psa_mac_sign_setup(operation, key_handle, alg);
 c030264:	4642      	mov	r2, r8
    *handle_out = handle;
 c030266:	6033      	str	r3, [r6, #0]
    status = psa_mac_sign_setup(operation, key_handle, alg);
 c030268:	4639      	mov	r1, r7
 c03026a:	9800      	ldr	r0, [sp, #0]
 c03026c:	f7fb feda 	bl	c02c024 <mbedcrypto__psa_mac_sign_setup>
    if (status != PSA_SUCCESS) {
 c030270:	4604      	mov	r4, r0
 c030272:	b110      	cbz	r0, c03027a <tfm_crypto_mac_sign_setup+0x60>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c030274:	4630      	mov	r0, r6
 c030276:	f7ff f8b7 	bl	c02f3e8 <tfm_crypto_operation_release>
        return status;
    }

    return PSA_SUCCESS;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c03027a:	4620      	mov	r0, r4
 c03027c:	b002      	add	sp, #8
 c03027e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c030282:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c030286:	e7f8      	b.n	c03027a <tfm_crypto_mac_sign_setup+0x60>

0c030288 <tfm_crypto_mac_verify_setup>:

psa_status_t tfm_crypto_mac_verify_setup(psa_invec in_vec[],
                                         size_t in_len,
                                         psa_outvec out_vec[],
                                         size_t out_len)
{
 c030288:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_mac_operation_t *operation = NULL;
 c03028c:	2400      	movs	r4, #0

    if ((in_len != 1) || (out_len != 1)) {
 c03028e:	2901      	cmp	r1, #1
    psa_mac_operation_t *operation = NULL;
 c030290:	9400      	str	r4, [sp, #0]
    if ((in_len != 1) || (out_len != 1)) {
 c030292:	d12d      	bne.n	c0302f0 <tfm_crypto_mac_verify_setup+0x68>
 c030294:	2b01      	cmp	r3, #1
 c030296:	d12b      	bne.n	c0302f0 <tfm_crypto_mac_verify_setup+0x68>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((out_vec[0].len != sizeof(uint32_t)) ||
 c030298:	6853      	ldr	r3, [r2, #4]
 c03029a:	2b04      	cmp	r3, #4
 c03029c:	d128      	bne.n	c0302f0 <tfm_crypto_mac_verify_setup+0x68>
 c03029e:	6843      	ldr	r3, [r0, #4]
 c0302a0:	2b34      	cmp	r3, #52	; 0x34
 c0302a2:	d125      	bne.n	c0302f0 <tfm_crypto_mac_verify_setup+0x68>
        (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c0302a4:	6805      	ldr	r5, [r0, #0]
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    psa_key_handle_t key_handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c0302a6:	4621      	mov	r1, r4
    psa_key_handle_t key_handle = iov->key_handle;
 c0302a8:	88af      	ldrh	r7, [r5, #4]
    uint32_t handle = iov->op_handle;
 c0302aa:	69ab      	ldr	r3, [r5, #24]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c0302ac:	4638      	mov	r0, r7
    uint32_t handle = iov->op_handle;
 c0302ae:	9301      	str	r3, [sp, #4]
    uint32_t *handle_out = out_vec[0].base;
 c0302b0:	6816      	ldr	r6, [r2, #0]
    psa_algorithm_t alg = iov->alg;
 c0302b2:	f8d5 8010 	ldr.w	r8, [r5, #16]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c0302b6:	f7ff fe7f 	bl	c02ffb8 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c0302ba:	4604      	mov	r4, r0
 c0302bc:	b9a0      	cbnz	r0, c0302e8 <tfm_crypto_mac_verify_setup+0x60>
        return status;
    }

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;
 c0302be:	69ab      	ldr	r3, [r5, #24]

    /* Allocate the operation context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_MAC_OPERATION,
 c0302c0:	466a      	mov	r2, sp
    *handle_out = iov->op_handle;
 c0302c2:	6033      	str	r3, [r6, #0]
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_MAC_OPERATION,
 c0302c4:	a901      	add	r1, sp, #4
 c0302c6:	2002      	movs	r0, #2
 c0302c8:	f7ff f85c 	bl	c02f384 <tfm_crypto_operation_alloc>
                                        &handle,
                                        (void **)&operation);
    if (status != PSA_SUCCESS) {
 c0302cc:	4604      	mov	r4, r0
 c0302ce:	b958      	cbnz	r0, c0302e8 <tfm_crypto_mac_verify_setup+0x60>
        return status;
    }

    *handle_out = handle;
 c0302d0:	9b01      	ldr	r3, [sp, #4]

    status = psa_mac_verify_setup(operation, key_handle, alg);
 c0302d2:	4642      	mov	r2, r8
    *handle_out = handle;
 c0302d4:	6033      	str	r3, [r6, #0]
    status = psa_mac_verify_setup(operation, key_handle, alg);
 c0302d6:	4639      	mov	r1, r7
 c0302d8:	9800      	ldr	r0, [sp, #0]
 c0302da:	f7fb fea6 	bl	c02c02a <mbedcrypto__psa_mac_verify_setup>
    if (status != PSA_SUCCESS) {
 c0302de:	4604      	mov	r4, r0
 c0302e0:	b110      	cbz	r0, c0302e8 <tfm_crypto_mac_verify_setup+0x60>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c0302e2:	4630      	mov	r0, r6
 c0302e4:	f7ff f880 	bl	c02f3e8 <tfm_crypto_operation_release>
        return status;
    }

    return PSA_SUCCESS;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c0302e8:	4620      	mov	r0, r4
 c0302ea:	b002      	add	sp, #8
 c0302ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c0302f0:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c0302f4:	e7f8      	b.n	c0302e8 <tfm_crypto_mac_verify_setup+0x60>

0c0302f6 <tfm_crypto_mac_update>:

psa_status_t tfm_crypto_mac_update(psa_invec in_vec[],
                                   size_t in_len,
                                   psa_outvec out_vec[],
                                   size_t out_len)
{
 c0302f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c0302f8:	460c      	mov	r4, r1
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_mac_operation_t *operation = NULL;
 c0302fa:	2100      	movs	r1, #0

    if ((in_len != 2) || (out_len != 1)) {
 c0302fc:	2c02      	cmp	r4, #2
    psa_mac_operation_t *operation = NULL;
 c0302fe:	9101      	str	r1, [sp, #4]
    if ((in_len != 2) || (out_len != 1)) {
 c030300:	d120      	bne.n	c030344 <tfm_crypto_mac_update+0x4e>
 c030302:	2b01      	cmp	r3, #1
 c030304:	d11e      	bne.n	c030344 <tfm_crypto_mac_update+0x4e>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c030306:	6843      	ldr	r3, [r0, #4]
 c030308:	2b34      	cmp	r3, #52	; 0x34
 c03030a:	d11b      	bne.n	c030344 <tfm_crypto_mac_update+0x4e>
 c03030c:	6853      	ldr	r3, [r2, #4]
 c03030e:	2b04      	cmp	r3, #4
 c030310:	d118      	bne.n	c030344 <tfm_crypto_mac_update+0x4e>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    const uint8_t *input = in_vec[1].base;
    size_t input_length = in_vec[1].len;
 c030312:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
    uint32_t handle = iov->op_handle;
 c030316:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c030318:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c03031a:	6999      	ldr	r1, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c03031c:	4620      	mov	r0, r4
    *handle_out = iov->op_handle;
 c03031e:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c030320:	aa01      	add	r2, sp, #4
 c030322:	f7ff f89b 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c030326:	4604      	mov	r4, r0
 c030328:	b948      	cbnz	r0, c03033e <tfm_crypto_mac_update+0x48>
        return status;
    }

    status = psa_mac_update(operation, input, input_length);
 c03032a:	463a      	mov	r2, r7
 c03032c:	4631      	mov	r1, r6
 c03032e:	9801      	ldr	r0, [sp, #4]
 c030330:	f7fb fe7e 	bl	c02c030 <mbedcrypto__psa_mac_update>
    if (status != PSA_SUCCESS) {
 c030334:	4604      	mov	r4, r0
 c030336:	b110      	cbz	r0, c03033e <tfm_crypto_mac_update+0x48>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c030338:	4628      	mov	r0, r5
 c03033a:	f7ff f855 	bl	c02f3e8 <tfm_crypto_operation_release>
        return status;
    }

    return PSA_SUCCESS;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c03033e:	4620      	mov	r0, r4
 c030340:	b003      	add	sp, #12
 c030342:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c030344:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c030348:	e7f9      	b.n	c03033e <tfm_crypto_mac_update+0x48>

0c03034a <tfm_crypto_mac_sign_finish>:

psa_status_t tfm_crypto_mac_sign_finish(psa_invec in_vec[],
                                        size_t in_len,
                                        psa_outvec out_vec[],
                                        size_t out_len)
{
 c03034a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 c03034e:	4615      	mov	r5, r2
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_mac_operation_t *operation = NULL;
 c030350:	2200      	movs	r2, #0

    if ((in_len != 1) || (out_len != 2)) {
 c030352:	2901      	cmp	r1, #1
    psa_mac_operation_t *operation = NULL;
 c030354:	9201      	str	r2, [sp, #4]
    if ((in_len != 1) || (out_len != 2)) {
 c030356:	d128      	bne.n	c0303aa <tfm_crypto_mac_sign_finish+0x60>
 c030358:	2b02      	cmp	r3, #2
 c03035a:	d126      	bne.n	c0303aa <tfm_crypto_mac_sign_finish+0x60>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c03035c:	6841      	ldr	r1, [r0, #4]
 c03035e:	2934      	cmp	r1, #52	; 0x34
 c030360:	d123      	bne.n	c0303aa <tfm_crypto_mac_sign_finish+0x60>
 c030362:	6869      	ldr	r1, [r5, #4]
 c030364:	2904      	cmp	r1, #4
 c030366:	d120      	bne.n	c0303aa <tfm_crypto_mac_sign_finish+0x60>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    uint8_t *mac = out_vec[1].base;
    size_t mac_size = out_vec[1].len;
 c030368:	e9d5 7802 	ldrd	r7, r8, [r5, #8]
    uint32_t handle = iov->op_handle;
 c03036c:	6801      	ldr	r1, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c03036e:	682e      	ldr	r6, [r5, #0]
    uint32_t handle = iov->op_handle;
 c030370:	6989      	ldr	r1, [r1, #24]

    /* Initialise mac_length to zero */
    out_vec[1].len = 0;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c030372:	4618      	mov	r0, r3
    *handle_out = iov->op_handle;
 c030374:	6031      	str	r1, [r6, #0]
    out_vec[1].len = 0;
 c030376:	60ea      	str	r2, [r5, #12]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c030378:	aa01      	add	r2, sp, #4
 c03037a:	f7ff f86f 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c03037e:	4604      	mov	r4, r0
 c030380:	b958      	cbnz	r0, c03039a <tfm_crypto_mac_sign_finish+0x50>
        return status;
    }

    status = psa_mac_sign_finish(operation, mac, mac_size, &out_vec[1].len);
 c030382:	f105 030c 	add.w	r3, r5, #12
 c030386:	4642      	mov	r2, r8
 c030388:	4639      	mov	r1, r7
 c03038a:	9801      	ldr	r0, [sp, #4]
 c03038c:	f7fb fe80 	bl	c02c090 <mbedcrypto__psa_mac_sign_finish>
    if (status != PSA_SUCCESS) {
 c030390:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c030392:	4630      	mov	r0, r6
    if (status != PSA_SUCCESS) {
 c030394:	b12c      	cbz	r4, c0303a2 <tfm_crypto_mac_sign_finish+0x58>
        (void)tfm_crypto_operation_release(handle_out);
 c030396:	f7ff f827 	bl	c02f3e8 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c03039a:	4620      	mov	r0, r4
 c03039c:	b002      	add	sp, #8
 c03039e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = tfm_crypto_operation_release(handle_out);
 c0303a2:	f7ff f821 	bl	c02f3e8 <tfm_crypto_operation_release>
 c0303a6:	4604      	mov	r4, r0
    return status;
 c0303a8:	e7f7      	b.n	c03039a <tfm_crypto_mac_sign_finish+0x50>
        return PSA_ERROR_CONNECTION_REFUSED;
 c0303aa:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c0303ae:	e7f4      	b.n	c03039a <tfm_crypto_mac_sign_finish+0x50>

0c0303b0 <tfm_crypto_mac_verify_finish>:

psa_status_t tfm_crypto_mac_verify_finish(psa_invec in_vec[],
                                          size_t in_len,
                                          psa_outvec out_vec[],
                                          size_t out_len)
{
 c0303b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c0303b2:	460c      	mov	r4, r1
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_mac_operation_t *operation = NULL;
 c0303b4:	2100      	movs	r1, #0

    if ((in_len != 2) || (out_len != 1)) {
 c0303b6:	2c02      	cmp	r4, #2
    psa_mac_operation_t *operation = NULL;
 c0303b8:	9101      	str	r1, [sp, #4]
    if ((in_len != 2) || (out_len != 1)) {
 c0303ba:	d124      	bne.n	c030406 <tfm_crypto_mac_verify_finish+0x56>
 c0303bc:	2b01      	cmp	r3, #1
 c0303be:	d122      	bne.n	c030406 <tfm_crypto_mac_verify_finish+0x56>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c0303c0:	6843      	ldr	r3, [r0, #4]
 c0303c2:	2b34      	cmp	r3, #52	; 0x34
 c0303c4:	d11f      	bne.n	c030406 <tfm_crypto_mac_verify_finish+0x56>
 c0303c6:	6853      	ldr	r3, [r2, #4]
 c0303c8:	2b04      	cmp	r3, #4
 c0303ca:	d11c      	bne.n	c030406 <tfm_crypto_mac_verify_finish+0x56>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    const uint8_t *mac = in_vec[1].base;
    size_t mac_length = in_vec[1].len;
 c0303cc:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
    uint32_t handle = iov->op_handle;
 c0303d0:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c0303d2:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c0303d4:	6999      	ldr	r1, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c0303d6:	4620      	mov	r0, r4
    *handle_out = iov->op_handle;
 c0303d8:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c0303da:	aa01      	add	r2, sp, #4
 c0303dc:	f7ff f83e 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c0303e0:	4604      	mov	r4, r0
 c0303e2:	b948      	cbnz	r0, c0303f8 <tfm_crypto_mac_verify_finish+0x48>
        return status;
    }

    status = psa_mac_verify_finish(operation, mac, mac_length);
 c0303e4:	463a      	mov	r2, r7
 c0303e6:	4631      	mov	r1, r6
 c0303e8:	9801      	ldr	r0, [sp, #4]
 c0303ea:	f7fb fe81 	bl	c02c0f0 <mbedcrypto__psa_mac_verify_finish>
    if (status != PSA_SUCCESS) {
 c0303ee:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c0303f0:	4628      	mov	r0, r5
    if (status != PSA_SUCCESS) {
 c0303f2:	b124      	cbz	r4, c0303fe <tfm_crypto_mac_verify_finish+0x4e>
        (void)tfm_crypto_operation_release(handle_out);
 c0303f4:	f7fe fff8 	bl	c02f3e8 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c0303f8:	4620      	mov	r0, r4
 c0303fa:	b003      	add	sp, #12
 c0303fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = tfm_crypto_operation_release(handle_out);
 c0303fe:	f7fe fff3 	bl	c02f3e8 <tfm_crypto_operation_release>
 c030402:	4604      	mov	r4, r0
    return status;
 c030404:	e7f8      	b.n	c0303f8 <tfm_crypto_mac_verify_finish+0x48>
        return PSA_ERROR_CONNECTION_REFUSED;
 c030406:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c03040a:	e7f5      	b.n	c0303f8 <tfm_crypto_mac_verify_finish+0x48>

0c03040c <tfm_crypto_mac_abort>:

psa_status_t tfm_crypto_mac_abort(psa_invec in_vec[],
                                  size_t in_len,
                                  psa_outvec out_vec[],
                                  size_t out_len)
{
 c03040c:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_mac_operation_t *operation = NULL;
 c03040e:	2400      	movs	r4, #0

    if ((in_len != 1) || (out_len != 1)) {
 c030410:	2901      	cmp	r1, #1
    psa_mac_operation_t *operation = NULL;
 c030412:	9401      	str	r4, [sp, #4]
    if ((in_len != 1) || (out_len != 1)) {
 c030414:	d11f      	bne.n	c030456 <tfm_crypto_mac_abort+0x4a>
 c030416:	2b01      	cmp	r3, #1
 c030418:	d11d      	bne.n	c030456 <tfm_crypto_mac_abort+0x4a>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c03041a:	6843      	ldr	r3, [r0, #4]
 c03041c:	2b34      	cmp	r3, #52	; 0x34
 c03041e:	d11a      	bne.n	c030456 <tfm_crypto_mac_abort+0x4a>
 c030420:	6853      	ldr	r3, [r2, #4]
 c030422:	2b04      	cmp	r3, #4
 c030424:	d117      	bne.n	c030456 <tfm_crypto_mac_abort+0x4a>
        (out_vec[0].len != sizeof(uint32_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
 c030426:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c030428:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c03042a:	6999      	ldr	r1, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c03042c:	aa01      	add	r2, sp, #4
    *handle_out = iov->op_handle;
 c03042e:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c030430:	2002      	movs	r0, #2
 c030432:	f7ff f813 	bl	c02f45c <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c030436:	b938      	cbnz	r0, c030448 <tfm_crypto_mac_abort+0x3c>
        /* Operation does not exist, so abort has no effect */
        return PSA_SUCCESS;
    }

    status = psa_mac_abort(operation);
 c030438:	9801      	ldr	r0, [sp, #4]
 c03043a:	f7fb fcd7 	bl	c02bdec <mbedcrypto__psa_mac_abort>

    if (status != PSA_SUCCESS) {
 c03043e:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c030440:	4628      	mov	r0, r5
    if (status != PSA_SUCCESS) {
 c030442:	b124      	cbz	r4, c03044e <tfm_crypto_mac_abort+0x42>
        (void)tfm_crypto_operation_release(handle_out);
 c030444:	f7fe ffd0 	bl	c02f3e8 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c030448:	4620      	mov	r0, r4
 c03044a:	b003      	add	sp, #12
 c03044c:	bd30      	pop	{r4, r5, pc}
    status = tfm_crypto_operation_release(handle_out);
 c03044e:	f7fe ffcb 	bl	c02f3e8 <tfm_crypto_operation_release>
 c030452:	4604      	mov	r4, r0
    return status;
 c030454:	e7f8      	b.n	c030448 <tfm_crypto_mac_abort+0x3c>
        return PSA_ERROR_CONNECTION_REFUSED;
 c030456:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c03045a:	e7f5      	b.n	c030448 <tfm_crypto_mac_abort+0x3c>

0c03045c <its_flash_init>:
    return PSA_SUCCESS;
}
#endif /* ITS_RAM_FS */

psa_status_t its_flash_init(void)
{
 c03045c:	b508      	push	{r3, lr}
    err = ITS_FLASH_DEV_NAME.Initialize(NULL);
 c03045e:	4b05      	ldr	r3, [pc, #20]	; (c030474 <its_flash_init+0x18>)
 c030460:	2000      	movs	r0, #0
 c030462:	689b      	ldr	r3, [r3, #8]
 c030464:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c030466:	2800      	cmp	r0, #0
    return flash_init();
}
 c030468:	bf14      	ite	ne
 c03046a:	f06f 0091 	mvnne.w	r0, #145	; 0x91
 c03046e:	2000      	moveq	r0, #0
 c030470:	bd08      	pop	{r3, pc}
 c030472:	bf00      	nop
 c030474:	0c034f9c 	.word	0x0c034f9c

0c030478 <its_flash_read>:

psa_status_t its_flash_read(uint32_t block_id, uint8_t *buff,
                            size_t offset, size_t size)
{
 c030478:	b510      	push	{r4, lr}
    err = ITS_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c03047a:	4c06      	ldr	r4, [pc, #24]	; (c030494 <its_flash_read+0x1c>)
    return (ITS_FLASH_AREA_ADDR + (block_id * ITS_BLOCK_SIZE) + offset);
 c03047c:	3015      	adds	r0, #21
 c03047e:	eb02 3000 	add.w	r0, r2, r0, lsl #12
    err = ITS_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c030482:	461a      	mov	r2, r3
 c030484:	6963      	ldr	r3, [r4, #20]
 c030486:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c030488:	2800      	cmp	r0, #0
     * parameters.
     */
    flash_addr = get_phys_address(block_id, offset);

    return flash_read(flash_addr, size, buff);
}
 c03048a:	bf14      	ite	ne
 c03048c:	f06f 0091 	mvnne.w	r0, #145	; 0x91
 c030490:	2000      	moveq	r0, #0
 c030492:	bd10      	pop	{r4, pc}
 c030494:	0c034f9c 	.word	0x0c034f9c

0c030498 <its_flash_write>:

psa_status_t its_flash_write(uint32_t block_id, const uint8_t *buff,
                             size_t offset, size_t size)
{
 c030498:	b510      	push	{r4, lr}
    err = ITS_FLASH_DEV_NAME.ProgramData(flash_addr, buff, size);
 c03049a:	4c06      	ldr	r4, [pc, #24]	; (c0304b4 <its_flash_write+0x1c>)
    return (ITS_FLASH_AREA_ADDR + (block_id * ITS_BLOCK_SIZE) + offset);
 c03049c:	3015      	adds	r0, #21
 c03049e:	eb02 3000 	add.w	r0, r2, r0, lsl #12
    err = ITS_FLASH_DEV_NAME.ProgramData(flash_addr, buff, size);
 c0304a2:	461a      	mov	r2, r3
 c0304a4:	69a3      	ldr	r3, [r4, #24]
 c0304a6:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c0304a8:	2800      	cmp	r0, #0
     * parameters.
     */
    flash_addr = get_phys_address(block_id, offset);

    return flash_write(flash_addr, size, buff);
}
 c0304aa:	bf14      	ite	ne
 c0304ac:	f06f 0091 	mvnne.w	r0, #145	; 0x91
 c0304b0:	2000      	moveq	r0, #0
 c0304b2:	bd10      	pop	{r4, pc}
 c0304b4:	0c034f9c 	.word	0x0c034f9c

0c0304b8 <its_flash_block_to_block_move>:
psa_status_t its_flash_block_to_block_move(uint32_t dst_block,
                                           size_t dst_offset,
                                           uint32_t src_block,
                                           size_t src_offset,
                                           size_t size)
{
 c0304b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0304bc:	b0c0      	sub	sp, #256	; 0x100
    return (ITS_FLASH_AREA_ADDR + (block_id * ITS_BLOCK_SIZE) + offset);
 c0304be:	3215      	adds	r2, #21
 c0304c0:	3015      	adds	r0, #21
{
 c0304c2:	9c46      	ldr	r4, [sp, #280]	; 0x118
    err = ITS_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c0304c4:	f8df 804c 	ldr.w	r8, [pc, #76]	; c030514 <its_flash_block_to_block_move+0x5c>
    return (ITS_FLASH_AREA_ADDR + (block_id * ITS_BLOCK_SIZE) + offset);
 c0304c8:	eb03 3602 	add.w	r6, r3, r2, lsl #12
 c0304cc:	eb01 3500 	add.w	r5, r1, r0, lsl #12

    /* Gets flash addresses defined by block ID and offset parameters */
    src_flash_addr = get_phys_address(src_block, src_offset);
    dst_flash_addr = get_phys_address(dst_block, dst_offset);

    while (size > 0) {
 c0304d0:	b90c      	cbnz	r4, c0304d6 <its_flash_block_to_block_move+0x1e>

        /* Decrement remaining size to move */
        size -= bytes_to_move;
    };

    return PSA_SUCCESS;
 c0304d2:	4620      	mov	r0, r4
 c0304d4:	e00e      	b.n	c0304f4 <its_flash_block_to_block_move+0x3c>
        bytes_to_move = ITS_UTILS_MIN(size, MAX_BLOCK_DATA_COPY);
 c0304d6:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 c0304da:	4627      	mov	r7, r4
 c0304dc:	bf28      	it	cs
 c0304de:	f44f 7780 	movcs.w	r7, #256	; 0x100
    err = ITS_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c0304e2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 c0304e6:	463a      	mov	r2, r7
 c0304e8:	4669      	mov	r1, sp
 c0304ea:	4630      	mov	r0, r6
 c0304ec:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c0304ee:	b120      	cbz	r0, c0304fa <its_flash_block_to_block_move+0x42>
        return PSA_ERROR_STORAGE_FAILURE;
 c0304f0:	f06f 0091 	mvn.w	r0, #145	; 0x91
}
 c0304f4:	b040      	add	sp, #256	; 0x100
 c0304f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = ITS_FLASH_DEV_NAME.ProgramData(flash_addr, buff, size);
 c0304fa:	f8d8 3018 	ldr.w	r3, [r8, #24]
 c0304fe:	463a      	mov	r2, r7
 c030500:	4669      	mov	r1, sp
 c030502:	4628      	mov	r0, r5
 c030504:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c030506:	2800      	cmp	r0, #0
 c030508:	d1f2      	bne.n	c0304f0 <its_flash_block_to_block_move+0x38>
        src_flash_addr += bytes_to_move;
 c03050a:	443e      	add	r6, r7
        dst_flash_addr += bytes_to_move;
 c03050c:	443d      	add	r5, r7
        size -= bytes_to_move;
 c03050e:	1be4      	subs	r4, r4, r7
 c030510:	e7de      	b.n	c0304d0 <its_flash_block_to_block_move+0x18>
 c030512:	bf00      	nop
 c030514:	0c034f9c 	.word	0x0c034f9c

0c030518 <its_flash_erase_block>:

psa_status_t its_flash_erase_block(uint32_t block_id)
{
 c030518:	b508      	push	{r3, lr}
    err = ITS_FLASH_DEV_NAME.EraseSector(flash_addr);
 c03051a:	4b05      	ldr	r3, [pc, #20]	; (c030530 <its_flash_erase_block+0x18>)
    return (ITS_FLASH_AREA_ADDR + (block_id * ITS_BLOCK_SIZE) + offset);
 c03051c:	3015      	adds	r0, #21
    err = ITS_FLASH_DEV_NAME.EraseSector(flash_addr);
 c03051e:	69db      	ldr	r3, [r3, #28]
 c030520:	0300      	lsls	r0, r0, #12
 c030522:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c030524:	2800      	cmp	r0, #0
     * BLOCK_START_OFFSET parameters.
     */
    flash_addr = get_phys_address(block_id, BLOCK_START_OFFSET);

    return flash_erase(flash_addr);
}
 c030526:	bf14      	ite	ne
 c030528:	f06f 0091 	mvnne.w	r0, #145	; 0x91
 c03052c:	2000      	moveq	r0, #0
 c03052e:	bd08      	pop	{r3, pc}
 c030530:	0c034f9c 	.word	0x0c034f9c

0c030534 <its_flash_fs_prepare>:
}

psa_status_t its_flash_fs_prepare(void)
{
    /* Initialize metadata block with the valid/active metablock */
    return its_flash_fs_mblock_init();
 c030534:	f000 ba22 	b.w	c03097c <its_flash_fs_mblock_init>

0c030538 <its_flash_fs_wipe_all>:
}

psa_status_t its_flash_fs_wipe_all(void)
{
    /* Clean and initialize the metadata block */
    return its_flash_fs_mblock_reset_metablock();
 c030538:	f000 bb38 	b.w	c030bac <its_flash_fs_mblock_reset_metablock>

0c03053c <its_flash_fs_file_create>:
psa_status_t its_flash_fs_file_create(const uint8_t *fid,
                                      size_t max_size,
                                      size_t data_size,
                                      uint32_t flags,
                                      const uint8_t *data)
{
 c03053c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c030540:	b090      	sub	sp, #64	; 0x40
 c030542:	460c      	mov	r4, r1
    psa_status_t err;
    uint32_t idx;
    struct its_file_meta_t file_meta;

    /* Check if file already exists */
    err = its_flash_fs_mblock_get_file_idx(fid, &idx);
 c030544:	a903      	add	r1, sp, #12
{
 c030546:	4681      	mov	r9, r0
 c030548:	4615      	mov	r5, r2
 c03054a:	469a      	mov	sl, r3
 c03054c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    err = its_flash_fs_mblock_get_file_idx(fid, &idx);
 c030550:	f000 fa4e 	bl	c0309f0 <its_flash_fs_mblock_get_file_idx>
    if (err == PSA_SUCCESS) {
 c030554:	b920      	cbnz	r0, c030560 <its_flash_fs_file_create+0x24>
        /* If it exits return an error as needs to be removed first */
        return PSA_ERROR_INVALID_ARGUMENT;
 c030556:	f06f 0086 	mvn.w	r0, #134	; 0x86
        }
    }

    /* Write metadata header, swap metadata blocks and erase scratch blocks */
    return its_flash_fs_mblock_meta_update_finalize();
}
 c03055a:	b010      	add	sp, #64	; 0x40
 c03055c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    max_size = GET_ALIGNED_FLASH_BYTES(max_size);
 c030560:	3407      	adds	r4, #7
 c030562:	f024 0407 	bic.w	r4, r4, #7
    err = its_flash_fs_mblock_reserve_file(fid, max_size, flags, &idx,
 c030566:	af04      	add	r7, sp, #16
 c030568:	ae08      	add	r6, sp, #32
 c03056a:	9701      	str	r7, [sp, #4]
 c03056c:	9600      	str	r6, [sp, #0]
 c03056e:	ab03      	add	r3, sp, #12
 c030570:	4652      	mov	r2, sl
 c030572:	4621      	mov	r1, r4
 c030574:	4648      	mov	r0, r9
 c030576:	f000 fa7d 	bl	c030a74 <its_flash_fs_mblock_reserve_file>
    if (err != PSA_SUCCESS) {
 c03057a:	2800      	cmp	r0, #0
 c03057c:	d1ed      	bne.n	c03055a <its_flash_fs_file_create+0x1e>
    if (data_size != 0) {
 c03057e:	b305      	cbz	r5, c0305c2 <its_flash_fs_file_create+0x86>
        if ((data_size > max_size) || (data == NULL)) {
 c030580:	42ac      	cmp	r4, r5
 c030582:	d3e8      	bcc.n	c030556 <its_flash_fs_file_create+0x1a>
 c030584:	f1b8 0f00 	cmp.w	r8, #0
 c030588:	d0e5      	beq.n	c030556 <its_flash_fs_file_create+0x1a>
    return its_flash_fs_dblock_write_file(file_meta->lblock, f_offset,
 c03058a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    size = GET_ALIGNED_FLASH_BYTES(size);
 c03058e:	1dea      	adds	r2, r5, #7
    return its_flash_fs_dblock_write_file(file_meta->lblock, f_offset,
 c030590:	4643      	mov	r3, r8
 c030592:	f022 0207 	bic.w	r2, r2, #7
 c030596:	f000 f93e 	bl	c030816 <its_flash_fs_dblock_write_file>
        if (err != PSA_SUCCESS) {
 c03059a:	b110      	cbz	r0, c0305a2 <its_flash_fs_file_create+0x66>
            return PSA_ERROR_GENERIC_ERROR;
 c03059c:	f06f 0083 	mvn.w	r0, #131	; 0x83
 c0305a0:	e7db      	b.n	c03055a <its_flash_fs_file_create+0x1e>
        err = its_flash_fs_dblock_cp_remaining_data(&block_meta, &file_meta);
 c0305a2:	4631      	mov	r1, r6
 c0305a4:	4638      	mov	r0, r7
        file_meta.cur_size = data_size;
 c0305a6:	950a      	str	r5, [sp, #40]	; 0x28
        err = its_flash_fs_dblock_cp_remaining_data(&block_meta, &file_meta);
 c0305a8:	f000 f942 	bl	c030830 <its_flash_fs_dblock_cp_remaining_data>
        if (err != PSA_SUCCESS) {
 c0305ac:	2800      	cmp	r0, #0
 c0305ae:	d1f5      	bne.n	c03059c <its_flash_fs_file_create+0x60>
        block_meta.phy_id = its_flash_fs_mblock_cur_data_scratch_id(
 c0305b0:	9808      	ldr	r0, [sp, #32]
        cur_phys_block = block_meta.phy_id;
 c0305b2:	9c04      	ldr	r4, [sp, #16]
        block_meta.phy_id = its_flash_fs_mblock_cur_data_scratch_id(
 c0305b4:	f000 f9da 	bl	c03096c <its_flash_fs_mblock_cur_data_scratch_id>
        its_flash_fs_mblock_set_data_scratch(cur_phys_block, file_meta.lblock);
 c0305b8:	9908      	ldr	r1, [sp, #32]
        block_meta.phy_id = its_flash_fs_mblock_cur_data_scratch_id(
 c0305ba:	9004      	str	r0, [sp, #16]
        its_flash_fs_mblock_set_data_scratch(cur_phys_block, file_meta.lblock);
 c0305bc:	4620      	mov	r0, r4
 c0305be:	f000 faa5 	bl	c030b0c <its_flash_fs_mblock_set_data_scratch>
    err = its_flash_fs_mblock_update_scratch_block_meta(file_meta.lblock,
 c0305c2:	4639      	mov	r1, r7
 c0305c4:	9808      	ldr	r0, [sp, #32]
 c0305c6:	f000 faa7 	bl	c030b18 <its_flash_fs_mblock_update_scratch_block_meta>
    if (err != PSA_SUCCESS) {
 c0305ca:	2800      	cmp	r0, #0
 c0305cc:	d1e6      	bne.n	c03059c <its_flash_fs_file_create+0x60>
    err = its_flash_fs_mblock_update_scratch_file_meta(idx, &file_meta);
 c0305ce:	4631      	mov	r1, r6
 c0305d0:	9803      	ldr	r0, [sp, #12]
 c0305d2:	f000 fae1 	bl	c030b98 <its_flash_fs_mblock_update_scratch_file_meta>
    if (err != PSA_SUCCESS) {
 c0305d6:	2800      	cmp	r0, #0
 c0305d8:	d1e0      	bne.n	c03059c <its_flash_fs_file_create+0x60>
    err = its_flash_fs_mblock_cp_remaining_file_meta(idx);
 c0305da:	9803      	ldr	r0, [sp, #12]
 c0305dc:	f000 f9a8 	bl	c030930 <its_flash_fs_mblock_cp_remaining_file_meta>
    if (err != PSA_SUCCESS) {
 c0305e0:	2800      	cmp	r0, #0
 c0305e2:	d1db      	bne.n	c03059c <its_flash_fs_file_create+0x60>
    if ((file_meta.lblock != ITS_LOGICAL_DBLOCK0) || (data_size == 0)) {
 c0305e4:	9b08      	ldr	r3, [sp, #32]
 c0305e6:	b91b      	cbnz	r3, c0305f0 <its_flash_fs_file_create+0xb4>
 c0305e8:	b115      	cbz	r5, c0305f0 <its_flash_fs_file_create+0xb4>
    return its_flash_fs_mblock_meta_update_finalize();
 c0305ea:	f000 f9e7 	bl	c0309bc <its_flash_fs_mblock_meta_update_finalize>
 c0305ee:	e7b4      	b.n	c03055a <its_flash_fs_file_create+0x1e>
        err = its_flash_fs_mblock_migrate_lb0_data_to_scratch();
 c0305f0:	f000 fa26 	bl	c030a40 <its_flash_fs_mblock_migrate_lb0_data_to_scratch>
        if (err != PSA_SUCCESS) {
 c0305f4:	2800      	cmp	r0, #0
 c0305f6:	d0f8      	beq.n	c0305ea <its_flash_fs_file_create+0xae>
 c0305f8:	e7d0      	b.n	c03059c <its_flash_fs_file_create+0x60>

0c0305fa <its_flash_fs_file_get_info>:

psa_status_t its_flash_fs_file_get_info(const uint8_t *fid,
                                        struct its_file_info_t *info)
{
 c0305fa:	b570      	push	{r4, r5, r6, lr}
 c0305fc:	b08a      	sub	sp, #40	; 0x28
 c0305fe:	460d      	mov	r5, r1
    psa_status_t err;
    uint32_t idx;
    struct its_file_meta_t tmp_metadata;

    /* Get the meta data index */
    err = its_flash_fs_mblock_get_file_idx(fid, &idx);
 c030600:	a901      	add	r1, sp, #4
{
 c030602:	4606      	mov	r6, r0
    err = its_flash_fs_mblock_get_file_idx(fid, &idx);
 c030604:	f000 f9f4 	bl	c0309f0 <its_flash_fs_mblock_get_file_idx>
    if (err != PSA_SUCCESS) {
 c030608:	b120      	cbz	r0, c030614 <its_flash_fs_file_get_info+0x1a>
        return PSA_ERROR_DOES_NOT_EXIST;
 c03060a:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    info->size_max = tmp_metadata.max_size;
    info->size_current = tmp_metadata.cur_size;
    info->flags = tmp_metadata.flags;

    return PSA_SUCCESS;
}
 c03060e:	4620      	mov	r0, r4
 c030610:	b00a      	add	sp, #40	; 0x28
 c030612:	bd70      	pop	{r4, r5, r6, pc}
    err = its_flash_fs_mblock_read_file_meta(idx, &tmp_metadata);
 c030614:	a902      	add	r1, sp, #8
 c030616:	9801      	ldr	r0, [sp, #4]
 c030618:	f000 f9e0 	bl	c0309dc <its_flash_fs_mblock_read_file_meta>
    if (err != PSA_SUCCESS) {
 c03061c:	4604      	mov	r4, r0
 c03061e:	2800      	cmp	r0, #0
 c030620:	d1f5      	bne.n	c03060e <its_flash_fs_file_get_info+0x14>
    return (memcmp(ptr1, ptr2, num));
 c030622:	220c      	movs	r2, #12
 c030624:	a907      	add	r1, sp, #28
 c030626:	4630      	mov	r0, r6
 c030628:	f7e7 f99a 	bl	c017960 <memcmp>
    if (tfm_memcmp(fid, tmp_metadata.id, ITS_FILE_ID_SIZE)) {
 c03062c:	2800      	cmp	r0, #0
 c03062e:	d1ec      	bne.n	c03060a <its_flash_fs_file_get_info+0x10>
    info->size_max = tmp_metadata.max_size;
 c030630:	9b05      	ldr	r3, [sp, #20]
 c030632:	606b      	str	r3, [r5, #4]
    info->size_current = tmp_metadata.cur_size;
 c030634:	9b04      	ldr	r3, [sp, #16]
 c030636:	602b      	str	r3, [r5, #0]
    info->flags = tmp_metadata.flags;
 c030638:	9b06      	ldr	r3, [sp, #24]
 c03063a:	60ab      	str	r3, [r5, #8]
    return PSA_SUCCESS;
 c03063c:	e7e7      	b.n	c03060e <its_flash_fs_file_get_info+0x14>

0c03063e <its_flash_fs_file_delete>:
     */
    return its_flash_fs_mblock_meta_update_finalize();
}

psa_status_t its_flash_fs_file_delete(const uint8_t *fid)
{
 c03063e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c030642:	b08d      	sub	sp, #52	; 0x34
    size_t nbr_bytes_to_move = 0;
    uint32_t idx;
    struct its_file_meta_t file_meta;

    /* Get the file index */
    err = its_flash_fs_mblock_get_file_idx(fid, &del_file_idx);
 c030644:	a903      	add	r1, sp, #12
 c030646:	f000 f9d3 	bl	c0309f0 <its_flash_fs_mblock_get_file_idx>
    if (err != PSA_SUCCESS) {
 c03064a:	b120      	cbz	r0, c030656 <its_flash_fs_file_delete+0x18>
        return PSA_ERROR_DOES_NOT_EXIST;
 c03064c:	f06f 008b 	mvn.w	r0, #139	; 0x8b

    /* Update the metablock header, swap scratch and active blocks,
     * erase scratch blocks.
     */
    return its_flash_fs_mblock_meta_update_finalize();
}
 c030650:	b00d      	add	sp, #52	; 0x34
 c030652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    err = its_flash_fs_mblock_read_file_meta(del_file_idx, &file_meta);
 c030656:	a904      	add	r1, sp, #16
 c030658:	9803      	ldr	r0, [sp, #12]
 c03065a:	f000 f9bf 	bl	c0309dc <its_flash_fs_mblock_read_file_meta>
    if (err != PSA_SUCCESS) {
 c03065e:	2800      	cmp	r0, #0
 c030660:	d1f6      	bne.n	c030650 <its_flash_fs_file_delete+0x12>
    if (its_utils_validate_fid(file_meta.id) != PSA_SUCCESS) {
 c030662:	a809      	add	r0, sp, #36	; 0x24
 c030664:	f000 fafc 	bl	c030c60 <its_utils_validate_fid>
 c030668:	4601      	mov	r1, r0
 c03066a:	2800      	cmp	r0, #0
 c03066c:	d1ee      	bne.n	c03064c <its_flash_fs_file_delete+0xe>
    del_file_data_idx = file_meta.data_idx;
 c03066e:	e9dd 5904 	ldrd	r5, r9, [sp, #16]
    file_meta = (struct its_file_meta_t){0};
 c030672:	2220      	movs	r2, #32
 c030674:	a804      	add	r0, sp, #16
    del_file_max_size = file_meta.max_size;
 c030676:	f8dd 801c 	ldr.w	r8, [sp, #28]
    file_meta = (struct its_file_meta_t){0};
 c03067a:	f7e7 f9a4 	bl	c0179c6 <memset>
    err = its_flash_fs_mblock_update_scratch_file_meta(del_file_idx,
 c03067e:	a904      	add	r1, sp, #16
 c030680:	9803      	ldr	r0, [sp, #12]
 c030682:	f000 fa89 	bl	c030b98 <its_flash_fs_mblock_update_scratch_file_meta>
    if (err != PSA_SUCCESS) {
 c030686:	2800      	cmp	r0, #0
 c030688:	d1e2      	bne.n	c030650 <its_flash_fs_file_delete+0x12>
    for (idx = 0; idx < ITS_MAX_NUM_FILES; idx++) {
 c03068a:	4604      	mov	r4, r0
    size_t nbr_bytes_to_move = 0;
 c03068c:	4607      	mov	r7, r0
    size_t src_offset = ITS_BLOCK_SIZE;
 c03068e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
        if (idx == del_file_idx) {
 c030692:	9b03      	ldr	r3, [sp, #12]
 c030694:	42a3      	cmp	r3, r4
 c030696:	d01d      	beq.n	c0306d4 <its_flash_fs_file_delete+0x96>
        err = its_flash_fs_mblock_read_file_meta(idx, &file_meta);
 c030698:	a904      	add	r1, sp, #16
 c03069a:	4620      	mov	r0, r4
 c03069c:	f000 f99e 	bl	c0309dc <its_flash_fs_mblock_read_file_meta>
        if (err != PSA_SUCCESS) {
 c0306a0:	2800      	cmp	r0, #0
 c0306a2:	d1d5      	bne.n	c030650 <its_flash_fs_file_delete+0x12>
        if ((file_meta.lblock == del_file_lblock) &&
 c0306a4:	9b04      	ldr	r3, [sp, #16]
 c0306a6:	42ab      	cmp	r3, r5
 c0306a8:	d10e      	bne.n	c0306c8 <its_flash_fs_file_delete+0x8a>
            (its_utils_validate_fid(file_meta.id) == PSA_SUCCESS)) {
 c0306aa:	a809      	add	r0, sp, #36	; 0x24
 c0306ac:	f000 fad8 	bl	c030c60 <its_utils_validate_fid>
        if ((file_meta.lblock == del_file_lblock) &&
 c0306b0:	b950      	cbnz	r0, c0306c8 <its_flash_fs_file_delete+0x8a>
            if (file_meta.data_idx > del_file_data_idx) {
 c0306b2:	9b05      	ldr	r3, [sp, #20]
 c0306b4:	454b      	cmp	r3, r9
 c0306b6:	d907      	bls.n	c0306c8 <its_flash_fs_file_delete+0x8a>
 c0306b8:	429e      	cmp	r6, r3
 c0306ba:	bf28      	it	cs
 c0306bc:	461e      	movcs	r6, r3
                file_meta.data_idx -= del_file_max_size;
 c0306be:	eba3 0308 	sub.w	r3, r3, r8
 c0306c2:	9305      	str	r3, [sp, #20]
                nbr_bytes_to_move += file_meta.max_size;
 c0306c4:	9b07      	ldr	r3, [sp, #28]
 c0306c6:	441f      	add	r7, r3
        err = its_flash_fs_mblock_update_scratch_file_meta(idx, &file_meta);
 c0306c8:	a904      	add	r1, sp, #16
 c0306ca:	4620      	mov	r0, r4
 c0306cc:	f000 fa64 	bl	c030b98 <its_flash_fs_mblock_update_scratch_file_meta>
        if (err != PSA_SUCCESS) {
 c0306d0:	2800      	cmp	r0, #0
 c0306d2:	d1bd      	bne.n	c030650 <its_flash_fs_file_delete+0x12>
    for (idx = 0; idx < ITS_MAX_NUM_FILES; idx++) {
 c0306d4:	3401      	adds	r4, #1
 c0306d6:	2c0a      	cmp	r4, #10
 c0306d8:	d1db      	bne.n	c030692 <its_flash_fs_file_delete+0x54>
    err = its_flash_fs_dblock_compact_block(del_file_lblock, del_file_max_size,
 c0306da:	9700      	str	r7, [sp, #0]
 c0306dc:	464b      	mov	r3, r9
 c0306de:	4632      	mov	r2, r6
 c0306e0:	4641      	mov	r1, r8
 c0306e2:	4628      	mov	r0, r5
 c0306e4:	f000 f83a 	bl	c03075c <its_flash_fs_dblock_compact_block>
    if (err != PSA_SUCCESS) {
 c0306e8:	2800      	cmp	r0, #0
 c0306ea:	d1b1      	bne.n	c030650 <its_flash_fs_file_delete+0x12>
    if (del_file_lblock != ITS_LOGICAL_DBLOCK0) {
 c0306ec:	b915      	cbnz	r5, c0306f4 <its_flash_fs_file_delete+0xb6>
    return its_flash_fs_mblock_meta_update_finalize();
 c0306ee:	f000 f965 	bl	c0309bc <its_flash_fs_mblock_meta_update_finalize>
 c0306f2:	e7ad      	b.n	c030650 <its_flash_fs_file_delete+0x12>
        err = its_flash_fs_mblock_migrate_lb0_data_to_scratch();
 c0306f4:	f000 f9a4 	bl	c030a40 <its_flash_fs_mblock_migrate_lb0_data_to_scratch>
        if (err != PSA_SUCCESS) {
 c0306f8:	2800      	cmp	r0, #0
 c0306fa:	d0f8      	beq.n	c0306ee <its_flash_fs_file_delete+0xb0>
            return PSA_ERROR_GENERIC_ERROR;
 c0306fc:	f06f 0083 	mvn.w	r0, #131	; 0x83
 c030700:	e7a6      	b.n	c030650 <its_flash_fs_file_delete+0x12>

0c030702 <its_flash_fs_file_read>:

psa_status_t its_flash_fs_file_read(const uint8_t *fid,
                                    size_t size,
                                    size_t offset,
                                    uint8_t *data)
{
 c030702:	b5f0      	push	{r4, r5, r6, r7, lr}
 c030704:	b08b      	sub	sp, #44	; 0x2c
 c030706:	460d      	mov	r5, r1
    psa_status_t err;
    uint32_t idx;
    struct its_file_meta_t tmp_metadata;

    /* Get the file index */
    err = its_flash_fs_mblock_get_file_idx(fid, &idx);
 c030708:	a901      	add	r1, sp, #4
{
 c03070a:	4607      	mov	r7, r0
 c03070c:	4614      	mov	r4, r2
 c03070e:	461e      	mov	r6, r3
    err = its_flash_fs_mblock_get_file_idx(fid, &idx);
 c030710:	f000 f96e 	bl	c0309f0 <its_flash_fs_mblock_get_file_idx>
    if (err != PSA_SUCCESS) {
 c030714:	b118      	cbz	r0, c03071e <its_flash_fs_file_read+0x1c>
        return PSA_ERROR_DOES_NOT_EXIST;
 c030716:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    if (err != PSA_SUCCESS) {
        return PSA_ERROR_GENERIC_ERROR;
    }

    return PSA_SUCCESS;
}
 c03071a:	b00b      	add	sp, #44	; 0x2c
 c03071c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = its_flash_fs_mblock_read_file_meta(idx, &tmp_metadata);
 c03071e:	a902      	add	r1, sp, #8
 c030720:	9801      	ldr	r0, [sp, #4]
 c030722:	f000 f95b 	bl	c0309dc <its_flash_fs_mblock_read_file_meta>
    if (err != PSA_SUCCESS) {
 c030726:	b110      	cbz	r0, c03072e <its_flash_fs_file_read+0x2c>
        return PSA_ERROR_GENERIC_ERROR;
 c030728:	f06f 0083 	mvn.w	r0, #131	; 0x83
 c03072c:	e7f5      	b.n	c03071a <its_flash_fs_file_read+0x18>
 c03072e:	220c      	movs	r2, #12
 c030730:	a907      	add	r1, sp, #28
 c030732:	4638      	mov	r0, r7
 c030734:	f7e7 f914 	bl	c017960 <memcmp>
    if (tfm_memcmp(fid, tmp_metadata.id, ITS_FILE_ID_SIZE)) {
 c030738:	2800      	cmp	r0, #0
 c03073a:	d1ec      	bne.n	c030716 <its_flash_fs_file_read+0x14>
    err = its_utils_check_contained_in(tmp_metadata.cur_size, offset, size);
 c03073c:	462a      	mov	r2, r5
 c03073e:	4621      	mov	r1, r4
 c030740:	9804      	ldr	r0, [sp, #16]
 c030742:	f000 fa81 	bl	c030c48 <its_utils_check_contained_in>
    if (err != PSA_SUCCESS) {
 c030746:	2800      	cmp	r0, #0
 c030748:	d1e7      	bne.n	c03071a <its_flash_fs_file_read+0x18>
    err = its_flash_fs_dblock_read_file(&tmp_metadata, offset, size, data);
 c03074a:	4633      	mov	r3, r6
 c03074c:	462a      	mov	r2, r5
 c03074e:	4621      	mov	r1, r4
 c030750:	a802      	add	r0, sp, #8
 c030752:	f000 f847 	bl	c0307e4 <its_flash_fs_dblock_read_file>
    if (err != PSA_SUCCESS) {
 c030756:	2800      	cmp	r0, #0
 c030758:	d0df      	beq.n	c03071a <its_flash_fs_file_read+0x18>
 c03075a:	e7e5      	b.n	c030728 <its_flash_fs_file_read+0x26>

0c03075c <its_flash_fs_dblock_compact_block>:
psa_status_t its_flash_fs_dblock_compact_block(uint32_t lblock,
                                               size_t free_size,
                                               size_t src_offset,
                                               size_t dst_offset,
                                               size_t size)
{
 c03075c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c030760:	b087      	sub	sp, #28
 c030762:	460f      	mov	r7, r1
    struct its_block_meta_t block_meta;
    psa_status_t err;
    uint32_t scratch_id = 0;

    /* Read current block meta */
    err = its_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c030764:	a902      	add	r1, sp, #8
{
 c030766:	4606      	mov	r6, r0
 c030768:	4691      	mov	r9, r2
 c03076a:	461d      	mov	r5, r3
 c03076c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    err = its_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c030770:	f000 f95c 	bl	c030a2c <its_flash_fs_mblock_read_block_metadata>
    if (err != PSA_SUCCESS) {
 c030774:	4604      	mov	r4, r0
 c030776:	bb38      	cbnz	r0, c0307c8 <its_flash_fs_dblock_compact_block+0x6c>
        return err;
    }

    /* Release data from block meta */
    block_meta.free_size += free_size;
 c030778:	9904      	ldr	r1, [sp, #16]

    /* Save scratch data block physical IDs */
    scratch_id = its_flash_fs_mblock_cur_data_scratch_id(lblock);
 c03077a:	4630      	mov	r0, r6
    block_meta.free_size += free_size;
 c03077c:	4439      	add	r1, r7
 c03077e:	9104      	str	r1, [sp, #16]
    scratch_id = its_flash_fs_mblock_cur_data_scratch_id(lblock);
 c030780:	f000 f8f4 	bl	c03096c <its_flash_fs_mblock_cur_data_scratch_id>
 c030784:	4607      	mov	r7, r0

    /* Check if there are bytes to be compacted */
    if (size > 0) {
 c030786:	f1b8 0f00 	cmp.w	r8, #0
 c03078a:	d112      	bne.n	c0307b2 <its_flash_fs_dblock_compact_block+0x56>
        if (err != PSA_SUCCESS) {
            return PSA_ERROR_GENERIC_ERROR;
        }
    }

    if (dst_offset > block_meta.data_start) {
 c03078c:	9b03      	ldr	r3, [sp, #12]
 c03078e:	42ab      	cmp	r3, r5
 c030790:	d31e      	bcc.n	c0307d0 <its_flash_fs_dblock_compact_block+0x74>

    /* Swap the scratch and current data blocks. Must swap even with nothing
     * to compact so that deleted file is left in scratch and erased as part
     * of finalization.
     */
    its_flash_fs_mblock_set_data_scratch(block_meta.phy_id, lblock);
 c030792:	4631      	mov	r1, r6
 c030794:	9802      	ldr	r0, [sp, #8]
 c030796:	f000 f9b9 	bl	c030b0c <its_flash_fs_mblock_set_data_scratch>

    /* Set scratch block ID as the one which contains the new data block */
    block_meta.phy_id = scratch_id;

    /* Update block metadata in scratch metadata block */
    err = its_flash_fs_mblock_update_scratch_block_meta(lblock, &block_meta);
 c03079a:	a902      	add	r1, sp, #8
 c03079c:	4630      	mov	r0, r6
    block_meta.phy_id = scratch_id;
 c03079e:	9702      	str	r7, [sp, #8]
    err = its_flash_fs_mblock_update_scratch_block_meta(lblock, &block_meta);
 c0307a0:	f000 f9ba 	bl	c030b18 <its_flash_fs_mblock_update_scratch_block_meta>
    if (err != PSA_SUCCESS) {
 c0307a4:	4604      	mov	r4, r0
 c0307a6:	b178      	cbz	r0, c0307c8 <its_flash_fs_dblock_compact_block+0x6c>
        /* Swap back the data block as there was an issue in the process */
        its_flash_fs_mblock_set_data_scratch(scratch_id, lblock);
 c0307a8:	4631      	mov	r1, r6
 c0307aa:	4638      	mov	r0, r7
 c0307ac:	f000 f9ae 	bl	c030b0c <its_flash_fs_mblock_set_data_scratch>
        return err;
 c0307b0:	e00a      	b.n	c0307c8 <its_flash_fs_dblock_compact_block+0x6c>
        err = its_flash_block_to_block_move(scratch_id, dst_offset,
 c0307b2:	f8cd 8000 	str.w	r8, [sp]
 c0307b6:	464b      	mov	r3, r9
 c0307b8:	9a02      	ldr	r2, [sp, #8]
 c0307ba:	4629      	mov	r1, r5
 c0307bc:	f7ff fe7c 	bl	c0304b8 <its_flash_block_to_block_move>
        if (err != PSA_SUCCESS) {
 c0307c0:	2800      	cmp	r0, #0
 c0307c2:	d0e3      	beq.n	c03078c <its_flash_fs_dblock_compact_block+0x30>
            return PSA_ERROR_GENERIC_ERROR;
 c0307c4:	f06f 0483 	mvn.w	r4, #131	; 0x83
    }

    return err;
}
 c0307c8:	4620      	mov	r0, r4
 c0307ca:	b007      	add	sp, #28
 c0307cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = its_flash_block_to_block_move(scratch_id,
 c0307d0:	1aed      	subs	r5, r5, r3
 c0307d2:	9500      	str	r5, [sp, #0]
 c0307d4:	9a02      	ldr	r2, [sp, #8]
 c0307d6:	4619      	mov	r1, r3
 c0307d8:	4638      	mov	r0, r7
 c0307da:	f7ff fe6d 	bl	c0304b8 <its_flash_block_to_block_move>
        if (err != PSA_SUCCESS) {
 c0307de:	2800      	cmp	r0, #0
 c0307e0:	d0d7      	beq.n	c030792 <its_flash_fs_dblock_compact_block+0x36>
 c0307e2:	e7ef      	b.n	c0307c4 <its_flash_fs_dblock_compact_block+0x68>

0c0307e4 <its_flash_fs_dblock_read_file>:

psa_status_t its_flash_fs_dblock_read_file(struct its_file_meta_t *file_meta,
                                           size_t offset,
                                           size_t size,
                                           uint8_t *buf)
{
 c0307e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 c0307e6:	b085      	sub	sp, #20
 c0307e8:	4604      	mov	r4, r0
 c0307ea:	460e      	mov	r6, r1
    err = its_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c0307ec:	6800      	ldr	r0, [r0, #0]
 c0307ee:	4669      	mov	r1, sp
{
 c0307f0:	4617      	mov	r7, r2
 c0307f2:	461d      	mov	r5, r3
    err = its_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c0307f4:	f000 f91a 	bl	c030a2c <its_flash_fs_mblock_read_block_metadata>
    if (err != PSA_SUCCESS) {
 c0307f8:	b110      	cbz	r0, c030800 <its_flash_fs_dblock_read_file+0x1c>
    uint32_t phys_block;
    size_t pos;

    phys_block = its_dblock_lo_to_phy(file_meta->lblock);
    if (phys_block == ITS_BLOCK_INVALID_ID) {
        return PSA_ERROR_GENERIC_ERROR;
 c0307fa:	f06f 0083 	mvn.w	r0, #131	; 0x83
 c0307fe:	e008      	b.n	c030812 <its_flash_fs_dblock_read_file+0x2e>
    return block_meta.phy_id;
 c030800:	9800      	ldr	r0, [sp, #0]
    if (phys_block == ITS_BLOCK_INVALID_ID) {
 c030802:	1c43      	adds	r3, r0, #1
 c030804:	d0f9      	beq.n	c0307fa <its_flash_fs_dblock_read_file+0x16>
    }

    pos = (file_meta->data_idx + offset);
 c030806:	6862      	ldr	r2, [r4, #4]

    return its_flash_read(phys_block, buf, pos, size);
 c030808:	463b      	mov	r3, r7
 c03080a:	4432      	add	r2, r6
 c03080c:	4629      	mov	r1, r5
 c03080e:	f7ff fe33 	bl	c030478 <its_flash_read>
}
 c030812:	b005      	add	sp, #20
 c030814:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c030816 <its_flash_fs_dblock_write_file>:

psa_status_t its_flash_fs_dblock_write_file(uint32_t lblock,
                                            size_t offset,
                                            size_t size,
                                            const uint8_t *data)
{
 c030816:	b570      	push	{r4, r5, r6, lr}
 c030818:	460d      	mov	r5, r1
 c03081a:	4616      	mov	r6, r2
 c03081c:	461c      	mov	r4, r3
    uint32_t scratch_id;

    scratch_id = its_flash_fs_mblock_cur_data_scratch_id(lblock);
 c03081e:	f000 f8a5 	bl	c03096c <its_flash_fs_mblock_cur_data_scratch_id>

    return its_flash_write(scratch_id, data, offset, size);
 c030822:	4633      	mov	r3, r6
 c030824:	462a      	mov	r2, r5
 c030826:	4621      	mov	r1, r4
}
 c030828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return its_flash_write(scratch_id, data, offset, size);
 c03082c:	f7ff be34 	b.w	c030498 <its_flash_write>

0c030830 <its_flash_fs_dblock_cp_remaining_data>:

psa_status_t its_flash_fs_dblock_cp_remaining_data(
                                      const struct its_block_meta_t *block_meta,
                                      const struct its_file_meta_t *file_meta)
{
 c030830:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c030832:	4604      	mov	r4, r0
 c030834:	460d      	mov	r5, r1
    size_t after_file_offset;
    psa_status_t err;
    uint32_t scratch_id;
    size_t wrt_bytes;

    scratch_id = its_flash_fs_mblock_cur_data_scratch_id(file_meta->lblock);
 c030836:	6808      	ldr	r0, [r1, #0]
 c030838:	f000 f898 	bl	c03096c <its_flash_fs_mblock_cur_data_scratch_id>

    if (file_meta->data_idx > block_meta->data_start) {
 c03083c:	686a      	ldr	r2, [r5, #4]
 c03083e:	6863      	ldr	r3, [r4, #4]
    scratch_id = its_flash_fs_mblock_cur_data_scratch_id(file_meta->lblock);
 c030840:	4606      	mov	r6, r0
    if (file_meta->data_idx > block_meta->data_start) {
 c030842:	429a      	cmp	r2, r3
 c030844:	d80e      	bhi.n	c030864 <its_flash_fs_dblock_cp_remaining_data+0x34>
    }

    /* The referenced file data is already in the scratch block, as it is
     * processed before calling of this function.
     */
    after_file_offset = file_meta->data_idx + file_meta->max_size;
 c030846:	68ea      	ldr	r2, [r5, #12]
 c030848:	686b      	ldr	r3, [r5, #4]

    /* Calculate amount of bytes after the manipulated file */
    wrt_bytes = (ITS_BLOCK_SIZE - (after_file_offset + block_meta->free_size));

    /* Data after updated content */
    return its_flash_block_to_block_move(scratch_id, after_file_offset,
 c03084a:	4630      	mov	r0, r6
    after_file_offset = file_meta->data_idx + file_meta->max_size;
 c03084c:	4413      	add	r3, r2
    wrt_bytes = (ITS_BLOCK_SIZE - (after_file_offset + block_meta->free_size));
 c03084e:	68a2      	ldr	r2, [r4, #8]
    return its_flash_block_to_block_move(scratch_id, after_file_offset,
 c030850:	4619      	mov	r1, r3
    wrt_bytes = (ITS_BLOCK_SIZE - (after_file_offset + block_meta->free_size));
 c030852:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 c030856:	1ad2      	subs	r2, r2, r3
    return its_flash_block_to_block_move(scratch_id, after_file_offset,
 c030858:	9200      	str	r2, [sp, #0]
 c03085a:	6822      	ldr	r2, [r4, #0]
 c03085c:	f7ff fe2c 	bl	c0304b8 <its_flash_block_to_block_move>
                                         block_meta->phy_id, after_file_offset,
                                         wrt_bytes);
}
 c030860:	b002      	add	sp, #8
 c030862:	bd70      	pop	{r4, r5, r6, pc}
        wrt_bytes = (file_meta->data_idx - block_meta->data_start);
 c030864:	1ad2      	subs	r2, r2, r3
        err = its_flash_block_to_block_move(scratch_id,
 c030866:	9200      	str	r2, [sp, #0]
 c030868:	4619      	mov	r1, r3
 c03086a:	6822      	ldr	r2, [r4, #0]
 c03086c:	f7ff fe24 	bl	c0304b8 <its_flash_block_to_block_move>
        if (err != PSA_SUCCESS) {
 c030870:	2800      	cmp	r0, #0
 c030872:	d0e8      	beq.n	c030846 <its_flash_fs_dblock_cp_remaining_data+0x16>
 c030874:	e7f4      	b.n	c030860 <its_flash_fs_dblock_cp_remaining_data+0x30>
	...

0c030878 <its_mblock_write_scratch_meta_header>:
 * \return scratch metablock's id
 */
__attribute__((always_inline))
static inline uint32_t its_cur_meta_scratch_id(void)
{
    return its_flash_fs_ctx.scratch_metablock;
 c030878:	4a06      	ldr	r2, [pc, #24]	; (c030894 <its_mblock_write_scratch_meta_header+0x1c>)
        /* Reset the swap count to 0 */
        its_flash_fs_ctx.meta_block_header.active_swap_count = 0;
    }

    /* Write the metadata block header */
    return its_flash_write(scratch_metablock,
 c03087a:	4906      	ldr	r1, [pc, #24]	; (c030894 <its_mblock_write_scratch_meta_header+0x1c>)
    its_flash_fs_ctx.meta_block_header.active_swap_count += 1;
 c03087c:	7953      	ldrb	r3, [r2, #5]
    return its_flash_fs_ctx.scratch_metablock;
 c03087e:	68d0      	ldr	r0, [r2, #12]
    its_flash_fs_ctx.meta_block_header.active_swap_count += 1;
 c030880:	3301      	adds	r3, #1
 c030882:	b2db      	uxtb	r3, r3
                                                 : PSA_SUCCESS;
 c030884:	2bff      	cmp	r3, #255	; 0xff
        its_flash_fs_ctx.meta_block_header.active_swap_count = 0;
 c030886:	bf08      	it	eq
 c030888:	2300      	moveq	r3, #0
 c03088a:	7153      	strb	r3, [r2, #5]
    return its_flash_write(scratch_metablock,
 c03088c:	2308      	movs	r3, #8
 c03088e:	2200      	movs	r2, #0
 c030890:	f7ff be02 	b.w	c030498 <its_flash_write>
 c030894:	3003b238 	.word	0x3003b238

0c030898 <its_init_get_active_metablock>:
 * \brief Validates and find the valid-active metablock
 *
 * \return Returns value as specified in \ref psa_status_t
 */
static psa_status_t its_init_get_active_metablock(void)
{
 c030898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t num_valid_meta_blocks = 0;

    /* First two blocks are reserved for metadata */

    /* Read the header of both the metdata blocks */
    err = its_flash_read(ITS_METADATA_BLOCK0, (uint8_t *)&h_meta0,
 c03089a:	2200      	movs	r2, #0
 c03089c:	2308      	movs	r3, #8
 c03089e:	4669      	mov	r1, sp
 c0308a0:	4610      	mov	r0, r2
 c0308a2:	f7ff fde9 	bl	c030478 <its_flash_read>
                         0, ITS_BLOCK_META_HEADER_SIZE);
    if (err != PSA_SUCCESS) {
 c0308a6:	2800      	cmp	r0, #0
 c0308a8:	d137      	bne.n	c03091a <its_init_get_active_metablock+0x82>
        return err;
    }

    err = its_flash_read(ITS_METADATA_BLOCK1, (uint8_t *)&h_meta1,
 c0308aa:	2308      	movs	r3, #8
 c0308ac:	4602      	mov	r2, r0
 c0308ae:	eb0d 0103 	add.w	r1, sp, r3
 c0308b2:	2001      	movs	r0, #1
 c0308b4:	f7ff fde0 	bl	c030478 <its_flash_read>
                         0, ITS_BLOCK_META_HEADER_SIZE);
    if (err != PSA_SUCCESS) {
 c0308b8:	bb78      	cbnz	r0, c03091a <its_init_get_active_metablock+0x82>
    err = its_mblock_validate_fs_version(h_meta->fs_version);
 c0308ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
                                                 : PSA_SUCCESS;
 c0308be:	2b01      	cmp	r3, #1
 c0308c0:	d11b      	bne.n	c0308fa <its_init_get_active_metablock+0x62>
                                                 : PSA_SUCCESS;
 c0308c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
     * update operation to complete. Need to find out the valid
     * metadata block now.
     */
    if (its_mblock_validate_header_meta(&h_meta0) == PSA_SUCCESS) {
        num_valid_meta_blocks++;
        cur_meta_block = ITS_METADATA_BLOCK0;
 c0308c6:	2aff      	cmp	r2, #255	; 0xff
 c0308c8:	bf0a      	itet	eq
 c0308ca:	f04f 31ff 	moveq.w	r1, #4294967295
 c0308ce:	2100      	movne	r1, #0
 c0308d0:	2300      	moveq	r3, #0
                                                 : PSA_SUCCESS;
 c0308d2:	f89d 400c 	ldrb.w	r4, [sp, #12]
 c0308d6:	2c01      	cmp	r4, #1
 c0308d8:	d123      	bne.n	c030922 <its_init_get_active_metablock+0x8a>
        err = its_mblock_validate_swap_count(h_meta->active_swap_count);
 c0308da:	f89d 200d 	ldrb.w	r2, [sp, #13]
                                                 : PSA_SUCCESS;
 c0308de:	2aff      	cmp	r2, #255	; 0xff
 c0308e0:	d01f      	beq.n	c030922 <its_init_get_active_metablock+0x8a>

    /* If there are more than 1 potential metablocks, the previous
     * update operation was interrupted by power failure. In which case,
     * need to find out which one is potentially latest metablock.
     */
    if (num_valid_meta_blocks > 1) {
 c0308e2:	2b01      	cmp	r3, #1
 c0308e4:	d11b      	bne.n	c03091e <its_init_get_active_metablock+0x86>
        cur_meta_block = its_mblock_latest_meta_block(&h_meta0, &h_meta1);
 c0308e6:	f89d 1005 	ldrb.w	r1, [sp, #5]
    if ((meta1_swap_count == 0) && (meta0_swap_count != 1)) {
 c0308ea:	b952      	cbnz	r2, c030902 <its_init_get_active_metablock+0x6a>
 c0308ec:	2901      	cmp	r1, #1
 c0308ee:	d10d      	bne.n	c03090c <its_init_get_active_metablock+0x74>
        cur_meta = ITS_METADATA_BLOCK1;
 c0308f0:	4291      	cmp	r1, r2
 c0308f2:	bf2c      	ite	cs
 c0308f4:	2300      	movcs	r3, #0
 c0308f6:	2301      	movcc	r3, #1
 c0308f8:	e008      	b.n	c03090c <its_init_get_active_metablock+0x74>
    uint8_t num_valid_meta_blocks = 0;
 c0308fa:	4603      	mov	r3, r0
    uint32_t cur_meta_block = ITS_BLOCK_INVALID_ID;
 c0308fc:	f04f 31ff 	mov.w	r1, #4294967295
 c030900:	e7e7      	b.n	c0308d2 <its_init_get_active_metablock+0x3a>
    } else if ((meta0_swap_count == 0) && (meta1_swap_count != 1)) {
 c030902:	2900      	cmp	r1, #0
 c030904:	d1f4      	bne.n	c0308f0 <its_init_get_active_metablock+0x58>
        cur_meta = ITS_METADATA_BLOCK1;
 c030906:	3a01      	subs	r2, #1
 c030908:	4253      	negs	r3, r2
 c03090a:	4153      	adcs	r3, r2
        cur_meta_block = its_mblock_latest_meta_block(&h_meta0, &h_meta1);
 c03090c:	4619      	mov	r1, r3
    } else if (num_valid_meta_blocks == 0) {
        return PSA_ERROR_GENERIC_ERROR;
    }

    its_flash_fs_ctx.active_metablock = cur_meta_block;
 c03090e:	4b07      	ldr	r3, [pc, #28]	; (c03092c <its_init_get_active_metablock+0x94>)
 c030910:	6099      	str	r1, [r3, #8]
    its_flash_fs_ctx.scratch_metablock = ITS_OTHER_META_BLOCK(cur_meta_block);
 c030912:	fab1 f181 	clz	r1, r1
 c030916:	0949      	lsrs	r1, r1, #5
 c030918:	60d9      	str	r1, [r3, #12]

    return PSA_SUCCESS;
}
 c03091a:	b004      	add	sp, #16
 c03091c:	bd10      	pop	{r4, pc}
        cur_meta_block = ITS_METADATA_BLOCK1;
 c03091e:	4621      	mov	r1, r4
 c030920:	e7f5      	b.n	c03090e <its_init_get_active_metablock+0x76>
    } else if (num_valid_meta_blocks == 0) {
 c030922:	2b00      	cmp	r3, #0
 c030924:	d1f3      	bne.n	c03090e <its_init_get_active_metablock+0x76>
        return PSA_ERROR_GENERIC_ERROR;
 c030926:	f06f 0083 	mvn.w	r0, #131	; 0x83
 c03092a:	e7f6      	b.n	c03091a <its_init_get_active_metablock+0x82>
 c03092c:	3003b238 	.word	0x3003b238

0c030930 <its_flash_fs_mblock_cp_remaining_file_meta>:
    return its_flash_fs_ctx.scratch_metablock;
 c030930:	4b0d      	ldr	r3, [pc, #52]	; (c030968 <its_flash_fs_mblock_cp_remaining_file_meta+0x38>)

psa_status_t its_flash_fs_mblock_cp_remaining_file_meta(uint32_t idx)
{
 c030932:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return its_flash_fs_ctx.active_metablock;
 c030934:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
    meta_block = its_mblock_cur_meta_active();
    /* Calculate the position */
    pos = its_mblock_file_meta_offset(0);
    /* Copy rest of the block data from previous block */
    /* Data before updated content */
    err = its_flash_block_to_block_move(scratch_block, pos, meta_block, pos,
 c030938:	2318      	movs	r3, #24
                                        (idx * ITS_FILE_METADATA_SIZE));
 c03093a:	0144      	lsls	r4, r0, #5
    err = its_flash_block_to_block_move(scratch_block, pos, meta_block, pos,
 c03093c:	9400      	str	r4, [sp, #0]
 c03093e:	4632      	mov	r2, r6
 c030940:	4619      	mov	r1, r3
 c030942:	4628      	mov	r0, r5
 c030944:	f7ff fdb8 	bl	c0304b8 <its_flash_block_to_block_move>
    if (err != PSA_SUCCESS) {
 c030948:	b960      	cbnz	r0, c030964 <its_flash_fs_mblock_cp_remaining_file_meta+0x34>
           + (idx * ITS_FILE_METADATA_SIZE);
 c03094a:	f104 0338 	add.w	r3, r4, #56	; 0x38

    /* Get end of file meta position which is the position after the last
     * byte of file meta.
     */
    end = its_mblock_file_meta_offset(ITS_MAX_NUM_FILES);
    if (end > pos) {
 c03094e:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 c030952:	d207      	bcs.n	c030964 <its_flash_fs_mblock_cp_remaining_file_meta+0x34>
        err = its_flash_block_to_block_move(scratch_block, pos, meta_block,
 c030954:	f5c3 72ac 	rsb	r2, r3, #344	; 0x158
 c030958:	9200      	str	r2, [sp, #0]
 c03095a:	4619      	mov	r1, r3
 c03095c:	4632      	mov	r2, r6
 c03095e:	4628      	mov	r0, r5
 c030960:	f7ff fdaa 	bl	c0304b8 <its_flash_block_to_block_move>
                                            pos, (end - pos));
    }

    return err;
}
 c030964:	b002      	add	sp, #8
 c030966:	bd70      	pop	{r4, r5, r6, pc}
 c030968:	3003b238 	.word	0x3003b238

0c03096c <its_flash_fs_mblock_cur_data_scratch_id>:

uint32_t its_flash_fs_mblock_cur_data_scratch_id(uint32_t lblock)
{
 c03096c:	4b02      	ldr	r3, [pc, #8]	; (c030978 <its_flash_fs_mblock_cur_data_scratch_id+0xc>)
    if (lblock == ITS_LOGICAL_DBLOCK0) {
 c03096e:	b908      	cbnz	r0, c030974 <its_flash_fs_mblock_cur_data_scratch_id+0x8>
    return its_flash_fs_ctx.scratch_metablock;
 c030970:	68d8      	ldr	r0, [r3, #12]
        /* Scratch logical data block 0 physical IDs */
        return its_cur_meta_scratch_id();
 c030972:	4770      	bx	lr
    }

    return its_flash_fs_ctx.meta_block_header.scratch_dblock;
 c030974:	6818      	ldr	r0, [r3, #0]
}
 c030976:	4770      	bx	lr
 c030978:	3003b238 	.word	0x3003b238

0c03097c <its_flash_fs_mblock_init>:

    return PSA_ERROR_DOES_NOT_EXIST;
}

psa_status_t its_flash_fs_mblock_init(void)
{
 c03097c:	b510      	push	{r4, lr}
    psa_status_t err;

    /* Initialize Flash Interface */
    err = its_flash_init();
 c03097e:	f7ff fd6d 	bl	c03045c <its_flash_init>
    if (err != PSA_SUCCESS) {
 c030982:	b928      	cbnz	r0, c030990 <its_flash_fs_mblock_init+0x14>
        return err;
    }

    err = its_init_get_active_metablock();
 c030984:	f7ff ff88 	bl	c030898 <its_init_get_active_metablock>
    if (err != PSA_SUCCESS) {
 c030988:	4602      	mov	r2, r0
 c03098a:	b110      	cbz	r0, c030992 <its_flash_fs_mblock_init+0x16>
        return PSA_ERROR_GENERIC_ERROR;
 c03098c:	f06f 0083 	mvn.w	r0, #131	; 0x83
        return PSA_ERROR_GENERIC_ERROR;
    }

    /* Erase the other scratch metadata block */
    return its_mblock_erase_scratch_blocks();
}
 c030990:	bd10      	pop	{r4, pc}
    err = its_flash_read(its_flash_fs_ctx.active_metablock,
 c030992:	4c09      	ldr	r4, [pc, #36]	; (c0309b8 <its_flash_fs_mblock_init+0x3c>)
 c030994:	2308      	movs	r3, #8
 c030996:	4621      	mov	r1, r4
 c030998:	68a0      	ldr	r0, [r4, #8]
 c03099a:	f7ff fd6d 	bl	c030478 <its_flash_read>
    if (err != PSA_SUCCESS) {
 c03099e:	2800      	cmp	r0, #0
 c0309a0:	d1f4      	bne.n	c03098c <its_flash_fs_mblock_init+0x10>
                                                 : PSA_SUCCESS;
 c0309a2:	7923      	ldrb	r3, [r4, #4]
 c0309a4:	2b01      	cmp	r3, #1
 c0309a6:	d1f1      	bne.n	c03098c <its_flash_fs_mblock_init+0x10>
                                                 : PSA_SUCCESS;
 c0309a8:	7963      	ldrb	r3, [r4, #5]
 c0309aa:	2bff      	cmp	r3, #255	; 0xff
 c0309ac:	d0ee      	beq.n	c03098c <its_flash_fs_mblock_init+0x10>
    err = its_flash_erase_block(scratch_metablock);
 c0309ae:	68e0      	ldr	r0, [r4, #12]
}
 c0309b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = its_flash_erase_block(scratch_metablock);
 c0309b4:	f7ff bdb0 	b.w	c030518 <its_flash_erase_block>
 c0309b8:	3003b238 	.word	0x3003b238

0c0309bc <its_flash_fs_mblock_meta_update_finalize>:

psa_status_t its_flash_fs_mblock_meta_update_finalize(void)
{
 c0309bc:	b508      	push	{r3, lr}
    psa_status_t err;

    /* Write the metadata block header to flash */
    err = its_mblock_write_scratch_meta_header();
 c0309be:	f7ff ff5b 	bl	c030878 <its_mblock_write_scratch_meta_header>
    if (err != PSA_SUCCESS) {
 c0309c2:	b940      	cbnz	r0, c0309d6 <its_flash_fs_mblock_meta_update_finalize+0x1a>
    tmp_block = its_flash_fs_ctx.scratch_metablock;
 c0309c4:	4b04      	ldr	r3, [pc, #16]	; (c0309d8 <its_flash_fs_mblock_meta_update_finalize+0x1c>)
    its_flash_fs_ctx.scratch_metablock = its_flash_fs_ctx.active_metablock;
 c0309c6:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    its_flash_fs_ctx.active_metablock = tmp_block;
 c0309ca:	e9c3 2002 	strd	r2, r0, [r3, #8]
    /* Update the running context */
    its_mblock_swap_metablocks();

    /* Erase meta block and current scratch block */
    return its_mblock_erase_scratch_blocks();
}
 c0309ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = its_flash_erase_block(scratch_metablock);
 c0309d2:	f7ff bda1 	b.w	c030518 <its_flash_erase_block>
}
 c0309d6:	bd08      	pop	{r3, pc}
 c0309d8:	3003b238 	.word	0x3003b238

0c0309dc <its_flash_fs_mblock_read_file_meta>:
           + (idx * ITS_FILE_METADATA_SIZE);
 c0309dc:	0142      	lsls	r2, r0, #5
{
    psa_status_t err;
    size_t offset;

    offset = its_mblock_file_meta_offset(idx);
    err = its_flash_read(its_flash_fs_ctx.active_metablock,
 c0309de:	4803      	ldr	r0, [pc, #12]	; (c0309ec <its_flash_fs_mblock_read_file_meta+0x10>)
 c0309e0:	2320      	movs	r3, #32
 c0309e2:	3218      	adds	r2, #24
 c0309e4:	6880      	ldr	r0, [r0, #8]
 c0309e6:	f7ff bd47 	b.w	c030478 <its_flash_read>
 c0309ea:	bf00      	nop
 c0309ec:	3003b238 	.word	0x3003b238

0c0309f0 <its_flash_fs_mblock_get_file_idx>:
{
 c0309f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 c0309f2:	4606      	mov	r6, r0
 c0309f4:	460f      	mov	r7, r1
    for (i = 0; i < ITS_MAX_NUM_FILES; i++) {
 c0309f6:	2400      	movs	r4, #0
{
 c0309f8:	b089      	sub	sp, #36	; 0x24
        err = its_flash_fs_mblock_read_file_meta(i, &tmp_metadata);
 c0309fa:	4669      	mov	r1, sp
 c0309fc:	4620      	mov	r0, r4
 c0309fe:	f7ff ffed 	bl	c0309dc <its_flash_fs_mblock_read_file_meta>
        if (err != PSA_SUCCESS) {
 c030a02:	4605      	mov	r5, r0
 c030a04:	b978      	cbnz	r0, c030a26 <its_flash_fs_mblock_get_file_idx+0x36>
 c030a06:	220c      	movs	r2, #12
 c030a08:	4631      	mov	r1, r6
 c030a0a:	a805      	add	r0, sp, #20
 c030a0c:	f7e6 ffa8 	bl	c017960 <memcmp>
        if (!tfm_memcmp(tmp_metadata.id, fid, ITS_FILE_ID_SIZE)) {
 c030a10:	b918      	cbnz	r0, c030a1a <its_flash_fs_mblock_get_file_idx+0x2a>
            *idx = i;
 c030a12:	603c      	str	r4, [r7, #0]
}
 c030a14:	4628      	mov	r0, r5
 c030a16:	b009      	add	sp, #36	; 0x24
 c030a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (i = 0; i < ITS_MAX_NUM_FILES; i++) {
 c030a1a:	3401      	adds	r4, #1
 c030a1c:	2c0a      	cmp	r4, #10
 c030a1e:	d1ec      	bne.n	c0309fa <its_flash_fs_mblock_get_file_idx+0xa>
    return PSA_ERROR_DOES_NOT_EXIST;
 c030a20:	f06f 058b 	mvn.w	r5, #139	; 0x8b
 c030a24:	e7f6      	b.n	c030a14 <its_flash_fs_mblock_get_file_idx+0x24>
            return PSA_ERROR_GENERIC_ERROR;
 c030a26:	f06f 0583 	mvn.w	r5, #131	; 0x83
 c030a2a:	e7f3      	b.n	c030a14 <its_flash_fs_mblock_get_file_idx+0x24>

0c030a2c <its_flash_fs_mblock_read_block_metadata>:
    return ITS_BLOCK_META_HEADER_SIZE + (lblock * ITS_BLOCK_METADATA_SIZE);
 c030a2c:	0102      	lsls	r2, r0, #4
    uint32_t metablock;
    size_t pos;

    metablock = its_mblock_cur_meta_active();
    pos = its_mblock_block_meta_offset(lblock);
    err = its_flash_read(metablock, (uint8_t *)block_meta,
 c030a2e:	4803      	ldr	r0, [pc, #12]	; (c030a3c <its_flash_fs_mblock_read_block_metadata+0x10>)
 c030a30:	2310      	movs	r3, #16
 c030a32:	3208      	adds	r2, #8
 c030a34:	6880      	ldr	r0, [r0, #8]
 c030a36:	f7ff bd1f 	b.w	c030478 <its_flash_read>
 c030a3a:	bf00      	nop
 c030a3c:	3003b238 	.word	0x3003b238

0c030a40 <its_flash_fs_mblock_migrate_lb0_data_to_scratch>:
{
 c030a40:	b530      	push	{r4, r5, lr}
    return its_flash_fs_ctx.scratch_metablock;
 c030a42:	4b0b      	ldr	r3, [pc, #44]	; (c030a70 <its_flash_fs_mblock_migrate_lb0_data_to_scratch+0x30>)
{
 c030a44:	b087      	sub	sp, #28
    err = its_flash_fs_mblock_read_block_metadata(ITS_LOGICAL_DBLOCK0,
 c030a46:	a902      	add	r1, sp, #8
 c030a48:	2000      	movs	r0, #0
    return its_flash_fs_ctx.active_metablock;
 c030a4a:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
    err = its_flash_fs_mblock_read_block_metadata(ITS_LOGICAL_DBLOCK0,
 c030a4e:	f7ff ffed 	bl	c030a2c <its_flash_fs_mblock_read_block_metadata>
    if (err != PSA_SUCCESS) {
 c030a52:	b950      	cbnz	r0, c030a6a <its_flash_fs_mblock_migrate_lb0_data_to_scratch+0x2a>
    data_size = ((ITS_BLOCK_SIZE - block_meta.data_start)
 c030a54:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 c030a58:	4419      	add	r1, r3
 c030a5a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    return its_flash_block_to_block_move(scratch_metablock,
 c030a5e:	9100      	str	r1, [sp, #0]
 c030a60:	462a      	mov	r2, r5
 c030a62:	4619      	mov	r1, r3
 c030a64:	4620      	mov	r0, r4
 c030a66:	f7ff fd27 	bl	c0304b8 <its_flash_block_to_block_move>
}
 c030a6a:	b007      	add	sp, #28
 c030a6c:	bd30      	pop	{r4, r5, pc}
 c030a6e:	bf00      	nop
 c030a70:	3003b238 	.word	0x3003b238

0c030a74 <its_flash_fs_mblock_reserve_file>:
                                            size_t size,
                                            uint32_t flags,
                                            uint32_t *idx,
                                            struct its_file_meta_t *file_meta,
                                            struct its_block_meta_t *block_meta)
{
 c030a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c030a78:	b088      	sub	sp, #32
 c030a7a:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
 c030a7e:	4681      	mov	r9, r0
 c030a80:	460f      	mov	r7, r1
        err = its_flash_fs_mblock_read_block_metadata(i, block_meta);
 c030a82:	2000      	movs	r0, #0
 c030a84:	4631      	mov	r1, r6
{
 c030a86:	4692      	mov	sl, r2
 c030a88:	4698      	mov	r8, r3
        err = its_flash_fs_mblock_read_block_metadata(i, block_meta);
 c030a8a:	f7ff ffcf 	bl	c030a2c <its_flash_fs_mblock_read_block_metadata>
        if (err != PSA_SUCCESS) {
 c030a8e:	4604      	mov	r4, r0
 c030a90:	bb90      	cbnz	r0, c030af8 <its_flash_fs_mblock_reserve_file+0x84>
        if (block_meta->free_size >= size) {
 c030a92:	68b3      	ldr	r3, [r6, #8]
 c030a94:	429f      	cmp	r7, r3
 c030a96:	d832      	bhi.n	c030afe <its_flash_fs_mblock_reserve_file+0x8a>
            file_meta->data_idx = ITS_BLOCK_SIZE - block_meta->free_size;
 c030a98:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
            file_meta->max_size = size;
 c030a9c:	60ef      	str	r7, [r5, #12]
            file_meta->lblock = i;
 c030a9e:	6028      	str	r0, [r5, #0]
            file_meta->data_idx = ITS_BLOCK_SIZE - block_meta->free_size;
 c030aa0:	606b      	str	r3, [r5, #4]
    return (memcpy(dest, src, num));
 c030aa2:	f8d9 3000 	ldr.w	r3, [r9]
 c030aa6:	616b      	str	r3, [r5, #20]
 c030aa8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 c030aac:	61ab      	str	r3, [r5, #24]
 c030aae:	f8d9 3008 	ldr.w	r3, [r9, #8]
            file_meta->cur_size = 0;
 c030ab2:	60a8      	str	r0, [r5, #8]
 c030ab4:	61eb      	str	r3, [r5, #28]
            block_meta->free_size -= size;
 c030ab6:	68b3      	ldr	r3, [r6, #8]
            file_meta->flags = flags;
 c030ab8:	f8c5 a010 	str.w	sl, [r5, #16]
            block_meta->free_size -= size;
 c030abc:	1bdf      	subs	r7, r3, r7
 c030abe:	60b7      	str	r7, [r6, #8]
    for (i = 0; i < ITS_MAX_NUM_FILES; i++) {
 c030ac0:	2500      	movs	r5, #0
        err = its_flash_fs_mblock_read_file_meta(i, &tmp_metadata);
 c030ac2:	4669      	mov	r1, sp
 c030ac4:	4628      	mov	r0, r5
 c030ac6:	f7ff ff89 	bl	c0309dc <its_flash_fs_mblock_read_file_meta>
        if (err != PSA_SUCCESS) {
 c030aca:	b930      	cbnz	r0, c030ada <its_flash_fs_mblock_reserve_file+0x66>
        if (its_utils_validate_fid(tmp_metadata.id) != PSA_SUCCESS) {
 c030acc:	a805      	add	r0, sp, #20
 c030ace:	f000 f8c7 	bl	c030c60 <its_utils_validate_fid>
 c030ad2:	b920      	cbnz	r0, c030ade <its_flash_fs_mblock_reserve_file+0x6a>
    for (i = 0; i < ITS_MAX_NUM_FILES; i++) {
 c030ad4:	3501      	adds	r5, #1
 c030ad6:	2d0a      	cmp	r5, #10
 c030ad8:	d1f3      	bne.n	c030ac2 <its_flash_fs_mblock_reserve_file+0x4e>
            return ITS_METADATA_INVALID_INDEX;
 c030ada:	f64f 75ff 	movw	r5, #65535	; 0xffff
    psa_status_t err;

    err = its_mblock_reserve_file(fid, size, flags, file_meta, block_meta);

    *idx = its_get_free_file_index();
 c030ade:	f8c8 5000 	str.w	r5, [r8]
    if ((err != PSA_SUCCESS) ||
 c030ae2:	b97c      	cbnz	r4, c030b04 <its_flash_fs_mblock_reserve_file+0x90>
 c030ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
        (*idx == ITS_METADATA_INVALID_INDEX)) {
        return PSA_ERROR_INSUFFICIENT_STORAGE;
 c030ae8:	429d      	cmp	r5, r3
 c030aea:	bf08      	it	eq
 c030aec:	f06f 048d 	mvneq.w	r4, #141	; 0x8d
    }

    return PSA_SUCCESS;
}
 c030af0:	4620      	mov	r0, r4
 c030af2:	b008      	add	sp, #32
 c030af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return PSA_ERROR_GENERIC_ERROR;
 c030af8:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c030afc:	e7e0      	b.n	c030ac0 <its_flash_fs_mblock_reserve_file+0x4c>
    return PSA_ERROR_INSUFFICIENT_STORAGE;
 c030afe:	f06f 048d 	mvn.w	r4, #141	; 0x8d
 c030b02:	e7dd      	b.n	c030ac0 <its_flash_fs_mblock_reserve_file+0x4c>
        return PSA_ERROR_INSUFFICIENT_STORAGE;
 c030b04:	f06f 048d 	mvn.w	r4, #141	; 0x8d
 c030b08:	e7f2      	b.n	c030af0 <its_flash_fs_mblock_reserve_file+0x7c>
	...

0c030b0c <its_flash_fs_mblock_set_data_scratch>:
    return PSA_SUCCESS;
}

void its_flash_fs_mblock_set_data_scratch(uint32_t phy_id, uint32_t lblock)
{
    if (lblock != ITS_LOGICAL_DBLOCK0) {
 c030b0c:	b109      	cbz	r1, c030b12 <its_flash_fs_mblock_set_data_scratch+0x6>
        its_flash_fs_ctx.meta_block_header.scratch_dblock = phy_id;
 c030b0e:	4b01      	ldr	r3, [pc, #4]	; (c030b14 <its_flash_fs_mblock_set_data_scratch+0x8>)
 c030b10:	6018      	str	r0, [r3, #0]
    }
}
 c030b12:	4770      	bx	lr
 c030b14:	3003b238 	.word	0x3003b238

0c030b18 <its_flash_fs_mblock_update_scratch_block_meta>:

psa_status_t its_flash_fs_mblock_update_scratch_block_meta(
                                            uint32_t lblock,
                                            struct its_block_meta_t *block_meta)
{
 c030b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c030b1c:	4d1d      	ldr	r5, [pc, #116]	; (c030b94 <its_flash_fs_mblock_update_scratch_block_meta+0x7c>)
 c030b1e:	b086      	sub	sp, #24
 c030b20:	68ef      	ldr	r7, [r5, #12]

    /* If the file is the logical block 0, then update the physical ID to the
     * current scratch metadata block so that it is correct after the metadata
     * blocks are swapped.
     */
    if (lblock == ITS_LOGICAL_DBLOCK0) {
 c030b22:	4606      	mov	r6, r0
 c030b24:	b900      	cbnz	r0, c030b28 <its_flash_fs_mblock_update_scratch_block_meta+0x10>
        block_meta->phy_id = its_cur_meta_scratch_id();
 c030b26:	600f      	str	r7, [r1, #0]
    return ITS_BLOCK_META_HEADER_SIZE + (lblock * ITS_BLOCK_METADATA_SIZE);
 c030b28:	0134      	lsls	r4, r6, #4
    return its_flash_write(meta_block, (const uint8_t *)block_meta, pos,
 c030b2a:	2310      	movs	r3, #16
 c030b2c:	f104 0208 	add.w	r2, r4, #8
 c030b30:	4638      	mov	r0, r7
 c030b32:	f7ff fcb1 	bl	c030498 <its_flash_write>
    }

    err = its_mblock_update_scratch_block_meta(lblock, block_meta);
    if (err != PSA_SUCCESS) {
 c030b36:	b990      	cbnz	r0, c030b5e <its_flash_fs_mblock_update_scratch_block_meta+0x46>
    return its_flash_fs_ctx.active_metablock;
 c030b38:	e9d5 8702 	ldrd	r8, r7, [r5, #8]
    if (lblock != ITS_LOGICAL_DBLOCK0) {
 c030b3c:	b95e      	cbnz	r6, c030b56 <its_flash_fs_mblock_update_scratch_block_meta+0x3e>
    return ITS_BLOCK_META_HEADER_SIZE + (lblock * ITS_BLOCK_METADATA_SIZE);
 c030b3e:	f104 0318 	add.w	r3, r4, #24
    size = its_mblock_file_meta_offset(0) - pos;
 c030b42:	4264      	negs	r4, r4
    return its_flash_block_to_block_move(scratch_block, pos, meta_block, pos,
 c030b44:	9400      	str	r4, [sp, #0]
 c030b46:	4642      	mov	r2, r8
 c030b48:	4619      	mov	r1, r3
 c030b4a:	4638      	mov	r0, r7
 c030b4c:	f7ff fcb4 	bl	c0304b8 <its_flash_block_to_block_move>
        return PSA_ERROR_GENERIC_ERROR;
    }

    return its_mblock_copy_remaining_block_meta(lblock);
}
 c030b50:	b006      	add	sp, #24
 c030b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        err = its_flash_fs_mblock_read_block_metadata(ITS_LOGICAL_DBLOCK0,
 c030b56:	a902      	add	r1, sp, #8
 c030b58:	f7ff ff68 	bl	c030a2c <its_flash_fs_mblock_read_block_metadata>
        if (err != PSA_SUCCESS) {
 c030b5c:	b110      	cbz	r0, c030b64 <its_flash_fs_mblock_update_scratch_block_meta+0x4c>
        return PSA_ERROR_GENERIC_ERROR;
 c030b5e:	f06f 0083 	mvn.w	r0, #131	; 0x83
 c030b62:	e7f5      	b.n	c030b50 <its_flash_fs_mblock_update_scratch_block_meta+0x38>
    return its_flash_write(meta_block, (const uint8_t *)block_meta, pos,
 c030b64:	2208      	movs	r2, #8
 c030b66:	2310      	movs	r3, #16
 c030b68:	eb0d 0102 	add.w	r1, sp, r2
 c030b6c:	68e8      	ldr	r0, [r5, #12]
        block_meta.phy_id = scratch_block;
 c030b6e:	9702      	str	r7, [sp, #8]
    return its_flash_write(meta_block, (const uint8_t *)block_meta, pos,
 c030b70:	f7ff fc92 	bl	c030498 <its_flash_write>
        if (err != PSA_SUCCESS) {
 c030b74:	2800      	cmp	r0, #0
 c030b76:	d1f2      	bne.n	c030b5e <its_flash_fs_mblock_update_scratch_block_meta+0x46>
        if (lblock > 1) {
 c030b78:	2e01      	cmp	r6, #1
 c030b7a:	d9e0      	bls.n	c030b3e <its_flash_fs_mblock_update_scratch_block_meta+0x26>
            size = its_mblock_block_meta_offset(lblock) - pos;
 c030b7c:	f1a4 0310 	sub.w	r3, r4, #16
            err = its_flash_block_to_block_move(scratch_block, pos, meta_block,
 c030b80:	9300      	str	r3, [sp, #0]
 c030b82:	2318      	movs	r3, #24
 c030b84:	4642      	mov	r2, r8
 c030b86:	4619      	mov	r1, r3
 c030b88:	4638      	mov	r0, r7
 c030b8a:	f7ff fc95 	bl	c0304b8 <its_flash_block_to_block_move>
            if (err != PSA_SUCCESS) {
 c030b8e:	2800      	cmp	r0, #0
 c030b90:	d0d5      	beq.n	c030b3e <its_flash_fs_mblock_update_scratch_block_meta+0x26>
 c030b92:	e7dd      	b.n	c030b50 <its_flash_fs_mblock_update_scratch_block_meta+0x38>
 c030b94:	3003b238 	.word	0x3003b238

0c030b98 <its_flash_fs_mblock_update_scratch_file_meta>:
           + (idx * ITS_FILE_METADATA_SIZE);
 c030b98:	0142      	lsls	r2, r0, #5

    scratch_block = its_cur_meta_scratch_id();

    /* Calculate the position */
    pos = its_mblock_file_meta_offset(idx);
    return its_flash_write(scratch_block, (const uint8_t *)file_meta, pos,
 c030b9a:	4803      	ldr	r0, [pc, #12]	; (c030ba8 <its_flash_fs_mblock_update_scratch_file_meta+0x10>)
 c030b9c:	2320      	movs	r3, #32
 c030b9e:	3218      	adds	r2, #24
 c030ba0:	68c0      	ldr	r0, [r0, #12]
 c030ba2:	f7ff bc79 	b.w	c030498 <its_flash_write>
 c030ba6:	bf00      	nop
 c030ba8:	3003b238 	.word	0x3003b238

0c030bac <its_flash_fs_mblock_reset_metablock>:
{
 c030bac:	b530      	push	{r4, r5, lr}
 c030bae:	b08d      	sub	sp, #52	; 0x34
    if (its_init_get_active_metablock() == PSA_SUCCESS) {
 c030bb0:	f7ff fe72 	bl	c030898 <its_init_get_active_metablock>
 c030bb4:	2800      	cmp	r0, #0
 c030bb6:	d135      	bne.n	c030c24 <its_flash_fs_mblock_reset_metablock+0x78>
        metablock_to_erase_first = its_flash_fs_ctx.scratch_metablock;
 c030bb8:	4b22      	ldr	r3, [pc, #136]	; (c030c44 <its_flash_fs_mblock_reset_metablock+0x98>)
 c030bba:	68dd      	ldr	r5, [r3, #12]
    err = its_flash_erase_block(metablock_to_erase_first);
 c030bbc:	4628      	mov	r0, r5
 c030bbe:	f7ff fcab 	bl	c030518 <its_flash_erase_block>
    if (err != PSA_SUCCESS) {
 c030bc2:	4604      	mov	r4, r0
 c030bc4:	bb58      	cbnz	r0, c030c1e <its_flash_fs_mblock_reset_metablock+0x72>
    err = its_flash_erase_block(ITS_OTHER_META_BLOCK(metablock_to_erase_first));
 c030bc6:	fab5 f085 	clz	r0, r5
 c030bca:	0940      	lsrs	r0, r0, #5
 c030bcc:	f7ff fca4 	bl	c030518 <its_flash_erase_block>
    if (err != PSA_SUCCESS) {
 c030bd0:	4604      	mov	r4, r0
 c030bd2:	bb20      	cbnz	r0, c030c1e <its_flash_fs_mblock_reset_metablock+0x72>
    its_flash_fs_ctx.meta_block_header.scratch_dblock = ITS_INIT_SCRATCH_DBLOCK;
 c030bd4:	2001      	movs	r0, #1
    block_meta.free_size = (ITS_BLOCK_SIZE - block_meta.data_start);
 c030bd6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 c030bda:	f640 63a8 	movw	r3, #3752	; 0xea8
    its_flash_fs_ctx.meta_block_header.scratch_dblock = ITS_INIT_SCRATCH_DBLOCK;
 c030bde:	4d19      	ldr	r5, [pc, #100]	; (c030c44 <its_flash_fs_mblock_reset_metablock+0x98>)
    block_meta.phy_id = ITS_METADATA_BLOCK0;
 c030be0:	a90c      	add	r1, sp, #48	; 0x30
    block_meta.free_size = (ITS_BLOCK_SIZE - block_meta.data_start);
 c030be2:	e9cd 2301 	strd	r2, r3, [sp, #4]
    block_meta.phy_id = ITS_METADATA_BLOCK0;
 c030be6:	f841 4d30 	str.w	r4, [r1, #-48]!
    its_flash_fs_ctx.meta_block_header.scratch_dblock = ITS_INIT_SCRATCH_DBLOCK;
 c030bea:	6028      	str	r0, [r5, #0]
 c030bec:	80a8      	strh	r0, [r5, #4]
    return its_flash_write(meta_block, (const uint8_t *)block_meta, pos,
 c030bee:	2310      	movs	r3, #16
 c030bf0:	2208      	movs	r2, #8
    its_flash_fs_ctx.active_metablock = ITS_METADATA_BLOCK0;
 c030bf2:	e9c5 4002 	strd	r4, r0, [r5, #8]
    return its_flash_write(meta_block, (const uint8_t *)block_meta, pos,
 c030bf6:	f7ff fc4f 	bl	c030498 <its_flash_write>
    if (err != PSA_SUCCESS) {
 c030bfa:	4604      	mov	r4, r0
 c030bfc:	b978      	cbnz	r0, c030c1e <its_flash_fs_mblock_reset_metablock+0x72>
    block_meta.free_size = ITS_BLOCK_SIZE;
 c030bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    block_meta.data_start = 0;
 c030c02:	9001      	str	r0, [sp, #4]
    return (memset(ptr, value, num));
 c030c04:	4601      	mov	r1, r0
 c030c06:	2220      	movs	r2, #32
 c030c08:	a804      	add	r0, sp, #16
    block_meta.free_size = ITS_BLOCK_SIZE;
 c030c0a:	9302      	str	r3, [sp, #8]
 c030c0c:	f7e6 fedb 	bl	c0179c6 <memset>
        err = its_flash_fs_mblock_update_scratch_file_meta(i, &file_metadata);
 c030c10:	a904      	add	r1, sp, #16
 c030c12:	4620      	mov	r0, r4
 c030c14:	f7ff ffc0 	bl	c030b98 <its_flash_fs_mblock_update_scratch_file_meta>
        if (err != PSA_SUCCESS) {
 c030c18:	b130      	cbz	r0, c030c28 <its_flash_fs_mblock_reset_metablock+0x7c>
            return PSA_ERROR_GENERIC_ERROR;
 c030c1a:	f06f 0483 	mvn.w	r4, #131	; 0x83
}
 c030c1e:	4620      	mov	r0, r4
 c030c20:	b00d      	add	sp, #52	; 0x34
 c030c22:	bd30      	pop	{r4, r5, pc}
    uint32_t metablock_to_erase_first = ITS_METADATA_BLOCK0;
 c030c24:	2500      	movs	r5, #0
 c030c26:	e7c9      	b.n	c030bbc <its_flash_fs_mblock_reset_metablock+0x10>
    for (i = 0; i < ITS_MAX_NUM_FILES; i++) {
 c030c28:	3401      	adds	r4, #1
 c030c2a:	2c0a      	cmp	r4, #10
 c030c2c:	d1f0      	bne.n	c030c10 <its_flash_fs_mblock_reset_metablock+0x64>
    err = its_mblock_write_scratch_meta_header();
 c030c2e:	f7ff fe23 	bl	c030878 <its_mblock_write_scratch_meta_header>
    if (err != PSA_SUCCESS) {
 c030c32:	4604      	mov	r4, r0
 c030c34:	2800      	cmp	r0, #0
 c030c36:	d1f0      	bne.n	c030c1a <its_flash_fs_mblock_reset_metablock+0x6e>
    its_flash_fs_ctx.scratch_metablock = its_flash_fs_ctx.active_metablock;
 c030c38:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    its_flash_fs_ctx.active_metablock = tmp_block;
 c030c3c:	e9c5 3202 	strd	r3, r2, [r5, #8]
 c030c40:	e7ed      	b.n	c030c1e <its_flash_fs_mblock_reset_metablock+0x72>
 c030c42:	bf00      	nop
 c030c44:	3003b238 	.word	0x3003b238

0c030c48 <its_utils_check_contained_in>:
psa_status_t its_utils_check_contained_in(size_t superset_size,
                                          size_t subset_offset,
                                          size_t subset_size)
{
    /* Check that subset_offset is valid */
    if (subset_offset > superset_size) {
 c030c48:	4281      	cmp	r1, r0
 c030c4a:	d806      	bhi.n	c030c5a <its_utils_check_contained_in+0x12>

    /* Check that subset_offset + subset_size fits in superset_size.
     * The previous check passed, so we know that subset_offset <= superset_size
     * and so the right hand side of the inequality cannot underflow.
     */
    if (subset_size > (superset_size - subset_offset)) {
 c030c4c:	1a40      	subs	r0, r0, r1
 c030c4e:	4290      	cmp	r0, r2
        return PSA_ERROR_INVALID_ARGUMENT;
    }

    return PSA_SUCCESS;
 c030c50:	bf34      	ite	cc
 c030c52:	f06f 0086 	mvncc.w	r0, #134	; 0x86
 c030c56:	2000      	movcs	r0, #0
 c030c58:	4770      	bx	lr
        return PSA_ERROR_INVALID_ARGUMENT;
 c030c5a:	f06f 0086 	mvn.w	r0, #134	; 0x86
}
 c030c5e:	4770      	bx	lr

0c030c60 <its_utils_validate_fid>:

psa_status_t its_utils_validate_fid(const uint8_t *fid)
{
 c030c60:	f100 030c 	add.w	r3, r0, #12
    uint32_t fid_size = ITS_FILE_ID_SIZE;

    /* A file ID is valid if it is non-zero */
    while (fid_size--) {
 c030c64:	4298      	cmp	r0, r3
 c030c66:	d102      	bne.n	c030c6e <its_utils_validate_fid+0xe>
        if (*fid++) {
            return PSA_SUCCESS;
        }
    }

    return PSA_ERROR_DOES_NOT_EXIST;
 c030c68:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 c030c6c:	4770      	bx	lr
        if (*fid++) {
 c030c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 c030c72:	2a00      	cmp	r2, #0
 c030c74:	d0f6      	beq.n	c030c64 <its_utils_validate_fid+0x4>
            return PSA_SUCCESS;
 c030c76:	2000      	movs	r0, #0
}
 c030c78:	4770      	bx	lr
	...

0c030c7c <InsertEncodedTypeAndNumber>:
static void InsertEncodedTypeAndNumber(QCBOREncodeContext *me,
                                       uint8_t uMajorType,
                                       int nMinLen,
                                       uint64_t uNumber,
                                       size_t uPos)
{
 c030c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c030c80:	b086      	sub	sp, #24
 c030c82:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
   // Point to the last bytes and work backwards
   uint8_t *pByte = &bytes[sizeof(bytes)-1];
   // This is the 5 bits in the initial byte that is not the major type
   uint8_t uAdditionalInfo;

   if(uNumber < CBOR_TWENTY_FOUR && nMinLen == 0) {
 c030c86:	2d00      	cmp	r5, #0
 c030c88:	bf08      	it	eq
 c030c8a:	2c18      	cmpeq	r4, #24
 c030c8c:	f10d 0715 	add.w	r7, sp, #21
 c030c90:	d232      	bcs.n	c030cf8 <InsertEncodedTypeAndNumber+0x7c>
 c030c92:	bb8a      	cbnz	r2, c030cf8 <InsertEncodedTypeAndNumber+0x7c>
   uint8_t *pByte = &bytes[sizeof(bytes)-1];
 c030c94:	463b      	mov	r3, r7
      // Simple case where argument is < 24
      uAdditionalInfo = uNumber;
 c030c96:	b2e4      	uxtb	r4, r4
      // Additional info is the encoding of the
      // number of additional bytes to encode
      // argument.
      uAdditionalInfo = LEN_IS_ONE_BYTE-1 + i;
   }
   *--pByte = (uMajorType << 5) + uAdditionalInfo;
 c030c98:	1e5a      	subs	r2, r3, #1

   UsefulOutBuf_InsertData(&(me->OutBuf), pByte, &bytes[sizeof(bytes)-1] - pByte, uPos);
 c030c9a:	1abf      	subs	r7, r7, r2
   UsefulBufC Data = {pBytes, uLen};
 c030c9c:	9201      	str	r2, [sp, #4]
   *--pByte = (uMajorType << 5) + uAdditionalInfo;
 c030c9e:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 c030ca2:	9702      	str	r7, [sp, #8]
   UsefulOutBuf_InsertUsefulBuf(pMe, Data, uPos);
 c030ca4:	aa01      	add	r2, sp, #4
 c030ca6:	f803 4c01 	strb.w	r4, [r3, #-1]
 c030caa:	ca06      	ldmia	r2, {r1, r2}
 c030cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c030cae:	f7fd ff9d 	bl	c02ebec <UsefulOutBuf_InsertUsefulBuf>
}
 c030cb2:	b006      	add	sp, #24
 c030cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         const uint8_t uIterations = aIterate[i];
 c030cb8:	f819 e006 	ldrb.w	lr, [r9, r6]
 c030cbc:	eba3 080e 	sub.w	r8, r3, lr
         for(int j = 0; j < uIterations; j++) {
 c030cc0:	4598      	cmp	r8, r3
 c030cc2:	d10f      	bne.n	c030ce4 <InsertEncodedTypeAndNumber+0x68>
 c030cc4:	4643      	mov	r3, r8
         nMinLen -= uIterations;
 c030cc6:	eba2 020e 	sub.w	r2, r2, lr
 c030cca:	f10c 0c01 	add.w	ip, ip, #1
      for(i = 0; uNumber || nMinLen > 0; i++) {
 c030cce:	ea54 0e05 	orrs.w	lr, r4, r5
 c030cd2:	fa5f f68c 	uxtb.w	r6, ip
 c030cd6:	d1ef      	bne.n	c030cb8 <InsertEncodedTypeAndNumber+0x3c>
 c030cd8:	2a00      	cmp	r2, #0
 c030cda:	dced      	bgt.n	c030cb8 <InsertEncodedTypeAndNumber+0x3c>
      uAdditionalInfo = LEN_IS_ONE_BYTE-1 + i;
 c030cdc:	f106 0417 	add.w	r4, r6, #23
 c030ce0:	b2e4      	uxtb	r4, r4
 c030ce2:	e7d9      	b.n	c030c98 <InsertEncodedTypeAndNumber+0x1c>
            uNumber = uNumber >> 8;
 c030ce4:	0a26      	lsrs	r6, r4, #8
 c030ce6:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
 c030cea:	ea4f 2a15 	mov.w	sl, r5, lsr #8
            *--pByte = uNumber & 0xff;
 c030cee:	f803 4d01 	strb.w	r4, [r3, #-1]!
            uNumber = uNumber >> 8;
 c030cf2:	4655      	mov	r5, sl
 c030cf4:	4634      	mov	r4, r6
 c030cf6:	e7e3      	b.n	c030cc0 <InsertEncodedTypeAndNumber+0x44>
 c030cf8:	f04f 0c00 	mov.w	ip, #0
 c030cfc:	463b      	mov	r3, r7
         const uint8_t uIterations = aIterate[i];
 c030cfe:	f8df 9004 	ldr.w	r9, [pc, #4]	; c030d04 <InsertEncodedTypeAndNumber+0x88>
 c030d02:	e7e4      	b.n	c030cce <InsertEncodedTypeAndNumber+0x52>
 c030d04:	0c036c44 	.word	0x0c036c44

0c030d08 <AppendEncodedTypeAndNumber>:
 See InsertEncodedTypeAndNumber() function above for details
*/
inline static void AppendEncodedTypeAndNumber(QCBOREncodeContext *me,
                                              uint8_t uMajorType,
                                              uint64_t uNumber)
{
 c030d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   // An append is an insert at the end.
   InsertEncodedTypeAndNumber(me,
 c030d0a:	6884      	ldr	r4, [r0, #8]
 c030d0c:	e9cd 2300 	strd	r2, r3, [sp]
 c030d10:	9402      	str	r4, [sp, #8]
 c030d12:	2200      	movs	r2, #0
 c030d14:	f7ff ffb2 	bl	c030c7c <InsertEncodedTypeAndNumber>
                              uMajorType,
                              0,
                              uNumber,
                              UsefulOutBuf_GetEndPosition(&(me->OutBuf)));
}
 c030d18:	b004      	add	sp, #16
 c030d1a:	bd10      	pop	{r4, pc}

0c030d1c <Nesting_Increment.isra.3>:
   if(1 >= QCBOR_MAX_ITEMS_IN_ARRAY - pNesting->pCurrentNesting->uCount) {
 c030d1c:	8883      	ldrh	r3, [r0, #4]
 c030d1e:	f5c3 427f 	rsb	r2, r3, #65280	; 0xff00
 c030d22:	32fe      	adds	r2, #254	; 0xfe
 c030d24:	2a01      	cmp	r2, #1
   pNesting->pCurrentNesting->uCount += 1;
 c030d26:	bfc3      	ittte	gt
 c030d28:	3301      	addgt	r3, #1
 c030d2a:	8083      	strhgt	r3, [r0, #4]
   return QCBOR_SUCCESS;
 c030d2c:	2000      	movgt	r0, #0
      return QCBOR_ERR_ARRAY_TOO_LONG;
 c030d2e:	2003      	movle	r0, #3
}
 c030d30:	4770      	bx	lr

0c030d32 <QCBOREncode_Init>:
{
 c030d32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c030d34:	466d      	mov	r5, sp
 c030d36:	4604      	mov	r4, r0
 c030d38:	e885 0006 	stmia.w	r5, {r1, r2}
   memset(me, 0, sizeof(QCBOREncodeContext));
 c030d3c:	2298      	movs	r2, #152	; 0x98
 c030d3e:	2100      	movs	r1, #0
 c030d40:	f7e6 fe41 	bl	c0179c6 <memset>
   UsefulOutBuf_Init(&(me->OutBuf), Storage);
 c030d44:	e895 0006 	ldmia.w	r5, {r1, r2}
 c030d48:	4620      	mov	r0, r4
 c030d4a:	f7fd ff3f 	bl	c02ebcc <UsefulOutBuf_Init>
   pNesting->pCurrentNesting = &pNesting->pArrays[0];
 c030d4e:	f104 0314 	add.w	r3, r4, #20
 c030d52:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
   pNesting->pCurrentNesting->uMajorType = CBOR_MAJOR_TYPE_ARRAY;
 c030d56:	2304      	movs	r3, #4
 c030d58:	76a3      	strb	r3, [r4, #26]
}
 c030d5a:	b003      	add	sp, #12
 c030d5c:	bd30      	pop	{r4, r5, pc}

0c030d5e <QCBOREncode_AddInt64>:

/*
 Public functions for closing arrays and maps. See header qcbor.h
 */
void QCBOREncode_AddInt64(QCBOREncodeContext *me, int64_t nNum)
{
 c030d5e:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   if(me->uError == QCBOR_SUCCESS) {
 c030d62:	7c01      	ldrb	r1, [r0, #16]
{
 c030d64:	4604      	mov	r4, r0
 c030d66:	4693      	mov	fp, r2
 c030d68:	469c      	mov	ip, r3
   if(me->uError == QCBOR_SUCCESS) {
 c030d6a:	b989      	cbnz	r1, c030d90 <QCBOREncode_AddInt64+0x32>
      uint8_t      uMajorType;
      uint64_t     uValue;

      if(nNum < 0) {
 c030d6c:	2a00      	cmp	r2, #0
 c030d6e:	f17c 0300 	sbcs.w	r3, ip, #0
         // In CBOR -1 encodes as 0x00 with major type negative int.
         uValue = (uint64_t)(-nNum - 1);
 c030d72:	bfbd      	ittte	lt
 c030d74:	43d2      	mvnlt	r2, r2
 c030d76:	ea6f 030c 	mvnlt.w	r3, ip
         uMajorType = CBOR_MAJOR_TYPE_NEGATIVE_INT;
 c030d7a:	2101      	movlt	r1, #1
      } else {
         uValue = (uint64_t)nNum;
 c030d7c:	465a      	movge	r2, fp
 c030d7e:	bfa8      	it	ge
 c030d80:	4663      	movge	r3, ip
         uMajorType = CBOR_MAJOR_TYPE_POSITIVE_INT;
      }

      AppendEncodedTypeAndNumber(me, uMajorType, uValue);
 c030d82:	f7ff ffc1 	bl	c030d08 <AppendEncodedTypeAndNumber>
      me->uError = Nesting_Increment(&(me->nesting));
 c030d86:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 c030d8a:	f7ff ffc7 	bl	c030d1c <Nesting_Increment.isra.3>
 c030d8e:	7420      	strb	r0, [r4, #16]
   }
}
 c030d90:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}

0c030d94 <QCBOREncode_AddBuffer>:
 third just adds the bytes as the type and length are presumed to be
 in the bytes. The fourth just adds the type and length for the very
 special case of QCBOREncode_AddBytesLenOnly().
 */
void QCBOREncode_AddBuffer(QCBOREncodeContext *me, uint8_t uMajorType, UsefulBufC Bytes)
{
 c030d94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 c030d96:	466e      	mov	r6, sp
 c030d98:	e886 000c 	stmia.w	r6, {r2, r3}
   if(me->uError == QCBOR_SUCCESS) {
 c030d9c:	7c03      	ldrb	r3, [r0, #16]
{
 c030d9e:	4604      	mov	r4, r0
 c030da0:	460d      	mov	r5, r1
   if(me->uError == QCBOR_SUCCESS) {
 c030da2:	b983      	cbnz	r3, c030dc6 <QCBOREncode_AddBuffer+0x32>
      // If it is not Raw CBOR, add the type and the length
      if(uMajorType != CBOR_MAJOR_NONE_TYPE_RAW) {
 c030da4:	2909      	cmp	r1, #9
 c030da6:	d110      	bne.n	c030dca <QCBOREncode_AddBuffer+0x36>
 c030da8:	e896 0003 	ldmia.w	r6, {r0, r1}
 c030dac:	aa02      	add	r2, sp, #8
 c030dae:	e882 0003 	stmia.w	r2, {r0, r1}
   UsefulOutBuf_InsertUsefulBuf(pMe, NewData, UsefulOutBuf_GetEndPosition(pMe));
 c030db2:	68a3      	ldr	r3, [r4, #8]
 c030db4:	ca06      	ldmia	r2, {r1, r2}
 c030db6:	4620      	mov	r0, r4
 c030db8:	f7fd ff18 	bl	c02ebec <UsefulOutBuf_InsertUsefulBuf>
         // Actually add the bytes
         UsefulOutBuf_AppendUsefulBuf(&(me->OutBuf), Bytes);
      }

      // Update the array counting if there is any nesting at all
      me->uError = Nesting_Increment(&(me->nesting));
 c030dbc:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 c030dc0:	f7ff ffac 	bl	c030d1c <Nesting_Increment.isra.3>
 c030dc4:	7420      	strb	r0, [r4, #16]
   }
}
 c030dc6:	b004      	add	sp, #16
 c030dc8:	bd70      	pop	{r4, r5, r6, pc}
            uRealMajorType = CBOR_MAJOR_TYPE_BYTE_STRING;
 c030dca:	290b      	cmp	r1, #11
         AppendEncodedTypeAndNumber(me, uRealMajorType, Bytes.len);
 c030dcc:	bf08      	it	eq
 c030dce:	2102      	moveq	r1, #2
 c030dd0:	9a01      	ldr	r2, [sp, #4]
 c030dd2:	f7ff ff99 	bl	c030d08 <AppendEncodedTypeAndNumber>
      if(uMajorType != CBOR_MAJOR_NONE_TYPE_BSTR_LEN_ONLY) {
 c030dd6:	2d0b      	cmp	r5, #11
 c030dd8:	d0f0      	beq.n	c030dbc <QCBOREncode_AddBuffer+0x28>
 c030dda:	e7e5      	b.n	c030da8 <QCBOREncode_AddBuffer+0x14>

0c030ddc <QCBOREncode_AddTag>:
/*
 Public functions for closing arrays and maps. See header qcbor.h
 */
void QCBOREncode_AddTag(QCBOREncodeContext *me, uint64_t uTag)
{
   AppendEncodedTypeAndNumber(me, CBOR_MAJOR_TYPE_OPTIONAL, uTag);
 c030ddc:	2106      	movs	r1, #6
 c030dde:	f7ff bf93 	b.w	c030d08 <AppendEncodedTypeAndNumber>

0c030de2 <QCBOREncode_OpenMapOrArray>:
 but they will usually call one of the inline wrappers rather than this.

 See header qcbor.h
*/
void QCBOREncode_OpenMapOrArray(QCBOREncodeContext *me, uint8_t uMajorType)
{
 c030de2:	b538      	push	{r3, r4, r5, lr}
 c030de4:	4604      	mov	r4, r0
   // Add one item to the nesting level we are in for the new map or array
   me->uError = Nesting_Increment(&(me->nesting));
 c030de6:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 c030dea:	f7ff ff97 	bl	c030d1c <Nesting_Increment.isra.3>
 c030dee:	7420      	strb	r0, [r4, #16]
   if(me->uError == QCBOR_SUCCESS) {
 c030df0:	b928      	cbnz	r0, c030dfe <QCBOREncode_OpenMapOrArray+0x1c>
      // is stored in a uint32_t, not a size_t to keep stack usage smaller. This
      // checks to be sure there is no wrap around when recording the offset.
      // Note that on 64-bit machines CBOR larger than 4GB can be encoded as long as no
      // array / map offsets occur past the 4GB mark, but the public interface
      // says that the maximum is 4GB to keep the discussion simpler.
      size_t uEndPosition = UsefulOutBuf_GetEndPosition(&(me->OutBuf));
 c030df2:	68a2      	ldr	r2, [r4, #8]
      // QCBOR_MAX_ARRAY_OFFSET is slightly less than UINT32_MAX so this
      // code can run on a 32-bit machine and tests can pass on a 32-bit
      // machine. If it was exactly UINT32_MAX, then this code would
      // not compile or run on a 32-bit machine and an #ifdef or some
      // machine size detection would be needed reducing portability.
      if(uEndPosition >= QCBOR_MAX_ARRAY_OFFSET) {
 c030df4:	f112 0f66 	cmn.w	r2, #102	; 0x66
 c030df8:	d902      	bls.n	c030e00 <QCBOREncode_OpenMapOrArray+0x1e>
         me->uError = QCBOR_ERR_BUFFER_TOO_LARGE;
 c030dfa:	2307      	movs	r3, #7
 c030dfc:	7423      	strb	r3, [r4, #16]
         // Increase nesting level because this is a map or array.
         // Cast from size_t to uin32_t is safe because of check above
         me->uError = Nesting_Increase(&(me->nesting), uMajorType, (uint32_t)uEndPosition);
      }
   }
}
 c030dfe:	bd38      	pop	{r3, r4, r5, pc}
   if(pNesting->pCurrentNesting == &pNesting->pArrays[QCBOR_MAX_ARRAY_NESTING]) {
 c030e00:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 c030e04:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 c030e08:	42ab      	cmp	r3, r5
      nReturn = QCBOR_ERR_ARRAY_NESTING_TOO_DEEP;
 c030e0a:	bf0f      	iteee	eq
 c030e0c:	2002      	moveq	r0, #2
      pNesting->pCurrentNesting++;
 c030e0e:	f103 0508 	addne.w	r5, r3, #8
 c030e12:	f8c4 5094 	strne.w	r5, [r4, #148]	; 0x94
      pNesting->pCurrentNesting->uCount     = 0;
 c030e16:	8198      	strhne	r0, [r3, #12]
      pNesting->pCurrentNesting->uStart     = uPos;
 c030e18:	bf1c      	itt	ne
 c030e1a:	609a      	strne	r2, [r3, #8]
      pNesting->pCurrentNesting->uMajorType = uMajorType;
 c030e1c:	7399      	strbne	r1, [r3, #14]
         me->uError = Nesting_Increase(&(me->nesting), uMajorType, (uint32_t)uEndPosition);
 c030e1e:	7420      	strb	r0, [r4, #16]
}
 c030e20:	e7ed      	b.n	c030dfe <QCBOREncode_OpenMapOrArray+0x1c>

0c030e22 <QCBOREncode_CloseMapOrArray>:
 Public functions for closing arrays and maps. See header qcbor.h
 */
void QCBOREncode_CloseMapOrArray(QCBOREncodeContext *me,
                                 uint8_t uMajorType,
                                 UsefulBufC *pWrappedCBOR)
{
 c030e22:	b5f0      	push	{r4, r5, r6, r7, lr}
   if(me->uError == QCBOR_SUCCESS) {
 c030e24:	7c03      	ldrb	r3, [r0, #16]
{
 c030e26:	b087      	sub	sp, #28
 c030e28:	4604      	mov	r4, r0
 c030e2a:	4617      	mov	r7, r2
   if(me->uError == QCBOR_SUCCESS) {
 c030e2c:	b93b      	cbnz	r3, c030e3e <QCBOREncode_CloseMapOrArray+0x1c>
   return pNesting->pCurrentNesting == &pNesting->pArrays[0] ? 0 : 1;
 c030e2e:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 c030e32:	f100 0314 	add.w	r3, r0, #20
      if(!Nesting_IsInNest(&(me->nesting))) {
 c030e36:	429a      	cmp	r2, r3
 c030e38:	d103      	bne.n	c030e42 <QCBOREncode_CloseMapOrArray+0x20>
         me->uError = QCBOR_ERR_TOO_MANY_CLOSES;
 c030e3a:	2304      	movs	r3, #4
      } else if(Nesting_GetMajorType(&(me->nesting)) != uMajorType) {
         me->uError = QCBOR_ERR_CLOSE_MISMATCH;
 c030e3c:	7423      	strb	r3, [r4, #16]
            *pWrappedCBOR = UsefulBuf_Tail(PartialResult, uInsertPosition);
         }
         Nesting_Decrease(&(me->nesting));
      }
   }
}
 c030e3e:	b007      	add	sp, #28
 c030e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   return pNesting->pCurrentNesting->uMajorType;
 c030e42:	7993      	ldrb	r3, [r2, #6]
      } else if(Nesting_GetMajorType(&(me->nesting)) != uMajorType) {
 c030e44:	4299      	cmp	r1, r3
 c030e46:	d001      	beq.n	c030e4c <QCBOREncode_CloseMapOrArray+0x2a>
         me->uError = QCBOR_ERR_CLOSE_MISMATCH;
 c030e48:	230f      	movs	r3, #15
 c030e4a:	e7f7      	b.n	c030e3c <QCBOREncode_CloseMapOrArray+0x1a>
         const size_t uEndPosition            = UsefulOutBuf_GetEndPosition(&(me->OutBuf));
 c030e4c:	6883      	ldr	r3, [r0, #8]
                                    uLenOfEncodedMapOrArray : Nesting_GetCount(&(me->nesting));
 c030e4e:	2902      	cmp	r1, #2
   return pNesting->pCurrentNesting->uStart;
 c030e50:	6816      	ldr	r6, [r2, #0]
   const uint16_t uDivisor = pNesting->pCurrentNesting->uMajorType - CBOR_MAJOR_TYPE_ARRAY+1;
 c030e52:	bf1f      	itttt	ne
 c030e54:	1ecb      	subne	r3, r1, #3
   return pNesting->pCurrentNesting->uCount / uDivisor;
 c030e56:	8892      	ldrhne	r2, [r2, #4]
 c030e58:	b29b      	uxthne	r3, r3
                                    uLenOfEncodedMapOrArray : Nesting_GetCount(&(me->nesting));
 c030e5a:	fbb2 f3f3 	udivne	r3, r2, r3
         InsertEncodedTypeAndNumber(me,
 c030e5e:	f04f 0500 	mov.w	r5, #0
         const size_t uLenOfEncodedMapOrArray = uEndPosition - uInsertPosition;
 c030e62:	bf08      	it	eq
 c030e64:	1b9b      	subeq	r3, r3, r6
         InsertEncodedTypeAndNumber(me,
 c030e66:	9602      	str	r6, [sp, #8]
 c030e68:	e9cd 3500 	strd	r3, r5, [sp]
 c030e6c:	462a      	mov	r2, r5
 c030e6e:	f7ff ff05 	bl	c030c7c <InsertEncodedTypeAndNumber>
         if(pWrappedCBOR) {
 c030e72:	b167      	cbz	r7, c030e8e <QCBOREncode_CloseMapOrArray+0x6c>
            const UsefulBufC PartialResult = UsefulOutBuf_OutUBuf(&(me->OutBuf));
 c030e74:	4621      	mov	r1, r4
 c030e76:	a804      	add	r0, sp, #16
 c030e78:	f7fd fee6 	bl	c02ec48 <UsefulOutBuf_OutUBuf>
 c030e7c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   if(uAmount > UB.len) {
 c030e80:	4296      	cmp	r6, r2
 c030e82:	d80a      	bhi.n	c030e9a <QCBOREncode_CloseMapOrArray+0x78>
 c030e84:	1b95      	subs	r5, r2, r6
   } else if(UB.ptr == NULL) {
 c030e86:	b103      	cbz	r3, c030e8a <QCBOREncode_CloseMapOrArray+0x68>
      ReturnValue = (UsefulBufC){(uint8_t *)UB.ptr + uAmount, UB.len - uAmount};
 c030e88:	4433      	add	r3, r6
            *pWrappedCBOR = UsefulBuf_Tail(PartialResult, uInsertPosition);
 c030e8a:	e9c7 3500 	strd	r3, r5, [r7]
   pNesting->pCurrentNesting--;
 c030e8e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 c030e92:	3b08      	subs	r3, #8
 c030e94:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 c030e98:	e7d1      	b.n	c030e3e <QCBOREncode_CloseMapOrArray+0x1c>
      ReturnValue = NULLUsefulBufC;
 c030e9a:	462b      	mov	r3, r5
 c030e9c:	e7f5      	b.n	c030e8a <QCBOREncode_CloseMapOrArray+0x68>

0c030e9e <QCBOREncode_Finish>:

/*
 Public functions to finish and get the encoded result. See header qcbor.h
 */
QCBORError QCBOREncode_Finish(QCBOREncodeContext *me, UsefulBufC *pEncodedCBOR)
{
 c030e9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   QCBORError uReturn = (QCBORError) me->uError;
 c030ea0:	7c04      	ldrb	r4, [r0, #16]
{
 c030ea2:	460e      	mov	r6, r1

   if(uReturn != QCBOR_SUCCESS) {
 c030ea4:	b984      	cbnz	r4, c030ec8 <QCBOREncode_Finish+0x2a>
      goto Done;
   }

   if (Nesting_IsInNest(&(me->nesting))) {
 c030ea6:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
   return pNesting->pCurrentNesting == &pNesting->pArrays[0] ? 0 : 1;
 c030eaa:	f100 0314 	add.w	r3, r0, #20
   if (Nesting_IsInNest(&(me->nesting))) {
 c030eae:	429a      	cmp	r2, r3
 c030eb0:	d10d      	bne.n	c030ece <QCBOREncode_Finish+0x30>
      uReturn = QCBOR_ERR_ARRAY_OR_MAP_STILL_OPEN;
      goto Done;
   }

   if(UsefulOutBuf_GetError(&(me->OutBuf))) {
 c030eb2:	7b83      	ldrb	r3, [r0, #14]
 c030eb4:	b96b      	cbnz	r3, c030ed2 <QCBOREncode_Finish+0x34>
      // needed to know that is true. Just read the UsefulBuf code.
      uReturn = QCBOR_ERR_BUFFER_TOO_SMALL;
      goto Done;
   }

   *pEncodedCBOR = UsefulOutBuf_OutUBuf(&(me->OutBuf));
 c030eb6:	466d      	mov	r5, sp
 c030eb8:	4601      	mov	r1, r0
 c030eba:	4628      	mov	r0, r5
 c030ebc:	f7fd fec4 	bl	c02ec48 <UsefulOutBuf_OutUBuf>
 c030ec0:	e895 0003 	ldmia.w	r5, {r0, r1}
 c030ec4:	e886 0003 	stmia.w	r6, {r0, r1}

Done:
   return uReturn;
}
 c030ec8:	4620      	mov	r0, r4
 c030eca:	b002      	add	sp, #8
 c030ecc:	bd70      	pop	{r4, r5, r6, pc}
      uReturn = QCBOR_ERR_ARRAY_OR_MAP_STILL_OPEN;
 c030ece:	240a      	movs	r4, #10
 c030ed0:	e7fa      	b.n	c030ec8 <QCBOREncode_Finish+0x2a>
      uReturn = QCBOR_ERR_BUFFER_TOO_SMALL;
 c030ed2:	2401      	movs	r4, #1
 c030ed4:	e7f8      	b.n	c030ec8 <QCBOREncode_Finish+0x2a>
	...

0c030ed8 <get_partition_idx>:
    if (partition_id == INVALID_PARTITION_ID) {
 c030ed8:	1c43      	adds	r3, r0, #1
{
 c030eda:	b530      	push	{r4, r5, lr}
    if (partition_id == INVALID_PARTITION_ID) {
 c030edc:	d012      	beq.n	c030f04 <get_partition_idx+0x2c>
    for (i = 0; i < g_spm_partition_db.partition_count; ++i) {
 c030ede:	4b0a      	ldr	r3, [pc, #40]	; (c030f08 <get_partition_idx+0x30>)
        if (g_spm_partition_db.partitions[i].static_data->partition_id ==
 c030ee0:	2470      	movs	r4, #112	; 0x70
 c030ee2:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    for (i = 0; i < g_spm_partition_db.partition_count; ++i) {
 c030ee6:	2300      	movs	r3, #0
 c030ee8:	429a      	cmp	r2, r3
 c030eea:	d103      	bne.n	c030ef4 <get_partition_idx+0x1c>
        return SPM_INVALID_PARTITION_IDX;
 c030eec:	f04f 33ff 	mov.w	r3, #4294967295
}
 c030ef0:	4618      	mov	r0, r3
 c030ef2:	bd30      	pop	{r4, r5, pc}
        if (g_spm_partition_db.partitions[i].static_data->partition_id ==
 c030ef4:	fb04 1503 	mla	r5, r4, r3, r1
 c030ef8:	6e6d      	ldr	r5, [r5, #100]	; 0x64
 c030efa:	682d      	ldr	r5, [r5, #0]
 c030efc:	4285      	cmp	r5, r0
 c030efe:	d0f7      	beq.n	c030ef0 <get_partition_idx+0x18>
    for (i = 0; i < g_spm_partition_db.partition_count; ++i) {
 c030f00:	3301      	adds	r3, #1
 c030f02:	e7f1      	b.n	c030ee8 <get_partition_idx+0x10>
        return SPM_INVALID_PARTITION_IDX;
 c030f04:	4603      	mov	r3, r0
 c030f06:	e7f3      	b.n	c030ef0 <get_partition_idx+0x18>
 c030f08:	30035b4c 	.word	0x30035b4c

0c030f0c <tfm_spm_db_init>:
{
 c030f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c030f0e:	2200      	movs	r2, #0
        g_spm_partition_db.partitions[i].memory_data = &memory_data_list[i];
 c030f10:	2628      	movs	r6, #40	; 0x28
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c030f12:	490f      	ldr	r1, [pc, #60]	; (c030f50 <tfm_spm_db_init+0x44>)
        g_spm_partition_db.partitions[i].static_data = &static_data_list[i];
 c030f14:	4c0f      	ldr	r4, [pc, #60]	; (c030f54 <tfm_spm_db_init+0x48>)
        g_spm_partition_db.partitions[i].platform_data = platform_data_list[i];
 c030f16:	4d10      	ldr	r5, [pc, #64]	; (c030f58 <tfm_spm_db_init+0x4c>)
        g_spm_partition_db.partitions[i].memory_data = &memory_data_list[i];
 c030f18:	f8df c040 	ldr.w	ip, [pc, #64]	; c030f5c <tfm_spm_db_init+0x50>
 c030f1c:	e9d1 0301 	ldrd	r0, r3, [r1, #4]
 c030f20:	3364      	adds	r3, #100	; 0x64
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c030f22:	4290      	cmp	r0, r2
 c030f24:	f103 0370 	add.w	r3, r3, #112	; 0x70
 c030f28:	d103      	bne.n	c030f32 <tfm_spm_db_init+0x26>
    g_spm_partition_db.is_init = 1;
 c030f2a:	2301      	movs	r3, #1
}
 c030f2c:	2000      	movs	r0, #0
    g_spm_partition_db.is_init = 1;
 c030f2e:	600b      	str	r3, [r1, #0]
}
 c030f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        g_spm_partition_db.partitions[i].static_data = &static_data_list[i];
 c030f32:	eb04 1702 	add.w	r7, r4, r2, lsl #4
 c030f36:	f843 7c70 	str.w	r7, [r3, #-112]
        g_spm_partition_db.partitions[i].platform_data = platform_data_list[i];
 c030f3a:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
 c030f3e:	f843 7c6c 	str.w	r7, [r3, #-108]
        g_spm_partition_db.partitions[i].memory_data = &memory_data_list[i];
 c030f42:	fb06 c702 	mla	r7, r6, r2, ip
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c030f46:	3201      	adds	r2, #1
        g_spm_partition_db.partitions[i].memory_data = &memory_data_list[i];
 c030f48:	f843 7c68 	str.w	r7, [r3, #-104]
 c030f4c:	e7e9      	b.n	c030f22 <tfm_spm_db_init+0x16>
 c030f4e:	bf00      	nop
 c030f50:	30035b4c 	.word	0x30035b4c
 c030f54:	0c036d10 	.word	0x0c036d10
 c030f58:	3003b478 	.word	0x3003b478
 c030f5c:	0c036c48 	.word	0x0c036c48

0c030f60 <tfm_spm_partition_get_flags>:
    return g_spm_partition_db.partitions[partition_idx].static_data->
 c030f60:	4b03      	ldr	r3, [pc, #12]	; (c030f70 <tfm_spm_partition_get_flags+0x10>)
 c030f62:	689a      	ldr	r2, [r3, #8]
 c030f64:	2370      	movs	r3, #112	; 0x70
 c030f66:	fb03 2000 	mla	r0, r3, r0, r2
 c030f6a:	6e43      	ldr	r3, [r0, #100]	; 0x64
}
 c030f6c:	6858      	ldr	r0, [r3, #4]
 c030f6e:	4770      	bx	lr
 c030f70:	30035b4c 	.word	0x30035b4c

0c030f74 <tfm_spm_create_conn_handle>:

/********************** SPM functions for handler mode ***********************/

/* Service handle management functions */
psa_handle_t tfm_spm_create_conn_handle(struct tfm_spm_service_t *service)
{
 c030f74:	b510      	push	{r4, lr}
    struct tfm_conn_handle_t *p_handle;

    TFM_ASSERT(service);
 c030f76:	4604      	mov	r4, r0
 c030f78:	b928      	cbnz	r0, c030f86 <tfm_spm_create_conn_handle+0x12>
 c030f7a:	2237      	movs	r2, #55	; 0x37
 c030f7c:	490a      	ldr	r1, [pc, #40]	; (c030fa8 <tfm_spm_create_conn_handle+0x34>)
 c030f7e:	480b      	ldr	r0, [pc, #44]	; (c030fac <tfm_spm_create_conn_handle+0x38>)
 c030f80:	f7e7 fa30 	bl	c0183e4 <iprintf>
 c030f84:	e7fe      	b.n	c030f84 <tfm_spm_create_conn_handle+0x10>

    /* Get buffer for handle list structure from handle pool */
    p_handle = (struct tfm_conn_handle_t *)tfm_pool_alloc(conn_handle_pool);
 c030f86:	480a      	ldr	r0, [pc, #40]	; (c030fb0 <tfm_spm_create_conn_handle+0x3c>)
 c030f88:	f002 fb3e 	bl	c033608 <tfm_pool_alloc>
    if (!p_handle) {
 c030f8c:	b158      	cbz	r0, c030fa6 <tfm_spm_create_conn_handle+0x32>
 * \param[in] node              List node want to be added.
 */
__STATIC_INLINE void
tfm_list_add_tail(struct tfm_list_node_t *head, struct tfm_list_node_t *node)
{
    head->prev->next = node;
 c030f8e:	68a2      	ldr	r2, [r4, #8]
    }

    p_handle->service = service;

    /* Add handle node to list for next psa functions */
    tfm_list_add_tail(&service->handle_list, &p_handle->list);
 c030f90:	f100 0394 	add.w	r3, r0, #148	; 0x94
    p_handle->service = service;
 c030f94:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
 c030f98:	6053      	str	r3, [r2, #4]
    node->prev = head->prev;
 c030f9a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    head->prev = node;
 c030f9e:	f844 3f08 	str.w	r3, [r4, #8]!
    node->next = head;
 c030fa2:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98

    return (psa_handle_t)p_handle;
}
 c030fa6:	bd10      	pop	{r4, pc}
 c030fa8:	0c036d60 	.word	0x0c036d60
 c030fac:	0c037052 	.word	0x0c037052
 c030fb0:	3003b48c 	.word	0x3003b48c

0c030fb4 <tfm_spm_free_conn_handle>:
    return (struct tfm_conn_handle_t *)conn_handle;
}

int32_t tfm_spm_free_conn_handle(struct tfm_spm_service_t *service,
                                 psa_handle_t conn_handle)
{
 c030fb4:	b538      	push	{r3, r4, r5, lr}
 c030fb6:	460c      	mov	r4, r1
    struct tfm_conn_handle_t *p_handle;

    TFM_ASSERT(service);
 c030fb8:	b928      	cbnz	r0, c030fc6 <tfm_spm_free_conn_handle+0x12>
 c030fba:	2255      	movs	r2, #85	; 0x55
 c030fbc:	490a      	ldr	r1, [pc, #40]	; (c030fe8 <tfm_spm_free_conn_handle+0x34>)
 c030fbe:	480b      	ldr	r0, [pc, #44]	; (c030fec <tfm_spm_free_conn_handle+0x38>)
 c030fc0:	f7e7 fa10 	bl	c0183e4 <iprintf>
 c030fc4:	e7fe      	b.n	c030fc4 <tfm_spm_free_conn_handle+0x10>

    /* There are many handles for each RoT Service */
    p_handle = tfm_spm_find_conn_handle_node(service, conn_handle);
    if (!p_handle) {
 c030fc6:	b909      	cbnz	r1, c030fcc <tfm_spm_free_conn_handle+0x18>
        tfm_panic();
 c030fc8:	f003 f9f6 	bl	c0343b8 <tfm_panic>
 *
 * \param[in] node              List node want to be deleted.
 */
__STATIC_INLINE void tfm_list_del_node(struct tfm_list_node_t *node)
{
    node->prev->next = node->next;
 c030fcc:	e9d4 3225 	ldrd	r3, r2, [r4, #148]	; 0x94
    }

    /* Clear magic as the handler is not used anymore */
    p_handle->internal_msg.magic = 0;
 c030fd0:	2500      	movs	r5, #0
 c030fd2:	6065      	str	r5, [r4, #4]
 c030fd4:	605a      	str	r2, [r3, #4]
    node->next->prev = node->prev;
 c030fd6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98

    /* Remove node from handle list */
    tfm_list_del_node(&p_handle->list);

    /* Back handle buffer to pool */
    tfm_pool_free(p_handle);
 c030fda:	4620      	mov	r0, r4
 c030fdc:	6013      	str	r3, [r2, #0]
 c030fde:	f002 fb22 	bl	c033626 <tfm_pool_free>
    return IPC_SUCCESS;
}
 c030fe2:	4628      	mov	r0, r5
 c030fe4:	bd38      	pop	{r3, r4, r5, pc}
 c030fe6:	bf00      	nop
 c030fe8:	0c036d7b 	.word	0x0c036d7b
 c030fec:	0c037052 	.word	0x0c037052

0c030ff0 <tfm_spm_set_rhandle>:

int32_t tfm_spm_set_rhandle(struct tfm_spm_service_t *service,
                            psa_handle_t conn_handle,
                            void *rhandle)
{
 c030ff0:	b508      	push	{r3, lr}
    struct tfm_conn_handle_t *p_handle;

    TFM_ASSERT(service);
 c030ff2:	b928      	cbnz	r0, c031000 <tfm_spm_set_rhandle+0x10>
 c030ff4:	226e      	movs	r2, #110	; 0x6e
 c030ff6:	4907      	ldr	r1, [pc, #28]	; (c031014 <tfm_spm_set_rhandle+0x24>)
 c030ff8:	4807      	ldr	r0, [pc, #28]	; (c031018 <tfm_spm_set_rhandle+0x28>)
 c030ffa:	f7e7 f9f3 	bl	c0183e4 <iprintf>
 c030ffe:	e7fe      	b.n	c030ffe <tfm_spm_set_rhandle+0xe>
    /* Set reverse handle value only be allowed for a connected handle */
    TFM_ASSERT(conn_handle != PSA_NULL_HANDLE);
 c031000:	b929      	cbnz	r1, c03100e <tfm_spm_set_rhandle+0x1e>
 c031002:	2270      	movs	r2, #112	; 0x70
 c031004:	4903      	ldr	r1, [pc, #12]	; (c031014 <tfm_spm_set_rhandle+0x24>)
 c031006:	4804      	ldr	r0, [pc, #16]	; (c031018 <tfm_spm_set_rhandle+0x28>)
 c031008:	f7e7 f9ec 	bl	c0183e4 <iprintf>
 c03100c:	e7fe      	b.n	c03100c <tfm_spm_set_rhandle+0x1c>
    p_handle = tfm_spm_find_conn_handle_node(service, conn_handle);
    if (!p_handle) {
        tfm_panic();
    }

    p_handle->rhandle = rhandle;
 c03100e:	600a      	str	r2, [r1, #0]
    return IPC_SUCCESS;
}
 c031010:	2000      	movs	r0, #0
 c031012:	bd08      	pop	{r3, pc}
 c031014:	0c036d94 	.word	0x0c036d94
 c031018:	0c037052 	.word	0x0c037052

0c03101c <tfm_spm_get_rhandle>:

void *tfm_spm_get_rhandle(struct tfm_spm_service_t *service,
                          psa_handle_t conn_handle)
{
 c03101c:	b508      	push	{r3, lr}
    struct tfm_conn_handle_t *p_handle;

    TFM_ASSERT(service);
 c03101e:	b928      	cbnz	r0, c03102c <tfm_spm_get_rhandle+0x10>
 c031020:	2281      	movs	r2, #129	; 0x81
 c031022:	4907      	ldr	r1, [pc, #28]	; (c031040 <tfm_spm_get_rhandle+0x24>)
 c031024:	4807      	ldr	r0, [pc, #28]	; (c031044 <tfm_spm_get_rhandle+0x28>)
 c031026:	f7e7 f9dd 	bl	c0183e4 <iprintf>
 c03102a:	e7fe      	b.n	c03102a <tfm_spm_get_rhandle+0xe>
    /* Get reverse handle value only be allowed for a connected handle */
    TFM_ASSERT(conn_handle != PSA_NULL_HANDLE);
 c03102c:	b929      	cbnz	r1, c03103a <tfm_spm_get_rhandle+0x1e>
 c03102e:	2283      	movs	r2, #131	; 0x83
 c031030:	4903      	ldr	r1, [pc, #12]	; (c031040 <tfm_spm_get_rhandle+0x24>)
 c031032:	4804      	ldr	r0, [pc, #16]	; (c031044 <tfm_spm_get_rhandle+0x28>)
 c031034:	f7e7 f9d6 	bl	c0183e4 <iprintf>
 c031038:	e7fe      	b.n	c031038 <tfm_spm_get_rhandle+0x1c>
    if (!p_handle) {
        tfm_panic();
    }

    return p_handle->rhandle;
}
 c03103a:	6808      	ldr	r0, [r1, #0]
 c03103c:	bd08      	pop	{r3, pc}
 c03103e:	bf00      	nop
 c031040:	0c036da8 	.word	0x0c036da8
 c031044:	0c037052 	.word	0x0c037052

0c031048 <tfm_spm_get_service_by_signal>:

/* Partition management functions */
struct tfm_spm_service_t *
    tfm_spm_get_service_by_signal(struct spm_partition_desc_t *partition,
                                  psa_signal_t signal)
{
 c031048:	b570      	push	{r4, r5, r6, lr}
 c03104a:	460e      	mov	r6, r1
    struct tfm_list_node_t *node, *head;
    struct tfm_spm_service_t *service;

    TFM_ASSERT(partition);
 c03104c:	4604      	mov	r4, r0
 c03104e:	b928      	cbnz	r0, c03105c <tfm_spm_get_service_by_signal+0x14>
 c031050:	2296      	movs	r2, #150	; 0x96
 c031052:	490d      	ldr	r1, [pc, #52]	; (c031088 <tfm_spm_get_service_by_signal+0x40>)
 c031054:	480d      	ldr	r0, [pc, #52]	; (c03108c <tfm_spm_get_service_by_signal+0x44>)
 c031056:	f7e7 f9c5 	bl	c0183e4 <iprintf>
 c03105a:	e7fe      	b.n	c03105a <tfm_spm_get_service_by_signal+0x12>

    if (tfm_list_is_empty(&partition->runtime_data.service_list)) {
 c03105c:	6903      	ldr	r3, [r0, #16]
 c03105e:	f100 050c 	add.w	r5, r0, #12
 c031062:	429d      	cmp	r5, r3
 c031064:	d101      	bne.n	c03106a <tfm_spm_get_service_by_signal+0x22>
        tfm_panic();
 c031066:	f003 f9a7 	bl	c0343b8 <tfm_panic>
    }

    head = &partition->runtime_data.service_list;
    TFM_LIST_FOR_EACH(node, head) {
 c03106a:	6923      	ldr	r3, [r4, #16]
 c03106c:	429d      	cmp	r5, r3
 c03106e:	d101      	bne.n	c031074 <tfm_spm_get_service_by_signal+0x2c>
        service = TFM_GET_CONTAINER_PTR(node, struct tfm_spm_service_t, list);
        if (service->service_db->signal == signal) {
            return service;
        }
    }
    return NULL;
 c031070:	2000      	movs	r0, #0
}
 c031072:	bd70      	pop	{r4, r5, r6, pc}
        if (service->service_db->signal == signal) {
 c031074:	f853 2c1c 	ldr.w	r2, [r3, #-28]
        service = TFM_GET_CONTAINER_PTR(node, struct tfm_spm_service_t, list);
 c031078:	f1a3 001c 	sub.w	r0, r3, #28
        if (service->service_db->signal == signal) {
 c03107c:	6892      	ldr	r2, [r2, #8]
 c03107e:	42b2      	cmp	r2, r6
 c031080:	d0f7      	beq.n	c031072 <tfm_spm_get_service_by_signal+0x2a>
    TFM_LIST_FOR_EACH(node, head) {
 c031082:	685b      	ldr	r3, [r3, #4]
 c031084:	e7f2      	b.n	c03106c <tfm_spm_get_service_by_signal+0x24>
 c031086:	bf00      	nop
 c031088:	0c036dbc 	.word	0x0c036dbc
 c03108c:	0c037052 	.word	0x0c037052

0c031090 <tfm_spm_get_service_by_sid>:

struct tfm_spm_service_t *tfm_spm_get_service_by_sid(uint32_t sid)
{
 c031090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c031094:	4607      	mov	r7, r0
    uint32_t i;
    struct tfm_list_node_t *node, *head;
    struct tfm_spm_service_t *service;
    struct spm_partition_desc_t *partition;

    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c031096:	2400      	movs	r4, #0
        partition = &g_spm_partition_db.partitions[i];
 c031098:	f04f 0870 	mov.w	r8, #112	; 0x70
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c03109c:	4e0f      	ldr	r6, [pc, #60]	; (c0310dc <tfm_spm_get_service_by_sid+0x4c>)
 c03109e:	6873      	ldr	r3, [r6, #4]
 c0310a0:	42a3      	cmp	r3, r4
 c0310a2:	d802      	bhi.n	c0310aa <tfm_spm_get_service_by_sid+0x1a>
            if (service->service_db->sid == sid) {
                return service;
            }
        }
    }
    return NULL;
 c0310a4:	2000      	movs	r0, #0
}
 c0310a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((tfm_spm_partition_get_flags(i) & SPM_PART_FLAG_IPC) == 0) {
 c0310aa:	4620      	mov	r0, r4
        partition = &g_spm_partition_db.partitions[i];
 c0310ac:	68b5      	ldr	r5, [r6, #8]
        if ((tfm_spm_partition_get_flags(i) & SPM_PART_FLAG_IPC) == 0) {
 c0310ae:	f7ff ff57 	bl	c030f60 <tfm_spm_partition_get_flags>
 c0310b2:	0743      	lsls	r3, r0, #29
 c0310b4:	d50f      	bpl.n	c0310d6 <tfm_spm_get_service_by_sid+0x46>
        partition = &g_spm_partition_db.partitions[i];
 c0310b6:	fb08 5304 	mla	r3, r8, r4, r5
        if (tfm_list_is_empty(&partition->runtime_data.service_list)) {
 c0310ba:	f103 020c 	add.w	r2, r3, #12
    return (head->next == head);
 c0310be:	691b      	ldr	r3, [r3, #16]
 c0310c0:	429a      	cmp	r2, r3
 c0310c2:	d008      	beq.n	c0310d6 <tfm_spm_get_service_by_sid+0x46>
            if (service->service_db->sid == sid) {
 c0310c4:	f853 1c1c 	ldr.w	r1, [r3, #-28]
            service = TFM_GET_CONTAINER_PTR(node, struct tfm_spm_service_t,
 c0310c8:	f1a3 001c 	sub.w	r0, r3, #28
            if (service->service_db->sid == sid) {
 c0310cc:	68c9      	ldr	r1, [r1, #12]
 c0310ce:	42b9      	cmp	r1, r7
 c0310d0:	d0e9      	beq.n	c0310a6 <tfm_spm_get_service_by_sid+0x16>
        TFM_LIST_FOR_EACH(node, head) {
 c0310d2:	685b      	ldr	r3, [r3, #4]
 c0310d4:	e7f4      	b.n	c0310c0 <tfm_spm_get_service_by_sid+0x30>
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c0310d6:	3401      	adds	r4, #1
 c0310d8:	e7e1      	b.n	c03109e <tfm_spm_get_service_by_sid+0xe>
 c0310da:	bf00      	nop
 c0310dc:	30035b4c 	.word	0x30035b4c

0c0310e0 <tfm_spm_get_service_by_handle>:

struct tfm_spm_service_t *
    tfm_spm_get_service_by_handle(psa_handle_t conn_handle)
{
    return ((struct tfm_conn_handle_t *)conn_handle)->service;
}
 c0310e0:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 c0310e4:	4770      	bx	lr
	...

0c0310e8 <tfm_spm_get_partition_by_id>:

struct spm_partition_desc_t *tfm_spm_get_partition_by_id(int32_t partition_id)
{
 c0310e8:	b508      	push	{r3, lr}
    uint32_t idx = get_partition_idx(partition_id);
 c0310ea:	f7ff fef5 	bl	c030ed8 <get_partition_idx>

    if (idx != SPM_INVALID_PARTITION_IDX) {
 c0310ee:	1c43      	adds	r3, r0, #1
        return &(g_spm_partition_db.partitions[idx]);
 c0310f0:	bf1b      	ittet	ne
 c0310f2:	2270      	movne	r2, #112	; 0x70
 c0310f4:	4b03      	ldrne	r3, [pc, #12]	; (c031104 <tfm_spm_get_partition_by_id+0x1c>)
    }
    return NULL;
 c0310f6:	2000      	moveq	r0, #0
        return &(g_spm_partition_db.partitions[idx]);
 c0310f8:	689b      	ldrne	r3, [r3, #8]
 c0310fa:	bf18      	it	ne
 c0310fc:	fb02 3000 	mlane	r0, r2, r0, r3
}
 c031100:	bd08      	pop	{r3, pc}
 c031102:	bf00      	nop
 c031104:	30035b4c 	.word	0x30035b4c

0c031108 <tfm_spm_check_client_version>:
    return tfm_spm_get_partition_by_id(spid);
}

int32_t tfm_spm_check_client_version(struct tfm_spm_service_t *service,
                                     uint32_t minor_version)
{
 c031108:	b508      	push	{r3, lr}
    TFM_ASSERT(service);
 c03110a:	b928      	cbnz	r0, c031118 <tfm_spm_check_client_version+0x10>
 c03110c:	22e0      	movs	r2, #224	; 0xe0
 c03110e:	490c      	ldr	r1, [pc, #48]	; (c031140 <tfm_spm_check_client_version+0x38>)
 c031110:	480c      	ldr	r0, [pc, #48]	; (c031144 <tfm_spm_check_client_version+0x3c>)
 c031112:	f7e7 f967 	bl	c0183e4 <iprintf>
 c031116:	e7fe      	b.n	c031116 <tfm_spm_check_client_version+0xe>

    switch (service->service_db->minor_policy) {
 c031118:	6803      	ldr	r3, [r0, #0]
 c03111a:	699a      	ldr	r2, [r3, #24]
 c03111c:	b11a      	cbz	r2, c031126 <tfm_spm_check_client_version+0x1e>
 c03111e:	2a01      	cmp	r2, #1
 c031120:	d007      	beq.n	c031132 <tfm_spm_check_client_version+0x2a>
        if (minor_version != service->service_db->minor_version) {
            return IPC_ERROR_VERSION;
        }
        break;
    default:
        return IPC_ERROR_VERSION;
 c031122:	4809      	ldr	r0, [pc, #36]	; (c031148 <tfm_spm_check_client_version+0x40>)
 c031124:	e004      	b.n	c031130 <tfm_spm_check_client_version+0x28>
        if (minor_version > service->service_db->minor_version) {
 c031126:	695b      	ldr	r3, [r3, #20]
            return IPC_ERROR_VERSION;
 c031128:	4807      	ldr	r0, [pc, #28]	; (c031148 <tfm_spm_check_client_version+0x40>)
 c03112a:	428b      	cmp	r3, r1
 c03112c:	bf28      	it	cs
 c03112e:	2000      	movcs	r0, #0
    }
    return IPC_SUCCESS;
}
 c031130:	bd08      	pop	{r3, pc}
        if (minor_version != service->service_db->minor_version) {
 c031132:	695b      	ldr	r3, [r3, #20]
            return IPC_ERROR_VERSION;
 c031134:	4804      	ldr	r0, [pc, #16]	; (c031148 <tfm_spm_check_client_version+0x40>)
 c031136:	428b      	cmp	r3, r1
 c031138:	bf08      	it	eq
 c03113a:	2000      	moveq	r0, #0
 c03113c:	e7f8      	b.n	c031130 <tfm_spm_check_client_version+0x28>
 c03113e:	bf00      	nop
 c031140:	0c036dda 	.word	0x0c036dda
 c031144:	0c037052 	.word	0x0c037052
 c031148:	80000002 	.word	0x80000002

0c03114c <tfm_spm_get_msg_buffer_from_conn_handle>:
    return msg;
}

struct tfm_msg_body_t *
    tfm_spm_get_msg_buffer_from_conn_handle(psa_handle_t conn_handle)
{
 c03114c:	b508      	push	{r3, lr}
    TFM_ASSERT(conn_handle != PSA_NULL_HANDLE);
 c03114e:	b930      	cbnz	r0, c03115e <tfm_spm_get_msg_buffer_from_conn_handle+0x12>
 c031150:	f44f 7294 	mov.w	r2, #296	; 0x128
 c031154:	4903      	ldr	r1, [pc, #12]	; (c031164 <tfm_spm_get_msg_buffer_from_conn_handle+0x18>)
 c031156:	4804      	ldr	r0, [pc, #16]	; (c031168 <tfm_spm_get_msg_buffer_from_conn_handle+0x1c>)
 c031158:	f7e7 f944 	bl	c0183e4 <iprintf>
 c03115c:	e7fe      	b.n	c03115c <tfm_spm_get_msg_buffer_from_conn_handle+0x10>

    return &(((struct tfm_conn_handle_t *)conn_handle)->internal_msg);
}
 c03115e:	3004      	adds	r0, #4
 c031160:	bd08      	pop	{r3, pc}
 c031162:	bf00      	nop
 c031164:	0c036df7 	.word	0x0c036df7
 c031168:	0c037052 	.word	0x0c037052

0c03116c <tfm_spm_send_event>:
    }
}

int32_t tfm_spm_send_event(struct tfm_spm_service_t *service,
                           struct tfm_msg_body_t *msg)
{
 c03116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c03116e:	4606      	mov	r6, r0
    struct spm_partition_runtime_data_t *p_runtime_data =
                                            &service->partition->runtime_data;

    TFM_ASSERT(service);
    TFM_ASSERT(msg);
 c031170:	460f      	mov	r7, r1
 c031172:	b931      	cbnz	r1, c031182 <tfm_spm_send_event+0x16>
 c031174:	f240 126d 	movw	r2, #365	; 0x16d
 c031178:	490e      	ldr	r1, [pc, #56]	; (c0311b4 <tfm_spm_send_event+0x48>)
 c03117a:	480f      	ldr	r0, [pc, #60]	; (c0311b8 <tfm_spm_send_event+0x4c>)
 c03117c:	f7e7 f932 	bl	c0183e4 <iprintf>
 c031180:	e7fe      	b.n	c031180 <tfm_spm_send_event+0x14>
                                            &service->partition->runtime_data;
 c031182:	6844      	ldr	r4, [r0, #4]

    /* Enqueue message to service message queue */
    if (tfm_msg_enqueue(&service->msg_queue, msg) != IPC_SUCCESS) {
 c031184:	3010      	adds	r0, #16
 c031186:	f002 f9af 	bl	c0334e8 <tfm_msg_enqueue>
 c03118a:	4605      	mov	r5, r0
 c03118c:	b978      	cbnz	r0, c0311ae <tfm_spm_send_event+0x42>
        return IPC_ERROR_GENERIC;
    }

    /* Messages put. Update signals */
    p_runtime_data->signals |= service->service_db->signal;
 c03118e:	6833      	ldr	r3, [r6, #0]
 c031190:	68a1      	ldr	r1, [r4, #8]
 c031192:	689b      	ldr	r3, [r3, #8]

    tfm_event_wake(&p_runtime_data->signal_evnt, (p_runtime_data->signals &
 c031194:	4620      	mov	r0, r4
    p_runtime_data->signals |= service->service_db->signal;
 c031196:	430b      	orrs	r3, r1
    tfm_event_wake(&p_runtime_data->signal_evnt, (p_runtime_data->signals &
 c031198:	6e21      	ldr	r1, [r4, #96]	; 0x60
    p_runtime_data->signals |= service->service_db->signal;
 c03119a:	60a3      	str	r3, [r4, #8]
    tfm_event_wake(&p_runtime_data->signal_evnt, (p_runtime_data->signals &
 c03119c:	4019      	ands	r1, r3
 c03119e:	f003 f92b 	bl	c0343f8 <tfm_event_wake>
                                                  p_runtime_data->signal_mask));

    tfm_event_wait(&msg->ack_evnt);
 c0311a2:	f107 000c 	add.w	r0, r7, #12
 c0311a6:	f003 f909 	bl	c0343bc <tfm_event_wait>

    return IPC_SUCCESS;
}
 c0311aa:	4628      	mov	r0, r5
 c0311ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return IPC_ERROR_GENERIC;
 c0311ae:	4d03      	ldr	r5, [pc, #12]	; (c0311bc <tfm_spm_send_event+0x50>)
 c0311b0:	e7fb      	b.n	c0311aa <tfm_spm_send_event+0x3e>
 c0311b2:	bf00      	nop
 c0311b4:	0c036e30 	.word	0x0c036e30
 c0311b8:	0c037052 	.word	0x0c037052
 c0311bc:	8000001f 	.word	0x8000001f

0c0311c0 <tfm_spm_partition_get_stack_bottom>:

uint32_t tfm_spm_partition_get_stack_bottom(uint32_t partition_idx)
{
    return g_spm_partition_db.partitions[partition_idx].
 c0311c0:	4b03      	ldr	r3, [pc, #12]	; (c0311d0 <tfm_spm_partition_get_stack_bottom+0x10>)
 c0311c2:	689a      	ldr	r2, [r3, #8]
 c0311c4:	2370      	movs	r3, #112	; 0x70
 c0311c6:	fb03 2000 	mla	r0, r3, r0, r2
            memory_data->stack_bottom;
 c0311ca:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
}
 c0311cc:	6a18      	ldr	r0, [r3, #32]
 c0311ce:	4770      	bx	lr
 c0311d0:	30035b4c 	.word	0x30035b4c

0c0311d4 <tfm_spm_partition_get_stack_top>:

uint32_t tfm_spm_partition_get_stack_top(uint32_t partition_idx)
{
    return g_spm_partition_db.partitions[partition_idx].memory_data->stack_top;
 c0311d4:	4b03      	ldr	r3, [pc, #12]	; (c0311e4 <tfm_spm_partition_get_stack_top+0x10>)
 c0311d6:	689a      	ldr	r2, [r3, #8]
 c0311d8:	2370      	movs	r3, #112	; 0x70
 c0311da:	fb03 2000 	mla	r0, r3, r0, r2
 c0311de:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
}
 c0311e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 c0311e2:	4770      	bx	lr
 c0311e4:	30035b4c 	.word	0x30035b4c

0c0311e8 <tfm_spm_partition_get_running_partition_id>:

uint32_t tfm_spm_partition_get_running_partition_id(void)
{
 c0311e8:	b508      	push	{r3, lr}
    struct tfm_thrd_ctx *pth = tfm_thrd_curr_thread();
 c0311ea:	f003 f803 	bl	c0341f4 <tfm_thrd_curr_thread>

    r_data = TFM_GET_CONTAINER_PTR(pth, struct spm_partition_runtime_data_t,
                                   sp_thrd);
    partition = TFM_GET_CONTAINER_PTR(r_data, struct spm_partition_desc_t,
                                      runtime_data);
    return partition->static_data->partition_id;
 c0311ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 c0311f0:	6818      	ldr	r0, [r3, #0]
 c0311f2:	bd08      	pop	{r3, pc}

0c0311f4 <tfm_spm_get_running_partition>:
{
 c0311f4:	b508      	push	{r3, lr}
    spid = tfm_spm_partition_get_running_partition_id();
 c0311f6:	f7ff fff7 	bl	c0311e8 <tfm_spm_partition_get_running_partition_id>
}
 c0311fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return tfm_spm_get_partition_by_id(spid);
 c0311fe:	f7ff bf73 	b.w	c0310e8 <tfm_spm_get_partition_by_id>
	...

0c031204 <tfm_spm_get_msg_from_handle>:
{
 c031204:	b510      	push	{r4, lr}
    if (is_valid_chunk_data_in_pool(
 c031206:	1f01      	subs	r1, r0, #4
{
 c031208:	4604      	mov	r4, r0
    if (is_valid_chunk_data_in_pool(
 c03120a:	480a      	ldr	r0, [pc, #40]	; (c031234 <tfm_spm_get_msg_from_handle+0x30>)
 c03120c:	f002 fa18 	bl	c033640 <is_valid_chunk_data_in_pool>
 c031210:	b910      	cbnz	r0, c031218 <tfm_spm_get_msg_from_handle+0x14>
        return NULL;
 c031212:	2400      	movs	r4, #0
}
 c031214:	4620      	mov	r0, r4
 c031216:	bd10      	pop	{r4, pc}
    if (msg->magic != TFM_MSG_MAGIC) {
 c031218:	6822      	ldr	r2, [r4, #0]
 c03121a:	4b07      	ldr	r3, [pc, #28]	; (c031238 <tfm_spm_get_msg_from_handle+0x34>)
 c03121c:	429a      	cmp	r2, r3
 c03121e:	d1f8      	bne.n	c031212 <tfm_spm_get_msg_from_handle+0xe>
    partition_id = tfm_spm_partition_get_running_partition_id();
 c031220:	f7ff ffe2 	bl	c0311e8 <tfm_spm_partition_get_running_partition_id>
    if (partition_id != msg->service->partition->static_data->partition_id) {
 c031224:	6863      	ldr	r3, [r4, #4]
 c031226:	685b      	ldr	r3, [r3, #4]
 c031228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c03122a:	681b      	ldr	r3, [r3, #0]
 c03122c:	4283      	cmp	r3, r0
 c03122e:	d0f1      	beq.n	c031214 <tfm_spm_get_msg_from_handle+0x10>
 c031230:	e7ef      	b.n	c031212 <tfm_spm_get_msg_from_handle+0xe>
 c031232:	bf00      	nop
 c031234:	3003b48c 	.word	0x3003b48c
 c031238:	15154343 	.word	0x15154343

0c03123c <tfm_spm_fill_msg>:
{
 c03123c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c031240:	4688      	mov	r8, r1
 c031242:	e9dd a60b 	ldrd	sl, r6, [sp, #44]	; 0x2c
 c031246:	e9dd 450d 	ldrd	r4, r5, [sp, #52]	; 0x34
 c03124a:	4691      	mov	r9, r2
 c03124c:	469b      	mov	fp, r3
    TFM_ASSERT(msg);
 c03124e:	4607      	mov	r7, r0
 c031250:	b930      	cbnz	r0, c031260 <tfm_spm_fill_msg+0x24>
 c031252:	f240 1237 	movw	r2, #311	; 0x137
 c031256:	4948      	ldr	r1, [pc, #288]	; (c031378 <tfm_spm_fill_msg+0x13c>)
 c031258:	4848      	ldr	r0, [pc, #288]	; (c03137c <tfm_spm_fill_msg+0x140>)
 c03125a:	f7e7 f8c3 	bl	c0183e4 <iprintf>
 c03125e:	e7fe      	b.n	c03125e <tfm_spm_fill_msg+0x22>
    TFM_ASSERT(service);
 c031260:	b931      	cbnz	r1, c031270 <tfm_spm_fill_msg+0x34>
 c031262:	f44f 729c 	mov.w	r2, #312	; 0x138
 c031266:	4944      	ldr	r1, [pc, #272]	; (c031378 <tfm_spm_fill_msg+0x13c>)
 c031268:	4844      	ldr	r0, [pc, #272]	; (c03137c <tfm_spm_fill_msg+0x140>)
 c03126a:	f7e7 f8bb 	bl	c0183e4 <iprintf>
 c03126e:	e7fe      	b.n	c03126e <tfm_spm_fill_msg+0x32>
    TFM_ASSERT(!(invec == NULL && in_len != 0));
 c031270:	f1ba 0f00 	cmp.w	sl, #0
 c031274:	d108      	bne.n	c031288 <tfm_spm_fill_msg+0x4c>
 c031276:	2e00      	cmp	r6, #0
 c031278:	d038      	beq.n	c0312ec <tfm_spm_fill_msg+0xb0>
 c03127a:	f240 1239 	movw	r2, #313	; 0x139
 c03127e:	493e      	ldr	r1, [pc, #248]	; (c031378 <tfm_spm_fill_msg+0x13c>)
 c031280:	483e      	ldr	r0, [pc, #248]	; (c03137c <tfm_spm_fill_msg+0x140>)
 c031282:	f7e7 f8af 	bl	c0183e4 <iprintf>
 c031286:	e7fe      	b.n	c031286 <tfm_spm_fill_msg+0x4a>
    TFM_ASSERT(!(outvec == NULL && out_len != 0));
 c031288:	b944      	cbnz	r4, c03129c <tfm_spm_fill_msg+0x60>
 c03128a:	2d00      	cmp	r5, #0
 c03128c:	d067      	beq.n	c03135e <tfm_spm_fill_msg+0x122>
 c03128e:	f44f 729d 	mov.w	r2, #314	; 0x13a
 c031292:	4939      	ldr	r1, [pc, #228]	; (c031378 <tfm_spm_fill_msg+0x13c>)
 c031294:	4839      	ldr	r0, [pc, #228]	; (c03137c <tfm_spm_fill_msg+0x140>)
 c031296:	f7e7 f8a5 	bl	c0183e4 <iprintf>
 c03129a:	e7fe      	b.n	c03129a <tfm_spm_fill_msg+0x5e>
    TFM_ASSERT(in_len <= PSA_MAX_IOVEC);
 c03129c:	2e04      	cmp	r6, #4
 c03129e:	d906      	bls.n	c0312ae <tfm_spm_fill_msg+0x72>
 c0312a0:	f240 123b 	movw	r2, #315	; 0x13b
 c0312a4:	4934      	ldr	r1, [pc, #208]	; (c031378 <tfm_spm_fill_msg+0x13c>)
 c0312a6:	4835      	ldr	r0, [pc, #212]	; (c03137c <tfm_spm_fill_msg+0x140>)
 c0312a8:	f7e7 f89c 	bl	c0183e4 <iprintf>
 c0312ac:	e7fe      	b.n	c0312ac <tfm_spm_fill_msg+0x70>
    TFM_ASSERT(out_len <= PSA_MAX_IOVEC);
 c0312ae:	2d04      	cmp	r5, #4
 c0312b0:	d957      	bls.n	c031362 <tfm_spm_fill_msg+0x126>
 c0312b2:	f44f 729e 	mov.w	r2, #316	; 0x13c
 c0312b6:	4930      	ldr	r1, [pc, #192]	; (c031378 <tfm_spm_fill_msg+0x13c>)
 c0312b8:	4830      	ldr	r0, [pc, #192]	; (c03137c <tfm_spm_fill_msg+0x140>)
 c0312ba:	f7e7 f893 	bl	c0183e4 <iprintf>
 c0312be:	e7fe      	b.n	c0312be <tfm_spm_fill_msg+0x82>
        msg->msg.client_id = tfm_spm_partition_get_running_partition_id();
 c0312c0:	f7ff ff92 	bl	c0311e8 <tfm_spm_partition_get_running_partition_id>
 c0312c4:	e02c      	b.n	c031320 <tfm_spm_fill_msg+0xe4>
        msg->msg.in_size[i] = invec[i].len;
 c0312c6:	eb0a 0002 	add.w	r0, sl, r2
 c0312ca:	6840      	ldr	r0, [r0, #4]
        msg->invec[i].base = invec[i].base;
 c0312cc:	18bb      	adds	r3, r7, r2
        msg->msg.in_size[i] = invec[i].len;
 c0312ce:	f841 0b04 	str.w	r0, [r1], #4
        msg->invec[i].base = invec[i].base;
 c0312d2:	f85a 0002 	ldr.w	r0, [sl, r2]
 c0312d6:	3208      	adds	r2, #8
 c0312d8:	6458      	str	r0, [r3, #68]	; 0x44
 c0312da:	e028      	b.n	c03132e <tfm_spm_fill_msg+0xf2>
        msg->msg.out_size[i] = outvec[i].len;
 c0312dc:	6860      	ldr	r0, [r4, #4]
 c0312de:	f841 0b04 	str.w	r0, [r1], #4
        msg->outvec[i].base = outvec[i].base;
 c0312e2:	f854 0b08 	ldr.w	r0, [r4], #8
        msg->outvec[i].len = 0;
 c0312e6:	e942 0602 	strd	r0, r6, [r2, #-8]
 c0312ea:	e029      	b.n	c031340 <tfm_spm_fill_msg+0x104>
    TFM_ASSERT(!(outvec == NULL && out_len != 0));
 c0312ec:	2c00      	cmp	r4, #0
 c0312ee:	d0cc      	beq.n	c03128a <tfm_spm_fill_msg+0x4e>
    TFM_ASSERT(out_len <= PSA_MAX_IOVEC);
 c0312f0:	2d04      	cmp	r5, #4
 c0312f2:	d8de      	bhi.n	c0312b2 <tfm_spm_fill_msg+0x76>
    tfm_core_util_memset(msg, 0, sizeof(struct tfm_msg_body_t));
 c0312f4:	228c      	movs	r2, #140	; 0x8c
 c0312f6:	2100      	movs	r1, #0
 c0312f8:	4638      	mov	r0, r7
 c0312fa:	f001 ff07 	bl	c03310c <tfm_core_util_memset>
 *  pevnt      -    The pointer of event object allocated by the caller
 */
void __STATIC_INLINE tfm_event_init(struct tfm_event_t *pevnt)
{
    pevnt->magic = TFM_EVENT_MAGIC;
    pevnt->owner = NULL;
 c0312fe:	2200      	movs	r2, #0
 c031300:	4b1f      	ldr	r3, [pc, #124]	; (c031380 <tfm_spm_fill_msg+0x144>)
    msg->handle = handle;
 c031302:	f8c7 9008 	str.w	r9, [r7, #8]
 c031306:	e9c7 3203 	strd	r3, r2, [r7, #12]
    msg->magic = TFM_MSG_MAGIC;
 c03130a:	4a1e      	ldr	r2, [pc, #120]	; (c031384 <tfm_spm_fill_msg+0x148>)
    if (ns_caller) {
 c03130c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    msg->service = service;
 c03130e:	e9c7 2800 	strd	r2, r8, [r7]
    msg->caller_outvec = caller_outvec;
 c031312:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 c031314:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
    if (ns_caller) {
 c031318:	2b00      	cmp	r3, #0
 c03131a:	d0d1      	beq.n	c0312c0 <tfm_spm_fill_msg+0x84>
        msg->msg.client_id = tfm_nspm_get_current_client_id();
 c03131c:	f002 f908 	bl	c033530 <tfm_nspm_get_current_client_id>
    for (i = 0; i < in_len; i++) {
 c031320:	2200      	movs	r2, #0
        msg->msg.client_id = tfm_spm_partition_get_running_partition_id();
 c031322:	61f8      	str	r0, [r7, #28]
    msg->msg.type = type;
 c031324:	f8c7 b014 	str.w	fp, [r7, #20]
 c031328:	f107 0124 	add.w	r1, r7, #36	; 0x24
 c03132c:	00f6      	lsls	r6, r6, #3
    for (i = 0; i < in_len; i++) {
 c03132e:	42b2      	cmp	r2, r6
 c031330:	d1c9      	bne.n	c0312c6 <tfm_spm_fill_msg+0x8a>
        msg->outvec[i].len = 0;
 c031332:	2600      	movs	r6, #0
 c031334:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c031338:	f107 0264 	add.w	r2, r7, #100	; 0x64
 c03133c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (i = 0; i < out_len; i++) {
 c031340:	42a5      	cmp	r5, r4
 c031342:	f102 0208 	add.w	r2, r2, #8
 c031346:	d1c9      	bne.n	c0312dc <tfm_spm_fill_msg+0xa0>
    msg->msg.handle = (psa_handle_t)msg;
 c031348:	61bf      	str	r7, [r7, #24]
    if (handle != PSA_NULL_HANDLE) {
 c03134a:	f1b9 0f00 	cmp.w	r9, #0
 c03134e:	d004      	beq.n	c03135a <tfm_spm_fill_msg+0x11e>
        msg->msg.rhandle = tfm_spm_get_rhandle(service, handle);
 c031350:	4649      	mov	r1, r9
 c031352:	4640      	mov	r0, r8
 c031354:	f7ff fe62 	bl	c03101c <tfm_spm_get_rhandle>
 c031358:	6238      	str	r0, [r7, #32]
}
 c03135a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFM_ASSERT(in_len <= PSA_MAX_IOVEC);
 c03135e:	2e04      	cmp	r6, #4
 c031360:	d89e      	bhi.n	c0312a0 <tfm_spm_fill_msg+0x64>
    TFM_ASSERT(in_len + out_len <= PSA_MAX_IOVEC);
 c031362:	1972      	adds	r2, r6, r5
 c031364:	2a04      	cmp	r2, #4
 c031366:	d9c5      	bls.n	c0312f4 <tfm_spm_fill_msg+0xb8>
 c031368:	f240 123d 	movw	r2, #317	; 0x13d
 c03136c:	4902      	ldr	r1, [pc, #8]	; (c031378 <tfm_spm_fill_msg+0x13c>)
 c03136e:	4803      	ldr	r0, [pc, #12]	; (c03137c <tfm_spm_fill_msg+0x140>)
 c031370:	f7e7 f838 	bl	c0183e4 <iprintf>
 c031374:	e7fe      	b.n	c031374 <tfm_spm_fill_msg+0x138>
 c031376:	bf00      	nop
 c031378:	0c036e1f 	.word	0x0c036e1f
 c03137c:	0c037052 	.word	0x0c037052
 c031380:	65766e74 	.word	0x65766e74
 c031384:	15154343 	.word	0x15154343

0c031388 <tfm_memory_check>:
}

int32_t tfm_memory_check(const void *buffer, size_t len, int32_t ns_caller,
                         enum tfm_memory_access_e access,
                         uint32_t privileged)
{
 c031388:	b538      	push	{r3, r4, r5, lr}
    enum tfm_status_e err;

    /* If len is zero, this indicates an empty buffer and base is ignored */
    if (len == 0) {
 c03138a:	b909      	cbnz	r1, c031390 <tfm_memory_check+0x8>
        return IPC_SUCCESS;
 c03138c:	2000      	movs	r0, #0
    if (err == TFM_SUCCESS) {
        return IPC_SUCCESS;
    }

    return IPC_ERROR_MEMORY_CHECK;
}
 c03138e:	bd38      	pop	{r3, r4, r5, pc}
    if (!buffer) {
 c031390:	b170      	cbz	r0, c0313b0 <tfm_memory_check+0x28>
    if ((uintptr_t)buffer > (UINTPTR_MAX - len)) {
 c031392:	43cc      	mvns	r4, r1
 c031394:	42a0      	cmp	r0, r4
 c031396:	d806      	bhi.n	c0313a6 <tfm_memory_check+0x1e>
    if (access == TFM_MEMORY_ACCESS_RW) {
 c031398:	2b02      	cmp	r3, #2
        err = tfm_core_has_write_access_to_region(buffer, len, ns_caller,
 c03139a:	9b04      	ldr	r3, [sp, #16]
    if (access == TFM_MEMORY_ACCESS_RW) {
 c03139c:	d105      	bne.n	c0313aa <tfm_memory_check+0x22>
        err = tfm_core_has_write_access_to_region(buffer, len, ns_caller,
 c03139e:	f001 fe41 	bl	c033024 <tfm_core_has_write_access_to_region>
    if (err == TFM_SUCCESS) {
 c0313a2:	2800      	cmp	r0, #0
 c0313a4:	d0f2      	beq.n	c03138c <tfm_memory_check+0x4>
    return IPC_ERROR_MEMORY_CHECK;
 c0313a6:	4804      	ldr	r0, [pc, #16]	; (c0313b8 <tfm_memory_check+0x30>)
 c0313a8:	e7f1      	b.n	c03138e <tfm_memory_check+0x6>
        err = tfm_core_has_read_access_to_region(buffer, len, ns_caller,
 c0313aa:	f001 fe31 	bl	c033010 <tfm_core_has_read_access_to_region>
 c0313ae:	e7f8      	b.n	c0313a2 <tfm_memory_check+0x1a>
        return IPC_ERROR_BAD_PARAMETERS;
 c0313b0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 c0313b4:	e7eb      	b.n	c03138e <tfm_memory_check+0x6>
 c0313b6:	bf00      	nop
 c0313b8:	80000003 	.word	0x80000003

0c0313bc <tfm_spm_partition_get_privileged_mode>:
    if (partition_flags & SPM_PART_FLAG_PSA_ROT) {
        return TFM_PARTITION_PRIVILEGED_MODE;
    } else {
        return TFM_PARTITION_UNPRIVILEGED_MODE;
    }
}
 c0313bc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 c0313c0:	4770      	bx	lr
	...

0c0313c4 <tfm_spm_init>:

/********************** SPM functions for thread mode ************************/

void tfm_spm_init(void)
{
 c0313c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                  POOL_BUFFER_SIZE(conn_handle_pool),
                  sizeof(struct tfm_conn_handle_t),
                  TFM_CONN_HANDLE_MAX_NUM);

    /* Init partition first for it will be used when init service */
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c0313c8:	4f3a      	ldr	r7, [pc, #232]	; (c0314b4 <tfm_spm_init+0xf0>)
{
 c0313ca:	b097      	sub	sp, #92	; 0x5c
    tfm_pool_init(conn_handle_pool,
 c0313cc:	2310      	movs	r3, #16
 c0313ce:	229c      	movs	r2, #156	; 0x9c
 c0313d0:	f44f 6129 	mov.w	r1, #2704	; 0xa90
 c0313d4:	4838      	ldr	r0, [pc, #224]	; (c0314b8 <tfm_spm_init+0xf4>)
 c0313d6:	f002 f8ef 	bl	c0335b8 <tfm_pool_init>
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c0313da:	2400      	movs	r4, #0
 c0313dc:	46b8      	mov	r8, r7
    pevnt->magic = TFM_EVENT_MAGIC;
 c0313de:	f8df 90e8 	ldr.w	r9, [pc, #232]	; c0314c8 <tfm_spm_init+0x104>
 c0313e2:	687b      	ldr	r3, [r7, #4]
 c0313e4:	42a3      	cmp	r3, r4
 c0313e6:	d827      	bhi.n	c031438 <tfm_spm_init+0x74>
 c0313e8:	2600      	movs	r6, #0
 c0313ea:	4c34      	ldr	r4, [pc, #208]	; (c0314bc <tfm_spm_init+0xf8>)
    }

    /* Init Service */
    num = sizeof(service) / sizeof(struct tfm_spm_service_t);
    for (i = 0; i < num; i++) {
        service[i].service_db = &service_db[i];
 c0313ec:	4f34      	ldr	r7, [pc, #208]	; (c0314c0 <tfm_spm_init+0xfc>)
 c0313ee:	19bb      	adds	r3, r7, r6
 c0313f0:	f844 3c08 	str.w	r3, [r4, #-8]
        partition =
 c0313f4:	6858      	ldr	r0, [r3, #4]
 c0313f6:	f7ff fe77 	bl	c0310e8 <tfm_spm_get_partition_by_id>
            tfm_spm_get_partition_by_id(service[i].service_db->partition_id);
        if (!partition) {
 c0313fa:	4605      	mov	r5, r0
 c0313fc:	b908      	cbnz	r0, c031402 <tfm_spm_init+0x3e>
            tfm_panic();
 c0313fe:	f002 ffdb 	bl	c0343b8 <tfm_panic>
    head->prev = head;
 c031402:	e9c4 4400 	strd	r4, r4, [r4]
    head->prev->next = node;
 c031406:	68ea      	ldr	r2, [r5, #12]
 c031408:	f104 0314 	add.w	r3, r4, #20
 c03140c:	361c      	adds	r6, #28
        }
        service[i].partition = partition;
 c03140e:	f844 5c04 	str.w	r5, [r4, #-4]
    for (i = 0; i < num; i++) {
 c031412:	f5b6 7fa8 	cmp.w	r6, #336	; 0x150
 c031416:	6053      	str	r3, [r2, #4]
    node->prev = head->prev;
 c031418:	6162      	str	r2, [r4, #20]
    head->prev = node;
 c03141a:	f845 3f0c 	str.w	r3, [r5, #12]!
    node->next = head;
 c03141e:	61a5      	str	r5, [r4, #24]
 c031420:	f104 0424 	add.w	r4, r4, #36	; 0x24
 c031424:	d1e3      	bne.n	c0313ee <tfm_spm_init+0x2a>
     * Let's save this context in a local variable 'this_thrd' at
     * current since there is no usage for it.
     * Also set tfm_nspm_thread_entry as pfn for this thread to
     * use in detecting NS/S thread scheduling changes.
     */
    this_thrd.pfn = (tfm_thrd_func_t)tfm_nspm_thread_entry;
 c031426:	4b27      	ldr	r3, [pc, #156]	; (c0314c4 <tfm_spm_init+0x100>)
 c031428:	a816      	add	r0, sp, #88	; 0x58
 c03142a:	f840 3d4c 	str.w	r3, [r0, #-76]!
    tfm_thrd_start_scheduler(&this_thrd);
 c03142e:	f002 ff6f 	bl	c034310 <tfm_thrd_start_scheduler>
}
 c031432:	b017      	add	sp, #92	; 0x5c
 c031434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c031438:	2570      	movs	r5, #112	; 0x70
 c03143a:	4365      	muls	r5, r4
        partition = &g_spm_partition_db.partitions[i];
 c03143c:	f8d7 a008 	ldr.w	sl, [r7, #8]
 c031440:	eb0a 0605 	add.w	r6, sl, r5
        tfm_spm_hal_configure_default_isolation(partition->platform_data);
 c031444:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 c031446:	f7ef fc2b 	bl	c020ca0 <tfm_spm_hal_configure_default_isolation>
        if ((tfm_spm_partition_get_flags(i) & SPM_PART_FLAG_IPC) == 0) {
 c03144a:	4620      	mov	r0, r4
 c03144c:	f7ff fd88 	bl	c030f60 <tfm_spm_partition_get_flags>
 c031450:	0743      	lsls	r3, r0, #29
 c031452:	d52c      	bpl.n	c0314ae <tfm_spm_init+0xea>
    pevnt->owner = NULL;
 c031454:	2300      	movs	r3, #0
    pevnt->magic = TFM_EVENT_MAGIC;
 c031456:	f84a 9005 	str.w	r9, [sl, r5]
    pevnt->owner = NULL;
 c03145a:	6073      	str	r3, [r6, #4]
        tfm_list_init(&partition->runtime_data.service_list);
 c03145c:	f106 030c 	add.w	r3, r6, #12
    head->prev = head;
 c031460:	e9c6 3303 	strd	r3, r3, [r6, #12]
    return &g_spm_partition_db.partitions[partition_idx].runtime_data.sp_thrd;
 c031464:	68be      	ldr	r6, [r7, #8]
 c031466:	442e      	add	r6, r5
        if (!pth) {
 c031468:	f116 0a14 	adds.w	sl, r6, #20
 c03146c:	d101      	bne.n	c031472 <tfm_spm_init+0xae>
            tfm_panic();
 c03146e:	f002 ffa3 	bl	c0343b8 <tfm_panic>
                      (uintptr_t)tfm_spm_partition_get_stack_top(i),
 c031472:	4620      	mov	r0, r4
 c031474:	f7ff feae 	bl	c0311d4 <tfm_spm_partition_get_stack_top>
 c031478:	4683      	mov	fp, r0
                      (uintptr_t)tfm_spm_partition_get_stack_bottom(i));
 c03147a:	4620      	mov	r0, r4
 c03147c:	f7ff fea0 	bl	c0311c0 <tfm_spm_partition_get_stack_bottom>
    return (tfm_thrd_func_t)(g_spm_partition_db.partitions[partition_idx].
 c031480:	f8d8 2008 	ldr.w	r2, [r8, #8]
        tfm_thrd_init(pth,
 c031484:	465b      	mov	r3, fp
    return (tfm_thrd_func_t)(g_spm_partition_db.partitions[partition_idx].
 c031486:	442a      	add	r2, r5
 c031488:	6e51      	ldr	r1, [r2, #100]	; 0x64
        tfm_thrd_init(pth,
 c03148a:	9000      	str	r0, [sp, #0]
 c03148c:	2200      	movs	r2, #0
 c03148e:	4650      	mov	r0, sl
 c031490:	68c9      	ldr	r1, [r1, #12]
 c031492:	f002 feb5 	bl	c034200 <tfm_thrd_init>
    return g_spm_partition_db.partitions[partition_idx].static_data->
 c031496:	f8d8 3008 	ldr.w	r3, [r8, #8]
        if (tfm_thrd_start(pth) != THRD_SUCCESS) {
 c03149a:	4650      	mov	r0, sl
    return g_spm_partition_db.partitions[partition_idx].static_data->
 c03149c:	441d      	add	r5, r3
 c03149e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
        pth->prior = tfm_spm_partition_get_priority(i);
 c0314a0:	689b      	ldr	r3, [r3, #8]
 c0314a2:	6273      	str	r3, [r6, #36]	; 0x24
        if (tfm_thrd_start(pth) != THRD_SUCCESS) {
 c0314a4:	f002 feda 	bl	c03425c <tfm_thrd_start>
 c0314a8:	b108      	cbz	r0, c0314ae <tfm_spm_init+0xea>
            tfm_panic();
 c0314aa:	f002 ff85 	bl	c0343b8 <tfm_panic>
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c0314ae:	3401      	adds	r4, #1
 c0314b0:	e797      	b.n	c0313e2 <tfm_spm_init+0x1e>
 c0314b2:	bf00      	nop
 c0314b4:	30035b4c 	.word	0x30035b4c
 c0314b8:	3003b48c 	.word	0x3003b48c
 c0314bc:	3003bf24 	.word	0x3003bf24
 c0314c0:	0c036e44 	.word	0x0c036e44
 c0314c4:	0c01b609 	.word	0x0c01b609
 c0314c8:	65766e74 	.word	0x65766e74

0c0314cc <tfm_pendsv_do_schedule>:

void tfm_pendsv_do_schedule(struct tfm_state_context_ext *ctxb)
{
 c0314cc:	b570      	push	{r4, r5, r6, lr}
 c0314ce:	4606      	mov	r6, r0
#if TFM_LVL == 2
    struct spm_partition_desc_t *p_next_partition;
    struct spm_partition_runtime_data_t *r_data;
    uint32_t is_privileged;
#endif
    struct tfm_thrd_ctx *pth_next = tfm_thrd_next_thread();
 c0314d0:	f002 fe84 	bl	c0341dc <tfm_thrd_next_thread>
 c0314d4:	4604      	mov	r4, r0
    struct tfm_thrd_ctx *pth_curr = tfm_thrd_curr_thread();
 c0314d6:	f002 fe8d 	bl	c0341f4 <tfm_thrd_curr_thread>
 c0314da:	4605      	mov	r5, r0

    if (pth_next != NULL && pth_curr != pth_next) {
 c0314dc:	b1f4      	cbz	r4, c03151c <tfm_pendsv_do_schedule+0x50>
 c0314de:	4284      	cmp	r4, r0
 c0314e0:	d01c      	beq.n	c03151c <tfm_pendsv_do_schedule+0x50>
                                       sp_thrd);
        p_next_partition = TFM_GET_CONTAINER_PTR(r_data,
                                                 struct spm_partition_desc_t,
                                                 runtime_data);

        if (p_next_partition->static_data->partition_flags &
 c0314e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 c0314e4:	6858      	ldr	r0, [r3, #4]
            is_privileged = TFM_PARTITION_PRIVILEGED_MODE;
        } else {
            is_privileged = TFM_PARTITION_UNPRIVILEGED_MODE;
        }

        tfm_spm_partition_change_privilege(is_privileged);
 c0314e6:	f3c0 0040 	ubfx	r0, r0, #1, #1
 c0314ea:	f7e8 ffd7 	bl	c01a49c <tfm_spm_partition_change_privilege>
#endif
        /* Increase the secure lock, if we enter secure from non-secure */
        if ((void *)pth_curr->pfn == (void *)tfm_nspm_thread_entry) {
 c0314ee:	682a      	ldr	r2, [r5, #0]
 c0314f0:	4b0b      	ldr	r3, [pc, #44]	; (c031520 <tfm_pendsv_do_schedule+0x54>)
        /* Decrease the secure lock, if we return from secure to non-secure */
        if ((void *)pth_next->pfn == (void *)tfm_nspm_thread_entry) {
            --tfm_secure_lock;
        }

        tfm_thrd_context_switch(ctxb, pth_curr, pth_next);
 c0314f2:	4630      	mov	r0, r6
        if ((void *)pth_curr->pfn == (void *)tfm_nspm_thread_entry) {
 c0314f4:	429a      	cmp	r2, r3
            ++tfm_secure_lock;
 c0314f6:	bf01      	itttt	eq
 c0314f8:	490a      	ldreq	r1, [pc, #40]	; (c031524 <tfm_pendsv_do_schedule+0x58>)
 c0314fa:	680a      	ldreq	r2, [r1, #0]
 c0314fc:	3201      	addeq	r2, #1
 c0314fe:	600a      	streq	r2, [r1, #0]
        if ((void *)pth_next->pfn == (void *)tfm_nspm_thread_entry) {
 c031500:	6822      	ldr	r2, [r4, #0]
        tfm_thrd_context_switch(ctxb, pth_curr, pth_next);
 c031502:	4629      	mov	r1, r5
        if ((void *)pth_next->pfn == (void *)tfm_nspm_thread_entry) {
 c031504:	429a      	cmp	r2, r3
            --tfm_secure_lock;
 c031506:	bf01      	itttt	eq
 c031508:	4a06      	ldreq	r2, [pc, #24]	; (c031524 <tfm_pendsv_do_schedule+0x58>)
 c03150a:	6813      	ldreq	r3, [r2, #0]
 c03150c:	f103 33ff 	addeq.w	r3, r3, #4294967295
 c031510:	6013      	streq	r3, [r2, #0]
        tfm_thrd_context_switch(ctxb, pth_curr, pth_next);
 c031512:	4622      	mov	r2, r4
    }
}
 c031514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        tfm_thrd_context_switch(ctxb, pth_curr, pth_next);
 c031518:	f002 bf28 	b.w	c03436c <tfm_thrd_context_switch>
}
 c03151c:	bd70      	pop	{r4, r5, r6, pc}
 c03151e:	bf00      	nop
 c031520:	0c01b609 	.word	0x0c01b609
 c031524:	3003c974 	.word	0x3003c974

0c031528 <sst_crypto_getkey>:
     */
    return PSA_PS_SUCCESS;
}

psa_ps_status_t sst_crypto_getkey(uint32_t key_len, uint8_t *key)
{
 c031528:	b508      	push	{r3, lr}
 c03152a:	460b      	mov	r3, r1
     * be accessed by multiple clients (i.e. multiple client ID)
     *
     * To be fixed in later revisions. Currently, just use the
     * same HUK (derived) key for all the crypto operations.
     */
    err = tfm_plat_get_crypto_huk(key, key_len);
 c03152c:	4601      	mov	r1, r0
 c03152e:	4618      	mov	r0, r3
 c031530:	f7e8 fef8 	bl	c01a324 <tfm_plat_get_crypto_huk>
    if (err != TFM_PLAT_ERR_SUCCESS) {
 c031534:	2800      	cmp	r0, #0
        return PSA_PS_ERROR_OPERATION_FAILED;
    }

    return PSA_PS_SUCCESS;
}
 c031536:	bf14      	ite	ne
 c031538:	200b      	movne	r0, #11
 c03153a:	2000      	moveq	r0, #0
 c03153c:	bd08      	pop	{r3, pc}
	...

0c031540 <sst_crypto_setkey>:

psa_ps_status_t sst_crypto_setkey(uint32_t key_len, const uint8_t *key)
{
 c031540:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    psa_status_t status;
    psa_key_policy_t key_policy = PSA_KEY_POLICY_INIT;
 c031542:	2300      	movs	r3, #0

    /* Allocate a transient key handle for SST */
    status = psa_allocate_key(&sst_key_handle);
 c031544:	4c10      	ldr	r4, [pc, #64]	; (c031588 <sst_crypto_setkey+0x48>)
{
 c031546:	4606      	mov	r6, r0
    status = psa_allocate_key(&sst_key_handle);
 c031548:	4620      	mov	r0, r4
{
 c03154a:	460d      	mov	r5, r1
    psa_key_policy_t key_policy = PSA_KEY_POLICY_INIT;
 c03154c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 c031550:	9303      	str	r3, [sp, #12]
    status = psa_allocate_key(&sst_key_handle);
 c031552:	f7e8 ffb0 	bl	c01a4b6 <psa_allocate_key>
    if (status != PSA_SUCCESS) {
 c031556:	b110      	cbz	r0, c03155e <sst_crypto_setkey+0x1e>
        return PSA_PS_ERROR_OPERATION_FAILED;
 c031558:	200b      	movs	r0, #11
    if (status != PSA_SUCCESS) {
        return PSA_PS_ERROR_OPERATION_FAILED;
    }

    return PSA_PS_SUCCESS;
}
 c03155a:	b004      	add	sp, #16
 c03155c:	bd70      	pop	{r4, r5, r6, pc}
    psa_key_policy_set_usage(&key_policy, SST_KEY_USAGE, SST_CRYPTO_ALG);
 c03155e:	f44f 7140 	mov.w	r1, #768	; 0x300
 c031562:	a801      	add	r0, sp, #4
 c031564:	4a09      	ldr	r2, [pc, #36]	; (c03158c <sst_crypto_setkey+0x4c>)
 c031566:	f7e9 f8ef 	bl	c01a748 <psa_key_policy_set_usage>
    status = psa_set_key_policy(sst_key_handle, &key_policy);
 c03156a:	a901      	add	r1, sp, #4
 c03156c:	8820      	ldrh	r0, [r4, #0]
 c03156e:	f7e9 f8f2 	bl	c01a756 <psa_set_key_policy>
    if (status != PSA_SUCCESS) {
 c031572:	2800      	cmp	r0, #0
 c031574:	d1f0      	bne.n	c031558 <sst_crypto_setkey+0x18>
    status = psa_import_key(sst_key_handle, SST_KEY_TYPE, key, key_len);
 c031576:	4633      	mov	r3, r6
 c031578:	462a      	mov	r2, r5
 c03157a:	4905      	ldr	r1, [pc, #20]	; (c031590 <sst_crypto_setkey+0x50>)
 c03157c:	8820      	ldrh	r0, [r4, #0]
 c03157e:	f7e8 ffca 	bl	c01a516 <psa_import_key>
    if (status != PSA_SUCCESS) {
 c031582:	2800      	cmp	r0, #0
 c031584:	d0e9      	beq.n	c03155a <sst_crypto_setkey+0x1a>
 c031586:	e7e7      	b.n	c031558 <sst_crypto_setkey+0x18>
 c031588:	3003c0d8 	.word	0x3003c0d8
 c03158c:	06001002 	.word	0x06001002
 c031590:	40000001 	.word	0x40000001

0c031594 <sst_crypto_destroykey>:

psa_ps_status_t sst_crypto_destroykey(void)
{
 c031594:	b508      	push	{r3, lr}
    psa_status_t status;

    /* Destroy the transient key */
    status = psa_destroy_key(sst_key_handle);
 c031596:	4b04      	ldr	r3, [pc, #16]	; (c0315a8 <sst_crypto_destroykey+0x14>)
 c031598:	8818      	ldrh	r0, [r3, #0]
 c03159a:	f7e8 ffe9 	bl	c01a570 <psa_destroy_key>
    if (status != PSA_SUCCESS) {
 c03159e:	2800      	cmp	r0, #0
        return PSA_PS_ERROR_OPERATION_FAILED;
    }

    return PSA_PS_SUCCESS;
}
 c0315a0:	bf14      	ite	ne
 c0315a2:	200b      	movne	r0, #11
 c0315a4:	2000      	moveq	r0, #0
 c0315a6:	bd08      	pop	{r3, pc}
 c0315a8:	3003c0d8 	.word	0x3003c0d8

0c0315ac <sst_crypto_set_iv>:

void sst_crypto_set_iv(const union sst_crypto_t *crypto)
{
 c0315ac:	f850 3f10 	ldr.w	r3, [r0, #16]!
 c0315b0:	4a03      	ldr	r2, [pc, #12]	; (c0315c0 <sst_crypto_set_iv+0x14>)
 c0315b2:	6013      	str	r3, [r2, #0]
 c0315b4:	6843      	ldr	r3, [r0, #4]
 c0315b6:	6053      	str	r3, [r2, #4]
 c0315b8:	6883      	ldr	r3, [r0, #8]
 c0315ba:	6093      	str	r3, [r2, #8]
    (void)tfm_memcpy(sst_crypto_iv_buf, crypto->ref.iv, SST_IV_LEN_BYTES);
}
 c0315bc:	4770      	bx	lr
 c0315be:	bf00      	nop
 c0315c0:	3003c0cc 	.word	0x3003c0cc

0c0315c4 <sst_crypto_get_iv>:

void sst_crypto_get_iv(union sst_crypto_t *crypto)
{
 c0315c4:	e92d 4833 	stmdb	sp!, {r0, r1, r4, r5, fp, lr}
    return (memcpy(dest, src, num));
 c0315c8:	466a      	mov	r2, sp
 c0315ca:	4b10      	ldr	r3, [pc, #64]	; (c03160c <sst_crypto_get_iv+0x48>)
 c0315cc:	4605      	mov	r5, r0
 c0315ce:	6859      	ldr	r1, [r3, #4]
 c0315d0:	6818      	ldr	r0, [r3, #0]
 c0315d2:	689c      	ldr	r4, [r3, #8]
 c0315d4:	c203      	stmia	r2!, {r0, r1}
    uint64_t iv_l;
    uint32_t iv_h;

    (void)tfm_memcpy(&iv_l, sst_crypto_iv_buf, sizeof(iv_l));
    (void)tfm_memcpy(&iv_h, (sst_crypto_iv_buf+sizeof(iv_l)), sizeof(iv_h));
    iv_l++;
 c0315d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 c0315da:	f110 0b01 	adds.w	fp, r0, #1
 c0315de:	f141 0c00 	adc.w	ip, r1, #0
    /* If overflow, increment the MSBs */
    if (iv_l == 0) {
 c0315e2:	ea5b 020c 	orrs.w	r2, fp, ip
 c0315e6:	466a      	mov	r2, sp
    iv_l++;
 c0315e8:	e9cd bc00 	strd	fp, ip, [sp]
 c0315ec:	ca03      	ldmia	r2!, {r0, r1}
 c0315ee:	6018      	str	r0, [r3, #0]
 c0315f0:	681a      	ldr	r2, [r3, #0]
 c0315f2:	6059      	str	r1, [r3, #4]
 c0315f4:	612a      	str	r2, [r5, #16]
        iv_h++;
 c0315f6:	bf08      	it	eq
 c0315f8:	3401      	addeq	r4, #1
 c0315fa:	685a      	ldr	r2, [r3, #4]
 c0315fc:	609c      	str	r4, [r3, #8]
 c0315fe:	616a      	str	r2, [r5, #20]
 c031600:	689a      	ldr	r2, [r3, #8]
 c031602:	61aa      	str	r2, [r5, #24]
    /* Update the local buffer */
    (void)tfm_memcpy(sst_crypto_iv_buf, &iv_l, sizeof(iv_l));
    (void)tfm_memcpy((sst_crypto_iv_buf + sizeof(iv_l)), &iv_h, sizeof(iv_h));
    /* Update the caller buffer */
    (void)tfm_memcpy(crypto->ref.iv, sst_crypto_iv_buf, SST_IV_LEN_BYTES);
}
 c031604:	b002      	add	sp, #8
 c031606:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
 c03160a:	bf00      	nop
 c03160c:	3003c0cc 	.word	0x3003c0cc

0c031610 <sst_crypto_encrypt_and_tag>:
                                           const uint8_t *in,
                                           size_t in_len,
                                           uint8_t *out,
                                           size_t out_size,
                                           size_t *out_len)
{
 c031610:	b5f0      	push	{r4, r5, r6, r7, lr}
 c031612:	4605      	mov	r5, r0
 c031614:	b089      	sub	sp, #36	; 0x24
    psa_status_t status;

    status = psa_aead_encrypt(sst_key_handle, SST_CRYPTO_ALG,
 c031616:	9f10      	ldr	r7, [sp, #64]	; 0x40
{
 c031618:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    status = psa_aead_encrypt(sst_key_handle, SST_CRYPTO_ALG,
 c03161a:	4811      	ldr	r0, [pc, #68]	; (c031660 <sst_crypto_encrypt_and_tag+0x50>)
{
 c03161c:	9e11      	ldr	r6, [sp, #68]	; 0x44
    status = psa_aead_encrypt(sst_key_handle, SST_CRYPTO_ALG,
 c03161e:	8800      	ldrh	r0, [r0, #0]
 c031620:	e9cd 4704 	strd	r4, r7, [sp, #16]
 c031624:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 c031626:	e9cd 1200 	strd	r1, r2, [sp]
 c03162a:	e9cd 3702 	strd	r3, r7, [sp, #8]
 c03162e:	9606      	str	r6, [sp, #24]
 c031630:	230c      	movs	r3, #12
 c031632:	f105 0210 	add.w	r2, r5, #16
 c031636:	490b      	ldr	r1, [pc, #44]	; (c031664 <sst_crypto_encrypt_and_tag+0x54>)
 c031638:	f7e9 fca4 	bl	c01af84 <psa_aead_encrypt>
                              crypto->ref.iv, SST_IV_LEN_BYTES,
                              add, add_len,
                              in, in_len,
                              out, out_size, out_len);
    if (status != PSA_SUCCESS) {
 c03163c:	b970      	cbnz	r0, c03165c <sst_crypto_encrypt_and_tag+0x4c>
        return PSA_PS_ERROR_OPERATION_FAILED;
    }

    /* Copy the tag out of the output buffer */
    *out_len -= SST_TAG_LEN_BYTES;
 c03163e:	6833      	ldr	r3, [r6, #0]
 c031640:	3b10      	subs	r3, #16
 c031642:	6033      	str	r3, [r6, #0]
    (void)tfm_memcpy(crypto->ref.tag, (out + *out_len), SST_TAG_LEN_BYTES);
 c031644:	4423      	add	r3, r4
 c031646:	f103 0210 	add.w	r2, r3, #16
 c03164a:	f853 1b04 	ldr.w	r1, [r3], #4
 c03164e:	4293      	cmp	r3, r2
 c031650:	f845 1b04 	str.w	r1, [r5], #4
 c031654:	d1f9      	bne.n	c03164a <sst_crypto_encrypt_and_tag+0x3a>

    return PSA_PS_SUCCESS;
 c031656:	2000      	movs	r0, #0
}
 c031658:	b009      	add	sp, #36	; 0x24
 c03165a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return PSA_PS_ERROR_OPERATION_FAILED;
 c03165c:	200b      	movs	r0, #11
 c03165e:	e7fb      	b.n	c031658 <sst_crypto_encrypt_and_tag+0x48>
 c031660:	3003c0d8 	.word	0x3003c0d8
 c031664:	06001002 	.word	0x06001002

0c031668 <sst_crypto_auth_and_decrypt>:
                                            uint8_t *in,
                                            size_t in_len,
                                            uint8_t *out,
                                            size_t out_size,
                                            size_t *out_len)
{
 c031668:	b5f0      	push	{r4, r5, r6, r7, lr}
 c03166a:	4615      	mov	r5, r2
 c03166c:	4602      	mov	r2, r0
 c03166e:	b089      	sub	sp, #36	; 0x24
 c031670:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 c031672:	f102 0610 	add.w	r6, r2, #16
 c031676:	1918      	adds	r0, r3, r4
 c031678:	f852 7b04 	ldr.w	r7, [r2], #4
 c03167c:	42b2      	cmp	r2, r6
 c03167e:	f840 7b04 	str.w	r7, [r0], #4
 c031682:	d1f9      	bne.n	c031678 <sst_crypto_auth_and_decrypt+0x10>

    /* Copy the tag into the input buffer */
    (void)tfm_memcpy((in + in_len), crypto->ref.tag, SST_TAG_LEN_BYTES);
    in_len += SST_TAG_LEN_BYTES;

    status = psa_aead_decrypt(sst_key_handle, SST_CRYPTO_ALG,
 c031684:	9e11      	ldr	r6, [sp, #68]	; 0x44
 c031686:	480b      	ldr	r0, [pc, #44]	; (c0316b4 <sst_crypto_auth_and_decrypt+0x4c>)
    in_len += SST_TAG_LEN_BYTES;
 c031688:	3410      	adds	r4, #16
    status = psa_aead_decrypt(sst_key_handle, SST_CRYPTO_ALG,
 c03168a:	8800      	ldrh	r0, [r0, #0]
 c03168c:	9606      	str	r6, [sp, #24]
 c03168e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 c031690:	e9cd 3402 	strd	r3, r4, [sp, #8]
 c031694:	9605      	str	r6, [sp, #20]
 c031696:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 c031698:	e9cd 1500 	strd	r1, r5, [sp]
 c03169c:	9604      	str	r6, [sp, #16]
 c03169e:	230c      	movs	r3, #12
 c0316a0:	4905      	ldr	r1, [pc, #20]	; (c0316b8 <sst_crypto_auth_and_decrypt+0x50>)
 c0316a2:	f7e9 fcc5 	bl	c01b030 <psa_aead_decrypt>
                              out, out_size, out_len);
    if (status != PSA_SUCCESS) {
        return PSA_PS_ERROR_AUTH_FAILED;
    }

    return PSA_PS_SUCCESS;
 c0316a6:	2800      	cmp	r0, #0
}
 c0316a8:	bf14      	ite	ne
 c0316aa:	200a      	movne	r0, #10
 c0316ac:	2000      	moveq	r0, #0
 c0316ae:	b009      	add	sp, #36	; 0x24
 c0316b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c0316b2:	bf00      	nop
 c0316b4:	3003c0d8 	.word	0x3003c0d8
 c0316b8:	06001002 	.word	0x06001002

0c0316bc <sst_crypto_generate_auth_tag>:

psa_ps_status_t sst_crypto_generate_auth_tag(union sst_crypto_t *crypto,
                                             const uint8_t *add,
                                             uint32_t add_len)
{
 c0316bc:	b510      	push	{r4, lr}
    psa_status_t status;
    size_t out_len;

    status = psa_aead_encrypt(sst_key_handle, SST_CRYPTO_ALG,
 c0316be:	4b0f      	ldr	r3, [pc, #60]	; (c0316fc <sst_crypto_generate_auth_tag+0x40>)
{
 c0316c0:	b08a      	sub	sp, #40	; 0x28
    status = psa_aead_encrypt(sst_key_handle, SST_CRYPTO_ALG,
 c0316c2:	881c      	ldrh	r4, [r3, #0]
 c0316c4:	ab09      	add	r3, sp, #36	; 0x24
 c0316c6:	9306      	str	r3, [sp, #24]
 c0316c8:	2310      	movs	r3, #16
 c0316ca:	e9cd 0304 	strd	r0, r3, [sp, #16]
 c0316ce:	2300      	movs	r3, #0
 c0316d0:	e9cd 1200 	strd	r1, r2, [sp]
 c0316d4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 c0316d8:	f100 0210 	add.w	r2, r0, #16
 c0316dc:	230c      	movs	r3, #12
 c0316de:	4908      	ldr	r1, [pc, #32]	; (c031700 <sst_crypto_generate_auth_tag+0x44>)
 c0316e0:	4620      	mov	r0, r4
 c0316e2:	f7e9 fc4f 	bl	c01af84 <psa_aead_encrypt>
                              crypto->ref.iv, SST_IV_LEN_BYTES,
                              add, add_len,
                              0, 0,
                              crypto->ref.tag, SST_TAG_LEN_BYTES, &out_len);
    if (status != PSA_SUCCESS || out_len != SST_TAG_LEN_BYTES) {
 c0316e6:	b930      	cbnz	r0, c0316f6 <sst_crypto_generate_auth_tag+0x3a>
 c0316e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c0316ea:	2b10      	cmp	r3, #16
        return PSA_PS_ERROR_OPERATION_FAILED;
    }

    return PSA_PS_SUCCESS;
 c0316ec:	bf14      	ite	ne
 c0316ee:	200b      	movne	r0, #11
 c0316f0:	2000      	moveq	r0, #0
}
 c0316f2:	b00a      	add	sp, #40	; 0x28
 c0316f4:	bd10      	pop	{r4, pc}
        return PSA_PS_ERROR_OPERATION_FAILED;
 c0316f6:	200b      	movs	r0, #11
 c0316f8:	e7fb      	b.n	c0316f2 <sst_crypto_generate_auth_tag+0x36>
 c0316fa:	bf00      	nop
 c0316fc:	3003c0d8 	.word	0x3003c0d8
 c031700:	06001002 	.word	0x06001002

0c031704 <sst_crypto_authenticate>:

psa_ps_status_t sst_crypto_authenticate(const union sst_crypto_t *crypto,
                                        const uint8_t *add,
                                        uint32_t add_len)
{
 c031704:	b510      	push	{r4, lr}
    psa_status_t status;
    size_t out_len;

    status = psa_aead_decrypt(sst_key_handle, SST_CRYPTO_ALG,
 c031706:	4b0f      	ldr	r3, [pc, #60]	; (c031744 <sst_crypto_authenticate+0x40>)
{
 c031708:	b08a      	sub	sp, #40	; 0x28
    status = psa_aead_decrypt(sst_key_handle, SST_CRYPTO_ALG,
 c03170a:	881c      	ldrh	r4, [r3, #0]
 c03170c:	ab09      	add	r3, sp, #36	; 0x24
 c03170e:	9306      	str	r3, [sp, #24]
 c031710:	2300      	movs	r3, #0
 c031712:	e9cd 3304 	strd	r3, r3, [sp, #16]
 c031716:	2310      	movs	r3, #16
 c031718:	e9cd 1200 	strd	r1, r2, [sp]
 c03171c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 c031720:	f100 0210 	add.w	r2, r0, #16
 c031724:	230c      	movs	r3, #12
 c031726:	4908      	ldr	r1, [pc, #32]	; (c031748 <sst_crypto_authenticate+0x44>)
 c031728:	4620      	mov	r0, r4
 c03172a:	f7e9 fc81 	bl	c01b030 <psa_aead_decrypt>
                              crypto->ref.iv, SST_IV_LEN_BYTES,
                              add, add_len,
                              crypto->ref.tag, SST_TAG_LEN_BYTES,
                              0, 0, &out_len);
    if (status != PSA_SUCCESS || out_len != 0) {
 c03172e:	b930      	cbnz	r0, c03173e <sst_crypto_authenticate+0x3a>
 c031730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c031732:	2b00      	cmp	r3, #0
        return PSA_PS_ERROR_AUTH_FAILED;
    }

    return PSA_PS_SUCCESS;
 c031734:	bf14      	ite	ne
 c031736:	200a      	movne	r0, #10
 c031738:	2000      	moveq	r0, #0
}
 c03173a:	b00a      	add	sp, #40	; 0x28
 c03173c:	bd10      	pop	{r4, pc}
        return PSA_PS_ERROR_AUTH_FAILED;
 c03173e:	200a      	movs	r0, #10
 c031740:	e7fb      	b.n	c03173a <sst_crypto_authenticate+0x36>
 c031742:	bf00      	nop
 c031744:	3003c0d8 	.word	0x3003c0d8
 c031748:	06001002 	.word	0x06001002

0c03174c <sst_object_set_encryption_key>:
 *        cryptographic operations.
 *
 * \return Returns error code as specified in \ref psa_ps_status_t
 */
static psa_ps_status_t sst_object_set_encryption_key(void)
{
 c03174c:	b508      	push	{r3, lr}
     */
    __attribute__ ((aligned(4)))
    static uint8_t sst_encryption_key[SST_KEY_LEN_BYTES];

    /* Get the encryption key */
    err = sst_crypto_getkey(SST_KEY_LEN_BYTES, sst_encryption_key);
 c03174e:	4906      	ldr	r1, [pc, #24]	; (c031768 <sst_object_set_encryption_key+0x1c>)
 c031750:	2010      	movs	r0, #16
 c031752:	f7ff fee9 	bl	c031528 <sst_crypto_getkey>
    if (err != PSA_PS_SUCCESS) {
 c031756:	b928      	cbnz	r0, c031764 <sst_object_set_encryption_key+0x18>

    /* Set the key to be used for crypto operations */
    err = sst_crypto_setkey(SST_KEY_LEN_BYTES, sst_encryption_key);

    return err;
}
 c031758:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = sst_crypto_setkey(SST_KEY_LEN_BYTES, sst_encryption_key);
 c03175c:	4902      	ldr	r1, [pc, #8]	; (c031768 <sst_object_set_encryption_key+0x1c>)
 c03175e:	2010      	movs	r0, #16
 c031760:	f7ff beee 	b.w	c031540 <sst_crypto_setkey>
}
 c031764:	bd08      	pop	{r3, pc}
 c031766:	bf00      	nop
 c031768:	3003c2fc 	.word	0x3003c2fc

0c03176c <sst_encrypted_object_read>:
    return sst_crypto_destroykey();
}

psa_ps_status_t sst_encrypted_object_read(uint32_t fid,
                                          struct sst_object_t *obj)
{
 c03176c:	b5f0      	push	{r4, r5, r6, r7, lr}
 c03176e:	b089      	sub	sp, #36	; 0x24
 c031770:	460e      	mov	r6, r1
    psa_ps_status_t err;
    struct sst_file_info_t file_info;
    uint32_t decrypt_size;

    /* Get the current size of the encrypted object */
    err = sst_flash_fs_file_get_info(fid, &file_info);
 c031772:	a906      	add	r1, sp, #24
{
 c031774:	4607      	mov	r7, r0
    err = sst_flash_fs_file_get_info(fid, &file_info);
 c031776:	f000 f95e 	bl	c031a36 <sst_flash_fs_file_get_info>
    if (err != PSA_PS_SUCCESS) {
 c03177a:	4604      	mov	r4, r0
 c03177c:	bb50      	cbnz	r0, c0317d4 <sst_encrypted_object_read+0x68>
        return err;
    }

    /* Read the encrypted object from the the persistent area */
    err = sst_flash_fs_file_read(fid, file_info.size_current,
 c03177e:	4602      	mov	r2, r0
 c031780:	f106 0310 	add.w	r3, r6, #16
 c031784:	9906      	ldr	r1, [sp, #24]
 c031786:	4638      	mov	r0, r7
 c031788:	f000 fa24 	bl	c031bd4 <sst_flash_fs_file_read>
                                 SST_OBJECT_START_POSITION,
                                 obj->header.crypto.ref.iv);
    if (err != PSA_PS_SUCCESS) {
 c03178c:	4604      	mov	r4, r0
 c03178e:	bb08      	cbnz	r0, c0317d4 <sst_encrypted_object_read+0x68>
        return err;
    }

    /* Get the decrypt size */
    decrypt_size = file_info.size_current -
 c031790:	9d06      	ldr	r5, [sp, #24]
 c031792:	9704      	str	r7, [sp, #16]
    err = sst_object_set_encryption_key();
 c031794:	f7ff ffda 	bl	c03174c <sst_object_set_encryption_key>
    if (err != PSA_PS_SUCCESS) {
 c031798:	4604      	mov	r4, r0
 c03179a:	b9d8      	cbnz	r0, c0317d4 <sst_encrypted_object_read+0x68>
    uint8_t *p_obj_data = (uint8_t *)&obj->header.info;
 c03179c:	f106 041c 	add.w	r4, r6, #28
    decrypt_size = file_info.size_current -
 c0317a0:	3d10      	subs	r5, #16
 c0317a2:	4621      	mov	r1, r4
 c0317a4:	462a      	mov	r2, r5
 c0317a6:	480f      	ldr	r0, [pc, #60]	; (c0317e4 <sst_encrypted_object_read+0x78>)
 c0317a8:	f7e6 f8e9 	bl	c01797e <memcpy>
    err = sst_crypto_auth_and_decrypt(&obj->header.crypto,
 c0317ac:	ab05      	add	r3, sp, #20
 c0317ae:	9303      	str	r3, [sp, #12]
 c0317b0:	f44f 7303 	mov.w	r3, #524	; 0x20c
 c0317b4:	9500      	str	r5, [sp, #0]
 c0317b6:	e9cd 4301 	strd	r4, r3, [sp, #4]
 c0317ba:	2204      	movs	r2, #4
 c0317bc:	4b09      	ldr	r3, [pc, #36]	; (c0317e4 <sst_encrypted_object_read+0x78>)
 c0317be:	a904      	add	r1, sp, #16
 c0317c0:	4630      	mov	r0, r6
 c0317c2:	f7ff ff51 	bl	c031668 <sst_crypto_auth_and_decrypt>
    if (err != PSA_PS_SUCCESS || out_len != cur_size) {
 c0317c6:	4604      	mov	r4, r0
 c0317c8:	b910      	cbnz	r0, c0317d0 <sst_encrypted_object_read+0x64>
 c0317ca:	9b05      	ldr	r3, [sp, #20]
 c0317cc:	429d      	cmp	r5, r3
 c0317ce:	d004      	beq.n	c0317da <sst_encrypted_object_read+0x6e>
        (void)sst_crypto_destroykey();
 c0317d0:	f7ff fee0 	bl	c031594 <sst_crypto_destroykey>
    if (err != PSA_PS_SUCCESS) {
        return err;
    }

    return PSA_PS_SUCCESS;
}
 c0317d4:	4620      	mov	r0, r4
 c0317d6:	b009      	add	sp, #36	; 0x24
 c0317d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return sst_crypto_destroykey();
 c0317da:	f7ff fedb 	bl	c031594 <sst_crypto_destroykey>
 c0317de:	4604      	mov	r4, r0
 c0317e0:	e7f8      	b.n	c0317d4 <sst_encrypted_object_read+0x68>
 c0317e2:	bf00      	nop
 c0317e4:	3003c0da 	.word	0x3003c0da

0c0317e8 <sst_encrypted_object_write>:
     */
    wrt_size +=SST_FLASH_PROGRAM_UNIT;
#endif

    /* Create an object in the object system */
    err = sst_flash_fs_file_create(fid, wrt_size, SST_EMPTY_OBJECT_SIZE, NULL);
 c0317e8:	2300      	movs	r3, #0
{
 c0317ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c0317ee:	460e      	mov	r6, r1
    wrt_size = GET_ALIGNED_FLASH_BYTES(wrt_size);
 c0317f0:	6a09      	ldr	r1, [r1, #32]
{
 c0317f2:	b087      	sub	sp, #28
    wrt_size = GET_ALIGNED_FLASH_BYTES(wrt_size);
 c0317f4:	311f      	adds	r1, #31
 c0317f6:	f021 0107 	bic.w	r1, r1, #7
    err = sst_flash_fs_file_create(fid, wrt_size, SST_EMPTY_OBJECT_SIZE, NULL);
 c0317fa:	461a      	mov	r2, r3
 c0317fc:	3108      	adds	r1, #8
{
 c0317fe:	4607      	mov	r7, r0
    err = sst_flash_fs_file_create(fid, wrt_size, SST_EMPTY_OBJECT_SIZE, NULL);
 c031800:	f000 f8bb 	bl	c03197a <sst_flash_fs_file_create>
    if (err != PSA_PS_SUCCESS) {
 c031804:	4604      	mov	r4, r0
 c031806:	bb68      	cbnz	r0, c031864 <sst_encrypted_object_write+0x7c>
        return err;
    }

    wrt_size = GET_ALIGNED_FLASH_BYTES(
 c031808:	69f5      	ldr	r5, [r6, #28]
 c03180a:	9704      	str	r7, [sp, #16]
    err = sst_object_set_encryption_key();
 c03180c:	f7ff ff9e 	bl	c03174c <sst_object_set_encryption_key>
    if (err != PSA_PS_SUCCESS) {
 c031810:	4604      	mov	r4, r0
 c031812:	bb38      	cbnz	r0, c031864 <sst_encrypted_object_write+0x7c>
    sst_crypto_get_iv(&obj->header.crypto);
 c031814:	4630      	mov	r0, r6
 c031816:	f7ff fed5 	bl	c0315c4 <sst_crypto_get_iv>
    err = sst_crypto_encrypt_and_tag(&obj->header.crypto,
 c03181a:	ab05      	add	r3, sp, #20
 c03181c:	9303      	str	r3, [sp, #12]
 c03181e:	f44f 7308 	mov.w	r3, #544	; 0x220
    wrt_size = GET_ALIGNED_FLASH_BYTES(
 c031822:	3513      	adds	r5, #19
    err = sst_crypto_encrypt_and_tag(&obj->header.crypto,
 c031824:	f8df 9058 	ldr.w	r9, [pc, #88]	; c031880 <sst_encrypted_object_write+0x98>
    wrt_size = GET_ALIGNED_FLASH_BYTES(
 c031828:	f025 0507 	bic.w	r5, r5, #7
    uint8_t *p_obj_data = (uint8_t *)&obj->header.info;
 c03182c:	f106 081c 	add.w	r8, r6, #28
    err = sst_crypto_encrypt_and_tag(&obj->header.crypto,
 c031830:	9302      	str	r3, [sp, #8]
 c031832:	e9cd 5900 	strd	r5, r9, [sp]
 c031836:	4643      	mov	r3, r8
 c031838:	2204      	movs	r2, #4
 c03183a:	a904      	add	r1, sp, #16
 c03183c:	4630      	mov	r0, r6
 c03183e:	f7ff fee7 	bl	c031610 <sst_crypto_encrypt_and_tag>
    if (err != PSA_PS_SUCCESS || out_len != cur_size) {
 c031842:	4604      	mov	r4, r0
 c031844:	b910      	cbnz	r0, c03184c <sst_encrypted_object_write+0x64>
 c031846:	9b05      	ldr	r3, [sp, #20]
 c031848:	429d      	cmp	r5, r3
 c03184a:	d00f      	beq.n	c03186c <sst_encrypted_object_write+0x84>
        (void)sst_crypto_destroykey();
 c03184c:	f7ff fea2 	bl	c031594 <sst_crypto_destroykey>
                               SST_ENCRYPT_SIZE(obj->header.info.current_size));

    /* Authenticate and encrypt the object */
    err = sst_object_auth_encrypt(fid, wrt_size, obj);
    if (err != PSA_PS_SUCCESS) {
 c031850:	b944      	cbnz	r4, c031864 <sst_encrypted_object_write+0x7c>
    wrt_size = GET_ALIGNED_FLASH_BYTES(wrt_size);

    /* Write the encrypted object to the persistent area. The tag values is not
     * copied as it is stored in the object table.
     */
    err = sst_flash_fs_file_write(fid, wrt_size, SST_OBJECT_START_POSITION,
 c031852:	4622      	mov	r2, r4
 c031854:	f106 0310 	add.w	r3, r6, #16
 c031858:	f105 0110 	add.w	r1, r5, #16
 c03185c:	4638      	mov	r0, r7
 c03185e:	f000 f903 	bl	c031a68 <sst_flash_fs_file_write>
 c031862:	4604      	mov	r4, r0
                                  obj->header.crypto.ref.iv);

    return err;
}
 c031864:	4620      	mov	r0, r4
 c031866:	b007      	add	sp, #28
 c031868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c03186c:	462a      	mov	r2, r5
 c03186e:	4649      	mov	r1, r9
 c031870:	4640      	mov	r0, r8
 c031872:	f7e6 f884 	bl	c01797e <memcpy>
    return sst_crypto_destroykey();
 c031876:	f7ff fe8d 	bl	c031594 <sst_crypto_destroykey>
 c03187a:	4604      	mov	r4, r0
 c03187c:	e7e8      	b.n	c031850 <sst_encrypted_object_write+0x68>
 c03187e:	bf00      	nop
 c031880:	3003c0da 	.word	0x3003c0da

0c031884 <sst_flash_init>:
    return PSA_PS_SUCCESS;
}
#endif /* SST_RAM_FS */

psa_ps_status_t sst_flash_init(void)
{
 c031884:	b508      	push	{r3, lr}
    err = SST_FLASH_DEV_NAME.Initialize(NULL);
 c031886:	4b04      	ldr	r3, [pc, #16]	; (c031898 <sst_flash_init+0x14>)
 c031888:	2000      	movs	r0, #0
 c03188a:	689b      	ldr	r3, [r3, #8]
 c03188c:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c03188e:	2800      	cmp	r0, #0
    return flash_init();
}
 c031890:	bf14      	ite	ne
 c031892:	2004      	movne	r0, #4
 c031894:	2000      	moveq	r0, #0
 c031896:	bd08      	pop	{r3, pc}
 c031898:	0c034f9c 	.word	0x0c034f9c

0c03189c <sst_flash_read>:

psa_ps_status_t sst_flash_read(uint32_t block_id, uint8_t *buff,
                               uint32_t offset, uint32_t size)
{
 c03189c:	b510      	push	{r4, lr}
    err = SST_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c03189e:	4c06      	ldr	r4, [pc, #24]	; (c0318b8 <sst_flash_read+0x1c>)
    return (SST_FLASH_AREA_ADDR + (block_id * SST_BLOCK_SIZE) + offset);
 c0318a0:	3013      	adds	r0, #19
 c0318a2:	eb02 3000 	add.w	r0, r2, r0, lsl #12
    err = SST_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c0318a6:	461a      	mov	r2, r3
 c0318a8:	6963      	ldr	r3, [r4, #20]
 c0318aa:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c0318ac:	2800      	cmp	r0, #0
     * parameters.
     */
    flash_addr = get_phys_address(block_id, offset);

    return flash_read(flash_addr, size, buff);
}
 c0318ae:	bf14      	ite	ne
 c0318b0:	2004      	movne	r0, #4
 c0318b2:	2000      	moveq	r0, #0
 c0318b4:	bd10      	pop	{r4, pc}
 c0318b6:	bf00      	nop
 c0318b8:	0c034f9c 	.word	0x0c034f9c

0c0318bc <sst_flash_write>:

psa_ps_status_t sst_flash_write(uint32_t block_id, const uint8_t *buff,
                                uint32_t offset, uint32_t size)
{
 c0318bc:	b510      	push	{r4, lr}
    err = SST_FLASH_DEV_NAME.ProgramData(flash_addr, buff, size);
 c0318be:	4c06      	ldr	r4, [pc, #24]	; (c0318d8 <sst_flash_write+0x1c>)
    return (SST_FLASH_AREA_ADDR + (block_id * SST_BLOCK_SIZE) + offset);
 c0318c0:	3013      	adds	r0, #19
 c0318c2:	eb02 3000 	add.w	r0, r2, r0, lsl #12
    err = SST_FLASH_DEV_NAME.ProgramData(flash_addr, buff, size);
 c0318c6:	461a      	mov	r2, r3
 c0318c8:	69a3      	ldr	r3, [r4, #24]
 c0318ca:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c0318cc:	2800      	cmp	r0, #0
     * parameters.
     */
    flash_addr = get_phys_address(block_id, offset);

    return flash_write(flash_addr, size, buff);
}
 c0318ce:	bf14      	ite	ne
 c0318d0:	2004      	movne	r0, #4
 c0318d2:	2000      	moveq	r0, #0
 c0318d4:	bd10      	pop	{r4, pc}
 c0318d6:	bf00      	nop
 c0318d8:	0c034f9c 	.word	0x0c034f9c

0c0318dc <sst_flash_block_to_block_move>:
psa_ps_status_t sst_flash_block_to_block_move(uint32_t dst_block,
                                              uint32_t dst_offset,
                                              uint32_t src_block,
                                              uint32_t src_offset,
                                              uint32_t size)
{
 c0318dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    psa_ps_status_t err;
    uint8_t dst_block_data_copy[MAX_BLOCK_DATA_COPY];
    uint32_t dst_flash_addr;
    uint32_t src_flash_addr;
    uint32_t nbr_bytes_moved = 0;
 c0318e0:	f04f 0800 	mov.w	r8, #0
{
 c0318e4:	b0c1      	sub	sp, #260	; 0x104
    return (SST_FLASH_AREA_ADDR + (block_id * SST_BLOCK_SIZE) + offset);
 c0318e6:	3213      	adds	r2, #19
 c0318e8:	3013      	adds	r0, #19
{
 c0318ea:	9f48      	ldr	r7, [sp, #288]	; 0x120
    err = SST_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c0318ec:	f8df 904c 	ldr.w	r9, [pc, #76]	; c03193c <sst_flash_block_to_block_move+0x60>
    return (SST_FLASH_AREA_ADDR + (block_id * SST_BLOCK_SIZE) + offset);
 c0318f0:	eb03 3602 	add.w	r6, r3, r2, lsl #12
 c0318f4:	eb01 3500 	add.w	r5, r1, r0, lsl #12

    /* Gets flash addresses defined by block ID and offset parameters */
    src_flash_addr = get_phys_address(src_block, src_offset);
    dst_flash_addr = get_phys_address(dst_block, dst_offset);

    while (nbr_bytes_moved <  size) {
 c0318f8:	45b8      	cmp	r8, r7
 c0318fa:	d301      	bcc.n	c031900 <sst_flash_block_to_block_move+0x24>
        /* Updates pointers to the source and destination flash regions */
        src_flash_addr += bytes_to_move;
        dst_flash_addr += bytes_to_move;
    };

    return PSA_PS_SUCCESS;
 c0318fc:	2000      	movs	r0, #0
 c0318fe:	e00e      	b.n	c03191e <sst_flash_block_to_block_move+0x42>
        bytes_to_move = (size - nbr_bytes_moved);
 c031900:	eba7 0408 	sub.w	r4, r7, r8
 c031904:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 c031908:	bf28      	it	cs
 c03190a:	f44f 7480 	movcs.w	r4, #256	; 0x100
    err = SST_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c03190e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 c031912:	4622      	mov	r2, r4
 c031914:	4669      	mov	r1, sp
 c031916:	4630      	mov	r0, r6
 c031918:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c03191a:	b118      	cbz	r0, c031924 <sst_flash_block_to_block_move+0x48>
        return PSA_PS_ERROR_STORAGE_FAILURE;
 c03191c:	2004      	movs	r0, #4
}
 c03191e:	b041      	add	sp, #260	; 0x104
 c031920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    err = SST_FLASH_DEV_NAME.ProgramData(flash_addr, buff, size);
 c031924:	f8d9 3018 	ldr.w	r3, [r9, #24]
 c031928:	4622      	mov	r2, r4
 c03192a:	4669      	mov	r1, sp
 c03192c:	4628      	mov	r0, r5
 c03192e:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c031930:	2800      	cmp	r0, #0
 c031932:	d1f3      	bne.n	c03191c <sst_flash_block_to_block_move+0x40>
        nbr_bytes_moved += bytes_to_move;
 c031934:	44a0      	add	r8, r4
        src_flash_addr += bytes_to_move;
 c031936:	4426      	add	r6, r4
        dst_flash_addr += bytes_to_move;
 c031938:	4425      	add	r5, r4
 c03193a:	e7dd      	b.n	c0318f8 <sst_flash_block_to_block_move+0x1c>
 c03193c:	0c034f9c 	.word	0x0c034f9c

0c031940 <sst_flash_erase_block>:

psa_ps_status_t sst_flash_erase_block(uint32_t block_id)
{
 c031940:	b508      	push	{r3, lr}
    err = SST_FLASH_DEV_NAME.EraseSector(flash_addr);
 c031942:	4b05      	ldr	r3, [pc, #20]	; (c031958 <sst_flash_erase_block+0x18>)
    return (SST_FLASH_AREA_ADDR + (block_id * SST_BLOCK_SIZE) + offset);
 c031944:	3013      	adds	r0, #19
    err = SST_FLASH_DEV_NAME.EraseSector(flash_addr);
 c031946:	69db      	ldr	r3, [r3, #28]
 c031948:	0300      	lsls	r0, r0, #12
 c03194a:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c03194c:	2800      	cmp	r0, #0
     * BLOCK_START_OFFSET parameters.
     */
    flash_addr = get_phys_address(block_id, BLOCK_START_OFFSET);

    return flash_erase(flash_addr);
}
 c03194e:	bf14      	ite	ne
 c031950:	2004      	movne	r0, #4
 c031952:	2000      	moveq	r0, #0
 c031954:	bd08      	pop	{r3, pc}
 c031956:	bf00      	nop
 c031958:	0c034f9c 	.word	0x0c034f9c

0c03195c <sst_flash_fs_prepare>:
}

psa_ps_status_t sst_flash_fs_prepare(void)
{
    /* Initialize metadata block with the valid/active metablock */
    return sst_flash_fs_mblock_init();
 c03195c:	f000 ba70 	b.w	c031e40 <sst_flash_fs_mblock_init>

0c031960 <sst_flash_fs_wipe_all>:
}

psa_ps_status_t sst_flash_fs_wipe_all(void)
{
    /* Clean and initialize the metadata block */
    return sst_flash_fs_mblock_reset_metablock();
 c031960:	f000 bb20 	b.w	c031fa4 <sst_flash_fs_mblock_reset_metablock>

0c031964 <sst_flash_fs_file_exist>:
}

psa_ps_status_t sst_flash_fs_file_exist(uint32_t fid)
{
 c031964:	b507      	push	{r0, r1, r2, lr}
    psa_ps_status_t err;
    uint32_t idx;

    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c031966:	a901      	add	r1, sp, #4
 c031968:	f000 faa4 	bl	c031eb4 <sst_flash_fs_mblock_get_file_idx>
    if (err != PSA_PS_SUCCESS) {
        return PSA_PS_ERROR_UID_NOT_FOUND;
    }

    return PSA_PS_SUCCESS;
}
 c03196c:	2800      	cmp	r0, #0
 c03196e:	bf14      	ite	ne
 c031970:	2005      	movne	r0, #5
 c031972:	2000      	moveq	r0, #0
 c031974:	b003      	add	sp, #12
 c031976:	f85d fb04 	ldr.w	pc, [sp], #4

0c03197a <sst_flash_fs_file_create>:

psa_ps_status_t sst_flash_fs_file_create(uint32_t fid,
                                         uint32_t max_size,
                                         uint32_t data_size,
                                         const uint8_t *data)
{
 c03197a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c03197e:	b08e      	sub	sp, #56	; 0x38
 c031980:	460e      	mov	r6, r1
    psa_ps_status_t err;
    uint32_t idx;
    struct sst_file_meta_t file_meta;

    /* Check if file already exists */
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c031982:	a903      	add	r1, sp, #12
{
 c031984:	4680      	mov	r8, r0
 c031986:	4614      	mov	r4, r2
 c031988:	461f      	mov	r7, r3
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c03198a:	f000 fa93 	bl	c031eb4 <sst_flash_fs_mblock_get_file_idx>
    if (err == PSA_PS_SUCCESS) {
 c03198e:	b918      	cbnz	r0, c031998 <sst_flash_fs_file_create+0x1e>
        /* If it exits return an error as needs to be removed first */
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c031990:	2008      	movs	r0, #8

    /* Write metadata header, swap metadata blocks and erase scratch blocks */
    err = sst_flash_fs_mblock_meta_update_finalize();

    return err;
}
 c031992:	b00e      	add	sp, #56	; 0x38
 c031994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (GET_ALIGNED_FLASH_BYTES(max_size) != max_size) {
 c031998:	1df5      	adds	r5, r6, #7
 c03199a:	f025 0507 	bic.w	r5, r5, #7
 c03199e:	42b5      	cmp	r5, r6
 c0319a0:	d1f6      	bne.n	c031990 <sst_flash_fs_file_create+0x16>
    err = sst_flash_fs_mblock_reserve_file(fid, max_size, &idx,
 c0319a2:	ae04      	add	r6, sp, #16
 c0319a4:	9600      	str	r6, [sp, #0]
 c0319a6:	ab08      	add	r3, sp, #32
 c0319a8:	aa03      	add	r2, sp, #12
 c0319aa:	4629      	mov	r1, r5
 c0319ac:	4640      	mov	r0, r8
 c0319ae:	f000 fabd 	bl	c031f2c <sst_flash_fs_mblock_reserve_file>
    if (err != PSA_PS_SUCCESS) {
 c0319b2:	2800      	cmp	r0, #0
 c0319b4:	d1ed      	bne.n	c031992 <sst_flash_fs_file_create+0x18>
    if (data_size != 0) {
 c0319b6:	b314      	cbz	r4, c0319fe <sst_flash_fs_file_create+0x84>
        if ((data_size > max_size) || (data == NULL)) {
 c0319b8:	42a5      	cmp	r5, r4
 c0319ba:	d3e9      	bcc.n	c031990 <sst_flash_fs_file_create+0x16>
 c0319bc:	2f00      	cmp	r7, #0
 c0319be:	d0e7      	beq.n	c031990 <sst_flash_fs_file_create+0x16>
    if (GET_ALIGNED_FLASH_BYTES(size) != size) {
 c0319c0:	1de3      	adds	r3, r4, #7
 c0319c2:	f023 0307 	bic.w	r3, r3, #7
 c0319c6:	429c      	cmp	r4, r3
 c0319c8:	d001      	beq.n	c0319ce <sst_flash_fs_file_create+0x54>
            return PSA_PS_ERROR_OPERATION_FAILED;
 c0319ca:	200b      	movs	r0, #11
 c0319cc:	e7e1      	b.n	c031992 <sst_flash_fs_file_create+0x18>
    err = sst_flash_fs_dblock_write_file(file_meta->lblock, f_offset,
 c0319ce:	463b      	mov	r3, r7
 c0319d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c0319d4:	4622      	mov	r2, r4
 c0319d6:	f000 f97f 	bl	c031cd8 <sst_flash_fs_dblock_write_file>
        if (err != PSA_PS_SUCCESS) {
 c0319da:	2800      	cmp	r0, #0
 c0319dc:	d1f5      	bne.n	c0319ca <sst_flash_fs_file_create+0x50>
        err = sst_flash_fs_dblock_cp_remaining_data(&block_meta, &file_meta);
 c0319de:	a908      	add	r1, sp, #32
 c0319e0:	4630      	mov	r0, r6
        file_meta.cur_size = data_size;
 c0319e2:	940a      	str	r4, [sp, #40]	; 0x28
        err = sst_flash_fs_dblock_cp_remaining_data(&block_meta, &file_meta);
 c0319e4:	f000 f985 	bl	c031cf2 <sst_flash_fs_dblock_cp_remaining_data>
        if (err != PSA_PS_SUCCESS) {
 c0319e8:	2800      	cmp	r0, #0
 c0319ea:	d1ee      	bne.n	c0319ca <sst_flash_fs_file_create+0x50>
        block_meta.phy_id = sst_flash_fs_mblock_cur_data_scratch_id(
 c0319ec:	9808      	ldr	r0, [sp, #32]
        cur_phys_block = block_meta.phy_id;
 c0319ee:	9d04      	ldr	r5, [sp, #16]
        block_meta.phy_id = sst_flash_fs_mblock_cur_data_scratch_id(
 c0319f0:	f000 fa1e 	bl	c031e30 <sst_flash_fs_mblock_cur_data_scratch_id>
        sst_flash_fs_mblock_set_data_scratch(cur_phys_block, file_meta.lblock);
 c0319f4:	9908      	ldr	r1, [sp, #32]
        block_meta.phy_id = sst_flash_fs_mblock_cur_data_scratch_id(
 c0319f6:	9004      	str	r0, [sp, #16]
        sst_flash_fs_mblock_set_data_scratch(cur_phys_block, file_meta.lblock);
 c0319f8:	4628      	mov	r0, r5
 c0319fa:	f000 fb1f 	bl	c03203c <sst_flash_fs_mblock_set_data_scratch>
    err = sst_flash_fs_mblock_update_scratch_block_meta(file_meta.lblock,
 c0319fe:	4631      	mov	r1, r6
 c031a00:	9808      	ldr	r0, [sp, #32]
 c031a02:	f000 fb21 	bl	c032048 <sst_flash_fs_mblock_update_scratch_block_meta>
    if (err != PSA_PS_SUCCESS) {
 c031a06:	2800      	cmp	r0, #0
 c031a08:	d1df      	bne.n	c0319ca <sst_flash_fs_file_create+0x50>
    err = sst_flash_fs_mblock_update_scratch_file_meta(idx, &file_meta);
 c031a0a:	a908      	add	r1, sp, #32
 c031a0c:	9803      	ldr	r0, [sp, #12]
 c031a0e:	f000 fb5b 	bl	c0320c8 <sst_flash_fs_mblock_update_scratch_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c031a12:	2800      	cmp	r0, #0
 c031a14:	d1d9      	bne.n	c0319ca <sst_flash_fs_file_create+0x50>
    err = sst_flash_fs_mblock_cp_remaining_file_meta(idx);
 c031a16:	9803      	ldr	r0, [sp, #12]
 c031a18:	f000 f9ea 	bl	c031df0 <sst_flash_fs_mblock_cp_remaining_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c031a1c:	2800      	cmp	r0, #0
 c031a1e:	d1d4      	bne.n	c0319ca <sst_flash_fs_file_create+0x50>
    if ((file_meta.lblock != SST_LOGICAL_DBLOCK0) || (data_size == 0)) {
 c031a20:	9b08      	ldr	r3, [sp, #32]
 c031a22:	b91b      	cbnz	r3, c031a2c <sst_flash_fs_file_create+0xb2>
 c031a24:	b114      	cbz	r4, c031a2c <sst_flash_fs_file_create+0xb2>
    err = sst_flash_fs_mblock_meta_update_finalize();
 c031a26:	f000 fa2b 	bl	c031e80 <sst_flash_fs_mblock_meta_update_finalize>
    return err;
 c031a2a:	e7b2      	b.n	c031992 <sst_flash_fs_file_create+0x18>
        err = sst_flash_fs_mblock_migrate_lb0_data_to_scratch();
 c031a2c:	f000 fa64 	bl	c031ef8 <sst_flash_fs_mblock_migrate_lb0_data_to_scratch>
        if (err != PSA_PS_SUCCESS) {
 c031a30:	2800      	cmp	r0, #0
 c031a32:	d0f8      	beq.n	c031a26 <sst_flash_fs_file_create+0xac>
 c031a34:	e7c9      	b.n	c0319ca <sst_flash_fs_file_create+0x50>

0c031a36 <sst_flash_fs_file_get_info>:

psa_ps_status_t sst_flash_fs_file_get_info(uint32_t fid,
                                           struct sst_file_info_t *info)
{
 c031a36:	b530      	push	{r4, r5, lr}
 c031a38:	b089      	sub	sp, #36	; 0x24
 c031a3a:	460c      	mov	r4, r1
    psa_ps_status_t err;
    uint32_t idx;
    struct sst_file_meta_t tmp_metadata;

    /* Get the meta data index */
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c031a3c:	a901      	add	r1, sp, #4
{
 c031a3e:	4605      	mov	r5, r0
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c031a40:	f000 fa38 	bl	c031eb4 <sst_flash_fs_mblock_get_file_idx>
    if (err != PSA_PS_SUCCESS) {
 c031a44:	b110      	cbz	r0, c031a4c <sst_flash_fs_file_get_info+0x16>
        return PSA_PS_ERROR_UID_NOT_FOUND;
 c031a46:	2005      	movs	r0, #5

    info->size_max = tmp_metadata.max_size;
    info->size_current = tmp_metadata.cur_size;

    return PSA_PS_SUCCESS;
}
 c031a48:	b009      	add	sp, #36	; 0x24
 c031a4a:	bd30      	pop	{r4, r5, pc}
    err = sst_flash_fs_mblock_read_file_meta(idx, &tmp_metadata);
 c031a4c:	a902      	add	r1, sp, #8
 c031a4e:	9801      	ldr	r0, [sp, #4]
 c031a50:	f000 fa26 	bl	c031ea0 <sst_flash_fs_mblock_read_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c031a54:	2800      	cmp	r0, #0
 c031a56:	d1f7      	bne.n	c031a48 <sst_flash_fs_file_get_info+0x12>
    if (fid != tmp_metadata.id) {
 c031a58:	9b06      	ldr	r3, [sp, #24]
 c031a5a:	42ab      	cmp	r3, r5
 c031a5c:	d1f3      	bne.n	c031a46 <sst_flash_fs_file_get_info+0x10>
    info->size_max = tmp_metadata.max_size;
 c031a5e:	9b05      	ldr	r3, [sp, #20]
 c031a60:	6063      	str	r3, [r4, #4]
    info->size_current = tmp_metadata.cur_size;
 c031a62:	9b04      	ldr	r3, [sp, #16]
 c031a64:	6023      	str	r3, [r4, #0]
    return PSA_PS_SUCCESS;
 c031a66:	e7ef      	b.n	c031a48 <sst_flash_fs_file_get_info+0x12>

0c031a68 <sst_flash_fs_file_write>:

psa_ps_status_t sst_flash_fs_file_write(uint32_t fid, uint32_t size,
                                        uint32_t offset, const uint8_t *data)
{
 c031a68:	b570      	push	{r4, r5, r6, lr}
 c031a6a:	b08c      	sub	sp, #48	; 0x30
 c031a6c:	460c      	mov	r4, r1
    psa_ps_status_t err;
    uint32_t idx;
    struct sst_file_meta_t file_meta;

    /* Get the file index */
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c031a6e:	a901      	add	r1, sp, #4
{
 c031a70:	4615      	mov	r5, r2
 c031a72:	461e      	mov	r6, r3
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c031a74:	f000 fa1e 	bl	c031eb4 <sst_flash_fs_mblock_get_file_idx>
    if (err != PSA_PS_SUCCESS) {
 c031a78:	b110      	cbz	r0, c031a80 <sst_flash_fs_file_write+0x18>
        return PSA_PS_ERROR_UID_NOT_FOUND;
 c031a7a:	2005      	movs	r0, #5
     * erase scratch blocks.
     */
    err = sst_flash_fs_mblock_meta_update_finalize();

    return err;
}
 c031a7c:	b00c      	add	sp, #48	; 0x30
 c031a7e:	bd70      	pop	{r4, r5, r6, pc}
    err = sst_flash_fs_mblock_read_file_meta(idx, &file_meta);
 c031a80:	a906      	add	r1, sp, #24
 c031a82:	9801      	ldr	r0, [sp, #4]
 c031a84:	f000 fa0c 	bl	c031ea0 <sst_flash_fs_mblock_read_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c031a88:	2800      	cmp	r0, #0
 c031a8a:	d1f6      	bne.n	c031a7a <sst_flash_fs_file_write+0x12>
    err = sst_flash_fs_mblock_read_block_metadata(file_meta.lblock,
 c031a8c:	a902      	add	r1, sp, #8
 c031a8e:	9806      	ldr	r0, [sp, #24]
 c031a90:	f000 fa28 	bl	c031ee4 <sst_flash_fs_mblock_read_block_metadata>
    if (err != PSA_PS_SUCCESS) {
 c031a94:	b108      	cbz	r0, c031a9a <sst_flash_fs_file_write+0x32>
        return PSA_PS_ERROR_OPERATION_FAILED;
 c031a96:	200b      	movs	r0, #11
 c031a98:	e7f0      	b.n	c031a7c <sst_flash_fs_file_write+0x14>
    if (GET_ALIGNED_FLASH_BYTES(offset) != offset) {
 c031a9a:	1deb      	adds	r3, r5, #7
 c031a9c:	f023 0307 	bic.w	r3, r3, #7
 c031aa0:	429d      	cmp	r5, r3
 c031aa2:	d1f8      	bne.n	c031a96 <sst_flash_fs_file_write+0x2e>
    if (GET_ALIGNED_FLASH_BYTES(size) != size) {
 c031aa4:	1de3      	adds	r3, r4, #7
 c031aa6:	f023 0307 	bic.w	r3, r3, #7
 c031aaa:	429c      	cmp	r4, r3
 c031aac:	d1f3      	bne.n	c031a96 <sst_flash_fs_file_write+0x2e>
    err = sst_flash_fs_dblock_write_file(file_meta->lblock, f_offset,
 c031aae:	9907      	ldr	r1, [sp, #28]
 c031ab0:	4633      	mov	r3, r6
 c031ab2:	4622      	mov	r2, r4
 c031ab4:	4429      	add	r1, r5
 c031ab6:	9806      	ldr	r0, [sp, #24]
 c031ab8:	f000 f90e 	bl	c031cd8 <sst_flash_fs_dblock_write_file>
    if (err != PSA_PS_SUCCESS) {
 c031abc:	2800      	cmp	r0, #0
 c031abe:	d1ea      	bne.n	c031a96 <sst_flash_fs_file_write+0x2e>
    if (size > file_meta.cur_size) {
 c031ac0:	9b08      	ldr	r3, [sp, #32]
    err = sst_flash_fs_dblock_cp_remaining_data(&block_meta, &file_meta);
 c031ac2:	a906      	add	r1, sp, #24
    if (size > file_meta.cur_size) {
 c031ac4:	42a3      	cmp	r3, r4
    err = sst_flash_fs_dblock_cp_remaining_data(&block_meta, &file_meta);
 c031ac6:	a802      	add	r0, sp, #8
        file_meta.cur_size = size;
 c031ac8:	bf38      	it	cc
 c031aca:	9408      	strcc	r4, [sp, #32]
    err = sst_flash_fs_dblock_cp_remaining_data(&block_meta, &file_meta);
 c031acc:	f000 f911 	bl	c031cf2 <sst_flash_fs_dblock_cp_remaining_data>
    if (err != PSA_PS_SUCCESS) {
 c031ad0:	2800      	cmp	r0, #0
 c031ad2:	d1e0      	bne.n	c031a96 <sst_flash_fs_file_write+0x2e>
    block_meta.phy_id = sst_flash_fs_mblock_cur_data_scratch_id(
 c031ad4:	9806      	ldr	r0, [sp, #24]
    cur_phys_block = block_meta.phy_id;
 c031ad6:	9c02      	ldr	r4, [sp, #8]
    block_meta.phy_id = sst_flash_fs_mblock_cur_data_scratch_id(
 c031ad8:	f000 f9aa 	bl	c031e30 <sst_flash_fs_mblock_cur_data_scratch_id>
    sst_flash_fs_mblock_set_data_scratch(cur_phys_block, file_meta.lblock);
 c031adc:	9906      	ldr	r1, [sp, #24]
    block_meta.phy_id = sst_flash_fs_mblock_cur_data_scratch_id(
 c031ade:	9002      	str	r0, [sp, #8]
    sst_flash_fs_mblock_set_data_scratch(cur_phys_block, file_meta.lblock);
 c031ae0:	4620      	mov	r0, r4
 c031ae2:	f000 faab 	bl	c03203c <sst_flash_fs_mblock_set_data_scratch>
    err = sst_flash_fs_mblock_update_scratch_block_meta(file_meta.lblock,
 c031ae6:	a902      	add	r1, sp, #8
 c031ae8:	9806      	ldr	r0, [sp, #24]
 c031aea:	f000 faad 	bl	c032048 <sst_flash_fs_mblock_update_scratch_block_meta>
    if (err != PSA_PS_SUCCESS) {
 c031aee:	2800      	cmp	r0, #0
 c031af0:	d1d1      	bne.n	c031a96 <sst_flash_fs_file_write+0x2e>
    err = sst_flash_fs_mblock_update_scratch_file_meta(idx, &file_meta);
 c031af2:	a906      	add	r1, sp, #24
 c031af4:	9801      	ldr	r0, [sp, #4]
 c031af6:	f000 fae7 	bl	c0320c8 <sst_flash_fs_mblock_update_scratch_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c031afa:	2800      	cmp	r0, #0
 c031afc:	d1cb      	bne.n	c031a96 <sst_flash_fs_file_write+0x2e>
    err = sst_flash_fs_mblock_cp_remaining_file_meta(idx);
 c031afe:	9801      	ldr	r0, [sp, #4]
 c031b00:	f000 f976 	bl	c031df0 <sst_flash_fs_mblock_cp_remaining_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c031b04:	2800      	cmp	r0, #0
 c031b06:	d1c6      	bne.n	c031a96 <sst_flash_fs_file_write+0x2e>
    if (file_meta.lblock != SST_LOGICAL_DBLOCK0) {
 c031b08:	9b06      	ldr	r3, [sp, #24]
 c031b0a:	b913      	cbnz	r3, c031b12 <sst_flash_fs_file_write+0xaa>
    err = sst_flash_fs_mblock_meta_update_finalize();
 c031b0c:	f000 f9b8 	bl	c031e80 <sst_flash_fs_mblock_meta_update_finalize>
    return err;
 c031b10:	e7b4      	b.n	c031a7c <sst_flash_fs_file_write+0x14>
        err = sst_flash_fs_mblock_migrate_lb0_data_to_scratch();
 c031b12:	f000 f9f1 	bl	c031ef8 <sst_flash_fs_mblock_migrate_lb0_data_to_scratch>
        if (err != PSA_PS_SUCCESS) {
 c031b16:	2800      	cmp	r0, #0
 c031b18:	d0f8      	beq.n	c031b0c <sst_flash_fs_file_write+0xa4>
 c031b1a:	e7bc      	b.n	c031a96 <sst_flash_fs_file_write+0x2e>

0c031b1c <sst_flash_fs_file_delete>:

psa_ps_status_t sst_flash_fs_file_delete(uint32_t fid)
{
 c031b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c031b20:	b08b      	sub	sp, #44	; 0x2c
    uint32_t nbr_bytes_to_move = 0;
    uint32_t idx;
    struct sst_file_meta_t file_meta;

    /* Get the file index */
    err = sst_flash_fs_mblock_get_file_idx(fid, &del_file_idx);
 c031b22:	a903      	add	r1, sp, #12
 c031b24:	f000 f9c6 	bl	c031eb4 <sst_flash_fs_mblock_get_file_idx>
    if (err != PSA_PS_SUCCESS) {
 c031b28:	b118      	cbz	r0, c031b32 <sst_flash_fs_file_delete+0x16>
        return PSA_PS_ERROR_UID_NOT_FOUND;
 c031b2a:	2005      	movs	r0, #5
     * erase scratch blocks.
     */
    err = sst_flash_fs_mblock_meta_update_finalize();

    return err;
}
 c031b2c:	b00b      	add	sp, #44	; 0x2c
 c031b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    err = sst_flash_fs_mblock_read_file_meta(del_file_idx, &file_meta);
 c031b32:	a904      	add	r1, sp, #16
 c031b34:	9803      	ldr	r0, [sp, #12]
 c031b36:	f000 f9b3 	bl	c031ea0 <sst_flash_fs_mblock_read_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c031b3a:	2800      	cmp	r0, #0
 c031b3c:	d1f6      	bne.n	c031b2c <sst_flash_fs_file_delete+0x10>
    if (sst_utils_validate_fid(file_meta.id) != PSA_PS_SUCCESS) {
 c031b3e:	9808      	ldr	r0, [sp, #32]
 c031b40:	f000 fdd2 	bl	c0326e8 <sst_utils_validate_fid>
 c031b44:	2800      	cmp	r0, #0
 c031b46:	d1f0      	bne.n	c031b2a <sst_flash_fs_file_delete+0xe>
    del_file_data_idx = file_meta.data_idx;
 c031b48:	e9dd 5704 	ldrd	r5, r7, [sp, #16]
    del_file_max_size = file_meta.max_size;
 c031b4c:	9e07      	ldr	r6, [sp, #28]
    file_meta.id = SST_INVALID_FID;
 c031b4e:	9008      	str	r0, [sp, #32]
    file_meta.lblock = 0;
 c031b50:	9004      	str	r0, [sp, #16]
    file_meta.cur_size = 0;
 c031b52:	e9cd 0006 	strd	r0, r0, [sp, #24]
    err = sst_flash_fs_mblock_update_scratch_file_meta(del_file_idx,
 c031b56:	a904      	add	r1, sp, #16
 c031b58:	9803      	ldr	r0, [sp, #12]
 c031b5a:	f000 fab5 	bl	c0320c8 <sst_flash_fs_mblock_update_scratch_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c031b5e:	2800      	cmp	r0, #0
 c031b60:	d1e4      	bne.n	c031b2c <sst_flash_fs_file_delete+0x10>
    for (idx = 0; idx < SST_MAX_NUM_OBJECTS; idx++) {
 c031b62:	4604      	mov	r4, r0
    uint32_t nbr_bytes_to_move = 0;
 c031b64:	4681      	mov	r9, r0
    uint32_t src_offset = SST_BLOCK_SIZE;
 c031b66:	f44f 5880 	mov.w	r8, #4096	; 0x1000
        if (idx == del_file_idx) {
 c031b6a:	9b03      	ldr	r3, [sp, #12]
 c031b6c:	42a3      	cmp	r3, r4
 c031b6e:	d01a      	beq.n	c031ba6 <sst_flash_fs_file_delete+0x8a>
        err = sst_flash_fs_mblock_read_file_meta(idx, &file_meta);
 c031b70:	a904      	add	r1, sp, #16
 c031b72:	4620      	mov	r0, r4
 c031b74:	f000 f994 	bl	c031ea0 <sst_flash_fs_mblock_read_file_meta>
        if (err != PSA_PS_SUCCESS) {
 c031b78:	2800      	cmp	r0, #0
 c031b7a:	d1d7      	bne.n	c031b2c <sst_flash_fs_file_delete+0x10>
        if ((file_meta.lblock == del_file_lblock) &&
 c031b7c:	9b04      	ldr	r3, [sp, #16]
 c031b7e:	42ab      	cmp	r3, r5
 c031b80:	d10b      	bne.n	c031b9a <sst_flash_fs_file_delete+0x7e>
 c031b82:	9b08      	ldr	r3, [sp, #32]
 c031b84:	b14b      	cbz	r3, c031b9a <sst_flash_fs_file_delete+0x7e>
            if (file_meta.data_idx > del_file_data_idx) {
 c031b86:	9b05      	ldr	r3, [sp, #20]
 c031b88:	42bb      	cmp	r3, r7
 c031b8a:	d906      	bls.n	c031b9a <sst_flash_fs_file_delete+0x7e>
 c031b8c:	4598      	cmp	r8, r3
 c031b8e:	bf28      	it	cs
 c031b90:	4698      	movcs	r8, r3
                file_meta.data_idx -= del_file_max_size;
 c031b92:	1b9b      	subs	r3, r3, r6
 c031b94:	9305      	str	r3, [sp, #20]
                nbr_bytes_to_move += file_meta.max_size;
 c031b96:	9b07      	ldr	r3, [sp, #28]
 c031b98:	4499      	add	r9, r3
        err = sst_flash_fs_mblock_update_scratch_file_meta(idx, &file_meta);
 c031b9a:	a904      	add	r1, sp, #16
 c031b9c:	4620      	mov	r0, r4
 c031b9e:	f000 fa93 	bl	c0320c8 <sst_flash_fs_mblock_update_scratch_file_meta>
        if (err != PSA_PS_SUCCESS) {
 c031ba2:	2800      	cmp	r0, #0
 c031ba4:	d1c2      	bne.n	c031b2c <sst_flash_fs_file_delete+0x10>
    for (idx = 0; idx < SST_MAX_NUM_OBJECTS; idx++) {
 c031ba6:	3401      	adds	r4, #1
 c031ba8:	2c0d      	cmp	r4, #13
 c031baa:	d1de      	bne.n	c031b6a <sst_flash_fs_file_delete+0x4e>
    err = sst_flash_fs_dblock_compact_block(del_file_lblock, del_file_max_size,
 c031bac:	f8cd 9000 	str.w	r9, [sp]
 c031bb0:	463b      	mov	r3, r7
 c031bb2:	4642      	mov	r2, r8
 c031bb4:	4631      	mov	r1, r6
 c031bb6:	4628      	mov	r0, r5
 c031bb8:	f000 f833 	bl	c031c22 <sst_flash_fs_dblock_compact_block>
    if (err != PSA_PS_SUCCESS) {
 c031bbc:	2800      	cmp	r0, #0
 c031bbe:	d1b5      	bne.n	c031b2c <sst_flash_fs_file_delete+0x10>
    if (del_file_lblock != SST_LOGICAL_DBLOCK0) {
 c031bc0:	b915      	cbnz	r5, c031bc8 <sst_flash_fs_file_delete+0xac>
    err = sst_flash_fs_mblock_meta_update_finalize();
 c031bc2:	f000 f95d 	bl	c031e80 <sst_flash_fs_mblock_meta_update_finalize>
    return err;
 c031bc6:	e7b1      	b.n	c031b2c <sst_flash_fs_file_delete+0x10>
        err = sst_flash_fs_mblock_migrate_lb0_data_to_scratch();
 c031bc8:	f000 f996 	bl	c031ef8 <sst_flash_fs_mblock_migrate_lb0_data_to_scratch>
        if (err != PSA_PS_SUCCESS) {
 c031bcc:	2800      	cmp	r0, #0
 c031bce:	d0f8      	beq.n	c031bc2 <sst_flash_fs_file_delete+0xa6>
            return PSA_PS_ERROR_OPERATION_FAILED;
 c031bd0:	200b      	movs	r0, #11
 c031bd2:	e7ab      	b.n	c031b2c <sst_flash_fs_file_delete+0x10>

0c031bd4 <sst_flash_fs_file_read>:

psa_ps_status_t sst_flash_fs_file_read(uint32_t fid, uint32_t size,
                                       uint32_t offset, uint8_t *data)
{
 c031bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 c031bd6:	b089      	sub	sp, #36	; 0x24
 c031bd8:	460d      	mov	r5, r1
    psa_ps_status_t err;
    uint32_t idx;
    struct sst_file_meta_t tmp_metadata;

    /* Get the file index */
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c031bda:	a901      	add	r1, sp, #4
{
 c031bdc:	4607      	mov	r7, r0
 c031bde:	4614      	mov	r4, r2
 c031be0:	461e      	mov	r6, r3
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c031be2:	f000 f967 	bl	c031eb4 <sst_flash_fs_mblock_get_file_idx>
    if (err != PSA_PS_SUCCESS) {
 c031be6:	b110      	cbz	r0, c031bee <sst_flash_fs_file_read+0x1a>
        return PSA_PS_ERROR_UID_NOT_FOUND;
 c031be8:	2005      	movs	r0, #5
    if (err != PSA_PS_SUCCESS) {
        return PSA_PS_ERROR_OPERATION_FAILED;
    }

    return PSA_PS_SUCCESS;
}
 c031bea:	b009      	add	sp, #36	; 0x24
 c031bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = sst_flash_fs_mblock_read_file_meta(idx, &tmp_metadata);
 c031bee:	a902      	add	r1, sp, #8
 c031bf0:	9801      	ldr	r0, [sp, #4]
 c031bf2:	f000 f955 	bl	c031ea0 <sst_flash_fs_mblock_read_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c031bf6:	b108      	cbz	r0, c031bfc <sst_flash_fs_file_read+0x28>
        return PSA_PS_ERROR_OPERATION_FAILED;
 c031bf8:	200b      	movs	r0, #11
 c031bfa:	e7f6      	b.n	c031bea <sst_flash_fs_file_read+0x16>
    if (fid != tmp_metadata.id) {
 c031bfc:	9b06      	ldr	r3, [sp, #24]
 c031bfe:	42bb      	cmp	r3, r7
 c031c00:	d1f2      	bne.n	c031be8 <sst_flash_fs_file_read+0x14>
    err = sst_utils_check_contained_in(tmp_metadata.cur_size, offset, size);
 c031c02:	462a      	mov	r2, r5
 c031c04:	4621      	mov	r1, r4
 c031c06:	9804      	ldr	r0, [sp, #16]
 c031c08:	f000 fd64 	bl	c0326d4 <sst_utils_check_contained_in>
    if (err != PSA_PS_SUCCESS) {
 c031c0c:	2800      	cmp	r0, #0
 c031c0e:	d1ec      	bne.n	c031bea <sst_flash_fs_file_read+0x16>
    err = sst_flash_fs_dblock_read_file(&tmp_metadata, offset, size, data);
 c031c10:	4633      	mov	r3, r6
 c031c12:	462a      	mov	r2, r5
 c031c14:	4621      	mov	r1, r4
 c031c16:	a802      	add	r0, sp, #8
 c031c18:	f000 f846 	bl	c031ca8 <sst_flash_fs_dblock_read_file>
    if (err != PSA_PS_SUCCESS) {
 c031c1c:	2800      	cmp	r0, #0
 c031c1e:	d0e4      	beq.n	c031bea <sst_flash_fs_file_read+0x16>
 c031c20:	e7ea      	b.n	c031bf8 <sst_flash_fs_file_read+0x24>

0c031c22 <sst_flash_fs_dblock_compact_block>:
psa_ps_status_t sst_flash_fs_dblock_compact_block(uint32_t lblock,
                                                  uint32_t free_size,
                                                  uint32_t src_offset,
                                                  uint32_t dst_offset,
                                                  uint32_t size)
{
 c031c22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c031c26:	b087      	sub	sp, #28
 c031c28:	460f      	mov	r7, r1
    struct sst_block_meta_t block_meta;
    psa_ps_status_t err;
    uint32_t scratch_id = 0;

    /* Read current block meta */
    err = sst_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c031c2a:	a902      	add	r1, sp, #8
{
 c031c2c:	4606      	mov	r6, r0
 c031c2e:	4691      	mov	r9, r2
 c031c30:	461d      	mov	r5, r3
 c031c32:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    err = sst_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c031c36:	f000 f955 	bl	c031ee4 <sst_flash_fs_mblock_read_block_metadata>
    if (err != PSA_PS_SUCCESS) {
 c031c3a:	4604      	mov	r4, r0
 c031c3c:	bb30      	cbnz	r0, c031c8c <sst_flash_fs_dblock_compact_block+0x6a>
        return err;
    }

    /* Release data from block meta */
    block_meta.free_size += free_size;
 c031c3e:	9904      	ldr	r1, [sp, #16]

    /* Save scratch data block physical IDs */
    scratch_id = sst_flash_fs_mblock_cur_data_scratch_id(lblock);
 c031c40:	4630      	mov	r0, r6
    block_meta.free_size += free_size;
 c031c42:	4439      	add	r1, r7
 c031c44:	9104      	str	r1, [sp, #16]
    scratch_id = sst_flash_fs_mblock_cur_data_scratch_id(lblock);
 c031c46:	f000 f8f3 	bl	c031e30 <sst_flash_fs_mblock_cur_data_scratch_id>
 c031c4a:	4607      	mov	r7, r0

    /* Check if there are bytes to be compacted */
    if (size > 0) {
 c031c4c:	f1b8 0f00 	cmp.w	r8, #0
 c031c50:	d112      	bne.n	c031c78 <sst_flash_fs_dblock_compact_block+0x56>
        if (err != PSA_PS_SUCCESS) {
            return PSA_PS_ERROR_OPERATION_FAILED;
        }
    }

    if (dst_offset > block_meta.data_start) {
 c031c52:	9b03      	ldr	r3, [sp, #12]
 c031c54:	42ab      	cmp	r3, r5
 c031c56:	d31d      	bcc.n	c031c94 <sst_flash_fs_dblock_compact_block+0x72>

    /* Swap the scratch and current data blocks. Must swap even with nothing
     * to compact so that deleted file is left in scratch and erased as part
     * of finalization.
     */
    sst_flash_fs_mblock_set_data_scratch(block_meta.phy_id, lblock);
 c031c58:	4631      	mov	r1, r6
 c031c5a:	9802      	ldr	r0, [sp, #8]
 c031c5c:	f000 f9ee 	bl	c03203c <sst_flash_fs_mblock_set_data_scratch>

    /* Set scratch block ID as the one which contains the new data block */
    block_meta.phy_id = scratch_id;

    /* Update block metadata in scratch metadata block */
    err = sst_flash_fs_mblock_update_scratch_block_meta(lblock, &block_meta);
 c031c60:	a902      	add	r1, sp, #8
 c031c62:	4630      	mov	r0, r6
    block_meta.phy_id = scratch_id;
 c031c64:	9702      	str	r7, [sp, #8]
    err = sst_flash_fs_mblock_update_scratch_block_meta(lblock, &block_meta);
 c031c66:	f000 f9ef 	bl	c032048 <sst_flash_fs_mblock_update_scratch_block_meta>
    if (err != PSA_PS_SUCCESS) {
 c031c6a:	4604      	mov	r4, r0
 c031c6c:	b170      	cbz	r0, c031c8c <sst_flash_fs_dblock_compact_block+0x6a>
        /* Swap back the data block as there was an issue in the process */
        sst_flash_fs_mblock_set_data_scratch(scratch_id, lblock);
 c031c6e:	4631      	mov	r1, r6
 c031c70:	4638      	mov	r0, r7
 c031c72:	f000 f9e3 	bl	c03203c <sst_flash_fs_mblock_set_data_scratch>
        return err;
 c031c76:	e009      	b.n	c031c8c <sst_flash_fs_dblock_compact_block+0x6a>
        err = sst_flash_block_to_block_move(scratch_id, dst_offset,
 c031c78:	f8cd 8000 	str.w	r8, [sp]
 c031c7c:	464b      	mov	r3, r9
 c031c7e:	9a02      	ldr	r2, [sp, #8]
 c031c80:	4629      	mov	r1, r5
 c031c82:	f7ff fe2b 	bl	c0318dc <sst_flash_block_to_block_move>
        if (err != PSA_PS_SUCCESS) {
 c031c86:	2800      	cmp	r0, #0
 c031c88:	d0e3      	beq.n	c031c52 <sst_flash_fs_dblock_compact_block+0x30>
            return PSA_PS_ERROR_OPERATION_FAILED;
 c031c8a:	240b      	movs	r4, #11
    }

    return err;
}
 c031c8c:	4620      	mov	r0, r4
 c031c8e:	b007      	add	sp, #28
 c031c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = sst_flash_block_to_block_move(scratch_id,
 c031c94:	1aed      	subs	r5, r5, r3
 c031c96:	9500      	str	r5, [sp, #0]
 c031c98:	9a02      	ldr	r2, [sp, #8]
 c031c9a:	4619      	mov	r1, r3
 c031c9c:	4638      	mov	r0, r7
 c031c9e:	f7ff fe1d 	bl	c0318dc <sst_flash_block_to_block_move>
        if (err != PSA_PS_SUCCESS) {
 c031ca2:	2800      	cmp	r0, #0
 c031ca4:	d0d8      	beq.n	c031c58 <sst_flash_fs_dblock_compact_block+0x36>
 c031ca6:	e7f0      	b.n	c031c8a <sst_flash_fs_dblock_compact_block+0x68>

0c031ca8 <sst_flash_fs_dblock_read_file>:

psa_ps_status_t sst_flash_fs_dblock_read_file(struct sst_file_meta_t *file_meta,
                                              uint32_t offset,
                                              uint32_t size,
                                              uint8_t *buf)
{
 c031ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 c031caa:	b085      	sub	sp, #20
 c031cac:	4604      	mov	r4, r0
 c031cae:	460e      	mov	r6, r1
    err = sst_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c031cb0:	6800      	ldr	r0, [r0, #0]
 c031cb2:	4669      	mov	r1, sp
{
 c031cb4:	4617      	mov	r7, r2
 c031cb6:	461d      	mov	r5, r3
    err = sst_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c031cb8:	f000 f914 	bl	c031ee4 <sst_flash_fs_mblock_read_block_metadata>
    if (err != PSA_PS_SUCCESS) {
 c031cbc:	b108      	cbz	r0, c031cc2 <sst_flash_fs_dblock_read_file+0x1a>
    uint32_t phys_block;
    uint32_t pos;

    phys_block = sst_dblock_lo_to_phy(file_meta->lblock);
    if (phys_block == SST_BLOCK_INVALID_ID) {
        return PSA_PS_ERROR_OPERATION_FAILED;
 c031cbe:	200b      	movs	r0, #11
 c031cc0:	e008      	b.n	c031cd4 <sst_flash_fs_dblock_read_file+0x2c>
    return block_meta.phy_id;
 c031cc2:	9800      	ldr	r0, [sp, #0]
    if (phys_block == SST_BLOCK_INVALID_ID) {
 c031cc4:	1c43      	adds	r3, r0, #1
 c031cc6:	d0fa      	beq.n	c031cbe <sst_flash_fs_dblock_read_file+0x16>
    }

    pos = (file_meta->data_idx + offset);
 c031cc8:	6862      	ldr	r2, [r4, #4]

    return sst_flash_read(phys_block, buf, pos, size);
 c031cca:	463b      	mov	r3, r7
 c031ccc:	4432      	add	r2, r6
 c031cce:	4629      	mov	r1, r5
 c031cd0:	f7ff fde4 	bl	c03189c <sst_flash_read>
}
 c031cd4:	b005      	add	sp, #20
 c031cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c031cd8 <sst_flash_fs_dblock_write_file>:

psa_ps_status_t sst_flash_fs_dblock_write_file(uint32_t lblock,
                                               uint32_t offset,
                                               uint32_t size,
                                               const uint8_t *data)
{
 c031cd8:	b570      	push	{r4, r5, r6, lr}
 c031cda:	460d      	mov	r5, r1
 c031cdc:	4616      	mov	r6, r2
 c031cde:	461c      	mov	r4, r3
    uint32_t scratch_id;

    scratch_id = sst_flash_fs_mblock_cur_data_scratch_id(lblock);
 c031ce0:	f000 f8a6 	bl	c031e30 <sst_flash_fs_mblock_cur_data_scratch_id>

    return sst_flash_write(scratch_id, data, offset, size);
 c031ce4:	4633      	mov	r3, r6
 c031ce6:	462a      	mov	r2, r5
 c031ce8:	4621      	mov	r1, r4
}
 c031cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return sst_flash_write(scratch_id, data, offset, size);
 c031cee:	f7ff bde5 	b.w	c0318bc <sst_flash_write>

0c031cf2 <sst_flash_fs_dblock_cp_remaining_data>:

psa_ps_status_t sst_flash_fs_dblock_cp_remaining_data(
                                      const struct sst_block_meta_t *block_meta,
                                      const struct sst_file_meta_t *file_meta)
{
 c031cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c031cf4:	4604      	mov	r4, r0
 c031cf6:	460d      	mov	r5, r1
    uint32_t after_file_offset;
    psa_ps_status_t err;
    uint32_t scratch_id;
    uint32_t wrt_bytes;

    scratch_id = sst_flash_fs_mblock_cur_data_scratch_id(file_meta->lblock);
 c031cf8:	6808      	ldr	r0, [r1, #0]
 c031cfa:	f000 f899 	bl	c031e30 <sst_flash_fs_mblock_cur_data_scratch_id>

    if (file_meta->data_idx > block_meta->data_start) {
 c031cfe:	686a      	ldr	r2, [r5, #4]
 c031d00:	6863      	ldr	r3, [r4, #4]
    scratch_id = sst_flash_fs_mblock_cur_data_scratch_id(file_meta->lblock);
 c031d02:	4606      	mov	r6, r0
    if (file_meta->data_idx > block_meta->data_start) {
 c031d04:	429a      	cmp	r2, r3
 c031d06:	d80e      	bhi.n	c031d26 <sst_flash_fs_dblock_cp_remaining_data+0x34>
    }

    /* The referenced file data is already in the scratch block, as it is
     * processed before calling of this function.
     */
    after_file_offset = file_meta->data_idx + file_meta->max_size;
 c031d08:	68ea      	ldr	r2, [r5, #12]
 c031d0a:	686b      	ldr	r3, [r5, #4]

    /* Calculate amount of bytes after the manipulated file */
    wrt_bytes = (SST_BLOCK_SIZE - (after_file_offset + block_meta->free_size));

    /* Data after updated content */
    return sst_flash_block_to_block_move(scratch_id, after_file_offset,
 c031d0c:	4630      	mov	r0, r6
    after_file_offset = file_meta->data_idx + file_meta->max_size;
 c031d0e:	4413      	add	r3, r2
    wrt_bytes = (SST_BLOCK_SIZE - (after_file_offset + block_meta->free_size));
 c031d10:	68a2      	ldr	r2, [r4, #8]
    return sst_flash_block_to_block_move(scratch_id, after_file_offset,
 c031d12:	4619      	mov	r1, r3
    wrt_bytes = (SST_BLOCK_SIZE - (after_file_offset + block_meta->free_size));
 c031d14:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 c031d18:	1ad2      	subs	r2, r2, r3
    return sst_flash_block_to_block_move(scratch_id, after_file_offset,
 c031d1a:	9200      	str	r2, [sp, #0]
 c031d1c:	6822      	ldr	r2, [r4, #0]
 c031d1e:	f7ff fddd 	bl	c0318dc <sst_flash_block_to_block_move>
                                         block_meta->phy_id, after_file_offset,
                                         wrt_bytes);
}
 c031d22:	b002      	add	sp, #8
 c031d24:	bd70      	pop	{r4, r5, r6, pc}
        wrt_bytes = (file_meta->data_idx - block_meta->data_start);
 c031d26:	1ad2      	subs	r2, r2, r3
        err = sst_flash_block_to_block_move(scratch_id,
 c031d28:	9200      	str	r2, [sp, #0]
 c031d2a:	4619      	mov	r1, r3
 c031d2c:	6822      	ldr	r2, [r4, #0]
 c031d2e:	f7ff fdd5 	bl	c0318dc <sst_flash_block_to_block_move>
        if (err != PSA_PS_SUCCESS) {
 c031d32:	2800      	cmp	r0, #0
 c031d34:	d0e8      	beq.n	c031d08 <sst_flash_fs_dblock_cp_remaining_data+0x16>
 c031d36:	e7f4      	b.n	c031d22 <sst_flash_fs_dblock_cp_remaining_data+0x30>

0c031d38 <sst_mblock_write_scratch_meta_header>:
 * \return scratch metablock's id
 */
__attribute__((always_inline))
__STATIC_INLINE uint32_t sst_cur_meta_scratch_id(void)
{
    return sst_flash_fs_ctx.scratch_metablock;
 c031d38:	4a06      	ldr	r2, [pc, #24]	; (c031d54 <sst_mblock_write_scratch_meta_header+0x1c>)
        /* Reset the swap count to 0 */
        sst_flash_fs_ctx.meta_block_header.active_swap_count = 0;
    }

    /* Write the metadata block header */
    err = sst_flash_write(scratch_metablock,
 c031d3a:	4906      	ldr	r1, [pc, #24]	; (c031d54 <sst_mblock_write_scratch_meta_header+0x1c>)
    sst_flash_fs_ctx.meta_block_header.active_swap_count += 1;
 c031d3c:	7953      	ldrb	r3, [r2, #5]
    return sst_flash_fs_ctx.scratch_metablock;
 c031d3e:	68d0      	ldr	r0, [r2, #12]
    sst_flash_fs_ctx.meta_block_header.active_swap_count += 1;
 c031d40:	3301      	adds	r3, #1
 c031d42:	b2db      	uxtb	r3, r3
    if (swap_count == SST_FLASH_DEFAULT_VAL) {
 c031d44:	2bff      	cmp	r3, #255	; 0xff
        sst_flash_fs_ctx.meta_block_header.active_swap_count = 0;
 c031d46:	bf08      	it	eq
 c031d48:	2300      	moveq	r3, #0
 c031d4a:	7153      	strb	r3, [r2, #5]
    err = sst_flash_write(scratch_metablock,
 c031d4c:	2308      	movs	r3, #8
 c031d4e:	2200      	movs	r2, #0
 c031d50:	f7ff bdb4 	b.w	c0318bc <sst_flash_write>
 c031d54:	3003c310 	.word	0x3003c310

0c031d58 <sst_init_get_active_metablock>:
 * \brief Validates and find the valid-active metablock
 *
 * \return Returns value as specified in \ref psa_ps_status_t
 */
static psa_ps_status_t sst_init_get_active_metablock(void)
{
 c031d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t num_valid_meta_blocks = 0;

    /* First two blocks are reserved for metadata */

    /* Read the header of both the metdata blocks */
    err = sst_flash_read(SST_METADATA_BLOCK0, (uint8_t *)&h_meta0,
 c031d5a:	2200      	movs	r2, #0
 c031d5c:	2308      	movs	r3, #8
 c031d5e:	4669      	mov	r1, sp
 c031d60:	4610      	mov	r0, r2
 c031d62:	f7ff fd9b 	bl	c03189c <sst_flash_read>
                         0, SST_BLOCK_META_HEADER_SIZE);
    if (err != PSA_PS_SUCCESS) {
 c031d66:	2800      	cmp	r0, #0
 c031d68:	d137      	bne.n	c031dda <sst_init_get_active_metablock+0x82>
        return err;
    }

    err = sst_flash_read(SST_METADATA_BLOCK1, (uint8_t *)&h_meta1,
 c031d6a:	2308      	movs	r3, #8
 c031d6c:	4602      	mov	r2, r0
 c031d6e:	eb0d 0103 	add.w	r1, sp, r3
 c031d72:	2001      	movs	r0, #1
 c031d74:	f7ff fd92 	bl	c03189c <sst_flash_read>
                         0, SST_BLOCK_META_HEADER_SIZE);
    if (err != PSA_PS_SUCCESS) {
 c031d78:	bb78      	cbnz	r0, c031dda <sst_init_get_active_metablock+0x82>
    err = sst_mblock_validate_fs_version(h_meta->fs_version);
 c031d7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (fs_version != SST_SUPPORTED_VERSION) {
 c031d7e:	2b01      	cmp	r3, #1
 c031d80:	d11b      	bne.n	c031dba <sst_init_get_active_metablock+0x62>
    if (swap_count == SST_FLASH_DEFAULT_VAL) {
 c031d82:	f89d 2005 	ldrb.w	r2, [sp, #5]
     * update operation to complete. Need to find out the valid
     * metadata block now.
     */
    if (sst_mblock_validate_header_meta(&h_meta0) == PSA_PS_SUCCESS) {
        num_valid_meta_blocks++;
        cur_meta_block = SST_METADATA_BLOCK0;
 c031d86:	2aff      	cmp	r2, #255	; 0xff
 c031d88:	bf0a      	itet	eq
 c031d8a:	f04f 31ff 	moveq.w	r1, #4294967295
 c031d8e:	2100      	movne	r1, #0
 c031d90:	2300      	moveq	r3, #0
    if (fs_version != SST_SUPPORTED_VERSION) {
 c031d92:	f89d 400c 	ldrb.w	r4, [sp, #12]
 c031d96:	2c01      	cmp	r4, #1
 c031d98:	d123      	bne.n	c031de2 <sst_init_get_active_metablock+0x8a>
        err = sst_mblock_validate_swap_count(h_meta->active_swap_count);
 c031d9a:	f89d 200d 	ldrb.w	r2, [sp, #13]
    if (swap_count == SST_FLASH_DEFAULT_VAL) {
 c031d9e:	2aff      	cmp	r2, #255	; 0xff
 c031da0:	d01f      	beq.n	c031de2 <sst_init_get_active_metablock+0x8a>

    /* If there are more than 1 potential metablocks, the previous
     * update operation was interrupted by power failure. In which case,
     * need to find out which one is potentially latest metablock.
     */
    if (num_valid_meta_blocks > 1) {
 c031da2:	2b01      	cmp	r3, #1
 c031da4:	d11b      	bne.n	c031dde <sst_init_get_active_metablock+0x86>
        cur_meta_block = sst_mblock_latest_meta_block(&h_meta0, &h_meta1);
 c031da6:	f89d 1005 	ldrb.w	r1, [sp, #5]
    if ((meta1_swap_count == 0) && (meta0_swap_count != 1)) {
 c031daa:	b952      	cbnz	r2, c031dc2 <sst_init_get_active_metablock+0x6a>
 c031dac:	2901      	cmp	r1, #1
 c031dae:	d10d      	bne.n	c031dcc <sst_init_get_active_metablock+0x74>
        cur_meta = SST_METADATA_BLOCK1;
 c031db0:	4291      	cmp	r1, r2
 c031db2:	bf2c      	ite	cs
 c031db4:	2300      	movcs	r3, #0
 c031db6:	2301      	movcc	r3, #1
 c031db8:	e008      	b.n	c031dcc <sst_init_get_active_metablock+0x74>
    uint8_t num_valid_meta_blocks = 0;
 c031dba:	4603      	mov	r3, r0
    uint32_t cur_meta_block = SST_BLOCK_INVALID_ID;
 c031dbc:	f04f 31ff 	mov.w	r1, #4294967295
 c031dc0:	e7e7      	b.n	c031d92 <sst_init_get_active_metablock+0x3a>
    } else if ((meta0_swap_count == 0) && (meta1_swap_count != 1)) {
 c031dc2:	2900      	cmp	r1, #0
 c031dc4:	d1f4      	bne.n	c031db0 <sst_init_get_active_metablock+0x58>
        cur_meta = SST_METADATA_BLOCK1;
 c031dc6:	3a01      	subs	r2, #1
 c031dc8:	4253      	negs	r3, r2
 c031dca:	4153      	adcs	r3, r2
        cur_meta_block = sst_mblock_latest_meta_block(&h_meta0, &h_meta1);
 c031dcc:	4619      	mov	r1, r3
    } else if (num_valid_meta_blocks == 0) {
        return PSA_PS_ERROR_OPERATION_FAILED;
    }

    sst_flash_fs_ctx.active_metablock = cur_meta_block;
 c031dce:	4b07      	ldr	r3, [pc, #28]	; (c031dec <sst_init_get_active_metablock+0x94>)
 c031dd0:	6099      	str	r1, [r3, #8]
    sst_flash_fs_ctx.scratch_metablock = SST_OTHER_META_BLOCK(cur_meta_block);
 c031dd2:	fab1 f181 	clz	r1, r1
 c031dd6:	0949      	lsrs	r1, r1, #5
 c031dd8:	60d9      	str	r1, [r3, #12]

    return PSA_PS_SUCCESS;
}
 c031dda:	b004      	add	sp, #16
 c031ddc:	bd10      	pop	{r4, pc}
        cur_meta_block = SST_METADATA_BLOCK1;
 c031dde:	4621      	mov	r1, r4
 c031de0:	e7f5      	b.n	c031dce <sst_init_get_active_metablock+0x76>
    } else if (num_valid_meta_blocks == 0) {
 c031de2:	2b00      	cmp	r3, #0
 c031de4:	d1f3      	bne.n	c031dce <sst_init_get_active_metablock+0x76>
        return PSA_PS_ERROR_OPERATION_FAILED;
 c031de6:	200b      	movs	r0, #11
 c031de8:	e7f7      	b.n	c031dda <sst_init_get_active_metablock+0x82>
 c031dea:	bf00      	nop
 c031dec:	3003c310 	.word	0x3003c310

0c031df0 <sst_flash_fs_mblock_cp_remaining_file_meta>:
    return sst_flash_fs_ctx.scratch_metablock;
 c031df0:	4b0e      	ldr	r3, [pc, #56]	; (c031e2c <sst_flash_fs_mblock_cp_remaining_file_meta+0x3c>)

psa_ps_status_t sst_flash_fs_mblock_cp_remaining_file_meta(uint32_t idx)
{
 c031df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return sst_flash_fs_ctx.active_metablock;
 c031df4:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
    meta_block = sst_mblock_cur_meta_active();
    /* Calculate the position */
    pos = sst_mblock_file_meta_offset(0);
    /* Copy rest of the block data from previous block */
    /* Data before updated content */
    err = sst_flash_block_to_block_move(scratch_block, pos, meta_block, pos,
 c031df8:	2318      	movs	r3, #24
 c031dfa:	fb03 f400 	mul.w	r4, r3, r0
 c031dfe:	4632      	mov	r2, r6
 c031e00:	9400      	str	r4, [sp, #0]
 c031e02:	4619      	mov	r1, r3
 c031e04:	4628      	mov	r0, r5
 c031e06:	f7ff fd69 	bl	c0318dc <sst_flash_block_to_block_move>
                                        (idx * SST_FILE_METADATA_SIZE));
    if (err != PSA_PS_SUCCESS) {
 c031e0a:	b960      	cbnz	r0, c031e26 <sst_flash_fs_mblock_cp_remaining_file_meta+0x36>
    offset = SST_BLOCK_META_HEADER_SIZE
 c031e0c:	f104 0330 	add.w	r3, r4, #48	; 0x30

    /* Get end of file meta position which is the position after the last
     * byte of file meta.
     */
    end = sst_mblock_file_meta_offset(SST_MAX_NUM_OBJECTS);
    if (end > pos) {
 c031e10:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 c031e14:	d207      	bcs.n	c031e26 <sst_flash_fs_mblock_cp_remaining_file_meta+0x36>
        err = sst_flash_block_to_block_move(scratch_block, pos, meta_block,
 c031e16:	f5c3 72a8 	rsb	r2, r3, #336	; 0x150
 c031e1a:	9200      	str	r2, [sp, #0]
 c031e1c:	4619      	mov	r1, r3
 c031e1e:	4632      	mov	r2, r6
 c031e20:	4628      	mov	r0, r5
 c031e22:	f7ff fd5b 	bl	c0318dc <sst_flash_block_to_block_move>
                                            pos, (end - pos));
    }

    return err;
}
 c031e26:	b002      	add	sp, #8
 c031e28:	bd70      	pop	{r4, r5, r6, pc}
 c031e2a:	bf00      	nop
 c031e2c:	3003c310 	.word	0x3003c310

0c031e30 <sst_flash_fs_mblock_cur_data_scratch_id>:

uint32_t sst_flash_fs_mblock_cur_data_scratch_id(uint32_t lblock)
{
 c031e30:	4b02      	ldr	r3, [pc, #8]	; (c031e3c <sst_flash_fs_mblock_cur_data_scratch_id+0xc>)
    if (lblock == SST_LOGICAL_DBLOCK0) {
 c031e32:	b908      	cbnz	r0, c031e38 <sst_flash_fs_mblock_cur_data_scratch_id+0x8>
    return sst_flash_fs_ctx.scratch_metablock;
 c031e34:	68d8      	ldr	r0, [r3, #12]
        /* Scratch logical data block 0 physical IDs */
        return sst_cur_meta_scratch_id();
 c031e36:	4770      	bx	lr
    }

    return sst_flash_fs_ctx.meta_block_header.scratch_dblock;
 c031e38:	6818      	ldr	r0, [r3, #0]
}
 c031e3a:	4770      	bx	lr
 c031e3c:	3003c310 	.word	0x3003c310

0c031e40 <sst_flash_fs_mblock_init>:

    return PSA_PS_ERROR_UID_NOT_FOUND;
}

psa_ps_status_t sst_flash_fs_mblock_init(void)
{
 c031e40:	b510      	push	{r4, lr}
    psa_ps_status_t err;

    /* Initialize Flash Interface */
    err = sst_flash_init();
 c031e42:	f7ff fd1f 	bl	c031884 <sst_flash_init>
    if (err != PSA_PS_SUCCESS) {
 c031e46:	b920      	cbnz	r0, c031e52 <sst_flash_fs_mblock_init+0x12>
        return err;
    }

    err = sst_init_get_active_metablock();
 c031e48:	f7ff ff86 	bl	c031d58 <sst_init_get_active_metablock>
    if (err != PSA_PS_SUCCESS) {
 c031e4c:	4602      	mov	r2, r0
 c031e4e:	b108      	cbz	r0, c031e54 <sst_flash_fs_mblock_init+0x14>
        return PSA_PS_ERROR_OPERATION_FAILED;
 c031e50:	200b      	movs	r0, #11

    /* Erase the other scratch metadata block */
    err = sst_mblock_erase_scratch_blocks();

    return err;
}
 c031e52:	bd10      	pop	{r4, pc}
    err = sst_flash_read(sst_flash_fs_ctx.active_metablock,
 c031e54:	4c09      	ldr	r4, [pc, #36]	; (c031e7c <sst_flash_fs_mblock_init+0x3c>)
 c031e56:	2308      	movs	r3, #8
 c031e58:	4621      	mov	r1, r4
 c031e5a:	68a0      	ldr	r0, [r4, #8]
 c031e5c:	f7ff fd1e 	bl	c03189c <sst_flash_read>
    if (err != PSA_PS_SUCCESS) {
 c031e60:	2800      	cmp	r0, #0
 c031e62:	d1f5      	bne.n	c031e50 <sst_flash_fs_mblock_init+0x10>
    if (fs_version != SST_SUPPORTED_VERSION) {
 c031e64:	7923      	ldrb	r3, [r4, #4]
 c031e66:	2b01      	cmp	r3, #1
 c031e68:	d1f2      	bne.n	c031e50 <sst_flash_fs_mblock_init+0x10>
    if (swap_count == SST_FLASH_DEFAULT_VAL) {
 c031e6a:	7963      	ldrb	r3, [r4, #5]
 c031e6c:	2bff      	cmp	r3, #255	; 0xff
 c031e6e:	d0ef      	beq.n	c031e50 <sst_flash_fs_mblock_init+0x10>
    err = sst_flash_erase_block(scratch_metablock);
 c031e70:	68e0      	ldr	r0, [r4, #12]
}
 c031e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = sst_flash_erase_block(scratch_metablock);
 c031e76:	f7ff bd63 	b.w	c031940 <sst_flash_erase_block>
 c031e7a:	bf00      	nop
 c031e7c:	3003c310 	.word	0x3003c310

0c031e80 <sst_flash_fs_mblock_meta_update_finalize>:

psa_ps_status_t sst_flash_fs_mblock_meta_update_finalize(void)
{
 c031e80:	b508      	push	{r3, lr}
    psa_ps_status_t err;

    /* Write the metadata block header to flash */
    err = sst_mblock_write_scratch_meta_header();
 c031e82:	f7ff ff59 	bl	c031d38 <sst_mblock_write_scratch_meta_header>
    if (err != PSA_PS_SUCCESS) {
 c031e86:	b940      	cbnz	r0, c031e9a <sst_flash_fs_mblock_meta_update_finalize+0x1a>
    tmp_block = sst_flash_fs_ctx.scratch_metablock;
 c031e88:	4b04      	ldr	r3, [pc, #16]	; (c031e9c <sst_flash_fs_mblock_meta_update_finalize+0x1c>)
    sst_flash_fs_ctx.scratch_metablock = sst_flash_fs_ctx.active_metablock;
 c031e8a:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    sst_flash_fs_ctx.active_metablock = tmp_block;
 c031e8e:	e9c3 2002 	strd	r2, r0, [r3, #8]

    /* Erase meta block and current scratch block */
    err = sst_mblock_erase_scratch_blocks();

    return err;
}
 c031e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = sst_flash_erase_block(scratch_metablock);
 c031e96:	f7ff bd53 	b.w	c031940 <sst_flash_erase_block>
}
 c031e9a:	bd08      	pop	{r3, pc}
 c031e9c:	3003c310 	.word	0x3003c310

0c031ea0 <sst_flash_fs_mblock_read_file_meta>:
{
    psa_ps_status_t err;
    uint32_t offset;

    offset = sst_mblock_file_meta_offset(idx);
    err = sst_flash_read(sst_flash_fs_ctx.active_metablock,
 c031ea0:	2318      	movs	r3, #24
 c031ea2:	fb00 3203 	mla	r2, r0, r3, r3
 c031ea6:	4802      	ldr	r0, [pc, #8]	; (c031eb0 <sst_flash_fs_mblock_read_file_meta+0x10>)
 c031ea8:	6880      	ldr	r0, [r0, #8]
 c031eaa:	f7ff bcf7 	b.w	c03189c <sst_flash_read>
 c031eae:	bf00      	nop
 c031eb0:	3003c310 	.word	0x3003c310

0c031eb4 <sst_flash_fs_mblock_get_file_idx>:
{
 c031eb4:	b570      	push	{r4, r5, r6, lr}
 c031eb6:	4605      	mov	r5, r0
 c031eb8:	460e      	mov	r6, r1
    for (i = 0; i < SST_MAX_NUM_OBJECTS; i++) {
 c031eba:	2400      	movs	r4, #0
{
 c031ebc:	b086      	sub	sp, #24
        err = sst_flash_fs_mblock_read_file_meta(i, &tmp_metadata);
 c031ebe:	4669      	mov	r1, sp
 c031ec0:	4620      	mov	r0, r4
 c031ec2:	f7ff ffed 	bl	c031ea0 <sst_flash_fs_mblock_read_file_meta>
        if (err != PSA_PS_SUCCESS) {
 c031ec6:	b950      	cbnz	r0, c031ede <sst_flash_fs_mblock_get_file_idx+0x2a>
        if (tmp_metadata.id == fid) {
 c031ec8:	9b04      	ldr	r3, [sp, #16]
 c031eca:	42ab      	cmp	r3, r5
 c031ecc:	d102      	bne.n	c031ed4 <sst_flash_fs_mblock_get_file_idx+0x20>
            *idx = i;
 c031ece:	6034      	str	r4, [r6, #0]
}
 c031ed0:	b006      	add	sp, #24
 c031ed2:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < SST_MAX_NUM_OBJECTS; i++) {
 c031ed4:	3401      	adds	r4, #1
 c031ed6:	2c0d      	cmp	r4, #13
 c031ed8:	d1f1      	bne.n	c031ebe <sst_flash_fs_mblock_get_file_idx+0xa>
    return PSA_PS_ERROR_UID_NOT_FOUND;
 c031eda:	2005      	movs	r0, #5
 c031edc:	e7f8      	b.n	c031ed0 <sst_flash_fs_mblock_get_file_idx+0x1c>
            return PSA_PS_ERROR_OPERATION_FAILED;
 c031ede:	200b      	movs	r0, #11
 c031ee0:	e7f6      	b.n	c031ed0 <sst_flash_fs_mblock_get_file_idx+0x1c>
	...

0c031ee4 <sst_flash_fs_mblock_read_block_metadata>:
             (lblock * SST_BLOCK_METADATA_SIZE);
 c031ee4:	0102      	lsls	r2, r0, #4
    uint32_t metablock;
    uint32_t pos;

    metablock = sst_mblock_cur_meta_active();
    pos = sst_mblock_block_meta_offset(lblock);
    err = sst_flash_read(metablock, (uint8_t *)block_meta,
 c031ee6:	4803      	ldr	r0, [pc, #12]	; (c031ef4 <sst_flash_fs_mblock_read_block_metadata+0x10>)
 c031ee8:	2310      	movs	r3, #16
 c031eea:	3208      	adds	r2, #8
 c031eec:	6880      	ldr	r0, [r0, #8]
 c031eee:	f7ff bcd5 	b.w	c03189c <sst_flash_read>
 c031ef2:	bf00      	nop
 c031ef4:	3003c310 	.word	0x3003c310

0c031ef8 <sst_flash_fs_mblock_migrate_lb0_data_to_scratch>:
{
 c031ef8:	b530      	push	{r4, r5, lr}
    return sst_flash_fs_ctx.scratch_metablock;
 c031efa:	4b0b      	ldr	r3, [pc, #44]	; (c031f28 <sst_flash_fs_mblock_migrate_lb0_data_to_scratch+0x30>)
{
 c031efc:	b087      	sub	sp, #28
    err = sst_flash_fs_mblock_read_block_metadata(SST_LOGICAL_DBLOCK0,
 c031efe:	a902      	add	r1, sp, #8
 c031f00:	2000      	movs	r0, #0
    return sst_flash_fs_ctx.active_metablock;
 c031f02:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
    err = sst_flash_fs_mblock_read_block_metadata(SST_LOGICAL_DBLOCK0,
 c031f06:	f7ff ffed 	bl	c031ee4 <sst_flash_fs_mblock_read_block_metadata>
    if (err != PSA_PS_SUCCESS) {
 c031f0a:	b950      	cbnz	r0, c031f22 <sst_flash_fs_mblock_migrate_lb0_data_to_scratch+0x2a>
    data_size = ((SST_BLOCK_SIZE - block_meta.data_start)
 c031f0c:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 c031f10:	4419      	add	r1, r3
 c031f12:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    err = sst_flash_block_to_block_move(scratch_metablock,
 c031f16:	9100      	str	r1, [sp, #0]
 c031f18:	462a      	mov	r2, r5
 c031f1a:	4619      	mov	r1, r3
 c031f1c:	4620      	mov	r0, r4
 c031f1e:	f7ff fcdd 	bl	c0318dc <sst_flash_block_to_block_move>
}
 c031f22:	b007      	add	sp, #28
 c031f24:	bd30      	pop	{r4, r5, pc}
 c031f26:	bf00      	nop
 c031f28:	3003c310 	.word	0x3003c310

0c031f2c <sst_flash_fs_mblock_reserve_file>:

psa_ps_status_t sst_flash_fs_mblock_reserve_file(uint32_t fid, uint32_t size,
                                            uint32_t *idx,
                                            struct sst_file_meta_t *file_meta,
                                            struct sst_block_meta_t *block_meta)
{
 c031f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c031f30:	b087      	sub	sp, #28
 c031f32:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 c031f34:	4681      	mov	r9, r0
 c031f36:	460f      	mov	r7, r1
        err = sst_flash_fs_mblock_read_block_metadata(i, block_meta);
 c031f38:	2000      	movs	r0, #0
 c031f3a:	4631      	mov	r1, r6
{
 c031f3c:	4690      	mov	r8, r2
 c031f3e:	461d      	mov	r5, r3
        err = sst_flash_fs_mblock_read_block_metadata(i, block_meta);
 c031f40:	f7ff ffd0 	bl	c031ee4 <sst_flash_fs_mblock_read_block_metadata>
        if (err != PSA_PS_SUCCESS) {
 c031f44:	4604      	mov	r4, r0
 c031f46:	bb30      	cbnz	r0, c031f96 <sst_flash_fs_mblock_reserve_file+0x6a>
        if (block_meta->free_size >= size) {
 c031f48:	68b1      	ldr	r1, [r6, #8]
 c031f4a:	428f      	cmp	r7, r1
 c031f4c:	d825      	bhi.n	c031f9a <sst_flash_fs_mblock_reserve_file+0x6e>
            file_meta->data_idx = SST_BLOCK_SIZE - block_meta->free_size;
 c031f4e:	f5c1 5380 	rsb	r3, r1, #4096	; 0x1000
            block_meta->free_size -= size;
 c031f52:	1bc9      	subs	r1, r1, r7
            file_meta->lblock = i;
 c031f54:	6028      	str	r0, [r5, #0]
            file_meta->data_idx = SST_BLOCK_SIZE - block_meta->free_size;
 c031f56:	606b      	str	r3, [r5, #4]
            file_meta->id = fid;
 c031f58:	e9c5 7903 	strd	r7, r9, [r5, #12]
            file_meta->cur_size = 0;
 c031f5c:	60a8      	str	r0, [r5, #8]
            block_meta->free_size -= size;
 c031f5e:	60b1      	str	r1, [r6, #8]
    for (i = 0; i < SST_MAX_NUM_OBJECTS; i++) {
 c031f60:	2500      	movs	r5, #0
        err = sst_flash_fs_mblock_read_file_meta(i, &tmp_metadata);
 c031f62:	4669      	mov	r1, sp
 c031f64:	4628      	mov	r0, r5
 c031f66:	f7ff ff9b 	bl	c031ea0 <sst_flash_fs_mblock_read_file_meta>
        if (err != PSA_PS_SUCCESS) {
 c031f6a:	b930      	cbnz	r0, c031f7a <sst_flash_fs_mblock_reserve_file+0x4e>
        if (sst_utils_validate_fid(tmp_metadata.id) != PSA_PS_SUCCESS) {
 c031f6c:	9804      	ldr	r0, [sp, #16]
 c031f6e:	f000 fbbb 	bl	c0326e8 <sst_utils_validate_fid>
 c031f72:	b920      	cbnz	r0, c031f7e <sst_flash_fs_mblock_reserve_file+0x52>
    for (i = 0; i < SST_MAX_NUM_OBJECTS; i++) {
 c031f74:	3501      	adds	r5, #1
 c031f76:	2d0d      	cmp	r5, #13
 c031f78:	d1f3      	bne.n	c031f62 <sst_flash_fs_mblock_reserve_file+0x36>
            return SST_METADATA_INVALID_INDEX;
 c031f7a:	f64f 75ff 	movw	r5, #65535	; 0xffff
    psa_ps_status_t err;

    err = sst_mblock_reserve_file(fid, size, file_meta, block_meta);

    *idx = sst_get_free_file_index();
 c031f7e:	f8c8 5000 	str.w	r5, [r8]
    if ((err != PSA_PS_SUCCESS) ||
 c031f82:	b964      	cbnz	r4, c031f9e <sst_flash_fs_mblock_reserve_file+0x72>
        (*idx == SST_METADATA_INVALID_INDEX)) {
        return PSA_PS_ERROR_INSUFFICIENT_SPACE;
 c031f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 c031f88:	429d      	cmp	r5, r3
 c031f8a:	bf08      	it	eq
 c031f8c:	2403      	moveq	r4, #3
    }

    return PSA_PS_SUCCESS;
}
 c031f8e:	4620      	mov	r0, r4
 c031f90:	b007      	add	sp, #28
 c031f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return PSA_PS_ERROR_OPERATION_FAILED;
 c031f96:	240b      	movs	r4, #11
 c031f98:	e7e2      	b.n	c031f60 <sst_flash_fs_mblock_reserve_file+0x34>
    return PSA_PS_ERROR_INSUFFICIENT_SPACE;
 c031f9a:	2403      	movs	r4, #3
 c031f9c:	e7e0      	b.n	c031f60 <sst_flash_fs_mblock_reserve_file+0x34>
        return PSA_PS_ERROR_INSUFFICIENT_SPACE;
 c031f9e:	2403      	movs	r4, #3
 c031fa0:	e7f5      	b.n	c031f8e <sst_flash_fs_mblock_reserve_file+0x62>
	...

0c031fa4 <sst_flash_fs_mblock_reset_metablock>:

psa_ps_status_t sst_flash_fs_mblock_reset_metablock(void)
{
 c031fa4:	b530      	push	{r4, r5, lr}
 c031fa6:	b08b      	sub	sp, #44	; 0x2c

    /* Erase both metadata blocks. If at least one metadata block is valid,
     * ensure that the active metadata block is erased last to prevent rollback
     * in the case of a power failure between the two erases.
     */
    if (sst_init_get_active_metablock() == PSA_PS_SUCCESS) {
 c031fa8:	f7ff fed6 	bl	c031d58 <sst_init_get_active_metablock>
 c031fac:	2800      	cmp	r0, #0
 c031fae:	d134      	bne.n	c03201a <sst_flash_fs_mblock_reset_metablock+0x76>
        metablock_to_erase_first = sst_flash_fs_ctx.scratch_metablock;
 c031fb0:	4b21      	ldr	r3, [pc, #132]	; (c032038 <sst_flash_fs_mblock_reset_metablock+0x94>)
 c031fb2:	68dc      	ldr	r4, [r3, #12]
    }

    err = sst_flash_erase_block(metablock_to_erase_first);
 c031fb4:	4620      	mov	r0, r4
 c031fb6:	f7ff fcc3 	bl	c031940 <sst_flash_erase_block>
    if (err != PSA_PS_SUCCESS) {
 c031fba:	bb60      	cbnz	r0, c032016 <sst_flash_fs_mblock_reset_metablock+0x72>
        return err;
    }

    err = sst_flash_erase_block(SST_OTHER_META_BLOCK(metablock_to_erase_first));
 c031fbc:	fab4 f084 	clz	r0, r4
 c031fc0:	0940      	lsrs	r0, r0, #5
 c031fc2:	f7ff fcbd 	bl	c031940 <sst_flash_erase_block>
    if (err != PSA_PS_SUCCESS) {
 c031fc6:	bb30      	cbnz	r0, c032016 <sst_flash_fs_mblock_reset_metablock+0x72>
        return err;
    }

    sst_flash_fs_ctx.meta_block_header.active_swap_count = 0;
    sst_flash_fs_ctx.meta_block_header.scratch_dblock = SST_INIT_SCRATCH_DBLOCK;
 c031fc8:	2501      	movs	r5, #1
    /* Fill the block metadata for logical datablock 0, which has the physical
     * id of the active metadata block. For this datablock, the space available
     * for data is from the end of the metadata to the end of the block.
     */
    block_meta.data_start = SST_ALL_METADATA_SIZE;
    block_meta.free_size = (SST_BLOCK_SIZE - block_meta.data_start);
 c031fca:	f44f 72a8 	mov.w	r2, #336	; 0x150
 c031fce:	f44f 636b 	mov.w	r3, #3760	; 0xeb0
    sst_flash_fs_ctx.meta_block_header.scratch_dblock = SST_INIT_SCRATCH_DBLOCK;
 c031fd2:	4c19      	ldr	r4, [pc, #100]	; (c032038 <sst_flash_fs_mblock_reset_metablock+0x94>)
    block_meta.phy_id = SST_METADATA_BLOCK0;
 c031fd4:	a90a      	add	r1, sp, #40	; 0x28
    block_meta.free_size = (SST_BLOCK_SIZE - block_meta.data_start);
 c031fd6:	e9cd 2301 	strd	r2, r3, [sp, #4]
    sst_flash_fs_ctx.active_metablock = SST_METADATA_BLOCK0;
 c031fda:	e9c4 0502 	strd	r0, r5, [r4, #8]
    block_meta.phy_id = SST_METADATA_BLOCK0;
 c031fde:	f841 0d28 	str.w	r0, [r1, #-40]!
    sst_flash_fs_ctx.meta_block_header.scratch_dblock = SST_INIT_SCRATCH_DBLOCK;
 c031fe2:	6025      	str	r5, [r4, #0]
 c031fe4:	80a5      	strh	r5, [r4, #4]
    err = sst_flash_write(meta_block, (uint8_t *)block_meta, pos,
 c031fe6:	2310      	movs	r3, #16
 c031fe8:	2208      	movs	r2, #8
 c031fea:	4628      	mov	r0, r5
 c031fec:	f7ff fc66 	bl	c0318bc <sst_flash_write>
    err = sst_mblock_update_scratch_block_meta(SST_LOGICAL_DBLOCK0,
                                               &block_meta);
    if (err != PSA_PS_SUCCESS) {
 c031ff0:	b988      	cbnz	r0, c032016 <sst_flash_fs_mblock_reset_metablock+0x72>
     * ids beginning from 1 and physical ids initially beginning from
     * SST_INIT_DBLOCK_START. For these datablocks, the space available for
     * data is the entire block.
     */
    block_meta.data_start = 0;
    block_meta.free_size = SST_BLOCK_SIZE;
 c031ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    block_meta.data_start = 0;
 c031ff6:	9001      	str	r0, [sp, #4]
    return (memset(ptr, value, num));
 c031ff8:	4601      	mov	r1, r0
 c031ffa:	2218      	movs	r2, #24
 c031ffc:	a804      	add	r0, sp, #16
    block_meta.free_size = SST_BLOCK_SIZE;
 c031ffe:	9302      	str	r3, [sp, #8]
 c032000:	2518      	movs	r5, #24
 c032002:	f7e5 fce0 	bl	c0179c6 <memset>
    err = sst_flash_write(scratch_block, (uint8_t *)file_meta, pos,
 c032006:	2318      	movs	r3, #24
 c032008:	462a      	mov	r2, r5
 c03200a:	a904      	add	r1, sp, #16
 c03200c:	68e0      	ldr	r0, [r4, #12]
 c03200e:	f7ff fc55 	bl	c0318bc <sst_flash_write>
                     SST_FILE_METADATA_SIZE);
    for (i = 0; i < SST_MAX_NUM_OBJECTS; i++) {
        /* In the beginning phys id is same as logical id */
        /* Update file metadata to reflect new attributes */
        err = sst_mblock_update_scratch_file_meta(i, &file_metadata);
        if (err != PSA_PS_SUCCESS) {
 c032012:	b120      	cbz	r0, c03201e <sst_flash_fs_mblock_reset_metablock+0x7a>
            return PSA_PS_ERROR_OPERATION_FAILED;
 c032014:	200b      	movs	r0, #11

    /* Swap active and scratch metablocks */
    sst_mblock_swap_metablocks();

    return PSA_PS_SUCCESS;
}
 c032016:	b00b      	add	sp, #44	; 0x2c
 c032018:	bd30      	pop	{r4, r5, pc}
    uint32_t metablock_to_erase_first = SST_METADATA_BLOCK0;
 c03201a:	2400      	movs	r4, #0
 c03201c:	e7ca      	b.n	c031fb4 <sst_flash_fs_mblock_reset_metablock+0x10>
 c03201e:	3518      	adds	r5, #24
    for (i = 0; i < SST_MAX_NUM_OBJECTS; i++) {
 c032020:	f5b5 7fa8 	cmp.w	r5, #336	; 0x150
 c032024:	d1ef      	bne.n	c032006 <sst_flash_fs_mblock_reset_metablock+0x62>
    err = sst_mblock_write_scratch_meta_header();
 c032026:	f7ff fe87 	bl	c031d38 <sst_mblock_write_scratch_meta_header>
    if (err != PSA_PS_SUCCESS) {
 c03202a:	2800      	cmp	r0, #0
 c03202c:	d1f2      	bne.n	c032014 <sst_flash_fs_mblock_reset_metablock+0x70>
    sst_flash_fs_ctx.scratch_metablock = sst_flash_fs_ctx.active_metablock;
 c03202e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    sst_flash_fs_ctx.active_metablock = tmp_block;
 c032032:	e9c4 3202 	strd	r3, r2, [r4, #8]
 c032036:	e7ee      	b.n	c032016 <sst_flash_fs_mblock_reset_metablock+0x72>
 c032038:	3003c310 	.word	0x3003c310

0c03203c <sst_flash_fs_mblock_set_data_scratch>:

void sst_flash_fs_mblock_set_data_scratch(uint32_t phy_id, uint32_t lblock)
{
    if (lblock != SST_LOGICAL_DBLOCK0) {
 c03203c:	b109      	cbz	r1, c032042 <sst_flash_fs_mblock_set_data_scratch+0x6>
        sst_flash_fs_ctx.meta_block_header.scratch_dblock = phy_id;
 c03203e:	4b01      	ldr	r3, [pc, #4]	; (c032044 <sst_flash_fs_mblock_set_data_scratch+0x8>)
 c032040:	6018      	str	r0, [r3, #0]
    }
}
 c032042:	4770      	bx	lr
 c032044:	3003c310 	.word	0x3003c310

0c032048 <sst_flash_fs_mblock_update_scratch_block_meta>:

psa_ps_status_t sst_flash_fs_mblock_update_scratch_block_meta(
                                            uint32_t lblock,
                                            struct sst_block_meta_t *block_meta)
{
 c032048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c03204c:	4d1d      	ldr	r5, [pc, #116]	; (c0320c4 <sst_flash_fs_mblock_update_scratch_block_meta+0x7c>)
 c03204e:	b086      	sub	sp, #24
 c032050:	68ef      	ldr	r7, [r5, #12]

    /* If the file is the logical block 0, then update the physical ID to the
     * current scratch metadata block so that it is correct after the metadata
     * blocks are swapped.
     */
    if (lblock == SST_LOGICAL_DBLOCK0) {
 c032052:	4606      	mov	r6, r0
 c032054:	b900      	cbnz	r0, c032058 <sst_flash_fs_mblock_update_scratch_block_meta+0x10>
        block_meta->phy_id = sst_cur_meta_scratch_id();
 c032056:	600f      	str	r7, [r1, #0]
             (lblock * SST_BLOCK_METADATA_SIZE);
 c032058:	0134      	lsls	r4, r6, #4
    err = sst_flash_write(meta_block, (uint8_t *)block_meta, pos,
 c03205a:	2310      	movs	r3, #16
 c03205c:	f104 0208 	add.w	r2, r4, #8
 c032060:	4638      	mov	r0, r7
 c032062:	f7ff fc2b 	bl	c0318bc <sst_flash_write>
    }

    err = sst_mblock_update_scratch_block_meta(lblock, block_meta);
    if (err != PSA_PS_SUCCESS) {
 c032066:	b990      	cbnz	r0, c03208e <sst_flash_fs_mblock_update_scratch_block_meta+0x46>
    return sst_flash_fs_ctx.active_metablock;
 c032068:	e9d5 8702 	ldrd	r8, r7, [r5, #8]
    if (lblock != SST_LOGICAL_DBLOCK0) {
 c03206c:	b95e      	cbnz	r6, c032086 <sst_flash_fs_mblock_update_scratch_block_meta+0x3e>
    offset = SST_BLOCK_META_HEADER_SIZE +
 c03206e:	f104 0318 	add.w	r3, r4, #24
    size = sst_mblock_file_meta_offset(0) - pos;
 c032072:	4264      	negs	r4, r4
    err = sst_flash_block_to_block_move(scratch_block, pos,
 c032074:	9400      	str	r4, [sp, #0]
 c032076:	4642      	mov	r2, r8
 c032078:	4619      	mov	r1, r3
 c03207a:	4638      	mov	r0, r7
 c03207c:	f7ff fc2e 	bl	c0318dc <sst_flash_block_to_block_move>
    }

    err = sst_mblock_copy_remaining_block_meta(lblock);

    return err;
}
 c032080:	b006      	add	sp, #24
 c032082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        err = sst_flash_fs_mblock_read_block_metadata(SST_LOGICAL_DBLOCK0,
 c032086:	a902      	add	r1, sp, #8
 c032088:	f7ff ff2c 	bl	c031ee4 <sst_flash_fs_mblock_read_block_metadata>
        if (err != PSA_PS_SUCCESS) {
 c03208c:	b108      	cbz	r0, c032092 <sst_flash_fs_mblock_update_scratch_block_meta+0x4a>
        return PSA_PS_ERROR_OPERATION_FAILED;
 c03208e:	200b      	movs	r0, #11
 c032090:	e7f6      	b.n	c032080 <sst_flash_fs_mblock_update_scratch_block_meta+0x38>
    err = sst_flash_write(meta_block, (uint8_t *)block_meta, pos,
 c032092:	2208      	movs	r2, #8
 c032094:	2310      	movs	r3, #16
 c032096:	eb0d 0102 	add.w	r1, sp, r2
 c03209a:	68e8      	ldr	r0, [r5, #12]
        block_meta.phy_id = scratch_block;
 c03209c:	9702      	str	r7, [sp, #8]
    err = sst_flash_write(meta_block, (uint8_t *)block_meta, pos,
 c03209e:	f7ff fc0d 	bl	c0318bc <sst_flash_write>
        if (err != PSA_PS_SUCCESS) {
 c0320a2:	2800      	cmp	r0, #0
 c0320a4:	d1f3      	bne.n	c03208e <sst_flash_fs_mblock_update_scratch_block_meta+0x46>
        if (lblock > 1) {
 c0320a6:	2e01      	cmp	r6, #1
 c0320a8:	d9e1      	bls.n	c03206e <sst_flash_fs_mblock_update_scratch_block_meta+0x26>
            size = sst_mblock_block_meta_offset(lblock) - pos;
 c0320aa:	f1a4 0310 	sub.w	r3, r4, #16
            err = sst_flash_block_to_block_move(scratch_block, pos, meta_block,
 c0320ae:	9300      	str	r3, [sp, #0]
 c0320b0:	2318      	movs	r3, #24
 c0320b2:	4642      	mov	r2, r8
 c0320b4:	4619      	mov	r1, r3
 c0320b6:	4638      	mov	r0, r7
 c0320b8:	f7ff fc10 	bl	c0318dc <sst_flash_block_to_block_move>
            if (err != PSA_PS_SUCCESS) {
 c0320bc:	2800      	cmp	r0, #0
 c0320be:	d0d6      	beq.n	c03206e <sst_flash_fs_mblock_update_scratch_block_meta+0x26>
 c0320c0:	e7de      	b.n	c032080 <sst_flash_fs_mblock_update_scratch_block_meta+0x38>
 c0320c2:	bf00      	nop
 c0320c4:	3003c310 	.word	0x3003c310

0c0320c8 <sst_flash_fs_mblock_update_scratch_file_meta>:
    err = sst_flash_write(scratch_block, (uint8_t *)file_meta, pos,
 c0320c8:	2318      	movs	r3, #24
 c0320ca:	fb00 3203 	mla	r2, r0, r3, r3
 c0320ce:	4802      	ldr	r0, [pc, #8]	; (c0320d8 <sst_flash_fs_mblock_update_scratch_file_meta+0x10>)
 c0320d0:	68c0      	ldr	r0, [r0, #12]
 c0320d2:	f7ff bbf3 	b.w	c0318bc <sst_flash_write>
 c0320d6:	bf00      	nop
 c0320d8:	3003c310 	.word	0x3003c310

0c0320dc <sst_remove_old_data>:
 * \param[in] old_fid  Old file ID to remove.
 *
 * \return Returns error code as specified in \ref psa_ps_status_t
 */
static psa_ps_status_t sst_remove_old_data(uint32_t old_fid)
{
 c0320dc:	b510      	push	{r4, lr}
 c0320de:	4604      	mov	r4, r0
    psa_ps_status_t err;

    /* Delete old object table from the persistent area */
    err = sst_object_table_delete_old_table();
 c0320e0:	f000 faf0 	bl	c0326c4 <sst_object_table_delete_old_table>
    if (err != PSA_PS_SUCCESS) {
 c0320e4:	b920      	cbnz	r0, c0320f0 <sst_remove_old_data+0x14>
        return err;
    }

    /* Delete old file from the persistent area */
    err = sst_flash_fs_file_delete(old_fid);
 c0320e6:	4620      	mov	r0, r4

    return err;
}
 c0320e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = sst_flash_fs_file_delete(old_fid);
 c0320ec:	f7ff bd16 	b.w	c031b1c <sst_flash_fs_file_delete>
}
 c0320f0:	bd10      	pop	{r4, pc}
	...

0c0320f4 <sst_system_prepare>:
}

#endif /* !SST_ENCRYPTION */

psa_ps_status_t sst_system_prepare(void)
{
 c0320f4:	b510      	push	{r4, lr}
    psa_ps_status_t err;

    err = sst_flash_fs_prepare();
 c0320f6:	f7ff fc31 	bl	c03195c <sst_flash_fs_prepare>
    if (err != PSA_PS_SUCCESS) {
 c0320fa:	b930      	cbnz	r0, c03210a <sst_system_prepare+0x16>
    /* Reuse the allocated g_sst_object.data to store a temporary object table
     * data to be validate inside the function.
     * The stored date will be cleaned up when the g_sst_object.data will
     * be used for the first time in the object system.
     */
    err = sst_object_table_init(g_sst_object.data);
 c0320fc:	4c03      	ldr	r4, [pc, #12]	; (c03210c <sst_system_prepare+0x18>)
 c0320fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 c032102:	f000 f983 	bl	c03240c <sst_object_table_init>

#ifdef SST_ENCRYPTION
    g_obj_tbl_info.tag = g_sst_object.header.crypto.ref.tag;
 c032106:	4b02      	ldr	r3, [pc, #8]	; (c032110 <sst_system_prepare+0x1c>)
 c032108:	605c      	str	r4, [r3, #4]
#endif

    return err;
}
 c03210a:	bd10      	pop	{r4, pc}
 c03210c:	3003c328 	.word	0x3003c328
 c032110:	3003c320 	.word	0x3003c320

0c032114 <sst_object_read>:

psa_ps_status_t sst_object_read(psa_ps_uid_t uid, int32_t client_id,
                                uint32_t offset, uint32_t size)
{
 c032114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    psa_ps_status_t err;

    /* Retrieve the object information from the object table if the object
     * exists.
     */
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c032116:	4f11      	ldr	r7, [pc, #68]	; (c03215c <sst_object_read+0x48>)
{
 c032118:	461e      	mov	r6, r3
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c03211a:	463b      	mov	r3, r7
 c03211c:	f000 fa84 	bl	c032628 <sst_object_table_get_obj_tbl_info>
    if (err != PSA_PS_SUCCESS) {
 c032120:	4604      	mov	r4, r0
 c032122:	b9c8      	cbnz	r0, c032158 <sst_object_read+0x44>
        return err;
    }

    /* Read object */
#ifdef SST_ENCRYPTION
    err = sst_encrypted_object_read(g_obj_tbl_info.fid, &g_sst_object);
 c032124:	4d0e      	ldr	r5, [pc, #56]	; (c032160 <sst_object_read+0x4c>)
 c032126:	6838      	ldr	r0, [r7, #0]
 c032128:	4629      	mov	r1, r5
 c03212a:	f7ff fb1f 	bl	c03176c <sst_encrypted_object_read>
#else
    /* Read object header */
    err = sst_read_object(READ_ALL_OBJECT);
#endif
    if (err != PSA_PS_SUCCESS) {
 c03212e:	4604      	mov	r4, r0
 c032130:	b960      	cbnz	r0, c03214c <sst_object_read+0x38>
        goto clear_data_and_return;
    }

    /* Boundary check the incoming request */
    err = sst_utils_check_contained_in(g_sst_object.header.info.current_size,
 c032132:	9a06      	ldr	r2, [sp, #24]
 c032134:	4631      	mov	r1, r6
 c032136:	69e8      	ldr	r0, [r5, #28]
 c032138:	f000 facc 	bl	c0326d4 <sst_utils_check_contained_in>
                                       offset, size);
    if (err != PSA_PS_SUCCESS) {
 c03213c:	4604      	mov	r4, r0
 c03213e:	b928      	cbnz	r0, c03214c <sst_object_read+0x38>
        goto clear_data_and_return;
    }

    /* Copy the decrypted object data to the output buffer */
    sst_req_mngr_write_asset_data(g_sst_object.data + offset, size);
 c032140:	f105 0028 	add.w	r0, r5, #40	; 0x28
 c032144:	9906      	ldr	r1, [sp, #24]
 c032146:	4430      	add	r0, r6
 c032148:	f001 fc52 	bl	c0339f0 <sst_req_mngr_write_asset_data>
 c03214c:	f44f 720a 	mov.w	r2, #552	; 0x228
 c032150:	2100      	movs	r1, #0
 c032152:	4803      	ldr	r0, [pc, #12]	; (c032160 <sst_object_read+0x4c>)
 c032154:	f7e5 fc37 	bl	c0179c6 <memset>
    /* Remove data stored in the object before leaving the function */
    (void)tfm_memset(&g_sst_object, SST_DEFAULT_EMPTY_BUFF_VAL,
                     SST_MAX_OBJECT_SIZE);

    return err;
}
 c032158:	4620      	mov	r0, r4
 c03215a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c03215c:	3003c320 	.word	0x3003c320
 c032160:	3003c328 	.word	0x3003c328

0c032164 <sst_object_create>:

psa_ps_status_t sst_object_create(psa_ps_uid_t uid, int32_t client_id,
                                  psa_ps_create_flags_t create_flags,
                                  uint32_t size)
{
 c032164:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c032168:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 c03216a:	4680      	mov	r8, r0
#ifndef SST_ENCRYPTION
    uint32_t wrt_size;
#endif

    /* Boundary check the incoming request */
    if (size > SST_MAX_ASSET_SIZE) {
 c03216c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
{
 c032170:	4689      	mov	r9, r1
 c032172:	4692      	mov	sl, r2
 c032174:	469b      	mov	fp, r3
    if (size > SST_MAX_ASSET_SIZE) {
 c032176:	d85b      	bhi.n	c032230 <sst_object_create+0xcc>
    }

    /* Retrieve the object information from the object table if the object
     * exists.
     */
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c032178:	4d2e      	ldr	r5, [pc, #184]	; (c032234 <sst_object_create+0xd0>)
 c03217a:	462b      	mov	r3, r5
 c03217c:	f000 fa54 	bl	c032628 <sst_object_table_get_obj_tbl_info>
    if (err == PSA_PS_SUCCESS) {
 c032180:	4604      	mov	r4, r0
 c032182:	2800      	cmp	r0, #0
 c032184:	d13b      	bne.n	c0321fe <sst_object_create+0x9a>
#ifdef SST_ENCRYPTION
        /* Read the object */
        err = sst_encrypted_object_read(g_obj_tbl_info.fid, &g_sst_object);
 c032186:	4f2c      	ldr	r7, [pc, #176]	; (c032238 <sst_object_create+0xd4>)
 c032188:	6828      	ldr	r0, [r5, #0]
 c03218a:	4639      	mov	r1, r7
 c03218c:	f7ff faee 	bl	c03176c <sst_encrypted_object_read>
#else
        /* Read the object header */
        err = sst_read_object(READ_HEADER_ONLY);
#endif
        if (err != PSA_PS_SUCCESS) {
 c032190:	4604      	mov	r4, r0
 c032192:	bb50      	cbnz	r0, c0321ea <sst_object_create+0x86>

        /* If the object exists and has the write once flag set, then it cannot
         * be modified.
         */
        if (g_sst_object.header.info.create_flags
            & PSA_PS_FLAG_WRITE_ONCE) {
 c032194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        if (g_sst_object.header.info.create_flags
 c032196:	07db      	lsls	r3, r3, #31
 c032198:	d448      	bmi.n	c03222c <sst_object_create+0xc8>
    uint32_t fid_am_reserved = 1;
 c03219a:	2301      	movs	r3, #1
            goto clear_data_and_return;
        }

        /* Update the create flags and max object size */
        g_sst_object.header.info.create_flags = create_flags;
        g_sst_object.header.info.max_size = size;
 c03219c:	e9c7 6b08 	strd	r6, fp, [r7, #32]

        /* Save old file ID */
        old_fid = g_obj_tbl_info.fid;
 c0321a0:	682f      	ldr	r7, [r5, #0]
    } else {
        goto clear_data_and_return;
    }

    /* Update the object data */
    err = sst_req_mngr_read_asset_data(g_sst_object.data, size);
 c0321a2:	f8df b094 	ldr.w	fp, [pc, #148]	; c032238 <sst_object_create+0xd4>
 c0321a6:	4631      	mov	r1, r6
 c0321a8:	f10b 0028 	add.w	r0, fp, #40	; 0x28
 c0321ac:	9301      	str	r3, [sp, #4]
 c0321ae:	f001 fc0f 	bl	c0339d0 <sst_req_mngr_read_asset_data>
    if (err != PSA_PS_SUCCESS) {
 c0321b2:	9b01      	ldr	r3, [sp, #4]
 c0321b4:	4604      	mov	r4, r0
 c0321b6:	b9c0      	cbnz	r0, c0321ea <sst_object_create+0x86>

    /* Update the current object size */
    g_sst_object.header.info.current_size = size;

    /* Get new file ID */
    err = sst_object_table_get_free_fid(fid_am_reserved,
 c0321b8:	491e      	ldr	r1, [pc, #120]	; (c032234 <sst_object_create+0xd0>)
 c0321ba:	4618      	mov	r0, r3
    g_sst_object.header.info.current_size = size;
 c0321bc:	f8cb 601c 	str.w	r6, [fp, #28]
    err = sst_object_table_get_free_fid(fid_am_reserved,
 c0321c0:	f000 f9a6 	bl	c032510 <sst_object_table_get_free_fid>
                                        &g_obj_tbl_info.fid);
    if (err != PSA_PS_SUCCESS) {
 c0321c4:	4604      	mov	r4, r0
 c0321c6:	b980      	cbnz	r0, c0321ea <sst_object_create+0x86>
        goto clear_data_and_return;
    }

#ifdef SST_ENCRYPTION
    err = sst_encrypted_object_write(g_obj_tbl_info.fid, &g_sst_object);
 c0321c8:	4659      	mov	r1, fp
 c0321ca:	6828      	ldr	r0, [r5, #0]
 c0321cc:	f7ff fb0c 	bl	c0317e8 <sst_encrypted_object_write>
    wrt_size = SST_OBJECT_SIZE(g_sst_object.header.info.current_size);

    /* Write g_sst_object */
    err = sst_write_object(wrt_size);
#endif
    if (err != PSA_PS_SUCCESS) {
 c0321d0:	4604      	mov	r4, r0
 c0321d2:	b950      	cbnz	r0, c0321ea <sst_object_create+0x86>
    }

    /* Update the table with the new internal ID and version for the object, and
     * store it in the persistent area.
     */
    err = sst_object_table_set_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c0321d4:	4b17      	ldr	r3, [pc, #92]	; (c032234 <sst_object_create+0xd0>)
 c0321d6:	4652      	mov	r2, sl
 c0321d8:	4640      	mov	r0, r8
 c0321da:	4649      	mov	r1, r9
 c0321dc:	f000 f9c4 	bl	c032568 <sst_object_table_set_obj_tbl_info>
    if (err != PSA_PS_SUCCESS) {
 c0321e0:	4604      	mov	r4, r0
 c0321e2:	b1d0      	cbz	r0, c03221a <sst_object_create+0xb6>
        /* Remove new object as object table is not persistent and propagate
         * object table manipulation error.
         */
        (void)sst_flash_fs_file_delete(g_obj_tbl_info.fid);
 c0321e4:	6828      	ldr	r0, [r5, #0]
 c0321e6:	f7ff fc99 	bl	c031b1c <sst_flash_fs_file_delete>
 c0321ea:	f44f 720a 	mov.w	r2, #552	; 0x228
 c0321ee:	2100      	movs	r1, #0
 c0321f0:	4811      	ldr	r0, [pc, #68]	; (c032238 <sst_object_create+0xd4>)
 c0321f2:	f7e5 fbe8 	bl	c0179c6 <memset>
    /* Remove data stored in the object before leaving the function */
    (void)tfm_memset(&g_sst_object, SST_DEFAULT_EMPTY_BUFF_VAL,
                     SST_MAX_OBJECT_SIZE);

    return err;
}
 c0321f6:	4620      	mov	r0, r4
 c0321f8:	b003      	add	sp, #12
 c0321fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (err == PSA_PS_ERROR_UID_NOT_FOUND) {
 c0321fe:	2805      	cmp	r0, #5
 c032200:	d1f3      	bne.n	c0321ea <sst_object_create+0x86>
 c032202:	4b0d      	ldr	r3, [pc, #52]	; (c032238 <sst_object_create+0xd4>)
 c032204:	f44f 720a 	mov.w	r2, #552	; 0x228
 c032208:	4618      	mov	r0, r3
 c03220a:	2100      	movs	r1, #0
 c03220c:	f7e5 fbdb 	bl	c0179c6 <memset>
    uint32_t old_fid = SST_INVALID_FID;
 c032210:	2700      	movs	r7, #0
    obj->header.info.create_flags = create_flags;
 c032212:	e9c0 6b08 	strd	r6, fp, [r0, #32]
        fid_am_reserved = 2;
 c032216:	2302      	movs	r3, #2
 c032218:	e7c3      	b.n	c0321a2 <sst_object_create+0x3e>
    if (old_fid == SST_INVALID_FID) {
 c03221a:	b91f      	cbnz	r7, c032224 <sst_object_create+0xc0>
        err = sst_object_table_delete_old_table();
 c03221c:	f000 fa52 	bl	c0326c4 <sst_object_table_delete_old_table>
        err = sst_remove_old_data(old_fid);
 c032220:	4604      	mov	r4, r0
 c032222:	e7e2      	b.n	c0321ea <sst_object_create+0x86>
 c032224:	4638      	mov	r0, r7
 c032226:	f7ff ff59 	bl	c0320dc <sst_remove_old_data>
 c03222a:	e7f9      	b.n	c032220 <sst_object_create+0xbc>
            err = PSA_PS_ERROR_WRITE_ONCE;
 c03222c:	2401      	movs	r4, #1
 c03222e:	e7dc      	b.n	c0321ea <sst_object_create+0x86>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c032230:	2408      	movs	r4, #8
 c032232:	e7e0      	b.n	c0321f6 <sst_object_create+0x92>
 c032234:	3003c320 	.word	0x3003c320
 c032238:	3003c328 	.word	0x3003c328

0c03223c <sst_object_get_info>:
    return err;
}

psa_ps_status_t sst_object_get_info(psa_ps_uid_t uid, int32_t client_id,
                                    struct psa_ps_info_t *info)
{
 c03223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    psa_ps_status_t err;

    /* Retrieve the object information from the object table if the object
     * exists.
     */
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c03223e:	4f0d      	ldr	r7, [pc, #52]	; (c032274 <sst_object_get_info+0x38>)
{
 c032240:	461e      	mov	r6, r3
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c032242:	463b      	mov	r3, r7
 c032244:	f000 f9f0 	bl	c032628 <sst_object_table_get_obj_tbl_info>
    if (err != PSA_PS_SUCCESS) {
 c032248:	4604      	mov	r4, r0
 c03224a:	b980      	cbnz	r0, c03226e <sst_object_get_info+0x32>
        return err;
    }

#ifdef SST_ENCRYPTION
    err = sst_encrypted_object_read(g_obj_tbl_info.fid, &g_sst_object);
 c03224c:	4d0a      	ldr	r5, [pc, #40]	; (c032278 <sst_object_get_info+0x3c>)
 c03224e:	6838      	ldr	r0, [r7, #0]
 c032250:	4629      	mov	r1, r5
 c032252:	f7ff fa8b 	bl	c03176c <sst_encrypted_object_read>
#else
    err = sst_read_object(READ_HEADER_ONLY);
#endif
    if (err != PSA_PS_SUCCESS) {
 c032256:	4604      	mov	r4, r0
 c032258:	b918      	cbnz	r0, c032262 <sst_object_get_info+0x26>
        goto clear_data_and_return;
    }

    /* Copy SST object info to the PSA PS info struct */
    info->size = g_sst_object.header.info.current_size;
 c03225a:	69eb      	ldr	r3, [r5, #28]
 c03225c:	6033      	str	r3, [r6, #0]
    info->flags = g_sst_object.header.info.create_flags;
 c03225e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 c032260:	6073      	str	r3, [r6, #4]
 c032262:	f44f 720a 	mov.w	r2, #552	; 0x228
 c032266:	2100      	movs	r1, #0
 c032268:	4803      	ldr	r0, [pc, #12]	; (c032278 <sst_object_get_info+0x3c>)
 c03226a:	f7e5 fbac 	bl	c0179c6 <memset>
    /* Remove data stored in the object before leaving the function */
    (void)tfm_memset(&g_sst_object, SST_DEFAULT_EMPTY_BUFF_VAL,
                     SST_MAX_OBJECT_SIZE);

    return err;
}
 c03226e:	4620      	mov	r0, r4
 c032270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c032272:	bf00      	nop
 c032274:	3003c320 	.word	0x3003c320
 c032278:	3003c328 	.word	0x3003c328

0c03227c <sst_object_delete>:

psa_ps_status_t sst_object_delete(psa_ps_uid_t uid, int32_t client_id)
{
 c03227c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    psa_ps_status_t err;

    /* Retrieve the object information from the object table if the object
     * exists.
     */
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c032280:	4d14      	ldr	r5, [pc, #80]	; (c0322d4 <sst_object_delete+0x58>)
{
 c032282:	4680      	mov	r8, r0
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c032284:	462b      	mov	r3, r5
{
 c032286:	4689      	mov	r9, r1
 c032288:	4617      	mov	r7, r2
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c03228a:	f000 f9cd 	bl	c032628 <sst_object_table_get_obj_tbl_info>
    if (err != PSA_PS_SUCCESS) {
 c03228e:	4604      	mov	r4, r0
 c032290:	b9d0      	cbnz	r0, c0322c8 <sst_object_delete+0x4c>
        return err;
    }

#ifdef SST_ENCRYPTION
    err = sst_encrypted_object_read(g_obj_tbl_info.fid, &g_sst_object);
 c032292:	4e11      	ldr	r6, [pc, #68]	; (c0322d8 <sst_object_delete+0x5c>)
 c032294:	6828      	ldr	r0, [r5, #0]
 c032296:	4631      	mov	r1, r6
 c032298:	f7ff fa68 	bl	c03176c <sst_encrypted_object_read>
#else
    err = sst_read_object(READ_HEADER_ONLY);
#endif
    if (err != PSA_PS_SUCCESS) {
 c03229c:	4604      	mov	r4, r0
 c03229e:	b968      	cbnz	r0, c0322bc <sst_object_delete+0x40>
        goto clear_data_and_return;
    }

    /* Check that the write once flag is not set */
    if (g_sst_object.header.info.create_flags & PSA_PS_FLAG_WRITE_ONCE) {
 c0322a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 c0322a2:	07db      	lsls	r3, r3, #31
 c0322a4:	d413      	bmi.n	c0322ce <sst_object_delete+0x52>
    }

    /* Delete object from the table and stores the table in the persistent
     * area.
     */
    err = sst_object_table_delete_object(uid, client_id);
 c0322a6:	463a      	mov	r2, r7
 c0322a8:	4640      	mov	r0, r8
 c0322aa:	4649      	mov	r1, r9
 c0322ac:	f000 f9dc 	bl	c032668 <sst_object_table_delete_object>
    if (err != PSA_PS_SUCCESS) {
 c0322b0:	4604      	mov	r4, r0
 c0322b2:	b918      	cbnz	r0, c0322bc <sst_object_delete+0x40>
        goto clear_data_and_return;
    }

    /* Remove old object table and file */
    err = sst_remove_old_data(g_obj_tbl_info.fid);
 c0322b4:	6828      	ldr	r0, [r5, #0]
 c0322b6:	f7ff ff11 	bl	c0320dc <sst_remove_old_data>
 c0322ba:	4604      	mov	r4, r0
 c0322bc:	f44f 720a 	mov.w	r2, #552	; 0x228
 c0322c0:	2100      	movs	r1, #0
 c0322c2:	4805      	ldr	r0, [pc, #20]	; (c0322d8 <sst_object_delete+0x5c>)
 c0322c4:	f7e5 fb7f 	bl	c0179c6 <memset>
    /* Remove data stored in the object before leaving the function */
    (void)tfm_memset(&g_sst_object, SST_DEFAULT_EMPTY_BUFF_VAL,
                     SST_MAX_OBJECT_SIZE);

    return err;
}
 c0322c8:	4620      	mov	r0, r4
 c0322ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        err = PSA_PS_ERROR_WRITE_ONCE;
 c0322ce:	2401      	movs	r4, #1
 c0322d0:	e7f4      	b.n	c0322bc <sst_object_delete+0x40>
 c0322d2:	bf00      	nop
 c0322d4:	3003c320 	.word	0x3003c320
 c0322d8:	3003c328 	.word	0x3003c328

0c0322dc <sst_system_wipe_all>:

psa_ps_status_t sst_system_wipe_all(void)
{
 c0322dc:	b508      	push	{r3, lr}
     * This could be asynchronous to normal system operation
     * and state of the sst system lock is unknown. Hence
     * this function doesn't block on the lock and directly
     * moves to erasing the flash instead.
     */
    err = sst_flash_fs_wipe_all();
 c0322de:	f7ff fb3f 	bl	c031960 <sst_flash_fs_wipe_all>
    if (err != PSA_PS_SUCCESS) {
 c0322e2:	b930      	cbnz	r0, c0322f2 <sst_system_wipe_all+0x16>
        return err;
    }

    err = sst_flash_fs_prepare();
 c0322e4:	f7ff fb3a 	bl	c03195c <sst_flash_fs_prepare>
    if (err != PSA_PS_SUCCESS) {
 c0322e8:	b918      	cbnz	r0, c0322f2 <sst_system_wipe_all+0x16>
        return err;
    }

    return sst_object_table_create();
}
 c0322ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return sst_object_table_create();
 c0322ee:	f000 b87b 	b.w	c0323e8 <sst_object_table_create>
}
 c0322f2:	bd08      	pop	{r3, pc}

0c0322f4 <sst_get_object_entry_idx>:
 *         in the table. Otherwise, it returns PSA_PS_ERROR_UID_NOT_FOUND.
 */
static psa_ps_status_t sst_get_object_entry_idx(psa_ps_uid_t uid,
                                                int32_t client_id,
                                                uint32_t *idx)
{
 c0322f4:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 c0322f8:	4689      	mov	r9, r1
 c0322fa:	4680      	mov	r8, r0
    uint32_t i;
    struct sst_obj_table_t *p_table = &sst_obj_table_ctx.obj_table;

    for (i = 0; i < SST_OBJ_TABLE_ENTRIES; i++) {
 c0322fc:	2100      	movs	r1, #0
 c0322fe:	4c0a      	ldr	r4, [pc, #40]	; (c032328 <sst_get_object_entry_idx+0x34>)
        if (p_table->obj_db[i].uid == uid
 c032300:	e9d4 670c 	ldrd	r6, r7, [r4, #48]	; 0x30
 c032304:	454f      	cmp	r7, r9
 c032306:	bf08      	it	eq
 c032308:	4546      	cmpeq	r6, r8
 c03230a:	d106      	bne.n	c03231a <sst_get_object_entry_idx+0x26>
            && p_table->obj_db[i].client_id == client_id) {
 c03230c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 c03230e:	4290      	cmp	r0, r2
 c032310:	d103      	bne.n	c03231a <sst_get_object_entry_idx+0x26>
            *idx = i;
            return PSA_PS_SUCCESS;
 c032312:	2000      	movs	r0, #0
            *idx = i;
 c032314:	6019      	str	r1, [r3, #0]
        }
    }

    return PSA_PS_ERROR_UID_NOT_FOUND;
}
 c032316:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    for (i = 0; i < SST_OBJ_TABLE_ENTRIES; i++) {
 c03231a:	3101      	adds	r1, #1
 c03231c:	290b      	cmp	r1, #11
 c03231e:	f104 0420 	add.w	r4, r4, #32
 c032322:	d1ed      	bne.n	c032300 <sst_get_object_entry_idx+0xc>
    return PSA_PS_ERROR_UID_NOT_FOUND;
 c032324:	2005      	movs	r0, #5
 c032326:	e7f6      	b.n	c032316 <sst_get_object_entry_idx+0x22>
 c032328:	3003c560 	.word	0x3003c560

0c03232c <sst_table_delete_entry>:
 *
 * \param[in] idx  Entry index to delete
 *
 */
static void sst_table_delete_entry(uint32_t idx)
{
 c03232c:	b430      	push	{r4, r5}
    struct sst_obj_table_t *p_table = &sst_obj_table_ctx.obj_table;

    p_table->obj_db[idx].uid = TFM_SST_INVALID_UID;
    p_table->obj_db[idx].client_id = 0;
 c03232e:	2100      	movs	r1, #0
    p_table->obj_db[idx].uid = TFM_SST_INVALID_UID;
 c032330:	2400      	movs	r4, #0
 c032332:	2500      	movs	r5, #0
 c032334:	4b06      	ldr	r3, [pc, #24]	; (c032350 <sst_table_delete_entry+0x24>)
 c032336:	eb03 1240 	add.w	r2, r3, r0, lsl #5

#ifdef SST_ENCRYPTION
    (void)tfm_memset(p_table->obj_db[idx].tag, SST_DEFAULT_EMPTY_BUFF_VAL,
 c03233a:	3001      	adds	r0, #1
    p_table->obj_db[idx].uid = TFM_SST_INVALID_UID;
 c03233c:	e9c2 450c 	strd	r4, r5, [r2, #48]	; 0x30
                     SST_OBJECTS_TABLE_ENTRY_SIZE);
#else
    p_table->obj_db[idx].version = 0;
#endif
}
 c032340:	bc30      	pop	{r4, r5}
    p_table->obj_db[idx].client_id = 0;
 c032342:	6391      	str	r1, [r2, #56]	; 0x38
 c032344:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 c032348:	2220      	movs	r2, #32
 c03234a:	f7e5 bb3c 	b.w	c0179c6 <memset>
 c03234e:	bf00      	nop
 c032350:	3003c560 	.word	0x3003c560

0c032354 <sst_object_table_set_crypto_key>:
{
 c032354:	b508      	push	{r3, lr}
    err = sst_crypto_getkey(SST_KEY_LEN_BYTES, sst_key);
 c032356:	4906      	ldr	r1, [pc, #24]	; (c032370 <sst_object_table_set_crypto_key+0x1c>)
 c032358:	2010      	movs	r0, #16
 c03235a:	f7ff f8e5 	bl	c031528 <sst_crypto_getkey>
    if (err != PSA_PS_SUCCESS) {
 c03235e:	b928      	cbnz	r0, c03236c <sst_object_table_set_crypto_key+0x18>
}
 c032360:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = sst_crypto_setkey(SST_KEY_LEN_BYTES, sst_key);
 c032364:	4902      	ldr	r1, [pc, #8]	; (c032370 <sst_object_table_set_crypto_key+0x1c>)
 c032366:	2010      	movs	r0, #16
 c032368:	f7ff b8ea 	b.w	c031540 <sst_crypto_setkey>
}
 c03236c:	bd08      	pop	{r3, pc}
 c03236e:	bf00      	nop
 c032370:	3003c550 	.word	0x3003c550

0c032374 <sst_object_table_save_table.constprop.2>:
static psa_ps_status_t sst_object_table_save_table(
 c032374:	b570      	push	{r4, r5, r6, lr}
    obj_table->swap_count++;
 c032376:	4c1a      	ldr	r4, [pc, #104]	; (c0323e0 <sst_object_table_save_table.constprop.2+0x6c>)
 c032378:	7f63      	ldrb	r3, [r4, #29]
 c03237a:	3301      	adds	r3, #1
 c03237c:	b2db      	uxtb	r3, r3
    if (obj_table->swap_count == SST_FLASH_DEFAULT_VAL) {
 c03237e:	2bff      	cmp	r3, #255	; 0xff
        obj_table->swap_count = 0;
 c032380:	bf08      	it	eq
 c032382:	2300      	moveq	r3, #0
 c032384:	7763      	strb	r3, [r4, #29]
    err = sst_object_table_set_crypto_key();
 c032386:	f7ff ffe5 	bl	c032354 <sst_object_table_set_crypto_key>
    if (err != PSA_PS_SUCCESS) {
 c03238a:	4605      	mov	r5, r0
 c03238c:	b968      	cbnz	r0, c0323aa <sst_object_table_save_table.constprop.2+0x36>
    sst_crypto_get_iv(crypto);
 c03238e:	4814      	ldr	r0, [pc, #80]	; (c0323e0 <sst_object_table_save_table.constprop.2+0x6c>)
 c032390:	f7ff f918 	bl	c0315c4 <sst_crypto_get_iv>
    return sst_crypto_generate_auth_tag(crypto,
 c032394:	4913      	ldr	r1, [pc, #76]	; (c0323e4 <sst_object_table_save_table.constprop.2+0x70>)
 c032396:	f44f 72b2 	mov.w	r2, #356	; 0x164
 c03239a:	f1a1 001c 	sub.w	r0, r1, #28
 c03239e:	f7ff f98d 	bl	c0316bc <sst_crypto_generate_auth_tag>
    if (err != PSA_PS_SUCCESS) {
 c0323a2:	4605      	mov	r5, r0
 c0323a4:	b118      	cbz	r0, c0323ae <sst_object_table_save_table.constprop.2+0x3a>
        (void)sst_crypto_destroykey();
 c0323a6:	f7ff f8f5 	bl	c031594 <sst_crypto_destroykey>
}
 c0323aa:	4628      	mov	r0, r5
 c0323ac:	bd70      	pop	{r4, r5, r6, pc}
    err = sst_crypto_destroykey();
 c0323ae:	f7ff f8f1 	bl	c031594 <sst_crypto_destroykey>
    if (err != PSA_PS_SUCCESS) {
 c0323b2:	4605      	mov	r5, r0
 c0323b4:	2800      	cmp	r0, #0
 c0323b6:	d1f8      	bne.n	c0323aa <sst_object_table_save_table.constprop.2+0x36>
    err = sst_flash_fs_file_create(obj_table_id,
 c0323b8:	f44f 72c0 	mov.w	r2, #384	; 0x180
    uint32_t obj_table_id = SST_TABLE_FS_ID(sst_obj_table_ctx.scratch_table);
 c0323bc:	f894 6181 	ldrb.w	r6, [r4, #385]	; 0x181
    err = sst_flash_fs_file_create(obj_table_id,
 c0323c0:	4b07      	ldr	r3, [pc, #28]	; (c0323e0 <sst_object_table_save_table.constprop.2+0x6c>)
 c0323c2:	4611      	mov	r1, r2
 c0323c4:	1c70      	adds	r0, r6, #1
 c0323c6:	f7ff fad8 	bl	c03197a <sst_flash_fs_file_create>
    if (err != PSA_PS_SUCCESS) {
 c0323ca:	4605      	mov	r5, r0
 c0323cc:	2800      	cmp	r0, #0
 c0323ce:	d1ec      	bne.n	c0323aa <sst_object_table_save_table.constprop.2+0x36>
    sst_obj_table_ctx.scratch_table = sst_obj_table_ctx.active_table;
 c0323d0:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    sst_obj_table_ctx.active_table = swap_table_idxs;
 c0323d4:	f884 6180 	strb.w	r6, [r4, #384]	; 0x180
    sst_obj_table_ctx.scratch_table = sst_obj_table_ctx.active_table;
 c0323d8:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
 c0323dc:	e7e5      	b.n	c0323aa <sst_object_table_save_table.constprop.2+0x36>
 c0323de:	bf00      	nop
 c0323e0:	3003c560 	.word	0x3003c560
 c0323e4:	3003c57c 	.word	0x3003c57c

0c0323e8 <sst_object_table_create>:

psa_ps_status_t sst_object_table_create(void)
{
 c0323e8:	b508      	push	{r3, lr}
 c0323ea:	4b07      	ldr	r3, [pc, #28]	; (c032408 <sst_object_table_create+0x20>)
 c0323ec:	f44f 72c4 	mov.w	r2, #392	; 0x188
 c0323f0:	4618      	mov	r0, r3
 c0323f2:	2100      	movs	r1, #0
 c0323f4:	f7e5 fae7 	bl	c0179c6 <memset>
                     sizeof(struct sst_obj_table_ctx_t));

    /* Invert the other in the context as sst_object_table_save_table will
     * use the scratch index to create and store the current table.
     */
    sst_obj_table_ctx.active_table  = SST_OBJ_TABLE_IDX_1;
 c0323f8:	2201      	movs	r2, #1
 c0323fa:	f880 2180 	strb.w	r2, [r0, #384]	; 0x180
    sst_obj_table_ctx.scratch_table = SST_OBJ_TABLE_IDX_0;

    p_table->version = SST_OBJECT_SYSTEM_VERSION;
 c0323fe:	7702      	strb	r2, [r0, #28]

    /* Save object table contents */
    return sst_object_table_save_table(p_table);
}
 c032400:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return sst_object_table_save_table(p_table);
 c032404:	f7ff bfb6 	b.w	c032374 <sst_object_table_save_table.constprop.2>
 c032408:	3003c560 	.word	0x3003c560

0c03240c <sst_object_table_init>:

psa_ps_status_t sst_object_table_init(uint8_t *obj_data)
{
 c03240c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 c032410:	4607      	mov	r7, r0
    err = sst_flash_fs_file_read(SST_TABLE_FS_ID(SST_OBJ_TABLE_IDX_0),
 c032412:	4b3e      	ldr	r3, [pc, #248]	; (c03250c <sst_object_table_init+0x100>)
 c032414:	2200      	movs	r2, #0
 c032416:	f44f 71c0 	mov.w	r1, #384	; 0x180
 c03241a:	2001      	movs	r0, #1
 c03241c:	f7ff fbda 	bl	c031bd4 <sst_flash_fs_file_read>
    err = sst_flash_fs_file_read(SST_TABLE_FS_ID(SST_OBJ_TABLE_IDX_1),
 c032420:	463b      	mov	r3, r7
 c032422:	2200      	movs	r2, #0
 c032424:	f44f 71c0 	mov.w	r1, #384	; 0x180
    err = sst_flash_fs_file_read(SST_TABLE_FS_ID(SST_OBJ_TABLE_IDX_0),
 c032428:	4605      	mov	r5, r0
    err = sst_flash_fs_file_read(SST_TABLE_FS_ID(SST_OBJ_TABLE_IDX_1),
 c03242a:	2002      	movs	r0, #2
 c03242c:	f7ff fbd2 	bl	c031bd4 <sst_flash_fs_file_read>
 c032430:	4606      	mov	r6, r0
    /* Read table from the file system */
    sst_object_table_fs_read_table(&init_ctx);

#ifdef SST_ENCRYPTION
    /* Set object table key */
    err = sst_object_table_set_crypto_key();
 c032432:	f7ff ff8f 	bl	c032354 <sst_object_table_set_crypto_key>
 c032436:	4c35      	ldr	r4, [pc, #212]	; (c03250c <sst_object_table_init+0x100>)
    if (err != PSA_PS_SUCCESS) {
 c032438:	4680      	mov	r8, r0
 c03243a:	2800      	cmp	r0, #0
 c03243c:	d149      	bne.n	c0324d2 <sst_object_table_init+0xc6>
    if (init_ctx->table_state[SST_OBJ_TABLE_IDX_0] != SST_OBJ_TABLE_INVALID) {
 c03243e:	b93d      	cbnz	r5, c032450 <sst_object_table_init+0x44>
        err = sst_crypto_authenticate(crypto,
 c032440:	f44f 72b2 	mov.w	r2, #356	; 0x164
 c032444:	f104 011c 	add.w	r1, r4, #28
 c032448:	4620      	mov	r0, r4
 c03244a:	f7ff f95b 	bl	c031704 <sst_crypto_authenticate>
        if (err != PSA_PS_SUCCESS) {
 c03244e:	b368      	cbz	r0, c0324ac <sst_object_table_init+0xa0>
            init_ctx->table_state[SST_OBJ_TABLE_IDX_0] = SST_OBJ_TABLE_INVALID;
 c032450:	2501      	movs	r5, #1
    if (init_ctx->table_state[SST_OBJ_TABLE_IDX_1] != SST_OBJ_TABLE_INVALID) {
 c032452:	b93e      	cbnz	r6, c032464 <sst_object_table_init+0x58>
        err = sst_crypto_authenticate(crypto,
 c032454:	f44f 72b2 	mov.w	r2, #356	; 0x164
 c032458:	f107 011c 	add.w	r1, r7, #28
 c03245c:	4638      	mov	r0, r7
 c03245e:	f7ff f951 	bl	c031704 <sst_crypto_authenticate>
        if (err != PSA_PS_SUCCESS) {
 c032462:	b100      	cbz	r0, c032466 <sst_object_table_init+0x5a>
            init_ctx->table_state[SST_OBJ_TABLE_IDX_1] = SST_OBJ_TABLE_INVALID;
 c032464:	2601      	movs	r6, #1
    }
#else
    sst_object_table_authenticate_ctx_tables(&init_ctx);
#endif /* SST_ROLLBACK_PROTECTION */

    err = sst_crypto_destroykey();
 c032466:	f7ff f895 	bl	c031594 <sst_crypto_destroykey>
    if (err != PSA_PS_SUCCESS) {
 c03246a:	4680      	mov	r8, r0
 c03246c:	bb88      	cbnz	r0, c0324d2 <sst_object_table_init+0xc6>
    if (SST_OBJECT_SYSTEM_VERSION !=
 c03246e:	7f23      	ldrb	r3, [r4, #28]
    if ((init_ctx->table_state[SST_OBJ_TABLE_IDX_0] == SST_OBJ_TABLE_INVALID)
 c032470:	f240 1101 	movw	r1, #257	; 0x101
        init_ctx->table_state[SST_OBJ_TABLE_IDX_0] = SST_OBJ_TABLE_INVALID;
 c032474:	2b01      	cmp	r3, #1
    if (SST_OBJECT_SYSTEM_VERSION !=
 c032476:	7f3b      	ldrb	r3, [r7, #28]
        init_ctx->table_state[SST_OBJ_TABLE_IDX_0] = SST_OBJ_TABLE_INVALID;
 c032478:	bf18      	it	ne
 c03247a:	2501      	movne	r5, #1
        init_ctx->table_state[SST_OBJ_TABLE_IDX_1] = SST_OBJ_TABLE_INVALID;
 c03247c:	2b01      	cmp	r3, #1
 c03247e:	bf18      	it	ne
 c032480:	2601      	movne	r6, #1
         && (init_ctx->table_state[SST_OBJ_TABLE_IDX_1] ==
 c032482:	f88d 500c 	strb.w	r5, [sp, #12]
 c032486:	f88d 600d 	strb.w	r6, [sp, #13]
    if ((init_ctx->table_state[SST_OBJ_TABLE_IDX_0] == SST_OBJ_TABLE_INVALID)
 c03248a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    uint8_t table0_swap_count =
 c03248e:	7f62      	ldrb	r2, [r4, #29]
    if ((init_ctx->table_state[SST_OBJ_TABLE_IDX_0] == SST_OBJ_TABLE_INVALID)
 c032490:	4288      	cmp	r0, r1
    uint8_t table1_swap_count =
 c032492:	7f7b      	ldrb	r3, [r7, #29]
    if ((init_ctx->table_state[SST_OBJ_TABLE_IDX_0] == SST_OBJ_TABLE_INVALID)
 c032494:	d035      	beq.n	c032502 <sst_object_table_init+0xf6>
    } else if (init_ctx->table_state[SST_OBJ_TABLE_IDX_0] ==
 c032496:	2d01      	cmp	r5, #1
 c032498:	d10a      	bne.n	c0324b0 <sst_object_table_init+0xa4>
          sst_obj_table_ctx.active_table  = SST_OBJ_TABLE_IDX_1;
 c03249a:	f8a4 5180 	strh.w	r5, [r4, #384]	; 0x180
    return (memcpy(dest, src, num));
 c03249e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 c0324a2:	4639      	mov	r1, r7
 c0324a4:	4819      	ldr	r0, [pc, #100]	; (c03250c <sst_object_table_init+0x100>)
 c0324a6:	f7e5 fa6a 	bl	c01797e <memcpy>
 c0324aa:	e007      	b.n	c0324bc <sst_object_table_init+0xb0>
        if (err != PSA_PS_SUCCESS) {
 c0324ac:	4605      	mov	r5, r0
 c0324ae:	e7d0      	b.n	c032452 <sst_object_table_init+0x46>
    } else if (init_ctx->table_state[SST_OBJ_TABLE_IDX_1] ==
 c0324b0:	2e01      	cmp	r6, #1
 c0324b2:	d112      	bne.n	c0324da <sst_object_table_init+0xce>
        sst_obj_table_ctx.active_table  = SST_OBJ_TABLE_IDX_0;
 c0324b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 c0324b8:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
    if (err != PSA_PS_SUCCESS) {
        return err;
    }

    /* Remove the old object table file */
    err = sst_flash_fs_file_delete(SST_TABLE_FS_ID(
 c0324bc:	f894 0181 	ldrb.w	r0, [r4, #385]	; 0x181
 c0324c0:	3001      	adds	r0, #1
 c0324c2:	f7ff fb2b 	bl	c031b1c <sst_flash_fs_file_delete>
                                              sst_obj_table_ctx.scratch_table));
    if (err != PSA_PS_SUCCESS && err != PSA_PS_ERROR_UID_NOT_FOUND) {
 c0324c6:	b108      	cbz	r0, c0324cc <sst_object_table_init+0xc0>
 c0324c8:	2805      	cmp	r0, #5
 c0324ca:	d11d      	bne.n	c032508 <sst_object_table_init+0xfc>
        return err;
    }
#endif /* SST_ROLLBACK_PROTECTION */

#ifdef SST_ENCRYPTION
    sst_crypto_set_iv(&sst_obj_table_ctx.obj_table.crypto);
 c0324cc:	480f      	ldr	r0, [pc, #60]	; (c03250c <sst_object_table_init+0x100>)
 c0324ce:	f7ff f86d 	bl	c0315ac <sst_crypto_set_iv>
#endif

    return PSA_PS_SUCCESS;
}
 c0324d2:	4640      	mov	r0, r8
 c0324d4:	b004      	add	sp, #16
 c0324d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((table1_swap_count == 0) && (table0_swap_count != 1)) {
 c0324da:	b94b      	cbnz	r3, c0324f0 <sst_object_table_init+0xe4>
 c0324dc:	2a01      	cmp	r2, #1
 c0324de:	d00a      	beq.n	c0324f6 <sst_object_table_init+0xea>
        sst_obj_table_ctx.active_table  = SST_OBJ_TABLE_IDX_1;
 c0324e0:	2301      	movs	r3, #1
        sst_obj_table_ctx.active_table  = SST_OBJ_TABLE_IDX_0;
 c0324e2:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
    if (sst_obj_table_ctx.active_table == SST_OBJ_TABLE_IDX_1) {
 c0324e6:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
 c0324ea:	2b01      	cmp	r3, #1
 c0324ec:	d1e6      	bne.n	c0324bc <sst_object_table_init+0xb0>
 c0324ee:	e7d6      	b.n	c03249e <sst_object_table_init+0x92>
    } else if ((table0_swap_count == 0) && (table1_swap_count != 1)) {
 c0324f0:	b922      	cbnz	r2, c0324fc <sst_object_table_init+0xf0>
 c0324f2:	2b01      	cmp	r3, #1
 c0324f4:	d0f4      	beq.n	c0324e0 <sst_object_table_init+0xd4>
        sst_obj_table_ctx.active_table  = SST_OBJ_TABLE_IDX_0;
 c0324f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 c0324fa:	e7f2      	b.n	c0324e2 <sst_object_table_init+0xd6>
    } else if (table1_swap_count > table0_swap_count) {
 c0324fc:	429a      	cmp	r2, r3
 c0324fe:	d3ef      	bcc.n	c0324e0 <sst_object_table_init+0xd4>
 c032500:	e7f9      	b.n	c0324f6 <sst_object_table_init+0xea>
        return PSA_PS_ERROR_OPERATION_FAILED;
 c032502:	f04f 080b 	mov.w	r8, #11
 c032506:	e7e4      	b.n	c0324d2 <sst_object_table_init+0xc6>
 c032508:	4680      	mov	r8, r0
 c03250a:	e7e2      	b.n	c0324d2 <sst_object_table_init+0xc6>
 c03250c:	3003c560 	.word	0x3003c560

0c032510 <sst_object_table_get_free_fid>:
    return sst_get_object_entry_idx(uid, client_id, &idx);
}

psa_ps_status_t sst_object_table_get_free_fid(uint32_t fid_num,
                                              uint32_t *p_fid)
{
 c032510:	b570      	push	{r4, r5, r6, lr}
 c032512:	460d      	mov	r5, r1
    if (idx_num == 0) {
 c032514:	b318      	cbz	r0, c03255e <sst_object_table_get_free_fid+0x4e>
    uint32_t last_free = 0;
 c032516:	2400      	movs	r4, #0
    for (i = 0; i < SST_OBJ_TABLE_ENTRIES && idx_num > 0; i++) {
 c032518:	4621      	mov	r1, r4
 c03251a:	4e12      	ldr	r6, [pc, #72]	; (c032564 <sst_object_table_get_free_fid+0x54>)
        if (p_table->obj_db[i].uid == TFM_SST_INVALID_UID) {
 c03251c:	e9d6 230c 	ldrd	r2, r3, [r6, #48]	; 0x30
 c032520:	4313      	orrs	r3, r2
            idx_num--;
 c032522:	bf08      	it	eq
 c032524:	460c      	moveq	r4, r1
    for (i = 0; i < SST_OBJ_TABLE_ENTRIES && idx_num > 0; i++) {
 c032526:	f101 0101 	add.w	r1, r1, #1
            idx_num--;
 c03252a:	bf08      	it	eq
 c03252c:	f100 30ff 	addeq.w	r0, r0, #4294967295
    for (i = 0; i < SST_OBJ_TABLE_ENTRIES && idx_num > 0; i++) {
 c032530:	290b      	cmp	r1, #11
 c032532:	d00a      	beq.n	c03254a <sst_object_table_get_free_fid+0x3a>
 c032534:	3620      	adds	r6, #32
 c032536:	2800      	cmp	r0, #0
 c032538:	d1f0      	bne.n	c03251c <sst_object_table_get_free_fid+0xc>
    }

    /* There first two file IDs are reserved for the active table
     * and scratch table files.
     */
    fid = SST_OBJECT_FS_ID(idx);
 c03253a:	3403      	adds	r4, #3

    /* Check if there is a file in the persistent area with that ID. That
     * can happened when the system is rebooted (e.g. power cut, ...) in the
     * middle of a create, write or delete operation.
     */
    if (sst_flash_fs_file_exist(fid) == PSA_PS_SUCCESS) {
 c03253c:	4620      	mov	r0, r4
 c03253e:	f7ff fa11 	bl	c031964 <sst_flash_fs_file_exist>
 c032542:	b130      	cbz	r0, c032552 <sst_object_table_get_free_fid+0x42>
        }
    }

    *p_fid = fid;

    return PSA_PS_SUCCESS;
 c032544:	2000      	movs	r0, #0
    *p_fid = fid;
 c032546:	602c      	str	r4, [r5, #0]
}
 c032548:	bd70      	pop	{r4, r5, r6, pc}
    if (idx_num != 0) {
 c03254a:	2800      	cmp	r0, #0
 c03254c:	d0f5      	beq.n	c03253a <sst_object_table_get_free_fid+0x2a>
        return PSA_PS_ERROR_INSUFFICIENT_SPACE;
 c03254e:	2003      	movs	r0, #3
 c032550:	e7fa      	b.n	c032548 <sst_object_table_get_free_fid+0x38>
        err = sst_flash_fs_file_delete(fid);
 c032552:	4620      	mov	r0, r4
 c032554:	f7ff fae2 	bl	c031b1c <sst_flash_fs_file_delete>
        if (err != PSA_PS_SUCCESS) {
 c032558:	2800      	cmp	r0, #0
 c03255a:	d0f3      	beq.n	c032544 <sst_object_table_get_free_fid+0x34>
 c03255c:	e7f4      	b.n	c032548 <sst_object_table_get_free_fid+0x38>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c03255e:	2008      	movs	r0, #8
 c032560:	e7f2      	b.n	c032548 <sst_object_table_get_free_fid+0x38>
 c032562:	bf00      	nop
 c032564:	3003c560 	.word	0x3003c560

0c032568 <sst_object_table_set_obj_tbl_info>:

psa_ps_status_t sst_object_table_set_obj_tbl_info(psa_ps_uid_t uid,
                                                  int32_t client_id,
                                const struct sst_obj_table_info_t *obj_tbl_info)
{
 c032568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c03256c:	4680      	mov	r8, r0
 c03256e:	4689      	mov	r9, r1
 c032570:	4693      	mov	fp, r2
    psa_ps_status_t err;
    uint32_t idx = 0;
    uint32_t backup_idx = 0;
 c032572:	2100      	movs	r1, #0
{
 c032574:	b08b      	sub	sp, #44	; 0x2c
    struct sst_obj_table_entry_t backup_entry = {
 c032576:	2220      	movs	r2, #32
 c032578:	a802      	add	r0, sp, #8
{
 c03257a:	461d      	mov	r5, r3
    uint32_t backup_idx = 0;
 c03257c:	9101      	str	r1, [sp, #4]
    struct sst_obj_table_entry_t backup_entry = {
 c03257e:	f7e5 fa22 	bl	c0179c6 <memset>
        .uid = TFM_SST_INVALID_UID,
        .client_id = 0,
    };
    struct sst_obj_table_t *p_table = &sst_obj_table_ctx.obj_table;

    err = sst_get_object_entry_idx(uid, client_id, &backup_idx);
 c032582:	ab01      	add	r3, sp, #4
 c032584:	465a      	mov	r2, fp
 c032586:	4640      	mov	r0, r8
 c032588:	4649      	mov	r1, r9
 c03258a:	f7ff feb3 	bl	c0322f4 <sst_get_object_entry_idx>
 c03258e:	4c25      	ldr	r4, [pc, #148]	; (c032624 <sst_object_table_set_obj_tbl_info+0xbc>)
    if (err == PSA_PS_SUCCESS) {
 c032590:	2800      	cmp	r0, #0
 c032592:	d144      	bne.n	c03261e <sst_object_table_set_obj_tbl_info+0xb6>
        /* If an entry exists for this UID, it creates a backup copy in case
         * an error happens while updating the new table in the filesystem.
         */
        (void)tfm_memcpy(&backup_entry, &p_table->obj_db[backup_idx],
 c032594:	f8dd c004 	ldr.w	ip, [sp, #4]
 c032598:	ae02      	add	r6, sp, #8
 c03259a:	f10c 0e01 	add.w	lr, ip, #1
 c03259e:	eb04 1e4e 	add.w	lr, r4, lr, lsl #5
 c0325a2:	4677      	mov	r7, lr
 c0325a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 c0325a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 c0325a8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 c0325ac:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 c0325b0:	e9de 6704 	ldrd	r6, r7, [lr, #16]
                         SST_OBJECTS_TABLE_ENTRY_SIZE);

        /* Deletes old object information if it exist in the table */
        sst_table_delete_entry(backup_idx);
 c0325b4:	4660      	mov	r0, ip
 c0325b6:	f7ff feb9 	bl	c03232c <sst_table_delete_entry>
    }

    idx = SST_OBJECT_FS_ID_TO_IDX(obj_tbl_info->fid);
 c0325ba:	682b      	ldr	r3, [r5, #0]
 c0325bc:	f1a3 0a03 	sub.w	sl, r3, #3
    p_table->obj_db[idx].uid = uid;
 c0325c0:	eb04 124a 	add.w	r2, r4, sl, lsl #5
 c0325c4:	e9c2 890c 	strd	r8, r9, [r2, #48]	; 0x30
    p_table->obj_db[idx].client_id = client_id;
 c0325c8:	f8c2 b038 	str.w	fp, [r2, #56]	; 0x38
 c0325cc:	686a      	ldr	r2, [r5, #4]

    /* Add new object information */
#ifdef SST_ENCRYPTION
    (void)tfm_memcpy(p_table->obj_db[idx].tag, obj_tbl_info->tag,
 c0325ce:	3b02      	subs	r3, #2
 c0325d0:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 c0325d4:	f102 0c10 	add.w	ip, r2, #16
 c0325d8:	461d      	mov	r5, r3
 c0325da:	6810      	ldr	r0, [r2, #0]
 c0325dc:	6851      	ldr	r1, [r2, #4]
 c0325de:	3208      	adds	r2, #8
 c0325e0:	c503      	stmia	r5!, {r0, r1}
 c0325e2:	4562      	cmp	r2, ip
 c0325e4:	462b      	mov	r3, r5
 c0325e6:	d1f7      	bne.n	c0325d8 <sst_object_table_set_obj_tbl_info+0x70>
                     SST_TAG_LEN_BYTES);
#else
    p_table->obj_db[idx].version = obj_tbl_info->version;
#endif

    err = sst_object_table_save_table(p_table);
 c0325e8:	f7ff fec4 	bl	c032374 <sst_object_table_save_table.constprop.2>
    if (err != PSA_PS_SUCCESS) {
 c0325ec:	4680      	mov	r8, r0
 c0325ee:	b190      	cbz	r0, c032616 <sst_object_table_set_obj_tbl_info+0xae>
        if (backup_entry.uid != TFM_SST_INVALID_UID) {
 c0325f0:	ea56 0307 	orrs.w	r3, r6, r7
 c0325f4:	d00c      	beq.n	c032610 <sst_object_table_set_obj_tbl_info+0xa8>
 c0325f6:	9b01      	ldr	r3, [sp, #4]
 c0325f8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 c0325fc:	3301      	adds	r3, #1
 c0325fe:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 c032602:	ad02      	add	r5, sp, #8
 c032604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 c032606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 c032608:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 c03260c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            /* Rollback the change in the table */
            (void)tfm_memcpy(&p_table->obj_db[backup_idx], &backup_entry,
                             SST_OBJECTS_TABLE_ENTRY_SIZE);
        }

        sst_table_delete_entry(idx);
 c032610:	4650      	mov	r0, sl
 c032612:	f7ff fe8b 	bl	c03232c <sst_table_delete_entry>
    }

    return err;
}
 c032616:	4640      	mov	r0, r8
 c032618:	b00b      	add	sp, #44	; 0x2c
 c03261a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct sst_obj_table_entry_t backup_entry = {
 c03261e:	2600      	movs	r6, #0
 c032620:	2700      	movs	r7, #0
 c032622:	e7ca      	b.n	c0325ba <sst_object_table_set_obj_tbl_info+0x52>
 c032624:	3003c560 	.word	0x3003c560

0c032628 <sst_object_table_get_obj_tbl_info>:

psa_ps_status_t sst_object_table_get_obj_tbl_info(psa_ps_uid_t uid,
                                                  int32_t client_id,
                                      struct sst_obj_table_info_t *obj_tbl_info)
{
 c032628:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c03262a:	461c      	mov	r4, r3
    psa_ps_status_t err;
    uint32_t idx;
    struct sst_obj_table_t *p_table = &sst_obj_table_ctx.obj_table;

    err = sst_get_object_entry_idx(uid, client_id, &idx);
 c03262c:	ab01      	add	r3, sp, #4
 c03262e:	f7ff fe61 	bl	c0322f4 <sst_get_object_entry_idx>
    if (err != PSA_PS_SUCCESS) {
 c032632:	4605      	mov	r5, r0
 c032634:	b990      	cbnz	r0, c03265c <sst_object_table_get_obj_tbl_info+0x34>
        return err;
    }

    obj_tbl_info->fid = SST_OBJECT_FS_ID(idx);
 c032636:	9b01      	ldr	r3, [sp, #4]
 c032638:	1cda      	adds	r2, r3, #3
 c03263a:	6022      	str	r2, [r4, #0]

#ifdef SST_ENCRYPTION
    (void)tfm_memcpy(obj_tbl_info->tag, p_table->obj_db[idx].tag,
 c03263c:	1c5a      	adds	r2, r3, #1
 c03263e:	4b09      	ldr	r3, [pc, #36]	; (c032664 <sst_object_table_get_obj_tbl_info+0x3c>)
 c032640:	6864      	ldr	r4, [r4, #4]
 c032642:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 c032646:	f103 0610 	add.w	r6, r3, #16
 c03264a:	461a      	mov	r2, r3
 c03264c:	ca03      	ldmia	r2!, {r0, r1}
 c03264e:	42b2      	cmp	r2, r6
 c032650:	6020      	str	r0, [r4, #0]
 c032652:	6061      	str	r1, [r4, #4]
 c032654:	4613      	mov	r3, r2
 c032656:	f104 0408 	add.w	r4, r4, #8
 c03265a:	d1f6      	bne.n	c03264a <sst_object_table_get_obj_tbl_info+0x22>
#else
    obj_tbl_info->version = p_table->obj_db[idx].version;
#endif

    return PSA_PS_SUCCESS;
}
 c03265c:	4628      	mov	r0, r5
 c03265e:	b002      	add	sp, #8
 c032660:	bd70      	pop	{r4, r5, r6, pc}
 c032662:	bf00      	nop
 c032664:	3003c560 	.word	0x3003c560

0c032668 <sst_object_table_delete_object>:

psa_ps_status_t sst_object_table_delete_object(psa_ps_uid_t uid,
                                               int32_t client_id)
{
 c032668:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t backup_idx = 0;
 c03266a:	2400      	movs	r4, #0
{
 c03266c:	b08b      	sub	sp, #44	; 0x2c
    uint32_t backup_idx = 0;
 c03266e:	ab0a      	add	r3, sp, #40	; 0x28
 c032670:	f843 4d24 	str.w	r4, [r3, #-36]!
    struct sst_obj_table_t *p_table = &sst_obj_table_ctx.obj_table;

    /* Create a backup copy in case an error happens while updating the new
     * table in the filesystem.
     */
    err = sst_get_object_entry_idx(uid, client_id, &backup_idx);
 c032674:	f7ff fe3e 	bl	c0322f4 <sst_get_object_entry_idx>
    if (err != PSA_PS_SUCCESS) {
 c032678:	4606      	mov	r6, r0
 c03267a:	b9e8      	cbnz	r0, c0326b8 <sst_object_table_delete_object+0x50>
         * key.
         */
        return err;
    }

    (void)tfm_memcpy(&backup_entry, &p_table->obj_db[backup_idx],
 c03267c:	9f01      	ldr	r7, [sp, #4]
 c03267e:	4c10      	ldr	r4, [pc, #64]	; (c0326c0 <sst_object_table_delete_object+0x58>)
 c032680:	1c7d      	adds	r5, r7, #1
 c032682:	ae02      	add	r6, sp, #8
 c032684:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 c032688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 c03268a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 c03268c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 c032690:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
                     SST_OBJECTS_TABLE_ENTRY_SIZE);

    sst_table_delete_entry(backup_idx);
 c032694:	4638      	mov	r0, r7
 c032696:	f7ff fe49 	bl	c03232c <sst_table_delete_entry>

    err = sst_object_table_save_table(p_table);
 c03269a:	f7ff fe6b 	bl	c032374 <sst_object_table_save_table.constprop.2>
    if (err != PSA_PS_SUCCESS) {
 c03269e:	4606      	mov	r6, r0
 c0326a0:	b150      	cbz	r0, c0326b8 <sst_object_table_delete_object+0x50>
 c0326a2:	9b01      	ldr	r3, [sp, #4]
 c0326a4:	ad02      	add	r5, sp, #8
 c0326a6:	3301      	adds	r3, #1
 c0326a8:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 c0326ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 c0326ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 c0326b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 c0326b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       (void)tfm_memcpy(&p_table->obj_db[backup_idx], &backup_entry,
                        SST_OBJECTS_TABLE_ENTRY_SIZE);
    }

    return err;
}
 c0326b8:	4630      	mov	r0, r6
 c0326ba:	b00b      	add	sp, #44	; 0x2c
 c0326bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c0326be:	bf00      	nop
 c0326c0:	3003c560 	.word	0x3003c560

0c0326c4 <sst_object_table_delete_old_table>:

psa_ps_status_t sst_object_table_delete_old_table(void)
{
    uint32_t table_id = SST_TABLE_FS_ID(sst_obj_table_ctx.scratch_table);
 c0326c4:	4b02      	ldr	r3, [pc, #8]	; (c0326d0 <sst_object_table_delete_old_table+0xc>)
 c0326c6:	f893 0181 	ldrb.w	r0, [r3, #385]	; 0x181

    return sst_flash_fs_file_delete(table_id);
 c0326ca:	3001      	adds	r0, #1
 c0326cc:	f7ff ba26 	b.w	c031b1c <sst_flash_fs_file_delete>
 c0326d0:	3003c560 	.word	0x3003c560

0c0326d4 <sst_utils_check_contained_in>:
psa_ps_status_t sst_utils_check_contained_in(uint32_t superset_size,
                                             uint32_t subset_offset,
                                             uint32_t subset_size)
{
    /* Check that subset_offset is valid */
    if (subset_offset > superset_size) {
 c0326d4:	4281      	cmp	r1, r0
 c0326d6:	d805      	bhi.n	c0326e4 <sst_utils_check_contained_in+0x10>

    /* Check that subset_offset + subset_size fits in superset_size.
     * The previous check passed, so we know that subset_offset <= superset_size
     * and so the right hand side of the inequality cannot underflow.
     */
    if (subset_size > (superset_size - subset_offset)) {
 c0326d8:	1a40      	subs	r0, r0, r1
        return PSA_PS_ERROR_INCORRECT_SIZE;
    }

    return PSA_PS_SUCCESS;
 c0326da:	4290      	cmp	r0, r2
 c0326dc:	bf34      	ite	cc
 c0326de:	2006      	movcc	r0, #6
 c0326e0:	2000      	movcs	r0, #0
 c0326e2:	4770      	bx	lr
        return PSA_PS_ERROR_OFFSET_INVALID;
 c0326e4:	2007      	movs	r0, #7
}
 c0326e6:	4770      	bx	lr

0c0326e8 <sst_utils_validate_fid>:

psa_ps_status_t sst_utils_validate_fid(uint32_t fid)
{
    if (fid == SST_INVALID_FID) {
 c0326e8:	2800      	cmp	r0, #0
        return PSA_PS_ERROR_UID_NOT_FOUND;
    }

    return PSA_PS_SUCCESS;
}
 c0326ea:	bf0c      	ite	eq
 c0326ec:	2005      	moveq	r0, #5
 c0326ee:	2000      	movne	r0, #0
 c0326f0:	4770      	bx	lr
	...

0c0326f4 <t_cose_crypto_hash_start>:
/*
 * See documentation in t_cose_crypto.h
 */
enum t_cose_err_t t_cose_crypto_hash_start(struct t_cose_crypto_hash *hash_ctx,
                                           int32_t cose_hash_alg_id)
{
 c0326f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
     * than just the single uint32_t, then this code has to change.
     *
     * The status member of t_cose_crypto_hash is used to hold a
     * psa_status_t error code.
     */
    psa_hash_operation_t psa_hash = PSA_HASH_OPERATION_INIT;
 c0326f6:	2500      	movs	r5, #0

    /* Map the algorithm ID */
    psa_alg = cose_hash_alg_id_to_psa(cose_hash_alg_id);

    /* Actually do the hash set up */
    hash_ctx->status = psa_hash_setup(&psa_hash, psa_alg);
 c0326f8:	4a10      	ldr	r2, [pc, #64]	; (c03273c <t_cose_crypto_hash_start+0x48>)
 c0326fa:	4b11      	ldr	r3, [pc, #68]	; (c032740 <t_cose_crypto_hash_start+0x4c>)
 c0326fc:	4e11      	ldr	r6, [pc, #68]	; (c032744 <t_cose_crypto_hash_start+0x50>)
{
 c0326fe:	4604      	mov	r4, r0
    psa_hash_operation_t psa_hash = PSA_HASH_OPERATION_INIT;
 c032700:	a802      	add	r0, sp, #8
    hash_ctx->status = psa_hash_setup(&psa_hash, psa_alg);
 c032702:	42b1      	cmp	r1, r6
 c032704:	bf0c      	ite	eq
 c032706:	4611      	moveq	r1, r2
 c032708:	4619      	movne	r1, r3
    psa_hash_operation_t psa_hash = PSA_HASH_OPERATION_INIT;
 c03270a:	f840 5d04 	str.w	r5, [r0, #-4]!
    hash_ctx->status = psa_hash_setup(&psa_hash, psa_alg);
 c03270e:	f7e8 fa02 	bl	c01ab16 <psa_hash_setup>
 c032712:	4602      	mov	r2, r0
 c032714:	17c3      	asrs	r3, r0, #31
 c032716:	e9c4 2302 	strd	r2, r3, [r4, #8]

    /* Copy the PSA handle back into the context */
    hash_ctx->context.handle = psa_hash.handle;
 c03271a:	9b01      	ldr	r3, [sp, #4]
    switch (status) {
 c03271c:	f110 0f86 	cmn.w	r0, #134	; 0x86
    hash_ctx->context.handle = psa_hash.handle;
 c032720:	e9c4 3500 	strd	r3, r5, [r4]
    switch (status) {
 c032724:	d007      	beq.n	c032736 <t_cose_crypto_hash_start+0x42>
 c032726:	b120      	cbz	r0, c032732 <t_cose_crypto_hash_start+0x3e>
        return T_COSE_ERR_HASH_GENERAL_FAIL;
 c032728:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
 c03272c:	bf0c      	ite	eq
 c03272e:	2005      	moveq	r0, #5
 c032730:	2004      	movne	r0, #4

    /* Map errors and return */
    return psa_status_to_t_cose_error((psa_status_t)hash_ctx->status);
}
 c032732:	b002      	add	sp, #8
 c032734:	bd70      	pop	{r4, r5, r6, pc}
        return T_COSE_ERR_UNSUPPORTED_HASH;
 c032736:	2003      	movs	r0, #3
 c032738:	e7fb      	b.n	c032732 <t_cose_crypto_hash_start+0x3e>
 c03273a:	bf00      	nop
 c03273c:	01000009 	.word	0x01000009
 c032740:	01000002 	.word	0x01000002
 c032744:	fffee6c0 	.word	0xfffee6c0

0c032748 <t_cose_crypto_hash_update>:
/*
 * See documentation in t_cose_crypto.h
 */
void t_cose_crypto_hash_update(struct t_cose_crypto_hash *hash_ctx,
                               struct q_useful_buf_c data_to_hash)
{
 c032748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 c03274a:	466b      	mov	r3, sp
 c03274c:	e883 0006 	stmia.w	r3, {r1, r2}
    /* See t_cose_crypto_hash_start() for context handling details */
    psa_hash_operation_t psa_hash;

    /* Copy the PSA handle out of the generic context */
    psa_hash.handle = (uint32_t)hash_ctx->context.handle;
 c032750:	6803      	ldr	r3, [r0, #0]
{
 c032752:	4604      	mov	r4, r0
    psa_hash.handle = (uint32_t)hash_ctx->context.handle;
 c032754:	9303      	str	r3, [sp, #12]

    if(hash_ctx->status != PSA_SUCCESS) {
 c032756:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 c03275a:	4313      	orrs	r3, r2
 c03275c:	d10b      	bne.n	c032776 <t_cose_crypto_hash_update+0x2e>
        /* In error state. Nothing to do. */
        return;
    }

    if(data_to_hash.ptr == NULL) {
 c03275e:	b151      	cbz	r1, c032776 <t_cose_crypto_hash_update+0x2e>
         */
        return;
    }

    /* Actually hash the data */
    hash_ctx->status = psa_hash_update(&psa_hash,
 c032760:	9a01      	ldr	r2, [sp, #4]
 c032762:	a803      	add	r0, sp, #12
 c032764:	f7e8 fa04 	bl	c01ab70 <psa_hash_update>
                                       data_to_hash.ptr,
                                       data_to_hash.len);

    /* Copy the PSA handle back into the context. */
    hash_ctx->context.handle = psa_hash.handle;
 c032768:	9b03      	ldr	r3, [sp, #12]
    hash_ctx->status = psa_hash_update(&psa_hash,
 c03276a:	17c1      	asrs	r1, r0, #31
    hash_ctx->context.handle = psa_hash.handle;
 c03276c:	6023      	str	r3, [r4, #0]
 c03276e:	2300      	movs	r3, #0
    hash_ctx->status = psa_hash_update(&psa_hash,
 c032770:	e9c4 0102 	strd	r0, r1, [r4, #8]
    hash_ctx->context.handle = psa_hash.handle;
 c032774:	6063      	str	r3, [r4, #4]
}
 c032776:	b004      	add	sp, #16
 c032778:	bd10      	pop	{r4, pc}

0c03277a <t_cose_crypto_hash_finish>:
 */
enum t_cose_err_t
t_cose_crypto_hash_finish(struct t_cose_crypto_hash *hash_ctx,
                          struct q_useful_buf buffer_to_hold_result,
                          struct q_useful_buf_c *hash_result)
{
 c03277a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 c03277c:	4604      	mov	r4, r0
 c03277e:	4668      	mov	r0, sp
 c032780:	461d      	mov	r5, r3
    /* See t_cose_crypto_hash_start() for context handling details */
    psa_hash_operation_t psa_hash;

    /* Copy the PSA handle out of the generic context */
    psa_hash.handle = (uint32_t)hash_ctx->context.handle;
 c032782:	6823      	ldr	r3, [r4, #0]
{
 c032784:	e880 0006 	stmia.w	r0, {r1, r2}
    psa_hash.handle = (uint32_t)hash_ctx->context.handle;
 c032788:	9303      	str	r3, [sp, #12]

    if(hash_ctx->status != PSA_SUCCESS) {
 c03278a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 c03278e:	4313      	orrs	r3, r2
 c032790:	460e      	mov	r6, r1
 c032792:	d10c      	bne.n	c0327ae <t_cose_crypto_hash_finish+0x34>
        /* Error state. Nothing to do */
        goto Done;
    }

    /* Actually finish up the hash */
    hash_ctx->status = psa_hash_finish(&psa_hash,
 c032794:	1d2b      	adds	r3, r5, #4
 c032796:	9a01      	ldr	r2, [sp, #4]
 c032798:	a803      	add	r0, sp, #12
 c03279a:	f7e8 fa19 	bl	c01abd0 <psa_hash_finish>
                                       &(hash_result->len));

    hash_result->ptr = buffer_to_hold_result.ptr;

    /* Copy the PSA handle back into the context. */
    hash_ctx->context.handle = psa_hash.handle;
 c03279e:	9b03      	ldr	r3, [sp, #12]
    hash_ctx->status = psa_hash_finish(&psa_hash,
 c0327a0:	17c1      	asrs	r1, r0, #31
 c0327a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
    hash_result->ptr = buffer_to_hold_result.ptr;
 c0327a6:	602e      	str	r6, [r5, #0]
    hash_ctx->context.handle = psa_hash.handle;
 c0327a8:	6023      	str	r3, [r4, #0]
 c0327aa:	2300      	movs	r3, #0
 c0327ac:	6063      	str	r3, [r4, #4]
    switch (status) {
 c0327ae:	68a0      	ldr	r0, [r4, #8]
 c0327b0:	f110 0f86 	cmn.w	r0, #134	; 0x86
 c0327b4:	d007      	beq.n	c0327c6 <t_cose_crypto_hash_finish+0x4c>
 c0327b6:	b120      	cbz	r0, c0327c2 <t_cose_crypto_hash_finish+0x48>
 c0327b8:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
        return T_COSE_ERR_HASH_GENERAL_FAIL;
 c0327bc:	bf0c      	ite	eq
 c0327be:	2005      	moveq	r0, #5
 c0327c0:	2004      	movne	r0, #4

Done:
    return psa_status_to_t_cose_error((psa_status_t)hash_ctx->status);
}
 c0327c2:	b004      	add	sp, #16
 c0327c4:	bd70      	pop	{r4, r5, r6, pc}
        return T_COSE_ERR_UNSUPPORTED_HASH;
 c0327c6:	2003      	movs	r0, #3
 c0327c8:	e7fb      	b.n	c0327c2 <t_cose_crypto_hash_finish+0x48>
	...

0c0327cc <t_cose_crypto_pub_key_sign>:
t_cose_crypto_pub_key_sign(int32_t cose_alg_id,
                           int32_t key_select,
                           struct q_useful_buf_c hash_to_sign,
                           struct q_useful_buf signature_buffer,
                           struct q_useful_buf_c *signature)
{
 c0327cc:	b570      	push	{r4, r5, r6, lr}
 c0327ce:	b088      	sub	sp, #32
 c0327d0:	a904      	add	r1, sp, #16
 c0327d2:	e9dd 640d 	ldrd	r6, r4, [sp, #52]	; 0x34
    const size_t sig_size = t_cose_signature_size(cose_alg_id);
    psa_key_handle_t private_key;

    ARG_UNUSED(key_select);

    if (sig_size > signature_buffer.len) {
 c0327d6:	2e3f      	cmp	r6, #63	; 0x3f
{
 c0327d8:	e881 000c 	stmia.w	r1, {r2, r3}
    if (sig_size > signature_buffer.len) {
 c0327dc:	d91e      	bls.n	c03281c <t_cose_crypto_pub_key_sign+0x50>

    /* FixMe: Registration of key(s) should not be done by attestation service.
     *        Later Crypto service is going to get the attestation key from
     *        platform layer.
     */
    attest_ret = attest_register_initial_attestation_private_key(&private_key);
 c0327de:	f10d 001e 	add.w	r0, sp, #30
 c0327e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c0327e4:	f7fc fcea 	bl	c02f1bc <attest_register_initial_attestation_private_key>
    if (attest_ret != PSA_ATTEST_ERR_SUCCESS) {
 c0327e8:	b990      	cbnz	r0, c032810 <t_cose_crypto_pub_key_sign+0x44>
        return T_COSE_ERR_FAIL;
    }

    psa_ret = psa_asymmetric_sign(private_key,
 c0327ea:	1d23      	adds	r3, r4, #4
 c0327ec:	e9cd 6301 	strd	r6, r3, [sp, #4]
 c0327f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c0327f4:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 c0327f8:	9500      	str	r5, [sp, #0]
 c0327fa:	4909      	ldr	r1, [pc, #36]	; (c032820 <t_cose_crypto_pub_key_sign+0x54>)
 c0327fc:	f7e8 fc6e 	bl	c01b0dc <psa_asymmetric_sign>
                                  hash_to_sign.len,
                                  signature_buffer.ptr, /* Sig buf */
                                  signature_buffer.len, /* Sig buf size */
                                  &(signature->len));   /* Sig length */

    if (psa_ret != PSA_SUCCESS) {
 c032800:	b950      	cbnz	r0, c032818 <t_cose_crypto_pub_key_sign+0x4c>
        cose_ret = T_COSE_ERR_FAIL;
    } else {
        signature->ptr = signature_buffer.ptr;
 c032802:	6025      	str	r5, [r4, #0]
    enum t_cose_err_t cose_ret = T_COSE_SUCCESS;
 c032804:	4604      	mov	r4, r0
    }

    attest_ret = attest_unregister_initial_attestation_private_key(private_key);
 c032806:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 c03280a:	f7fc fd23 	bl	c02f254 <attest_unregister_initial_attestation_private_key>
    if (attest_ret != PSA_ATTEST_ERR_SUCCESS) {
 c03280e:	b100      	cbz	r0, c032812 <t_cose_crypto_pub_key_sign+0x46>
        cose_ret =  T_COSE_ERR_FAIL;
 c032810:	2410      	movs	r4, #16
    }

    return cose_ret;
}
 c032812:	4620      	mov	r0, r4
 c032814:	b008      	add	sp, #32
 c032816:	bd70      	pop	{r4, r5, r6, pc}
        cose_ret = T_COSE_ERR_FAIL;
 c032818:	2410      	movs	r4, #16
 c03281a:	e7f4      	b.n	c032806 <t_cose_crypto_pub_key_sign+0x3a>
        return T_COSE_ERR_SIG_BUFFER_SIZE;
 c03281c:	2406      	movs	r4, #6
 c03281e:	e7f8      	b.n	c032812 <t_cose_crypto_pub_key_sign+0x46>
 c032820:	10060009 	.word	0x10060009

0c032824 <t_cose_sign1_init>:
enum t_cose_err_t t_cose_sign1_init(struct t_cose_sign1_ctx *me,
                                    bool short_circuit_sign,
                                    int32_t cose_alg_id,
                                    int32_t key_select,
                                    QCBOREncodeContext *cbor_encode_ctx)
{
 c032824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c032828:	4604      	mov	r4, r0
 c03282a:	b0aa      	sub	sp, #168	; 0xa8
    struct q_useful_buf_c         kid = NULLUsefulBufC;


    /* Check the cose_alg_id now by getting the hash alg as an early
     error check even though it is not used until later. */
    hash_alg = hash_alg_id_from_sig_alg_id(cose_alg_id);
 c03282c:	4610      	mov	r0, r2
{
 c03282e:	4698      	mov	r8, r3
 c032830:	460d      	mov	r5, r1
 c032832:	4617      	mov	r7, r2
 c032834:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    hash_alg = hash_alg_id_from_sig_alg_id(cose_alg_id);
 c032836:	f000 f8a3 	bl	c032980 <hash_alg_id_from_sig_alg_id>
    if(hash_alg == INT32_MAX) {
 c03283a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 c03283e:	4298      	cmp	r0, r3
 c032840:	d050      	beq.n	c0328e4 <t_cose_sign1_init+0xc0>
    }
#endif

    /* Get started with the tagged array that holds the four parts of
     a cose single signed message */
    QCBOREncode_AddTag(cbor_encode_ctx, CBOR_TAG_COSE_SIGN1);
 c032842:	2212      	movs	r2, #18
 c032844:	2300      	movs	r3, #0
    me->short_circuit_sign  = short_circuit_sign;
 c032846:	f884 5020 	strb.w	r5, [r4, #32]
    QCBOREncode_AddTag(cbor_encode_ctx, CBOR_TAG_COSE_SIGN1);
 c03284a:	4630      	mov	r0, r6
    me->key_select          = key_select;
 c03284c:	e9c4 7806 	strd	r7, r8, [r4, #24]
    me->cbor_encode_ctx     = cbor_encode_ctx;
 c032850:	6266      	str	r6, [r4, #36]	; 0x24
    QCBOREncode_AddTag(cbor_encode_ctx, CBOR_TAG_COSE_SIGN1);
 c032852:	f7fe fac3 	bl	c030ddc <QCBOREncode_AddTag>
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_ARRAY);
 c032856:	2104      	movs	r1, #4
 c032858:	4630      	mov	r0, r6
 c03285a:	f7fe fac2 	bl	c030de2 <QCBOREncode_OpenMapOrArray>
 c03285e:	2310      	movs	r3, #16
    QCBOREncode_Init(&cbor_encode_ctx, buffer_for_header);
 c032860:	eb0d 0503 	add.w	r5, sp, r3
 c032864:	9301      	str	r3, [sp, #4]
 c032866:	466b      	mov	r3, sp
 c032868:	9400      	str	r4, [sp, #0]
 c03286a:	e893 0006 	ldmia.w	r3, {r1, r2}
 c03286e:	4628      	mov	r0, r5
 c032870:	f7fe fa5f 	bl	c030d32 <QCBOREncode_Init>
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP);
 c032874:	2105      	movs	r1, #5
 c032876:	4628      	mov	r0, r5
 c032878:	f7fe fab3 	bl	c030de2 <QCBOREncode_OpenMapOrArray>
   QCBOREncode_AddInt64(pCtx, nLabel);
 c03287c:	2201      	movs	r2, #1
 c03287e:	2300      	movs	r3, #0
 c032880:	4628      	mov	r0, r5
 c032882:	f7fe fa6c 	bl	c030d5e <QCBOREncode_AddInt64>
   QCBOREncode_AddInt64(pCtx, uNum);
 c032886:	463a      	mov	r2, r7
 c032888:	17fb      	asrs	r3, r7, #31
 c03288a:	4628      	mov	r0, r5
 c03288c:	f7fe fa67 	bl	c030d5e <QCBOREncode_AddInt64>
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP, NULL);
 c032890:	2105      	movs	r1, #5
 c032892:	4628      	mov	r0, r5
 c032894:	2200      	movs	r2, #0
 c032896:	f7fe fac4 	bl	c030e22 <QCBOREncode_CloseMapOrArray>
    qcbor_result = QCBOREncode_Finish(&cbor_encode_ctx, &protected_headers);
 c03289a:	a902      	add	r1, sp, #8
 c03289c:	4628      	mov	r0, r5
 c03289e:	f7fe fafe 	bl	c030e9e <QCBOREncode_Finish>
    if(qcbor_result == QCBOR_SUCCESS) {
 c0328a2:	b9e0      	cbnz	r0, c0328de <t_cose_sign1_init+0xba>
        return_value = protected_headers;
 c0328a4:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
    QCBOREncode_OpenArray(cbor_encode_ctx);

    /* The protected headers, which are added as a wrapped bstr  */
    buffer_for_protected_header =
        Q_USEFUL_BUF_FROM_BYTE_ARRAY(me->buffer_for_protected_headers);
    me->protected_headers = make_protected_header(cose_alg_id,
 c0328a8:	e9c4 0304 	strd	r0, r3, [r4, #16]
                                                  buffer_for_protected_header);
    if(q_useful_buf_c_is_null(me->protected_headers)) {
 c0328ac:	b1a0      	cbz	r0, c0328d8 <t_cose_sign1_init+0xb4>
 c0328ae:	3410      	adds	r4, #16
 c0328b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 c0328b4:	e885 0003 	stmia.w	r5, {r0, r1}
   QCBOREncode_AddBuffer(pCtx, CBOR_MAJOR_TYPE_BYTE_STRING, Bytes);
 c0328b8:	2102      	movs	r1, #2
 c0328ba:	e895 000c 	ldmia.w	r5, {r2, r3}
 c0328be:	4630      	mov	r0, r6
 c0328c0:	f7fe fa68 	bl	c030d94 <QCBOREncode_AddBuffer>
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP);
 c0328c4:	2105      	movs	r1, #5
 c0328c6:	4630      	mov	r0, r6
 c0328c8:	f7fe fa8b 	bl	c030de2 <QCBOREncode_OpenMapOrArray>
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP, NULL);
 c0328cc:	4630      	mov	r0, r6
 c0328ce:	2200      	movs	r2, #0
 c0328d0:	2105      	movs	r1, #5
 c0328d2:	f7fe faa6 	bl	c030e22 <QCBOREncode_CloseMapOrArray>
     here as the CBOR encoder tracks it internally. */

    return_value = T_COSE_SUCCESS;

Done:
    return return_value;
 c0328d6:	2000      	movs	r0, #0
}
 c0328d8:	b02a      	add	sp, #168	; 0xa8
 c0328da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return_value = NULL_Q_USEFUL_BUF_C;
 c0328de:	2300      	movs	r3, #0
 c0328e0:	4618      	mov	r0, r3
 c0328e2:	e7e1      	b.n	c0328a8 <t_cose_sign1_init+0x84>
        return T_COSE_ERR_UNSUPPORTED_SIGNING_ALG;
 c0328e4:	2001      	movs	r0, #1
 c0328e6:	e7f7      	b.n	c0328d8 <t_cose_sign1_init+0xb4>

0c0328e8 <t_cose_sign1_finish>:
/*
 * Public function. See t_cose_sign1_sign.h
 */
enum t_cose_err_t t_cose_sign1_finish(struct t_cose_sign1_ctx *me,
                                      struct q_useful_buf_c signed_payload)
{
 c0328e8:	b570      	push	{r4, r5, r6, lr}
 c0328ea:	b0aa      	sub	sp, #168	; 0xa8
 c0328ec:	4604      	mov	r4, r0
    struct q_useful_buf_c        signature;
    /* Buffer for the actual signature */
    Q_USEFUL_BUF_MAKE_STACK_UB(  buffer_for_signature,
                                     T_COSE_MAX_EC_SIG_SIZE);
    /* Buffer for the tbs hash. Only big enough for SHA256 */
    Q_USEFUL_BUF_MAKE_STACK_UB(  buffer_for_tbs_hash,
 c0328ee:	a812      	add	r0, sp, #72	; 0x48
 c0328f0:	900e      	str	r0, [sp, #56]	; 0x38
 c0328f2:	2020      	movs	r0, #32
{
 c0328f4:	ab06      	add	r3, sp, #24
 c0328f6:	e883 0006 	stmia.w	r3, {r1, r2}
    Q_USEFUL_BUF_MAKE_STACK_UB(  buffer_for_signature,
 c0328fa:	a91a      	add	r1, sp, #104	; 0x68
 c0328fc:	910c      	str	r1, [sp, #48]	; 0x30
 c0328fe:	2140      	movs	r1, #64	; 0x40
    Q_USEFUL_BUF_MAKE_STACK_UB(  buffer_for_tbs_hash,
 c032900:	900f      	str	r0, [sp, #60]	; 0x3c
}


static inline int QCBOREncode_IsBufferNULL(QCBOREncodeContext *pCtx)
{
   return UsefulOutBuf_IsBufferNULL(&(pCtx->OutBuf));
 c032902:	6a60      	ldr	r0, [r4, #36]	; 0x24
    Q_USEFUL_BUF_MAKE_STACK_UB(  buffer_for_signature,
 c032904:	910d      	str	r1, [sp, #52]	; 0x34
                                     T_COSE_CRYPTO_SHA256_SIZE);

    if (QCBOREncode_IsBufferNULL(me->cbor_encode_ctx)) {
 c032906:	6800      	ldr	r0, [r0, #0]
 c032908:	b998      	cbnz	r0, c032932 <t_cose_sign1_finish+0x4a>
         * signature size.
         */
        return_value  = T_COSE_SUCCESS;

        signature.ptr = NULL;
        signature.len = t_cose_signature_size(me->cose_algorithm_id);
 c03290a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 c03290e:	ab10      	add	r3, sp, #64	; 0x40
 c032910:	aa0a      	add	r2, sp, #40	; 0x28
 c032912:	e892 0003 	ldmia.w	r2, {r0, r1}
 c032916:	e883 0003 	stmia.w	r3, {r0, r1}
   QCBOREncode_AddBuffer(pCtx, CBOR_MAJOR_TYPE_BYTE_STRING, Bytes);
 c03291a:	2102      	movs	r1, #2
 c03291c:	cb0c      	ldmia	r3, {r2, r3}
 c03291e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 c032920:	f7fe fa38 	bl	c030d94 <QCBOREncode_AddBuffer>
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_ARRAY, NULL);
 c032924:	6a60      	ldr	r0, [r4, #36]	; 0x24
 c032926:	2200      	movs	r2, #0
 c032928:	2104      	movs	r1, #4
 c03292a:	f7fe fa7a 	bl	c030e22 <QCBOREncode_CloseMapOrArray>
 c03292e:	2000      	movs	r0, #0
 c032930:	e023      	b.n	c03297a <t_cose_sign1_finish+0x92>
         * are the protected headers, the payload that getting signed, the
         * cose signature alg from which the hash alg is determined. The
         * cose_algorithm_id was checked in t_cose_sign1_init() so it
         * doesn't need to be checked here.
         */
        return_value = create_tbs_hash(me->cose_algorithm_id,
 c032932:	e893 0003 	ldmia.w	r3, {r0, r1}
 c032936:	2300      	movs	r3, #0
 c032938:	ae03      	add	r6, sp, #12
 c03293a:	e886 0005 	stmia.w	r6, {r0, r2}
 c03293e:	9302      	str	r3, [sp, #8]
 c032940:	f104 0310 	add.w	r3, r4, #16
 c032944:	e893 0003 	ldmia.w	r3, {r0, r1}
 c032948:	e88d 0003 	stmia.w	sp, {r0, r1}
 c03294c:	ad08      	add	r5, sp, #32
 c03294e:	aa0e      	add	r2, sp, #56	; 0x38
 c032950:	462b      	mov	r3, r5
 c032952:	ca06      	ldmia	r2, {r1, r2}
 c032954:	69a0      	ldr	r0, [r4, #24]
 c032956:	f000 f81b 	bl	c032990 <create_tbs_hash>
                                       buffer_for_tbs_hash,
                                       &tbs_hash,
                                       me->protected_headers,
                                       T_COSE_TBS_PAYLOAD_IS_BSTR_WRAPPED,
                                       signed_payload);
        if (return_value) {
 c03295a:	b970      	cbnz	r0, c03297a <t_cose_sign1_finish+0x92>
                                              tbs_hash,
                                              buffer_for_signature,
                                              &signature);
        } else {
#endif
            return_value = t_cose_crypto_pub_key_sign(me->cose_algorithm_id,
 c03295c:	ab0a      	add	r3, sp, #40	; 0x28
 c03295e:	9302      	str	r3, [sp, #8]
 c032960:	ab0c      	add	r3, sp, #48	; 0x30
 c032962:	e893 0003 	ldmia.w	r3, {r0, r1}
 c032966:	e88d 0003 	stmia.w	sp, {r0, r1}
 c03296a:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 c03296e:	e895 000c 	ldmia.w	r5, {r2, r3}
 c032972:	f7ff ff2b 	bl	c0327cc <t_cose_crypto_pub_key_sign>
                                                      buffer_for_signature,
                                                      &signature);
#ifdef INCLUDE_TEST_CODE_AND_KEY_ID /* Remove them from release build */
        }
#endif
        if (return_value) {
 c032976:	2800      	cmp	r0, #0
 c032978:	d0c9      	beq.n	c03290e <t_cose_sign1_finish+0x26>
    /* CBOR encoding errors are tracked in the CBOR encoding context
     and handled in the layer above this */

Done:
    return return_value;
}
 c03297a:	b02a      	add	sp, #168	; 0xa8
 c03297c:	bd70      	pop	{r4, r5, r6, pc}
	...

0c032980 <hash_alg_id_from_sig_alg_id>:
{
    /* If other hashes, particularly those that output bigger hashes
     * are added here, various other parts of this code have to be
     * changed to have larger buffers.
     */
    switch(cose_sig_alg_id) {
 c032980:	3007      	adds	r0, #7
        return COSE_ALG_SHA256_PROPRIETARY;

    default:
        return INT32_MAX;
    }
}
 c032982:	4802      	ldr	r0, [pc, #8]	; (c03298c <hash_alg_id_from_sig_alg_id+0xc>)
 c032984:	bf18      	it	ne
 c032986:	f06f 4000 	mvnne.w	r0, #2147483648	; 0x80000000
 c03298a:	4770      	bx	lr
 c03298c:	fffee6c0 	.word	0xfffee6c0

0c032990 <create_tbs_hash>:
                                  struct q_useful_buf buffer_for_hash,
                                  struct q_useful_buf_c *hash,
                                  struct q_useful_buf_c protected_headers,
                                  enum t_cose_tbs_hash_mode_t payload_mode,
                                  struct q_useful_buf_c payload)
{
 c032990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c032994:	b0c6      	sub	sp, #280	; 0x118
 c032996:	466d      	mov	r5, sp
 c032998:	e885 0006 	stmia.w	r5, {r1, r2}
     * t_cose_crypto_hash implementation. It sometimes
     * includes the full hashing context.
     */
    enum t_cose_err_t           return_value;
    QCBOREncodeContext          cbor_encode_ctx;
    UsefulBuf_MAKE_STACK_UB(    buffer_for_TBS_first_part, T_COSE_SIZE_OF_TBS);
 c03299c:	aa16      	add	r2, sp, #88	; 0x58
 c03299e:	9202      	str	r2, [sp, #8]
 c0329a0:	2228      	movs	r2, #40	; 0x28
{
 c0329a2:	461e      	mov	r6, r3
    UsefulBuf_MAKE_STACK_UB(    buffer_for_TBS_first_part, T_COSE_SIZE_OF_TBS);
 c0329a4:	9203      	str	r2, [sp, #12]
 c0329a6:	ab02      	add	r3, sp, #8
    struct t_cose_crypto_hash   hash_ctx;
    int32_t                     hash_alg_id;
    size_t                      bytes_to_omit;

    /* This builds the CBOR-format to-be-signed bytes */
    QCBOREncode_Init(&cbor_encode_ctx, buffer_for_TBS_first_part);
 c0329a8:	e893 0006 	ldmia.w	r3, {r1, r2}
{
 c0329ac:	4607      	mov	r7, r0
    QCBOREncode_Init(&cbor_encode_ctx, buffer_for_TBS_first_part);
 c0329ae:	a820      	add	r0, sp, #128	; 0x80
{
 c0329b0:	f89d 8138 	ldrb.w	r8, [sp, #312]	; 0x138
    QCBOREncode_Init(&cbor_encode_ctx, buffer_for_TBS_first_part);
 c0329b4:	f7fe f9bd 	bl	c030d32 <QCBOREncode_Init>
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_ARRAY);
 c0329b8:	2104      	movs	r1, #4
 c0329ba:	a820      	add	r0, sp, #128	; 0x80
 c0329bc:	f7fe fa11 	bl	c030de2 <QCBOREncode_OpenMapOrArray>
 c0329c0:	4b34      	ldr	r3, [pc, #208]	; (c032a94 <create_tbs_hash+0x104>)
 c0329c2:	2400      	movs	r4, #0
 c0329c4:	930c      	str	r3, [sp, #48]	; 0x30
 c0329c6:	230a      	movs	r3, #10
 c0329c8:	930d      	str	r3, [sp, #52]	; 0x34
   QCBOREncode_AddBuffer(pCtx, CBOR_MAJOR_TYPE_TEXT_STRING, Text);
 c0329ca:	ab0c      	add	r3, sp, #48	; 0x30
 c0329cc:	cb0c      	ldmia	r3, {r2, r3}
 c0329ce:	2103      	movs	r1, #3
 c0329d0:	a820      	add	r0, sp, #128	; 0x80
 c0329d2:	f7fe f9df 	bl	c030d94 <QCBOREncode_AddBuffer>
 c0329d6:	ab0a      	add	r3, sp, #40	; 0x28
 c0329d8:	aa4c      	add	r2, sp, #304	; 0x130
 c0329da:	e892 0003 	ldmia.w	r2, {r0, r1}
 c0329de:	e883 0003 	stmia.w	r3, {r0, r1}
   QCBOREncode_AddBuffer(pCtx, CBOR_MAJOR_TYPE_BYTE_STRING, Bytes);
 c0329e2:	2102      	movs	r1, #2
 c0329e4:	cb0c      	ldmia	r3, {r2, r3}
 c0329e6:	a820      	add	r0, sp, #128	; 0x80
 c0329e8:	f7fe f9d4 	bl	c030d94 <QCBOREncode_AddBuffer>
 c0329ec:	e9cd 4408 	strd	r4, r4, [sp, #32]
 c0329f0:	ab08      	add	r3, sp, #32
 c0329f2:	cb0c      	ldmia	r3, {r2, r3}
 c0329f4:	2102      	movs	r1, #2
 c0329f6:	a820      	add	r0, sp, #128	; 0x80
 c0329f8:	f7fe f9cc 	bl	c030d94 <QCBOREncode_AddBuffer>

    /* external_aad. There is none so an empty bstr */
    QCBOREncode_AddBytes(&cbor_encode_ctx, NULL_Q_USEFUL_BUF_C);

    /* The short fake payload. */
    if(payload_mode == T_COSE_TBS_PAYLOAD_IS_BSTR_WRAPPED) {
 c0329fc:	f1b8 0f00 	cmp.w	r8, #0
 c032a00:	d139      	bne.n	c032a76 <create_tbs_hash+0xe6>
 c032a02:	e9cd 880e 	strd	r8, r8, [sp, #56]	; 0x38
 c032a06:	ab0e      	add	r3, sp, #56	; 0x38
 c032a08:	cb0c      	ldmia	r3, {r2, r3}
 c032a0a:	2102      	movs	r1, #2
 c032a0c:	a820      	add	r0, sp, #128	; 0x80
 c032a0e:	f7fe f9c1 	bl	c030d94 <QCBOREncode_AddBuffer>
        /* Fake payload is just an empty bstr. It is here only
         * to make the array count right. It must be ommitted
         * in the actual hashing below
         */
        bytes_to_omit = 1;
 c032a12:	2401      	movs	r4, #1
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_ARRAY, NULL);
 c032a14:	2104      	movs	r1, #4
 c032a16:	a820      	add	r0, sp, #128	; 0x80
 c032a18:	2200      	movs	r2, #0
 c032a1a:	f7fe fa02 	bl	c030e22 <QCBOREncode_CloseMapOrArray>

    /* Close of the array */
    QCBOREncode_CloseArray(&cbor_encode_ctx);

    /* get the encoded results, except for payload */
    qcbor_result = QCBOREncode_Finish(&cbor_encode_ctx, &tbs_first_part);
 c032a1e:	a904      	add	r1, sp, #16
 c032a20:	a820      	add	r0, sp, #128	; 0x80
 c032a22:	f7fe fa3c 	bl	c030e9e <QCBOREncode_Finish>
    if(qcbor_result) {
 c032a26:	2800      	cmp	r0, #0
 c032a28:	d131      	bne.n	c032a8e <create_tbs_hash+0xfe>
        return_value = T_COSE_ERR_SIG_STRUCT;
        goto Done;
    }

    /* Start the hashing */
    hash_alg_id = hash_alg_id_from_sig_alg_id(cose_alg_id);
 c032a2a:	4638      	mov	r0, r7
 c032a2c:	f7ff ffa8 	bl	c032980 <hash_alg_id_from_sig_alg_id>
    /* Don't check hash_alg_id for failure. t_cose_crypto_hash_start()
     * will handle it properly.
     */
    return_value = t_cose_crypto_hash_start(&hash_ctx, hash_alg_id);
 c032a30:	4601      	mov	r1, r0
 c032a32:	a812      	add	r0, sp, #72	; 0x48
 c032a34:	f7ff fe5e 	bl	c0326f4 <t_cose_crypto_hash_start>
    if(return_value) {
 c032a38:	b9d0      	cbnz	r0, c032a70 <create_tbs_hash+0xe0>
 c032a3a:	9b05      	ldr	r3, [sp, #20]
 c032a3c:	1b1c      	subs	r4, r3, r4
   return (UsefulBufC){UB.ptr, uAmount};
 c032a3e:	bf28      	it	cs
 c032a40:	9a04      	ldrcs	r2, [sp, #16]
 c032a42:	ab06      	add	r3, sp, #24
      return NULLUsefulBufC;
 c032a44:	bf34      	ite	cc
 c032a46:	e9c3 0000 	strdcc	r0, r0, [r3]
   return (UsefulBufC){UB.ptr, uAmount};
 c032a4a:	e9c3 2400 	strdcs	r2, r4, [r3]
     */

    /* This is hashing of the first part, all the CBOR
     * except the payload.
     */
    t_cose_crypto_hash_update(&hash_ctx,
 c032a4e:	a812      	add	r0, sp, #72	; 0x48
 c032a50:	e893 0006 	ldmia.w	r3, {r1, r2}
 c032a54:	f7ff fe78 	bl	c032748 <t_cose_crypto_hash_update>
                                        tbs_first_part.len - bytes_to_omit));

    /* Hash the payload, the second part. This may or may not
     * have the bstr wrapping. If not, it was hashed above.
     */
    t_cose_crypto_hash_update(&hash_ctx, payload);
 c032a58:	ab4f      	add	r3, sp, #316	; 0x13c
 c032a5a:	e893 0006 	ldmia.w	r3, {r1, r2}
 c032a5e:	a812      	add	r0, sp, #72	; 0x48
 c032a60:	f7ff fe72 	bl	c032748 <t_cose_crypto_hash_update>

    /* Finish the hash and set up to return it */
    return_value = t_cose_crypto_hash_finish(&hash_ctx,
 c032a64:	e895 0006 	ldmia.w	r5, {r1, r2}
 c032a68:	4633      	mov	r3, r6
 c032a6a:	a812      	add	r0, sp, #72	; 0x48
 c032a6c:	f7ff fe85 	bl	c03277a <t_cose_crypto_hash_finish>
                                             buffer_for_hash,
                                             hash);
Done:
    return return_value;
}
 c032a70:	b046      	add	sp, #280	; 0x118
 c032a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c032a76:	ab10      	add	r3, sp, #64	; 0x40
 c032a78:	aa4f      	add	r2, sp, #316	; 0x13c
 c032a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 c032a7e:	e883 0003 	stmia.w	r3, {r0, r1}
    QCBOREncode_AddBuffer(pCtx, CBOR_MAJOR_NONE_TYPE_BSTR_LEN_ONLY, Bytes);
 c032a82:	210b      	movs	r1, #11
 c032a84:	cb0c      	ldmia	r3, {r2, r3}
 c032a86:	a820      	add	r0, sp, #128	; 0x80
 c032a88:	f7fe f984 	bl	c030d94 <QCBOREncode_AddBuffer>
 c032a8c:	e7c2      	b.n	c032a14 <create_tbs_hash+0x84>
        return_value = T_COSE_ERR_SIG_STRUCT;
 c032a8e:	2014      	movs	r0, #20
 c032a90:	e7ee      	b.n	c032a70 <create_tbs_hash+0xe0>
 c032a92:	bf00      	nop
 c032a94:	0c03705f 	.word	0x0c03705f

0c032a98 <PendSV_Handler>:
#pragma required=tfm_pendsv_do_schedule
#endif

__attribute__((naked)) void PendSV_Handler(void)
{
    __ASM volatile(
 c032a98:	f3ef 8009 	mrs	r0, PSP
 c032a9c:	f3ef 810b 	mrs	r1, PSPLIM
 c032aa0:	b507      	push	{r0, r1, r2, lr}
 c032aa2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 c032aa6:	4668      	mov	r0, sp
 c032aa8:	f7fe fd10 	bl	c0314cc <tfm_pendsv_do_schedule>
 c032aac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 c032ab0:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 c032ab4:	f380 8809 	msr	PSP, r0
 c032ab8:	f381 880b 	msr	PSPLIM, r1
 c032abc:	4770      	bx	lr

0c032abe <tfm_arch_initialize_ctx_ext>:
void tfm_arch_initialize_ctx_ext(struct tfm_state_context_ext *p_ctxb,
                                 uint32_t sp, uint32_t sp_limit)
{
    p_ctxb->sp = sp;
    p_ctxb->sp_limit = sp_limit;
    p_ctxb->lr = INIT_LR_UNPRIVILEGED;
 c032abe:	f06f 0302 	mvn.w	r3, #2
    p_ctxb->sp_limit = sp_limit;
 c032ac2:	e9c0 1208 	strd	r1, r2, [r0, #32]
    p_ctxb->lr = INIT_LR_UNPRIVILEGED;
 c032ac6:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 c032ac8:	4770      	bx	lr
	...

0c032acc <SecureFault_Handler>:

/**
 * \brief Overwrites default Secure fault handler.
 */
void SecureFault_Handler(void)
{
 c032acc:	b538      	push	{r3, r4, r5, lr}
    __ASM volatile ("MOV %0, LR\n" : "=r" (result));
 c032ace:	4673      	mov	r3, lr
    /* figure out context from which we landed in fault handler */
    uint32_t lr = __get_LR();
    uint32_t sp;

    if (lr & EXC_RETURN_SECURE_STACK) {
 c032ad0:	f013 0f40 	tst.w	r3, #64	; 0x40
 c032ad4:	f003 0304 	and.w	r3, r3, #4
 c032ad8:	d02f      	beq.n	c032b3a <SecureFault_Handler+0x6e>
        if (lr & EXC_RETURN_STACK_PROCESS) {
 c032ada:	b35b      	cbz	r3, c032b34 <SecureFault_Handler+0x68>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 c032adc:	f3ef 8309 	mrs	r3, PSP
            sp = __TZ_get_MSP_NS();
        }
    }

    /* Only save the context if sp is valid */
    if ((sp >=  S_DATA_START &&
 c032ae0:	f64f 31e0 	movw	r1, #64480	; 0xfbe0
 c032ae4:	f103 424f 	add.w	r2, r3, #3472883712	; 0xcf000000
 c032ae8:	f502 027d 	add.w	r2, r2, #16580608	; 0xfd0000
 c032aec:	428a      	cmp	r2, r1
 c032aee:	d904      	bls.n	c032afa <SecureFault_Handler+0x2e>
         sp <=  (S_DATA_LIMIT - sizeof(tfm_fault_context)) + 1) ||
 c032af0:	4a17      	ldr	r2, [pc, #92]	; (c032b50 <SecureFault_Handler+0x84>)
        (sp >= NS_DATA_START &&
 c032af2:	f103 4160 	add.w	r1, r3, #3758096384	; 0xe0000000
         sp <=  (S_DATA_LIMIT - sizeof(tfm_fault_context)) + 1) ||
 c032af6:	4291      	cmp	r1, r2
 c032af8:	d80a      	bhi.n	c032b10 <SecureFault_Handler+0x44>
 c032afa:	4c16      	ldr	r4, [pc, #88]	; (c032b54 <SecureFault_Handler+0x88>)
 c032afc:	f103 0520 	add.w	r5, r3, #32
 c032b00:	4622      	mov	r2, r4
 c032b02:	6818      	ldr	r0, [r3, #0]
 c032b04:	6859      	ldr	r1, [r3, #4]
 c032b06:	3308      	adds	r3, #8
 c032b08:	c203      	stmia	r2!, {r0, r1}
 c032b0a:	42ab      	cmp	r3, r5
 c032b0c:	4614      	mov	r4, r2
 c032b0e:	d1f7      	bne.n	c032b00 <SecureFault_Handler+0x34>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 c032b10:	f3ef 8305 	mrs	r3, IPSR
    return IPSR.b.ISR;
 c032b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
        tfm_memcpy(&tfm_fault_context,
                   (const void *)sp,
                   sizeof(tfm_fault_context));
    }

    LOG_MSG("Oops... Secure fault!!! You're not going anywhere!");
 c032b18:	b1b3      	cbz	r3, c032b48 <SecureFault_Handler+0x7c>
 c032b1a:	480f      	ldr	r0, [pc, #60]	; (c032b58 <SecureFault_Handler+0x8c>)
 c032b1c:	f000 fa3e 	bl	c032f9c <tfm_core_log_puts>
 c032b20:	480e      	ldr	r0, [pc, #56]	; (c032b5c <SecureFault_Handler+0x90>)
 c032b22:	f000 fa3b 	bl	c032f9c <tfm_core_log_puts>
 c032b26:	480e      	ldr	r0, [pc, #56]	; (c032b60 <SecureFault_Handler+0x94>)
 c032b28:	f000 fa38 	bl	c032f9c <tfm_core_log_puts>
    Error_Handler();
}
 c032b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 c032b30:	f7ee bbb4 	b.w	c02129c <Error_Handler>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 c032b34:	f3ef 8308 	mrs	r3, MSP
 c032b38:	e7d2      	b.n	c032ae0 <SecureFault_Handler+0x14>
        if (lr & EXC_RETURN_STACK_PROCESS) {
 c032b3a:	b113      	cbz	r3, c032b42 <SecureFault_Handler+0x76>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 c032b3c:	f3ef 8389 	mrs	r3, PSP_NS
 c032b40:	e7ce      	b.n	c032ae0 <SecureFault_Handler+0x14>
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 c032b42:	f3ef 8388 	mrs	r3, MSP_NS
 c032b46:	e7cb      	b.n	c032ae0 <SecureFault_Handler+0x14>
    LOG_MSG("Oops... Secure fault!!! You're not going anywhere!");
 c032b48:	4b04      	ldr	r3, [pc, #16]	; (c032b5c <SecureFault_Handler+0x90>)
 c032b4a:	4618      	mov	r0, r3
 c032b4c:	df06      	svc	6
 c032b4e:	e7ed      	b.n	c032b2c <SecureFault_Handler+0x60>
 c032b50:	0002ffe0 	.word	0x0002ffe0
 c032b54:	3003c950 	.word	0x3003c950
 c032b58:	0c034fc8 	.word	0x0c034fc8
 c032b5c:	0c03706a 	.word	0x0c03706a
 c032b60:	0c0370e3 	.word	0x0c0370e3

0c032b64 <SVC_Handler>:

#pragma required=tfm_core_svc_handler
#endif
__attribute__((naked)) void SVC_Handler(void)
{
    __ASM volatile(
 c032b64:	f3ef 8208 	mrs	r2, MSP
 c032b68:	f01e 0f04 	tst.w	lr, #4
 c032b6c:	bf0c      	ite	eq
 c032b6e:	4610      	moveq	r0, r2
 c032b70:	f3ef 8009 	mrsne	r0, PSP
 c032b74:	4671      	mov	r1, lr
 c032b76:	f000 fa5f 	bl	c033038 <tfm_core_svc_handler>
 c032b7a:	4700      	bx	r0

0c032b7c <MemManage_Handler>:
}
#endif
/* Reserved for future usage */
__attribute__((naked)) void MemManage_Handler(void)
{
    __ASM volatile("b    .");
 c032b7c:	e7fe      	b.n	c032b7c <MemManage_Handler>

0c032b7e <BusFault_Handler>:
}

__attribute__((naked)) void BusFault_Handler(void)
{
    __ASM volatile("b    .");
 c032b7e:	e7fe      	b.n	c032b7e <BusFault_Handler>

0c032b80 <UsageFault_Handler>:
}
__attribute__((naked)) void UsageFault_Handler(void)
{
    __ASM volatile("b    .");
 c032b80:	e7fe      	b.n	c032b80 <UsageFault_Handler>
	...

0c032b84 <tfm_arch_prioritize_secure_exception>:
    uint32_t VECTKEY;
    SCB_Type *scb = SCB;
    uint32_t AIRCR;

    /* Set PRIS flag in AIRCR */
    AIRCR = scb->AIRCR;
 c032b84:	4a04      	ldr	r2, [pc, #16]	; (c032b98 <tfm_arch_prioritize_secure_exception+0x14>)
 c032b86:	68d3      	ldr	r3, [r2, #12]
    VECTKEY = (~AIRCR & SCB_AIRCR_VECTKEYSTAT_Msk);
    scb->AIRCR = SCB_AIRCR_PRIS_Msk |
                 VECTKEY |
 c032b88:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 c032b8c:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 c032b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    scb->AIRCR = SCB_AIRCR_PRIS_Msk |
 c032b94:	60d3      	str	r3, [r2, #12]
                 (AIRCR & ~SCB_AIRCR_VECTKEY_Msk);
}
 c032b96:	4770      	bx	lr
 c032b98:	e000ed00 	.word	0xe000ed00

0c032b9c <attest_check_memory_access>:
        attest_res = PSA_ATTEST_ERR_INVALID_INPUT;
    }
#endif

    return attest_res;
}
 c032b9c:	2000      	movs	r0, #0
 c032b9e:	4770      	bx	lr

0c032ba0 <attest_get_caller_client_id>:
    tfm_res = tfm_core_get_caller_client_id(caller_id);
    if (tfm_res) {
        attest_res = PSA_ATTEST_ERR_CLAIM_UNAVAILABLE;
    }
#else
    *caller_id = g_attest_caller_id;
 c032ba0:	4b02      	ldr	r3, [pc, #8]	; (c032bac <attest_get_caller_client_id+0xc>)
 c032ba2:	681b      	ldr	r3, [r3, #0]
 c032ba4:	6003      	str	r3, [r0, #0]
#endif

    return attest_res;
}
 c032ba6:	2000      	movs	r0, #0
 c032ba8:	4770      	bx	lr
 c032baa:	bf00      	nop
 c032bac:	3003c970 	.word	0x3003c970

0c032bb0 <attest_get_boot_data>:

enum psa_attest_err_t
attest_get_boot_data(uint8_t major_type,
                     struct tfm_boot_data *boot_data,
                     uint32_t len)
{
 c032bb0:	b508      	push	{r3, lr}
    boot_data->header.tlv_magic   = SHARED_DATA_TLV_INFO_MAGIC;
    boot_data->header.tlv_tot_len = SHARED_DATA_HEADER_SIZE;
#else
    int32_t tfm_res;

    tfm_res = tfm_core_get_boot_data(major_type, boot_data, len);
 c032bb2:	f7e7 fbb3 	bl	c01a31c <tfm_core_get_boot_data>
        attest_res =  PSA_ATTEST_ERR_INIT_FAILED;
    }
#endif /* BL2 */

    return attest_res;
}
 c032bb6:	3000      	adds	r0, #0
 c032bb8:	bf18      	it	ne
 c032bba:	2001      	movne	r0, #1
 c032bbc:	bd08      	pop	{r3, pc}
	...

0c032bc0 <psa_attest_get_token_size>:

    return status;
}

static enum psa_attest_err_t psa_attest_get_token_size(const psa_msg_t *msg)
{
 c032bc0:	b530      	push	{r4, r5, lr}
 c032bc2:	b087      	sub	sp, #28
    enum psa_attest_err_t status = PSA_ATTEST_ERR_SUCCESS;
    uint32_t challenge_size;
    uint32_t token_size;
    uint32_t bytes_read = 0;
    psa_invec in_vec[] = {
        {&challenge_size, msg->in_size[0]}
 c032bc4:	6902      	ldr	r2, [r0, #16]
    };
    psa_outvec out_vec[] = {
 c032bc6:	ab01      	add	r3, sp, #4
 c032bc8:	9304      	str	r3, [sp, #16]
        {&token_size, msg->out_size[0]}
 c032bca:	6a03      	ldr	r3, [r0, #32]
    };

    if (msg->in_size[0] != sizeof(challenge_size)
 c032bcc:	2a04      	cmp	r2, #4
{
 c032bce:	4604      	mov	r4, r0
    psa_invec in_vec[] = {
 c032bd0:	f8cd d008 	str.w	sp, [sp, #8]
 c032bd4:	9203      	str	r2, [sp, #12]
    psa_outvec out_vec[] = {
 c032bd6:	9305      	str	r3, [sp, #20]
    if (msg->in_size[0] != sizeof(challenge_size)
 c032bd8:	d003      	beq.n	c032be2 <psa_attest_get_token_size+0x22>
        || msg->out_size[0] != sizeof(token_size)) {
        return PSA_ATTEST_ERR_INVALID_INPUT;
 c032bda:	2504      	movs	r5, #4
    if (status == PSA_ATTEST_ERR_SUCCESS) {
        psa_write(msg->handle, 0, out_vec[0].base, out_vec[0].len);
    }

    return status;
}
 c032bdc:	4628      	mov	r0, r5
 c032bde:	b007      	add	sp, #28
 c032be0:	bd30      	pop	{r4, r5, pc}
        || msg->out_size[0] != sizeof(token_size)) {
 c032be2:	2b04      	cmp	r3, #4
 c032be4:	d1f9      	bne.n	c032bda <psa_attest_get_token_size+0x1a>
    g_attest_caller_id = msg->client_id;
 c032be6:	6881      	ldr	r1, [r0, #8]
 c032be8:	4a0c      	ldr	r2, [pc, #48]	; (c032c1c <psa_attest_get_token_size+0x5c>)
    bytes_read = psa_read(msg->handle, 0,
 c032bea:	6840      	ldr	r0, [r0, #4]
    g_attest_caller_id = msg->client_id;
 c032bec:	6011      	str	r1, [r2, #0]
    bytes_read = psa_read(msg->handle, 0,
 c032bee:	466a      	mov	r2, sp
 c032bf0:	2100      	movs	r1, #0
 c032bf2:	f7e7 fc45 	bl	c01a480 <psa_read>
    if (bytes_read != msg->in_size[0]) {
 c032bf6:	6923      	ldr	r3, [r4, #16]
 c032bf8:	4283      	cmp	r3, r0
 c032bfa:	d1ee      	bne.n	c032bda <psa_attest_get_token_size+0x1a>
    status = initial_attest_get_token_size(in_vec, IOVEC_LEN(in_vec),
 c032bfc:	2301      	movs	r3, #1
 c032bfe:	aa04      	add	r2, sp, #16
 c032c00:	4619      	mov	r1, r3
 c032c02:	a802      	add	r0, sp, #8
 c032c04:	f7fc fab9 	bl	c02f17a <initial_attest_get_token_size>
    if (status == PSA_ATTEST_ERR_SUCCESS) {
 c032c08:	4605      	mov	r5, r0
 c032c0a:	2800      	cmp	r0, #0
 c032c0c:	d1e6      	bne.n	c032bdc <psa_attest_get_token_size+0x1c>
        psa_write(msg->handle, 0, out_vec[0].base, out_vec[0].len);
 c032c0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c032c12:	4601      	mov	r1, r0
 c032c14:	6860      	ldr	r0, [r4, #4]
 c032c16:	f7e7 fc37 	bl	c01a488 <psa_write>
 c032c1a:	e7df      	b.n	c032bdc <psa_attest_get_token_size+0x1c>
 c032c1c:	3003c970 	.word	0x3003c970

0c032c20 <psa_attest_get_token>:
{
 c032c20:	b530      	push	{r4, r5, lr}
    size_t challenge_size = msg->in_size[0];
 c032c22:	6904      	ldr	r4, [r0, #16]
{
 c032c24:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    size_t token_size = msg->out_size[0];
 c032c28:	6a03      	ldr	r3, [r0, #32]
    psa_invec in_vec[] = {
 c032c2a:	aa04      	add	r2, sp, #16
    psa_outvec out_vec[] = {
 c032c2c:	a914      	add	r1, sp, #80	; 0x50
    if (challenge_size > PSA_INITIAL_ATTEST_CHALLENGE_SIZE_64) {
 c032c2e:	2c40      	cmp	r4, #64	; 0x40
{
 c032c30:	4605      	mov	r5, r0
    psa_invec in_vec[] = {
 c032c32:	e9cd 2400 	strd	r2, r4, [sp]
    psa_outvec out_vec[] = {
 c032c36:	e9cd 1302 	strd	r1, r3, [sp, #8]
    if (challenge_size > PSA_INITIAL_ATTEST_CHALLENGE_SIZE_64) {
 c032c3a:	d81b      	bhi.n	c032c74 <psa_attest_get_token+0x54>
    g_attest_caller_id = msg->client_id;
 c032c3c:	6881      	ldr	r1, [r0, #8]
 c032c3e:	4b0f      	ldr	r3, [pc, #60]	; (c032c7c <psa_attest_get_token+0x5c>)
    bytes_read = psa_read(msg->handle, 0,
 c032c40:	6840      	ldr	r0, [r0, #4]
    g_attest_caller_id = msg->client_id;
 c032c42:	6019      	str	r1, [r3, #0]
    bytes_read = psa_read(msg->handle, 0,
 c032c44:	4623      	mov	r3, r4
 c032c46:	2100      	movs	r1, #0
 c032c48:	f7e7 fc1a 	bl	c01a480 <psa_read>
    if (bytes_read != challenge_size) {
 c032c4c:	4284      	cmp	r4, r0
 c032c4e:	d113      	bne.n	c032c78 <psa_attest_get_token+0x58>
    status = initial_attest_get_token(in_vec, IOVEC_LEN(in_vec),
 c032c50:	2301      	movs	r3, #1
 c032c52:	aa02      	add	r2, sp, #8
 c032c54:	4619      	mov	r1, r3
 c032c56:	4668      	mov	r0, sp
 c032c58:	f7fc fa64 	bl	c02f124 <initial_attest_get_token>
    if (status == PSA_ATTEST_ERR_SUCCESS) {
 c032c5c:	4604      	mov	r4, r0
 c032c5e:	b928      	cbnz	r0, c032c6c <psa_attest_get_token+0x4c>
        psa_write(msg->handle, 0, out_vec[0].base, out_vec[0].len);
 c032c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c032c64:	4601      	mov	r1, r0
 c032c66:	6868      	ldr	r0, [r5, #4]
 c032c68:	f7e7 fc0e 	bl	c01a488 <psa_write>
}
 c032c6c:	4620      	mov	r0, r4
 c032c6e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 c032c72:	bd30      	pop	{r4, r5, pc}
        return PSA_ATTEST_ERR_INVALID_INPUT;
 c032c74:	2404      	movs	r4, #4
 c032c76:	e7f9      	b.n	c032c6c <psa_attest_get_token+0x4c>
        return PSA_ATTEST_ERR_GENERAL;
 c032c78:	2405      	movs	r4, #5
 c032c7a:	e7f7      	b.n	c032c6c <psa_attest_get_token+0x4c>
 c032c7c:	3003c970 	.word	0x3003c970

0c032c80 <attest_signal_handle>:
    while (1)
        ;
}

static void attest_signal_handle(psa_signal_t signal, attest_func_t pfn)
{
 c032c80:	b510      	push	{r4, lr}
 c032c82:	b08c      	sub	sp, #48	; 0x30
 c032c84:	460c      	mov	r4, r1
    psa_msg_t msg;
    psa_status_t status;

    status = psa_get(signal, &msg);
 c032c86:	4669      	mov	r1, sp
 c032c88:	f7e7 fbf6 	bl	c01a478 <psa_get>
    switch (msg.type) {
 c032c8c:	9b00      	ldr	r3, [sp, #0]
 c032c8e:	1c99      	adds	r1, r3, #2
 c032c90:	db02      	blt.n	c032c98 <attest_signal_handle+0x18>
 c032c92:	1c5a      	adds	r2, r3, #1
 c032c94:	dd01      	ble.n	c032c9a <attest_signal_handle+0x1a>
 c032c96:	b133      	cbz	r3, c032ca6 <attest_signal_handle+0x26>
 c032c98:	e7fe      	b.n	c032c98 <attest_signal_handle+0x18>
    case PSA_IPC_CONNECT:
        psa_reply(msg.handle, PSA_SUCCESS);
 c032c9a:	2100      	movs	r1, #0
        break;
    case PSA_IPC_CALL:
        status = (psa_status_t)pfn(&msg);
        psa_reply(msg.handle, status);
 c032c9c:	9801      	ldr	r0, [sp, #4]
 c032c9e:	f7e7 fbf5 	bl	c01a48c <psa_reply>
        psa_reply(msg.handle, PSA_SUCCESS);
        break;
    default:
        tfm_abort();
    }
}
 c032ca2:	b00c      	add	sp, #48	; 0x30
 c032ca4:	bd10      	pop	{r4, pc}
        status = (psa_status_t)pfn(&msg);
 c032ca6:	4668      	mov	r0, sp
 c032ca8:	47a0      	blx	r4
        psa_reply(msg.handle, status);
 c032caa:	4601      	mov	r1, r0
 c032cac:	e7f6      	b.n	c032c9c <attest_signal_handle+0x1c>
	...

0c032cb0 <attest_partition_init>:
#endif

enum psa_attest_err_t attest_partition_init(void)
{
 c032cb0:	b538      	push	{r3, r4, r5, lr}
    enum psa_attest_err_t err = PSA_ATTEST_ERR_SUCCESS;
#ifdef TFM_PSA_API
    psa_signal_t signals;
#endif

    err = attest_init();
 c032cb2:	f7fc fa2f 	bl	c02f114 <attest_init>
#ifdef TFM_PSA_API
    if (err != PSA_ATTEST_ERR_SUCCESS) {
 c032cb6:	b970      	cbnz	r0, c032cd6 <attest_partition_init+0x26>
        signals = psa_wait(PSA_WAIT_ANY, PSA_BLOCK);
        if (signals & PSA_ATTEST_GET_TOKEN_SIG) {
            attest_signal_handle(PSA_ATTEST_GET_TOKEN_SIG,
                                 psa_attest_get_token);
        } else if (signals & PSA_ATTEST_GET_TOKEN_SIZE_SIG) {
            attest_signal_handle(PSA_ATTEST_GET_TOKEN_SIZE_SIG,
 c032cb8:	4c0a      	ldr	r4, [pc, #40]	; (c032ce4 <attest_partition_init+0x34>)
            attest_signal_handle(PSA_ATTEST_GET_TOKEN_SIG,
 c032cba:	4d0b      	ldr	r5, [pc, #44]	; (c032ce8 <attest_partition_init+0x38>)
        signals = psa_wait(PSA_WAIT_ANY, PSA_BLOCK);
 c032cbc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 c032cc0:	f04f 30ff 	mov.w	r0, #4294967295
 c032cc4:	f7e7 fbd6 	bl	c01a474 <psa_wait>
        if (signals & PSA_ATTEST_GET_TOKEN_SIG) {
 c032cc8:	06c2      	lsls	r2, r0, #27
 c032cca:	d505      	bpl.n	c032cd8 <attest_partition_init+0x28>
            attest_signal_handle(PSA_ATTEST_GET_TOKEN_SIG,
 c032ccc:	4629      	mov	r1, r5
 c032cce:	2010      	movs	r0, #16
            attest_signal_handle(PSA_ATTEST_GET_TOKEN_SIZE_SIG,
 c032cd0:	f7ff ffd6 	bl	c032c80 <attest_signal_handle>
 c032cd4:	e7f2      	b.n	c032cbc <attest_partition_init+0xc>
 c032cd6:	e7fe      	b.n	c032cd6 <attest_partition_init+0x26>
        } else if (signals & PSA_ATTEST_GET_TOKEN_SIZE_SIG) {
 c032cd8:	0683      	lsls	r3, r0, #26
 c032cda:	d502      	bpl.n	c032ce2 <attest_partition_init+0x32>
            attest_signal_handle(PSA_ATTEST_GET_TOKEN_SIZE_SIG,
 c032cdc:	4621      	mov	r1, r4
 c032cde:	2020      	movs	r0, #32
 c032ce0:	e7f6      	b.n	c032cd0 <attest_partition_init+0x20>
 c032ce2:	e7fe      	b.n	c032ce2 <attest_partition_init+0x32>
 c032ce4:	0c032bc1 	.word	0x0c032bc1
 c032ce8:	0c032c21 	.word	0x0c032c21

0c032cec <tfm_core_check_boot_data_access_policy>:
 * \param[in]  major_type  Data type identifier.
 *
 * \return  Returns 0 in case of success, otherwise -1.
 */
static int32_t tfm_core_check_boot_data_access_policy(uint8_t major_type)
{
 c032cec:	b510      	push	{r4, lr}
 c032cee:	4604      	mov	r4, r0
#ifndef TFM_PSA_API
    uint32_t partition_idx = tfm_spm_partition_get_running_partition_idx();

    partition_id = tfm_spm_partition_get_partition_id(partition_idx);
#else
    partition_id = tfm_spm_partition_get_running_partition_id();
 c032cf0:	f7fe fa7a 	bl	c0311e8 <tfm_spm_partition_get_running_partition_id>
#endif

    for (i = 0; i < array_size; ++i) {
        if (partition_id == access_policy_table[i].partition_id) {
 c032cf4:	f240 1305 	movw	r3, #261	; 0x105
 c032cf8:	4298      	cmp	r0, r3
 c032cfa:	d106      	bne.n	c032d0a <tfm_core_check_boot_data_access_policy+0x1e>
            if (major_type == access_policy_table[i].major_type) {
 c032cfc:	2c01      	cmp	r4, #1
 c032cfe:	d00c      	beq.n	c032d1a <tfm_core_check_boot_data_access_policy+0x2e>
 c032d00:	1c20      	adds	r0, r4, #0
 c032d02:	bf18      	it	ne
 c032d04:	2001      	movne	r0, #1
 c032d06:	4240      	negs	r0, r0
            }
        }
    }

    return rc;
}
 c032d08:	bd10      	pop	{r4, pc}
        if (partition_id == access_policy_table[i].partition_id) {
 c032d0a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 c032d0e:	d106      	bne.n	c032d1e <tfm_core_check_boot_data_access_policy+0x32>
            if (major_type == access_policy_table[i].major_type) {
 c032d10:	1ea0      	subs	r0, r4, #2
 c032d12:	bf18      	it	ne
 c032d14:	f04f 30ff 	movne.w	r0, #4294967295
 c032d18:	e7f6      	b.n	c032d08 <tfm_core_check_boot_data_access_policy+0x1c>
                rc = 0;
 c032d1a:	2000      	movs	r0, #0
 c032d1c:	e7f4      	b.n	c032d08 <tfm_core_check_boot_data_access_policy+0x1c>
    int32_t rc = -1;
 c032d1e:	f04f 30ff 	mov.w	r0, #4294967295
    return rc;
 c032d22:	e7f1      	b.n	c032d08 <tfm_core_check_boot_data_access_policy+0x1c>

0c032d24 <tfm_core_validate_boot_data>:
{
    struct tfm_boot_data *boot_data;

    boot_data = (struct tfm_boot_data *)BOOT_TFM_SHARED_DATA_BASE;

    if (boot_data->header.tlv_magic == SHARED_DATA_TLV_INFO_MAGIC) {
 c032d24:	4b04      	ldr	r3, [pc, #16]	; (c032d38 <tfm_core_validate_boot_data+0x14>)
 c032d26:	881a      	ldrh	r2, [r3, #0]
 c032d28:	f242 0316 	movw	r3, #8214	; 0x2016
 c032d2c:	429a      	cmp	r2, r3
        is_boot_data_valid = BOOT_DATA_VALID;
 c032d2e:	bf02      	ittt	eq
 c032d30:	2201      	moveq	r2, #1
 c032d32:	4b02      	ldreq	r3, [pc, #8]	; (c032d3c <tfm_core_validate_boot_data+0x18>)
 c032d34:	601a      	streq	r2, [r3, #0]
    }
}
 c032d36:	4770      	bx	lr
 c032d38:	3003fc00 	.word	0x3003fc00
 c032d3c:	3003c6e8 	.word	0x3003c6e8

0c032d40 <tfm_core_get_boot_value_handler>:

void tfm_core_get_boot_value_handler(uint32_t args[])
{   
 c032d40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint16_t  tlv = (uint16_t)args[0];
    uint8_t *buf_start = (uint8_t *)args[1];
 c032d44:	e9d0 7600 	ldrd	r7, r6, [r0]
{   
 c032d48:	4604      	mov	r4, r0
    uint16_t buf_size  = (uint16_t)args[2];
 c032d4a:	f8d0 8008 	ldr.w	r8, [r0, #8]
        /* Not in accessible range, return error */
        args[0] = TFM_ERROR_INVALID_PARAMETER;
        return;
    }
#else
    partition = tfm_spm_get_running_partition();
 c032d4e:	f7fe fa51 	bl	c0311f4 <tfm_spm_get_running_partition>
    if (!partition) {
 c032d52:	4605      	mov	r5, r0
 c032d54:	b908      	cbnz	r0, c032d5a <tfm_core_get_boot_value_handler+0x1a>
        tfm_panic();
 c032d56:	f001 fb2f 	bl	c0343b8 <tfm_panic>
    }
     privileged =
        tfm_spm_partition_get_privileged_mode(partition->static_data->
 c032d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c032d5c:	fa1f f888 	uxth.w	r8, r8
     privileged =
 c032d60:	6858      	ldr	r0, [r3, #4]
 c032d62:	f7fe fb2b 	bl	c0313bc <tfm_spm_partition_get_privileged_mode>
                                              partition_flags);

    if (tfm_memory_check(buf_start, buf_size, false, TFM_MEMORY_ACCESS_RW,
 c032d66:	2302      	movs	r3, #2
 c032d68:	9000      	str	r0, [sp, #0]
 c032d6a:	2200      	movs	r2, #0
 c032d6c:	4641      	mov	r1, r8
 c032d6e:	4630      	mov	r0, r6
 c032d70:	f7fe fb0a 	bl	c031388 <tfm_memory_check>
 c032d74:	b120      	cbz	r0, c032d80 <tfm_core_get_boot_value_handler+0x40>
        privileged) != IPC_SUCCESS) {
        /* Not in accessible range, return error */
        args[0] = TFM_ERROR_INVALID_PARAMETER;
 c032d76:	2303      	movs	r3, #3
			tfm_memcpy(buf_start, (const void *)((uint32_t)offset+sizeof(tlv_entry)), tlv_entry.tlv_len-sizeof(tlv_entry));
			found = true;
			break;
		}
    }
    if (found) args[0] = TFM_SUCCESS;
 c032d78:	6023      	str	r3, [r4, #0]
		else
			args[0] = TFM_ERROR_INVALID_PARAMETER;
    return;
}
 c032d7a:	b002      	add	sp, #8
 c032d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t  tlv = (uint16_t)args[0];
 c032d80:	b2bf      	uxth	r7, r7
    if (tfm_core_check_boot_data_access_policy(GET_MAJOR(tlv))) {
 c032d82:	0b38      	lsrs	r0, r7, #12
 c032d84:	f7ff ffb2 	bl	c032cec <tfm_core_check_boot_data_access_policy>
 c032d88:	2800      	cmp	r0, #0
 c032d8a:	d1f4      	bne.n	c032d76 <tfm_core_get_boot_value_handler+0x36>
    if (is_boot_data_valid != BOOT_DATA_VALID) {
 c032d8c:	4b0e      	ldr	r3, [pc, #56]	; (c032dc8 <tfm_core_get_boot_value_handler+0x88>)
 c032d8e:	681b      	ldr	r3, [r3, #0]
 c032d90:	2b01      	cmp	r3, #1
 c032d92:	d1f0      	bne.n	c032d76 <tfm_core_get_boot_value_handler+0x36>
    tlv_end = BOOT_TFM_SHARED_DATA_BASE + boot_data->header.tlv_tot_len;
 c032d94:	4b0d      	ldr	r3, [pc, #52]	; (c032dcc <tfm_core_get_boot_value_handler+0x8c>)
    offset  = BOOT_TFM_SHARED_DATA_BASE + SHARED_DATA_HEADER_SIZE;
 c032d96:	490e      	ldr	r1, [pc, #56]	; (c032dd0 <tfm_core_get_boot_value_handler+0x90>)
    tlv_end = BOOT_TFM_SHARED_DATA_BASE + boot_data->header.tlv_tot_len;
 c032d98:	885b      	ldrh	r3, [r3, #2]
 c032d9a:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 c032d9e:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
    for (; offset < tlv_end; offset += tlv_entry.tlv_len) {
 c032da2:	4299      	cmp	r1, r3
 c032da4:	d2e7      	bcs.n	c032d76 <tfm_core_get_boot_value_handler+0x36>
 c032da6:	6808      	ldr	r0, [r1, #0]
 c032da8:	0c02      	lsrs	r2, r0, #16
		if (tlv_entry.tlv_type == tlv) {
 c032daa:	b280      	uxth	r0, r0
 c032dac:	4287      	cmp	r7, r0
 c032dae:	d108      	bne.n	c032dc2 <tfm_core_get_boot_value_handler+0x82>
			if ((tlv_entry.tlv_len-sizeof(tlv_entry)) > buf_size) {
 c032db0:	3a04      	subs	r2, #4
 c032db2:	4542      	cmp	r2, r8
 c032db4:	d8df      	bhi.n	c032d76 <tfm_core_get_boot_value_handler+0x36>
 c032db6:	3104      	adds	r1, #4
 c032db8:	4630      	mov	r0, r6
 c032dba:	f7e4 fde0 	bl	c01797e <memcpy>
    if (found) args[0] = TFM_SUCCESS;
 c032dbe:	2300      	movs	r3, #0
 c032dc0:	e7da      	b.n	c032d78 <tfm_core_get_boot_value_handler+0x38>
    for (; offset < tlv_end; offset += tlv_entry.tlv_len) {
 c032dc2:	4411      	add	r1, r2
 c032dc4:	e7ed      	b.n	c032da2 <tfm_core_get_boot_value_handler+0x62>
 c032dc6:	bf00      	nop
 c032dc8:	3003c6e8 	.word	0x3003c6e8
 c032dcc:	3003fc00 	.word	0x3003fc00
 c032dd0:	3003fc04 	.word	0x3003fc04

0c032dd4 <tfm_core_get_boot_data_handler>:
void tfm_core_get_boot_data_handler(uint32_t args[])
{
 c032dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t  tlv_major = (uint8_t)args[0];
    uint8_t *buf_start = (uint8_t *)args[1];
 c032dd8:	e9d0 9400 	ldrd	r9, r4, [r0]
{
 c032ddc:	4605      	mov	r5, r0
    uint16_t buf_size  = (uint16_t)args[2];
 c032dde:	6886      	ldr	r6, [r0, #8]
        /* Not in accessible range, return error */
        args[0] = (uint32_t)TFM_ERROR_INVALID_PARAMETER;
        return;
    }
#else
    partition = tfm_spm_get_running_partition();
 c032de0:	f7fe fa08 	bl	c0311f4 <tfm_spm_get_running_partition>
    if (!partition) {
 c032de4:	4607      	mov	r7, r0
 c032de6:	b908      	cbnz	r0, c032dec <tfm_core_get_boot_data_handler+0x18>
        tfm_panic();
 c032de8:	f001 fae6 	bl	c0343b8 <tfm_panic>
    }
    privileged =
        tfm_spm_partition_get_privileged_mode(partition->static_data->
 c032dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c032dee:	fa1f fa86 	uxth.w	sl, r6
    privileged =
 c032df2:	6858      	ldr	r0, [r3, #4]
 c032df4:	f7fe fae2 	bl	c0313bc <tfm_spm_partition_get_privileged_mode>
                                              partition_flags);

    if (tfm_memory_check(buf_start, buf_size, false, TFM_MEMORY_ACCESS_RW,
 c032df8:	2302      	movs	r3, #2
 c032dfa:	9000      	str	r0, [sp, #0]
 c032dfc:	2200      	movs	r2, #0
 c032dfe:	4651      	mov	r1, sl
 c032e00:	4620      	mov	r0, r4
 c032e02:	f7fe fac1 	bl	c031388 <tfm_memory_check>
 c032e06:	b120      	cbz	r0, c032e12 <tfm_core_get_boot_data_handler+0x3e>
        privileged) != IPC_SUCCESS) {
        /* Not in accessible range, return error */
        args[0] = (uint32_t)TFM_ERROR_INVALID_PARAMETER;
 c032e08:	2303      	movs	r3, #3

            ptr += tlv_entry.tlv_len;
            boot_data->header.tlv_tot_len += tlv_entry.tlv_len;
        }
    }
    args[0] = (uint32_t)TFM_SUCCESS;
 c032e0a:	602b      	str	r3, [r5, #0]
    return;
}
 c032e0c:	b004      	add	sp, #16
 c032e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (is_boot_data_valid != BOOT_DATA_VALID) {
 c032e12:	4b1f      	ldr	r3, [pc, #124]	; (c032e90 <tfm_core_get_boot_data_handler+0xbc>)
 c032e14:	681b      	ldr	r3, [r3, #0]
 c032e16:	2b01      	cmp	r3, #1
 c032e18:	d1f6      	bne.n	c032e08 <tfm_core_get_boot_data_handler+0x34>
    uint8_t  tlv_major = (uint8_t)args[0];
 c032e1a:	fa5f f989 	uxtb.w	r9, r9
    if (tfm_core_check_boot_data_access_policy(tlv_major)) {
 c032e1e:	4648      	mov	r0, r9
 c032e20:	f7ff ff64 	bl	c032cec <tfm_core_check_boot_data_access_policy>
 c032e24:	2800      	cmp	r0, #0
 c032e26:	d1ef      	bne.n	c032e08 <tfm_core_get_boot_data_handler+0x34>
    if (buf_size < SHARED_DATA_HEADER_SIZE) {
 c032e28:	b2b6      	uxth	r6, r6
 c032e2a:	2e03      	cmp	r6, #3
 c032e2c:	d9ec      	bls.n	c032e08 <tfm_core_get_boot_data_handler+0x34>
    tlv_end = BOOT_TFM_SHARED_DATA_BASE + boot_data->header.tlv_tot_len;
 c032e2e:	4b19      	ldr	r3, [pc, #100]	; (c032e94 <tfm_core_get_boot_data_handler+0xc0>)
    offset  = BOOT_TFM_SHARED_DATA_BASE + SHARED_DATA_HEADER_SIZE;
 c032e30:	4f19      	ldr	r7, [pc, #100]	; (c032e98 <tfm_core_get_boot_data_handler+0xc4>)
    tlv_end = BOOT_TFM_SHARED_DATA_BASE + boot_data->header.tlv_tot_len;
 c032e32:	885e      	ldrh	r6, [r3, #2]
        boot_data->header.tlv_magic   = SHARED_DATA_TLV_INFO_MAGIC;
 c032e34:	f242 0316 	movw	r3, #8214	; 0x2016
 c032e38:	8023      	strh	r3, [r4, #0]
        boot_data->header.tlv_tot_len = SHARED_DATA_HEADER_SIZE;
 c032e3a:	2304      	movs	r3, #4
    tlv_end = BOOT_TFM_SHARED_DATA_BASE + boot_data->header.tlv_tot_len;
 c032e3c:	f106 5640 	add.w	r6, r6, #805306368	; 0x30000000
        boot_data->header.tlv_tot_len = SHARED_DATA_HEADER_SIZE;
 c032e40:	8063      	strh	r3, [r4, #2]
        ptr = boot_data->data;
 c032e42:	eb04 0803 	add.w	r8, r4, r3
    tlv_end = BOOT_TFM_SHARED_DATA_BASE + boot_data->header.tlv_tot_len;
 c032e46:	f506 367f 	add.w	r6, r6, #261120	; 0x3fc00
    for (; offset < tlv_end; offset += tlv_entry.tlv_len) {
 c032e4a:	42b7      	cmp	r7, r6
 c032e4c:	d301      	bcc.n	c032e52 <tfm_core_get_boot_data_handler+0x7e>
    args[0] = (uint32_t)TFM_SUCCESS;
 c032e4e:	2300      	movs	r3, #0
 c032e50:	e7db      	b.n	c032e0a <tfm_core_get_boot_data_handler+0x36>
        (void)tfm_core_util_memcpy(&tlv_entry,
 c032e52:	2204      	movs	r2, #4
 c032e54:	4639      	mov	r1, r7
 c032e56:	a803      	add	r0, sp, #12
 c032e58:	f000 f922 	bl	c0330a0 <tfm_core_util_memcpy>
        if (GET_MAJOR(tlv_entry.tlv_type) == tlv_major) {
 c032e5c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 c032e60:	ebb9 3f13 	cmp.w	r9, r3, lsr #12
 c032e64:	d110      	bne.n	c032e88 <tfm_core_get_boot_data_handler+0xb4>
            if (((ptr - buf_start) + tlv_entry.tlv_len) > buf_size) {
 c032e66:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 c032e6a:	eba8 0304 	sub.w	r3, r8, r4
 c032e6e:	4413      	add	r3, r2
 c032e70:	4553      	cmp	r3, sl
 c032e72:	dcc9      	bgt.n	c032e08 <tfm_core_get_boot_data_handler+0x34>
            (void)tfm_core_util_memcpy(ptr, (const void *)offset,
 c032e74:	4640      	mov	r0, r8
 c032e76:	4639      	mov	r1, r7
 c032e78:	f000 f912 	bl	c0330a0 <tfm_core_util_memcpy>
            ptr += tlv_entry.tlv_len;
 c032e7c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
            boot_data->header.tlv_tot_len += tlv_entry.tlv_len;
 c032e80:	8862      	ldrh	r2, [r4, #2]
            ptr += tlv_entry.tlv_len;
 c032e82:	4498      	add	r8, r3
            boot_data->header.tlv_tot_len += tlv_entry.tlv_len;
 c032e84:	4413      	add	r3, r2
 c032e86:	8063      	strh	r3, [r4, #2]
    for (; offset < tlv_end; offset += tlv_entry.tlv_len) {
 c032e88:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 c032e8c:	441f      	add	r7, r3
 c032e8e:	e7dc      	b.n	c032e4a <tfm_core_get_boot_data_handler+0x76>
 c032e90:	3003c6e8 	.word	0x3003c6e8
 c032e94:	3003fc00 	.word	0x3003fc00
 c032e98:	3003fc04 	.word	0x3003fc04

0c032e9c <tfm_core_init>:
#define REGION_DECLARE(a, b, c) extern uint32_t REGION_NAME(a, b, c)

REGION_DECLARE(Image$$, ARM_LIB_STACK_MSP,  $$ZI$$Base);

int32_t tfm_core_init(void)
{
 c032e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t i;
    enum tfm_plat_err_t plat_err = TFM_PLAT_ERR_SYSTEM_ERR;
    enum irq_target_state_t irq_target_state = TFM_IRQ_TARGET_STATE_SECURE;

    /* Enables fault handlers */
    plat_err = tfm_spm_hal_enable_fault_handlers();
 c032e9e:	f7ee f85c 	bl	c020f5a <tfm_spm_hal_enable_fault_handlers>
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c032ea2:	b108      	cbz	r0, c032ea8 <tfm_core_init+0xc>
        return TFM_ERROR_GENERIC;
 c032ea4:	201f      	movs	r0, #31
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
        return TFM_ERROR_GENERIC;
    }

    return TFM_SUCCESS;
}
 c032ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    plat_err = tfm_spm_hal_system_reset_cfg();
 c032ea8:	f7ee f859 	bl	c020f5e <tfm_spm_hal_system_reset_cfg>
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c032eac:	2800      	cmp	r0, #0
 c032eae:	d1f9      	bne.n	c032ea4 <tfm_core_init+0x8>
    plat_err = tfm_spm_hal_init_debug();
 c032eb0:	f7ee f9e0 	bl	c021274 <tfm_spm_hal_init_debug>
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c032eb4:	2800      	cmp	r0, #0
 c032eb6:	d1f5      	bne.n	c032ea4 <tfm_core_init+0x8>
  __ASM volatile ("cpsie i" : : : "memory");
 c032eb8:	b662      	cpsie	i
    stdio_init();
 c032eba:	f001 fad9 	bl	c034470 <stdio_init>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 c032ebe:	f3ef 8305 	mrs	r3, IPSR
 c032ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    LOG_MSG("Secure image initializing!");
 c032ec6:	b1fb      	cbz	r3, c032f08 <tfm_core_init+0x6c>
 c032ec8:	481a      	ldr	r0, [pc, #104]	; (c032f34 <tfm_core_init+0x98>)
 c032eca:	f000 f867 	bl	c032f9c <tfm_core_log_puts>
 c032ece:	481a      	ldr	r0, [pc, #104]	; (c032f38 <tfm_core_init+0x9c>)
 c032ed0:	f000 f864 	bl	c032f9c <tfm_core_log_puts>
 c032ed4:	4819      	ldr	r0, [pc, #100]	; (c032f3c <tfm_core_init+0xa0>)
 c032ed6:	f000 f861 	bl	c032f9c <tfm_core_log_puts>
    tfm_core_validate_boot_data();
 c032eda:	f7ff ff23 	bl	c032d24 <tfm_core_validate_boot_data>
    plat_err = tfm_spm_hal_init_isolation_hw();
 c032ede:	f7ed fed6 	bl	c020c8e <tfm_spm_hal_init_isolation_hw>
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c032ee2:	2800      	cmp	r0, #0
 c032ee4:	d1de      	bne.n	c032ea4 <tfm_core_init+0x8>
    configure_ns_code();
 c032ee6:	f000 fb4f 	bl	c033588 <configure_ns_code>
    plat_err = tfm_spm_hal_nvic_interrupt_target_state_cfg();
 c032eea:	f7ee f83a 	bl	c020f62 <tfm_spm_hal_nvic_interrupt_target_state_cfg>
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c032eee:	2800      	cmp	r0, #0
 c032ef0:	d1d8      	bne.n	c032ea4 <tfm_core_init+0x8>
    for (i = 0; i < tfm_core_irq_signals_count; ++i) {
 c032ef2:	4604      	mov	r4, r0
 c032ef4:	4b12      	ldr	r3, [pc, #72]	; (c032f40 <tfm_core_init+0xa4>)
 c032ef6:	4d13      	ldr	r5, [pc, #76]	; (c032f44 <tfm_core_init+0xa8>)
 c032ef8:	681f      	ldr	r7, [r3, #0]
 c032efa:	42bc      	cmp	r4, r7
 c032efc:	d308      	bcc.n	c032f10 <tfm_core_init+0x74>
    plat_err = tfm_spm_hal_nvic_interrupt_enable();
 c032efe:	f7ee f832 	bl	c020f66 <tfm_spm_hal_nvic_interrupt_enable>
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c032f02:	2800      	cmp	r0, #0
 c032f04:	d0cf      	beq.n	c032ea6 <tfm_core_init+0xa>
 c032f06:	e7cd      	b.n	c032ea4 <tfm_core_init+0x8>
    LOG_MSG("Secure image initializing!");
 c032f08:	4b0b      	ldr	r3, [pc, #44]	; (c032f38 <tfm_core_init+0x9c>)
 c032f0a:	4618      	mov	r0, r3
 c032f0c:	df06      	svc	6
 c032f0e:	e7e4      	b.n	c032eda <tfm_core_init+0x3e>
        plat_err = tfm_spm_hal_set_secure_irq_priority(
 c032f10:	f995 6008 	ldrsb.w	r6, [r5, #8]
 c032f14:	68e9      	ldr	r1, [r5, #12]
 c032f16:	4630      	mov	r0, r6
 c032f18:	f7ed ffac 	bl	c020e74 <tfm_spm_hal_set_secure_irq_priority>
        if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c032f1c:	4601      	mov	r1, r0
 c032f1e:	2800      	cmp	r0, #0
 c032f20:	d1c0      	bne.n	c032ea4 <tfm_core_init+0x8>
        irq_target_state = tfm_spm_hal_set_irq_target_state(
 c032f22:	4630      	mov	r0, r6
 c032f24:	f7ed ffec 	bl	c020f00 <tfm_spm_hal_set_irq_target_state>
 c032f28:	3510      	adds	r5, #16
        if (irq_target_state != TFM_IRQ_TARGET_STATE_SECURE) {
 c032f2a:	2800      	cmp	r0, #0
 c032f2c:	d1ba      	bne.n	c032ea4 <tfm_core_init+0x8>
    for (i = 0; i < tfm_core_irq_signals_count; ++i) {
 c032f2e:	3401      	adds	r4, #1
 c032f30:	e7e3      	b.n	c032efa <tfm_core_init+0x5e>
 c032f32:	bf00      	nop
 c032f34:	0c034fc8 	.word	0x0c034fc8
 c032f38:	0c03709d 	.word	0x0c03709d
 c032f3c:	0c0370e3 	.word	0x0c0370e3
 c032f40:	0c037258 	.word	0x0c037258
 c032f44:	0c037248 	.word	0x0c037248

0c032f48 <main>:
    }
}
#endif /* TFM_PSA_API */

int main(void)
{
 c032f48:	b508      	push	{r3, lr}
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 c032f4a:	4b12      	ldr	r3, [pc, #72]	; (c032f94 <main+0x4c>)
 c032f4c:	f383 880a 	msr	MSPLIM, r3
    /* set Main Stack Pointer limit */
    tfm_arch_set_msplim((uint32_t)&REGION_NAME(Image$$, ARM_LIB_STACK_MSP,
                                               $$ZI$$Base));

    if (tfm_core_init() != TFM_SUCCESS) {
 c032f50:	f7ff ffa4 	bl	c032e9c <tfm_core_init>
 c032f54:	b108      	cbz	r0, c032f5a <main+0x12>
        tfm_panic();
 c032f56:	f001 fa2f 	bl	c0343b8 <tfm_panic>
    }

    if (tfm_spm_db_init() != SPM_ERR_OK) {
 c032f5a:	f7fd ffd7 	bl	c030f0c <tfm_spm_db_init>
 c032f5e:	b108      	cbz	r0, c032f64 <main+0x1c>
        tfm_panic();
 c032f60:	f001 fa2a 	bl	c0343b8 <tfm_panic>
    }

#if TFM_LVL != 1
    if (tfm_spm_hal_setup_isolation_hw() != TFM_PLAT_ERR_SUCCESS) {
 c032f64:	f7ed fea0 	bl	c020ca8 <tfm_spm_hal_setup_isolation_hw>
 c032f68:	b108      	cbz	r0, c032f6e <main+0x26>
        tfm_panic();
 c032f6a:	f001 fa25 	bl	c0343b8 <tfm_panic>
    tfm_arch_prioritize_secure_exception();
 c032f6e:	f7ff fe09 	bl	c032b84 <tfm_arch_prioritize_secure_exception>
    plat_err = tfm_spm_hal_set_secure_irq_priority(SVCall_IRQn, 0);
 c032f72:	2100      	movs	r1, #0
 c032f74:	f06f 0004 	mvn.w	r0, #4
 c032f78:	f7ed ff7c 	bl	c020e74 <tfm_spm_hal_set_secure_irq_priority>
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c032f7c:	b128      	cbz	r0, c032f8a <main+0x42>
    /*
     * Prioritise secure exceptions to avoid NS being able to pre-empt
     * secure SVC or SecureFault. Do it before PSA API initialization.
     */
    if (tfm_core_set_secure_exception_priorities() != TFM_SUCCESS) {
        tfm_panic();
 c032f7e:	f001 fa1b 	bl	c0343b8 <tfm_panic>
    }
    tfm_spm_init();
 c032f82:	f7fe fa1f 	bl	c0313c4 <tfm_spm_init>
#endif /* !defined(TFM_PSA_API) */
}
 c032f86:	2000      	movs	r0, #0
 c032f88:	bd08      	pop	{r3, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c032f8a:	2260      	movs	r2, #96	; 0x60
 c032f8c:	4b02      	ldr	r3, [pc, #8]	; (c032f98 <main+0x50>)
 c032f8e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 c032f92:	e7f6      	b.n	c032f82 <main+0x3a>
 c032f94:	30030400 	.word	0x30030400
 c032f98:	e000ed00 	.word	0xe000ed00

0c032f9c <tfm_core_log_puts>:
        do {                                        \
            (void)TFM_DRIVER_STDIO.Send(&c, 1);     \
        } while (0)

void tfm_core_log_puts(const char *str)
{
 c032f9c:	b538      	push	{r3, r4, r5, lr}
    TFM_ASSERT(str != NULL);
 c032f9e:	b130      	cbz	r0, c032fae <tfm_core_log_puts+0x12>
 c032fa0:	4604      	mov	r4, r0

    while (*str != '\0') {
        UART_PUTC(*str);
 c032fa2:	4d08      	ldr	r5, [pc, #32]	; (c032fc4 <tfm_core_log_puts+0x28>)
 c032fa4:	4620      	mov	r0, r4
    while (*str != '\0') {
 c032fa6:	7803      	ldrb	r3, [r0, #0]
 c032fa8:	3401      	adds	r4, #1
 c032faa:	b933      	cbnz	r3, c032fba <tfm_core_log_puts+0x1e>
        str++;
    }
}
 c032fac:	bd38      	pop	{r3, r4, r5, pc}
    TFM_ASSERT(str != NULL);
 c032fae:	2218      	movs	r2, #24
 c032fb0:	4905      	ldr	r1, [pc, #20]	; (c032fc8 <tfm_core_log_puts+0x2c>)
 c032fb2:	4806      	ldr	r0, [pc, #24]	; (c032fcc <tfm_core_log_puts+0x30>)
 c032fb4:	f7e5 fa16 	bl	c0183e4 <iprintf>
 c032fb8:	e7fe      	b.n	c032fb8 <tfm_core_log_puts+0x1c>
        UART_PUTC(*str);
 c032fba:	696b      	ldr	r3, [r5, #20]
 c032fbc:	2101      	movs	r1, #1
 c032fbe:	4798      	blx	r3
 c032fc0:	e7f0      	b.n	c032fa4 <tfm_core_log_puts+0x8>
 c032fc2:	bf00      	nop
 c032fc4:	0c034f48 	.word	0x0c034f48
 c032fc8:	0c0370b8 	.word	0x0c0370b8
 c032fcc:	0c037052 	.word	0x0c037052

0c032fd0 <has_access_to_region>:
 * \return TFM_SUCCESS if the partition has access to the memory range,
 *         TFM_ERROR_GENERIC otherwise.
 */
static enum tfm_status_e has_access_to_region(const void *p, size_t s,
                                              int flags)
{
 c032fd0:	b538      	push	{r3, r4, r5, lr}
 c032fd2:	4604      	mov	r4, r0
 c032fd4:	460d      	mov	r5, r1
    int32_t range_access_allowed_by_mpu;

    /* Use the TT instruction to check access to the partition's regions*/
    range_access_allowed_by_mpu =
                          cmse_check_address_range((void *)p, s, flags) != NULL;
 c032fd6:	f7e8 fc11 	bl	c01b7fc <cmse_check_address_range>

    if (range_access_allowed_by_mpu) {
 c032fda:	b970      	cbnz	r0, c032ffa <has_access_to_region+0x2a>
    }

    /* If all else fails, check whether the region is in the non-secure
     * memory
     */
    if ((check_address_range(p, s, NS_CODE_START,
 c032fdc:	4b09      	ldr	r3, [pc, #36]	; (c033004 <has_access_to_region+0x34>)
 c032fde:	4a0a      	ldr	r2, [pc, #40]	; (c033008 <has_access_to_region+0x38>)
 c032fe0:	4629      	mov	r1, r5
 c032fe2:	4620      	mov	r0, r4
 c032fe4:	f000 fbba 	bl	c03375c <check_address_range>
 c032fe8:	b138      	cbz	r0, c032ffa <has_access_to_region+0x2a>
                             NS_CODE_LIMIT) == TFM_SUCCESS) ||
        (check_address_range(p, s, NS_DATA_START,
 c032fea:	4b08      	ldr	r3, [pc, #32]	; (c03300c <has_access_to_region+0x3c>)
 c032fec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 c032ff0:	4629      	mov	r1, r5
 c032ff2:	4620      	mov	r0, r4
 c032ff4:	f000 fbb2 	bl	c03375c <check_address_range>
                             NS_CODE_LIMIT) == TFM_SUCCESS) ||
 c032ff8:	b908      	cbnz	r0, c032ffe <has_access_to_region+0x2e>
                             NS_DATA_LIMIT) == TFM_SUCCESS)) {
        return TFM_SUCCESS;
 c032ffa:	2000      	movs	r0, #0
    } else {
        return TFM_ERROR_GENERIC;
    }
}
 c032ffc:	bd38      	pop	{r3, r4, r5, pc}
        return TFM_ERROR_GENERIC;
 c032ffe:	201f      	movs	r0, #31
 c033000:	e7fc      	b.n	c032ffc <has_access_to_region+0x2c>
 c033002:	bf00      	nop
 c033004:	900fdfff 	.word	0x900fdfff
 c033008:	90000400 	.word	0x90000400
 c03300c:	2002ffff 	.word	0x2002ffff

0c033010 <tfm_core_has_read_access_to_region>:
                                                     uint32_t privileged)
{
    int flags = CMSE_MPU_READ;

    if (privileged == TFM_PARTITION_UNPRIVILEGED_MODE) {
        flags |= CMSE_MPU_UNPRIV;
 c033010:	2b00      	cmp	r3, #0
 c033012:	bf14      	ite	ne
 c033014:	2308      	movne	r3, #8
 c033016:	230c      	moveq	r3, #12
    }

    if (ns_caller) {
 c033018:	b10a      	cbz	r2, c03301e <tfm_core_has_read_access_to_region+0xe>
        flags |= CMSE_NONSECURE;
 c03301a:	f043 0312 	orr.w	r3, r3, #18
    }

    return has_access_to_region(p, s, flags);
 c03301e:	461a      	mov	r2, r3
 c033020:	f7ff bfd6 	b.w	c032fd0 <has_access_to_region>

0c033024 <tfm_core_has_write_access_to_region>:
                                                      uint32_t privileged)
{
    int flags = CMSE_MPU_READWRITE;

    if (privileged == TFM_PARTITION_UNPRIVILEGED_MODE) {
        flags |= CMSE_MPU_UNPRIV;
 c033024:	2b00      	cmp	r3, #0
 c033026:	bf14      	ite	ne
 c033028:	2301      	movne	r3, #1
 c03302a:	2305      	moveq	r3, #5
    }

    if (ns_caller) {
 c03302c:	b10a      	cbz	r2, c033032 <tfm_core_has_write_access_to_region+0xe>
        flags |= CMSE_NONSECURE;
 c03302e:	f043 0312 	orr.w	r3, r3, #18
    }

    return has_access_to_region(p, s, flags);
 c033032:	461a      	mov	r2, r3
 c033034:	f7ff bfcc 	b.w	c032fd0 <has_access_to_region>

0c033038 <tfm_core_svc_handler>:
#include "tfm_svcalls.h"

extern void tfm_psa_ipc_request_handler(const uint32_t svc_args[]);

uint32_t tfm_core_svc_handler(uint32_t *svc_args, uint32_t exc_return)
{
 c033038:	b570      	push	{r4, r5, r6, lr}
    /*
     * Stack contains:
     * r0, r1, r2, r3, r12, r14 (lr), the return address and xPSR
     * First argument (r0) is svc_args[0]
     */
    if (is_return_secure_stack(exc_return)) {
 c03303a:	f011 0440 	ands.w	r4, r1, #64	; 0x40
{
 c03303e:	4606      	mov	r6, r0
 c033040:	460d      	mov	r5, r1
    if (is_return_secure_stack(exc_return)) {
 c033042:	d015      	beq.n	c033070 <tfm_core_svc_handler+0x38>
        /* SV called directly from secure context. Check instruction for
         * svc_number
         */
        svc_number = ((uint8_t *)svc_args[6])[-2];
 c033044:	6983      	ldr	r3, [r0, #24]
 c033046:	f813 4c02 	ldrb.w	r4, [r3, #-2]
         * NS cannot directly trigger S SVC so this should not happen. This is
         * an unrecoverable error.
         */
        tfm_panic();
    }
    switch (svc_number) {
 c03304a:	2c07      	cmp	r4, #7
 c03304c:	d021      	beq.n	c033092 <tfm_core_svc_handler+0x5a>
 c03304e:	d808      	bhi.n	c033062 <tfm_core_svc_handler+0x2a>
 c033050:	2c06      	cmp	r4, #6
 c033052:	d014      	beq.n	c03307e <tfm_core_svc_handler+0x46>
        break;
	case TFM_SVC_GET_BOOT_VALUE:
        tfm_core_get_boot_value_handler(svc_args);
        break;
    default:
        svc_args[0] = SVC_Handler_IPC((tfm_svc_number_t)svc_number, svc_args, exc_return);
 c033054:	462a      	mov	r2, r5
 c033056:	4631      	mov	r1, r6
 c033058:	4620      	mov	r0, r4
 c03305a:	f000 fe65 	bl	c033d28 <SVC_Handler_IPC>
 c03305e:	6030      	str	r0, [r6, #0]
        break;
 c033060:	e00b      	b.n	c03307a <tfm_core_svc_handler+0x42>
    switch (svc_number) {
 c033062:	2c0e      	cmp	r4, #14
 c033064:	d007      	beq.n	c033076 <tfm_core_svc_handler+0x3e>
 c033066:	2c1d      	cmp	r4, #29
 c033068:	d1f4      	bne.n	c033054 <tfm_core_svc_handler+0x1c>
        tfm_core_get_boot_value_handler(svc_args);
 c03306a:	f7ff fe69 	bl	c032d40 <tfm_core_get_boot_value_handler>
        break;
 c03306e:	e004      	b.n	c03307a <tfm_core_svc_handler+0x42>
        tfm_panic();
 c033070:	f001 f9a2 	bl	c0343b8 <tfm_panic>
 c033074:	e7ee      	b.n	c033054 <tfm_core_svc_handler+0x1c>
        tfm_psa_ipc_request_handler(svc_args);
 c033076:	f000 fb4d 	bl	c033714 <tfm_psa_ipc_request_handler>
    }

    return exc_return;
}
 c03307a:	4628      	mov	r0, r5
 c03307c:	bd70      	pop	{r4, r5, r6, pc}
        TFM_CORE_MSG((char *)svc_args[0]);
 c03307e:	4806      	ldr	r0, [pc, #24]	; (c033098 <tfm_core_svc_handler+0x60>)
 c033080:	f7ff ff8c 	bl	c032f9c <tfm_core_log_puts>
 c033084:	6830      	ldr	r0, [r6, #0]
 c033086:	f7ff ff89 	bl	c032f9c <tfm_core_log_puts>
 c03308a:	4804      	ldr	r0, [pc, #16]	; (c03309c <tfm_core_svc_handler+0x64>)
 c03308c:	f7ff ff86 	bl	c032f9c <tfm_core_log_puts>
        break;
 c033090:	e7f3      	b.n	c03307a <tfm_core_svc_handler+0x42>
        tfm_core_get_boot_data_handler(svc_args);
 c033092:	f7ff fe9f 	bl	c032dd4 <tfm_core_get_boot_data_handler>
        break;
 c033096:	e7f0      	b.n	c03307a <tfm_core_svc_handler+0x42>
 c033098:	0c0370ca 	.word	0x0c0370ca
 c03309c:	0c0370df 	.word	0x0c0370df

0c0330a0 <tfm_core_util_memcpy>:
void *tfm_core_util_memcpy(void *dest, const void *src, size_t n)
{
    union mem_ptr_t p_dest;
    union mem_ptr_t p_src;

    TFM_ASSERT(dest != src);
 c0330a0:	4288      	cmp	r0, r1
{
 c0330a2:	b570      	push	{r4, r5, r6, lr}
    TFM_ASSERT(dest != src);
 c0330a4:	d105      	bne.n	c0330b2 <tfm_core_util_memcpy+0x12>
 c0330a6:	2217      	movs	r2, #23
 c0330a8:	4916      	ldr	r1, [pc, #88]	; (c033104 <tfm_core_util_memcpy+0x64>)
 c0330aa:	4817      	ldr	r0, [pc, #92]	; (c033108 <tfm_core_util_memcpy+0x68>)
 c0330ac:	f7e5 f99a 	bl	c0183e4 <iprintf>
 c0330b0:	e7fe      	b.n	c0330b0 <tfm_core_util_memcpy+0x10>

    /* Check src and dest address value to see if dword copy is applicable.
     * If applicable, perform byte copy for the first several unaligned bytes,
     * and then, dword copy for aligned memory.
     */
    if (!((p_dest.mem_ptr ^ p_src.mem_ptr) & (sizeof(uint32_t) - 1))) {
 c0330b2:	ea80 0301 	eor.w	r3, r0, r1
 c0330b6:	079b      	lsls	r3, r3, #30
    p_dest.p_byte = (uint8_t *)dest;
 c0330b8:	4604      	mov	r4, r0
    if (!((p_dest.mem_ptr ^ p_src.mem_ptr) & (sizeof(uint32_t) - 1))) {
 c0330ba:	d008      	beq.n	c0330ce <tfm_core_util_memcpy+0x2e>
 c0330bc:	2300      	movs	r3, #0
    }

    /* Dword copy is not applicable, perform byte copy for the remaining
     * unaligned memory.
     */
    while (n--) {
 c0330be:	429a      	cmp	r2, r3
 c0330c0:	d11c      	bne.n	c0330fc <tfm_core_util_memcpy+0x5c>
        *p_dest.p_byte++ = *p_src.p_byte++;
    }

    return dest;
}
 c0330c2:	bd70      	pop	{r4, r5, r6, pc}
            *p_dest.p_byte++ = *p_src.p_byte++;
 c0330c4:	f811 3b01 	ldrb.w	r3, [r1], #1
            n--;
 c0330c8:	3a01      	subs	r2, #1
            *p_dest.p_byte++ = *p_src.p_byte++;
 c0330ca:	f804 3b01 	strb.w	r3, [r4], #1
        while (n && (p_dest.mem_ptr & (sizeof(uint32_t) - 1))) {
 c0330ce:	2a00      	cmp	r2, #0
 c0330d0:	d0f7      	beq.n	c0330c2 <tfm_core_util_memcpy+0x22>
 c0330d2:	f014 0303 	ands.w	r3, r4, #3
 c0330d6:	d1f5      	bne.n	c0330c4 <tfm_core_util_memcpy+0x24>
        while (n >= sizeof(uint32_t)) {
 c0330d8:	18d5      	adds	r5, r2, r3
 c0330da:	2d03      	cmp	r5, #3
 c0330dc:	d808      	bhi.n	c0330f0 <tfm_core_util_memcpy+0x50>
 c0330de:	f06f 0503 	mvn.w	r5, #3
 c0330e2:	0893      	lsrs	r3, r2, #2
 c0330e4:	fb05 2203 	mla	r2, r5, r3, r2
 c0330e8:	009b      	lsls	r3, r3, #2
 c0330ea:	441c      	add	r4, r3
 c0330ec:	4419      	add	r1, r3
 c0330ee:	e7e5      	b.n	c0330bc <tfm_core_util_memcpy+0x1c>
            *p_dest.p_dword++ = *p_src.p_dword++;
 c0330f0:	1acd      	subs	r5, r1, r3
 c0330f2:	682e      	ldr	r6, [r5, #0]
 c0330f4:	1ae5      	subs	r5, r4, r3
 c0330f6:	602e      	str	r6, [r5, #0]
 c0330f8:	3b04      	subs	r3, #4
 c0330fa:	e7ed      	b.n	c0330d8 <tfm_core_util_memcpy+0x38>
        *p_dest.p_byte++ = *p_src.p_byte++;
 c0330fc:	5ccd      	ldrb	r5, [r1, r3]
 c0330fe:	54e5      	strb	r5, [r4, r3]
 c033100:	3301      	adds	r3, #1
 c033102:	e7dc      	b.n	c0330be <tfm_core_util_memcpy+0x1e>
 c033104:	0c0370e6 	.word	0x0c0370e6
 c033108:	0c037052 	.word	0x0c037052

0c03310c <tfm_core_util_memset>:
void *tfm_core_util_memset(void *s, int c, size_t n)
{
    union mem_ptr_t p_mem;
    uint32_t quad_pattern;

    p_mem.p_byte = (uint8_t *)s;
 c03310c:	4603      	mov	r3, r0
{
 c03310e:	b5f0      	push	{r4, r5, r6, r7, lr}
    quad_pattern = (((uint8_t)c) << 24) | (((uint8_t)c) << 16) |
 c033110:	b2cd      	uxtb	r5, r1
                   (((uint8_t)c) << 8) | ((uint8_t)c);

    while (n && (p_mem.mem_ptr & (sizeof(uint32_t) - 1))) {
 c033112:	b1c2      	cbz	r2, c033146 <tfm_core_util_memset+0x3a>
 c033114:	079c      	lsls	r4, r3, #30
 c033116:	d117      	bne.n	c033148 <tfm_core_util_memset+0x3c>
    quad_pattern = (((uint8_t)c) << 24) | (((uint8_t)c) << 16) |
 c033118:	040e      	lsls	r6, r1, #16
                   (((uint8_t)c) << 8) | ((uint8_t)c);
 c03311a:	ea45 6401 	orr.w	r4, r5, r1, lsl #24
    quad_pattern = (((uint8_t)c) << 24) | (((uint8_t)c) << 16) |
 c03311e:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
                   (((uint8_t)c) << 8) | ((uint8_t)c);
 c033122:	0209      	lsls	r1, r1, #8
 c033124:	4334      	orrs	r4, r6
 c033126:	b289      	uxth	r1, r1
 c033128:	4321      	orrs	r1, r4
    quad_pattern = (((uint8_t)c) << 24) | (((uint8_t)c) << 16) |
 c03312a:	4614      	mov	r4, r2
        *p_mem.p_byte++ = (uint8_t)c;
        n--;
    }

    while (n >= sizeof(uint32_t)) {
        *p_mem.p_dword++ = quad_pattern;
 c03312c:	18d6      	adds	r6, r2, r3
    while (n >= sizeof(uint32_t)) {
 c03312e:	2c03      	cmp	r4, #3
 c033130:	d80e      	bhi.n	c033150 <tfm_core_util_memset+0x44>
 c033132:	f06f 0103 	mvn.w	r1, #3
 c033136:	0894      	lsrs	r4, r2, #2
 c033138:	fb01 2204 	mla	r2, r1, r4, r2
 c03313c:	2100      	movs	r1, #0
 c03313e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        n -= sizeof(uint32_t);
    }

    while (n--) {
 c033142:	4291      	cmp	r1, r2
 c033144:	d108      	bne.n	c033158 <tfm_core_util_memset+0x4c>
        *p_mem.p_byte++ = (uint8_t)c;
    }

    return s;
}
 c033146:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *p_mem.p_byte++ = (uint8_t)c;
 c033148:	f803 5b01 	strb.w	r5, [r3], #1
        n--;
 c03314c:	3a01      	subs	r2, #1
 c03314e:	e7e0      	b.n	c033112 <tfm_core_util_memset+0x6>
        *p_mem.p_dword++ = quad_pattern;
 c033150:	1b37      	subs	r7, r6, r4
 c033152:	6039      	str	r1, [r7, #0]
        n -= sizeof(uint32_t);
 c033154:	3c04      	subs	r4, #4
 c033156:	e7ea      	b.n	c03312e <tfm_core_util_memset+0x22>
        *p_mem.p_byte++ = (uint8_t)c;
 c033158:	54cd      	strb	r5, [r1, r3]
 c03315a:	3101      	adds	r1, #1
 c03315c:	e7f1      	b.n	c033142 <tfm_core_util_memset+0x36>

0c03315e <tfm_its_init>:
    tfm_memcpy(fid, (const void *)&client_id, sizeof(client_id));
    tfm_memcpy(fid + sizeof(client_id), (const void *)&uid, sizeof(uid));
}

psa_status_t tfm_its_init(void)
{
 c03315e:	b508      	push	{r3, lr}
    psa_status_t status;

    status = its_flash_fs_prepare();
 c033160:	f7fd f9e8 	bl	c030534 <its_flash_fs_prepare>
     * This flag can be set if the ITS memory area is located in persistent
     * memory without a previous valid ITS flash layout in it. That is the case
     * when it is the first time in the device life that the ITS service is
     * executed.
     */
     if (status != PSA_SUCCESS) {
 c033164:	b130      	cbz	r0, c033174 <tfm_its_init+0x16>
        /* Remove all data in the ITS memory area and create a valid ITS flash
         * layout in that area.
         */
        status = its_flash_fs_wipe_all();
 c033166:	f7fd f9e7 	bl	c030538 <its_flash_fs_wipe_all>
        if (status != PSA_SUCCESS) {
 c03316a:	b918      	cbnz	r0, c033174 <tfm_its_init+0x16>
        status = its_flash_fs_prepare();
    }
#endif /* ITS_CREATE_FLASH_LAYOUT */

    return status;
}
 c03316c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        status = its_flash_fs_prepare();
 c033170:	f7fd b9e0 	b.w	c030534 <its_flash_fs_prepare>
}
 c033174:	bd08      	pop	{r3, pc}
	...

0c033178 <tfm_its_set>:
psa_status_t tfm_its_set(int32_t client_id,
                         psa_storage_uid_t uid,
                         size_t data_length,
                         const void *p_data,
                         psa_storage_create_flags_t create_flags)
{
 c033178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c03317c:	4690      	mov	r8, r2
 c03317e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 c033182:	4699      	mov	r9, r3
    psa_status_t status;

    /* Check that the UID is valid */
    if (uid == TFM_ITS_INVALID_UID) {
 c033184:	ea58 0309 	orrs.w	r3, r8, r9
{
 c033188:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    if (uid == TFM_ITS_INVALID_UID) {
 c03318a:	d02b      	beq.n	c0331e4 <tfm_its_set+0x6c>
        return PSA_ERROR_INVALID_ARGUMENT;
    }

    /* Check that the create_flags does not contain any unsupported flags */
    if (create_flags & ~(PSA_STORAGE_FLAG_WRITE_ONCE |
 c03318c:	f035 0307 	bics.w	r3, r5, #7
 c033190:	d12b      	bne.n	c0331ea <tfm_its_set+0x72>
 c033192:	4c19      	ldr	r4, [pc, #100]	; (c0331f8 <tfm_its_set+0x80>)
 c033194:	ab02      	add	r3, sp, #8
 c033196:	4622      	mov	r2, r4
 c033198:	e963 8902 	strd	r8, r9, [r3, #-8]!

    /* Set file id */
    tfm_its_get_fid(client_id, uid, g_fid);

    /* Read file info */
    status = its_flash_fs_file_get_info(g_fid, &g_file_info);
 c03319c:	f8df 805c 	ldr.w	r8, [pc, #92]	; c0331fc <tfm_its_set+0x84>
 c0331a0:	f842 0b04 	str.w	r0, [r2], #4
 c0331a4:	cb03      	ldmia	r3!, {r0, r1}
 c0331a6:	6060      	str	r0, [r4, #4]
 c0331a8:	6051      	str	r1, [r2, #4]
 c0331aa:	4620      	mov	r0, r4
 c0331ac:	4641      	mov	r1, r8
 c0331ae:	f7fd fa24 	bl	c0305fa <its_flash_fs_file_get_info>
    if (status == PSA_SUCCESS) {
 c0331b2:	b988      	cbnz	r0, c0331d8 <tfm_its_set+0x60>
        /* If the object exists and has the write once flag set, then it
         * cannot be modified. Otherwise it needs to be removed.
         */
        if (g_file_info.flags & PSA_STORAGE_FLAG_WRITE_ONCE) {
 c0331b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 c0331b8:	07db      	lsls	r3, r3, #31
 c0331ba:	d419      	bmi.n	c0331f0 <tfm_its_set+0x78>
            return PSA_ERROR_NOT_PERMITTED;
        } else {
            status = its_flash_fs_file_delete(g_fid);
 c0331bc:	4620      	mov	r0, r4
 c0331be:	f7fd fa3e 	bl	c03063e <its_flash_fs_file_delete>
            if (status != PSA_SUCCESS) {
 c0331c2:	b960      	cbnz	r0, c0331de <tfm_its_set+0x66>
         */
        return status;
    }

    /* Create the file in the file system */
    return its_flash_fs_file_create(g_fid,
 c0331c4:	462b      	mov	r3, r5
 c0331c6:	4632      	mov	r2, r6
 c0331c8:	4631      	mov	r1, r6
 c0331ca:	480b      	ldr	r0, [pc, #44]	; (c0331f8 <tfm_its_set+0x80>)
 c0331cc:	970a      	str	r7, [sp, #40]	; 0x28
                                    data_length,
                                    data_length,
                                    (uint32_t)create_flags,
                                    (const uint8_t *)p_data);
}
 c0331ce:	b003      	add	sp, #12
 c0331d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return its_flash_fs_file_create(g_fid,
 c0331d4:	f7fd b9b2 	b.w	c03053c <its_flash_fs_file_create>
    } else if (status != PSA_ERROR_DOES_NOT_EXIST) {
 c0331d8:	f110 0f8c 	cmn.w	r0, #140	; 0x8c
 c0331dc:	d0f2      	beq.n	c0331c4 <tfm_its_set+0x4c>
}
 c0331de:	b003      	add	sp, #12
 c0331e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return PSA_ERROR_INVALID_ARGUMENT;
 c0331e4:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c0331e8:	e7f9      	b.n	c0331de <tfm_its_set+0x66>
        return PSA_ERROR_NOT_SUPPORTED;
 c0331ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c0331ee:	e7f6      	b.n	c0331de <tfm_its_set+0x66>
            return PSA_ERROR_NOT_PERMITTED;
 c0331f0:	f06f 0084 	mvn.w	r0, #132	; 0x84
 c0331f4:	e7f3      	b.n	c0331de <tfm_its_set+0x66>
 c0331f6:	bf00      	nop
 c0331f8:	3003c6ec 	.word	0x3003c6ec
 c0331fc:	3003c6f8 	.word	0x3003c6f8

0c033200 <tfm_its_get>:
                         psa_storage_uid_t uid,
                         size_t data_offset,
                         size_t data_size,
                         void *p_data,
                         size_t *p_data_length)
{
 c033200:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c033202:	4614      	mov	r4, r2
 c033204:	461d      	mov	r5, r3
    psa_status_t status;

    /* Check that the UID is valid */
    if (uid == TFM_ITS_INVALID_UID) {
 c033206:	ea54 0305 	orrs.w	r3, r4, r5
{
 c03320a:	9e06      	ldr	r6, [sp, #24]
    if (uid == TFM_ITS_INVALID_UID) {
 c03320c:	d103      	bne.n	c033216 <tfm_its_get+0x16>
        return PSA_ERROR_INVALID_ARGUMENT;
 c03320e:	f06f 0086 	mvn.w	r0, #134	; 0x86

    /* Update the size of the data placed in p_data */
    *p_data_length = data_size;

    return PSA_SUCCESS;
}
 c033212:	b002      	add	sp, #8
 c033214:	bd70      	pop	{r4, r5, r6, pc}
 c033216:	ab02      	add	r3, sp, #8
 c033218:	e963 4502 	strd	r4, r5, [r3, #-8]!
 c03321c:	4d10      	ldr	r5, [pc, #64]	; (c033260 <tfm_its_get+0x60>)
    status = its_flash_fs_file_get_info(g_fid, &g_file_info);
 c03321e:	4c11      	ldr	r4, [pc, #68]	; (c033264 <tfm_its_get+0x64>)
 c033220:	462a      	mov	r2, r5
 c033222:	f842 0b04 	str.w	r0, [r2], #4
 c033226:	cb03      	ldmia	r3!, {r0, r1}
 c033228:	6068      	str	r0, [r5, #4]
 c03322a:	6051      	str	r1, [r2, #4]
 c03322c:	4628      	mov	r0, r5
 c03322e:	4621      	mov	r1, r4
 c033230:	f7fd f9e3 	bl	c0305fa <its_flash_fs_file_get_info>
    if (status != PSA_SUCCESS) {
 c033234:	2800      	cmp	r0, #0
 c033236:	d1ec      	bne.n	c033212 <tfm_its_get+0x12>
    if (data_offset > g_file_info.size_current) {
 c033238:	6824      	ldr	r4, [r4, #0]
 c03323a:	42b4      	cmp	r4, r6
 c03323c:	d3e7      	bcc.n	c03320e <tfm_its_get+0xe>
    data_size = ITS_UTILS_MIN(data_size,
 c03323e:	9b07      	ldr	r3, [sp, #28]
 c033240:	1ba4      	subs	r4, r4, r6
 c033242:	429c      	cmp	r4, r3
 c033244:	bf28      	it	cs
 c033246:	461c      	movcs	r4, r3
    status = its_flash_fs_file_read(g_fid, data_size, data_offset, p_data);
 c033248:	4632      	mov	r2, r6
 c03324a:	9b08      	ldr	r3, [sp, #32]
 c03324c:	4621      	mov	r1, r4
 c03324e:	4628      	mov	r0, r5
 c033250:	f7fd fa57 	bl	c030702 <its_flash_fs_file_read>
    if (status != PSA_SUCCESS) {
 c033254:	2800      	cmp	r0, #0
 c033256:	d1dc      	bne.n	c033212 <tfm_its_get+0x12>
    *p_data_length = data_size;
 c033258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c03325a:	601c      	str	r4, [r3, #0]
    return PSA_SUCCESS;
 c03325c:	e7d9      	b.n	c033212 <tfm_its_get+0x12>
 c03325e:	bf00      	nop
 c033260:	3003c6ec 	.word	0x3003c6ec
 c033264:	3003c6f8 	.word	0x3003c6f8

0c033268 <tfm_its_get_info>:

psa_status_t tfm_its_get_info(int32_t client_id, psa_storage_uid_t uid,
                              struct psa_storage_info_t *p_info)
{
 c033268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c03326a:	4616      	mov	r6, r2
 c03326c:	461f      	mov	r7, r3
    psa_status_t status;

    /* Check that the UID is valid */
    if (uid == TFM_ITS_INVALID_UID) {
 c03326e:	ea56 0307 	orrs.w	r3, r6, r7
{
 c033272:	9c08      	ldr	r4, [sp, #32]
    if (uid == TFM_ITS_INVALID_UID) {
 c033274:	d016      	beq.n	c0332a4 <tfm_its_get_info+0x3c>
 c033276:	4a0d      	ldr	r2, [pc, #52]	; (c0332ac <tfm_its_get_info+0x44>)
 c033278:	ab02      	add	r3, sp, #8
 c03327a:	4615      	mov	r5, r2
 c03327c:	e963 6702 	strd	r6, r7, [r3, #-8]!
 c033280:	f845 0b04 	str.w	r0, [r5], #4
 c033284:	cb03      	ldmia	r3!, {r0, r1}
 c033286:	6050      	str	r0, [r2, #4]
 c033288:	6069      	str	r1, [r5, #4]

    /* Set file id */
    tfm_its_get_fid(client_id, uid, g_fid);

    /* Read file info */
    status = its_flash_fs_file_get_info(g_fid, &g_file_info);
 c03328a:	4d09      	ldr	r5, [pc, #36]	; (c0332b0 <tfm_its_get_info+0x48>)
 c03328c:	4610      	mov	r0, r2
 c03328e:	4629      	mov	r1, r5
 c033290:	f7fd f9b3 	bl	c0305fa <its_flash_fs_file_get_info>
    if (status != PSA_SUCCESS) {
 c033294:	b920      	cbnz	r0, c0332a0 <tfm_its_get_info+0x38>
        return status;
    }

    /* Copy file info to the PSA info struct */
    p_info->capacity = g_file_info.size_current;
 c033296:	682b      	ldr	r3, [r5, #0]
    p_info->size = g_file_info.size_current;
 c033298:	e9c4 3300 	strd	r3, r3, [r4]
    p_info->flags = g_file_info.flags;
 c03329c:	68ab      	ldr	r3, [r5, #8]
 c03329e:	60a3      	str	r3, [r4, #8]

    return PSA_SUCCESS;
}
 c0332a0:	b003      	add	sp, #12
 c0332a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return PSA_ERROR_INVALID_ARGUMENT;
 c0332a4:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c0332a8:	e7fa      	b.n	c0332a0 <tfm_its_get_info+0x38>
 c0332aa:	bf00      	nop
 c0332ac:	3003c6ec 	.word	0x3003c6ec
 c0332b0:	3003c6f8 	.word	0x3003c6f8

0c0332b4 <tfm_its_remove>:

psa_status_t tfm_its_remove(int32_t client_id, psa_storage_uid_t uid)
{
 c0332b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c0332b6:	4614      	mov	r4, r2
 c0332b8:	461d      	mov	r5, r3
    psa_status_t status;

    /* Check that the UID is valid */
    if (uid == TFM_ITS_INVALID_UID) {
 c0332ba:	ea54 0305 	orrs.w	r3, r4, r5
 c0332be:	d018      	beq.n	c0332f2 <tfm_its_remove+0x3e>
 c0332c0:	ab02      	add	r3, sp, #8
 c0332c2:	e963 4502 	strd	r4, r5, [r3, #-8]!
 c0332c6:	4c0e      	ldr	r4, [pc, #56]	; (c033300 <tfm_its_remove+0x4c>)
    }

    /* Set file id */
    tfm_its_get_fid(client_id, uid, g_fid);

    status = its_flash_fs_file_get_info(g_fid, &g_file_info);
 c0332c8:	4d0e      	ldr	r5, [pc, #56]	; (c033304 <tfm_its_remove+0x50>)
 c0332ca:	4622      	mov	r2, r4
 c0332cc:	f842 0b04 	str.w	r0, [r2], #4
 c0332d0:	cb03      	ldmia	r3!, {r0, r1}
 c0332d2:	6060      	str	r0, [r4, #4]
 c0332d4:	6051      	str	r1, [r2, #4]
 c0332d6:	4620      	mov	r0, r4
 c0332d8:	4629      	mov	r1, r5
 c0332da:	f7fd f98e 	bl	c0305fa <its_flash_fs_file_get_info>
    if (status != PSA_SUCCESS) {
 c0332de:	b950      	cbnz	r0, c0332f6 <tfm_its_remove+0x42>
    }

    /* If the object exists and has the write once flag set, then it
     * cannot be deleted.
     */
    if (g_file_info.flags & PSA_STORAGE_FLAG_WRITE_ONCE) {
 c0332e0:	68ab      	ldr	r3, [r5, #8]
 c0332e2:	07db      	lsls	r3, r3, #31
 c0332e4:	d409      	bmi.n	c0332fa <tfm_its_remove+0x46>
        return PSA_ERROR_NOT_PERMITTED;
    }

    /* Delete old file from the persistent area */
    return its_flash_fs_file_delete(g_fid);
 c0332e6:	4620      	mov	r0, r4
}
 c0332e8:	b003      	add	sp, #12
 c0332ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return its_flash_fs_file_delete(g_fid);
 c0332ee:	f7fd b9a6 	b.w	c03063e <its_flash_fs_file_delete>
        return PSA_ERROR_INVALID_ARGUMENT;
 c0332f2:	f06f 0086 	mvn.w	r0, #134	; 0x86
}
 c0332f6:	b003      	add	sp, #12
 c0332f8:	bd30      	pop	{r4, r5, pc}
        return PSA_ERROR_NOT_PERMITTED;
 c0332fa:	f06f 0084 	mvn.w	r0, #132	; 0x84
 c0332fe:	e7fa      	b.n	c0332f6 <tfm_its_remove+0x42>
 c033300:	3003c6ec 	.word	0x3003c6ec
 c033304:	3003c6f8 	.word	0x3003c6f8

0c033308 <tfm_its_remove_ipc>:
static psa_status_t tfm_its_remove_ipc(const psa_msg_t *msg)
{
    psa_storage_uid_t uid;
    size_t num;

    if (msg->in_size[0] != sizeof(uid)) {
 c033308:	6903      	ldr	r3, [r0, #16]
{
 c03330a:	b513      	push	{r0, r1, r4, lr}
    if (msg->in_size[0] != sizeof(uid)) {
 c03330c:	2b08      	cmp	r3, #8
{
 c03330e:	4604      	mov	r4, r0
    if (msg->in_size[0] != sizeof(uid)) {
 c033310:	d003      	beq.n	c03331a <tfm_its_remove_ipc+0x12>
        /* The input argument size is incorrect */
        return PSA_ERROR_PROGRAMMER_ERROR;
 c033312:	f06f 0080 	mvn.w	r0, #128	; 0x80
    if (num != sizeof(uid)) {
        return PSA_ERROR_PROGRAMMER_ERROR;
    }

    return tfm_its_remove(msg->client_id, uid);
}
 c033316:	b002      	add	sp, #8
 c033318:	bd10      	pop	{r4, pc}
    num = psa_read(msg->handle, 0, &uid, sizeof(uid));
 c03331a:	466a      	mov	r2, sp
 c03331c:	2100      	movs	r1, #0
 c03331e:	6840      	ldr	r0, [r0, #4]
 c033320:	f7e7 f8ae 	bl	c01a480 <psa_read>
    if (num != sizeof(uid)) {
 c033324:	2808      	cmp	r0, #8
 c033326:	d1f4      	bne.n	c033312 <tfm_its_remove_ipc+0xa>
    return tfm_its_remove(msg->client_id, uid);
 c033328:	e9dd 2300 	ldrd	r2, r3, [sp]
 c03332c:	68a0      	ldr	r0, [r4, #8]
 c03332e:	f7ff ffc1 	bl	c0332b4 <tfm_its_remove>
 c033332:	e7f0      	b.n	c033316 <tfm_its_remove_ipc+0xe>

0c033334 <tfm_its_get_info_ipc>:
{
 c033334:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (msg->in_size[0] != sizeof(uid) ||
 c033336:	6903      	ldr	r3, [r0, #16]
{
 c033338:	b089      	sub	sp, #36	; 0x24
    if (msg->in_size[0] != sizeof(uid) ||
 c03333a:	2b08      	cmp	r3, #8
{
 c03333c:	4604      	mov	r4, r0
    if (msg->in_size[0] != sizeof(uid) ||
 c03333e:	d004      	beq.n	c03334a <tfm_its_get_info_ipc+0x16>
        return PSA_ERROR_PROGRAMMER_ERROR;
 c033340:	f06f 0580 	mvn.w	r5, #128	; 0x80
}
 c033344:	4628      	mov	r0, r5
 c033346:	b009      	add	sp, #36	; 0x24
 c033348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (msg->in_size[0] != sizeof(uid) ||
 c03334a:	6a07      	ldr	r7, [r0, #32]
 c03334c:	2f0c      	cmp	r7, #12
 c03334e:	d1f7      	bne.n	c033340 <tfm_its_get_info_ipc+0xc>
    num = psa_read(msg->handle, 0, &uid, sizeof(uid));
 c033350:	aa02      	add	r2, sp, #8
 c033352:	2100      	movs	r1, #0
 c033354:	6840      	ldr	r0, [r0, #4]
 c033356:	f7e7 f893 	bl	c01a480 <psa_read>
    if (num != sizeof(uid)) {
 c03335a:	2808      	cmp	r0, #8
 c03335c:	d1f0      	bne.n	c033340 <tfm_its_get_info_ipc+0xc>
    status = tfm_its_get_info(msg->client_id, uid, &info);
 c03335e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c033362:	ae05      	add	r6, sp, #20
 c033364:	9600      	str	r6, [sp, #0]
 c033366:	68a0      	ldr	r0, [r4, #8]
 c033368:	f7ff ff7e 	bl	c033268 <tfm_its_get_info>
    if (status == PSA_SUCCESS) {
 c03336c:	4605      	mov	r5, r0
 c03336e:	2800      	cmp	r0, #0
 c033370:	d1e8      	bne.n	c033344 <tfm_its_get_info_ipc+0x10>
        psa_write(msg->handle, 0, &info, sizeof(info));
 c033372:	4601      	mov	r1, r0
 c033374:	463b      	mov	r3, r7
 c033376:	4632      	mov	r2, r6
 c033378:	6860      	ldr	r0, [r4, #4]
 c03337a:	f7e7 f885 	bl	c01a488 <psa_write>
 c03337e:	e7e1      	b.n	c033344 <tfm_its_get_info_ipc+0x10>

0c033380 <tfm_its_get_ipc>:
{
 c033380:	b570      	push	{r4, r5, r6, lr}
    if (msg->in_size[0] != sizeof(uid) ||
 c033382:	6903      	ldr	r3, [r0, #16]
{
 c033384:	b088      	sub	sp, #32
    if (msg->in_size[0] != sizeof(uid) ||
 c033386:	2b08      	cmp	r3, #8
{
 c033388:	4604      	mov	r4, r0
    if (msg->in_size[0] != sizeof(uid) ||
 c03338a:	d004      	beq.n	c033396 <tfm_its_get_ipc+0x16>
        return PSA_ERROR_PROGRAMMER_ERROR;
 c03338c:	f06f 0580 	mvn.w	r5, #128	; 0x80
}
 c033390:	4628      	mov	r0, r5
 c033392:	b008      	add	sp, #32
 c033394:	bd70      	pop	{r4, r5, r6, pc}
    if (msg->in_size[0] != sizeof(uid) ||
 c033396:	6945      	ldr	r5, [r0, #20]
 c033398:	2d04      	cmp	r5, #4
 c03339a:	d1f7      	bne.n	c03338c <tfm_its_get_ipc+0xc>
    num = psa_read(msg->handle, 0, &uid, sizeof(uid));
 c03339c:	aa06      	add	r2, sp, #24
 c03339e:	2100      	movs	r1, #0
 c0333a0:	6840      	ldr	r0, [r0, #4]
 c0333a2:	f7e7 f86d 	bl	c01a480 <psa_read>
    if (num != sizeof(uid)) {
 c0333a6:	2808      	cmp	r0, #8
 c0333a8:	d1f0      	bne.n	c03338c <tfm_its_get_ipc+0xc>
    num = psa_read(msg->handle, 1, &data_offset, sizeof(data_offset));
 c0333aa:	462b      	mov	r3, r5
 c0333ac:	aa04      	add	r2, sp, #16
 c0333ae:	2101      	movs	r1, #1
 c0333b0:	6860      	ldr	r0, [r4, #4]
 c0333b2:	f7e7 f865 	bl	c01a480 <psa_read>
    if (num != sizeof(data_offset)) {
 c0333b6:	2804      	cmp	r0, #4
 c0333b8:	d1e8      	bne.n	c03338c <tfm_its_get_ipc+0xc>
    status = tfm_its_get(msg->client_id, uid, data_offset, data_size,
 c0333ba:	ab05      	add	r3, sp, #20
 c0333bc:	9303      	str	r3, [sp, #12]
 c0333be:	6a23      	ldr	r3, [r4, #32]
 c0333c0:	4e09      	ldr	r6, [pc, #36]	; (c0333e8 <tfm_its_get_ipc+0x68>)
 c0333c2:	9301      	str	r3, [sp, #4]
 c0333c4:	9b04      	ldr	r3, [sp, #16]
 c0333c6:	9602      	str	r6, [sp, #8]
 c0333c8:	9300      	str	r3, [sp, #0]
 c0333ca:	68a0      	ldr	r0, [r4, #8]
 c0333cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 c0333d0:	f7ff ff16 	bl	c033200 <tfm_its_get>
    if (status == PSA_SUCCESS) {
 c0333d4:	4605      	mov	r5, r0
 c0333d6:	2800      	cmp	r0, #0
 c0333d8:	d1da      	bne.n	c033390 <tfm_its_get_ipc+0x10>
        psa_write(msg->handle, 0, asset_data, data_length);
 c0333da:	4601      	mov	r1, r0
 c0333dc:	9b05      	ldr	r3, [sp, #20]
 c0333de:	4632      	mov	r2, r6
 c0333e0:	6860      	ldr	r0, [r4, #4]
 c0333e2:	f7e7 f851 	bl	c01a488 <psa_write>
 c0333e6:	e7d3      	b.n	c033390 <tfm_its_get_ipc+0x10>
 c0333e8:	3003c704 	.word	0x3003c704

0c0333ec <tfm_its_set_ipc>:
{
 c0333ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (msg->in_size[0] != sizeof(uid) ||
 c0333ee:	6903      	ldr	r3, [r0, #16]
{
 c0333f0:	b089      	sub	sp, #36	; 0x24
    if (msg->in_size[0] != sizeof(uid) ||
 c0333f2:	2b08      	cmp	r3, #8
{
 c0333f4:	4604      	mov	r4, r0
    if (msg->in_size[0] != sizeof(uid) ||
 c0333f6:	d003      	beq.n	c033400 <tfm_its_set_ipc+0x14>
        return PSA_ERROR_PROGRAMMER_ERROR;
 c0333f8:	f06f 0080 	mvn.w	r0, #128	; 0x80
}
 c0333fc:	b009      	add	sp, #36	; 0x24
 c0333fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (msg->in_size[0] != sizeof(uid) ||
 c033400:	6987      	ldr	r7, [r0, #24]
 c033402:	2f04      	cmp	r7, #4
 c033404:	d1f8      	bne.n	c0333f8 <tfm_its_set_ipc+0xc>
    data_length = msg->in_size[1];
 c033406:	6945      	ldr	r5, [r0, #20]
    if (data_length > sizeof(asset_data)) {
 c033408:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 c03340c:	d821      	bhi.n	c033452 <tfm_its_set_ipc+0x66>
    num = psa_read(msg->handle, 0, &uid, sizeof(uid));
 c03340e:	aa06      	add	r2, sp, #24
 c033410:	2100      	movs	r1, #0
 c033412:	6840      	ldr	r0, [r0, #4]
 c033414:	f7e7 f834 	bl	c01a480 <psa_read>
    if (num != sizeof(uid)) {
 c033418:	2808      	cmp	r0, #8
 c03341a:	d1ed      	bne.n	c0333f8 <tfm_its_set_ipc+0xc>
    num = psa_read(msg->handle, 1, &asset_data, data_length);
 c03341c:	4e0e      	ldr	r6, [pc, #56]	; (c033458 <tfm_its_set_ipc+0x6c>)
 c03341e:	462b      	mov	r3, r5
 c033420:	4632      	mov	r2, r6
 c033422:	2101      	movs	r1, #1
 c033424:	6860      	ldr	r0, [r4, #4]
 c033426:	f7e7 f82b 	bl	c01a480 <psa_read>
    if (num != data_length) {
 c03342a:	4285      	cmp	r5, r0
 c03342c:	d1e4      	bne.n	c0333f8 <tfm_its_set_ipc+0xc>
    num = psa_read(msg->handle, 2, &create_flags, sizeof(create_flags));
 c03342e:	463b      	mov	r3, r7
 c033430:	aa05      	add	r2, sp, #20
 c033432:	2102      	movs	r1, #2
 c033434:	6860      	ldr	r0, [r4, #4]
 c033436:	f7e7 f823 	bl	c01a480 <psa_read>
    if (num != sizeof(create_flags)) {
 c03343a:	2804      	cmp	r0, #4
 c03343c:	d1dc      	bne.n	c0333f8 <tfm_its_set_ipc+0xc>
    return tfm_its_set(msg->client_id, uid, data_length, asset_data,
 c03343e:	9b05      	ldr	r3, [sp, #20]
 c033440:	9500      	str	r5, [sp, #0]
 c033442:	e9cd 6301 	strd	r6, r3, [sp, #4]
 c033446:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 c03344a:	68a0      	ldr	r0, [r4, #8]
 c03344c:	f7ff fe94 	bl	c033178 <tfm_its_set>
 c033450:	e7d4      	b.n	c0333fc <tfm_its_set_ipc+0x10>
        return PSA_ERROR_INVALID_ARGUMENT;
 c033452:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c033456:	e7d1      	b.n	c0333fc <tfm_its_set_ipc+0x10>
 c033458:	3003c704 	.word	0x3003c704

0c03345c <its_signal_handle>:
    while (1)
        ;
}

static void its_signal_handle(psa_signal_t signal, its_func_t pfn)
{
 c03345c:	b510      	push	{r4, lr}
 c03345e:	b08c      	sub	sp, #48	; 0x30
 c033460:	460c      	mov	r4, r1
    psa_msg_t msg;
    psa_status_t status;

    status = psa_get(signal, &msg);
 c033462:	4669      	mov	r1, sp
 c033464:	f7e7 f808 	bl	c01a478 <psa_get>
    if (status != PSA_SUCCESS) {
 c033468:	4601      	mov	r1, r0
 c03346a:	b960      	cbnz	r0, c033486 <its_signal_handle+0x2a>
        return;
    }

    switch (msg.type) {
 c03346c:	9b00      	ldr	r3, [sp, #0]
 c03346e:	1c98      	adds	r0, r3, #2
 c033470:	db02      	blt.n	c033478 <its_signal_handle+0x1c>
 c033472:	1c5a      	adds	r2, r3, #1
 c033474:	dd04      	ble.n	c033480 <its_signal_handle+0x24>
 c033476:	b103      	cbz	r3, c03347a <its_signal_handle+0x1e>
 c033478:	e7fe      	b.n	c033478 <its_signal_handle+0x1c>
    case PSA_IPC_CONNECT:
        psa_reply(msg.handle, PSA_SUCCESS);
        break;
    case PSA_IPC_CALL:
        status = pfn(&msg);
 c03347a:	4668      	mov	r0, sp
 c03347c:	47a0      	blx	r4
        psa_reply(msg.handle, status);
 c03347e:	4601      	mov	r1, r0
 c033480:	9801      	ldr	r0, [sp, #4]
 c033482:	f7e7 f803 	bl	c01a48c <psa_reply>
        psa_reply(msg.handle, PSA_SUCCESS);
        break;
    default:
        tfm_abort();
    }
}
 c033486:	b00c      	add	sp, #48	; 0x30
 c033488:	bd10      	pop	{r4, pc}
	...

0c03348c <tfm_its_req_mngr_init>:
#endif /* !defined(TFM_PSA_API) */

psa_status_t tfm_its_req_mngr_init(void)
{
 c03348c:	b570      	push	{r4, r5, r6, lr}
#ifdef TFM_PSA_API
    psa_signal_t signals = 0;

    if (tfm_its_init() != PSA_SUCCESS) {
 c03348e:	f7ff fe66 	bl	c03315e <tfm_its_init>
 c033492:	b978      	cbnz	r0, c0334b4 <tfm_its_req_mngr_init+0x28>
        } else if (signals & TFM_ITS_GET_SIG) {
            its_signal_handle(TFM_ITS_GET_SIG, tfm_its_get_ipc);
        } else if (signals & TFM_ITS_GET_INFO_SIG) {
            its_signal_handle(TFM_ITS_GET_INFO_SIG, tfm_its_get_info_ipc);
        } else if (signals & TFM_ITS_REMOVE_SIG) {
            its_signal_handle(TFM_ITS_REMOVE_SIG, tfm_its_remove_ipc);
 c033494:	4c10      	ldr	r4, [pc, #64]	; (c0334d8 <tfm_its_req_mngr_init+0x4c>)
            its_signal_handle(TFM_ITS_GET_INFO_SIG, tfm_its_get_info_ipc);
 c033496:	4d11      	ldr	r5, [pc, #68]	; (c0334dc <tfm_its_req_mngr_init+0x50>)
            its_signal_handle(TFM_ITS_GET_SIG, tfm_its_get_ipc);
 c033498:	4e11      	ldr	r6, [pc, #68]	; (c0334e0 <tfm_its_req_mngr_init+0x54>)
        signals = psa_wait(PSA_WAIT_ANY, PSA_BLOCK);
 c03349a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 c03349e:	f04f 30ff 	mov.w	r0, #4294967295
 c0334a2:	f7e6 ffe7 	bl	c01a474 <psa_wait>
        if (signals & TFM_ITS_SET_SIG) {
 c0334a6:	06c3      	lsls	r3, r0, #27
 c0334a8:	d505      	bpl.n	c0334b6 <tfm_its_req_mngr_init+0x2a>
            its_signal_handle(TFM_ITS_SET_SIG, tfm_its_set_ipc);
 c0334aa:	2010      	movs	r0, #16
 c0334ac:	490d      	ldr	r1, [pc, #52]	; (c0334e4 <tfm_its_req_mngr_init+0x58>)
            its_signal_handle(TFM_ITS_REMOVE_SIG, tfm_its_remove_ipc);
 c0334ae:	f7ff ffd5 	bl	c03345c <its_signal_handle>
 c0334b2:	e7f2      	b.n	c03349a <tfm_its_req_mngr_init+0xe>
 c0334b4:	e7fe      	b.n	c0334b4 <tfm_its_req_mngr_init+0x28>
        } else if (signals & TFM_ITS_GET_SIG) {
 c0334b6:	0681      	lsls	r1, r0, #26
 c0334b8:	d502      	bpl.n	c0334c0 <tfm_its_req_mngr_init+0x34>
            its_signal_handle(TFM_ITS_GET_SIG, tfm_its_get_ipc);
 c0334ba:	4631      	mov	r1, r6
 c0334bc:	2020      	movs	r0, #32
 c0334be:	e7f6      	b.n	c0334ae <tfm_its_req_mngr_init+0x22>
        } else if (signals & TFM_ITS_GET_INFO_SIG) {
 c0334c0:	0642      	lsls	r2, r0, #25
 c0334c2:	d502      	bpl.n	c0334ca <tfm_its_req_mngr_init+0x3e>
            its_signal_handle(TFM_ITS_GET_INFO_SIG, tfm_its_get_info_ipc);
 c0334c4:	4629      	mov	r1, r5
 c0334c6:	2040      	movs	r0, #64	; 0x40
 c0334c8:	e7f1      	b.n	c0334ae <tfm_its_req_mngr_init+0x22>
        } else if (signals & TFM_ITS_REMOVE_SIG) {
 c0334ca:	0603      	lsls	r3, r0, #24
 c0334cc:	d502      	bpl.n	c0334d4 <tfm_its_req_mngr_init+0x48>
            its_signal_handle(TFM_ITS_REMOVE_SIG, tfm_its_remove_ipc);
 c0334ce:	4621      	mov	r1, r4
 c0334d0:	2080      	movs	r0, #128	; 0x80
 c0334d2:	e7ec      	b.n	c0334ae <tfm_its_req_mngr_init+0x22>
 c0334d4:	e7fe      	b.n	c0334d4 <tfm_its_req_mngr_init+0x48>
 c0334d6:	bf00      	nop
 c0334d8:	0c033309 	.word	0x0c033309
 c0334dc:	0c033335 	.word	0x0c033335
 c0334e0:	0c033381 	.word	0x0c033381
 c0334e4:	0c0333ed 	.word	0x0c0333ed

0c0334e8 <tfm_msg_enqueue>:

/* Message queue process */
int32_t tfm_msg_enqueue(struct tfm_msg_queue_t *queue,
                        struct tfm_msg_body_t *node)
{
    if (!queue || !node) {
 c0334e8:	b160      	cbz	r0, c033504 <tfm_msg_enqueue+0x1c>
 c0334ea:	b159      	cbz	r1, c033504 <tfm_msg_enqueue+0x1c>
        return IPC_ERROR_BAD_PARAMETERS;
    }

    if (queue->size == 0) {
 c0334ec:	6883      	ldr	r3, [r0, #8]
 c0334ee:	b92b      	cbnz	r3, c0334fc <tfm_msg_enqueue+0x14>
        queue->head = node;
 c0334f0:	6001      	str	r1, [r0, #0]
        queue->tail = node;
    } else {
        queue->tail->next = node;
        queue->tail = node;
    }
    queue->size++;
 c0334f2:	3301      	adds	r3, #1
        queue->tail = node;
 c0334f4:	6041      	str	r1, [r0, #4]
    queue->size++;
 c0334f6:	6083      	str	r3, [r0, #8]
    return IPC_SUCCESS;
 c0334f8:	2000      	movs	r0, #0
 c0334fa:	4770      	bx	lr
        queue->tail->next = node;
 c0334fc:	6842      	ldr	r2, [r0, #4]
 c0334fe:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
 c033502:	e7f6      	b.n	c0334f2 <tfm_msg_enqueue+0xa>
        return IPC_ERROR_BAD_PARAMETERS;
 c033504:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 c033508:	4770      	bx	lr

0c03350a <tfm_msg_dequeue>:

struct tfm_msg_body_t *tfm_msg_dequeue(struct tfm_msg_queue_t *queue)
{
    struct tfm_msg_body_t *pop_node;

    if (!queue) {
 c03350a:	4603      	mov	r3, r0
 c03350c:	b140      	cbz	r0, c033520 <tfm_msg_dequeue+0x16>
        return NULL;
    }

    if (queue->size == 0) {
 c03350e:	6882      	ldr	r2, [r0, #8]
 c033510:	b13a      	cbz	r2, c033522 <tfm_msg_dequeue+0x18>
        return NULL;
    }

    pop_node = queue->head;
 c033512:	6800      	ldr	r0, [r0, #0]
    queue->head = queue->head->next;
    queue->size--;
 c033514:	3a01      	subs	r2, #1
    queue->head = queue->head->next;
 c033516:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
    queue->size--;
 c03351a:	609a      	str	r2, [r3, #8]
    queue->head = queue->head->next;
 c03351c:	6019      	str	r1, [r3, #0]
    return pop_node;
 c03351e:	4770      	bx	lr
 c033520:	4770      	bx	lr
        return NULL;
 c033522:	4610      	mov	r0, r2
}
 c033524:	4770      	bx	lr

0c033526 <tfm_msg_queue_is_empty>:

int32_t tfm_msg_queue_is_empty(struct tfm_msg_queue_t *queue)
{
    return queue->size == 0 ? 1 : 0;
 c033526:	6880      	ldr	r0, [r0, #8]
}
 c033528:	fab0 f080 	clz	r0, r0
 c03352c:	0940      	lsrs	r0, r0, #5
 c03352e:	4770      	bx	lr

0c033530 <tfm_nspm_get_current_client_id>:
}
 c033530:	f04f 30ff 	mov.w	r0, #4294967295
 c033534:	4770      	bx	lr

0c033536 <__acle_se_TZ_InitContextSystem_S>:
}
 c033536:	2001      	movs	r0, #1
 c033538:	4671      	mov	r1, lr
 c03353a:	4672      	mov	r2, lr
 c03353c:	4673      	mov	r3, lr
 c03353e:	46f4      	mov	ip, lr
 c033540:	f38e 8c00 	msr	CPSR_fs, lr
 c033544:	4774      	bxns	lr

0c033546 <__acle_se_TZ_AllocModuleContext_S>:
}
 c033546:	2001      	movs	r0, #1
 c033548:	4671      	mov	r1, lr
 c03354a:	4672      	mov	r2, lr
 c03354c:	4673      	mov	r3, lr
 c03354e:	46f4      	mov	ip, lr
 c033550:	f38e 8c00 	msr	CPSR_fs, lr
 c033554:	4774      	bxns	lr

0c033556 <__acle_se_TZ_FreeModuleContext_S>:
}
 c033556:	2001      	movs	r0, #1
 c033558:	4671      	mov	r1, lr
 c03355a:	4672      	mov	r2, lr
 c03355c:	4673      	mov	r3, lr
 c03355e:	46f4      	mov	ip, lr
 c033560:	f38e 8c00 	msr	CPSR_fs, lr
 c033564:	4774      	bxns	lr

0c033566 <__acle_se_TZ_LoadContext_S>:
}
 c033566:	2001      	movs	r0, #1
 c033568:	4671      	mov	r1, lr
 c03356a:	4672      	mov	r2, lr
 c03356c:	4673      	mov	r3, lr
 c03356e:	46f4      	mov	ip, lr
 c033570:	f38e 8c00 	msr	CPSR_fs, lr
 c033574:	4774      	bxns	lr

0c033576 <__acle_se_TZ_StoreContext_S>:
}
 c033576:	2001      	movs	r0, #1
 c033578:	4671      	mov	r1, lr
 c03357a:	4672      	mov	r2, lr
 c03357c:	4673      	mov	r3, lr
 c03357e:	46f4      	mov	ip, lr
 c033580:	f38e 8c00 	msr	CPSR_fs, lr
 c033584:	4774      	bxns	lr
	...

0c033588 <configure_ns_code>:
    /* NOTREACHED */
    return PSA_SUCCESS;
}

void configure_ns_code(void)
{
 c033588:	b508      	push	{r3, lr}
    /* SCB_NS.VTOR points to the Non-secure vector table base address */
    SCB_NS->VTOR = tfm_spm_hal_get_ns_VTOR();
 c03358a:	f7ed fc5f 	bl	c020e4c <tfm_spm_hal_get_ns_VTOR>
 c03358e:	4b08      	ldr	r3, [pc, #32]	; (c0335b0 <configure_ns_code+0x28>)
 c033590:	6098      	str	r0, [r3, #8]

    /* Setups Main stack pointer of the non-secure code */
    uint32_t ns_msp = tfm_spm_hal_get_ns_MSP();
 c033592:	f7ed fc61 	bl	c020e58 <tfm_spm_hal_get_ns_MSP>
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c033596:	f380 8888 	msr	MSP_NS, r0

    __TZ_set_MSP_NS(ns_msp);

    /* Get the address of non-secure code entry point to jump there */
    uint32_t entry_ptr = tfm_spm_hal_get_ns_entry_point();
 c03359a:	f7ed fc63 	bl	c020e64 <tfm_spm_hal_get_ns_entry_point>

    /* Clears LSB of the function address to indicate the function-call
     * will perform the switch from secure to non-secure
     */
    ns_entry = (nsfptr_t) cmse_nsfptr_create(entry_ptr);
 c03359e:	4b05      	ldr	r3, [pc, #20]	; (c0335b4 <configure_ns_code+0x2c>)
 c0335a0:	f020 0001 	bic.w	r0, r0, #1
 c0335a4:	6018      	str	r0, [r3, #0]

    /* Configure mpu nonsecure */
    tfm_spm_hal_set_ns_mpu();
}
 c0335a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tfm_spm_hal_set_ns_mpu();
 c0335aa:	f7ed bc61 	b.w	c020e70 <tfm_spm_hal_set_ns_mpu>
 c0335ae:	bf00      	nop
 c0335b0:	e002ed00 	.word	0xe002ed00
 c0335b4:	30031000 	.word	0x30031000

0c0335b8 <tfm_pool_init>:
#include "tfm_memory_utils.h"
#include "tfm_core_utils.h"

int32_t tfm_pool_init(struct tfm_pool_instance_t *pool, size_t poolsz,
                      size_t chunksz, size_t num)
{
 c0335b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0335ba:	4616      	mov	r6, r2
 c0335bc:	461d      	mov	r5, r3
    struct tfm_pool_chunk_t *pchunk;
    size_t i;

    if (!pool || num == 0) {
 c0335be:	4604      	mov	r4, r0
 c0335c0:	b1f8      	cbz	r0, c033602 <tfm_pool_init+0x4a>
 c0335c2:	b1f3      	cbz	r3, c033602 <tfm_pool_init+0x4a>
        return IPC_ERROR_BAD_PARAMETERS;
    }

    /* Ensure buffer is large enough */
    if (poolsz != ((chunksz + sizeof(struct tfm_pool_chunk_t)) * num +
 c0335c4:	f102 070c 	add.w	r7, r2, #12
 c0335c8:	fb03 f207 	mul.w	r2, r3, r7
 c0335cc:	3210      	adds	r2, #16
 c0335ce:	428a      	cmp	r2, r1
 c0335d0:	d117      	bne.n	c033602 <tfm_pool_init+0x4a>
        sizeof(struct tfm_pool_instance_t))) {
        return IPC_ERROR_BAD_PARAMETERS;
    }

    /* Buffer should be BSS cleared but clear it again */
    tfm_core_util_memset(pool, 0, poolsz);
 c0335d2:	2100      	movs	r1, #0
 c0335d4:	f7ff fd9a 	bl	c03310c <tfm_core_util_memset>

    /* Chain pool chunks */
    tfm_list_init(&pool->chunks_list);

    pchunk = (struct tfm_pool_chunk_t *)pool->chunks;
    for (i = 0; i < num; i++) {
 c0335d8:	2300      	movs	r3, #0
    tfm_list_init(&pool->chunks_list);
 c0335da:	f104 0108 	add.w	r1, r4, #8
 c0335de:	e9c4 1102 	strd	r1, r1, [r4, #8]
    pchunk = (struct tfm_pool_chunk_t *)pool->chunks;
 c0335e2:	f104 0210 	add.w	r2, r4, #16
    head->prev->next = node;
 c0335e6:	68a0      	ldr	r0, [r4, #8]
    for (i = 0; i < num; i++) {
 c0335e8:	3301      	adds	r3, #1
 c0335ea:	429d      	cmp	r5, r3
        pchunk->pool = pool;
 c0335ec:	6094      	str	r4, [r2, #8]
 c0335ee:	6042      	str	r2, [r0, #4]
    node->prev = head->prev;
 c0335f0:	6010      	str	r0, [r2, #0]
    head->prev = node;
 c0335f2:	60a2      	str	r2, [r4, #8]
    node->next = head;
 c0335f4:	6051      	str	r1, [r2, #4]
        tfm_list_add_tail(&pool->chunks_list, &pchunk->list);
        pchunk = (struct tfm_pool_chunk_t *)&pchunk->data[chunksz];
 c0335f6:	443a      	add	r2, r7
    for (i = 0; i < num; i++) {
 c0335f8:	d1f5      	bne.n	c0335e6 <tfm_pool_init+0x2e>

    /* Prepare instance and insert to pool list */
    pool->chunksz = chunksz;
    pool->chunk_count = num;

    return IPC_SUCCESS;
 c0335fa:	2000      	movs	r0, #0
    pool->chunk_count = num;
 c0335fc:	e9c4 6500 	strd	r6, r5, [r4]
}
 c033600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return IPC_ERROR_BAD_PARAMETERS;
 c033602:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 c033606:	e7fb      	b.n	c033600 <tfm_pool_init+0x48>

0c033608 <tfm_pool_alloc>:
void *tfm_pool_alloc(struct tfm_pool_instance_t *pool)
{
    struct tfm_list_node_t *node;
    struct tfm_pool_chunk_t *pchunk;

    if (!pool) {
 c033608:	b160      	cbz	r0, c033624 <tfm_pool_alloc+0x1c>
    return (head->next == head);
 c03360a:	68c3      	ldr	r3, [r0, #12]
        return NULL;
    }

    if (tfm_list_is_empty(&pool->chunks_list)) {
 c03360c:	3008      	adds	r0, #8
 c03360e:	4283      	cmp	r3, r0
 c033610:	d007      	beq.n	c033622 <tfm_pool_alloc+0x1a>
    node->prev->next = node->next;
 c033612:	e9d3 2100 	ldrd	r2, r1, [r3]
 c033616:	6051      	str	r1, [r2, #4]
    node->next->prev = node->prev;
 c033618:	6859      	ldr	r1, [r3, #4]
    pchunk = TFM_GET_CONTAINER_PTR(node, struct tfm_pool_chunk_t, list);

    /* Remove node from list node, it will be added when pool free */
    tfm_list_del_node(node);

    return &pchunk->data;
 c03361a:	f103 000c 	add.w	r0, r3, #12
 c03361e:	600a      	str	r2, [r1, #0]
 c033620:	4770      	bx	lr
        return NULL;
 c033622:	2000      	movs	r0, #0
}
 c033624:	4770      	bx	lr

0c033626 <tfm_pool_free>:
{
    struct tfm_pool_chunk_t *pchunk;
    struct tfm_pool_instance_t *pool;

    pchunk = TFM_GET_CONTAINER_PTR(ptr, struct tfm_pool_chunk_t, data);
    pool = (struct tfm_pool_instance_t *)pchunk->pool;
 c033626:	f850 3c04 	ldr.w	r3, [r0, #-4]
    pchunk = TFM_GET_CONTAINER_PTR(ptr, struct tfm_pool_chunk_t, data);
 c03362a:	f1a0 020c 	sub.w	r2, r0, #12
    head->prev->next = node;
 c03362e:	6899      	ldr	r1, [r3, #8]
 c033630:	604a      	str	r2, [r1, #4]
    node->prev = head->prev;
 c033632:	f840 1c0c 	str.w	r1, [r0, #-12]
    head->prev = node;
 c033636:	f843 2f08 	str.w	r2, [r3, #8]!
    node->next = head;
 c03363a:	f840 3c08 	str.w	r3, [r0, #-8]
    tfm_list_add_tail(&pool->chunks_list, &pchunk->list);
}
 c03363e:	4770      	bx	lr

0c033640 <is_valid_chunk_data_in_pool>:

bool is_valid_chunk_data_in_pool(struct tfm_pool_instance_t *pool,
                                 uint8_t *data)
{
    const uintptr_t chunks_start = (uintptr_t)(pool->chunks);
 c033640:	f100 0210 	add.w	r2, r0, #16
    const size_t chunk_count = pool->chunk_count;
    const uintptr_t chunks_end = chunks_start + chunks_size * chunk_count;
    uintptr_t pool_chunk_address = 0;

    /* Check that the message was allocated from the pool. */
    if ((uintptr_t)data < chunks_start || (uintptr_t)data >= chunks_end) {
 c033644:	4291      	cmp	r1, r2
    const size_t chunk_count = pool->chunk_count;
 c033646:	e9d0 3000 	ldrd	r3, r0, [r0]
    if ((uintptr_t)data < chunks_start || (uintptr_t)data >= chunks_end) {
 c03364a:	d30e      	bcc.n	c03366a <is_valid_chunk_data_in_pool+0x2a>
    const size_t chunks_size = pool->chunksz + sizeof(struct tfm_pool_chunk_t);
 c03364c:	330c      	adds	r3, #12
    const uintptr_t chunks_end = chunks_start + chunks_size * chunk_count;
 c03364e:	fb00 2003 	mla	r0, r0, r3, r2
    if ((uintptr_t)data < chunks_start || (uintptr_t)data >= chunks_end) {
 c033652:	4281      	cmp	r1, r0
 c033654:	d209      	bcs.n	c03366a <is_valid_chunk_data_in_pool+0x2a>
        return false;
    }

    pool_chunk_address =
 c033656:	390c      	subs	r1, #12
    (uint32_t)TFM_GET_CONTAINER_PTR(data, struct tfm_pool_chunk_t, data);

    /* Make sure that the chunk containing the message is aligned on */
    /* chunk boundary in the pool. */
    if ((pool_chunk_address - chunks_start) % chunks_size != 0) {
 c033658:	1a89      	subs	r1, r1, r2
 c03365a:	fbb1 f0f3 	udiv	r0, r1, r3
 c03365e:	fb03 1010 	mls	r0, r3, r0, r1
 c033662:	fab0 f080 	clz	r0, r0
 c033666:	0940      	lsrs	r0, r0, #5
 c033668:	4770      	bx	lr
        return false;
 c03366a:	2000      	movs	r0, #0
        return false;
    }
    return true;
}
 c03366c:	4770      	bx	lr

0c03366e <tfm_sst_init>:
#include "tfm_protected_storage.h"
#include "sst_object_system.h"
#include "tfm_sst_defs.h"

psa_ps_status_t tfm_sst_init(void)
{
 c03366e:	b508      	push	{r3, lr}
    psa_ps_status_t err;

    err = sst_system_prepare();
 c033670:	f7fe fd40 	bl	c0320f4 <sst_system_prepare>
     * This flag can be set if the SST memory area is located in persistent
     * memory without a previous valid SST flash layout in it. That is the case
     * when it is the first time in the device life that the SST service is
     * executed.
     */
    if (err != PSA_PS_SUCCESS) {
 c033674:	b130      	cbz	r0, c033684 <tfm_sst_init+0x16>
        /* Remove all data in the SST memory area and create a valid SST flash
         * layout in that area.
         */
        err = sst_system_wipe_all();
 c033676:	f7fe fe31 	bl	c0322dc <sst_system_wipe_all>
        if (err != PSA_PS_SUCCESS) {
 c03367a:	b918      	cbnz	r0, c033684 <tfm_sst_init+0x16>
        err = sst_system_prepare();
    }
#endif /* SST_CREATE_FLASH_LAYOUT */

    return err;
}
 c03367c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        err = sst_system_prepare();
 c033680:	f7fe bd38 	b.w	c0320f4 <sst_system_prepare>
}
 c033684:	bd08      	pop	{r3, pc}

0c033686 <tfm_sst_set>:

psa_ps_status_t tfm_sst_set(int32_t client_id,
                            psa_ps_uid_t uid,
                            uint32_t data_length,
                            psa_ps_create_flags_t create_flags)
{
 c033686:	b410      	push	{r4}
 c033688:	4619      	mov	r1, r3
 c03368a:	4604      	mov	r4, r0
 c03368c:	4610      	mov	r0, r2
    /* Check that the UID is valid */
    if (uid == TFM_SST_INVALID_UID) {
 c03368e:	ea50 0201 	orrs.w	r2, r0, r1
{
 c033692:	9b02      	ldr	r3, [sp, #8]
    if (uid == TFM_SST_INVALID_UID) {
 c033694:	d006      	beq.n	c0336a4 <tfm_sst_set+0x1e>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
    }

    /* Check that the create_flags does not contain any unsupported flags */
    if (create_flags & ~PSA_PS_FLAG_WRITE_ONCE) {
 c033696:	f033 0201 	bics.w	r2, r3, #1
 c03369a:	d106      	bne.n	c0336aa <tfm_sst_set+0x24>
        return PSA_PS_ERROR_FLAGS_NOT_SUPPORTED;
    }

    /* Create the object in the object system */
    return sst_object_create(uid, client_id, create_flags, data_length);
 c03369c:	4622      	mov	r2, r4
}
 c03369e:	bc10      	pop	{r4}
    return sst_object_create(uid, client_id, create_flags, data_length);
 c0336a0:	f7fe bd60 	b.w	c032164 <sst_object_create>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c0336a4:	2008      	movs	r0, #8
}
 c0336a6:	bc10      	pop	{r4}
 c0336a8:	4770      	bx	lr
        return PSA_PS_ERROR_FLAGS_NOT_SUPPORTED;
 c0336aa:	2002      	movs	r0, #2
 c0336ac:	e7fb      	b.n	c0336a6 <tfm_sst_set+0x20>

0c0336ae <tfm_sst_get>:

psa_ps_status_t tfm_sst_get(int32_t client_id,
                            psa_ps_uid_t uid,
                            uint32_t data_offset,
                            uint32_t data_length)
{
 c0336ae:	b410      	push	{r4}
 c0336b0:	4619      	mov	r1, r3
 c0336b2:	4604      	mov	r4, r0
 c0336b4:	4610      	mov	r0, r2
 c0336b6:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    /* Check that the UID is valid */
    if (uid == TFM_SST_INVALID_UID) {
 c0336ba:	ea50 0c01 	orrs.w	ip, r0, r1
 c0336be:	d004      	beq.n	c0336ca <tfm_sst_get+0x1c>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
    }

    /* Read the object data from the object system */
    return sst_object_read(uid, client_id, data_offset, data_length);
 c0336c0:	9201      	str	r2, [sp, #4]
 c0336c2:	4622      	mov	r2, r4
}
 c0336c4:	bc10      	pop	{r4}
    return sst_object_read(uid, client_id, data_offset, data_length);
 c0336c6:	f7fe bd25 	b.w	c032114 <sst_object_read>
}
 c0336ca:	2008      	movs	r0, #8
 c0336cc:	bc10      	pop	{r4}
 c0336ce:	4770      	bx	lr

0c0336d0 <tfm_sst_get_info>:

psa_ps_status_t tfm_sst_get_info(int32_t client_id, psa_ps_uid_t uid,
                                 struct psa_ps_info_t *p_info)
{
 c0336d0:	b410      	push	{r4}
 c0336d2:	4619      	mov	r1, r3
 c0336d4:	4604      	mov	r4, r0
 c0336d6:	4610      	mov	r0, r2
    /* Check that the UID is valid */
    if (uid == TFM_SST_INVALID_UID) {
 c0336d8:	ea50 0201 	orrs.w	r2, r0, r1
{
 c0336dc:	9b01      	ldr	r3, [sp, #4]
    if (uid == TFM_SST_INVALID_UID) {
 c0336de:	d003      	beq.n	c0336e8 <tfm_sst_get_info+0x18>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
    }

    /* Get the info struct data from the object system */
    return sst_object_get_info(uid, client_id, p_info);
 c0336e0:	4622      	mov	r2, r4
}
 c0336e2:	bc10      	pop	{r4}
    return sst_object_get_info(uid, client_id, p_info);
 c0336e4:	f7fe bdaa 	b.w	c03223c <sst_object_get_info>
}
 c0336e8:	2008      	movs	r0, #8
 c0336ea:	bc10      	pop	{r4}
 c0336ec:	4770      	bx	lr

0c0336ee <tfm_sst_remove>:

psa_ps_status_t tfm_sst_remove(int32_t client_id, psa_ps_uid_t uid)
{
 c0336ee:	b510      	push	{r4, lr}
 c0336f0:	4619      	mov	r1, r3
 c0336f2:	4604      	mov	r4, r0
 c0336f4:	4610      	mov	r0, r2
    psa_ps_status_t err;

    /* Check that the UID is valid */
    if (uid == TFM_SST_INVALID_UID) {
 c0336f6:	ea50 0301 	orrs.w	r3, r0, r1
 c0336fa:	d006      	beq.n	c03370a <tfm_sst_remove+0x1c>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
    }

    /* Delete the object from the object system */
    err = sst_object_delete(uid, client_id);
 c0336fc:	4622      	mov	r2, r4
 c0336fe:	f7fe fdbd 	bl	c03227c <sst_object_delete>
    /* PSA_PS_ERROR_AUTH_FAILED is not supported by psa_ps_remove
     * specification. So, this function returns TFM_SST_ERR_OPERATION_FAILED
     * instead.
     */
    if (err == PSA_PS_ERROR_AUTH_FAILED) {
        return PSA_PS_ERROR_OPERATION_FAILED;
 c033702:	280a      	cmp	r0, #10
 c033704:	bf08      	it	eq
 c033706:	200b      	moveq	r0, #11
    }

    return err;
}
 c033708:	bd10      	pop	{r4, pc}
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c03370a:	2008      	movs	r0, #8
 c03370c:	e7fc      	b.n	c033708 <tfm_sst_remove+0x1a>

0c03370e <tfm_sst_get_support>:
     *
     * SST service does not support the optional extended PSA PS API yet.
     */

    return 0;
}
 c03370e:	2000      	movs	r0, #0
 c033710:	4770      	bx	lr
	...

0c033714 <tfm_psa_ipc_request_handler>:

void tfm_psa_ipc_request_handler(uint32_t svc_ctx[])
{
 c033714:	b538      	push	{r3, r4, r5, lr}
 c033716:	4604      	mov	r4, r0
    uint32_t *r0_ptr = svc_ctx;

    /* The only argument to the SVC call is stored in the stacked r0 */
    struct tfm_sfn_req_s *desc_ptr = (struct tfm_sfn_req_s *) *r0_ptr;
 c033718:	6800      	ldr	r0, [r0, #0]
    if (desc_ptr->ns_caller) {
 c03371a:	6901      	ldr	r1, [r0, #16]
 c03371c:	b141      	cbz	r1, c033730 <tfm_psa_ipc_request_handler+0x1c>
        if (tfm_secure_lock != 0) {
 c03371e:	4b06      	ldr	r3, [pc, #24]	; (c033738 <tfm_psa_ipc_request_handler+0x24>)
 c033720:	681b      	ldr	r3, [r3, #0]
 c033722:	b92b      	cbnz	r3, c033730 <tfm_psa_ipc_request_handler+0x1c>
        *r0_ptr = TFM_ERROR_INVALID_PARAMETER;
        return;
    }

    /* Store SVC return value in stacked r0 */
    *r0_ptr = desc_ptr->sfn((int32_t)desc_ptr->args,
 c033724:	6845      	ldr	r5, [r0, #4]
 c033726:	461a      	mov	r2, r3
 c033728:	6880      	ldr	r0, [r0, #8]
 c03372a:	47a8      	blx	r5
 c03372c:	6020      	str	r0, [r4, #0]
                            desc_ptr->ns_caller,
                            0,
                            0);

    return;
}
 c03372e:	bd38      	pop	{r3, r4, r5, pc}
        *r0_ptr = TFM_ERROR_INVALID_PARAMETER;
 c033730:	2303      	movs	r3, #3
 c033732:	6023      	str	r3, [r4, #0]
        return;
 c033734:	e7fb      	b.n	c03372e <tfm_psa_ipc_request_handler+0x1a>
 c033736:	bf00      	nop
 c033738:	3003c974 	.word	0x3003c974

0c03373c <tfm_bitcount>:
int32_t tfm_secure_lock;

int32_t tfm_bitcount(uint32_t n)
{
    uint8_t count = 0;
    while (n) {
 c03373c:	2300      	movs	r3, #0
 c03373e:	1c5a      	adds	r2, r3, #1
 c033740:	b908      	cbnz	r0, c033746 <tfm_bitcount+0xa>
        count++;
        n &= n-1;
    }
    return (int32_t)count;
}
 c033742:	b2d8      	uxtb	r0, r3
 c033744:	4770      	bx	lr
        n &= n-1;
 c033746:	1e43      	subs	r3, r0, #1
 c033748:	4018      	ands	r0, r3
 c03374a:	4613      	mov	r3, r2
 c03374c:	e7f7      	b.n	c03373e <tfm_bitcount+0x2>

0c03374e <tfm_is_one_bit_set>:

bool tfm_is_one_bit_set(uint32_t n)
{
    return ((n && !(n & (n-1))) ? true : false);
 c03374e:	b120      	cbz	r0, c03375a <tfm_is_one_bit_set+0xc>
 c033750:	1e43      	subs	r3, r0, #1
 c033752:	4203      	tst	r3, r0
 c033754:	bf0c      	ite	eq
 c033756:	2001      	moveq	r0, #1
 c033758:	2000      	movne	r0, #0
}
 c03375a:	4770      	bx	lr

0c03375c <check_address_range>:

enum tfm_status_e check_address_range(const void *p, size_t s,
                                      uintptr_t region_start,
                                      uintptr_t region_limit)
{
 c03375c:	b510      	push	{r4, lr}
    int32_t range_in_region;

    /* Check for overflow in the range parameters */
    if ((uintptr_t)p > UINTPTR_MAX - s) {
 c03375e:	43cc      	mvns	r4, r1
 c033760:	4284      	cmp	r4, r0
 c033762:	d308      	bcc.n	c033776 <check_address_range+0x1a>
    }

    /* We trust the region parameters, and don't check for overflow */

    /* Calculate the result */
    range_in_region = ((uintptr_t)p >= region_start) &&
 c033764:	4290      	cmp	r0, r2
 c033766:	d306      	bcc.n	c033776 <check_address_range+0x1a>
        ((uintptr_t)((char *) p + s - 1) <= region_limit);
 c033768:	3901      	subs	r1, #1
 c03376a:	4408      	add	r0, r1
    if (range_in_region) {
        return TFM_SUCCESS;
 c03376c:	4298      	cmp	r0, r3
 c03376e:	bf8c      	ite	hi
 c033770:	201f      	movhi	r0, #31
 c033772:	2000      	movls	r0, #0
    } else {
        return TFM_ERROR_GENERIC;
    }
}
 c033774:	bd10      	pop	{r4, pc}
        return TFM_ERROR_GENERIC;
 c033776:	201f      	movs	r0, #31
 c033778:	e7fc      	b.n	c033774 <check_address_range+0x18>
	...

0c03377c <tfm_sst_remove_ipc>:
    }
    return PSA_SUCCESS;
}

static psa_status_t tfm_sst_remove_ipc(void)
{
 c03377c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t client_id;
    size_t in_size, out_size, num = 0;
    psa_ps_status_t err;

    client_id = msg.client_id;
    in_size = msg.in_size[0];
 c03377e:	4c10      	ldr	r4, [pc, #64]	; (c0337c0 <tfm_sst_remove_ipc+0x44>)
    out_size = msg.out_size[0];
    if (in_size != sizeof(psa_ps_uid_t) ||
 c033780:	6923      	ldr	r3, [r4, #16]
 c033782:	2b08      	cmp	r3, #8
 c033784:	d002      	beq.n	c03378c <tfm_sst_remove_ipc+0x10>
        out_size != sizeof(psa_ps_status_t)) {
        /* The size of one of the arguments is incorrect */
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c033786:	2008      	movs	r0, #8
    }

    err = tfm_sst_remove(client_id, uid);
    psa_write(msg.handle, 0, &err, out_size);
    return PSA_SUCCESS;
}
 c033788:	b004      	add	sp, #16
 c03378a:	bd70      	pop	{r4, r5, r6, pc}
    if (in_size != sizeof(psa_ps_uid_t) ||
 c03378c:	6a25      	ldr	r5, [r4, #32]
 c03378e:	2d04      	cmp	r5, #4
 c033790:	d1f9      	bne.n	c033786 <tfm_sst_remove_ipc+0xa>
    num = psa_read(msg.handle, 0, &uid, in_size);
 c033792:	aa02      	add	r2, sp, #8
 c033794:	2100      	movs	r1, #0
 c033796:	6860      	ldr	r0, [r4, #4]
    client_id = msg.client_id;
 c033798:	68a6      	ldr	r6, [r4, #8]
    num = psa_read(msg.handle, 0, &uid, in_size);
 c03379a:	f7e6 fe71 	bl	c01a480 <psa_read>
    if (num != in_size) {
 c03379e:	2808      	cmp	r0, #8
 c0337a0:	d1f1      	bne.n	c033786 <tfm_sst_remove_ipc+0xa>
    err = tfm_sst_remove(client_id, uid);
 c0337a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0337a6:	4630      	mov	r0, r6
 c0337a8:	f7ff ffa1 	bl	c0336ee <tfm_sst_remove>
 c0337ac:	aa04      	add	r2, sp, #16
 c0337ae:	f842 0d0c 	str.w	r0, [r2, #-12]!
    psa_write(msg.handle, 0, &err, out_size);
 c0337b2:	462b      	mov	r3, r5
 c0337b4:	6860      	ldr	r0, [r4, #4]
 c0337b6:	2100      	movs	r1, #0
 c0337b8:	f7e6 fe66 	bl	c01a488 <psa_write>
    return PSA_SUCCESS;
 c0337bc:	2000      	movs	r0, #0
 c0337be:	e7e3      	b.n	c033788 <tfm_sst_remove_ipc+0xc>
 c0337c0:	3003c904 	.word	0x3003c904

0c0337c4 <tfm_sst_get_info_ipc>:
{
 c0337c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    in_size = msg.in_size[0];
 c0337c8:	4c18      	ldr	r4, [pc, #96]	; (c03382c <tfm_sst_get_info_ipc+0x68>)
{
 c0337ca:	b088      	sub	sp, #32
    if (in_size != sizeof(psa_ps_uid_t) ||
 c0337cc:	6923      	ldr	r3, [r4, #16]
 c0337ce:	2b08      	cmp	r3, #8
 c0337d0:	d003      	beq.n	c0337da <tfm_sst_get_info_ipc+0x16>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c0337d2:	2008      	movs	r0, #8
}
 c0337d4:	b008      	add	sp, #32
 c0337d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (in_size != sizeof(psa_ps_uid_t) ||
 c0337da:	6a25      	ldr	r5, [r4, #32]
 c0337dc:	2d04      	cmp	r5, #4
 c0337de:	d1f8      	bne.n	c0337d2 <tfm_sst_get_info_ipc+0xe>
        out_size[0] != sizeof(psa_ps_status_t) ||
 c0337e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c0337e2:	2b08      	cmp	r3, #8
 c0337e4:	d1f5      	bne.n	c0337d2 <tfm_sst_get_info_ipc+0xe>
    num = psa_read(msg.handle, 0, &uid, in_size);
 c0337e6:	aa04      	add	r2, sp, #16
 c0337e8:	2100      	movs	r1, #0
 c0337ea:	6860      	ldr	r0, [r4, #4]
    client_id = msg.client_id;
 c0337ec:	f8d4 8008 	ldr.w	r8, [r4, #8]
    num = psa_read(msg.handle, 0, &uid, in_size);
 c0337f0:	f7e6 fe46 	bl	c01a480 <psa_read>
    if (num != in_size) {
 c0337f4:	2808      	cmp	r0, #8
    num = psa_read(msg.handle, 0, &uid, in_size);
 c0337f6:	4607      	mov	r7, r0
    if (num != in_size) {
 c0337f8:	d1eb      	bne.n	c0337d2 <tfm_sst_get_info_ipc+0xe>
    err = tfm_sst_get_info(client_id, uid, &info);
 c0337fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c0337fe:	ae06      	add	r6, sp, #24
 c033800:	9600      	str	r6, [sp, #0]
 c033802:	4640      	mov	r0, r8
 c033804:	f7ff ff64 	bl	c0336d0 <tfm_sst_get_info>
 c033808:	aa08      	add	r2, sp, #32
 c03380a:	f842 0d14 	str.w	r0, [r2, #-20]!
    psa_write(msg.handle, 0, &err, out_size[0]);
 c03380e:	462b      	mov	r3, r5
 c033810:	2100      	movs	r1, #0
 c033812:	6860      	ldr	r0, [r4, #4]
 c033814:	f7e6 fe38 	bl	c01a488 <psa_write>
    if (err == PSA_PS_SUCCESS) {
 c033818:	9d03      	ldr	r5, [sp, #12]
 c03381a:	b92d      	cbnz	r5, c033828 <tfm_sst_get_info_ipc+0x64>
        psa_write(msg.handle, 1, &info, out_size[1]);
 c03381c:	463b      	mov	r3, r7
 c03381e:	4632      	mov	r2, r6
 c033820:	2101      	movs	r1, #1
 c033822:	6860      	ldr	r0, [r4, #4]
 c033824:	f7e6 fe30 	bl	c01a488 <psa_write>
    return PSA_SUCCESS;
 c033828:	2000      	movs	r0, #0
 c03382a:	e7d3      	b.n	c0337d4 <tfm_sst_get_info_ipc+0x10>
 c03382c:	3003c904 	.word	0x3003c904

0c033830 <tfm_sst_get_ipc>:
{
 c033830:	b5f0      	push	{r4, r5, r6, r7, lr}
    in_size[0] = msg.in_size[0];
 c033832:	4c19      	ldr	r4, [pc, #100]	; (c033898 <tfm_sst_get_ipc+0x68>)
{
 c033834:	b087      	sub	sp, #28
    if (in_size[0] != sizeof(psa_ps_uid_t) ||
 c033836:	6923      	ldr	r3, [r4, #16]
 c033838:	2b08      	cmp	r3, #8
 c03383a:	d002      	beq.n	c033842 <tfm_sst_get_ipc+0x12>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c03383c:	2008      	movs	r0, #8
}
 c03383e:	b007      	add	sp, #28
 c033840:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (in_size[0] != sizeof(psa_ps_uid_t) ||
 c033842:	6962      	ldr	r2, [r4, #20]
 c033844:	2a04      	cmp	r2, #4
 c033846:	d1f9      	bne.n	c03383c <tfm_sst_get_ipc+0xc>
        in_size[1] != sizeof(uint32_t) ||
 c033848:	6a25      	ldr	r5, [r4, #32]
 c03384a:	2d04      	cmp	r5, #4
 c03384c:	d1f6      	bne.n	c03383c <tfm_sst_get_ipc+0xc>
    num = psa_read(msg.handle, 0, &uid, in_size[0]);
 c03384e:	aa04      	add	r2, sp, #16
 c033850:	2100      	movs	r1, #0
 c033852:	6860      	ldr	r0, [r4, #4]
    client_id = msg.client_id;
 c033854:	68a6      	ldr	r6, [r4, #8]
    out_size[1] = msg.out_size[1];
 c033856:	6a67      	ldr	r7, [r4, #36]	; 0x24
    num = psa_read(msg.handle, 0, &uid, in_size[0]);
 c033858:	f7e6 fe12 	bl	c01a480 <psa_read>
    if (num != in_size[0]) {
 c03385c:	2808      	cmp	r0, #8
 c03385e:	d1ed      	bne.n	c03383c <tfm_sst_get_ipc+0xc>
    num = psa_read(msg.handle, 1, &data_offset, in_size[1]);
 c033860:	462b      	mov	r3, r5
 c033862:	aa02      	add	r2, sp, #8
 c033864:	2101      	movs	r1, #1
 c033866:	6860      	ldr	r0, [r4, #4]
 c033868:	f7e6 fe0a 	bl	c01a480 <psa_read>
    if (num != in_size[1]) {
 c03386c:	2804      	cmp	r0, #4
    num = psa_read(msg.handle, 1, &data_offset, in_size[1]);
 c03386e:	4605      	mov	r5, r0
    if (num != in_size[1]) {
 c033870:	d1e4      	bne.n	c03383c <tfm_sst_get_ipc+0xc>
    err = tfm_sst_get(client_id, uid, data_offset, out_size[1]);
 c033872:	9b02      	ldr	r3, [sp, #8]
 c033874:	9701      	str	r7, [sp, #4]
 c033876:	9300      	str	r3, [sp, #0]
 c033878:	4630      	mov	r0, r6
 c03387a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c03387e:	f7ff ff16 	bl	c0336ae <tfm_sst_get>
 c033882:	aa06      	add	r2, sp, #24
 c033884:	f842 0d0c 	str.w	r0, [r2, #-12]!
    psa_write(msg.handle, 0, &err, out_size[0]);
 c033888:	462b      	mov	r3, r5
 c03388a:	6860      	ldr	r0, [r4, #4]
 c03388c:	2100      	movs	r1, #0
 c03388e:	f7e6 fdfb 	bl	c01a488 <psa_write>
    return PSA_SUCCESS;
 c033892:	2000      	movs	r0, #0
 c033894:	e7d3      	b.n	c03383e <tfm_sst_get_ipc+0xe>
 c033896:	bf00      	nop
 c033898:	3003c904 	.word	0x3003c904

0c03389c <tfm_sst_set_ipc>:
{
 c03389c:	b5f0      	push	{r4, r5, r6, r7, lr}
    in_size[0] = msg.in_size[0];
 c03389e:	4c19      	ldr	r4, [pc, #100]	; (c033904 <tfm_sst_set_ipc+0x68>)
{
 c0338a0:	b087      	sub	sp, #28
    if (in_size[0] != sizeof(psa_ps_uid_t) ||
 c0338a2:	6923      	ldr	r3, [r4, #16]
 c0338a4:	2b08      	cmp	r3, #8
 c0338a6:	d002      	beq.n	c0338ae <tfm_sst_set_ipc+0x12>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c0338a8:	2008      	movs	r0, #8
}
 c0338aa:	b007      	add	sp, #28
 c0338ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (in_size[0] != sizeof(psa_ps_uid_t) ||
 c0338ae:	69a2      	ldr	r2, [r4, #24]
 c0338b0:	2a04      	cmp	r2, #4
 c0338b2:	d1f9      	bne.n	c0338a8 <tfm_sst_set_ipc+0xc>
        in_size[2] != sizeof(psa_ps_create_flags_t) ||
 c0338b4:	6a25      	ldr	r5, [r4, #32]
 c0338b6:	2d04      	cmp	r5, #4
 c0338b8:	d1f6      	bne.n	c0338a8 <tfm_sst_set_ipc+0xc>
    num = psa_read(msg.handle, 0, &uid, in_size[0]);
 c0338ba:	aa04      	add	r2, sp, #16
 c0338bc:	2100      	movs	r1, #0
 c0338be:	6860      	ldr	r0, [r4, #4]
    client_id = msg.client_id;
 c0338c0:	68a6      	ldr	r6, [r4, #8]
    in_size[1] = msg.in_size[1];
 c0338c2:	6967      	ldr	r7, [r4, #20]
    num = psa_read(msg.handle, 0, &uid, in_size[0]);
 c0338c4:	f7e6 fddc 	bl	c01a480 <psa_read>
    if (num != in_size[0]) {
 c0338c8:	2808      	cmp	r0, #8
 c0338ca:	d1ed      	bne.n	c0338a8 <tfm_sst_set_ipc+0xc>
    num = psa_read(msg.handle, 2, &create_flags, in_size[2]);
 c0338cc:	462b      	mov	r3, r5
 c0338ce:	aa02      	add	r2, sp, #8
 c0338d0:	2102      	movs	r1, #2
 c0338d2:	6860      	ldr	r0, [r4, #4]
 c0338d4:	f7e6 fdd4 	bl	c01a480 <psa_read>
    if (num != in_size[2]) {
 c0338d8:	2804      	cmp	r0, #4
    num = psa_read(msg.handle, 2, &create_flags, in_size[2]);
 c0338da:	4605      	mov	r5, r0
    if (num != in_size[2]) {
 c0338dc:	d1e4      	bne.n	c0338a8 <tfm_sst_set_ipc+0xc>
    err = tfm_sst_set(client_id, uid, in_size[1], create_flags);
 c0338de:	9b02      	ldr	r3, [sp, #8]
 c0338e0:	4630      	mov	r0, r6
 c0338e2:	e9cd 7300 	strd	r7, r3, [sp]
 c0338e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c0338ea:	f7ff fecc 	bl	c033686 <tfm_sst_set>
 c0338ee:	aa06      	add	r2, sp, #24
 c0338f0:	f842 0d0c 	str.w	r0, [r2, #-12]!
    psa_write(msg.handle, 0, &err, out_size);
 c0338f4:	462b      	mov	r3, r5
 c0338f6:	6860      	ldr	r0, [r4, #4]
 c0338f8:	2100      	movs	r1, #0
 c0338fa:	f7e6 fdc5 	bl	c01a488 <psa_write>
    return PSA_SUCCESS;
 c0338fe:	2000      	movs	r0, #0
 c033900:	e7d3      	b.n	c0338aa <tfm_sst_set_ipc+0xe>
 c033902:	bf00      	nop
 c033904:	3003c904 	.word	0x3003c904

0c033908 <tfm_sst_get_support_ipc>:

static psa_status_t tfm_sst_get_support_ipc(void)
{
 c033908:	b537      	push	{r0, r1, r2, r4, r5, lr}
    size_t out_size;
    uint32_t support_flags;

    out_size = msg.out_size[0];
 c03390a:	4c09      	ldr	r4, [pc, #36]	; (c033930 <tfm_sst_get_support_ipc+0x28>)
    if (out_size != sizeof(support_flags)) {
 c03390c:	6a25      	ldr	r5, [r4, #32]
 c03390e:	2d04      	cmp	r5, #4
 c033910:	d10c      	bne.n	c03392c <tfm_sst_get_support_ipc+0x24>
        /* The output argument size is incorrect */
        return PSA_PS_ERROR_INVALID_ARGUMENT;
    }

    support_flags = tfm_sst_get_support();
 c033912:	f7ff fefc 	bl	c03370e <tfm_sst_get_support>
 c033916:	aa02      	add	r2, sp, #8
 c033918:	f842 0d04 	str.w	r0, [r2, #-4]!
    psa_write(msg.handle, 0, &support_flags, out_size);
 c03391c:	462b      	mov	r3, r5
 c03391e:	6860      	ldr	r0, [r4, #4]
 c033920:	2100      	movs	r1, #0
 c033922:	f7e6 fdb1 	bl	c01a488 <psa_write>
 c033926:	2000      	movs	r0, #0
    return PSA_SUCCESS;
}
 c033928:	b003      	add	sp, #12
 c03392a:	bd30      	pop	{r4, r5, pc}
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c03392c:	2008      	movs	r0, #8
 c03392e:	e7fb      	b.n	c033928 <tfm_sst_get_support_ipc+0x20>
 c033930:	3003c904 	.word	0x3003c904

0c033934 <ps_signal_handle>:
    while (1)
        ;
}

static void ps_signal_handle(psa_signal_t signal, sst_func_t pfn)
{
 c033934:	b538      	push	{r3, r4, r5, lr}
    psa_status_t status;

    status = psa_get(signal, &msg);
 c033936:	4c0a      	ldr	r4, [pc, #40]	; (c033960 <ps_signal_handle+0x2c>)
{
 c033938:	460d      	mov	r5, r1
    status = psa_get(signal, &msg);
 c03393a:	4621      	mov	r1, r4
 c03393c:	f7e6 fd9c 	bl	c01a478 <psa_get>
    switch (msg.type) {
 c033940:	6823      	ldr	r3, [r4, #0]
 c033942:	1c99      	adds	r1, r3, #2
 c033944:	db02      	blt.n	c03394c <ps_signal_handle+0x18>
 c033946:	1c5a      	adds	r2, r3, #1
 c033948:	dd01      	ble.n	c03394e <ps_signal_handle+0x1a>
 c03394a:	b133      	cbz	r3, c03395a <ps_signal_handle+0x26>
 c03394c:	e7fe      	b.n	c03394c <ps_signal_handle+0x18>
    case PSA_IPC_CONNECT:
        psa_reply(msg.handle, PSA_SUCCESS);
 c03394e:	2100      	movs	r1, #0
        break;
    case PSA_IPC_CALL:
        status = pfn();
        psa_reply(msg.handle, status);
 c033950:	6860      	ldr	r0, [r4, #4]
        psa_reply(msg.handle, PSA_SUCCESS);
        break;
    default:
        tfm_abort();
    }
}
 c033952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        psa_reply(msg.handle, status);
 c033956:	f7e6 bd99 	b.w	c01a48c <psa_reply>
        status = pfn();
 c03395a:	47a8      	blx	r5
        psa_reply(msg.handle, status);
 c03395c:	4601      	mov	r1, r0
 c03395e:	e7f7      	b.n	c033950 <ps_signal_handle+0x1c>
 c033960:	3003c904 	.word	0x3003c904

0c033964 <tfm_sst_req_mngr_init>:
#endif /* !defined(TFM_PSA_API) */

psa_ps_status_t tfm_sst_req_mngr_init(void)
{
 c033964:	b570      	push	{r4, r5, r6, lr}
#ifdef TFM_PSA_API
    psa_signal_t signals = 0;

    if (tfm_sst_init() != PSA_PS_SUCCESS) {
 c033966:	f7ff fe82 	bl	c03366e <tfm_sst_init>
 c03396a:	b978      	cbnz	r0, c03398c <tfm_sst_req_mngr_init+0x28>
        } else if (signals & TFM_SST_GET_INFO_SIG) {
            ps_signal_handle(TFM_SST_GET_INFO_SIG, tfm_sst_get_info_ipc);
        } else if (signals & TFM_SST_REMOVE_SIG) {
            ps_signal_handle(TFM_SST_REMOVE_SIG, tfm_sst_remove_ipc);
        } else if (signals & TFM_SST_GET_SUPPORT_SIG) {
            ps_signal_handle(TFM_SST_GET_SUPPORT_SIG, tfm_sst_get_support_ipc);
 c03396c:	4c13      	ldr	r4, [pc, #76]	; (c0339bc <tfm_sst_req_mngr_init+0x58>)
            ps_signal_handle(TFM_SST_REMOVE_SIG, tfm_sst_remove_ipc);
 c03396e:	4d14      	ldr	r5, [pc, #80]	; (c0339c0 <tfm_sst_req_mngr_init+0x5c>)
            ps_signal_handle(TFM_SST_GET_INFO_SIG, tfm_sst_get_info_ipc);
 c033970:	4e14      	ldr	r6, [pc, #80]	; (c0339c4 <tfm_sst_req_mngr_init+0x60>)
        signals = psa_wait(PSA_WAIT_ANY, PSA_BLOCK);
 c033972:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 c033976:	f04f 30ff 	mov.w	r0, #4294967295
 c03397a:	f7e6 fd7b 	bl	c01a474 <psa_wait>
        if (signals & TFM_SST_SET_SIG) {
 c03397e:	06c2      	lsls	r2, r0, #27
 c033980:	d505      	bpl.n	c03398e <tfm_sst_req_mngr_init+0x2a>
            ps_signal_handle(TFM_SST_SET_SIG, tfm_sst_set_ipc);
 c033982:	2010      	movs	r0, #16
 c033984:	4910      	ldr	r1, [pc, #64]	; (c0339c8 <tfm_sst_req_mngr_init+0x64>)
            ps_signal_handle(TFM_SST_GET_SUPPORT_SIG, tfm_sst_get_support_ipc);
 c033986:	f7ff ffd5 	bl	c033934 <ps_signal_handle>
 c03398a:	e7f2      	b.n	c033972 <tfm_sst_req_mngr_init+0xe>
 c03398c:	e7fe      	b.n	c03398c <tfm_sst_req_mngr_init+0x28>
        } else if (signals & TFM_SST_GET_SIG) {
 c03398e:	0683      	lsls	r3, r0, #26
 c033990:	d502      	bpl.n	c033998 <tfm_sst_req_mngr_init+0x34>
            ps_signal_handle(TFM_SST_GET_SIG, tfm_sst_get_ipc);
 c033992:	490e      	ldr	r1, [pc, #56]	; (c0339cc <tfm_sst_req_mngr_init+0x68>)
 c033994:	2020      	movs	r0, #32
 c033996:	e7f6      	b.n	c033986 <tfm_sst_req_mngr_init+0x22>
        } else if (signals & TFM_SST_GET_INFO_SIG) {
 c033998:	0641      	lsls	r1, r0, #25
 c03399a:	d502      	bpl.n	c0339a2 <tfm_sst_req_mngr_init+0x3e>
            ps_signal_handle(TFM_SST_GET_INFO_SIG, tfm_sst_get_info_ipc);
 c03399c:	4631      	mov	r1, r6
 c03399e:	2040      	movs	r0, #64	; 0x40
 c0339a0:	e7f1      	b.n	c033986 <tfm_sst_req_mngr_init+0x22>
        } else if (signals & TFM_SST_REMOVE_SIG) {
 c0339a2:	0602      	lsls	r2, r0, #24
 c0339a4:	d502      	bpl.n	c0339ac <tfm_sst_req_mngr_init+0x48>
            ps_signal_handle(TFM_SST_REMOVE_SIG, tfm_sst_remove_ipc);
 c0339a6:	4629      	mov	r1, r5
 c0339a8:	2080      	movs	r0, #128	; 0x80
 c0339aa:	e7ec      	b.n	c033986 <tfm_sst_req_mngr_init+0x22>
        } else if (signals & TFM_SST_GET_SUPPORT_SIG) {
 c0339ac:	05c3      	lsls	r3, r0, #23
 c0339ae:	d503      	bpl.n	c0339b8 <tfm_sst_req_mngr_init+0x54>
            ps_signal_handle(TFM_SST_GET_SUPPORT_SIG, tfm_sst_get_support_ipc);
 c0339b0:	4621      	mov	r1, r4
 c0339b2:	f44f 7080 	mov.w	r0, #256	; 0x100
 c0339b6:	e7e6      	b.n	c033986 <tfm_sst_req_mngr_init+0x22>
 c0339b8:	e7fe      	b.n	c0339b8 <tfm_sst_req_mngr_init+0x54>
 c0339ba:	bf00      	nop
 c0339bc:	0c033909 	.word	0x0c033909
 c0339c0:	0c03377d 	.word	0x0c03377d
 c0339c4:	0c0337c5 	.word	0x0c0337c5
 c0339c8:	0c03389d 	.word	0x0c03389d
 c0339cc:	0c033831 	.word	0x0c033831

0c0339d0 <sst_req_mngr_read_asset_data>:

psa_ps_status_t sst_req_mngr_read_asset_data(uint8_t *out_data, uint32_t size)
{
#ifdef TFM_PSA_API
  size_t num = 0;
  num = psa_read(msg.handle, 1, out_data, size);
 c0339d0:	4602      	mov	r2, r0
 c0339d2:	4806      	ldr	r0, [pc, #24]	; (c0339ec <sst_req_mngr_read_asset_data+0x1c>)
{
 c0339d4:	b510      	push	{r4, lr}
  num = psa_read(msg.handle, 1, out_data, size);
 c0339d6:	460b      	mov	r3, r1
{
 c0339d8:	460c      	mov	r4, r1
  num = psa_read(msg.handle, 1, out_data, size);
 c0339da:	6840      	ldr	r0, [r0, #4]
 c0339dc:	2101      	movs	r1, #1
 c0339de:	f7e6 fd4f 	bl	c01a480 <psa_read>
  }
#else /* TFM_PSA_API */
  (void)tfm_memcpy(out_data, p_data, size);
#endif
  return PSA_PS_SUCCESS;
}
 c0339e2:	4284      	cmp	r4, r0
 c0339e4:	bf14      	ite	ne
 c0339e6:	2008      	movne	r0, #8
 c0339e8:	2000      	moveq	r0, #0
 c0339ea:	bd10      	pop	{r4, pc}
 c0339ec:	3003c904 	.word	0x3003c904

0c0339f0 <sst_req_mngr_write_asset_data>:

void sst_req_mngr_write_asset_data(const uint8_t *in_data,
                                   uint32_t size)
{
#ifdef TFM_PSA_API
  psa_write(msg.handle, 1, in_data, size);
 c0339f0:	4602      	mov	r2, r0
 c0339f2:	4803      	ldr	r0, [pc, #12]	; (c033a00 <sst_req_mngr_write_asset_data+0x10>)
 c0339f4:	460b      	mov	r3, r1
 c0339f6:	6840      	ldr	r0, [r0, #4]
 c0339f8:	2101      	movs	r1, #1
 c0339fa:	f7e6 bd45 	b.w	c01a488 <psa_write>
 c0339fe:	bf00      	nop
 c033a00:	3003c904 	.word	0x3003c904

0c033a04 <tfm_svcall_psa_framework_version>:
/************************* SVC handler for PSA Client APIs *******************/

uint32_t tfm_svcall_psa_framework_version(void)
{
    return PSA_FRAMEWORK_VERSION;
}
 c033a04:	f44f 7080 	mov.w	r0, #256	; 0x100
 c033a08:	4770      	bx	lr
	...

0c033a0c <tfm_svcall_psa_version>:

uint32_t tfm_svcall_psa_version(uint32_t *args, int32_t ns_caller)
{
 c033a0c:	b510      	push	{r4, lr}
 c033a0e:	460c      	mov	r4, r1
    uint32_t sid;
    struct tfm_spm_service_t *service;

    TFM_ASSERT(args != NULL);
 c033a10:	b928      	cbnz	r0, c033a1e <tfm_svcall_psa_version+0x12>
 c033a12:	2231      	movs	r2, #49	; 0x31
 c033a14:	4907      	ldr	r1, [pc, #28]	; (c033a34 <tfm_svcall_psa_version+0x28>)
 c033a16:	4808      	ldr	r0, [pc, #32]	; (c033a38 <tfm_svcall_psa_version+0x2c>)
 c033a18:	f7e4 fce4 	bl	c0183e4 <iprintf>
 c033a1c:	e7fe      	b.n	c033a1c <tfm_svcall_psa_version+0x10>
    sid = (uint32_t)args[0];
    /*
     * It should return PSA_VERSION_NONE if the RoT Service is not
     * implemented.
     */
    service = tfm_spm_get_service_by_sid(sid);
 c033a1e:	6800      	ldr	r0, [r0, #0]
 c033a20:	f7fd fb36 	bl	c031090 <tfm_spm_get_service_by_sid>
    if (!service) {
 c033a24:	b120      	cbz	r0, c033a30 <tfm_svcall_psa_version+0x24>
 c033a26:	6803      	ldr	r3, [r0, #0]

    /*
     * It should return PSA_VERSION_NONE if the caller is not authorized
     * to access the RoT Service.
     */
    if (ns_caller && !service->service_db->non_secure_client) {
 c033a28:	b10c      	cbz	r4, c033a2e <tfm_svcall_psa_version+0x22>
 c033a2a:	7c18      	ldrb	r0, [r3, #16]
 c033a2c:	b100      	cbz	r0, c033a30 <tfm_svcall_psa_version+0x24>
        return PSA_VERSION_NONE;
    }

    return service->service_db->minor_version;
 c033a2e:	6958      	ldr	r0, [r3, #20]
}
 c033a30:	bd10      	pop	{r4, pc}
 c033a32:	bf00      	nop
 c033a34:	0c03712f 	.word	0x0c03712f
 c033a38:	0c037052 	.word	0x0c037052

0c033a3c <tfm_svcall_psa_connect>:

psa_handle_t tfm_svcall_psa_connect(uint32_t *args, int32_t ns_caller)
{
 c033a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c033a40:	460f      	mov	r7, r1
 c033a42:	b086      	sub	sp, #24
    uint32_t minor_version;
    struct tfm_spm_service_t *service;
    struct tfm_msg_body_t *msg;
    psa_handle_t connect_handle;

    TFM_ASSERT(args != NULL);
 c033a44:	b928      	cbnz	r0, c033a52 <tfm_svcall_psa_connect+0x16>
 c033a46:	224f      	movs	r2, #79	; 0x4f
 c033a48:	491e      	ldr	r1, [pc, #120]	; (c033ac4 <tfm_svcall_psa_connect+0x88>)
 c033a4a:	481f      	ldr	r0, [pc, #124]	; (c033ac8 <tfm_svcall_psa_connect+0x8c>)
 c033a4c:	f7e4 fcca 	bl	c0183e4 <iprintf>
 c033a50:	e7fe      	b.n	c033a50 <tfm_svcall_psa_connect+0x14>
    sid = (uint32_t)args[0];
    minor_version = (uint32_t)args[1];

    /* It is a fatal error if the RoT Service does not exist on the platform */
    service = tfm_spm_get_service_by_sid(sid);
 c033a52:	e9d0 0400 	ldrd	r0, r4, [r0]
 c033a56:	f7fd fb1b 	bl	c031090 <tfm_spm_get_service_by_sid>
    if (!service) {
 c033a5a:	4605      	mov	r5, r0
 c033a5c:	b908      	cbnz	r0, c033a62 <tfm_svcall_psa_connect+0x26>
        tfm_panic();
 c033a5e:	f000 fcab 	bl	c0343b8 <tfm_panic>

    /*
     * Create connection handle here since it is possible to return the error
     * code to client when creation fails.
     */
    connect_handle = tfm_spm_create_conn_handle(service);
 c033a62:	4628      	mov	r0, r5
 c033a64:	f7fd fa86 	bl	c030f74 <tfm_spm_create_conn_handle>
    if (connect_handle == PSA_NULL_HANDLE) {
 c033a68:	4606      	mov	r6, r0
 c033a6a:	b920      	cbnz	r0, c033a76 <tfm_svcall_psa_connect+0x3a>
        return PSA_ERROR_CONNECTION_BUSY;
 c033a6c:	f06f 0082 	mvn.w	r0, #130	; 0x82
     * and scheduler triggered
     */
    tfm_spm_send_event(service, msg);

    return PSA_SUCCESS;
}
 c033a70:	b006      	add	sp, #24
 c033a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ns_caller && !service->service_db->non_secure_client) {
 c033a76:	b127      	cbz	r7, c033a82 <tfm_svcall_psa_connect+0x46>
 c033a78:	682b      	ldr	r3, [r5, #0]
 c033a7a:	7c1b      	ldrb	r3, [r3, #16]
 c033a7c:	b90b      	cbnz	r3, c033a82 <tfm_svcall_psa_connect+0x46>
        tfm_panic();
 c033a7e:	f000 fc9b 	bl	c0343b8 <tfm_panic>
    if (tfm_spm_check_client_version(service, minor_version) != IPC_SUCCESS) {
 c033a82:	4621      	mov	r1, r4
 c033a84:	4628      	mov	r0, r5
 c033a86:	f7fd fb3f 	bl	c031108 <tfm_spm_check_client_version>
 c033a8a:	b108      	cbz	r0, c033a90 <tfm_svcall_psa_connect+0x54>
        tfm_panic();
 c033a8c:	f000 fc94 	bl	c0343b8 <tfm_panic>
    msg = tfm_spm_get_msg_buffer_from_conn_handle(connect_handle);
 c033a90:	4630      	mov	r0, r6
 c033a92:	f7fd fb5b 	bl	c03114c <tfm_spm_get_msg_buffer_from_conn_handle>
    if (!msg) {
 c033a96:	4680      	mov	r8, r0
 c033a98:	2800      	cmp	r0, #0
 c033a9a:	d0e7      	beq.n	c033a6c <tfm_svcall_psa_connect+0x30>
    tfm_spm_fill_msg(msg, service, connect_handle, PSA_IPC_CONNECT,
 c033a9c:	2400      	movs	r4, #0
 c033a9e:	f04f 33ff 	mov.w	r3, #4294967295
 c033aa2:	4632      	mov	r2, r6
 c033aa4:	4629      	mov	r1, r5
 c033aa6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 c033aaa:	e9cd 4402 	strd	r4, r4, [sp, #8]
 c033aae:	e9cd 7400 	strd	r7, r4, [sp]
 c033ab2:	f7fd fbc3 	bl	c03123c <tfm_spm_fill_msg>
    tfm_spm_send_event(service, msg);
 c033ab6:	4641      	mov	r1, r8
 c033ab8:	4628      	mov	r0, r5
 c033aba:	f7fd fb57 	bl	c03116c <tfm_spm_send_event>
    return PSA_SUCCESS;
 c033abe:	4620      	mov	r0, r4
 c033ac0:	e7d6      	b.n	c033a70 <tfm_svcall_psa_connect+0x34>
 c033ac2:	bf00      	nop
 c033ac4:	0c037146 	.word	0x0c037146
 c033ac8:	0c037052 	.word	0x0c037052

0c033acc <tfm_svcall_psa_call>:

psa_status_t tfm_svcall_psa_call(uint32_t *args, int32_t ns_caller, uint32_t lr)
{
 c033acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c033ad0:	460c      	mov	r4, r1
 c033ad2:	b09b      	sub	sp, #108	; 0x6c
 c033ad4:	4690      	mov	r8, r2
    int i;
    struct spm_partition_desc_t *partition = NULL;
    uint32_t privileged;
    int32_t type;

    TFM_ASSERT(args != NULL);
 c033ad6:	4605      	mov	r5, r0
 c033ad8:	b928      	cbnz	r0, c033ae6 <tfm_svcall_psa_call+0x1a>
 c033ada:	2292      	movs	r2, #146	; 0x92
 c033adc:	4962      	ldr	r1, [pc, #392]	; (c033c68 <tfm_svcall_psa_call+0x19c>)
 c033ade:	4863      	ldr	r0, [pc, #396]	; (c033c6c <tfm_svcall_psa_call+0x1a0>)
 c033ae0:	f7e4 fc80 	bl	c0183e4 <iprintf>
 c033ae4:	e7fe      	b.n	c033ae4 <tfm_svcall_psa_call+0x18>
    handle = (psa_handle_t)args[0];
 c033ae6:	6803      	ldr	r3, [r0, #0]
 c033ae8:	9306      	str	r3, [sp, #24]
    type = (int32_t)args[1];
 c033aea:	6843      	ldr	r3, [r0, #4]

    if (type < 0) {
 c033aec:	2b00      	cmp	r3, #0
    type = (int32_t)args[1];
 c033aee:	9308      	str	r3, [sp, #32]
    if (type < 0) {
 c033af0:	da01      	bge.n	c033af6 <tfm_svcall_psa_call+0x2a>
        tfm_panic();
 c033af2:	f000 fc61 	bl	c0343b8 <tfm_panic>
    }
    partition = tfm_spm_get_running_partition();
 c033af6:	f7fd fb7d 	bl	c0311f4 <tfm_spm_get_running_partition>
    if (!partition) {
 c033afa:	4606      	mov	r6, r0
 c033afc:	b908      	cbnz	r0, c033b02 <tfm_svcall_psa_call+0x36>
        tfm_panic();
 c033afe:	f000 fc5b 	bl	c0343b8 <tfm_panic>
    }
    privileged = tfm_spm_partition_get_privileged_mode(
 c033b02:	6e73      	ldr	r3, [r6, #100]	; 0x64
 c033b04:	6858      	ldr	r0, [r3, #4]
 c033b06:	f7fd fc59 	bl	c0313bc <tfm_spm_partition_get_privileged_mode>
 c033b0a:	4607      	mov	r7, r0
        partition->static_data->partition_flags);

    if (!ns_caller) {
 c033b0c:	2c00      	cmp	r4, #0
 c033b0e:	d16f      	bne.n	c033bf0 <tfm_svcall_psa_call+0x124>
        inptr = (psa_invec *)args[2];
        in_num = (size_t)args[3];
 c033b10:	e9d5 9602 	ldrd	r9, r6, [r5, #8]
         * - if FP is used and FPCCR_S.TS is 0, 5th and 6th parameters are at
         *   26th and 27th position counting from SP;
         * - if FP is used and FPCCR_S.TS is 1, 5th and 6th parameters are at
         *   42th and 43th position counting from SP.
         */
         if (!is_stack_alloc_fp_space(lr)) {
 c033b14:	f018 0f10 	tst.w	r8, #16
            outptr = (psa_outvec *)args[8];
            out_num = (size_t)args[9];
 c033b18:	bf14      	ite	ne
 c033b1a:	e9d5 b508 	ldrdne	fp, r5, [r5, #32]
            outptr = (psa_outvec *)args[42];
            out_num = (size_t)args[43];
#endif
        } else {
            outptr = (psa_outvec *)args[26];
            out_num = (size_t)args[27];
 c033b1e:	e9d5 b51a 	ldrdeq	fp, r5, [r5, #104]	; 0x68
        outptr = (psa_outvec *)((psa_invec *)args[3])->base;
        out_num = ((psa_invec *)args[3])->len;
    }

    /* It is a fatal error if in_len + out_len > PSA_MAX_IOVEC. */
    if ((in_num > PSA_MAX_IOVEC) ||
 c033b22:	2e04      	cmp	r6, #4
 c033b24:	d804      	bhi.n	c033b30 <tfm_svcall_psa_call+0x64>
 c033b26:	2d04      	cmp	r5, #4
 c033b28:	d802      	bhi.n	c033b30 <tfm_svcall_psa_call+0x64>
        (out_num > PSA_MAX_IOVEC) ||
        (in_num + out_num > PSA_MAX_IOVEC)) {
 c033b2a:	1973      	adds	r3, r6, r5
        (out_num > PSA_MAX_IOVEC) ||
 c033b2c:	2b04      	cmp	r3, #4
 c033b2e:	d901      	bls.n	c033b34 <tfm_svcall_psa_call+0x68>
        tfm_panic();
 c033b30:	f000 fc42 	bl	c0343b8 <tfm_panic>
    }

    /* It is a fatal error if an invalid handle was passed. */
    service = tfm_spm_get_service_by_handle(handle);
 c033b34:	9806      	ldr	r0, [sp, #24]
 c033b36:	f7fd fad3 	bl	c0310e0 <tfm_spm_get_service_by_handle>
    if (!service) {
 c033b3a:	9007      	str	r0, [sp, #28]
 c033b3c:	b908      	cbnz	r0, c033b42 <tfm_svcall_psa_call+0x76>
        /* FixMe: Need to implement one mechanism to resolve this failure. */
        tfm_panic();
 c033b3e:	f000 fc3b 	bl	c0343b8 <tfm_panic>
    /*
     * Read client invecs from the wrap input vector. It is a fatal error
     * if the memory reference for the wrap input vector is invalid or not
     * readable.
     */
    if (tfm_memory_check(inptr, in_num * sizeof(psa_invec), ns_caller,
 c033b42:	00f3      	lsls	r3, r6, #3
 c033b44:	9309      	str	r3, [sp, #36]	; 0x24
 c033b46:	9700      	str	r7, [sp, #0]
 c033b48:	2301      	movs	r3, #1
 c033b4a:	4622      	mov	r2, r4
 c033b4c:	00f1      	lsls	r1, r6, #3
 c033b4e:	4648      	mov	r0, r9
 c033b50:	f7fd fc1a 	bl	c031388 <tfm_memory_check>
 c033b54:	b108      	cbz	r0, c033b5a <tfm_svcall_psa_call+0x8e>
        TFM_MEMORY_ACCESS_RO, privileged) != IPC_SUCCESS) {
        tfm_panic();
 c033b56:	f000 fc2f 	bl	c0343b8 <tfm_panic>
    /*
     * Read client outvecs from the wrap output vector and will update the
     * actual length later. It is a fatal error if the memory reference for
     * the wrap output vector is invalid or not read-write.
     */
    if (tfm_memory_check(outptr, out_num * sizeof(psa_outvec), ns_caller,
 c033b5a:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
 c033b5e:	9700      	str	r7, [sp, #0]
 c033b60:	2302      	movs	r3, #2
 c033b62:	4622      	mov	r2, r4
 c033b64:	4651      	mov	r1, sl
 c033b66:	4658      	mov	r0, fp
 c033b68:	f7fd fc0e 	bl	c031388 <tfm_memory_check>
 c033b6c:	b108      	cbz	r0, c033b72 <tfm_svcall_psa_call+0xa6>
        TFM_MEMORY_ACCESS_RW, privileged) != IPC_SUCCESS) {
        tfm_panic();
 c033b6e:	f000 fc23 	bl	c0343b8 <tfm_panic>
    }

    tfm_core_util_memset(invecs, 0, sizeof(invecs));
 c033b72:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 c033b76:	2220      	movs	r2, #32
 c033b78:	2100      	movs	r1, #0
 c033b7a:	4640      	mov	r0, r8
 c033b7c:	f7ff fac6 	bl	c03310c <tfm_core_util_memset>
    tfm_core_util_memset(outvecs, 0, sizeof(outvecs));
 c033b80:	2220      	movs	r2, #32
 c033b82:	2100      	movs	r1, #0
 c033b84:	a812      	add	r0, sp, #72	; 0x48
 c033b86:	f7ff fac1 	bl	c03310c <tfm_core_util_memset>

    /* Copy the address out to avoid TOCTOU attacks. */
    tfm_core_util_memcpy(invecs, inptr, in_num * sizeof(psa_invec));
 c033b8a:	4649      	mov	r1, r9
 c033b8c:	00f2      	lsls	r2, r6, #3
 c033b8e:	4640      	mov	r0, r8
 c033b90:	f7ff fa86 	bl	c0330a0 <tfm_core_util_memcpy>
    tfm_core_util_memcpy(outvecs, outptr, out_num * sizeof(psa_outvec));
 c033b94:	4652      	mov	r2, sl
 c033b96:	4659      	mov	r1, fp
 c033b98:	a812      	add	r0, sp, #72	; 0x48
 c033b9a:	f7ff fa81 	bl	c0330a0 <tfm_core_util_memcpy>

    /*
     * For client input vector, it is a fatal error if the provided payload
     * memory reference was invalid or not readable.
     */
    for (i = 0; i < in_num; i++) {
 c033b9e:	f04f 0900 	mov.w	r9, #0
 c033ba2:	45b1      	cmp	r9, r6
 c033ba4:	d13f      	bne.n	c033c26 <tfm_svcall_psa_call+0x15a>
    }
    /*
     * For client output vector, it is a fatal error if the provided payload
     * memory reference was invalid or not read-write.
     */
    for (i = 0; i < out_num; i++) {
 c033ba6:	f04f 0900 	mov.w	r9, #0
        if (tfm_memory_check(outvecs[i].base, outvecs[i].len,
 c033baa:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
    for (i = 0; i < out_num; i++) {
 c033bae:	45a9      	cmp	r9, r5
 c033bb0:	d149      	bne.n	c033c46 <tfm_svcall_psa_call+0x17a>

    /*
     * FixMe: Need to check if the message is unrecognized by the RoT
     * Service or incorrectly formatted.
     */
    msg = tfm_spm_get_msg_buffer_from_conn_handle(handle);
 c033bb2:	9806      	ldr	r0, [sp, #24]
 c033bb4:	f7fd faca 	bl	c03114c <tfm_spm_get_msg_buffer_from_conn_handle>
    if (!msg) {
 c033bb8:	4607      	mov	r7, r0
 c033bba:	b908      	cbnz	r0, c033bc0 <tfm_svcall_psa_call+0xf4>
        /* FixMe: Need to implement one mechanism to resolve this failure. */
        tfm_panic();
 c033bbc:	f000 fbfc 	bl	c0343b8 <tfm_panic>
    }

    tfm_spm_fill_msg(msg, service, handle, type, ns_caller, invecs,
 c033bc0:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 c033bc4:	ab12      	add	r3, sp, #72	; 0x48
 c033bc6:	e9cd 6302 	strd	r6, r3, [sp, #8]
 c033bca:	4638      	mov	r0, r7
 c033bcc:	e9cd 5b04 	strd	r5, fp, [sp, #16]
 c033bd0:	e9cd 4800 	strd	r4, r8, [sp]
 c033bd4:	9b08      	ldr	r3, [sp, #32]
 c033bd6:	f7fd fb31 	bl	c03123c <tfm_spm_fill_msg>

    /*
     * Send message and wake up the SP who is waiting on message queue,
     * and scheduler triggered
     */
    if (tfm_spm_send_event(service, msg) != IPC_SUCCESS) {
 c033bda:	4639      	mov	r1, r7
 c033bdc:	9807      	ldr	r0, [sp, #28]
 c033bde:	f7fd fac5 	bl	c03116c <tfm_spm_send_event>
 c033be2:	b108      	cbz	r0, c033be8 <tfm_svcall_psa_call+0x11c>
        /* FixMe: Need to refine failure process here. */
        tfm_panic();
 c033be4:	f000 fbe8 	bl	c0343b8 <tfm_panic>
    }
    return PSA_SUCCESS;
}
 c033be8:	2000      	movs	r0, #0
 c033bea:	b01b      	add	sp, #108	; 0x6c
 c033bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (tfm_memory_check((const void *)args[2], sizeof(uint32_t),
 c033bf0:	9000      	str	r0, [sp, #0]
 c033bf2:	2301      	movs	r3, #1
 c033bf4:	4622      	mov	r2, r4
 c033bf6:	2104      	movs	r1, #4
 c033bf8:	68a8      	ldr	r0, [r5, #8]
 c033bfa:	f7fd fbc5 	bl	c031388 <tfm_memory_check>
 c033bfe:	b108      	cbz	r0, c033c04 <tfm_svcall_psa_call+0x138>
            tfm_panic();
 c033c00:	f000 fbda 	bl	c0343b8 <tfm_panic>
        if (tfm_memory_check((const void *)args[3], sizeof(uint32_t),
 c033c04:	9700      	str	r7, [sp, #0]
 c033c06:	2301      	movs	r3, #1
 c033c08:	4622      	mov	r2, r4
 c033c0a:	2104      	movs	r1, #4
 c033c0c:	68e8      	ldr	r0, [r5, #12]
 c033c0e:	f7fd fbbb 	bl	c031388 <tfm_memory_check>
 c033c12:	b108      	cbz	r0, c033c18 <tfm_svcall_psa_call+0x14c>
            tfm_panic();
 c033c14:	f000 fbd0 	bl	c0343b8 <tfm_panic>
        inptr = (psa_invec *)((psa_invec *)args[2])->base;
 c033c18:	68ab      	ldr	r3, [r5, #8]
        in_num = ((psa_invec *)args[2])->len;
 c033c1a:	e9d3 9600 	ldrd	r9, r6, [r3]
        outptr = (psa_outvec *)((psa_invec *)args[3])->base;
 c033c1e:	68eb      	ldr	r3, [r5, #12]
        out_num = ((psa_invec *)args[3])->len;
 c033c20:	e9d3 b500 	ldrd	fp, r5, [r3]
 c033c24:	e77d      	b.n	c033b22 <tfm_svcall_psa_call+0x56>
        if (tfm_memory_check(invecs[i].base, invecs[i].len, ns_caller,
 c033c26:	9700      	str	r7, [sp, #0]
 c033c28:	eb08 01c9 	add.w	r1, r8, r9, lsl #3
 c033c2c:	2301      	movs	r3, #1
 c033c2e:	4622      	mov	r2, r4
 c033c30:	6849      	ldr	r1, [r1, #4]
 c033c32:	f858 0039 	ldr.w	r0, [r8, r9, lsl #3]
 c033c36:	f7fd fba7 	bl	c031388 <tfm_memory_check>
 c033c3a:	b108      	cbz	r0, c033c40 <tfm_svcall_psa_call+0x174>
            tfm_panic();
 c033c3c:	f000 fbbc 	bl	c0343b8 <tfm_panic>
    for (i = 0; i < in_num; i++) {
 c033c40:	f109 0901 	add.w	r9, r9, #1
 c033c44:	e7ad      	b.n	c033ba2 <tfm_svcall_psa_call+0xd6>
        if (tfm_memory_check(outvecs[i].base, outvecs[i].len,
 c033c46:	9700      	str	r7, [sp, #0]
 c033c48:	eb0a 01c9 	add.w	r1, sl, r9, lsl #3
 c033c4c:	2302      	movs	r3, #2
 c033c4e:	4622      	mov	r2, r4
 c033c50:	6849      	ldr	r1, [r1, #4]
 c033c52:	f85a 0039 	ldr.w	r0, [sl, r9, lsl #3]
 c033c56:	f7fd fb97 	bl	c031388 <tfm_memory_check>
 c033c5a:	b108      	cbz	r0, c033c60 <tfm_svcall_psa_call+0x194>
            tfm_panic();
 c033c5c:	f000 fbac 	bl	c0343b8 <tfm_panic>
    for (i = 0; i < out_num; i++) {
 c033c60:	f109 0901 	add.w	r9, r9, #1
 c033c64:	e7a3      	b.n	c033bae <tfm_svcall_psa_call+0xe2>
 c033c66:	bf00      	nop
 c033c68:	0c03715d 	.word	0x0c03715d
 c033c6c:	0c037052 	.word	0x0c037052

0c033c70 <tfm_svcall_psa_close>:

void tfm_svcall_psa_close(uint32_t *args, int32_t ns_caller)
{
 c033c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 c033c72:	460f      	mov	r7, r1
 c033c74:	b087      	sub	sp, #28
    psa_handle_t handle;
    struct tfm_spm_service_t *service;
    struct tfm_msg_body_t *msg;

    TFM_ASSERT(args != NULL);
 c033c76:	b930      	cbnz	r0, c033c86 <tfm_svcall_psa_close+0x16>
 c033c78:	f240 122d 	movw	r2, #301	; 0x12d
 c033c7c:	4915      	ldr	r1, [pc, #84]	; (c033cd4 <tfm_svcall_psa_close+0x64>)
 c033c7e:	4816      	ldr	r0, [pc, #88]	; (c033cd8 <tfm_svcall_psa_close+0x68>)
 c033c80:	f7e4 fbb0 	bl	c0183e4 <iprintf>
 c033c84:	e7fe      	b.n	c033c84 <tfm_svcall_psa_close+0x14>
    handle = args[0];
 c033c86:	6804      	ldr	r4, [r0, #0]
    /* It will have no effect if called with the NULL handle */
    if (handle == PSA_NULL_HANDLE) {
 c033c88:	b314      	cbz	r4, c033cd0 <tfm_svcall_psa_close+0x60>

    /*
     * It is a fatal error if an invalid handle was provided that is not the
     * null handle..
     */
    service = tfm_spm_get_service_by_handle(handle);
 c033c8a:	4620      	mov	r0, r4
 c033c8c:	f7fd fa28 	bl	c0310e0 <tfm_spm_get_service_by_handle>
    if (!service) {
 c033c90:	4605      	mov	r5, r0
 c033c92:	b908      	cbnz	r0, c033c98 <tfm_svcall_psa_close+0x28>
        /* FixMe: Need to implement one mechanism to resolve this failure. */
        tfm_panic();
 c033c94:	f000 fb90 	bl	c0343b8 <tfm_panic>
    }

    msg = tfm_spm_get_msg_buffer_from_conn_handle(handle);
 c033c98:	4620      	mov	r0, r4
 c033c9a:	f7fd fa57 	bl	c03114c <tfm_spm_get_msg_buffer_from_conn_handle>
    if (!msg) {
 c033c9e:	4606      	mov	r6, r0
 c033ca0:	b908      	cbnz	r0, c033ca6 <tfm_svcall_psa_close+0x36>
        /* FixMe: Need to implement one mechanism to resolve this failure. */
        tfm_panic();
 c033ca2:	f000 fb89 	bl	c0343b8 <tfm_panic>
    }

    /* No input or output needed for close message */
    tfm_spm_fill_msg(msg, service, handle, PSA_IPC_DISCONNECT, ns_caller,
 c033ca6:	2300      	movs	r3, #0
 c033ca8:	4629      	mov	r1, r5
 c033caa:	e9cd 3304 	strd	r3, r3, [sp, #16]
 c033cae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 c033cb2:	e9cd 7300 	strd	r7, r3, [sp]
 c033cb6:	4630      	mov	r0, r6
 c033cb8:	f06f 0301 	mvn.w	r3, #1
 c033cbc:	4622      	mov	r2, r4
 c033cbe:	f7fd fabd 	bl	c03123c <tfm_spm_fill_msg>

    /*
     * Send message and wake up the SP who is waiting on message queue,
     * and scheduler triggered
     */
    tfm_spm_send_event(service, msg);
 c033cc2:	4631      	mov	r1, r6
 c033cc4:	4628      	mov	r0, r5
}
 c033cc6:	b007      	add	sp, #28
 c033cc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tfm_spm_send_event(service, msg);
 c033ccc:	f7fd ba4e 	b.w	c03116c <tfm_spm_send_event>
}
 c033cd0:	b007      	add	sp, #28
 c033cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c033cd4:	0c037171 	.word	0x0c037171
 c033cd8:	0c037052 	.word	0x0c037052

0c033cdc <tfm_svcall_enable_irq>:
    tfm_spm_hal_clear_pending_irq(irq_line);
    tfm_spm_hal_enable_irq(irq_line);
}

void tfm_svcall_enable_irq(uint32_t *args)
{
 c033cdc:	b508      	push	{r3, lr}
    IRQn_Type irq_line = (IRQn_Type) 0;
    int32_t ret;
    struct spm_partition_desc_t *partition = NULL;

    /* It is a fatal error if passed signal indicates more than one signals. */
    if (!tfm_is_one_bit_set(irq_signal)) {
 c033cde:	6800      	ldr	r0, [r0, #0]
 c033ce0:	f7ff fd35 	bl	c03374e <tfm_is_one_bit_set>
 c033ce4:	b908      	cbnz	r0, c033cea <tfm_svcall_enable_irq+0xe>
        tfm_panic();
 c033ce6:	f000 fb67 	bl	c0343b8 <tfm_panic>
    }

    partition = tfm_spm_get_running_partition();
 c033cea:	f7fd fa83 	bl	c0311f4 <tfm_spm_get_running_partition>
    if (!partition) {
 c033cee:	b908      	cbnz	r0, c033cf4 <tfm_svcall_enable_irq+0x18>
        tfm_panic();
 c033cf0:	f000 fb62 	bl	c0343b8 <tfm_panic>

    ret = get_irq_line_for_signal(partition->static_data->partition_id,
                                  irq_signal, &irq_line);
    /* It is a fatal error if passed signal is not an interrupt signal. */
    if (ret != IPC_SUCCESS) {
        tfm_panic();
 c033cf4:	f000 fb60 	bl	c0343b8 <tfm_panic>
    }

    tfm_spm_hal_enable_irq(irq_line);
}
 c033cf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tfm_spm_hal_enable_irq(irq_line);
 c033cfc:	2000      	movs	r0, #0
 c033cfe:	f7ed b8dd 	b.w	c020ebc <tfm_spm_hal_enable_irq>

0c033d02 <tfm_svcall_disable_irq>:

void tfm_svcall_disable_irq(uint32_t *args)
{
 c033d02:	b508      	push	{r3, lr}
    IRQn_Type irq_line = (IRQn_Type) 0;
    int32_t ret;
    struct spm_partition_desc_t *partition = NULL;

    /* It is a fatal error if passed signal indicates more than one signals. */
    if (!tfm_is_one_bit_set(irq_signal)) {
 c033d04:	6800      	ldr	r0, [r0, #0]
 c033d06:	f7ff fd22 	bl	c03374e <tfm_is_one_bit_set>
 c033d0a:	b908      	cbnz	r0, c033d10 <tfm_svcall_disable_irq+0xe>
        tfm_panic();
 c033d0c:	f000 fb54 	bl	c0343b8 <tfm_panic>
    }

    partition = tfm_spm_get_running_partition();
 c033d10:	f7fd fa70 	bl	c0311f4 <tfm_spm_get_running_partition>
    if (!partition) {
 c033d14:	b908      	cbnz	r0, c033d1a <tfm_svcall_disable_irq+0x18>
        tfm_panic();
 c033d16:	f000 fb4f 	bl	c0343b8 <tfm_panic>

    ret = get_irq_line_for_signal(partition->static_data->partition_id,
                                  irq_signal, &irq_line);
    /* It is a fatal error if passed signal is not an interrupt signal. */
    if (ret != IPC_SUCCESS) {
        tfm_panic();
 c033d1a:	f000 fb4d 	bl	c0343b8 <tfm_panic>
    }

    tfm_spm_hal_disable_irq(irq_line);
}
 c033d1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tfm_spm_hal_disable_irq(irq_line);
 c033d22:	2000      	movs	r0, #0
 c033d24:	f7ed b8d8 	b.w	c020ed8 <tfm_spm_hal_disable_irq>

0c033d28 <SVC_Handler_IPC>:

int32_t SVC_Handler_IPC(tfm_svc_number_t svc_num, uint32_t *ctx, uint32_t lr)
{
 c033d28:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    switch (svc_num) {
 c033d2c:	380a      	subs	r0, #10
{
 c033d2e:	460b      	mov	r3, r1
    switch (svc_num) {
 c033d30:	2812      	cmp	r0, #18
 c033d32:	f200 822a 	bhi.w	c03418a <SVC_Handler_IPC+0x462>
 c033d36:	e8df f010 	tbh	[pc, r0, lsl #1]
 c033d3a:	0220      	.short	0x0220
 c033d3c:	00330224 	.word	0x00330224
 c033d40:	022801f9 	.word	0x022801f9
 c033d44:	023d0013 	.word	0x023d0013
 c033d48:	00200019 	.word	0x00200019
 c033d4c:	002e0027 	.word	0x002e0027
 c033d50:	009d004f 	.word	0x009d004f
 c033d54:	00fa00b4 	.word	0x00fa00b4
 c033d58:	016b0127 	.word	0x016b0127
 c033d5c:	01e90015 	.word	0x01e90015
    case TFM_SVC_EXIT_THRD:
        tfm_svcall_thrd_exit();
 c033d60:	f000 faf6 	bl	c034350 <tfm_svcall_thrd_exit>

    default:
        LOG_MSG("Unknown SVC number requested!");
        return PSA_ERROR_GENERIC_ERROR;
    }
    return PSA_SUCCESS;
 c033d64:	2000      	movs	r0, #0
}
 c033d66:	b002      	add	sp, #8
 c033d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return tfm_svcall_psa_version(ctx, 0);
 c033d6c:	2100      	movs	r1, #0
 c033d6e:	4618      	mov	r0, r3
}
 c033d70:	b002      	add	sp, #8
 c033d72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return tfm_svcall_psa_version(ctx, 0);
 c033d76:	f7ff be49 	b.w	c033a0c <tfm_svcall_psa_version>
        return tfm_svcall_psa_connect(ctx, 0);
 c033d7a:	2100      	movs	r1, #0
 c033d7c:	4618      	mov	r0, r3
}
 c033d7e:	b002      	add	sp, #8
 c033d80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return tfm_svcall_psa_connect(ctx, 0);
 c033d84:	f7ff be5a 	b.w	c033a3c <tfm_svcall_psa_connect>
        return tfm_svcall_psa_call(ctx, 0, lr);
 c033d88:	2100      	movs	r1, #0
 c033d8a:	4618      	mov	r0, r3
}
 c033d8c:	b002      	add	sp, #8
 c033d8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return tfm_svcall_psa_call(ctx, 0, lr);
 c033d92:	f7ff be9b 	b.w	c033acc <tfm_svcall_psa_call>
        tfm_svcall_psa_close(ctx, 0);
 c033d96:	2100      	movs	r1, #0
 c033d98:	4618      	mov	r0, r3
 c033d9a:	f7ff ff69 	bl	c033c70 <tfm_svcall_psa_close>
 c033d9e:	e7e1      	b.n	c033d64 <SVC_Handler_IPC+0x3c>
    TFM_ASSERT(args != NULL);
 c033da0:	b933      	cbnz	r3, c033db0 <SVC_Handler_IPC+0x88>
 c033da2:	f240 1261 	movw	r2, #353	; 0x161
 c033da6:	49ab      	ldr	r1, [pc, #684]	; (c034054 <SVC_Handler_IPC+0x32c>)
 c033da8:	48ab      	ldr	r0, [pc, #684]	; (c034058 <SVC_Handler_IPC+0x330>)
 c033daa:	f7e4 fb1b 	bl	c0183e4 <iprintf>
 c033dae:	e7fe      	b.n	c033dae <SVC_Handler_IPC+0x86>
    timeout = args[1];
 c033db0:	e9d3 4600 	ldrd	r4, r6, [r3]
    partition = tfm_spm_get_running_partition();
 c033db4:	f7fd fa1e 	bl	c0311f4 <tfm_spm_get_running_partition>
    if (!partition) {
 c033db8:	4605      	mov	r5, r0
 c033dba:	b908      	cbnz	r0, c033dc0 <SVC_Handler_IPC+0x98>
        tfm_panic();
 c033dbc:	f000 fafc 	bl	c0343b8 <tfm_panic>
    if (timeout == PSA_BLOCK &&
 c033dc0:	2e00      	cmp	r6, #0
    partition->runtime_data.signal_mask = signal_mask;
 c033dc2:	662c      	str	r4, [r5, #96]	; 0x60
    if (timeout == PSA_BLOCK &&
 c033dc4:	da05      	bge.n	c033dd2 <SVC_Handler_IPC+0xaa>
        (partition->runtime_data.signals & signal_mask) == 0) {
 c033dc6:	68ab      	ldr	r3, [r5, #8]
    if (timeout == PSA_BLOCK &&
 c033dc8:	421c      	tst	r4, r3
 c033dca:	d102      	bne.n	c033dd2 <SVC_Handler_IPC+0xaa>
        tfm_event_wait(&partition->runtime_data.signal_evnt);
 c033dcc:	4628      	mov	r0, r5
 c033dce:	f000 faf5 	bl	c0343bc <tfm_event_wait>
    return partition->runtime_data.signals & signal_mask;
 c033dd2:	68a8      	ldr	r0, [r5, #8]
 c033dd4:	4020      	ands	r0, r4
        return tfm_svcall_psa_wait(ctx);
 c033dd6:	e7c6      	b.n	c033d66 <SVC_Handler_IPC+0x3e>
    TFM_ASSERT(args != NULL);
 c033dd8:	b933      	cbnz	r3, c033de8 <SVC_Handler_IPC+0xc0>
 c033dda:	f240 129f 	movw	r2, #415	; 0x19f
 c033dde:	499f      	ldr	r1, [pc, #636]	; (c03405c <SVC_Handler_IPC+0x334>)
 c033de0:	489d      	ldr	r0, [pc, #628]	; (c034058 <SVC_Handler_IPC+0x330>)
 c033de2:	f7e4 faff 	bl	c0183e4 <iprintf>
 c033de6:	e7fe      	b.n	c033de6 <SVC_Handler_IPC+0xbe>
    msg = (psa_msg_t *)args[1];
 c033de8:	e9d3 6700 	ldrd	r6, r7, [r3]
    if (tfm_bitcount(signal) != 1) {
 c033dec:	4630      	mov	r0, r6
 c033dee:	f7ff fca5 	bl	c03373c <tfm_bitcount>
 c033df2:	2801      	cmp	r0, #1
 c033df4:	d001      	beq.n	c033dfa <SVC_Handler_IPC+0xd2>
        tfm_panic();
 c033df6:	f000 fadf 	bl	c0343b8 <tfm_panic>
    partition = tfm_spm_get_running_partition();
 c033dfa:	f7fd f9fb 	bl	c0311f4 <tfm_spm_get_running_partition>
    if (!partition) {
 c033dfe:	4604      	mov	r4, r0
 c033e00:	b908      	cbnz	r0, c033e06 <SVC_Handler_IPC+0xde>
        tfm_panic();
 c033e02:	f000 fad9 	bl	c0343b8 <tfm_panic>
    privileged = tfm_spm_partition_get_privileged_mode(
 c033e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c033e08:	6858      	ldr	r0, [r3, #4]
 c033e0a:	f7fd fad7 	bl	c0313bc <tfm_spm_partition_get_privileged_mode>
    if (tfm_memory_check(msg, sizeof(psa_msg_t), false, TFM_MEMORY_ACCESS_RW,
 c033e0e:	2302      	movs	r3, #2
 c033e10:	9000      	str	r0, [sp, #0]
 c033e12:	2200      	movs	r2, #0
 c033e14:	2130      	movs	r1, #48	; 0x30
 c033e16:	4638      	mov	r0, r7
 c033e18:	f7fd fab6 	bl	c031388 <tfm_memory_check>
 c033e1c:	b108      	cbz	r0, c033e22 <SVC_Handler_IPC+0xfa>
        tfm_panic();
 c033e1e:	f000 facb 	bl	c0343b8 <tfm_panic>
    if (partition->runtime_data.signals == 0) {
 c033e22:	68a3      	ldr	r3, [r4, #8]
 c033e24:	b90b      	cbnz	r3, c033e2a <SVC_Handler_IPC+0x102>
        tfm_panic();
 c033e26:	f000 fac7 	bl	c0343b8 <tfm_panic>
    if ((partition->runtime_data.signals & signal) == 0) {
 c033e2a:	68a3      	ldr	r3, [r4, #8]
 c033e2c:	421e      	tst	r6, r3
 c033e2e:	d101      	bne.n	c033e34 <SVC_Handler_IPC+0x10c>
        tfm_panic();
 c033e30:	f000 fac2 	bl	c0343b8 <tfm_panic>
    service = tfm_spm_get_service_by_signal(partition, signal);
 c033e34:	4631      	mov	r1, r6
 c033e36:	4620      	mov	r0, r4
 c033e38:	f7fd f906 	bl	c031048 <tfm_spm_get_service_by_signal>
    if (!service) {
 c033e3c:	4605      	mov	r5, r0
 c033e3e:	b908      	cbnz	r0, c033e44 <SVC_Handler_IPC+0x11c>
        tfm_panic();
 c033e40:	f000 faba 	bl	c0343b8 <tfm_panic>
    tmp_msg = tfm_msg_dequeue(&service->msg_queue);
 c033e44:	3510      	adds	r5, #16
 c033e46:	4628      	mov	r0, r5
 c033e48:	f7ff fb5f 	bl	c03350a <tfm_msg_dequeue>
    if (!tmp_msg) {
 c033e4c:	2800      	cmp	r0, #0
 c033e4e:	f000 81b4 	beq.w	c0341ba <SVC_Handler_IPC+0x492>
    tfm_core_util_memcpy(msg, &tmp_msg->msg, sizeof(psa_msg_t));
 c033e52:	f100 0114 	add.w	r1, r0, #20
 c033e56:	2230      	movs	r2, #48	; 0x30
 c033e58:	4638      	mov	r0, r7
 c033e5a:	f7ff f921 	bl	c0330a0 <tfm_core_util_memcpy>
    if (tfm_msg_queue_is_empty(&service->msg_queue)) {
 c033e5e:	4628      	mov	r0, r5
 c033e60:	f7ff fb61 	bl	c033526 <tfm_msg_queue_is_empty>
 c033e64:	2800      	cmp	r0, #0
 c033e66:	f43f af7e 	beq.w	c033d66 <SVC_Handler_IPC+0x3e>
        partition->runtime_data.signals &= ~signal;
 c033e6a:	68a3      	ldr	r3, [r4, #8]
 c033e6c:	ea23 0606 	bic.w	r6, r3, r6
 c033e70:	60a6      	str	r6, [r4, #8]
 c033e72:	e777      	b.n	c033d64 <SVC_Handler_IPC+0x3c>
    TFM_ASSERT(args != NULL);
 c033e74:	b933      	cbnz	r3, c033e84 <SVC_Handler_IPC+0x15c>
 c033e76:	f240 12f7 	movw	r2, #503	; 0x1f7
 c033e7a:	4979      	ldr	r1, [pc, #484]	; (c034060 <SVC_Handler_IPC+0x338>)
 c033e7c:	4876      	ldr	r0, [pc, #472]	; (c034058 <SVC_Handler_IPC+0x330>)
 c033e7e:	f7e4 fab1 	bl	c0183e4 <iprintf>
 c033e82:	e7fe      	b.n	c033e82 <SVC_Handler_IPC+0x15a>
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c033e84:	e9d3 0500 	ldrd	r0, r5, [r3]
 c033e88:	f7fd f9bc 	bl	c031204 <tfm_spm_get_msg_from_handle>
    if (!msg) {
 c033e8c:	4604      	mov	r4, r0
 c033e8e:	b908      	cbnz	r0, c033e94 <SVC_Handler_IPC+0x16c>
        tfm_panic();
 c033e90:	f000 fa92 	bl	c0343b8 <tfm_panic>
    tfm_spm_set_rhandle(msg->service, msg->handle, rhandle);
 c033e94:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    msg->msg.rhandle = rhandle;
 c033e98:	6225      	str	r5, [r4, #32]
    tfm_spm_set_rhandle(msg->service, msg->handle, rhandle);
 c033e9a:	462a      	mov	r2, r5
 c033e9c:	f7fd f8a8 	bl	c030ff0 <tfm_spm_set_rhandle>
 c033ea0:	e760      	b.n	c033d64 <SVC_Handler_IPC+0x3c>
    TFM_ASSERT(args != NULL);
 c033ea2:	b933      	cbnz	r3, c033eb2 <SVC_Handler_IPC+0x18a>
 c033ea4:	f240 2225 	movw	r2, #549	; 0x225
 c033ea8:	496e      	ldr	r1, [pc, #440]	; (c034064 <SVC_Handler_IPC+0x33c>)
 c033eaa:	486b      	ldr	r0, [pc, #428]	; (c034058 <SVC_Handler_IPC+0x330>)
 c033eac:	f7e4 fa9a 	bl	c0183e4 <iprintf>
 c033eb0:	e7fe      	b.n	c033eb0 <SVC_Handler_IPC+0x188>
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c033eb2:	6818      	ldr	r0, [r3, #0]
    buffer = (void *)args[2];
 c033eb4:	e9d3 7801 	ldrd	r7, r8, [r3, #4]
    num_bytes = (size_t)args[3];
 c033eb8:	f8d3 900c 	ldr.w	r9, [r3, #12]
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c033ebc:	f7fd f9a2 	bl	c031204 <tfm_spm_get_msg_from_handle>
    if (!msg) {
 c033ec0:	4605      	mov	r5, r0
 c033ec2:	b908      	cbnz	r0, c033ec8 <SVC_Handler_IPC+0x1a0>
        tfm_panic();
 c033ec4:	f000 fa78 	bl	c0343b8 <tfm_panic>
    partition = msg->service->partition;
 c033ec8:	686b      	ldr	r3, [r5, #4]
        partition->static_data->partition_flags);
 c033eca:	685b      	ldr	r3, [r3, #4]
    privileged = tfm_spm_partition_get_privileged_mode(
 c033ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c033ece:	6858      	ldr	r0, [r3, #4]
 c033ed0:	f7fd fa74 	bl	c0313bc <tfm_spm_partition_get_privileged_mode>
    if (msg->msg.type < PSA_IPC_CALL) {
 c033ed4:	696b      	ldr	r3, [r5, #20]
    privileged = tfm_spm_partition_get_privileged_mode(
 c033ed6:	4682      	mov	sl, r0
    if (msg->msg.type < PSA_IPC_CALL) {
 c033ed8:	2b00      	cmp	r3, #0
 c033eda:	da01      	bge.n	c033ee0 <SVC_Handler_IPC+0x1b8>
        tfm_panic();
 c033edc:	f000 fa6c 	bl	c0343b8 <tfm_panic>
    if (invec_idx >= PSA_MAX_IOVEC) {
 c033ee0:	2f03      	cmp	r7, #3
 c033ee2:	d901      	bls.n	c033ee8 <SVC_Handler_IPC+0x1c0>
        tfm_panic();
 c033ee4:	f000 fa68 	bl	c0343b8 <tfm_panic>
 c033ee8:	eb05 0687 	add.w	r6, r5, r7, lsl #2
    if (msg->msg.in_size[invec_idx] == 0) {
 c033eec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 c033eee:	b1e4      	cbz	r4, c033f2a <SVC_Handler_IPC+0x202>
    if (tfm_memory_check(buffer, num_bytes, false,
 c033ef0:	f8cd a000 	str.w	sl, [sp]
 c033ef4:	2302      	movs	r3, #2
 c033ef6:	2200      	movs	r2, #0
 c033ef8:	4649      	mov	r1, r9
 c033efa:	4640      	mov	r0, r8
 c033efc:	f7fd fa44 	bl	c031388 <tfm_memory_check>
 c033f00:	b108      	cbz	r0, c033f06 <SVC_Handler_IPC+0x1de>
        tfm_panic();
 c033f02:	f000 fa59 	bl	c0343b8 <tfm_panic>
    bytes = num_bytes > msg->msg.in_size[invec_idx] ?
 c033f06:	6a70      	ldr	r0, [r6, #36]	; 0x24
 c033f08:	464c      	mov	r4, r9
 c033f0a:	4581      	cmp	r9, r0
 c033f0c:	bf28      	it	cs
 c033f0e:	4604      	movcs	r4, r0
 c033f10:	eb05 05c7 	add.w	r5, r5, r7, lsl #3
    tfm_core_util_memcpy(buffer, msg->invec[invec_idx].base, bytes);
 c033f14:	4622      	mov	r2, r4
 c033f16:	6c69      	ldr	r1, [r5, #68]	; 0x44
 c033f18:	4640      	mov	r0, r8
 c033f1a:	f7ff f8c1 	bl	c0330a0 <tfm_core_util_memcpy>
    msg->invec[invec_idx].base =(char *)msg->invec[invec_idx].base+bytes;
 c033f1e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 c033f20:	4423      	add	r3, r4
 c033f22:	646b      	str	r3, [r5, #68]	; 0x44
    msg->msg.in_size[invec_idx] -= bytes;
 c033f24:	6a73      	ldr	r3, [r6, #36]	; 0x24
 c033f26:	1b1b      	subs	r3, r3, r4
 c033f28:	6273      	str	r3, [r6, #36]	; 0x24
        return tfm_svcall_psa_read(ctx);
 c033f2a:	4620      	mov	r0, r4
 c033f2c:	e71b      	b.n	c033d66 <SVC_Handler_IPC+0x3e>
    TFM_ASSERT(args != NULL);
 c033f2e:	b933      	cbnz	r3, c033f3e <SVC_Handler_IPC+0x216>
 c033f30:	f240 2277 	movw	r2, #631	; 0x277
 c033f34:	494c      	ldr	r1, [pc, #304]	; (c034068 <SVC_Handler_IPC+0x340>)
 c033f36:	4848      	ldr	r0, [pc, #288]	; (c034058 <SVC_Handler_IPC+0x330>)
 c033f38:	f7e4 fa54 	bl	c0183e4 <iprintf>
 c033f3c:	e7fe      	b.n	c033f3c <SVC_Handler_IPC+0x214>
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c033f3e:	6818      	ldr	r0, [r3, #0]
    num_bytes = (size_t)args[2];
 c033f40:	e9d3 6501 	ldrd	r6, r5, [r3, #4]
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c033f44:	f7fd f95e 	bl	c031204 <tfm_spm_get_msg_from_handle>
    if (!msg) {
 c033f48:	4604      	mov	r4, r0
 c033f4a:	b908      	cbnz	r0, c033f50 <SVC_Handler_IPC+0x228>
        tfm_panic();
 c033f4c:	f000 fa34 	bl	c0343b8 <tfm_panic>
    if (msg->msg.type < PSA_IPC_CALL) {
 c033f50:	6963      	ldr	r3, [r4, #20]
 c033f52:	2b00      	cmp	r3, #0
 c033f54:	da01      	bge.n	c033f5a <SVC_Handler_IPC+0x232>
        tfm_panic();
 c033f56:	f000 fa2f 	bl	c0343b8 <tfm_panic>
    if (invec_idx >= PSA_MAX_IOVEC) {
 c033f5a:	2e03      	cmp	r6, #3
 c033f5c:	d901      	bls.n	c033f62 <SVC_Handler_IPC+0x23a>
        tfm_panic();
 c033f5e:	f000 fa2b 	bl	c0343b8 <tfm_panic>
 c033f62:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    if (msg->msg.in_size[invec_idx] == 0) {
 c033f66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 c033f68:	2800      	cmp	r0, #0
 c033f6a:	f43f aefc 	beq.w	c033d66 <SVC_Handler_IPC+0x3e>
 c033f6e:	4285      	cmp	r5, r0
 c033f70:	462a      	mov	r2, r5
 c033f72:	bf28      	it	cs
 c033f74:	4602      	movcs	r2, r0
 c033f76:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    msg->invec[invec_idx].base = (char *)msg->invec[invec_idx].base+ num_bytes;
 c033f7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
    msg->msg.in_size[invec_idx] -= num_bytes;
 c033f7c:	1a80      	subs	r0, r0, r2
    msg->invec[invec_idx].base = (char *)msg->invec[invec_idx].base+ num_bytes;
 c033f7e:	4411      	add	r1, r2
 c033f80:	6461      	str	r1, [r4, #68]	; 0x44
    msg->msg.in_size[invec_idx] -= num_bytes;
 c033f82:	6278      	str	r0, [r7, #36]	; 0x24
    return num_bytes;
 c033f84:	4610      	mov	r0, r2
        return tfm_svcall_psa_skip(ctx);
 c033f86:	e6ee      	b.n	c033d66 <SVC_Handler_IPC+0x3e>
    TFM_ASSERT(args != NULL);
 c033f88:	b933      	cbnz	r3, c033f98 <SVC_Handler_IPC+0x270>
 c033f8a:	f240 22c2 	movw	r2, #706	; 0x2c2
 c033f8e:	4937      	ldr	r1, [pc, #220]	; (c03406c <SVC_Handler_IPC+0x344>)
 c033f90:	4831      	ldr	r0, [pc, #196]	; (c034058 <SVC_Handler_IPC+0x330>)
 c033f92:	f7e4 fa27 	bl	c0183e4 <iprintf>
 c033f96:	e7fe      	b.n	c033f96 <SVC_Handler_IPC+0x26e>
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c033f98:	6818      	ldr	r0, [r3, #0]
    buffer = (void *)args[2];
 c033f9a:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
    num_bytes = (size_t)args[3];
 c033f9e:	68de      	ldr	r6, [r3, #12]
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c033fa0:	f7fd f930 	bl	c031204 <tfm_spm_get_msg_from_handle>
    if (!msg) {
 c033fa4:	4604      	mov	r4, r0
 c033fa6:	b908      	cbnz	r0, c033fac <SVC_Handler_IPC+0x284>
        tfm_panic();
 c033fa8:	f000 fa06 	bl	c0343b8 <tfm_panic>
    partition = msg->service->partition;
 c033fac:	6863      	ldr	r3, [r4, #4]
        partition->static_data->partition_flags);
 c033fae:	685b      	ldr	r3, [r3, #4]
    privileged = tfm_spm_partition_get_privileged_mode(
 c033fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c033fb2:	6858      	ldr	r0, [r3, #4]
 c033fb4:	f7fd fa02 	bl	c0313bc <tfm_spm_partition_get_privileged_mode>
    if (msg->msg.type < PSA_IPC_CALL) {
 c033fb8:	6963      	ldr	r3, [r4, #20]
    privileged = tfm_spm_partition_get_privileged_mode(
 c033fba:	4680      	mov	r8, r0
    if (msg->msg.type < PSA_IPC_CALL) {
 c033fbc:	2b00      	cmp	r3, #0
 c033fbe:	da01      	bge.n	c033fc4 <SVC_Handler_IPC+0x29c>
        tfm_panic();
 c033fc0:	f000 f9fa 	bl	c0343b8 <tfm_panic>
    if (outvec_idx >= PSA_MAX_IOVEC) {
 c033fc4:	f1b9 0f03 	cmp.w	r9, #3
 c033fc8:	d901      	bls.n	c033fce <SVC_Handler_IPC+0x2a6>
        tfm_panic();
 c033fca:	f000 f9f5 	bl	c0343b8 <tfm_panic>
 c033fce:	eb04 05c9 	add.w	r5, r4, r9, lsl #3
    if (num_bytes > msg->msg.out_size[outvec_idx] -
 c033fd2:	eb04 0489 	add.w	r4, r4, r9, lsl #2
 c033fd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c033fd8:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 c033fda:	1a9b      	subs	r3, r3, r2
 c033fdc:	429e      	cmp	r6, r3
 c033fde:	d901      	bls.n	c033fe4 <SVC_Handler_IPC+0x2bc>
        tfm_panic();
 c033fe0:	f000 f9ea 	bl	c0343b8 <tfm_panic>
    if (tfm_memory_check(buffer, num_bytes, false,
 c033fe4:	f8cd 8000 	str.w	r8, [sp]
 c033fe8:	2301      	movs	r3, #1
 c033fea:	2200      	movs	r2, #0
 c033fec:	4631      	mov	r1, r6
 c033fee:	4638      	mov	r0, r7
 c033ff0:	f7fd f9ca 	bl	c031388 <tfm_memory_check>
 c033ff4:	b108      	cbz	r0, c033ffa <SVC_Handler_IPC+0x2d2>
        tfm_panic();
 c033ff6:	f000 f9df 	bl	c0343b8 <tfm_panic>
    tfm_core_util_memcpy((char *)msg->outvec[outvec_idx].base +
 c033ffa:	e9d5 0319 	ldrd	r0, r3, [r5, #100]	; 0x64
 c033ffe:	4632      	mov	r2, r6
 c034000:	4418      	add	r0, r3
 c034002:	4639      	mov	r1, r7
 c034004:	f7ff f84c 	bl	c0330a0 <tfm_core_util_memcpy>
    msg->outvec[outvec_idx].len += num_bytes;
 c034008:	6eab      	ldr	r3, [r5, #104]	; 0x68
 c03400a:	441e      	add	r6, r3
 c03400c:	66ae      	str	r6, [r5, #104]	; 0x68
 c03400e:	e6a9      	b.n	c033d64 <SVC_Handler_IPC+0x3c>
    TFM_ASSERT(args != NULL);
 c034010:	b933      	cbnz	r3, c034020 <SVC_Handler_IPC+0x2f8>
 c034012:	f44f 7248 	mov.w	r2, #800	; 0x320
 c034016:	4916      	ldr	r1, [pc, #88]	; (c034070 <SVC_Handler_IPC+0x348>)
 c034018:	480f      	ldr	r0, [pc, #60]	; (c034058 <SVC_Handler_IPC+0x330>)
 c03401a:	f7e4 f9e3 	bl	c0183e4 <iprintf>
 c03401e:	e7fe      	b.n	c03401e <SVC_Handler_IPC+0x2f6>
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c034020:	6818      	ldr	r0, [r3, #0]
    status = (psa_status_t)args[1];
 c034022:	685d      	ldr	r5, [r3, #4]
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c034024:	f7fd f8ee 	bl	c031204 <tfm_spm_get_msg_from_handle>
    status = (psa_status_t)args[1];
 c034028:	462e      	mov	r6, r5
    if (!msg) {
 c03402a:	4604      	mov	r4, r0
 c03402c:	b908      	cbnz	r0, c034032 <SVC_Handler_IPC+0x30a>
        tfm_panic();
 c03402e:	f000 f9c3 	bl	c0343b8 <tfm_panic>
    service = msg->service;
 c034032:	6867      	ldr	r7, [r4, #4]
    if (!service) {
 c034034:	b90f      	cbnz	r7, c03403a <SVC_Handler_IPC+0x312>
        tfm_panic();
 c034036:	f000 f9bf 	bl	c0343b8 <tfm_panic>
    switch (msg->msg.type) {
 c03403a:	6963      	ldr	r3, [r4, #20]
 c03403c:	1c99      	adds	r1, r3, #2
 c03403e:	d023      	beq.n	c034088 <SVC_Handler_IPC+0x360>
 c034040:	1c5a      	adds	r2, r3, #1
 c034042:	d126      	bne.n	c034092 <SVC_Handler_IPC+0x36a>
        if (status == PSA_SUCCESS) {
 c034044:	b9b5      	cbnz	r5, c034074 <SVC_Handler_IPC+0x34c>
            ret = msg->handle;
 c034046:	68a6      	ldr	r6, [r4, #8]
    tfm_event_wake(&msg->ack_evnt, ret);
 c034048:	4631      	mov	r1, r6
 c03404a:	f104 000c 	add.w	r0, r4, #12
 c03404e:	f000 f9d3 	bl	c0343f8 <tfm_event_wake>
 c034052:	e687      	b.n	c033d64 <SVC_Handler_IPC+0x3c>
 c034054:	0c037186 	.word	0x0c037186
 c034058:	0c037052 	.word	0x0c037052
 c03405c:	0c03719a 	.word	0x0c03719a
 c034060:	0c0371ad 	.word	0x0c0371ad
 c034064:	0c0371c8 	.word	0x0c0371c8
 c034068:	0c0371dc 	.word	0x0c0371dc
 c03406c:	0c0371f0 	.word	0x0c0371f0
 c034070:	0c03721e 	.word	0x0c03721e
        } else if (status == PSA_ERROR_CONNECTION_REFUSED) {
 c034074:	f115 0f82 	cmn.w	r5, #130	; 0x82
 c034078:	d046      	beq.n	c034108 <SVC_Handler_IPC+0x3e0>
        } else if (status == PSA_ERROR_CONNECTION_BUSY) {
 c03407a:	f115 0f83 	cmn.w	r5, #131	; 0x83
 c03407e:	d043      	beq.n	c034108 <SVC_Handler_IPC+0x3e0>
            tfm_panic();
 c034080:	f000 f99a 	bl	c0343b8 <tfm_panic>
    int32_t ret = PSA_SUCCESS;
 c034084:	2600      	movs	r6, #0
 c034086:	e7df      	b.n	c034048 <SVC_Handler_IPC+0x320>
        tfm_spm_free_conn_handle(service, msg->handle);
 c034088:	68a1      	ldr	r1, [r4, #8]
 c03408a:	4638      	mov	r0, r7
 c03408c:	f7fc ff92 	bl	c030fb4 <tfm_spm_free_conn_handle>
 c034090:	e7f8      	b.n	c034084 <SVC_Handler_IPC+0x35c>
        if (msg->msg.type >= PSA_IPC_CALL) {
 c034092:	2b00      	cmp	r3, #0
 c034094:	dbf4      	blt.n	c034080 <SVC_Handler_IPC+0x358>
            if (status == PSA_SUCCESS) {
 c034096:	b35d      	cbz	r5, c0340f0 <SVC_Handler_IPC+0x3c8>
            } else if ((status >= (INT32_MIN + 1)) &&
 c034098:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 c03409c:	3b01      	subs	r3, #1
 c03409e:	2b7e      	cmp	r3, #126	; 0x7e
 c0340a0:	d81d      	bhi.n	c0340de <SVC_Handler_IPC+0x3b6>
                tfm_panic();
 c0340a2:	f000 f989 	bl	c0343b8 <tfm_panic>
    int32_t ret = PSA_SUCCESS;
 c0340a6:	2600      	movs	r6, #0
    TFM_ASSERT(msg->ack_evnt.owner->status == THRD_STAT_BLOCK);
 c0340a8:	6923      	ldr	r3, [r4, #16]
 c0340aa:	695b      	ldr	r3, [r3, #20]
 c0340ac:	2b02      	cmp	r3, #2
 c0340ae:	d121      	bne.n	c0340f4 <SVC_Handler_IPC+0x3cc>
 c0340b0:	4623      	mov	r3, r4
 c0340b2:	f104 0234 	add.w	r2, r4, #52	; 0x34
    while (msg->msg.out_size[i] != 0) {
 c0340b6:	f852 1b04 	ldr.w	r1, [r2], #4
 c0340ba:	2900      	cmp	r1, #0
 c0340bc:	d0c4      	beq.n	c034048 <SVC_Handler_IPC+0x320>
        TFM_ASSERT(msg->caller_outvec[i].base == msg->outvec[i].base);
 c0340be:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 c0340c2:	1b19      	subs	r1, r3, r4
 c0340c4:	3308      	adds	r3, #8
 c0340c6:	1845      	adds	r5, r0, r1
 c0340c8:	5840      	ldr	r0, [r0, r1]
 c0340ca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 c0340cc:	4288      	cmp	r0, r1
 c0340ce:	d018      	beq.n	c034102 <SVC_Handler_IPC+0x3da>
 c0340d0:	f240 3206 	movw	r2, #774	; 0x306
 c0340d4:	493a      	ldr	r1, [pc, #232]	; (c0341c0 <SVC_Handler_IPC+0x498>)
 c0340d6:	483b      	ldr	r0, [pc, #236]	; (c0341c4 <SVC_Handler_IPC+0x49c>)
 c0340d8:	f7e4 f984 	bl	c0183e4 <iprintf>
 c0340dc:	e7fe      	b.n	c0340dc <SVC_Handler_IPC+0x3b4>
            } else if ((status >= (INT32_MIN + 128)) && (status <= -1)) {
 c0340de:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 c0340e2:	4a39      	ldr	r2, [pc, #228]	; (c0341c8 <SVC_Handler_IPC+0x4a0>)
 c0340e4:	3b80      	subs	r3, #128	; 0x80
 c0340e6:	4293      	cmp	r3, r2
 c0340e8:	d9de      	bls.n	c0340a8 <SVC_Handler_IPC+0x380>
            } else if ((status >= 1) && (status <= INT32_MAX)) {
 c0340ea:	2d00      	cmp	r5, #0
 c0340ec:	dcdc      	bgt.n	c0340a8 <SVC_Handler_IPC+0x380>
 c0340ee:	e7d8      	b.n	c0340a2 <SVC_Handler_IPC+0x37a>
                ret = PSA_SUCCESS;
 c0340f0:	462e      	mov	r6, r5
 c0340f2:	e7d9      	b.n	c0340a8 <SVC_Handler_IPC+0x380>
    TFM_ASSERT(msg->ack_evnt.owner->status == THRD_STAT_BLOCK);
 c0340f4:	f240 3203 	movw	r2, #771	; 0x303
 c0340f8:	4931      	ldr	r1, [pc, #196]	; (c0341c0 <SVC_Handler_IPC+0x498>)
 c0340fa:	4832      	ldr	r0, [pc, #200]	; (c0341c4 <SVC_Handler_IPC+0x49c>)
 c0340fc:	f7e4 f972 	bl	c0183e4 <iprintf>
 c034100:	e7fe      	b.n	c034100 <SVC_Handler_IPC+0x3d8>
        msg->caller_outvec[i].len = msg->outvec[i].len;
 c034102:	6e19      	ldr	r1, [r3, #96]	; 0x60
 c034104:	6069      	str	r1, [r5, #4]
 c034106:	e7d6      	b.n	c0340b6 <SVC_Handler_IPC+0x38e>
            ret = PSA_ERROR_CONNECTION_BUSY;
 c034108:	462e      	mov	r6, r5
 c03410a:	e79d      	b.n	c034048 <SVC_Handler_IPC+0x320>
    partition = tfm_spm_get_running_partition();
 c03410c:	f7fd f872 	bl	c0311f4 <tfm_spm_get_running_partition>
    if (!partition) {
 c034110:	4604      	mov	r4, r0
 c034112:	b908      	cbnz	r0, c034118 <SVC_Handler_IPC+0x3f0>
        tfm_panic();
 c034114:	f000 f950 	bl	c0343b8 <tfm_panic>
    if ((partition->runtime_data.signals & PSA_DOORBELL) == 0) {
 c034118:	68a3      	ldr	r3, [r4, #8]
 c03411a:	071b      	lsls	r3, r3, #28
 c03411c:	d401      	bmi.n	c034122 <SVC_Handler_IPC+0x3fa>
        tfm_panic();
 c03411e:	f000 f94b 	bl	c0343b8 <tfm_panic>
    partition->runtime_data.signals &= ~PSA_DOORBELL;
 c034122:	68a3      	ldr	r3, [r4, #8]
 c034124:	f023 0308 	bic.w	r3, r3, #8
 c034128:	60a3      	str	r3, [r4, #8]
 c03412a:	e61b      	b.n	c033d64 <SVC_Handler_IPC+0x3c>
    TFM_ASSERT(args != NULL);
 c03412c:	b933      	cbnz	r3, c03413c <SVC_Handler_IPC+0x414>
 c03412e:	f240 4211 	movw	r2, #1041	; 0x411
 c034132:	4926      	ldr	r1, [pc, #152]	; (c0341cc <SVC_Handler_IPC+0x4a4>)
 c034134:	4823      	ldr	r0, [pc, #140]	; (c0341c4 <SVC_Handler_IPC+0x49c>)
 c034136:	f7e4 f955 	bl	c0183e4 <iprintf>
 c03413a:	e7fe      	b.n	c03413a <SVC_Handler_IPC+0x412>
    irq_signal = (psa_signal_t)args[0];
 c03413c:	681d      	ldr	r5, [r3, #0]
    partition = tfm_spm_get_running_partition();
 c03413e:	f7fd f859 	bl	c0311f4 <tfm_spm_get_running_partition>
    if (!partition) {
 c034142:	4604      	mov	r4, r0
 c034144:	b908      	cbnz	r0, c03414a <SVC_Handler_IPC+0x422>
        tfm_panic();
 c034146:	f000 f937 	bl	c0343b8 <tfm_panic>
        tfm_panic();
 c03414a:	f000 f935 	bl	c0343b8 <tfm_panic>
    if (!tfm_is_one_bit_set(irq_signal)) {
 c03414e:	4628      	mov	r0, r5
 c034150:	f7ff fafd 	bl	c03374e <tfm_is_one_bit_set>
 c034154:	b908      	cbnz	r0, c03415a <SVC_Handler_IPC+0x432>
        tfm_panic();
 c034156:	f000 f92f 	bl	c0343b8 <tfm_panic>
    if ((partition->runtime_data.signals & irq_signal) == 0) {
 c03415a:	68a3      	ldr	r3, [r4, #8]
 c03415c:	421d      	tst	r5, r3
 c03415e:	d101      	bne.n	c034164 <SVC_Handler_IPC+0x43c>
        tfm_panic();
 c034160:	f000 f92a 	bl	c0343b8 <tfm_panic>
    partition->runtime_data.signals &= ~irq_signal;
 c034164:	68a0      	ldr	r0, [r4, #8]
 c034166:	ea20 0005 	bic.w	r0, r0, r5
 c03416a:	60a0      	str	r0, [r4, #8]
    tfm_spm_hal_clear_pending_irq(irq_line);
 c03416c:	2000      	movs	r0, #0
 c03416e:	f7ec fe95 	bl	c020e9c <tfm_spm_hal_clear_pending_irq>
    tfm_spm_hal_enable_irq(irq_line);
 c034172:	2000      	movs	r0, #0
 c034174:	f7ec fea2 	bl	c020ebc <tfm_spm_hal_enable_irq>
 c034178:	e5f4      	b.n	c033d64 <SVC_Handler_IPC+0x3c>
        tfm_svcall_enable_irq(ctx);
 c03417a:	4618      	mov	r0, r3
 c03417c:	f7ff fdae 	bl	c033cdc <tfm_svcall_enable_irq>
 c034180:	e5f0      	b.n	c033d64 <SVC_Handler_IPC+0x3c>
        tfm_svcall_disable_irq(ctx);
 c034182:	4618      	mov	r0, r3
 c034184:	f7ff fdbd 	bl	c033d02 <tfm_svcall_disable_irq>
 c034188:	e5ec      	b.n	c033d64 <SVC_Handler_IPC+0x3c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 c03418a:	f3ef 8305 	mrs	r3, IPSR
 c03418e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        LOG_MSG("Unknown SVC number requested!");
 c034192:	b15b      	cbz	r3, c0341ac <SVC_Handler_IPC+0x484>
 c034194:	480e      	ldr	r0, [pc, #56]	; (c0341d0 <SVC_Handler_IPC+0x4a8>)
 c034196:	f7fe ff01 	bl	c032f9c <tfm_core_log_puts>
 c03419a:	480e      	ldr	r0, [pc, #56]	; (c0341d4 <SVC_Handler_IPC+0x4ac>)
 c03419c:	f7fe fefe 	bl	c032f9c <tfm_core_log_puts>
 c0341a0:	480d      	ldr	r0, [pc, #52]	; (c0341d8 <SVC_Handler_IPC+0x4b0>)
 c0341a2:	f7fe fefb 	bl	c032f9c <tfm_core_log_puts>
        return PSA_ERROR_GENERIC_ERROR;
 c0341a6:	f06f 0083 	mvn.w	r0, #131	; 0x83
 c0341aa:	e5dc      	b.n	c033d66 <SVC_Handler_IPC+0x3e>
        LOG_MSG("Unknown SVC number requested!");
 c0341ac:	4b09      	ldr	r3, [pc, #36]	; (c0341d4 <SVC_Handler_IPC+0x4ac>)
 c0341ae:	4618      	mov	r0, r3
 c0341b0:	df06      	svc	6
 c0341b2:	e7f8      	b.n	c0341a6 <SVC_Handler_IPC+0x47e>
        return tfm_svcall_psa_framework_version();
 c0341b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 c0341b8:	e5d5      	b.n	c033d66 <SVC_Handler_IPC+0x3e>
        return PSA_ERROR_DOES_NOT_EXIST;
 c0341ba:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 c0341be:	e5d2      	b.n	c033d66 <SVC_Handler_IPC+0x3e>
 c0341c0:	0c037205 	.word	0x0c037205
 c0341c4:	0c037052 	.word	0x0c037052
 c0341c8:	7fffff7f 	.word	0x7fffff7f
 c0341cc:	0c037233 	.word	0x0c037233
 c0341d0:	0c034fc8 	.word	0x0c034fc8
 c0341d4:	0c037111 	.word	0x0c037111
 c0341d8:	0c0370e3 	.word	0x0c0370e3

0c0341dc <tfm_thrd_next_thread>:
    return find_next_running_thread(RUNN_HEAD);
 c0341dc:	4b04      	ldr	r3, [pc, #16]	; (c0341f0 <tfm_thrd_next_thread+0x14>)
 c0341de:	6818      	ldr	r0, [r3, #0]
    while (pth && pth->status != THRD_STAT_RUNNING) {
 c0341e0:	b110      	cbz	r0, c0341e8 <tfm_thrd_next_thread+0xc>
 c0341e2:	6943      	ldr	r3, [r0, #20]
 c0341e4:	2b01      	cmp	r3, #1
 c0341e6:	d100      	bne.n	c0341ea <tfm_thrd_next_thread+0xe>
}
 c0341e8:	4770      	bx	lr
        pth = pth->next;
 c0341ea:	6c80      	ldr	r0, [r0, #72]	; 0x48
 c0341ec:	e7f8      	b.n	c0341e0 <tfm_thrd_next_thread+0x4>
 c0341ee:	bf00      	nop
 c0341f0:	3003c938 	.word	0x3003c938

0c0341f4 <tfm_thrd_curr_thread>:
}
 c0341f4:	4b01      	ldr	r3, [pc, #4]	; (c0341fc <tfm_thrd_curr_thread+0x8>)
 c0341f6:	6818      	ldr	r0, [r3, #0]
 c0341f8:	4770      	bx	lr
 c0341fa:	bf00      	nop
 c0341fc:	3003c934 	.word	0x3003c934

0c034200 <tfm_thrd_init>:
{
 c034200:	b510      	push	{r4, lr}
    pth->status = THRD_STAT_CREATING;
 c034202:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
 c034206:	2400      	movs	r4, #0
    pth->sp_btm = sp_btm;
 c034208:	6083      	str	r3, [r0, #8]
    pth->sp_top = sp_top;
 c03420a:	9b02      	ldr	r3, [sp, #8]
    pth->status = THRD_STAT_CREATING;
 c03420c:	e9c0 c404 	strd	ip, r4, [r0, #16]
    pth->param = param;
 c034210:	e9c0 1200 	strd	r1, r2, [r0]
    pth->sp_top = sp_top;
 c034214:	60c3      	str	r3, [r0, #12]
}
 c034216:	bd10      	pop	{r4, pc}

0c034218 <tfm_thrd_set_status>:
{
 c034218:	b508      	push	{r3, lr}
    TFM_ASSERT(pth != NULL && new_status < THRD_STAT_INVALID);
 c03421a:	b108      	cbz	r0, c034220 <tfm_thrd_set_status+0x8>
 c03421c:	2903      	cmp	r1, #3
 c03421e:	d905      	bls.n	c03422c <tfm_thrd_set_status+0x14>
 c034220:	229e      	movs	r2, #158	; 0x9e
 c034222:	490a      	ldr	r1, [pc, #40]	; (c03424c <tfm_thrd_set_status+0x34>)
 c034224:	480a      	ldr	r0, [pc, #40]	; (c034250 <tfm_thrd_set_status+0x38>)
 c034226:	f7e4 f8dd 	bl	c0183e4 <iprintf>
 c03422a:	e7fe      	b.n	c03422a <tfm_thrd_set_status+0x12>
    if ((node->status == THRD_STAT_RUNNING) &&
 c03422c:	2901      	cmp	r1, #1
    pth->status = new_status;
 c03422e:	6141      	str	r1, [r0, #20]
 c034230:	4b08      	ldr	r3, [pc, #32]	; (c034254 <tfm_thrd_set_status+0x3c>)
    if ((node->status == THRD_STAT_RUNNING) &&
 c034232:	d107      	bne.n	c034244 <tfm_thrd_set_status+0x2c>
        (*runn == NULL || (node->prior < (*runn)->prior))) {
 c034234:	681a      	ldr	r2, [r3, #0]
    if ((node->status == THRD_STAT_RUNNING) &&
 c034236:	b11a      	cbz	r2, c034240 <tfm_thrd_set_status+0x28>
        (*runn == NULL || (node->prior < (*runn)->prior))) {
 c034238:	6901      	ldr	r1, [r0, #16]
 c03423a:	6912      	ldr	r2, [r2, #16]
 c03423c:	4291      	cmp	r1, r2
 c03423e:	d201      	bcs.n	c034244 <tfm_thrd_set_status+0x2c>
        *runn = node;
 c034240:	6018      	str	r0, [r3, #0]
}
 c034242:	bd08      	pop	{r3, pc}
        *runn = LIST_HEAD;
 c034244:	4a04      	ldr	r2, [pc, #16]	; (c034258 <tfm_thrd_set_status+0x40>)
 c034246:	6812      	ldr	r2, [r2, #0]
 c034248:	601a      	str	r2, [r3, #0]
}
 c03424a:	e7fa      	b.n	c034242 <tfm_thrd_set_status+0x2a>
 c03424c:	0c03725c 	.word	0x0c03725c
 c034250:	0c037052 	.word	0x0c037052
 c034254:	3003c938 	.word	0x3003c938
 c034258:	3003c93c 	.word	0x3003c93c

0c03425c <tfm_thrd_start>:
{
 c03425c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((pth->status != THRD_STAT_CREATING) ||
 c034260:	6945      	ldr	r5, [r0, #20]
{
 c034262:	4604      	mov	r4, r0
    if ((pth->status != THRD_STAT_CREATING) ||
 c034264:	2d00      	cmp	r5, #0
 c034266:	d145      	bne.n	c0342f4 <tfm_thrd_start+0x98>
        (pth->pfn == NULL)                  ||
 c034268:	f8d0 a000 	ldr.w	sl, [r0]
    if ((pth->status != THRD_STAT_CREATING) ||
 c03426c:	f1ba 0f00 	cmp.w	sl, #0
 c034270:	d040      	beq.n	c0342f4 <tfm_thrd_start+0x98>
        (pth->sp_btm == 0)              ||
 c034272:	6886      	ldr	r6, [r0, #8]
        (pth->pfn == NULL)                  ||
 c034274:	2e00      	cmp	r6, #0
 c034276:	d03d      	beq.n	c0342f4 <tfm_thrd_start+0x98>
        (pth->sp_top == 0)) {
 c034278:	f8d0 900c 	ldr.w	r9, [r0, #12]
        (pth->sp_btm == 0)              ||
 c03427c:	f1b9 0f00 	cmp.w	r9, #0
 c034280:	d038      	beq.n	c0342f4 <tfm_thrd_start+0x98>
    p_ctxa--;
 c034282:	f1a6 0820 	sub.w	r8, r6, #32
    tfm_thrd_initialize_context(&pth->state_ctx,
 c034286:	f100 0718 	add.w	r7, r0, #24
 c03428a:	f8d0 b004 	ldr.w	fp, [r0, #4]
    tfm_core_util_memset(p_ctxa, 0, sizeof(*p_ctxa));
 c03428e:	2220      	movs	r2, #32
 c034290:	4629      	mov	r1, r5
 c034292:	4640      	mov	r0, r8
 c034294:	f7fe ff3a 	bl	c03310c <tfm_core_util_memset>
    p_ctxa->lr = (uint32_t)exit_zone;
 c034298:	4b17      	ldr	r3, [pc, #92]	; (c0342f8 <tfm_thrd_start+0x9c>)
    tfm_core_util_memset(ctx, 0, sizeof(*ctx));
 c03429a:	2230      	movs	r2, #48	; 0x30
    p_ctxa->lr = (uint32_t)exit_zone;
 c03429c:	f846 3c0c 	str.w	r3, [r6, #-12]
    p_ctxa->xpsr = XPSR_T32;
 c0342a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    tfm_core_util_memset(ctx, 0, sizeof(*ctx));
 c0342a4:	4629      	mov	r1, r5
    p_ctxa->xpsr = XPSR_T32;
 c0342a6:	f846 3c04 	str.w	r3, [r6, #-4]
    p_ctxa->r0 = (uint32_t)param;
 c0342aa:	f846 bc20 	str.w	fp, [r6, #-32]
    p_ctxa->ra = (uint32_t)pfn;
 c0342ae:	f846 ac08 	str.w	sl, [r6, #-8]
    tfm_core_util_memset(ctx, 0, sizeof(*ctx));
 c0342b2:	4638      	mov	r0, r7
 c0342b4:	f7fe ff2a 	bl	c03310c <tfm_core_util_memset>
    tfm_arch_initialize_ctx_ext(&ctx->ctxb, (uint32_t)p_ctxa, (uint32_t)sp_top);
 c0342b8:	464a      	mov	r2, r9
 c0342ba:	4641      	mov	r1, r8
 c0342bc:	4638      	mov	r0, r7
 c0342be:	f7fe fbfe 	bl	c032abe <tfm_arch_initialize_ctx_ext>
    if (*head == NULL || (node->prior <= (*head)->prior)) {
 c0342c2:	4a0e      	ldr	r2, [pc, #56]	; (c0342fc <tfm_thrd_start+0xa0>)
 c0342c4:	6813      	ldr	r3, [r2, #0]
 c0342c6:	b11b      	cbz	r3, c0342d0 <tfm_thrd_start+0x74>
 c0342c8:	6921      	ldr	r1, [r4, #16]
 c0342ca:	6918      	ldr	r0, [r3, #16]
 c0342cc:	4281      	cmp	r1, r0
 c0342ce:	d809      	bhi.n	c0342e4 <tfm_thrd_start+0x88>
        node->next = *head;
 c0342d0:	64a3      	str	r3, [r4, #72]	; 0x48
        *head = node;
 c0342d2:	6014      	str	r4, [r2, #0]
    tfm_thrd_set_status(pth, THRD_STAT_RUNNING);
 c0342d4:	2101      	movs	r1, #1
 c0342d6:	4620      	mov	r0, r4
 c0342d8:	f7ff ff9e 	bl	c034218 <tfm_thrd_set_status>
}
 c0342dc:	4628      	mov	r0, r5
 c0342de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (iter->next && (node->prior > iter->next->prior)) {
 c0342e2:	4613      	mov	r3, r2
 c0342e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c0342e6:	b112      	cbz	r2, c0342ee <tfm_thrd_start+0x92>
 c0342e8:	6910      	ldr	r0, [r2, #16]
 c0342ea:	4281      	cmp	r1, r0
 c0342ec:	d8f9      	bhi.n	c0342e2 <tfm_thrd_start+0x86>
        node->next = iter->next;
 c0342ee:	64a2      	str	r2, [r4, #72]	; 0x48
        iter->next = node;
 c0342f0:	649c      	str	r4, [r3, #72]	; 0x48
 c0342f2:	e7ef      	b.n	c0342d4 <tfm_thrd_start+0x78>
        return THRD_ERR_INVALID_PARAM;
 c0342f4:	2501      	movs	r5, #1
 c0342f6:	e7f1      	b.n	c0342dc <tfm_thrd_start+0x80>
 c0342f8:	0c01b7f5 	.word	0x0c01b7f5
 c0342fc:	3003c93c 	.word	0x3003c93c

0c034300 <tfm_thrd_activate_schedule>:
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 c034300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 c034304:	4b01      	ldr	r3, [pc, #4]	; (c03430c <tfm_thrd_activate_schedule+0xc>)
 c034306:	605a      	str	r2, [r3, #4]
}
 c034308:	4770      	bx	lr
 c03430a:	bf00      	nop
 c03430c:	e000ed00 	.word	0xe000ed00

0c034310 <tfm_thrd_start_scheduler>:
{
 c034310:	b508      	push	{r3, lr}
    TFM_ASSERT(CURR_THRD == NULL);
 c034312:	4b0b      	ldr	r3, [pc, #44]	; (c034340 <tfm_thrd_start_scheduler+0x30>)
 c034314:	681a      	ldr	r2, [r3, #0]
 c034316:	b12a      	cbz	r2, c034324 <tfm_thrd_start_scheduler+0x14>
 c034318:	22b1      	movs	r2, #177	; 0xb1
 c03431a:	490a      	ldr	r1, [pc, #40]	; (c034344 <tfm_thrd_start_scheduler+0x34>)
 c03431c:	480a      	ldr	r0, [pc, #40]	; (c034348 <tfm_thrd_start_scheduler+0x38>)
 c03431e:	f7e4 f861 	bl	c0183e4 <iprintf>
 c034322:	e7fe      	b.n	c034322 <tfm_thrd_start_scheduler+0x12>
    TFM_ASSERT(pth != NULL);
 c034324:	b928      	cbnz	r0, c034332 <tfm_thrd_start_scheduler+0x22>
 c034326:	22b2      	movs	r2, #178	; 0xb2
 c034328:	4906      	ldr	r1, [pc, #24]	; (c034344 <tfm_thrd_start_scheduler+0x34>)
 c03432a:	4807      	ldr	r0, [pc, #28]	; (c034348 <tfm_thrd_start_scheduler+0x38>)
 c03432c:	f7e4 f85a 	bl	c0183e4 <iprintf>
 c034330:	e7fe      	b.n	c034330 <tfm_thrd_start_scheduler+0x20>
 c034332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CURR_THRD = pth;
 c034336:	6018      	str	r0, [r3, #0]
 c034338:	4b04      	ldr	r3, [pc, #16]	; (c03434c <tfm_thrd_start_scheduler+0x3c>)
 c03433a:	605a      	str	r2, [r3, #4]
}
 c03433c:	bd08      	pop	{r3, pc}
 c03433e:	bf00      	nop
 c034340:	3003c934 	.word	0x3003c934
 c034344:	0c037270 	.word	0x0c037270
 c034348:	0c037052 	.word	0x0c037052
 c03434c:	e000ed00 	.word	0xe000ed00

0c034350 <tfm_svcall_thrd_exit>:
    CURR_THRD->status = THRD_STAT_DETACH;
 c034350:	2203      	movs	r2, #3
 c034352:	4b04      	ldr	r3, [pc, #16]	; (c034364 <tfm_svcall_thrd_exit+0x14>)
 c034354:	681b      	ldr	r3, [r3, #0]
 c034356:	615a      	str	r2, [r3, #20]
 c034358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 c03435c:	4b02      	ldr	r3, [pc, #8]	; (c034368 <tfm_svcall_thrd_exit+0x18>)
 c03435e:	605a      	str	r2, [r3, #4]
}
 c034360:	4770      	bx	lr
 c034362:	bf00      	nop
 c034364:	3003c934 	.word	0x3003c934
 c034368:	e000ed00 	.word	0xe000ed00

0c03436c <tfm_thrd_context_switch>:
}

void tfm_thrd_context_switch(struct tfm_state_context_ext *ctxb,
                             struct tfm_thrd_ctx *prev,
                             struct tfm_thrd_ctx *next)
{
 c03436c:	b538      	push	{r3, r4, r5, lr}
 c03436e:	4605      	mov	r5, r0
 c034370:	4614      	mov	r4, r2
    TFM_ASSERT(prev != NULL);
 c034372:	4608      	mov	r0, r1
 c034374:	b929      	cbnz	r1, c034382 <tfm_thrd_context_switch+0x16>
 c034376:	22cc      	movs	r2, #204	; 0xcc
 c034378:	490c      	ldr	r1, [pc, #48]	; (c0343ac <tfm_thrd_context_switch+0x40>)
 c03437a:	480d      	ldr	r0, [pc, #52]	; (c0343b0 <tfm_thrd_context_switch+0x44>)
 c03437c:	f7e4 f832 	bl	c0183e4 <iprintf>
 c034380:	e7fe      	b.n	c034380 <tfm_thrd_context_switch+0x14>
    TFM_ASSERT(next != NULL);
 c034382:	b92a      	cbnz	r2, c034390 <tfm_thrd_context_switch+0x24>
 c034384:	22cd      	movs	r2, #205	; 0xcd
 c034386:	4909      	ldr	r1, [pc, #36]	; (c0343ac <tfm_thrd_context_switch+0x40>)
 c034388:	4809      	ldr	r0, [pc, #36]	; (c0343b0 <tfm_thrd_context_switch+0x44>)
 c03438a:	f7e4 f82b 	bl	c0183e4 <iprintf>
 c03438e:	e7fe      	b.n	c03438e <tfm_thrd_context_switch+0x22>

    /*
     * First, update latest context into the current thread context.
     * Then, update background context with next thread's context.
     */
    tfm_core_util_memcpy(&prev->state_ctx.ctxb, ctxb, sizeof(*ctxb));
 c034390:	2230      	movs	r2, #48	; 0x30
 c034392:	4629      	mov	r1, r5
 c034394:	3018      	adds	r0, #24
 c034396:	f7fe fe83 	bl	c0330a0 <tfm_core_util_memcpy>
    tfm_core_util_memcpy(ctxb, &next->state_ctx.ctxb,
 c03439a:	2230      	movs	r2, #48	; 0x30
 c03439c:	f104 0118 	add.w	r1, r4, #24
 c0343a0:	4628      	mov	r0, r5
 c0343a2:	f7fe fe7d 	bl	c0330a0 <tfm_core_util_memcpy>
                         sizeof(next->state_ctx.ctxb));

    /* Update current thread indicator */
    CURR_THRD = next;
 c0343a6:	4b03      	ldr	r3, [pc, #12]	; (c0343b4 <tfm_thrd_context_switch+0x48>)
 c0343a8:	601c      	str	r4, [r3, #0]
}
 c0343aa:	bd38      	pop	{r3, r4, r5, pc}
 c0343ac:	0c037289 	.word	0x0c037289
 c0343b0:	0c037052 	.word	0x0c037052
 c0343b4:	3003c934 	.word	0x3003c934

0c0343b8 <tfm_panic>:
 */
#include <inttypes.h>
#include "tfm_utils.h"

void tfm_panic(void)
{
 c0343b8:	e7fe      	b.n	c0343b8 <tfm_panic>
	...

0c0343bc <tfm_event_wait>:
#include "tfm_thread.h"
#include "tfm_utils.h"
#include "tfm_wait.h"

void tfm_event_wait(struct tfm_event_t *pevnt)
{
 c0343bc:	b510      	push	{r4, lr}
    TFM_ASSERT(pevnt && pevnt->magic == TFM_EVENT_MAGIC);
 c0343be:	4604      	mov	r4, r0
 c0343c0:	b118      	cbz	r0, c0343ca <tfm_event_wait+0xe>
 c0343c2:	6802      	ldr	r2, [r0, #0]
 c0343c4:	4b09      	ldr	r3, [pc, #36]	; (c0343ec <tfm_event_wait+0x30>)
 c0343c6:	429a      	cmp	r2, r3
 c0343c8:	d005      	beq.n	c0343d6 <tfm_event_wait+0x1a>
 c0343ca:	220d      	movs	r2, #13
 c0343cc:	4908      	ldr	r1, [pc, #32]	; (c0343f0 <tfm_event_wait+0x34>)
 c0343ce:	4809      	ldr	r0, [pc, #36]	; (c0343f4 <tfm_event_wait+0x38>)
 c0343d0:	f7e4 f808 	bl	c0183e4 <iprintf>
 c0343d4:	e7fe      	b.n	c0343d4 <tfm_event_wait+0x18>

    pevnt->owner = tfm_thrd_curr_thread();
 c0343d6:	f7ff ff0d 	bl	c0341f4 <tfm_thrd_curr_thread>
    tfm_thrd_set_status(pevnt->owner, THRD_STAT_BLOCK);
 c0343da:	2102      	movs	r1, #2
    pevnt->owner = tfm_thrd_curr_thread();
 c0343dc:	6060      	str	r0, [r4, #4]
    tfm_thrd_set_status(pevnt->owner, THRD_STAT_BLOCK);
 c0343de:	f7ff ff1b 	bl	c034218 <tfm_thrd_set_status>
    tfm_thrd_activate_schedule();
}
 c0343e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tfm_thrd_activate_schedule();
 c0343e6:	f7ff bf8b 	b.w	c034300 <tfm_thrd_activate_schedule>
 c0343ea:	bf00      	nop
 c0343ec:	65766e74 	.word	0x65766e74
 c0343f0:	0c0372a1 	.word	0x0c0372a1
 c0343f4:	0c037052 	.word	0x0c037052

0c0343f8 <tfm_event_wake>:

void tfm_event_wake(struct tfm_event_t *pevnt, uint32_t retval)
{
 c0343f8:	b538      	push	{r3, r4, r5, lr}
 c0343fa:	460d      	mov	r5, r1
    TFM_ASSERT(pevnt && pevnt->magic == TFM_EVENT_MAGIC);
 c0343fc:	4604      	mov	r4, r0
 c0343fe:	b118      	cbz	r0, c034408 <tfm_event_wake+0x10>
 c034400:	6802      	ldr	r2, [r0, #0]
 c034402:	4b0c      	ldr	r3, [pc, #48]	; (c034434 <tfm_event_wake+0x3c>)
 c034404:	429a      	cmp	r2, r3
 c034406:	d005      	beq.n	c034414 <tfm_event_wake+0x1c>
 c034408:	2216      	movs	r2, #22
 c03440a:	490b      	ldr	r1, [pc, #44]	; (c034438 <tfm_event_wake+0x40>)
 c03440c:	480b      	ldr	r0, [pc, #44]	; (c03443c <tfm_event_wake+0x44>)
 c03440e:	f7e3 ffe9 	bl	c0183e4 <iprintf>
 c034412:	e7fe      	b.n	c034412 <tfm_event_wake+0x1a>

    if (pevnt->owner && pevnt->owner->status == THRD_STAT_BLOCK) {
 c034414:	6840      	ldr	r0, [r0, #4]
 c034416:	b160      	cbz	r0, c034432 <tfm_event_wake+0x3a>
 c034418:	6943      	ldr	r3, [r0, #20]
 c03441a:	2b02      	cmp	r3, #2
 c03441c:	d109      	bne.n	c034432 <tfm_event_wake+0x3a>
        tfm_thrd_set_status(pevnt->owner, THRD_STAT_RUNNING);
 c03441e:	2101      	movs	r1, #1
 c034420:	f7ff fefa 	bl	c034218 <tfm_thrd_set_status>
        tfm_thrd_set_retval(pevnt->owner, retval);
 c034424:	6863      	ldr	r3, [r4, #4]
 *  could set its return value to the caller before caller goes.
 */
void __STATIC_INLINE tfm_thrd_set_retval(struct tfm_thrd_ctx *pth,
                                         uint32_t retval)
{
    TFM_STATE_RET_VAL(&pth->state_ctx) = retval;
 c034426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c034428:	601d      	str	r5, [r3, #0]
        tfm_thrd_activate_schedule();
    }
}
 c03442a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        tfm_thrd_activate_schedule();
 c03442e:	f7ff bf67 	b.w	c034300 <tfm_thrd_activate_schedule>
}
 c034432:	bd38      	pop	{r3, r4, r5, pc}
 c034434:	65766e74 	.word	0x65766e74
 c034438:	0c0372b0 	.word	0x0c0372b0
 c03443c:	0c037052 	.word	0x0c037052

0c034440 <_write>:
    return ch;
}
#elif defined(__GNUC__)
/* Redirects printf to TFM_DRIVER_STDIO in case of GNUARM */
int _write(int fd, char *str, int len)
{
 c034440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c034442:	460e      	mov	r6, r1
 c034444:	4615      	mov	r5, r2
    int i;

    for (i = 0; i < len; i++) {
 c034446:	460c      	mov	r4, r1
    ret = TFM_DRIVER_STDIO.Send(&c, 1);
 c034448:	4f08      	ldr	r7, [pc, #32]	; (c03446c <_write+0x2c>)
    for (i = 0; i < len; i++) {
 c03444a:	1ba3      	subs	r3, r4, r6
 c03444c:	429d      	cmp	r5, r3
 c03444e:	dc02      	bgt.n	c034456 <_write+0x16>
        uart_putc(str[i]);
    }

    /* Return the number of characters written */
    return len;
}
 c034450:	4628      	mov	r0, r5
 c034452:	b003      	add	sp, #12
 c034454:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uart_putc(str[i]);
 c034456:	f814 3b01 	ldrb.w	r3, [r4], #1
    ret = TFM_DRIVER_STDIO.Send(&c, 1);
 c03445a:	2101      	movs	r1, #1
 c03445c:	f88d 3007 	strb.w	r3, [sp, #7]
 c034460:	f10d 0007 	add.w	r0, sp, #7
 c034464:	697b      	ldr	r3, [r7, #20]
 c034466:	4798      	blx	r3
 c034468:	e7ef      	b.n	c03444a <_write+0xa>
 c03446a:	bf00      	nop
 c03446c:	0c034f48 	.word	0x0c034f48

0c034470 <stdio_init>:
    return ch;
}
#endif

void stdio_init(void)
{
 c034470:	b510      	push	{r4, lr}
#ifdef NDEBUG
    __attribute__((unused))
#endif
    int32_t ret = ARM_DRIVER_OK;
    ret = TFM_DRIVER_STDIO.Initialize(NULL);
 c034472:	4c05      	ldr	r4, [pc, #20]	; (c034488 <stdio_init+0x18>)
 c034474:	2000      	movs	r0, #0
 c034476:	68a3      	ldr	r3, [r4, #8]
 c034478:	4798      	blx	r3
    ASSERT_HIGH(ret);

    ret = TFM_DRIVER_STDIO.Control(ARM_USART_MODE_ASYNCHRONOUS, 115200);
 c03447a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 c03447c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    ASSERT_HIGH(ret);
}
 c034480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ret = TFM_DRIVER_STDIO.Control(ARM_USART_MODE_ASYNCHRONOUS, 115200);
 c034484:	2001      	movs	r0, #1
 c034486:	4718      	bx	r3
 c034488:	0c034f48 	.word	0x0c034f48

0c03448c <_close>:
 c03448c:	4b02      	ldr	r3, [pc, #8]	; (c034498 <_close+0xc>)
 c03448e:	2258      	movs	r2, #88	; 0x58
 c034490:	f04f 30ff 	mov.w	r0, #4294967295
 c034494:	601a      	str	r2, [r3, #0]
 c034496:	4770      	bx	lr
 c034498:	3003c978 	.word	0x3003c978

0c03449c <_fstat>:
 c03449c:	4b02      	ldr	r3, [pc, #8]	; (c0344a8 <_fstat+0xc>)
 c03449e:	2258      	movs	r2, #88	; 0x58
 c0344a0:	f04f 30ff 	mov.w	r0, #4294967295
 c0344a4:	601a      	str	r2, [r3, #0]
 c0344a6:	4770      	bx	lr
 c0344a8:	3003c978 	.word	0x3003c978

0c0344ac <_isatty>:
 c0344ac:	4b02      	ldr	r3, [pc, #8]	; (c0344b8 <_isatty+0xc>)
 c0344ae:	2258      	movs	r2, #88	; 0x58
 c0344b0:	2000      	movs	r0, #0
 c0344b2:	601a      	str	r2, [r3, #0]
 c0344b4:	4770      	bx	lr
 c0344b6:	bf00      	nop
 c0344b8:	3003c978 	.word	0x3003c978

0c0344bc <_lseek>:
 c0344bc:	4b02      	ldr	r3, [pc, #8]	; (c0344c8 <_lseek+0xc>)
 c0344be:	2258      	movs	r2, #88	; 0x58
 c0344c0:	f04f 30ff 	mov.w	r0, #4294967295
 c0344c4:	601a      	str	r2, [r3, #0]
 c0344c6:	4770      	bx	lr
 c0344c8:	3003c978 	.word	0x3003c978

0c0344cc <_read>:
 c0344cc:	4b02      	ldr	r3, [pc, #8]	; (c0344d8 <_read+0xc>)
 c0344ce:	2258      	movs	r2, #88	; 0x58
 c0344d0:	f04f 30ff 	mov.w	r0, #4294967295
 c0344d4:	601a      	str	r2, [r3, #0]
 c0344d6:	4770      	bx	lr
 c0344d8:	3003c978 	.word	0x3003c978

0c0344dc <_sbrk>:
 c0344dc:	4b04      	ldr	r3, [pc, #16]	; (c0344f0 <_sbrk+0x14>)
 c0344de:	4602      	mov	r2, r0
 c0344e0:	6819      	ldr	r1, [r3, #0]
 c0344e2:	b909      	cbnz	r1, c0344e8 <_sbrk+0xc>
 c0344e4:	4903      	ldr	r1, [pc, #12]	; (c0344f4 <_sbrk+0x18>)
 c0344e6:	6019      	str	r1, [r3, #0]
 c0344e8:	6818      	ldr	r0, [r3, #0]
 c0344ea:	4402      	add	r2, r0
 c0344ec:	601a      	str	r2, [r3, #0]
 c0344ee:	4770      	bx	lr
 c0344f0:	3003c948 	.word	0x3003c948
 c0344f4:	30034b00 	.word	0x30034b00

0c0344f8 <_exit>:
 c0344f8:	e7fe      	b.n	c0344f8 <_exit>
	...

0c0344fc <_init>:
 c0344fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0344fe:	bf00      	nop
 c034500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c034502:	bc08      	pop	{r3}
 c034504:	469e      	mov	lr, r3
 c034506:	4770      	bx	lr

0c034508 <_fini>:
 c034508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c03450a:	bf00      	nop
 c03450c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c03450e:	bc08      	pop	{r3}
 c034510:	469e      	mov	lr, r3
 c034512:	4770      	bx	lr

0c034514 <ecp_supported_curves>:
 c034514:	0005 0019 0209 0000 45a4 0c03 0008 001c     .........E......
 c034524:	0200 0000 45ae 0c03 0004 0018 0180 0000     .....E..........
 c034534:	45be 0c03 0007 001b 0180 0000 45c8 0c03     .E...........E..
 c034544:	0003 0017 0100 0000 45d8 0c03 000c 0016     .........E......
 c034554:	0100 0000 45e2 0c03 0006 001a 0100 0000     .....E..........
 c034564:	45ec 0c03 0002 0015 00e0 0000 45fc 0c03     .E...........E..
 c034574:	000b 0014 00e0 0000 4606 0c03 0001 0013     .........F......
 c034584:	00c0 0000 4610 0c03 000a 0012 00c0 0000     .....F..........
 c034594:	461a 0c03 0000 0000 0000 0000 0000 0000     .F..............
 c0345a4:	6573 7063 3235 7231 0031 7262 6961 706e     secp521r1.brainp
 c0345b4:	6f6f 506c 3135 7232 0031 6573 7063 3833     oolP512r1.secp38
 c0345c4:	7234 0031 7262 6961 706e 6f6f 506c 3833     4r1.brainpoolP38
 c0345d4:	7234 0031 6573 7063 3532 7236 0031 6573     4r1.secp256r1.se
 c0345e4:	7063 3532 6b36 0031 7262 6961 706e 6f6f     cp256k1.brainpoo
 c0345f4:	506c 3532 7236 0031 6573 7063 3232 7234     lP256r1.secp224r
 c034604:	0031 6573 7063 3232 6b34 0031 6573 7063     1.secp224k1.secp
 c034614:	3931 7232 0031 6573 7063 3931 6b32 0031     192r1.secp192k1.

0c034624 <brainpoolP256r1_a>:
 c034624:	b5d9 f330 4b44 e94a 5c6c 26dc 55c1 fb80     ..0.DKJ.l\.&.U..
 c034634:	ffe7 417a 7530 eef6 3057 fc2c 0975 7d5a     ..zA0u..W0,.u.Z}

0c034644 <brainpoolP256r1_b>:
 c034644:	07b6 ff8c dc18 6bcc e1ce 5cf7 1629 9584     .......k...\)...
 c034654:	7cbf bbd7 b5d9 f330 4b44 e94a 5c6c 26dc     .|....0.DKJ.l\.&

0c034664 <brainpoolP256r1_gx>:
 c034664:	3262 9ace 53bd 3a44 23c2 e3bd 27e1 b9de     b2...SD:.#...'..
 c034674:	b7af fc81 482f 2c4b 57cb cb7e aeb9 8bd2     ..../HK,.W~.....

0c034684 <brainpoolP256r1_gy>:
 c034684:	6997 2f04 54c7 5c1d 8e54 2ded 4513 c277     .i./.T.\T..-.Ew.
 c034694:	1dc9 1461 461a 97f8 c4fd c3da f835 547e     ..a..F......5.~T

0c0346a4 <brainpoolP256r1_n>:
 c0346a4:	56a7 9748 0e82 901e a6f7 b561 7aa3 8c39     .VH.......a..z9.
 c0346b4:	8d71 9d83 0a90 3e66 a9bc a1ee 57db a9fb     q.....f>.....W..

0c0346c4 <brainpoolP256r1_p>:
 c0346c4:	5377 1f6e 481d 2013 2028 d526 f623 6e3b     wSn..H. ( &.#.;n
 c0346d4:	8d72 9d83 0a90 3e66 a9bc a1ee 57db a9fb     r.....f>.....W..

0c0346e4 <brainpoolP384r1_a>:
 c0346e4:	2826 22ce c7dd 04a8 d4eb 503a 814a 8aa5     &(."......:PJ...
 c0346f4:	f90f ba91 65ef 1391 2787 4fb2 a28e c2be     .....e...'.O....
 c034704:	afa0 ce05 080a 3c72 150c 3d8c 82c6 7bc3     ......r<...=...{

0c034714 <brainpoolP384r1_b>:
 c034714:	4c11 fa50 8696 3ab7 c994 95db 3902 7cb4     .LP....:.....9.|
 c034724:	62d5 3eeb 0ea5 2e88 d2a6 07dc 7de1 2fb7     .b.>.........}./
 c034734:	447c 16f0 b554 8b39 2826 22ce c7dd 04a8     |D..T.9.&(."....

0c034744 <brainpoolP384r1_gx>:
 c034744:	af1e 47d4 b2e2 ef87 46aa 36d6 e034 e826     ...G.....F.64.&.
 c034754:	10e8 0cbd cafe db7f 4fe3 7ef1 a3e7 8847     .........O.~..G.
 c034764:	3f6b b7c1 3a81 a2a6 45ff 68cf 64f0 1d1c     k?...:...E.h.d..

0c034774 <brainpoolP384r1_gy>:
 c034774:	5315 263c 0341 4282 8111 7791 4621 0e46     .S<&A..B...w!FF.
 c034784:	2928 f991 054f e19c 5864 feec 0b29 62b7     ()..O...dX..)..b
 c034794:	d552 95cf eb8e 5cb1 c2a4 20f9 1d75 8abe     R......\... u...

0c0347a4 <brainpoolP384r1_n>:
 c0347a4:	6565 e904 3202 3b88 c310 6b7f b6af cf3a     ee...2.;...k..:.
 c0347b4:	25a7 ac04 6e6c 1f16 56b3 ed54 7109 152f     .%..ln...VT..q/.
 c0347c4:	41df 50e6 6f7e 0f5d 6d28 a338 1e82 8cb9     .A.P~o].(m8.....

0c0347d4 <brainpoolP384r1_p>:
 c0347d4:	ec53 3107 0013 8747 1a71 901d a729 acd3     S..1..G.q...)...
 c0347e4:	1123 7fb7 da19 12b1 56b4 ed54 7109 152f     #........VT..q/.
 c0347f4:	41df 50e6 6f7e 0f5d 6d28 a338 1e82 8cb9     .A.P~o].(m8.....

0c034804 <brainpoolP512r1_a>:
 c034804:	94ca 77fc ac4d e7c1 c7b9 2bf2 17a7 7f11     ...wM......+....
 c034814:	c8b5 8b9a f1c9 0a2e 3aa1 a825 5d5a 2ded     .........:%.Z].-
 c034824:	63bc ea98 41ca a834 1610 3df9 dd8d 94cb     .c...A4....=....
 c034834:	4cc5 ac23 7145 e232 3b89 8b60 a331 7830     .L#.Eq2..;`.1.0x

0c034844 <brainpoolP512r1_b>:
 c034844:	f723 8016 bd63 2809 e5dd 5eba 50b7 9840     #...c..(...^.P@.
 c034854:	3e67 dc08 94ca 77fc ac4d e7c1 c7b9 2bf2     g>.....wM......+
 c034864:	17a7 7f11 c8b5 8b9a f1c9 0a2e 3aa1 a825     .............:%.
 c034874:	5d5a 2ded 63bc ea98 41ca a834 1610 3df9     Z].-.c...A4....=

0c034884 <brainpoolP512r1_gx>:
 c034884:	f822 bcb9 2209 8b35 5e68 406a 5047 7c6d     "...."5.h^j@GPm|
 c034894:	7d5f 93b9 687b 50d1 d48d e2d0 1f78 ff3b     _}..{h.P....x.;.
 c0348a4:	098e f4d0 62ee b43b 16c1 b5d9 9f70 85ed     .....b;.....p...
 c0348b4:	6a93 9c4c 322e 5a21 d964 d82e e4bd 81ae     .jL..2!Zd.......

0c0348c4 <brainpoolP512r1_gy>:
 c0348c4:	0892 3ad8 1e0f 78cd 5406 a8f0 2b2f d1ca     ...:...x.T../+..
 c0348d4:	63ae 8a27 4bd8 5bca 485e 4a5f de49 b2dc     .c'..K.[^H_JI...
 c0348e4:	8111 881f c55b a000 7b1a 24a5 f700 f209     ....[....{.$....
 c0348f4:	22fd cf78 bfa9 c0ea 32ec 5663 385d 7dde     ."x......2cV]8.}

0c034904 <brainpoolP512r1_n>:
 c034904:	0069 9ca9 9682 b587 dadd 085d d381 1db1     i.........].....
 c034914:	1047 7fac 6119 4186 2619 4ca9 5c41 553e     G....a.A.&.LA\>U
 c034924:	0870 7033 9cca d663 d20e b3c9 8db3 cb30     p.3p..c.......0.
 c034934:	fc07 33c9 e6ae 3fd4 c48b dbe9 9db8 aadd     ...3...?........

0c034944 <brainpoolP512r1_p>:
 c034944:	48f3 583a 6056 28aa c685 2d82 ff2f 2881     .H:XV`.(...-/..(
 c034954:	80e6 e6a3 a12a aecd 6842 9bc6 9b00 7d4d     ....*...Bh....M}
 c034964:	0871 7033 9cca d663 d20e b3c9 8db3 cb30     q.3p..c.......0.
 c034974:	fc07 33c9 e6ae 3fd4 c48b dbe9 9db8 aadd     ...3...?........
 c034984:	3130 4244 3234 3100 4434 4645 4439 4145     01DB42.14DEF9DEA
 c034994:	4632 3937 4443 3536 3138 3632 3133 3541     2F79CD65812631A5
 c0349a4:	4643 4435 4533 0044 3839 4141 3800 3333     CF5D3ED.98AA.833
 c0349b4:	4435 3143 3336 4242 3231 4234 3536 3231     5DC163BB124B6512
 c0349c4:	4339 3639 4446 3945 3333 3844 3744 3332     9C96FDE933D8D723
 c0349d4:	3741 4130 4441 3843 3337 3644 3544 4134     A70AADC873D6D54A
 c0349e4:	4237 3042 0044 0000                         7BB0D...

0c0349ec <secp192k1_a>:
 c0349ec:	0000 0000                                   ....

0c0349f0 <secp192k1_b>:
 c0349f0:	0003 0000                                   ....

0c0349f4 <secp192k1_gx>:
 c0349f4:	6c7d eae0 d1b1 1da5 f434 80b7 7d02 26b0     }l......4....}.&
 c034a04:	e9ae c057 f10e db4f                         ..W...O.

0c034a0c <secp192k1_gy>:
 c034a0c:	2f9d d95e aa88 4082 8634 15be 63d0 8441     ./^....@4....cA.
 c034a1c:	28a7 9c56 2f6d 9b2f                         .(V.m//.

0c034a24 <secp192k1_n>:
 c034a24:	fd8d 74de 466a 0f69 fc17 26f2 fffe ffff     ...tjFi....&....
 c034a34:	ffff ffff ffff ffff                         ........

0c034a3c <secp192k1_p>:
 c034a3c:	ee37 ffff fffe ffff ffff ffff ffff ffff     7...............
 c034a4c:	ffff ffff ffff ffff                         ........

0c034a54 <secp192r1_b>:
 c034a54:	b9b1 c146 deec feb8 3049 7224 e9ab 0fa7     ..F.....I0$r....
 c034a64:	80e7 e59c 0519 6421                         ......!d

0c034a6c <secp192r1_gx>:
 c034a6c:	1012 82ff 0afd f4ff 8800 43a1 20eb 7cbf     ...........C. .|
 c034a7c:	90f6 b030 a80e 188d                         ..0.....

0c034a84 <secp192r1_gy>:
 c034a84:	4811 1e79 77a1 73f9 cdd5 6b24 11ed 6310     .Hy..w.s..$k...c
 c034a94:	da78 ffc8 2b95 0719                         x....+..

0c034a9c <secp192r1_n>:
 c034a9c:	2831 b4d2 c9b1 146b f836 99de ffff ffff     1(....k.6.......
 c034aac:	ffff ffff ffff ffff                         ........

0c034ab4 <secp192r1_p>:
 c034ab4:	ffff ffff ffff ffff fffe ffff ffff ffff     ................
 c034ac4:	ffff ffff ffff ffff                         ........

0c034acc <secp224k1_a>:
 c034acc:	0000 0000                                   ....

0c034ad0 <secp224k1_b>:
 c034ad0:	0005 0000                                   ....

0c034ad4 <secp224k1_gx>:
 c034ad4:	a45c b6b7 650e 0f7e 75a9 e470 67e9 69a4     \....e~..up..g.i
 c034ae4:	28a1 30fc 99df 4df0 5b33 a145               .(.0...M3[E.

0c034af0 <secp224k1_gy>:
 c034af0:	61a5 556d 4bdb e2ca bd59 c0b0 19f7 f7e3     .amU.K..Y.......
 c034b00:	fbd6 82ca 3442 7fba 9fed 7e08               ....B4.....~

0c034b0c <secp224k1_n>:
 c034b0c:	b1f7 769f a971 caf0 6184 d2ec dce8 0001     ...vq....a......
	...
 c034b28:	0001 0000                                   ....

0c034b2c <secp224k1_p>:
 c034b2c:	e56d ffff fffe ffff ffff ffff ffff ffff     m...............
 c034b3c:	ffff ffff ffff ffff ffff ffff               ............

0c034b48 <secp224r1_b>:
 c034b48:	ffb4 2355 3943 270b d8ba d7bf b0b7 5044     ..U#C9.'......DP
 c034b58:	3256 f541 b3ab 0c04 0a85 b405               V2A.........

0c034b64 <secp224r1_gx>:
 c034b64:	1d21 115c 80d6 3432 1122 56c2 c1d3 4a03     !.\...24"..V...J
 c034b74:	90b9 3213 bf7f 6bb4 0cbd b70e               ...2...k....

0c034b80 <secp224r1_gy>:
 c034b80:	7e34 8500 8199 44d5 4764 5a07 75a0 cd43     4~.....DdG.Z.uC.
 c034b90:	dfe6 4c22 23fb b5f7 6388 bd37               .."L.#...c7.

0c034b9c <secp224r1_n>:
 c034b9c:	2a3d 5c5c 2945 13dd f03e e0b8 16a2 ffff     =*\\E)..>.......
 c034bac:	ffff ffff ffff ffff ffff ffff               ............

0c034bb8 <secp224r1_p>:
 c034bb8:	0001 0000 0000 0000 0000 0000 ffff ffff     ................
 c034bc8:	ffff ffff ffff ffff ffff ffff 0000 0000     ................

0c034bd8 <secp256k1_a>:
 c034bd8:	0000 0000                                   ....

0c034bdc <secp256k1_b>:
 c034bdc:	0007 0000                                   ....

0c034be0 <secp256k1_gx>:
 c034be0:	1798 16f8 815b 59f2 28d9 2dce fcdb 029b     ....[..Y.(.-....
 c034bf0:	0b07 ce87 6295 55a0 bbac f9dc 667e 79be     .....b.U....~f.y

0c034c00 <secp256k1_gy>:
 c034c00:	d4b8 fb10 d08f 9c47 5419 a685 b448 fd17     ......G..T..H...
 c034c10:	08a8 0e11 fbfc 5da4 c465 26a3 da77 483a     .......]e..&w.:H

0c034c20 <secp256k1_n>:
 c034c20:	4141 d036 5e8c bfd2 a03b af48 dce6 baae     AA6..^..;.H.....
 c034c30:	fffe ffff ffff ffff ffff ffff ffff ffff     ................

0c034c40 <secp256k1_p>:
 c034c40:	fc2f ffff fffe ffff ffff ffff ffff ffff     /...............
 c034c50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

0c034c60 <secp256r1_b>:
 c034c60:	604b 27d2 3c3e 3bce b0f6 cc53 06b0 651d     K`.'><.;..S....e
 c034c70:	86bc 7698 bd55 b3eb 93e7 aa3a 35d8 5ac6     ...vU.....:..5.Z

0c034c80 <secp256r1_gx>:
 c034c80:	c296 d898 3945 f4a1 33a0 2deb 7d81 7703     ....E9...3.-.}.w
 c034c90:	40f2 63a4 e6e5 f8bc 4247 e12c d1f2 6b17     .@.c....GB,....k

0c034ca0 <secp256r1_gy>:
 c034ca0:	51f5 37bf 4068 cbb6 5ece 6b31 3357 2bce     .Q.7h@...^1kW3.+
 c034cb0:	9e16 7c0f eb4a 8ee7 7f9b fe1a 42e2 4fe3     ...|J........B.O

0c034cc0 <secp256r1_n>:
 c034cc0:	2551 fc63 cac2 f3b9 9e84 a717 faad bce6     Q%c.............
 c034cd0:	ffff ffff ffff ffff 0000 0000 ffff ffff     ................

0c034ce0 <secp256r1_p>:
 c034ce0:	ffff ffff ffff ffff ffff ffff 0000 0000     ................
	...
 c034cf8:	0001 0000 ffff ffff                         ........

0c034d00 <secp384r1_b>:
 c034d00:	2aef d3ec c8ed 2a85 d19d 8a2e 398d c656     .*.....*.....9V.
 c034d10:	875a 5013 088f 0314 4112 fe81 9c6e 181d     Z..P.....A..n...
 c034d20:	2d19 e3f8 056b 988e e7e4 e23e 2fa7 b331     .-..k.....>../1.

0c034d30 <secp384r1_gx>:
 c034d30:	0ab7 7276 5e38 3a54 296c bf55 f25d 5502     ..vr8^T:l)U.]..U
 c034d40:	2a38 8254 41e0 59f7 9b98 8ba7 3b62 6e1d     8*T..A.Y....b;.n
 c034d50:	ad74 f320 c71e 8eb1 0537 be8b ca22 aa87     t. .....7..."...

0c034d60 <secp384r1_gy>:
 c034d60:	0e5f 90ea 1d7c 7a43 819d 1d7e b1ce 0a60     _...|.Cz..~...`.
 c034d70:	b8c0 b5f0 3113 e9da 147c 289a 1dbd f8f4     .....1..|..(....
 c034d80:	dc29 9292 98bf 5d9e 2c6f 9626 de4a 3617     )......]o,&.J..6

0c034d90 <secp384r1_n>:
 c034d90:	2973 ccc5 196a ecec a77a 48b0 0db2 581a     s)..j...z..H...X
 c034da0:	2ddf f437 4d81 c763 ffff ffff ffff ffff     .-7..Mc.........
 c034db0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

0c034dc0 <secp384r1_p>:
 c034dc0:	ffff ffff 0000 0000 0000 0000 ffff ffff     ................
 c034dd0:	fffe ffff ffff ffff ffff ffff ffff ffff     ................
 c034de0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

0c034df0 <secp521r1_b>:
 c034df0:	3f00 6b50 1fd4 ef45 34f1 3d2c df88 3573     .?Pk..E..4,=..s5
 c034e00:	bf07 3bb1 c0bd 1652 937b ec7e 3951 5619     ...;..R.{.~.Q9.V
 c034e10:	09e1 8ef1 8991 b8b4 15f3 99b3 725b a2da     ............[r..
 c034e20:	40ee b685 21a0 929a 9a1f 8e1c b961 953e     .@...!......a.>.
 c034e30:	0051 0000                                   Q...

0c034e34 <secp521r1_gx>:
 c034e34:	bd66 c2e5 7e31 f97e 429b 856a b3c1 3348     f...1~~..Bj...H3
 c034e44:	a8de a2ff c127 fe1d 5928 efe7 5e77 a14b     ....'...(Y..w^K.
 c034e54:	3dba 6b4d af60 f828 b521 053f 8139 9c64     .=Mk`.(.!.?.9.d.
 c034e64:	b442 2395 cb66 9e3e e9cd 0404 06b7 858e     B..#f.>.........
 c034e74:	00c6 0000                                   ....

0c034e78 <secp521r1_gy>:
 c034e78:	6650 9fd1 9476 88be c240 a272 7086 353c     Pf..v...@.r..p<5
 c034e88:	0761 3fad b901 c550 2640 5ef4 7299 97ee     a..?..P.@&.^.r..
 c034e98:	662c 273e bd17 17af 4468 579b 4449 98f5     ,f>'....hD.WID..
 c034ea8:	1bd9 2c7d 5fb4 5c8a c004 9a3b 6a78 3929     ..},._.\..;.xj)9
 c034eb8:	0118 0000                                   ....

0c034ebc <secp521r1_n>:
 c034ebc:	6409 9138 b71e bb6f 47ae 899c c9b8 3bb5     .d8...o..G.....;
 c034ecc:	a5d0 f709 0148 7fcc 966b bf2f 8783 5186     ....H...k./....Q
 c034edc:	fffa ffff ffff ffff ffff ffff ffff ffff     ................
 c034eec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 c034efc:	01ff 0000                                   ....

0c034f00 <secp521r1_p>:
 c034f00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 c034f10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 c034f20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 c034f30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 c034f40:	01ff 0000                                   ....

0c034f44 <DriverVersion>:
 c034f44:	0203 0202                                   ....

0c034f48 <Driver_USART0>:
 c034f48:	ec11 0c01 ec25 0c01 eca1 0c01 ec29 0c01     ....%.......)...
 c034f58:	ec2d 0c01 ec7d 0c01 ec5d 0c01 ec33 0c01     -...}...]...3...
 c034f68:	ec39 0c01 ed57 0c01 ec3f 0c01 ec43 0c01     9...W...?...C...
 c034f78:	ed51 0c01 ec4f 0c01                         Q...O...

0c034f80 <ARM_FLASH0_DEV_DATA>:
 c034f80:	0000 0000 0080 0000 1000 0000 0800 0000     ................
 c034f90:	0008 0000 00ff 0000                         ........

0c034f98 <DriverVersion>:
 c034f98:	0201 0100                                   ....

0c034f9c <TFM_Driver_FLASH0>:
 c034f9c:	ed5d 0c01 ed71 0c01 ede5 0c01 ed75 0c01     ]...q.......u...
 c034fac:	ed79 0c01 edad 0c01 edf5 0c01 eeb5 0c01     y...............
 c034fbc:	ed8f 0c01 ed95 0c01 eda1 0c01 535b 6365     ............[Sec
 c034fcc:	4820 6e61 6c64 7265 205d 4600 6961 656c      Handler] .Faile
 c034fdc:	2064 6f74 7320 7465 7520 2070 6e69 7469     d to set up init
 c034fec:	6169 206c 504d 2055 6f63 666e 6769 7275     ial MPU configur
 c034ffc:	7461 6f69 216e 4820 6c61 6974 676e 002e     ation! Halting..

0c03500c <AHBPrescTable>:
	...
 c035014:	0201 0403 0706 0908                         ........

0c03501c <APBPrescTable>:
 c03501c:	0000 0000 0201 0403                         ........

0c035024 <MSIRangeTable>:
 c035024:	86a0 0001 0d40 0003 1a80 0006 3500 000c     ....@........5..
 c035034:	4240 000f 8480 001e 0900 003d 1200 007a     @B........=...z.
 c035044:	2400 00f4 3600 016e 4800 01e8 6c00 02dc     .$...6n..H...l..
	...

0c035064 <memory_regions>:
 c035064:	0400 9000 0400 9000 3fff 9022 8c80 0c03     .........?".....
 c035074:	8ce0 0c03 0000 0000 0000 ff00 0000 ffff     ................
 c035084:	ff00 ffff 0000 0000 ff00 0000 ffff 0000     ................
 c035094:	ffff ff00 0000 0000 00ff 0000 ffff 0000     ................
 c0350a4:	ffff 00ff                                   ....

0c0350a8 <CSWTCH.58>:
 c0350a8:	0401 0802                                   ....

0c0350ac <CSWTCH.59>:
 c0350ac:	1000 1010 1004 1010 1002 1010 0008          ..............

0c0350ba <UARTPrescTable>:
 c0350ba:	0001 0002 0004 0006 0008 000a 000c 0010     ................
 c0350ca:	0020 0040 0080 0100                          .@.....

0c0350d2 <base64_dec_map>:
 c0350d2:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
 c0350e2:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
 c0350f2:	7f7f 7f7f 7f7f 7f7f 7f7f 3e7f 7f7f 3f7f     ...........>...?
 c035102:	3534 3736 3938 3b3a 3d3c 7f7f 407f 7f7f     456789:;<=...@..
 c035112:	007f 0201 0403 0605 0807 0a09 0c0b 0e0d     ................
 c035122:	100f 1211 1413 1615 1817 7f19 7f7f 7f7f     ................
 c035132:	1a7f 1c1b 1e1d 201f 2221 2423 2625 2827     ....... !"#$%&'(
 c035142:	2a29 2c2b 2e2d 302f 3231 7f33 7f7f 7f7f     )*+,-./0123.....
	...

0c035154 <small_prime>:
 c035154:	0003 0000 0005 0000 0007 0000 000b 0000     ................
 c035164:	000d 0000 0011 0000 0013 0000 0017 0000     ................
 c035174:	001d 0000 001f 0000 0025 0000 0029 0000     ........%...)...
 c035184:	002b 0000 002f 0000 0035 0000 003b 0000     +.../...5...;...
 c035194:	003d 0000 0043 0000 0047 0000 0049 0000     =...C...G...I...
 c0351a4:	004f 0000 0053 0000 0059 0000 0061 0000     O...S...Y...a...
 c0351b4:	0065 0000 0067 0000 006b 0000 006d 0000     e...g...k...m...
 c0351c4:	0071 0000 007f 0000 0083 0000 0089 0000     q...............
 c0351d4:	008b 0000 0095 0000 0097 0000 009d 0000     ................
 c0351e4:	00a3 0000 00a7 0000 00ad 0000 00b3 0000     ................
 c0351f4:	00b5 0000 00bf 0000 00c1 0000 00c5 0000     ................
 c035204:	00c7 0000 00d3 0000 00df 0000 00e3 0000     ................
 c035214:	00e5 0000 00e9 0000 00ef 0000 00f1 0000     ................
 c035224:	00fb 0000 0101 0000 0107 0000 010d 0000     ................
 c035234:	010f 0000 0115 0000 0119 0000 011b 0000     ................
 c035244:	0125 0000 0133 0000 0137 0000 0139 0000     %...3...7...9...
 c035254:	013d 0000 014b 0000 0151 0000 015b 0000     =...K...Q...[...
 c035264:	015d 0000 0161 0000 0167 0000 016f 0000     ]...a...g...o...
 c035274:	0175 0000 017b 0000 017f 0000 0185 0000     u...{...........
 c035284:	018d 0000 0191 0000 0199 0000 01a3 0000     ................
 c035294:	01a5 0000 01af 0000 01b1 0000 01b7 0000     ................
 c0352a4:	01bb 0000 01c1 0000 01c9 0000 01cd 0000     ................
 c0352b4:	01cf 0000 01d3 0000 01df 0000 01e7 0000     ................
 c0352c4:	01eb 0000 01f3 0000 01f7 0000 01fd 0000     ................
 c0352d4:	0209 0000 020b 0000 021d 0000 0223 0000     ............#...
 c0352e4:	022d 0000 0233 0000 0239 0000 023b 0000     -...3...9...;...
 c0352f4:	0241 0000 024b 0000 0251 0000 0257 0000     A...K...Q...W...
 c035304:	0259 0000 025f 0000 0265 0000 0269 0000     Y..._...e...i...
 c035314:	026b 0000 0277 0000 0281 0000 0283 0000     k...w...........
 c035324:	0287 0000 028d 0000 0293 0000 0295 0000     ................
 c035334:	02a1 0000 02a5 0000 02ab 0000 02b3 0000     ................
 c035344:	02bd 0000 02c5 0000 02cf 0000 02d7 0000     ................
 c035354:	02dd 0000 02e3 0000 02e7 0000 02ef 0000     ................
 c035364:	02f5 0000 02f9 0000 0301 0000 0305 0000     ................
 c035374:	0313 0000 031d 0000 0329 0000 032b 0000     ........)...+...
 c035384:	0335 0000 0337 0000 033b 0000 033d 0000     5...7...;...=...
 c035394:	0347 0000 0355 0000 0359 0000 035b 0000     G...U...Y...[...
 c0353a4:	035f 0000 036d 0000 0371 0000 0373 0000     _...m...q...s...
 c0353b4:	0377 0000 038b 0000 038f 0000 0397 0000     w...............
 c0353c4:	03a1 0000 03a9 0000 03ad 0000 03b3 0000     ................
 c0353d4:	03b9 0000 03c7 0000 03cb 0000 03d1 0000     ................
 c0353e4:	03d7 0000 03df 0000 03e5 0000 ff99 ffff     ................

0c0353f4 <aes_128_cbc_info>:
 c0353f4:	0205 0000 0080 0000 583d 0c03 0010 0000     ........=X......
 c035404:	0000 0000 0010 0000 5640 0c03               ........@V..

0c035410 <aes_128_ccm_info>:
 c035410:	082b 0000 0080 0000 5780 0c03 000c 0000     +........W......
 c035420:	0001 0000 0010 0000 5668 0c03               ........hV..

0c03542c <aes_128_cfb128_info>:
 c03542c:	0308 0000 0080 0000 5816 0c03 0010 0000     .........X......
 c03543c:	0000 0000 0010 0000 5640 0c03               ........@V..

0c035448 <aes_128_ctr_info>:
 c035448:	050b 0000 0080 0000 57c8 0c03 0010 0000     .........W......
 c035458:	0000 0000 0010 0000 5640 0c03               ........@V..

0c035464 <aes_128_ecb_info>:
 c035464:	0102 0000 0080 0000 5861 0c03 0000 0000     ........aX......
 c035474:	0000 0000 0010 0000 5640 0c03               ........@V..

0c035480 <aes_128_gcm_info>:
 c035480:	060e 0000 0080 0000 57a4 0c03 000c 0000     .........W......
 c035490:	0001 0000 0010 0000 5690 0c03               .........V..

0c03549c <aes_128_ofb_info>:
 c03549c:	0443 0000 0080 0000 57ec 0c03 0010 0000     C........W......
 c0354ac:	0000 0000 0010 0000 5640 0c03               ........@V..

0c0354b8 <aes_192_cbc_info>:
 c0354b8:	0206 0000 00c0 0000 5831 0c03 0010 0000     ........1X......
 c0354c8:	0000 0000 0010 0000 5640 0c03               ........@V..

0c0354d4 <aes_192_ccm_info>:
 c0354d4:	082c 0000 00c0 0000 5774 0c03 000c 0000     ,.......tW......
 c0354e4:	0001 0000 0010 0000 5668 0c03               ........hV..

0c0354f0 <aes_192_cfb128_info>:
 c0354f0:	0309 0000 00c0 0000 5807 0c03 0010 0000     .........X......
 c035500:	0000 0000 0010 0000 5640 0c03               ........@V..

0c03550c <aes_192_ctr_info>:
 c03550c:	050c 0000 00c0 0000 57bc 0c03 0010 0000     .........W......
 c03551c:	0000 0000 0010 0000 5640 0c03               ........@V..

0c035528 <aes_192_ecb_info>:
 c035528:	0103 0000 00c0 0000 5855 0c03 0000 0000     ........UX......
 c035538:	0000 0000 0010 0000 5640 0c03               ........@V..

0c035544 <aes_192_gcm_info>:
 c035544:	060f 0000 00c0 0000 5798 0c03 000c 0000     .........W......
 c035554:	0001 0000 0010 0000 5690 0c03               .........V..

0c035560 <aes_192_ofb_info>:
 c035560:	0444 0000 00c0 0000 57e0 0c03 0010 0000     D........W......
 c035570:	0000 0000 0010 0000 5640 0c03               ........@V..

0c03557c <aes_256_cbc_info>:
 c03557c:	0207 0000 0100 0000 5825 0c03 0010 0000     ........%X......
 c03558c:	0000 0000 0010 0000 5640 0c03               ........@V..

0c035598 <aes_256_ccm_info>:
 c035598:	082d 0000 0100 0000 5768 0c03 000c 0000     -.......hW......
 c0355a8:	0001 0000 0010 0000 5668 0c03               ........hV..

0c0355b4 <aes_256_cfb128_info>:
 c0355b4:	030a 0000 0100 0000 57f8 0c03 0010 0000     .........W......
 c0355c4:	0000 0000 0010 0000 5640 0c03               ........@V..

0c0355d0 <aes_256_ctr_info>:
 c0355d0:	050d 0000 0100 0000 57b0 0c03 0010 0000     .........W......
 c0355e0:	0000 0000 0010 0000 5640 0c03               ........@V..

0c0355ec <aes_256_ecb_info>:
 c0355ec:	0104 0000 0100 0000 5849 0c03 0000 0000     ........IX......
 c0355fc:	0000 0000 0010 0000 5640 0c03               ........@V..

0c035608 <aes_256_gcm_info>:
 c035608:	0610 0000 0100 0000 578c 0c03 000c 0000     .........W......
 c035618:	0001 0000 0010 0000 5690 0c03               .........V..

0c035624 <aes_256_ofb_info>:
 c035624:	0445 0000 0100 0000 57d4 0c03 0010 0000     E........W......
 c035634:	0000 0000 0010 0000 5640 0c03               ........@V..

0c035640 <aes_info>:
 c035640:	0002 0000 6eb3 0c02 6eaf 0c02 6eab 0c02     .....n...n...n..
 c035650:	6ea7 0c02 6ea3 0c02 6e9f 0c02 6e9b 0c02     .n...n...n...n..
 c035660:	6e83 0c02 6e71 0c02                         .n..qn..

0c035668 <ccm_aes_info>:
 c035668:	0002 0000 0000 0000 0000 0000 0000 0000     ................
	...
 c035680:	6e33 0c02 6e33 0c02 6e1b 0c02 6e09 0c02     3n..3n...n...n..

0c035690 <gcm_aes_info>:
 c035690:	0002 0000 0000 0000 0000 0000 0000 0000     ................
	...
 c0356a8:	6e67 0c02 6e67 0c02 6e4f 0c02 6e3d 0c02     gn..gn..On..=n..

0c0356b8 <mbedtls_cipher_definitions>:
 c0356b8:	0002 0000 5464 0c03 0003 0000 5528 0c03     ....dT......(U..
 c0356c8:	0004 0000 55ec 0c03 0005 0000 53f4 0c03     .....U.......S..
 c0356d8:	0006 0000 54b8 0c03 0007 0000 557c 0c03     .....T......|U..
 c0356e8:	0008 0000 542c 0c03 0009 0000 54f0 0c03     ....,T.......T..
 c0356f8:	000a 0000 55b4 0c03 0043 0000 549c 0c03     .....U..C....T..
 c035708:	0044 0000 5560 0c03 0045 0000 5624 0c03     D...`U..E...$V..
 c035718:	000b 0000 5448 0c03 000c 0000 550c 0c03     ....HT.......U..
 c035728:	000d 0000 55d0 0c03 000e 0000 5480 0c03     .....U.......T..
 c035738:	000f 0000 5544 0c03 0010 0000 5608 0c03     ....DU.......V..
 c035748:	002b 0000 5410 0c03 002c 0000 54d4 0c03     +....T..,....T..
 c035758:	002d 0000 5598 0c03 0000 0000 0000 0000     -....U..........
 c035768:	4541 2d53 3532 2d36 4343 004d 4541 2d53     AES-256-CCM.AES-
 c035778:	3931 2d32 4343 004d 4541 2d53 3231 2d38     192-CCM.AES-128-
 c035788:	4343 004d 4541 2d53 3532 2d36 4347 004d     CCM.AES-256-GCM.
 c035798:	4541 2d53 3931 2d32 4347 004d 4541 2d53     AES-192-GCM.AES-
 c0357a8:	3231 2d38 4347 004d 4541 2d53 3532 2d36     128-GCM.AES-256-
 c0357b8:	5443 0052 4541 2d53 3931 2d32 5443 0052     CTR.AES-192-CTR.
 c0357c8:	4541 2d53 3231 2d38 5443 0052 4541 2d53     AES-128-CTR.AES-
 c0357d8:	3532 2d36 464f 0042 4541 2d53 3931 2d32     256-OFB.AES-192-
 c0357e8:	464f 0042 4541 2d53 3231 2d38 464f 0042     OFB.AES-128-OFB.
 c0357f8:	4541 2d53 3532 2d36 4643 3142 3832 4100     AES-256-CFB128.A
 c035808:	5345 312d 3239 432d 4246 3231 0038 4541     ES-192-CFB128.AE
 c035818:	2d53 3231 2d38 4643 3142 3832 4100 5345     S-128-CFB128.AES
 c035828:	322d 3635 432d 4342 4100 5345 312d 3239     -256-CBC.AES-192
 c035838:	432d 4342 4100 5345 312d 3832 432d 4342     -CBC.AES-128-CBC
 c035848:	4100 5345 322d 3635 452d 4243 4100 5345     .AES-256-ECB.AES
 c035858:	312d 3239 452d 4243 4100 5345 312d 3832     -192-ECB.AES-128
 c035868:	452d 4243 0000 0000                         -ECB....

0c035870 <CSWTCH.2>:
 c035870:	5884 0c03 58b4 0c03 58e4 0c03 5914 0c03     .X...X...X...Y..
 c035880:	5944 0c03                                   DY..

0c035884 <mbedtls_sha1_info>:
 c035884:	0004 0000 5fe8 0c03 0014 0000 0040 0000     ....._......@...
 c035894:	8133 0c02 812f 0c02 812b 0c02 d941 0c02     3.../...+...A...
 c0358a4:	8113 0c02 8101 0c02 80fd 0c02 80f9 0c02     ................

0c0358b4 <mbedtls_sha224_info>:
 c0358b4:	0005 0000 6013 0c03 001c 0000 0040 0000     .....`......@...
 c0358c4:	817d 0c02 8179 0c02 8175 0c02 8169 0c02     }...y...u...i...
 c0358d4:	8151 0c02 813f 0c02 813b 0c02 8137 0c02     Q...?...;...7...

0c0358e4 <mbedtls_sha256_info>:
 c0358e4:	0006 0000 6040 0c03 0020 0000 0040 0000     ....@`.. ...@...
 c0358f4:	8183 0c02 8179 0c02 8175 0c02 816f 0c02     ....y...u...o...
 c035904:	8151 0c02 813f 0c02 813b 0c02 8137 0c02     Q...?...;...7...

0c035914 <mbedtls_sha384_info>:
 c035914:	0007 0000 606d 0c03 0030 0000 0080 0000     ....m`..0.......
 c035924:	81cd 0c02 81c9 0c02 81c5 0c02 81b9 0c02     ................
 c035934:	81a3 0c02 8191 0c02 818d 0c02 8189 0c02     ................

0c035944 <mbedtls_sha512_info>:
 c035944:	0008 0000 609a 0c03 0040 0000 0080 0000     .....`..@.......
 c035954:	81d3 0c02 81c9 0c02 81c5 0c02 81bf 0c02     ................
 c035964:	81a3 0c02 8191 0c02 818d 0c02 8189 0c02     ................
 c035974:	812b 0004 0021 812b 0004 0022 812b 0004     +...!.+...".+...
 c035984:	0023 812b 0004 001f 812b 0004 0020 812b     #.+.....+... .+.
 c035994:	0004 000a 1d55 0020 0000 0000               ....U. .....

0c0359a0 <oid_cipher_alg>:
 c0359a0:	5dd7 0c03 0005 0000 5ddd 0c03 5cb3 0c03     .].......]...\..
 c0359b0:	0021 0000 5de4 0c03 0008 0000 5ded 0c03     !....].......]..
 c0359c0:	5dfa 0c03 0025 0000 0000 0000 0000 0000     .]..%...........
	...

0c0359dc <oid_ecp_grp>:
 c0359dc:	5e07 0c03 0008 0000 4610 0c03 4610 0c03     .^.......F...F..
 c0359ec:	0001 0000 5974 0c03 0005 0000 45fc 0c03     ....tY.......E..
 c0359fc:	45fc 0c03 0002 0000 5e10 0c03 0008 0000     .E.......^......
 c035a0c:	45d8 0c03 45d8 0c03 0003 0000 597a 0c03     .E...E......zY..
 c035a1c:	0005 0000 45be 0c03 45be 0c03 0004 0000     .....E...E......
 c035a2c:	5980 0c03 0005 0000 45a4 0c03 45a4 0c03     .Y.......E...E..
 c035a3c:	0005 0000 5986 0c03 0005 0000 461a 0c03     .....Y.......F..
 c035a4c:	461a 0c03 000a 0000 598c 0c03 0005 0000     .F.......Y......
 c035a5c:	4606 0c03 4606 0c03 000b 0000 5992 0c03     .F...F.......Y..
 c035a6c:	0005 0000 45e2 0c03 45e2 0c03 000c 0000     .....E...E......
 c035a7c:	5e19 0c03 0009 0000 45ec 0c03 5e23 0c03     .^.......E..#^..
 c035a8c:	0006 0000 5e32 0c03 0009 0000 45c8 0c03     ....2^.......E..
 c035a9c:	5e3c 0c03 0007 0000 5e4b 0c03 0009 0000     <^......K^......
 c035aac:	45ae 0c03 5e55 0c03 0008 0000 0000 0000     .E..U^..........
	...

0c035acc <oid_md_alg>:
 c035acc:	5d79 0c03 0005 0000 5d7f 0c03 5cef 0c03     y].......]...\..
 c035adc:	0004 0000 5d87 0c03 0009 0000 5d91 0c03     .....].......]..
 c035aec:	5f1e 0c03 0005 0000 5d9b 0c03 0009 0000     ._.......]......
 c035afc:	5da5 0c03 5f51 0c03 0006 0000 5daf 0c03     .]..Q_.......]..
 c035b0c:	0009 0000 5db9 0c03 5f84 0c03 0007 0000     .....]..._......
 c035b1c:	5dc3 0c03 0009 0000 5dcd 0c03 5fb7 0c03     .].......]..._..
 c035b2c:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

0c035b44 <oid_md_hmac>:
 c035b44:	5cd8 0c03 0008 0000 5ce1 0c03 5cea 0c03     .\.......\...\..
 c035b54:	0004 0000 5cf5 0c03 0008 0000 5cfe 0c03     .....\.......\..
 c035b64:	5d09 0c03 0005 0000 5d16 0c03 0008 0000     .].......]......
 c035b74:	5d1f 0c03 5d2a 0c03 0006 0000 5d37 0c03     .]..*]......7]..
 c035b84:	0008 0000 5d40 0c03 5d4b 0c03 0007 0000     ....@]..K]......
 c035b94:	5d58 0c03 0008 0000 5d61 0c03 5d6c 0c03     X]......a]..l]..
 c035ba4:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

0c035bbc <oid_pk_alg>:
 c035bbc:	5e64 0c03 0009 0000 5e6e 0c03 5e7c 0c03     d^......n^..|^..
 c035bcc:	0001 0000 5e80 0c03 0007 0000 5e88 0c03     .....^.......^..
 c035bdc:	5e97 0c03 0002 0000 5ea6 0c03 0005 0000     .^.......^......
 c035bec:	5eac 0c03 5eb4 0c03 0003 0000 0000 0000     .^...^..........
	...

0c035c0c <oid_pkcs12_pbe_alg>:
 c035c0c:	5c48 0c03 000a 0000 5c53 0c03 5c73 0c03     H\......S\..s\..
 c035c1c:	2504 0000 5c90 0c03 000a 0000 5c9b 0c03     .%...\.......\..
 c035c2c:	5cbb 0c03 2304 0000 0000 0000 0000 0000     .\...#..........
	...
 c035c48:	862a 8648 0df7 0c01 0301 7000 6562 6957     *.H........pbeWi
 c035c58:	6874 4853 4141 646e 2d33 654b 5479 6972     thSHAAnd3-KeyTri
 c035c68:	6c70 4465 5345 432d 4342 5000 4542 7720     pleDES-CBC.PBE w
 c035c78:	7469 2068 4853 3141 6120 646e 3320 4b2d     ith SHA1 and 3-K
 c035c88:	7965 3320 4544 0053 862a 8648 0df7 0c01     ey 3DES.*.H.....
 c035c98:	0401 7000 6562 6957 6874 4853 4141 646e     ...pbeWithSHAAnd
 c035ca8:	2d32 654b 5479 6972 6c70 4465 5345 432d     2-KeyTripleDES-C
 c035cb8:	4342 5000 4542 7720 7469 2068 4853 3141     BC.PBE with SHA1
 c035cc8:	6120 646e 3220 4b2d 7965 3320 4544 0053      and 2-Key 3DES.
 c035cd8:	862a 8648 0df7 0702 6800 616d 5363 4148     *.H......hmacSHA
 c035ce8:	0031 4d48 4341 532d 4148 312d 2a00 4886     1.HMAC-SHA-1.*.H
 c035cf8:	f786 020d 0008 6d68 6361 4853 3241 3432     ......hmacSHA224
 c035d08:	4800 414d 2d43 4853 2d41 3232 0034 862a     .HMAC-SHA-224.*.
 c035d18:	8648 0df7 0902 6800 616d 5363 4148 3532     H......hmacSHA25
 c035d28:	0036 4d48 4341 532d 4148 322d 3635 2a00     6.HMAC-SHA-256.*
 c035d38:	4886 f786 020d 000a 6d68 6361 4853 3341     .H......hmacSHA3
 c035d48:	3438 4800 414d 2d43 4853 2d41 3833 0034     84.HMAC-SHA-384.
 c035d58:	862a 8648 0df7 0b02 6800 616d 5363 4148     *.H......hmacSHA
 c035d68:	3135 0032 4d48 4341 532d 4148 352d 3231     512.HMAC-SHA-512
 c035d78:	2b00 030e 1a02 6900 2d64 6873 3161 6000     .+.....id-sha1.`
 c035d88:	4886 6501 0403 0402 6900 2d64 6873 3261     .H.e.....id-sha2
 c035d98:	3432 6000 4886 6501 0403 0102 6900 2d64     24.`.H.e.....id-
 c035da8:	6873 3261 3635 6000 4886 6501 0403 0202     sha256.`.H.e....
 c035db8:	6900 2d64 6873 3361 3438 6000 4886 6501     .id-sha384.`.H.e
 c035dc8:	0403 0302 6900 2d64 6873 3561 3231 2b00     .....id-sha512.+
 c035dd8:	030e 0702 6400 7365 4243 0043 862a 8648     .....desCBC.*.H.
 c035de8:	0df7 0703 6400 7365 652d 6564 2d33 6263     .....des-ede3-cb
 c035df8:	0063 4544 2d53 4445 3345 432d 4342 2a00     c.DES-EDE3-CBC.*
 c035e08:	4886 3dce 0103 0001 862a ce48 033d 0701     .H.=....*.H.=...
 c035e18:	2b00 0324 0203 0108 0701 6200 6172 6e69     .+$........brain
 c035e28:	6f70 6c6f 3532 7236 0031 242b 0303 0802     pool256r1.+$....
 c035e38:	0101 000b 7262 6961 706e 6f6f 336c 3438     ....brainpool384
 c035e48:	3172 2b00 0324 0203 0108 0d01 6200 6172     r1.+$........bra
 c035e58:	6e69 6f70 6c6f 3135 7232 0031 862a 8648     inpool512r1.*.H.
 c035e68:	0df7 0101 0001 7372 4561 636e 7972 7470     ......rsaEncrypt
 c035e78:	6f69 006e 5352 0041 862a ce48 023d 0001     ion.RSA.*.H.=...
 c035e88:	6469 652d 5063 6275 696c 4b63 7965 4700     id-ecPublicKey.G
 c035e98:	6e65 7265 6369 4520 2043 656b 0079 812b     eneric EC key.+.
 c035ea8:	0104 000c 6469 652d 4463 0048 4345 6b20     ....id-ecDH.EC k
 c035eb8:	7965 6620 726f 4520 4443 0048 862a 8648     ey for ECDH.*.H.
 c035ec8:	0df7 0101 0005 6873 2d61 5731 7469 5268     ......sha-1WithR
 c035ed8:	4153 6e45 7263 7079 6974 6e6f 5200 4153     SAEncryption.RSA
 c035ee8:	7720 7469 2068 4853 3141 2a00 4886 f786      with SHA1.*.H..
 c035ef8:	010d 0e01 7300 6168 3232 5734 7469 5268     .....sha224WithR
 c035f08:	4153 6e45 7263 7079 6974 6e6f 5200 4153     SAEncryption.RSA
 c035f18:	7720 7469 2068 4853 2d41 3232 0034 862a      with SHA-224.*.
 c035f28:	8648 0df7 0101 000b 6873 3261 3635 6957     H.......sha256Wi
 c035f38:	6874 5352 4541 636e 7972 7470 6f69 006e     thRSAEncryption.
 c035f48:	5352 2041 6977 6874 5320 4148 322d 3635     RSA with SHA-256
 c035f58:	2a00 4886 f786 010d 0c01 7300 6168 3833     .*.H.......sha38
 c035f68:	5734 7469 5268 4153 6e45 7263 7079 6974     4WithRSAEncrypti
 c035f78:	6e6f 5200 4153 7720 7469 2068 4853 2d41     on.RSA with SHA-
 c035f88:	3833 0034 862a 8648 0df7 0101 000d 6873     384.*.H.......sh
 c035f98:	3561 3231 6957 6874 5352 4541 636e 7972     a512WithRSAEncry
 c035fa8:	7470 6f69 006e 5352 2041 6977 6874 5320     ption.RSA with S
 c035fb8:	4148 352d 3231 2b00 030e 1d02 2a00 4886     HA-512.+.....*.H
 c035fc8:	3dce 0104 6500 6463 6173 772d 7469 2d68     .=...ecdsa-with-
 c035fd8:	4853 3141 4500 4443 4153 7720 7469 2068     SHA1.ECDSA with 
 c035fe8:	4853 3141 2a00 4886 3dce 0304 0001 6365     SHA1.*.H.=....ec
 c035ff8:	7364 2d61 6977 6874 532d 4148 3232 0034     dsa-with-SHA224.
 c036008:	4345 5344 2041 6977 6874 5320 4148 3232     ECDSA with SHA22
 c036018:	0034 862a ce48 043d 0203 6500 6463 6173     4.*.H.=....ecdsa
 c036028:	772d 7469 2d68 4853 3241 3635 4500 4443     -with-SHA256.ECD
 c036038:	4153 7720 7469 2068 4853 3241 3635 2a00     SA with SHA256.*
 c036048:	4886 3dce 0304 0003 6365 7364 2d61 6977     .H.=....ecdsa-wi
 c036058:	6874 532d 4148 3833 0034 4345 5344 2041     th-SHA384.ECDSA 
 c036068:	6977 6874 5320 4148 3833 0034 862a ce48     with SHA384.*.H.
 c036078:	043d 0403 6500 6463 6173 772d 7469 2d68     =....ecdsa-with-
 c036088:	4853 3541 3231 4500 4443 4153 7720 7469     SHA512.ECDSA wit
 c036098:	2068 4853 3541 3231 2a00 4886 f786 010d     h SHA512.*.H....
 c0360a8:	0a01 5200 4153 5353 2d41 5350 0053 6e61     ...RSASSA-PSS.an
 c0360b8:	5079 6c6f 6369 0079 6e41 2079 6f50 696c     yPolicy.Any Poli
 c0360c8:	7963 2b00 0106 0505 0307 0001 6469 6b2d     cy.+........id-k
 c0360d8:	2d70 6573 7672 7265 7541 6874 5400 534c     p-serverAuth.TLS
 c0360e8:	5720 6265 5320 7265 6576 2072 7541 6874      Web Server Auth
 c0360f8:	6e65 6974 6163 6974 6e6f 2b00 0106 0505     entication.+....
 c036108:	0307 0002 6469 6b2d 2d70 6c63 6569 746e     ....id-kp-client
 c036118:	7541 6874 5400 534c 5720 6265 4320 696c     Auth.TLS Web Cli
 c036128:	6e65 2074 7541 6874 6e65 6974 6163 6974     ent Authenticati
 c036138:	6e6f 2b00 0106 0505 0307 0003 6469 6b2d     on.+........id-k
 c036148:	2d70 6f63 6564 6953 6e67 6e69 0067 6f43     p-codeSigning.Co
 c036158:	6564 5320 6769 696e 676e 2b00 0106 0505     de Signing.+....
 c036168:	0307 0004 6469 6b2d 2d70 6d65 6961 506c     ....id-kp-emailP
 c036178:	6f72 6574 7463 6f69 006e 2d45 616d 6c69     rotection.E-mail
 c036188:	5020 6f72 6574 7463 6f69 006e 062b 0501      Protection.+...
 c036198:	0705 0803 6900 2d64 706b 742d 6d69 5365     .....id-kp-timeS
 c0361a8:	6174 706d 6e69 0067 6954 656d 5320 6174     tamping.Time Sta
 c0361b8:	706d 6e69 0067 062b 0501 0705 0903 6900     mping.+........i
 c0361c8:	2d64 706b 4f2d 5343 5350 6769 696e 676e     d-kp-OCSPSigning
 c0361d8:	4f00 5343 2050 6953 6e67 6e69 0067 062b     .OCSP Signing.+.
 c0361e8:	0401 8201 25e4 0001 6469 6b2d 2d70 6977     .....%..id-kp-wi
 c0361f8:	7573 2d6e 6166 2d6e 6564 6976 6563 5700     sun-fan-device.W
 c036208:	2d69 5553 204e 6c41 696c 6e61 6563 4620     i-SUN Alliance F
 c036218:	6569 646c 4120 6572 2061 654e 7774 726f     ield Area Networ
 c036228:	206b 4628 4e41 0029 1d55 0013 6469 632d     k (FAN).U...id-c
 c036238:	2d65 6162 6973 4363 6e6f 7473 6172 6e69     e-basicConstrain
 c036248:	7374 4200 7361 6369 4320 6e6f 7473 6172     ts.Basic Constra
 c036258:	6e69 7374 5500 0f1d 6900 2d64 6563 6b2d     ints.U...id-ce-k
 c036268:	7965 7355 6761 0065 1d55 0025 6469 632d     eyUsage.U.%.id-c
 c036278:	2d65 7865 4b74 7965 7355 6761 0065 7845     e-extKeyUsage.Ex
 c036288:	6574 646e 6465 4b20 7965 5520 6173 6567     tended Key Usage
 c036298:	5500 111d 6900 2d64 6563 732d 6275 656a     .U...id-ce-subje
 c0362a8:	7463 6c41 4e74 6d61 0065 7553 6a62 6365     ctAltName.Subjec
 c0362b8:	2074 6c41 2074 614e 656d 6000 4886 8601     t Alt Name.`.H..
 c0362c8:	42f8 0101 6900 2d64 656e 7374 6163 6570     .B...id-netscape
 c0362d8:	632d 7265 7474 7079 0065 654e 7374 6163     -certtype.Netsca
 c0362e8:	6570 4320 7265 6974 6966 6163 6574 5420     pe Certificate T
 c0362f8:	7079 0065 1d55 0020 6469 632d 2d65 6563     ype.U. .id-ce-ce
 c036308:	7472 6669 6369 7461 5065 6c6f 6369 6569     rtificatePolicie
 c036318:	0073 6543 7472 6669 6369 7461 2065 6f50     s.Certificate Po
 c036328:	696c 6963 7365 5500 0304 6900 2d64 7461     licies.U...id-at
 c036338:	632d 6d6f 6f6d 4e6e 6d61 0065 6f43 6d6d     -commonName.Comm
 c036348:	6e6f 4e20 6d61 0065 4e43 5500 0604 6900     on Name.CN.U...i
 c036358:	2d64 7461 632d 756f 746e 7972 614e 656d     d-at-countryName
 c036368:	4300 756f 746e 7972 5500 0704 6900 2d64     .Country.U...id-
 c036378:	7461 6c2d 636f 6c61 7469 0079 6f4c 6163     at-locality.Loca
 c036388:	696c 7974 4c00 5500 0804 6900 2d64 7461     lity.L.U...id-at
 c036398:	732d 6174 6574 5300 6174 6574 5300 0054     -state.State.ST.
 c0363a8:	0455 000a 6469 612d 2d74 726f 6167 696e     U...id-at-organi
 c0363b8:	617a 6974 6e6f 614e 656d 4f00 6772 6e61     zationName.Organ
 c0363c8:	7a69 7461 6f69 006e 0455 000b 6469 612d     ization.U...id-a
 c0363d8:	2d74 726f 6167 696e 617a 6974 6e6f 6c61     t-organizational
 c0363e8:	6e55 7469 614e 656d 4f00 6772 5520 696e     UnitName.Org Uni
 c0363f8:	0074 554f 2a00 4886 f786 010d 0109 6500     t.OU.*.H.......e
 c036408:	616d 6c69 6441 7264 7365 0073 2d45 616d     mailAddress.E-ma
 c036418:	6c69 6120 6464 6572 7373 5500 0504 6900     il address.U...i
 c036428:	2d64 7461 732d 7265 6169 4e6c 6d75 6562     d-at-serialNumbe
 c036438:	0072 6553 6972 6c61 6e20 6d75 6562 0072     r.Serial number.
 c036448:	0455 0010 6469 612d 2d74 6f70 7473 6c61     U...id-at-postal
 c036458:	6441 7264 7365 0073 6f50 7473 6c61 6120     Address.Postal a
 c036468:	6464 6572 7373 5500 1104 6900 2d64 7461     ddress.U...id-at
 c036478:	702d 736f 6174 436c 646f 0065 6f50 7473     -postalCode.Post
 c036488:	6c61 6320 646f 0065 0455 0004 6469 612d     al code.U...id-a
 c036498:	2d74 7573 4e72 6d61 0065 7553 6e72 6d61     t-surName.Surnam
 c0364a8:	0065 4e53 5500 2a04 6900 2d64 7461 672d     e.SN.U.*.id-at-g
 c0364b8:	7669 6e65 614e 656d 4700 7669 6e65 6e20     ivenName.Given n
 c0364c8:	6d61 0065 4e47 5500 2b04 6900 2d64 7461     ame.GN.U.+.id-at
 c0364d8:	692d 696e 6974 6c61 0073 6e49 7469 6169     -initials.Initia
 c0364e8:	736c 5500 2c04 6900 2d64 7461 672d 6e65     ls.U.,.id-at-gen
 c0364f8:	7265 7461 6f69 516e 6175 696c 6966 7265     erationQualifier
 c036508:	4700 6e65 7265 7461 6f69 206e 7571 6c61     .Generation qual
 c036518:	6669 6569 0072 0455 000c 6469 612d 2d74     ifier.U...id-at-
 c036528:	6974 6c74 0065 6954 6c74 0065 0455 002e     title.Title.U...
 c036538:	6469 612d 2d74 6e64 7551 6c61 6669 6569     id-at-dnQualifie
 c036548:	0072 6944 7473 6e69 7567 7369 6568 2064     r.Distinguished 
 c036558:	614e 656d 7120 6175 696c 6966 7265 5500     Name qualifier.U
 c036568:	4104 6900 2d64 7461 702d 6573 6475 6e6f     .A.id-at-pseudon
 c036578:	6d79 5000 6573 6475 6e6f 6d79 0900 2692     ym.Pseudonym...&
 c036588:	9389 2cf2 0164 0019 6469 642d 6d6f 6961     ...,d...id-domai
 c036598:	436e 6d6f 6f70 656e 746e 4400 6d6f 6961     nComponent.Domai
 c0365a8:	206e 6f63 706d 6e6f 6e65 0074 4344 5500     n component.DC.U
 c0365b8:	2d04 6900 2d64 7461 752d 696e 7571 4965     .-.id-at-uniqueI
 c0365c8:	6564 746e 6669 6569 0072 6e55 7169 6575     dentifier.Unique
 c0365d8:	4920 6564 746e 6669 6569 0072 7250 636f      Identifier.Proc
 c0365e8:	542d 7079 3a65 3420 452c 434e 5952 5450     -Type: 4,ENCRYPT
 c0365f8:	4445 0000                                   ED..

0c0365fc <CSWTCH.8>:
 c0365fc:	66a4 0c03 6644 0c03 6674 0c03 6614 0c03     .f..Df..tf...f..
 c03660c:	6365 656b 2e79 0051                         eckey.Q.

0c036614 <mbedtls_ecdsa_info>:
 c036614:	0004 0000 66e8 0c03 87e9 0c02 880d 0c02     .....f..........
 c036624:	89fd 0c02 89b1 0c02 0000 0000 0000 0000     ................
 c036634:	8985 0c02 8989 0c02 899f 0c02 87ed 0c02     ................

0c036644 <mbedtls_eckey_info>:
 c036644:	0002 0000 66f4 0c03 87e9 0c02 87dd 0c02     .....f..........
 c036654:	8a1d 0c02 89b5 0c02 0000 0000 0000 0000     ................
 c036664:	8985 0c02 896f 0c02 895d 0c02 87ed 0c02     ....o...].......

0c036674 <mbedtls_eckeydh_info>:
 c036674:	0003 0000 66ee 0c03 87e9 0c02 8801 0c02     .....f..........
	...
 c036694:	8985 0c02 896f 0c02 895d 0c02 87ed 0c02     ....o...].......

0c0366a4 <mbedtls_rsa_info>:
 c0366a4:	0001 0000 5e7c 0c03 8845 0c02 87ab 0c02     ....|^..E.......
 c0366b4:	8911 0c02 88d9 0c02 8895 0c02 8851 0c02     ............Q...
 c0366c4:	8841 0c02 8827 0c02 8815 0c02 87b9 0c02     A...'...........
 c0366d4:	7372 2e61 004e 7372 2e61 0045 5352 2d41     rsa.N.rsa.E.RSA-
 c0366e4:	6c61 0074 4345 5344 0041 4345 445f 0048     alt.ECDSA.EC_DH.
 c0366f4:	4345 2a00 4886 f786 010d 0c05 2d00 2d2d     EC.*.H.......---
 c036704:	2d2d 4e45 2044 5352 2041 5250 5649 5441     --END RSA PRIVAT
 c036714:	2045 454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d     E KEY-----.-----
 c036724:	4542 4947 204e 5352 2041 5250 5649 5441     BEGIN RSA PRIVAT
 c036734:	2045 454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d     E KEY-----.-----
 c036744:	4e45 2044 4345 5020 4952 4156 4554 4b20     END EC PRIVATE K
 c036754:	5945 2d2d 2d2d 002d 2d2d 2d2d 422d 4745     EY-----.-----BEG
 c036764:	4e49 4520 2043 5250 5649 5441 2045 454b     IN EC PRIVATE KE
 c036774:	2d59 2d2d 2d2d 2d00 2d2d 2d2d 4e45 2044     Y-----.-----END 
 c036784:	5250 5649 5441 2045 454b 2d59 2d2d 2d2d     PRIVATE KEY-----
 c036794:	2d00 2d2d 2d2d 4542 4947 204e 5250 5649     .-----BEGIN PRIV
 c0367a4:	5441 2045 454b 2d59 2d2d 2d2d 2d00 2d2d     ATE KEY-----.---
 c0367b4:	2d2d 4e45 2044 4e45 5243 5059 4554 2044     --END ENCRYPTED 
 c0367c4:	5250 5649 5441 2045 454b 2d59 2d2d 2d2d     PRIVATE KEY-----
 c0367d4:	2d00 2d2d 2d2d 4542 4947 204e 4e45 5243     .-----BEGIN ENCR
 c0367e4:	5059 4554 2044 5250 5649 5441 2045 454b     YPTED PRIVATE KE
 c0367f4:	2d59 2d2d 2d2d 2d00 2d2d 2d2d 4e45 2044     Y-----.-----END 
 c036804:	5352 2041 5550 4c42 4349 4b20 5945 2d2d     RSA PUBLIC KEY--
 c036814:	2d2d 002d 2d2d 2d2d 422d 4745 4e49 5220     ---.-----BEGIN R
 c036824:	4153 5020 4255 494c 2043 454b 2d59 2d2d     SA PUBLIC KEY---
 c036834:	2d2d 2d00 2d2d 2d2d 4e45 2044 5550 4c42     --.-----END PUBL
 c036844:	4349 4b20 5945 2d2d 2d2d 002d 2d2d 2d2d     IC KEY-----.----
 c036854:	422d 4745 4e49 5020 4255 494c 2043 454b     -BEGIN PUBLIC KE
 c036864:	2d59 2d2d 2d2d 2a00 4886 f786 010d 010c     Y-----.*.H......
 c036874:	0001 862a 8648 0df7 0501 000d 862a ce48     ..*.H.......*.H.
 c036884:	013d 0001                                   =...

0c036888 <CSWTCH.326>:
 c036888:	1513 1817 1a19 1c1b 121d 1614                .............

0c036895 <CSWTCH.328>:
 c036895:	010a 020b 030c 0504 0706 0908 000d           ...............

0c0368a4 <CSWTCH.334>:
 c0368a4:	5884 0c03 0000 0000 0000 0000 58b4 0c03     .X...........X..
 c0368b4:	58e4 0c03 5914 0c03 5944 0c03               .X...Y..DY..

0c0368c0 <CSWTCH.336>:
 c0368c0:	4010 4040 0040 4000 8040 0280 0503 0b07     .@@@@..@@.......
 c0368d0:	110d 1713 1f1d 2925 2f2b 3b35 433d 4947     ......%)+/5;=CGI
 c0368e0:	534f 6159 6765 6d6b 7f71 8983 958b 9d97     OSYaegkmq.......
 c0368f0:	a7a3 b3ad bfb5 c5c1 d3c7 e3df e9e5 f1ef     ................
 c036900:	00fb 0000 0000 0000                         ........

0c036908 <K>:
 c036908:	ae22 d728 2f98 428a 65cd 23ef 4491 7137     ".(../.B.e.#.D7q
 c036918:	3b2f ec4d fbcf b5c0 dbbc 8189 dba5 e9b5     /;M.............
 c036928:	b538 f348 c25b 3956 d019 b605 11f1 59f1     8.H.[.V9.......Y
 c036938:	4f9b af19 82a4 923f 8118 da6d 5ed5 ab1c     .O....?...m..^..
 c036948:	0242 a303 aa98 d807 6fbe 4570 5b01 1283     B........opE.[..
 c036958:	b28c 4ee4 85be 2431 b4e2 d5ff 7dc3 550c     ...N..1$.....}.U
 c036968:	896f f27b 5d74 72be 96b1 3b16 b1fe 80de     o.{.t].r...;....
 c036978:	1235 25c7 06a7 9bdc 2694 cf69 f174 c19b     5..%.....&i.t...
 c036988:	4ad2 9ef1 69c1 e49b 25e3 384f 4786 efbe     .J...i...%O8.G..
 c036998:	d5b5 8b8c 9dc6 0fc1 9c65 77ac a1cc 240c     ........e..w...$
 c0369a8:	0275 592b 2c6f 2de9 e483 6ea6 84aa 4a74     u.+Yo,.-...n..tJ
 c0369b8:	fbd4 bd41 a9dc 5cb0 53b5 8311 88da 76f9     ..A....\.S.....v
 c0369c8:	dfab ee66 5152 983e 3210 2db4 c66d a831     ..f.RQ>..2.-m.1.
 c0369d8:	213f 98fb 27c8 b003 0ee4 beef 7fc7 bf59     ?!...'........Y.
 c0369e8:	8fc2 3da8 0bf3 c6e0 a725 930a 9147 d5a7     ...=....%...G...
 c0369f8:	826f e003 6351 06ca 6e70 0a0e 2967 1429     o...Qc..pn..g)).
 c036a08:	2ffc 46d2 0a85 27b7 c926 5c26 2138 2e1b     ./.F...'&.&\8!..
 c036a18:	2aed 5ac4 6dfc 4d2c b3df 9d95 0d13 5338     .*.Z.m,M......8S
 c036a28:	63de 8baf 7354 650a b2a8 3c77 0abb 766a     .c..Ts.e..w<..jv
 c036a38:	aee6 47ed c92e 81c2 353b 1482 2c85 9272     ...G....;5...,r.
 c036a48:	0364 4cf1 e8a1 a2bf 3001 bc42 664b a81a     d..L.....0B.Kf..
 c036a58:	9791 d0f8 8b70 c24b be30 0654 51a3 c76c     ....p.K.0.T..Ql.
 c036a68:	5218 d6ef e819 d192 a910 5565 0624 d699     .R........eU$...
 c036a78:	202a 5771 3585 f40e d1b8 32bb a070 106a     * qW.5.....2p.j.
 c036a88:	d0c8 b8d2 c116 19a4 ab53 5141 6c08 1e37     ........S.AQ.l7.
 c036a98:	eb99 df8e 774c 2748 48a8 e19b bcb5 34b0     ....LwH'.H.....4
 c036aa8:	5a63 c5c9 0cb3 391c 8acb e341 aa4a 4ed8     cZ.....9..A.J..N
 c036ab8:	e373 7763 ca4f 5b9c b8a3 d6b2 6ff3 682e     s.cwO..[.....o.h
 c036ac8:	b2fc 5def 82ee 748f 2f60 4317 636f 78a5     ...]...t`/.Coc.x
 c036ad8:	ab72 a1f0 7814 84c8 39ec 1a64 0208 8cc7     r....x...9d.....
 c036ae8:	1e28 2363 fffa 90be bde9 de82 6ceb a450     (.c#.........lP.
 c036af8:	7915 b2c6 a3f7 bef9 532b e372 78f2 c671     .y......+Sr..xq.
 c036b08:	619c ea26 3ece ca27 c207 21c0 b8c7 d186     .a&..>'....!....
 c036b18:	eb1e cde0 7dd6 eada d178 ee6e 4f7f f57d     .....}..x.n..O}.
 c036b28:	6fba 7217 67aa 06f0 98a6 a2c8 7dc5 0a63     .o.r.g.......}c.
 c036b38:	0dae bef9 9804 113f 471b 131c 0b35 1b71     ......?..G..5.q.
 c036b48:	7d84 2304 77f5 28db 2493 40c7 ab7b 32ca     .}.#.w.(.$.@{..2
 c036b58:	bebc 15c9 be0a 3c9e 0d4c 9c10 67c4 431d     .......<L....g.C
 c036b68:	42b6 cb3e d4be 4cc5 7e2a fc65 299c 597f     .B>....L*~e..).Y
 c036b78:	faec 3ad6 6fab 5fcb 5817 4a47 198c 6c44     ...:.o._.XGJ..Dl

0c036b88 <CSWTCH.8>:
 c036b88:	1817 1d19 001e                              ......

0c036b8e <CSWTCH.5>:
 c036b8e:	004c 0200 0178 0290 0000                    L...x.....

0c036b98 <sfid_func_table>:
 c036b98:	0009 0c03 006d 0c03 00a9 0c03 00ed 0c03     ....m...........
 c036ba8:	0121 0c03 0149 0c03 0171 0c03 019d 0c03     !...I...q.......
 c036bb8:	01d3 0c03 01f7 0c03 f641 0c02 f6a3 0c02     ........A.......
 c036bc8:	f6f5 0c02 f761 0c02 f7cd 0c02 f89b 0c02     ....a...........
 c036bd8:	f833 0c02 fb93 0c02 fbe9 0c02 fc3b 0c02     3...........;...
 c036be8:	fca1 0c02 fcfb 0c02 fd4b 0c02 021b 0c03     ........K.......
 c036bf8:	0289 0c03 02f7 0c03 034b 0c03 03b1 0c03     ........K.......
 c036c08:	040d 0c03 f275 0c02 f2f1 0c02 f4ad 0c02     ....u...........
 c036c18:	f4fb 0c02 f541 0c02 f5d9 0c02 f8eb 0c02     ....A...........
 c036c28:	f92d 0c02 f969 0c02 f9bd 0c02 fa13 0c02     -...i...........
 c036c38:	faad 0c02 fb1f 0c02 fb3b 0c02               ........;...

0c036c44 <aIterate.5835>:
 c036c44:	0101 0402                                   ....

0c036c48 <memory_data_list>:
	...
 c036c58:	0800 3003 0000 0000 0000 0000 0000 0000     ...0............
 c036c68:	0800 3003 1000 3003 c560 0c01 c560 0c01     ...0...0`...`...
 c036c78:	c560 0c01 c560 0c01 1020 3003 1020 3003     `...`... ..0 ..0
 c036c88:	1020 3003 1040 3003 1080 3003 1a80 3003      ..0@..0...0...0
 c036c98:	c560 0c01 c560 0c01 c560 0c01 c560 0c01     `...`...`...`...
 c036ca8:	1a80 3003 1a80 3003 1a80 3003 1aa0 3003     ...0...0...0...0
 c036cb8:	1b00 3003 2000 3003 c560 0c01 c560 0c01     ...0. .0`...`...
 c036cc8:	c560 0c01 c560 0c01 2000 3003 2000 3003     `...`.... .0. .0
 c036cd8:	2000 3003 2020 3003 2080 3003 4080 3003     . .0  .0. .0.@.0
 c036ce8:	c560 0c01 c560 0c01 c560 0c01 c560 0c01     `...`...`...`...
 c036cf8:	4080 3003 4080 3003 4080 3003 40a0 3003     .@.0.@.0.@.0.@.0
 c036d08:	4100 3003 4b00 3003                         .A.0.K.0

0c036d10 <static_data_list>:
 c036d10:	0000 0000 0005 0000 00ff 0000 b609 0c01     ................
 c036d20:	0100 0000 0007 0000 007f 0000 3965 0c03     ............e9..
 c036d30:	0101 0000 0007 0000 007f 0000 348d 0c03     .............4..
 c036d40:	0103 0000 0007 0000 007f 0000 fddd 0c02     ................
 c036d50:	0105 0000 0007 0000 007f 0000 2cb1 0c03     .............,..

0c036d60 <__FUNCTION__.10745>:
 c036d60:	6674 5f6d 7073 5f6d 7263 6165 6574 635f     tfm_spm_create_c
 c036d70:	6e6f 5f6e 6168 646e 656c                     onn_handle.

0c036d7b <__FUNCTION__.10758>:
 c036d7b:	6674 5f6d 7073 5f6d 7266 6565 635f 6e6f     tfm_spm_free_con
 c036d8b:	5f6e 6168 646e 656c                          n_handle.

0c036d94 <__FUNCTION__.10766>:
 c036d94:	6674 5f6d 7073 5f6d 6573 5f74 6872 6e61     tfm_spm_set_rhan
 c036da4:	6c64 0065                                   dle.

0c036da8 <__FUNCTION__.10774>:
 c036da8:	6674 5f6d 7073 5f6d 6567 5f74 6872 6e61     tfm_spm_get_rhan
 c036db8:	6c64 0065                                   dle.

0c036dbc <__FUNCTION__.10784>:
 c036dbc:	6674 5f6d 7073 5f6d 6567 5f74 6573 7672     tfm_spm_get_serv
 c036dcc:	6369 5f65 7962 735f 6769 616e 006c          ice_by_signal.

0c036dda <__FUNCTION__.10819>:
 c036dda:	6674 5f6d 7073 5f6d 6863 6365 5f6b 6c63     tfm_spm_check_cl
 c036dea:	6569 746e 765f 7265 6973 6e6f                ient_version.

0c036df7 <__FUNCTION__.10834>:
 c036df7:	6674 5f6d 7073 5f6d 6567 5f74 736d 5f67     tfm_spm_get_msg_
 c036e07:	7562 6666 7265 665f 6f72 5f6d 6f63 6e6e     buffer_from_conn
 c036e17:	685f 6e61 6c64 0065                         _handle.

0c036e1f <__FUNCTION__.10849>:
 c036e1f:	6674 5f6d 7073 5f6d 6966 6c6c 6d5f 6773     tfm_spm_fill_msg
	...

0c036e30 <__FUNCTION__.10868>:
 c036e30:	6674 5f6d 7073 5f6d 6573 646e 655f 6576     tfm_spm_send_eve
 c036e40:	746e 0000                                   nt..

0c036e44 <service_db>:
 c036e44:	6f94 0c03 0100 0000 0010 0000 0060 0000     .o..........`...
 c036e54:	0001 0000 0001 0000 0001 0000 6fa0 0c03     .............o..
 c036e64:	0100 0000 0020 0000 0061 0000 0001 0000     .... ...a.......
 c036e74:	0001 0000 0001 0000 6fac 0c03 0100 0000     .........o......
 c036e84:	0040 0000 0062 0000 0001 0000 0001 0000     @...b...........
 c036e94:	0001 0000 6fbd 0c03 0100 0000 0080 0000     .....o..........
 c036ea4:	0063 0000 0001 0000 0001 0000 0001 0000     c...............
 c036eb4:	6fcc 0c03 0100 0000 0100 0000 0064 0000     .o..........d...
 c036ec4:	0001 0000 0001 0000 0001 0000 6fe0 0c03     .............o..
 c036ed4:	0101 0000 0010 0000 0070 0000 0001 0000     ........p.......
 c036ee4:	0001 0000 0001 0000 6fec 0c03 0101 0000     .........o......
 c036ef4:	0020 0000 0071 0000 0001 0000 0001 0000      ...q...........
 c036f04:	0001 0000 6ff8 0c03 0101 0000 0040 0000     .....o......@...
 c036f14:	0072 0000 0001 0000 0001 0000 0001 0000     r...............
 c036f24:	7009 0c03 0101 0000 0080 0000 0073 0000     .p..........s...
 c036f34:	0001 0000 0001 0000 0001 0000 7018 0c03     .............p..
 c036f44:	0103 0000 0010 0000 0080 0000 0001 0000     ................
 c036f54:	0001 0000 0001 0000 7023 0c03 0105 0000     ........#p......
 c036f64:	0010 0000 0020 0000 0001 0000 0001 0000     .... ...........
 c036f74:	0001 0000 7038 0c03 0105 0000 0020 0000     ....8p...... ...
 c036f84:	0021 0000 0001 0000 0001 0000 0001 0000     !...............
 c036f94:	4654 5f4d 5353 5f54 4553 0054 4654 5f4d     TFM_SST_SET.TFM_
 c036fa4:	5353 5f54 4547 0054 4654 5f4d 5353 5f54     SST_GET.TFM_SST_
 c036fb4:	4547 5f54 4e49 4f46 5400 4d46 535f 5453     GET_INFO.TFM_SST
 c036fc4:	525f 4d45 564f 0045 4654 5f4d 5353 5f54     _REMOVE.TFM_SST_
 c036fd4:	4547 5f54 5553 5050 524f 0054 4654 5f4d     GET_SUPPORT.TFM_
 c036fe4:	5449 5f53 4553 0054 4654 5f4d 5449 5f53     ITS_SET.TFM_ITS_
 c036ff4:	4547 0054 4654 5f4d 5449 5f53 4547 5f54     GET.TFM_ITS_GET_
 c037004:	4e49 4f46 5400 4d46 495f 5354 525f 4d45     INFO.TFM_ITS_REM
 c037014:	564f 0045 4654 5f4d 5243 5059 4f54 5400     OVE.TFM_CRYPTO.T
 c037024:	4d46 415f 5454 5345 5f54 4547 5f54 4f54     FM_ATTEST_GET_TO
 c037034:	454b 004e 4654 5f4d 5441 4554 5453 475f     KEN.TFM_ATTEST_G
 c037044:	5445 545f 4b4f 4e45 535f 5a49 0045 7341     ET_TOKEN_SIZE.As
 c037054:	6573 7472 253a 3a73 6425 5300 6769 616e     sert:%s:%d.Signa
 c037064:	7574 6572 0031 6f4f 7370 2e2e 202e 6553     ture1.Oops... Se
 c037074:	7563 6572 6620 7561 746c 2121 2021 6f59     cure fault!!! Yo
 c037084:	2775 6572 6e20 746f 6720 696f 676e 6120     u're not going a
 c037094:	796e 6877 7265 2165 5300 6365 7275 2065     nywhere!.Secure 
 c0370a4:	6d69 6761 2065 6e69 7469 6169 696c 697a     image initializi
 c0370b4:	676e 0021                                   ng!.

0c0370b8 <__FUNCTION__.5288>:
 c0370b8:	6674 5f6d 6f63 6572 6c5f 676f 705f 7475     tfm_core_log_put
 c0370c8:	0073 5b1b 3b31 3433 5b6d 6553 2063 6854     s..[1;34m[Sec Th
 c0370d8:	6572 6461 205d 1b00 305b 0d6d 000a          read] ..[0m...

0c0370e6 <__FUNCTION__.5176>:
 c0370e6:	6674 5f6d 6f63 6572 755f 6974 5f6c 656d     tfm_core_util_me
 c0370f6:	636d 7970                                    mcpy.

0c0370fb <__FUNCTION__.10119>:
 c0370fb:	6674 5f6d 736e 6d70 745f 7268 6165 5f64     tfm_nspm_thread_
 c03710b:	6e65 7274 0079 6e55 6e6b 776f 206e 5653     entry.Unknown SV
 c03711b:	2043 756e 626d 7265 7220 7165 6575 7473     C number request
 c03712b:	6465 0021                                   ed!.

0c03712f <__FUNCTION__.10736>:
 c03712f:	6674 5f6d 7673 6163 6c6c 705f 6173 765f     tfm_svcall_psa_v
 c03713f:	7265 6973 6e6f                               ersion.

0c037146 <__FUNCTION__.10747>:
 c037146:	6674 5f6d 7673 6163 6c6c 705f 6173 635f     tfm_svcall_psa_c
 c037156:	6e6f 656e 7463                               onnect.

0c03715d <__FUNCTION__.10767>:
 c03715d:	6674 5f6d 7673 6163 6c6c 705f 6173 635f     tfm_svcall_psa_c
 c03716d:	6c61 006c                                   all.

0c037171 <__FUNCTION__.10782>:
 c037171:	6674 5f6d 7673 6163 6c6c 705f 6173 635f     tfm_svcall_psa_c
 c037181:	6f6c 6573                                    lose.

0c037186 <__FUNCTION__.10790>:
 c037186:	6674 5f6d 7673 6163 6c6c 705f 6173 775f     tfm_svcall_psa_w
 c037196:	6961 0074                                   ait.

0c03719a <__FUNCTION__.10801>:
 c03719a:	6674 5f6d 7673 6163 6c6c 705f 6173 675f     tfm_svcall_psa_g
 c0371aa:	7465                                         et.

0c0371ad <__FUNCTION__.10809>:
 c0371ad:	6674 5f6d 7673 6163 6c6c 705f 6173 735f     tfm_svcall_psa_s
 c0371bd:	7465 725f 6168 646e 656c                     et_rhandle.

0c0371c8 <__FUNCTION__.10822>:
 c0371c8:	6674 5f6d 7673 6163 6c6c 705f 6173 725f     tfm_svcall_psa_r
 c0371d8:	6165 0064                                   ead.

0c0371dc <__FUNCTION__.10831>:
 c0371dc:	6674 5f6d 7673 6163 6c6c 705f 6173 735f     tfm_svcall_psa_s
 c0371ec:	696b 0070                                   kip.

0c0371f0 <__FUNCTION__.10843>:
 c0371f0:	6674 5f6d 7673 6163 6c6c 705f 6173 775f     tfm_svcall_psa_w
 c037200:	6972 6574                                    rite.

0c037205 <__FUNCTION__.10849>:
 c037205:	7075 6164 6574 635f 6c61 656c 5f72 756f     update_caller_ou
 c037215:	7674 6365 6c5f 6e65                          tvec_len.

0c03721e <__FUNCTION__.10863>:
 c03721e:	6674 5f6d 7673 6163 6c6c 705f 6173 725f     tfm_svcall_psa_r
 c03722e:	7065 796c                                    eply.

0c037233 <__FUNCTION__.10900>:
 c037233:	6674 5f6d 7673 6163 6c6c 705f 6173 655f     tfm_svcall_psa_e
 c037243:	696f 0000                                    oi...

0c037248 <tfm_core_irq_signals>:
	...

0c037258 <tfm_core_irq_signals_count>:
 c037258:	0000 0000                                   ....

0c03725c <__FUNCTION__.10255>:
 c03725c:	6674 5f6d 6874 6472 735f 7465 735f 6174     tfm_thrd_set_sta
 c03726c:	7574 0073                                   tus.

0c037270 <__FUNCTION__.10263>:
 c037270:	6674 5f6d 6874 6472 735f 6174 7472 735f     tfm_thrd_start_s
 c037280:	6863 6465 6c75 7265                          cheduler.

0c037289 <__FUNCTION__.10278>:
 c037289:	6674 5f6d 6874 6472 635f 6e6f 6574 7478     tfm_thrd_context
 c037299:	735f 6977 6374 0068                         _switch.

0c0372a1 <__FUNCTION__.9629>:
 c0372a1:	6674 5f6d 7665 6e65 5f74 6177 7469           tfm_event_wait.

0c0372b0 <__FUNCTION__.9635>:
 c0372b0:	6674 5f6d 7665 6e65 5f74 6177 656b 0000     tfm_event_wake..

0c0372c0 <__EH_FRAME_BEGIN__>:
 c0372c0:	0000 0000                                   ....

Disassembly of section .gnu.sgstubs:

0c038c80 <tfm_psa_framework_version_veneer>:
 c038c80:	e97f e97f 	sg
 c038c84:	f7e2 bcd0 	b.w	c01b628 <__acle_se_tfm_psa_framework_version_veneer>

0c038c88 <TZ_InitContextSystem_S>:
 c038c88:	e97f e97f 	sg
 c038c8c:	f7fa bc53 	b.w	c033536 <__acle_se_TZ_InitContextSystem_S>

0c038c90 <TZ_LoadContext_S>:
 c038c90:	e97f e97f 	sg
 c038c94:	f7fa bc67 	b.w	c033566 <__acle_se_TZ_LoadContext_S>

0c038c98 <tfm_psa_version_veneer>:
 c038c98:	e97f e97f 	sg
 c038c9c:	f7e2 bcf2 	b.w	c01b684 <__acle_se_tfm_psa_version_veneer>

0c038ca0 <tfm_psa_close_veneer>:
 c038ca0:	e97f e97f 	sg
 c038ca4:	f7e2 bd78 	b.w	c01b798 <__acle_se_tfm_psa_close_veneer>

0c038ca8 <TZ_FreeModuleContext_S>:
 c038ca8:	e97f e97f 	sg
 c038cac:	f7fa bc53 	b.w	c033556 <__acle_se_TZ_FreeModuleContext_S>

0c038cb0 <tfm_psa_connect_veneer>:
 c038cb0:	e97f e97f 	sg
 c038cb4:	f7e2 bd14 	b.w	c01b6e0 <__acle_se_tfm_psa_connect_veneer>

0c038cb8 <TZ_AllocModuleContext_S>:
 c038cb8:	e97f e97f 	sg
 c038cbc:	f7fa bc43 	b.w	c033546 <__acle_se_TZ_AllocModuleContext_S>

0c038cc0 <TZ_StoreContext_S>:
 c038cc0:	e97f e97f 	sg
 c038cc4:	f7fa bc57 	b.w	c033576 <__acle_se_TZ_StoreContext_S>

0c038cc8 <tfm_psa_call_veneer>:
 c038cc8:	e97f e97f 	sg
 c038ccc:	f7e2 bd36 	b.w	c01b73c <__acle_se_tfm_psa_call_veneer>
	...
